# 1 "arch/x86/kvm/vmx/vmx.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 340 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "././include/linux/compiler-version.h" 1
# 2 "<built-in>" 2
# 1 "././include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "././include/linux/kconfig.h" 2
# 3 "<built-in>" 2
# 1 "././include/linux/compiler_types.h" 1
# 65 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler_attributes.h" 1
# 66 "././include/linux/compiler_types.h" 2
# 80 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler-clang.h" 1
# 81 "././include/linux/compiler_types.h" 2
# 102 "././include/linux/compiler_types.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 4 "<built-in>" 2
# 1 "arch/x86/kvm/vmx/vmx.c" 2
# 16 "arch/x86/kvm/vmx/vmx.c"
# 1 "./include/linux/highmem.h" 1




# 1 "./include/linux/fs.h" 1




# 1 "./include/linux/linkage.h" 1





# 1 "./include/linux/stringify.h" 1
# 7 "./include/linux/linkage.h" 2
# 1 "./include/linux/export.h" 1
# 16 "./include/linux/export.h"
extern struct module __this_module;
# 43 "./include/linux/export.h"
# 1 "./include/linux/compiler.h" 1
# 250 "./include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 266 "./include/linux/compiler.h"
# 1 "./arch/x86/include/generated/asm/rwonce.h" 1
# 1 "./include/asm-generic/rwonce.h" 1
# 26 "./include/asm-generic/rwonce.h"
# 1 "./include/linux/kasan-checks.h" 1




# 1 "./include/linux/types.h" 1





# 1 "./include/uapi/linux/types.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 1 "./include/uapi/asm-generic/types.h" 1






# 1 "./include/asm-generic/int-ll64.h" 1
# 11 "./include/asm-generic/int-ll64.h"
# 1 "./include/uapi/asm-generic/int-ll64.h" 1
# 12 "./include/uapi/asm-generic/int-ll64.h"
# 1 "./arch/x86/include/uapi/asm/bitsperlong.h" 1
# 11 "./arch/x86/include/uapi/asm/bitsperlong.h"
# 1 "./include/asm-generic/bitsperlong.h" 1




# 1 "./include/uapi/asm-generic/bitsperlong.h" 1
# 6 "./include/asm-generic/bitsperlong.h" 2
# 12 "./arch/x86/include/uapi/asm/bitsperlong.h" 2
# 13 "./include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "./include/asm-generic/int-ll64.h" 2




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 8 "./include/uapi/asm-generic/types.h" 2
# 2 "./arch/x86/include/generated/uapi/asm/types.h" 2
# 6 "./include/uapi/linux/types.h" 2








# 1 "./include/uapi/linux/posix_types.h" 1




# 1 "./include/linux/stddef.h" 1




# 1 "./include/uapi/linux/stddef.h" 1
# 6 "./include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "./include/uapi/linux/posix_types.h" 2
# 25 "./include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "./arch/x86/include/asm/posix_types.h" 1




# 1 "./arch/x86/include/uapi/asm/posix_types_64.h" 1
# 11 "./arch/x86/include/uapi/asm/posix_types_64.h"
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "./include/uapi/asm-generic/posix_types.h" 1
# 15 "./include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "./include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;



typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "./arch/x86/include/uapi/asm/posix_types_64.h" 2
# 6 "./arch/x86/include/asm/posix_types.h" 2
# 37 "./include/uapi/linux/posix_types.h" 2
# 15 "./include/uapi/linux/types.h" 2
# 29 "./include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "./include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 7 "./include/linux/types.h" 2






typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ulong_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;
# 46 "./include/linux/types.h"
typedef __kernel_loff_t loff_t;
# 55 "./include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 125 "./include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 143 "./include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;




typedef struct {
 s64 counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;



 unsigned long f_tinode;

 char f_fname[6];
 char f_fpack[6];
};
# 220 "./include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);

typedef void (*swap_func_t)(void *a, void *b, int size);

typedef int (*cmp_r_func_t)(const void *a, const void *b, const void *priv);
typedef int (*cmp_func_t)(const void *a, const void *b);
# 6 "./include/linux/kasan-checks.h" 2
# 22 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 40 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 27 "./include/asm-generic/rwonce.h" 2
# 1 "./include/linux/kcsan-checks.h" 1
# 151 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_check_access(const volatile void *ptr, size_t size,
     int type) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_disable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current_nowarn(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_atomic_next(int n) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_set_access_mask(unsigned long mask) { }

struct kcsan_scoped_access { };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kcsan_scoped_access *
kcsan_begin_scoped_access(const volatile void *ptr, size_t size, int type,
     struct kcsan_scoped_access *sa) { return sa; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_end_scoped_access(struct kcsan_scoped_access *sa) { }
# 187 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_check_access(const volatile void *ptr, size_t size,
          int type) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_disable_current(void) { }
# 28 "./include/asm-generic/rwonce.h" 2
# 64 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long __read_once_word_nocheck(const void *addr)
{
 return (*(const volatile typeof( _Generic((*(unsigned long *)addr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(unsigned long *)addr))) *)&(*(unsigned long *)addr));
}
# 82 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 2 "./arch/x86/include/generated/asm/rwonce.h" 2
# 267 "./include/linux/compiler.h" 2
# 44 "./include/linux/export.h" 2
# 60 "./include/linux/export.h"
struct kernel_symbol {
 int value_offset;
 int name_offset;
 int namespace_offset;
};
# 8 "./include/linux/linkage.h" 2
# 1 "./arch/x86/include/asm/linkage.h" 1
# 9 "./include/linux/linkage.h" 2
# 6 "./include/linux/fs.h" 2
# 1 "./include/linux/wait_bit.h" 1







# 1 "./include/linux/wait.h" 1






# 1 "./include/linux/list.h" 1




# 1 "./include/linux/container_of.h" 1




# 1 "./include/linux/build_bug.h" 1
# 6 "./include/linux/container_of.h" 2
# 1 "./include/linux/err.h" 1







# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
# 1 "./include/uapi/asm-generic/errno.h" 1




# 1 "./include/uapi/asm-generic/errno-base.h" 1
# 6 "./include/uapi/asm-generic/errno.h" 2
# 2 "./arch/x86/include/generated/uapi/asm/errno.h" 2
# 9 "./include/linux/err.h" 2
# 24 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 7 "./include/linux/container_of.h" 2
# 6 "./include/linux/list.h" 2


# 1 "./include/linux/poison.h" 1
# 9 "./include/linux/list.h" 2
# 1 "./include/linux/const.h" 1



# 1 "./include/vdso/const.h" 1




# 1 "./include/uapi/linux/const.h" 1
# 6 "./include/vdso/const.h" 2
# 5 "./include/linux/const.h" 2
# 10 "./include/linux/list.h" 2

# 1 "./arch/x86/include/asm/barrier.h" 1




# 1 "./arch/x86/include/asm/alternative.h" 1






# 1 "./arch/x86/include/asm/asm.h" 1
# 130 "./arch/x86/include/asm/asm.h"
# 1 "./arch/x86/include/asm/extable_fixup_types.h" 1
# 131 "./arch/x86/include/asm/asm.h" 2
# 155 "./arch/x86/include/asm/asm.h"
asm(
"	.macro extable_type_reg type:req reg:req\n"
"	.set found, 0\n"
"	.set regnr, 0\n"
"	.irp rs,rax,rcx,rdx,rbx,rsp,rbp,rsi,rdi,r8,r9,r10,r11,r12,r13,r14,r15\n"
"	.ifc \\reg, %\\rs\n"
"	.set found, found+1\n"
"	.long \\type + (regnr << 8)\n"
"	.endif\n"
"	.set regnr, regnr+1\n"
"	.endr\n"
"	.set regnr, 0\n"
"	.irp rs,eax,ecx,edx,ebx,esp,ebp,esi,edi,r8d,r9d,r10d,r11d,r12d,r13d,r14d,r15d\n"
"	.ifc \\reg, %\\rs\n"
"	.set found, found+1\n"
"	.long \\type + (regnr << 8)\n"
"	.endif\n"
"	.set regnr, regnr+1\n"
"	.endr\n"
"	.if (found != 1)\n"
"	.error \"extable_type_reg: bad register argument\"\n"
"	.endif\n"
"	.endm\n"
);
# 204 "./arch/x86/include/asm/asm.h"
register unsigned long current_stack_pointer asm("rsp");
# 8 "./arch/x86/include/asm/alternative.h" 2
# 62 "./arch/x86/include/asm/alternative.h"
struct alt_instr {
 s32 instr_offset;
 s32 repl_offset;
 u16 cpuid;
 u8 instrlen;
 u8 replacementlen;
} __attribute__((__packed__));





extern int alternatives_patched;

extern void alternative_instructions(void);
extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);
extern void apply_retpolines(s32 *start, s32 *end);

struct module;
# 91 "./arch/x86/include/asm/alternative.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alternatives_smp_module_add(struct module *mod, char *name,
            void *locks, void *locks_end,
            void *text, void *text_end) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alternatives_smp_module_del(struct module *mod) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alternatives_enable_smp(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int alternatives_text_reserved(void *start, void *end)
{
 return 0;
}
# 6 "./arch/x86/include/asm/barrier.h" 2
# 1 "./arch/x86/include/asm/nops.h" 1
# 74 "./arch/x86/include/asm/nops.h"
extern const unsigned char * const x86_nops[];
# 7 "./arch/x86/include/asm/barrier.h" 2
# 36 "./arch/x86/include/asm/barrier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long array_index_mask_nospec(unsigned long index,
  unsigned long size)
{
 unsigned long mask;

 asm volatile ("cmp %1,%2; sbb %0,%0;"
   :"=r" (mask)
   :"g"(size),"r" (index)
   :"cc");
 return mask;
}
# 82 "./arch/x86/include/asm/barrier.h"
# 1 "./include/asm-generic/barrier.h" 1
# 17 "./include/asm-generic/barrier.h"
# 1 "./arch/x86/include/generated/asm/rwonce.h" 1
# 18 "./include/asm-generic/barrier.h" 2
# 83 "./arch/x86/include/asm/barrier.h" 2
# 97 "./arch/x86/include/asm/barrier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void weak_wrmsr_fence(void)
{
 asm volatile("mfence; lfence" : : : "memory");
}
# 12 "./include/linux/list.h" 2
# 35 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD(struct list_head *list)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_0(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_0(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 list->prev = list;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __list_add_valid(struct list_head *new,
    struct list_head *prev,
    struct list_head *next)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __list_del_entry_valid(struct list_head *entry)
{
 return true;
}
# 65 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_1(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_1(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (new); } while (0); } while (0);
}
# 86 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 100 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 112 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_2(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_2(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
}
# 126 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + (0xdead000000000000UL));
 entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 160 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}
# 176 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_replace_init(struct list_head *old,
         struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 242 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_empty(const struct list_head *head)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_3(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->next) == sizeof(char) || sizeof(head->next) == sizeof(short) || sizeof(head->next) == sizeof(int) || sizeof(head->next) == sizeof(long)) || sizeof(head->next) == sizeof(long long))) __compiletime_assert_3(); } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); }) == head;
}
# 298 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del_init_careful(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = entry;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_4(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)))) __compiletime_assert_4(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_5(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)) || sizeof(*&entry->next) == sizeof(long long))) __compiletime_assert_5(); } while (0); do { *(volatile typeof(*&entry->next) *)&(*&entry->next) = (entry); } while (0); } while (0); } while (0);
}
# 318 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = ({ typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_6(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)) || sizeof(*&head->next) == sizeof(long long))) __compiletime_assert_6(); } while (0); (*(const volatile typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) *)&(*&head->next)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_7(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)))) __compiletime_assert_7(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&head->next))___p1; });
 return (next == head) && (next == head->prev);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 345 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 391 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 419 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 480 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 497 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 794 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}
# 808 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}
# 821 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hlist_unhashed_lockless(const struct hlist_node *h)
{
 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_8(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->pprev) == sizeof(char) || sizeof(h->pprev) == sizeof(short) || sizeof(h->pprev) == sizeof(int) || sizeof(h->pprev) == sizeof(long)) || sizeof(h->pprev) == sizeof(long long))) __compiletime_assert_8(); } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hlist_empty(const struct hlist_head *h)
{
 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_9(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_9(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_10(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_10(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
 if (next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_11(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_11(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
}
# 852 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}
# 881 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_12(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_12(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (first); } while (0); } while (0);
 if (first)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_13(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_13(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_14(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_14(); } while (0); do { *(volatile typeof(h->first) *)&(h->first) = (n); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_15(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_15(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_before(struct hlist_node *n,
        struct hlist_node *next)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_16(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_16(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_17(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_17(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_18(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_18(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_19(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(n->pprev)) == sizeof(char) || sizeof(*(n->pprev)) == sizeof(short) || sizeof(*(n->pprev)) == sizeof(int) || sizeof(*(n->pprev)) == sizeof(long)) || sizeof(*(n->pprev)) == sizeof(long long))) __compiletime_assert_19(); } while (0); do { *(volatile typeof(*(n->pprev)) *)&(*(n->pprev)) = (n); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_20(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_20(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (prev->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_21(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_21(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (n); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_22(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_22(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);

 if (n->next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_23(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_23(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 929 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}
# 951 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}
# 965 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 8 "./include/linux/wait.h" 2

# 1 "./include/linux/spinlock.h" 1
# 54 "./include/linux/spinlock.h"
# 1 "./include/linux/typecheck.h" 1
# 55 "./include/linux/spinlock.h" 2
# 1 "./include/linux/preempt.h" 1
# 78 "./include/linux/preempt.h"
# 1 "./arch/x86/include/asm/preempt.h" 1




# 1 "./arch/x86/include/asm/rmwcc.h" 1
# 6 "./arch/x86/include/asm/preempt.h" 2
# 1 "./arch/x86/include/asm/percpu.h" 1
# 27 "./arch/x86/include/asm/percpu.h"
# 1 "./include/linux/kernel.h" 1




# 1 "./include/linux/stdarg.h" 1




typedef __builtin_va_list va_list;
# 6 "./include/linux/kernel.h" 2
# 1 "./include/linux/align.h" 1
# 7 "./include/linux/kernel.h" 2
# 1 "./include/linux/limits.h" 1




# 1 "./include/uapi/linux/limits.h" 1
# 6 "./include/linux/limits.h" 2

# 1 "./include/vdso/limits.h" 1
# 8 "./include/linux/limits.h" 2
# 8 "./include/linux/kernel.h" 2





# 1 "./include/linux/bitops.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 6 "./include/linux/bitops.h" 2
# 1 "./include/linux/bits.h" 1





# 1 "./include/vdso/bits.h" 1
# 7 "./include/linux/bits.h" 2
# 7 "./include/linux/bitops.h" 2


# 1 "./include/uapi/linux/kernel.h" 1




# 1 "./include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "./include/uapi/linux/kernel.h" 2
# 10 "./include/linux/bitops.h" 2
# 24 "./include/linux/bitops.h"
extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);





# 1 "./arch/x86/include/asm/bitops.h" 1
# 51 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_set_bit(long nr, volatile unsigned long *addr)
{
 if (__builtin_constant_p(nr)) {
  asm volatile("" "orb %b1,%0"
   : "+m" (*(volatile char *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((1 << ((nr) & 7)))
   : "memory");
 } else {
  asm volatile("" " " "btsq" " " " %1,%0"
   : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch___set_bit(long nr, volatile unsigned long *addr)
{
 asm volatile(" " "btsq" " " " %1,%0" : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_clear_bit(long nr, volatile unsigned long *addr)
{
 if (__builtin_constant_p(nr)) {
  asm volatile("" "andb %b1,%0"
   : "+m" (*(volatile char *) ((void *)(addr) + ((nr)>>3)))
   : "iq" (~(1 << ((nr) & 7))));
 } else {
  asm volatile("" " " "btrq" " " " %1,%0"
   : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 arch_clear_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch___clear_bit(long nr, volatile unsigned long *addr)
{
 asm volatile(" " "btrq" " " " %1,%0" : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)
{
 bool negative;
 asm volatile("" "andb %2,%1"
  "\n\t/* output condition code " "s" "*/\n"
  : "=@cc" "s" (negative), "+m" (*(volatile char *) (addr))
  : "ir" ((char) ~(1 << nr)) : "memory");
 return negative;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch___clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 arch___clear_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch___change_bit(long nr, volatile unsigned long *addr)
{
 asm volatile(" " "btcq" " " " %1,%0" : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_change_bit(long nr, volatile unsigned long *addr)
{
 if (__builtin_constant_p(nr)) {
  asm volatile("" "xorb %b1,%0"
   : "+m" (*(volatile char *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((1 << ((nr) & 7))));
 } else {
  asm volatile("" " " "btcq" " " " %1,%0"
   : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_test_and_set_bit(long nr, volatile unsigned long *addr)
{
 return ({ bool c; asm volatile ("" " " "btsq" " " " %[val], " "%[var]" "\n\t/* output condition code " "c" "*/\n" : [var] "+m" (*addr), "=@cc" "c" (c) : [val] "Ir" (nr) : "memory"); c; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_test_and_set_bit_lock(long nr, volatile unsigned long *addr)
{
 return arch_test_and_set_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch___test_and_set_bit(long nr, volatile unsigned long *addr)
{
 bool oldbit;

 asm(" " "btsq" " " " %2,%1"
     "\n\t/* output condition code " "c" "*/\n"
     : "=@cc" "c" (oldbit)
     : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
 return oldbit;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 return ({ bool c; asm volatile ("" " " "btrq" " " " %[val], " "%[var]" "\n\t/* output condition code " "c" "*/\n" : [var] "+m" (*addr), "=@cc" "c" (c) : [val] "Ir" (nr) : "memory"); c; });
}
# 173 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch___test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 bool oldbit;

 asm volatile(" " "btrq" " " " %2,%1"
       "\n\t/* output condition code " "c" "*/\n"
       : "=@cc" "c" (oldbit)
       : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
 return oldbit;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch___test_and_change_bit(long nr, volatile unsigned long *addr)
{
 bool oldbit;

 asm volatile(" " "btcq" " " " %2,%1"
       "\n\t/* output condition code " "c" "*/\n"
       : "=@cc" "c" (oldbit)
       : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");

 return oldbit;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_test_and_change_bit(long nr, volatile unsigned long *addr)
{
 return ({ bool c; asm volatile ("" " " "btcq" " " " %[val], " "%[var]" "\n\t/* output condition code " "c" "*/\n" : [var] "+m" (*addr), "=@cc" "c" (c) : [val] "Ir" (nr) : "memory"); c; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool constant_test_bit(long nr, const volatile unsigned long *addr)
{
 return ((1UL << (nr & (64 -1))) &
  (addr[nr >> 6])) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool variable_test_bit(long nr, volatile const unsigned long *addr)
{
 bool oldbit;

 asm volatile(" " "btq" " " " %2,%1"
       "\n\t/* output condition code " "c" "*/\n"
       : "=@cc" "c" (oldbit)
       : "m" (*(unsigned long *)addr), "Ir" (nr) : "memory");

 return oldbit;
}
# 233 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "rm" (word));
 return word;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long ffz(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "r" (~word));
 return word;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 asm("bsr %1,%0"
     : "=r" (word)
     : "rm" (word));
 return word;
}
# 283 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int ffs(int x)
{
 int r;
# 297 "./arch/x86/include/asm/bitops.h"
 asm("bsfl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
# 310 "./arch/x86/include/asm/bitops.h"
 return r + 1;
}
# 324 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int fls(unsigned int x)
{
 int r;
# 338 "./arch/x86/include/asm/bitops.h"
 asm("bsrl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
# 351 "./arch/x86/include/asm/bitops.h"
 return r + 1;
}
# 366 "./arch/x86/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int fls64(__u64 x)
{
 int bitpos = -1;





 asm("bsrq %1,%q0"
     : "+r" (bitpos)
     : "rm" (x));
 return bitpos + 1;
}




# 1 "./include/asm-generic/bitops/find.h" 1




extern unsigned long _find_next_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long nbits,
  unsigned long start, unsigned long invert, unsigned long le);
extern unsigned long _find_first_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_first_zero_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_last_bit(const unsigned long *addr, unsigned long size);
# 22 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
       unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr, ((void *)0), size, offset, 0UL, 0);
}
# 51 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr1 & *addr2 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr1, addr2, size, offset, 0UL, 0);
}
# 80 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
     unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val == ~0UL ? size : ffz(val);
 }

 return _find_next_bit(addr, ((void *)0), size, offset, ~0UL, 0);
}
# 108 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long find_first_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __ffs(val) : size;
 }

 return _find_first_bit(addr, size);
}
# 128 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long find_first_zero_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val == ~0UL ? size : ffz(val);
 }

 return _find_first_zero_bit(addr, size);
}
# 158 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long find_last_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __fls(val) : size;
 }

 return _find_last_bit(addr, size);
}
# 181 "./include/asm-generic/bitops/find.h"
extern unsigned long find_next_clump8(unsigned long *clump,
          const unsigned long *addr,
          unsigned long size, unsigned long offset);
# 384 "./arch/x86/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/sched.h" 1





# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/bitops/sched.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "./include/asm-generic/bitops/sched.h"
}
# 386 "./arch/x86/include/asm/bitops.h" 2

# 1 "./arch/x86/include/asm/arch_hweight.h" 1




# 1 "./arch/x86/include/asm/cpufeatures.h" 1





# 1 "./arch/x86/include/asm/required-features.h" 1
# 7 "./arch/x86/include/asm/cpufeatures.h" 2



# 1 "./arch/x86/include/asm/disabled-features.h" 1
# 11 "./arch/x86/include/asm/cpufeatures.h" 2
# 6 "./arch/x86/include/asm/arch_hweight.h" 2
# 15 "./arch/x86/include/asm/arch_hweight.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned int __arch_hweight32(unsigned int w)
{
 unsigned int res;

 asm ("# ALT: oldnstr\n" "661:\n\t" "call __sw_hweight32" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "popcntl %1, %0" "\n" "665""1" ":\n" ".popsection\n"
    : "=""a" (res)
    : "D" (w));

 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __arch_hweight16(unsigned int w)
{
 return __arch_hweight32(w & 0xffff);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __arch_hweight8(unsigned int w)
{
 return __arch_hweight32(w & 0xff);
}
# 43 "./arch/x86/include/asm/arch_hweight.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __arch_hweight64(__u64 w)
{
 unsigned long res;

 asm ("# ALT: oldnstr\n" "661:\n\t" "call __sw_hweight64" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "popcntq %1, %0" "\n" "665""1" ":\n" ".popsection\n"
    : "=""a" (res)
    : "D" (w));

 return res;
}
# 388 "./arch/x86/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/const_hweight.h" 1
# 390 "./arch/x86/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/instrumented-atomic.h" 1
# 14 "./include/asm-generic/bitops/instrumented-atomic.h"
# 1 "./include/linux/instrumented.h" 1
# 24 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, 0);
}
# 39 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 0));
}
# 54 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 1) | (1 << 0));
}
# 69 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_atomic_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, (1 << 2));
}
# 84 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_atomic_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0));
}
# 99 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_atomic_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0) | (1 << 1));
}
# 115 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
instrument_copy_to_user(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 kcsan_check_access(from, n, 0);
}
# 132 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
instrument_copy_from_user(const void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 kcsan_check_access(to, n, (1 << 0));
}
# 15 "./include/asm-generic/bitops/instrumented-atomic.h" 2
# 26 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_set_bit(nr, addr);
}
# 39 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_clear_bit(nr, addr);
}
# 55 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void change_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_change_bit(nr, addr);
}
# 68 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_set_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_set_bit(nr, addr);
}
# 81 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_clear_bit(nr, addr);
}
# 94 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_change_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_change_bit(nr, addr);
}
# 392 "./arch/x86/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/instrumented-non-atomic.h" 1
# 25 "./include/asm-generic/bitops/instrumented-non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __set_bit(long nr, volatile unsigned long *addr)
{
 instrument_write(addr + ((nr) / 64), sizeof(long));
 arch___set_bit(nr, addr);
}
# 40 "./include/asm-generic/bitops/instrumented-non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clear_bit(long nr, volatile unsigned long *addr)
{
 instrument_write(addr + ((nr) / 64), sizeof(long));
 arch___clear_bit(nr, addr);
}
# 55 "./include/asm-generic/bitops/instrumented-non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __change_bit(long nr, volatile unsigned long *addr)
{
 instrument_write(addr + ((nr) / 64), sizeof(long));
 arch___change_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __instrument_read_write_bitop(long nr, volatile unsigned long *addr)
{
 if (0) {
# 74 "./include/asm-generic/bitops/instrumented-non-atomic.h"
  kcsan_check_access(addr + ((nr) / 64), sizeof(long), 0);




  instrument_write(addr + ((nr) / 64), sizeof(long));
 } else {
  instrument_read_write(addr + ((nr) / 64), sizeof(long));
 }
}
# 93 "./include/asm-generic/bitops/instrumented-non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __test_and_set_bit(long nr, volatile unsigned long *addr)
{
 __instrument_read_write_bitop(nr, addr);
 return arch___test_and_set_bit(nr, addr);
}
# 107 "./include/asm-generic/bitops/instrumented-non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 __instrument_read_write_bitop(nr, addr);
 return arch___test_and_clear_bit(nr, addr);
}
# 121 "./include/asm-generic/bitops/instrumented-non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __test_and_change_bit(long nr, volatile unsigned long *addr)
{
 __instrument_read_write_bitop(nr, addr);
 return arch___test_and_change_bit(nr, addr);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_bit(long nr, const volatile unsigned long *addr)
{
 instrument_atomic_read(addr + ((nr) / 64), sizeof(long));
 return (__builtin_constant_p((nr)) ? constant_test_bit((nr), (addr)) : variable_test_bit((nr), (addr)));
}
# 393 "./arch/x86/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/instrumented-lock.h" 1
# 23 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_clear_bit_unlock(nr, addr);
}
# 38 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 instrument_write(addr + ((nr) / 64), sizeof(long));
 arch___clear_bit_unlock(nr, addr);
}
# 53 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_set_bit_lock(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_set_bit_lock(nr, addr);
}
# 71 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 return arch_clear_bit_unlock_is_negative_byte(nr, addr);
}
# 394 "./arch/x86/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/le.h" 1





# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/bitops/le.h" 2
# 1 "./arch/x86/include/uapi/asm/byteorder.h" 1




# 1 "./include/linux/byteorder/little_endian.h" 1




# 1 "./include/uapi/linux/byteorder/little_endian.h" 1
# 13 "./include/uapi/linux/byteorder/little_endian.h"
# 1 "./include/linux/swab.h" 1




# 1 "./include/uapi/linux/swab.h" 1







# 1 "./arch/x86/include/uapi/asm/swab.h" 1







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __arch_swab32(__u32 val)
{
 asm("bswapl %0" : "=r" (val) : "0" (val));
 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __arch_swab64(__u64 val)
{
# 31 "./arch/x86/include/uapi/asm/swab.h"
 asm("bswapq %0" : "=r" (val) : "0" (val));
 return val;

}
# 9 "./include/uapi/linux/swab.h" 2
# 48 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{

 return __arch_swab32(val);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{

 return __arch_swab64(val);







}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __swab(const unsigned long y)
{

 return (__u64)__builtin_bswap64((__u64)(y));



}
# 171 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__u16)__builtin_bswap16((__u16)(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__u32)__builtin_bswap32((__u32)(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__u64)__builtin_bswap64((__u64)(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "./include/linux/swab.h" 2
# 14 "./include/uapi/linux/byteorder/little_endian.h" 2
# 44 "./include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "./include/linux/byteorder/little_endian.h" 2





# 1 "./include/linux/byteorder/generic.h" 1
# 144 "./include/linux/byteorder/generic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__u16)__builtin_bswap16((__u16)(((__u16)__builtin_bswap16((__u16)(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__u32)__builtin_bswap32((__u32)(((__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__u64)__builtin_bswap64((__u64)(((__u64)__builtin_bswap64((__u64)(( __u64)(__be64)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__u32)__builtin_bswap32((__u32)((src[i]))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(src[i])));
}
# 12 "./include/linux/byteorder/little_endian.h" 2
# 6 "./arch/x86/include/uapi/asm/byteorder.h" 2
# 8 "./include/asm-generic/bitops/le.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_first_zero_bit(addr, size);
}
# 83 "./include/asm-generic/bitops/le.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_bit_le(int nr, const void *addr)
{
 return test_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __set_bit_le(int nr, void *addr)
{
 __set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clear_bit_le(int nr, void *addr)
{
 __clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __test_and_set_bit_le(int nr, void *addr)
{
 return __test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return __test_and_clear_bit(nr ^ 0, addr);
}
# 396 "./arch/x86/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 398 "./arch/x86/include/asm/bitops.h" 2
# 34 "./include/linux/bitops.h" 2
# 69 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p((__u64)w) ? (((((unsigned int) ((!!(((__u64)w) & (1ULL << 0))) + (!!(((__u64)w) & (1ULL << 1))) + (!!(((__u64)w) & (1ULL << 2))) + (!!(((__u64)w) & (1ULL << 3))) + (!!(((__u64)w) & (1ULL << 4))) + (!!(((__u64)w) & (1ULL << 5))) + (!!(((__u64)w) & (1ULL << 6))) + (!!(((__u64)w) & (1ULL << 7))))) + ((unsigned int) ((!!((((__u64)w) >> 8) & (1ULL << 0))) + (!!((((__u64)w) >> 8) & (1ULL << 1))) + (!!((((__u64)w) >> 8) & (1ULL << 2))) + (!!((((__u64)w) >> 8) & (1ULL << 3))) + (!!((((__u64)w) >> 8) & (1ULL << 4))) + (!!((((__u64)w) >> 8) & (1ULL << 5))) + (!!((((__u64)w) >> 8) & (1ULL << 6))) + (!!((((__u64)w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((__u64)w) >> 16) & (1ULL << 0))) + (!!((((__u64)w) >> 16) & (1ULL << 1))) + (!!((((__u64)w) >> 16) & (1ULL << 2))) + (!!((((__u64)w) >> 16) & (1ULL << 3))) + (!!((((__u64)w) >> 16) & (1ULL << 4))) + (!!((((__u64)w) >> 16) & (1ULL << 5))) + (!!((((__u64)w) >> 16) & (1ULL << 6))) + (!!((((__u64)w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 16) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!((((__u64)w) >> 32) & (1ULL << 0))) + (!!((((__u64)w) >> 32) & (1ULL << 1))) + (!!((((__u64)w) >> 32) & (1ULL << 2))) + (!!((((__u64)w) >> 32) & (1ULL << 3))) + (!!((((__u64)w) >> 32) & (1ULL << 4))) + (!!((((__u64)w) >> 32) & (1ULL << 5))) + (!!((((__u64)w) >> 32) & (1ULL << 6))) + (!!((((__u64)w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 32) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((__u64)w) >> 32) >> 16) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64((__u64)w));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 169 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_count_order(unsigned int count)
{
 if (count == 0)
  return -1;

 return fls(--count);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 return (int)fls_long(--l);
}
# 222 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  set_bit(nr, addr);
 else
  clear_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  __set_bit(nr, addr);
 else
  __clear_bit(nr, addr);
}
# 14 "./include/linux/kernel.h" 2
# 1 "./include/linux/kstrtox.h" 1








int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 30 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 58 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}
# 145 "./include/linux/kstrtox.h"
extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}
# 15 "./include/linux/kernel.h" 2
# 1 "./include/linux/log2.h" 1
# 21 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 44 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 198 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ((n - 1) < 2 ? 0 : 63 - __builtin_clzll(n - 1)) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 225 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 16 "./include/linux/kernel.h" 2
# 1 "./include/linux/math.h" 1




# 1 "./arch/x86/include/asm/div64.h" 1
# 75 "./arch/x86/include/asm/div64.h"
# 1 "./include/asm-generic/div64.h" 1
# 76 "./arch/x86/include/asm/div64.h" 2





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div)
{
 u64 q;

 asm ("mulq %2; divq %3" : "=a" (q)
    : "a" (a), "rm" (mul), "rm" (div)
    : "rdx");

 return q;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 div)
{
 return mul_u64_u64_div_u64(a, mul, div);
}
# 6 "./include/linux/math.h" 2
# 160 "./include/linux/math.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 int_sqrt64(u64 x)
{
 return (u32)int_sqrt(x);
}
# 17 "./include/linux/kernel.h" 2
# 1 "./include/linux/minmax.h" 1
# 18 "./include/linux/kernel.h" 2

# 1 "./include/linux/panic.h" 1







struct pt_regs;

extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
extern bool oops_may_print(void);







extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;

extern unsigned long panic_on_taint;
extern bool panic_on_taint_nousertaint;

extern int sysctl_panic_on_rcu_stall;
extern int sysctl_max_rcu_stall_to_panic;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
# 80 "./include/linux/panic.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE,
};

extern const char *print_tainted(void);
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
# 20 "./include/linux/kernel.h" 2
# 1 "./include/linux/printk.h" 1





# 1 "./include/linux/init.h" 1
# 116 "./include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);


typedef int initcall_entry_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return offset_to_ptr(entry);
}
# 135 "./include/linux/init.h"
extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;


extern bool rodata_enabled;


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 7 "./include/linux/printk.h" 2
# 1 "./include/linux/kern_levels.h" 1
# 8 "./include/linux/printk.h" 2

# 1 "./include/linux/cache.h" 1





# 1 "./arch/x86/include/asm/cache.h" 1
# 7 "./include/linux/cache.h" 2
# 10 "./include/linux/printk.h" 2
# 1 "./include/linux/ratelimit_types.h" 1





# 1 "./include/uapi/linux/param.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/param.h" 1
# 1 "./include/asm-generic/param.h" 1




# 1 "./include/uapi/asm-generic/param.h" 1
# 6 "./include/asm-generic/param.h" 2
# 2 "./arch/x86/include/generated/uapi/asm/param.h" 2
# 6 "./include/uapi/linux/param.h" 2
# 7 "./include/linux/ratelimit_types.h" 2
# 1 "./include/linux/spinlock_types.h" 1
# 12 "./include/linux/spinlock_types.h"
# 1 "./include/linux/spinlock_types_raw.h" 1








# 1 "./include/linux/spinlock_types_up.h" 1
# 17 "./include/linux/spinlock_types_up.h"
typedef struct {
 volatile unsigned int slock;
} arch_spinlock_t;
# 31 "./include/linux/spinlock_types_up.h"
typedef struct {

} arch_rwlock_t;
# 10 "./include/linux/spinlock_types_raw.h" 2


# 1 "./include/linux/lockdep_types.h" 1
# 17 "./include/linux/lockdep_types.h"
enum lockdep_wait_type {
 LD_WAIT_INV = 0,

 LD_WAIT_FREE,
 LD_WAIT_SPIN,




 LD_WAIT_CONFIG = LD_WAIT_SPIN,

 LD_WAIT_SLEEP,

 LD_WAIT_MAX,
};

enum lockdep_lock_type {
 LD_LOCK_NORMAL = 0,
 LD_LOCK_PERCPU,
 LD_LOCK_MAX,
};
# 69 "./include/linux/lockdep_types.h"
struct lockdep_subclass_key {
 char __one_byte;
} __attribute__ ((__packed__));


struct lock_class_key {
 union {
  struct hlist_node hash_entry;
  struct lockdep_subclass_key subkeys[8UL];
 };
};

extern struct lock_class_key __lockdep_no_validate__;

struct lock_trace;







struct lock_class {



 struct hlist_node hash_entry;






 struct list_head lock_entry;






 struct list_head locks_after, locks_before;

 const struct lockdep_subclass_key *key;
 unsigned int subclass;
 unsigned int dep_gen_id;




 unsigned long usage_mask;
 const struct lock_trace *usage_traces[(2*4 + 2)];





 int name_version;
 const char *name;

 u8 wait_type_inner;
 u8 wait_type_outer;
 u8 lock_type;



 unsigned long contention_point[4];
 unsigned long contending_point[4];

} ;


struct lock_time {
 s64 min;
 s64 max;
 s64 total;
 unsigned long nr;
};

enum bounce_type {
 bounce_acquired_write,
 bounce_acquired_read,
 bounce_contended_write,
 bounce_contended_read,
 nr_bounce_types,

 bounce_acquired = bounce_acquired_write,
 bounce_contended = bounce_contended_write,
};

struct lock_class_stats {
 unsigned long contention_point[4];
 unsigned long contending_point[4];
 struct lock_time read_waittime;
 struct lock_time write_waittime;
 struct lock_time read_holdtime;
 struct lock_time write_holdtime;
 unsigned long bounces[nr_bounce_types];
};

struct lock_class_stats lock_stats(struct lock_class *class);
void clear_lock_stats(struct lock_class *class);






struct lockdep_map {
 struct lock_class_key *key;
 struct lock_class *class_cache[2];
 const char *name;
 u8 wait_type_outer;
 u8 wait_type_inner;
 u8 lock_type;


 int cpu;
 unsigned long ip;

};

struct pin_cookie { unsigned int val; };
# 13 "./include/linux/spinlock_types_raw.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;

 unsigned int magic, owner_cpu;
 void *owner;


 struct lockdep_map dep_map;

} raw_spinlock_t;
# 13 "./include/linux/spinlock_types.h" 2




typedef struct spinlock {
 union {
  struct raw_spinlock rlock;



  struct {
   u8 __padding[(__builtin_offsetof(struct raw_spinlock, dep_map))];
   struct lockdep_map dep_map;
  };

 };
} spinlock_t;
# 74 "./include/linux/spinlock_types.h"
# 1 "./include/linux/rwlock_types.h" 1
# 25 "./include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;

 unsigned int magic, owner_cpu;
 void *owner;


 struct lockdep_map dep_map;

} rwlock_t;
# 75 "./include/linux/spinlock_types.h" 2
# 8 "./include/linux/ratelimit_types.h" 2







struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "./include/linux/ratelimit_types.h"
extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 11 "./include/linux/printk.h" 2
# 1 "./include/linux/once_lite.h" 1
# 12 "./include/linux/printk.h" 2

extern const char linux_banner[];
extern const char linux_proc_banner[];

extern int oops_in_progress;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 66 "./include/linux/printk.h"
extern int console_printk[];






extern void console_verbose(void);



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 140 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
void early_printk(const char *s, ...) { }


struct dev_printk_info;
# 202 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *s, va_list args)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int _printk(const char *s, ...)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int _printk_deferred(const char *s, ...)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void printk_deferred_enter(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void printk_deferred_exit(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int printk_ratelimit(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wake_up_klogd(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char *log_buf_addr_get(void)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 log_buf_len_get(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void log_buf_vmcoreinfo_setup(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void setup_log_buf(int early)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dump_stack_print_info(const char *log_lvl)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void show_regs_print_info(const char *log_lvl)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dump_stack_lvl(const char *log_lvl)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dump_stack(void)
{
}
# 320 "./include/linux/printk.h"
extern int kptr_restrict;
# 339 "./include/linux/printk.h"
struct module;
# 693 "./include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
     const void *buf, size_t len)
{
}
# 732 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 21 "./include/linux/kernel.h" 2

# 1 "./include/linux/static_call_types.h" 1
# 32 "./include/linux/static_call_types.h"
struct static_call_site {
 s32 addr;
 s32 key;
};
# 61 "./include/linux/static_call_types.h"
struct static_call_key {
 void *func;
 union {

  unsigned long type;
  struct static_call_mod *mods;
  struct static_call_site *sites;
 };
};
# 23 "./include/linux/kernel.h" 2
# 1 "./include/linux/instruction_pointer.h" 1
# 24 "./include/linux/kernel.h" 2
# 85 "./include/linux/kernel.h"
struct completion;
struct user;
# 95 "./include/linux/kernel.h"
extern int __cond_resched(void);

extern struct static_call_key __SCK__might_resched; extern typeof(__cond_resched) __SCT__might_resched;;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void might_resched(void)
{
 (&__SCT__might_resched)();
}
# 111 "./include/linux/kernel.h"
extern void __might_resched(const char *file, int line, unsigned int offsets);
extern void __might_sleep(const char *file, int line);
extern void __cant_sleep(const char *file, int line, int preempt_offset);
extern void __cant_migrate(const char *file, int line);
# 184 "./include/linux/kernel.h"
void __might_fault(const char *file, int line);




void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int no_hash_pointers_enable(char *str);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

extern void bust_spinlocks(int yes);

extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_FREEING_INITMEM,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;

extern const char hex_asc[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 301 "./include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2)))
void ____trace_printk_check_format(const char *fmt, ...)
{
}
# 380 "./include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, const char *fmt, ...);

extern __attribute__((__format__(printf, 2, 3)))
int __trace_printk(unsigned long ip, const char *fmt, ...);
# 421 "./include/linux/kernel.h"
extern int __trace_bputs(unsigned long ip, const char *str);
extern int __trace_puts(unsigned long ip, const char *str, int size);

extern void trace_dump_stack(int skip);
# 443 "./include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);

extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
# 28 "./arch/x86/include/asm/percpu.h" 2
# 358 "./arch/x86/include/asm/percpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool x86_this_cpu_constant_test_bit(unsigned int nr,
                        const unsigned long *addr)
{
 unsigned long *a =
  (unsigned long *)addr + nr / 64;


 return ((1UL << (nr % 64)) & ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (*a)); (typeof(*a))(unsigned long) pfo_val__; })) != 0;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool x86_this_cpu_variable_test_bit(int nr,
                        const unsigned long *addr)
{
 bool oldbit;

 asm volatile("btl """ "%" "2"",%1"
   "\n\t/* output condition code " "c" "*/\n"
   : "=@cc" "c" (oldbit)
   : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}







# 1 "./include/asm-generic/percpu.h" 1





# 1 "./include/linux/threads.h" 1
# 7 "./include/asm-generic/percpu.h" 2
# 1 "./include/linux/percpu-defs.h" 1
# 308 "./include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);


extern void __this_cpu_preempt_check(const char *op);
# 8 "./include/asm-generic/percpu.h" 2
# 391 "./arch/x86/include/asm/percpu.h" 2


extern __attribute__((section(".data" "..read_mostly"))) __typeof__(unsigned long) this_cpu_off;
# 7 "./arch/x86/include/asm/preempt.h" 2
# 1 "./include/linux/thread_info.h" 1
# 13 "./include/linux/thread_info.h"
# 1 "./include/linux/bug.h" 1




# 1 "./arch/x86/include/asm/bug.h" 1





# 1 "./include/linux/instrumentation.h" 1
# 7 "./arch/x86/include/asm/bug.h" 2
# 84 "./arch/x86/include/asm/bug.h"
# 1 "./include/asm-generic/bug.h" 1
# 85 "./arch/x86/include/asm/bug.h" 2
# 6 "./include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 53 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *find_bug(unsigned long bugaddr)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum bug_trap_type report_bug(unsigned long bug_addr,
         struct pt_regs *regs)
{
 return BUG_TRAP_TYPE_BUG;
}

struct bug_entry;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bug_get_file_line(struct bug_entry *bug, const char **file,
         unsigned int *line)
{
 *file = ((void *)0);
 *line = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void generic_bug_clear_once(void) {}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 14 "./include/linux/thread_info.h" 2
# 1 "./include/linux/restart_block.h" 1
# 10 "./include/linux/restart_block.h"
# 1 "./include/linux/time64.h" 1




# 1 "./include/linux/math64.h" 1






# 1 "./include/vdso/math64.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}
# 8 "./include/linux/math64.h" 2
# 26 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 40 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 54 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 67 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}
# 79 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 125 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 138 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u64_shr(u64 a, u64 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}
# 239 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_s64_u64_shr(s64 a, u64 b, unsigned int shift)
{
 u64 ret;





 ret = mul_u64_u64_shr(__builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long long) || __builtin_types_compatible_p(typeof(a), unsigned long long), ({ signed long long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long) || __builtin_types_compatible_p(typeof(a), unsigned long), ({ signed long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed int) || __builtin_types_compatible_p(typeof(a), unsigned int), ({ signed int __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed short) || __builtin_types_compatible_p(typeof(a), unsigned short), ({ signed short __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed char) || __builtin_types_compatible_p(typeof(a), unsigned char), ({ signed char __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), char), (char)({ signed char __x = (a); __x<0?-__x:__x; }), ((void)0))))))), b, shift);

 if (a < 0)
  ret = -((s64) ret);

 return ret;
}
# 285 "./include/linux/math64.h"
u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
# 6 "./include/linux/time64.h" 2
# 1 "./include/vdso/time64.h" 1
# 7 "./include/linux/time64.h" 2

typedef __s64 time64_t;
typedef __u64 timeu64_t;

# 1 "./include/uapi/linux/time.h" 1





# 1 "./include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "./include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_old_timespec {
 __kernel_old_time_t tv_sec;
 long tv_nsec;
};

struct __kernel_old_itimerval {
 struct __kernel_old_timeval it_interval;
 struct __kernel_old_timeval it_value;
};

struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "./include/uapi/linux/time.h" 2
# 33 "./include/uapi/linux/time.h"
struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 12 "./include/linux/time64.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 43 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 127 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 timespec64_to_ns(const struct timespec64 *ts)
{

 if (ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return ((s64)~((u64)1 << 63));

 if (ts->tv_sec <= ((-((s64)~((u64)1 << 63)) - 1) / 1000000000L))
  return (-((s64)~((u64)1 << 63)) - 1);

 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 155 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 11 "./include/linux/restart_block.h" 2

struct timespec;
struct old_timespec32;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,
 TT_COMPAT = 2,
};




struct restart_block {
 unsigned long arch_data;
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct __kernel_timespec *rmtp;
    struct old_timespec32 *compat_rmtp;
   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 15 "./include/linux/thread_info.h" 2
# 1 "./include/linux/errno.h" 1




# 1 "./include/uapi/linux/errno.h" 1
# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
# 2 "./include/uapi/linux/errno.h" 2
# 6 "./include/linux/errno.h" 2
# 16 "./include/linux/thread_info.h" 2







# 1 "./arch/x86/include/asm/current.h" 1








struct task_struct;

extern __attribute__((section(".data" ""))) __typeof__(struct task_struct *) current_task;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct task_struct *get_current(void)
{
 return ({ typeof(current_task) pscr_ret__; do { const void *__vpp_verify = (typeof((&(current_task)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(current_task)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm("mov" "b " "" "%" "P[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm("mov" "w " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm("mov" "l " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm("mov" "q " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 24 "./include/linux/thread_info.h" 2
# 33 "./include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};


enum syscall_work_bit {
 SYSCALL_WORK_BIT_SECCOMP,
 SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT,
 SYSCALL_WORK_BIT_SYSCALL_TRACE,
 SYSCALL_WORK_BIT_SYSCALL_EMU,
 SYSCALL_WORK_BIT_SYSCALL_AUDIT,
 SYSCALL_WORK_BIT_SYSCALL_USER_DISPATCH,
 SYSCALL_WORK_BIT_SYSCALL_EXIT_TRAP,
};
# 60 "./include/linux/thread_info.h"
# 1 "./arch/x86/include/asm/thread_info.h" 1
# 12 "./arch/x86/include/asm/thread_info.h"
# 1 "./arch/x86/include/asm/page.h" 1








# 1 "./arch/x86/include/asm/page_types.h" 1






# 1 "./include/linux/mem_encrypt.h" 1
# 17 "./include/linux/mem_encrypt.h"
# 1 "./arch/x86/include/asm/mem_encrypt.h" 1
# 16 "./arch/x86/include/asm/mem_encrypt.h"
# 1 "./include/linux/cc_platform.h" 1
# 22 "./include/linux/cc_platform.h"
enum cc_attr {
# 33 "./include/linux/cc_platform.h"
 CC_ATTR_MEM_ENCRYPT,
# 43 "./include/linux/cc_platform.h"
 CC_ATTR_HOST_MEM_ENCRYPT,
# 53 "./include/linux/cc_platform.h"
 CC_ATTR_GUEST_MEM_ENCRYPT,
# 63 "./include/linux/cc_platform.h"
 CC_ATTR_GUEST_STATE_ENCRYPT,
};
# 84 "./include/linux/cc_platform.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cc_platform_has(enum cc_attr attr) { return false; }
# 17 "./arch/x86/include/asm/mem_encrypt.h" 2

# 1 "./arch/x86/include/uapi/asm/bootparam.h" 1
# 43 "./arch/x86/include/uapi/asm/bootparam.h"
# 1 "./include/linux/screen_info.h" 1




# 1 "./include/uapi/linux/screen_info.h" 1
# 11 "./include/uapi/linux/screen_info.h"
struct screen_info {
 __u8 orig_x;
 __u8 orig_y;
 __u16 ext_mem_k;
 __u16 orig_video_page;
 __u8 orig_video_mode;
 __u8 orig_video_cols;
 __u8 flags;
 __u8 unused2;
 __u16 orig_video_ega_bx;
 __u16 unused3;
 __u8 orig_video_lines;
 __u8 orig_video_isVGA;
 __u16 orig_video_points;


 __u16 lfb_width;
 __u16 lfb_height;
 __u16 lfb_depth;
 __u32 lfb_base;
 __u32 lfb_size;
 __u16 cl_magic, cl_offset;
 __u16 lfb_linelength;
 __u8 red_size;
 __u8 red_pos;
 __u8 green_size;
 __u8 green_pos;
 __u8 blue_size;
 __u8 blue_pos;
 __u8 rsvd_size;
 __u8 rsvd_pos;
 __u16 vesapm_seg;
 __u16 vesapm_off;
 __u16 pages;
 __u16 vesa_attributes;
 __u32 capabilities;
 __u32 ext_lfb_base;
 __u8 _reserved[2];
} __attribute__((packed));
# 6 "./include/linux/screen_info.h" 2

extern struct screen_info screen_info;
# 44 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "./include/linux/apm_bios.h" 1








# 1 "./include/uapi/linux/apm_bios.h" 1
# 22 "./include/uapi/linux/apm_bios.h"
typedef unsigned short apm_event_t;
typedef unsigned short apm_eventinfo_t;

struct apm_bios_info {
 __u16 version;
 __u16 cseg;
 __u32 offset;
 __u16 cseg_16;
 __u16 dseg;
 __u16 flags;
 __u16 cseg_len;
 __u16 cseg_16_len;
 __u16 dseg_len;
};
# 133 "./include/uapi/linux/apm_bios.h"
# 1 "./include/uapi/linux/ioctl.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/ioctl.h" 1
# 1 "./include/asm-generic/ioctl.h" 1




# 1 "./include/uapi/asm-generic/ioctl.h" 1
# 6 "./include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 2 "./arch/x86/include/generated/uapi/asm/ioctl.h" 2
# 6 "./include/uapi/linux/ioctl.h" 2
# 134 "./include/uapi/linux/apm_bios.h" 2
# 10 "./include/linux/apm_bios.h" 2
# 26 "./include/linux/apm_bios.h"
struct apm_info {
 struct apm_bios_info bios;
 unsigned short connection_version;
 int get_power_status_broken;
 int get_power_status_swabinminutes;
 int allow_ints;
 int forbid_idle;
 int realmode_power_off;
 int disabled;
};
# 85 "./include/linux/apm_bios.h"
extern struct apm_info apm_info;
# 45 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "./include/linux/edd.h" 1
# 24 "./include/linux/edd.h"
# 1 "./include/uapi/linux/edd.h" 1
# 72 "./include/uapi/linux/edd.h"
struct edd_device_params {
 __u16 length;
 __u16 info_flags;
 __u32 num_default_cylinders;
 __u32 num_default_heads;
 __u32 sectors_per_track;
 __u64 number_of_sectors;
 __u16 bytes_per_sector;
 __u32 dpte_ptr;
 __u16 key;
 __u8 device_path_info_length;
 __u8 reserved2;
 __u16 reserved3;
 __u8 host_bus_type[4];
 __u8 interface_type[8];
 union {
  struct {
   __u16 base_address;
   __u16 reserved1;
   __u32 reserved2;
  } __attribute__ ((packed)) isa;
  struct {
   __u8 bus;
   __u8 slot;
   __u8 function;
   __u8 channel;
   __u32 reserved;
  } __attribute__ ((packed)) pci;

  struct {
   __u64 reserved;
  } __attribute__ ((packed)) ibnd;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) xprs;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) htpt;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) unknown;
 } interface_path;
 union {
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) ata;
  struct {
   __u8 device;
   __u8 lun;
   __u8 reserved1;
   __u8 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) atapi;
  struct {
   __u16 id;
   __u64 lun;
   __u16 reserved1;
   __u32 reserved2;
  } __attribute__ ((packed)) scsi;
  struct {
   __u64 serial_number;
   __u64 reserved;
  } __attribute__ ((packed)) usb;
  struct {
   __u64 eui;
   __u64 reserved;
  } __attribute__ ((packed)) i1394;
  struct {
   __u64 wwid;
   __u64 lun;
  } __attribute__ ((packed)) fibre;
  struct {
   __u64 identity_tag;
   __u64 reserved;
  } __attribute__ ((packed)) i2o;
  struct {
   __u32 array_number;
   __u32 reserved1;
   __u64 reserved2;
  } __attribute__ ((packed)) raid;
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) sata;
  struct {
   __u64 reserved1;
   __u64 reserved2;
  } __attribute__ ((packed)) unknown;
 } device_path;
 __u8 reserved4;
 __u8 checksum;
} __attribute__ ((packed));

struct edd_info {
 __u8 device;
 __u8 version;
 __u16 interface_support;
 __u16 legacy_max_cylinder;
 __u8 legacy_max_head;
 __u8 legacy_sectors_per_track;
 struct edd_device_params params;
} __attribute__ ((packed));

struct edd {
 unsigned int mbr_signature[16];
 struct edd_info edd_info[6];
 unsigned char mbr_signature_nr;
 unsigned char edd_info_nr;
};
# 25 "./include/linux/edd.h" 2


extern struct edd edd;
# 46 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "./arch/x86/include/asm/ist.h" 1








# 1 "./arch/x86/include/uapi/asm/ist.h" 1
# 23 "./arch/x86/include/uapi/asm/ist.h"
struct ist_info {
 __u32 signature;
 __u32 command;
 __u32 event;
 __u32 perf_level;
};
# 10 "./arch/x86/include/asm/ist.h" 2


extern struct ist_info ist_info;
# 47 "./arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "./include/video/edid.h" 1




# 1 "./include/uapi/video/edid.h" 1




struct edid_info {
 unsigned char dummy[128];
};
# 6 "./include/video/edid.h" 2


extern struct edid_info edid_info;
# 48 "./arch/x86/include/uapi/asm/bootparam.h" 2


struct setup_data {
 __u64 next;
 __u32 type;
 __u32 len;
 __u8 data[0];
};


struct setup_indirect {
 __u32 type;
 __u32 reserved;
 __u64 len;
 __u64 addr;
};

struct setup_header {
 __u8 setup_sects;
 __u16 root_flags;
 __u32 syssize;
 __u16 ram_size;
 __u16 vid_mode;
 __u16 root_dev;
 __u16 boot_flag;
 __u16 jump;
 __u32 header;
 __u16 version;
 __u32 realmode_swtch;
 __u16 start_sys_seg;
 __u16 kernel_version;
 __u8 type_of_loader;
 __u8 loadflags;
 __u16 setup_move_size;
 __u32 code32_start;
 __u32 ramdisk_image;
 __u32 ramdisk_size;
 __u32 bootsect_kludge;
 __u16 heap_end_ptr;
 __u8 ext_loader_ver;
 __u8 ext_loader_type;
 __u32 cmd_line_ptr;
 __u32 initrd_addr_max;
 __u32 kernel_alignment;
 __u8 relocatable_kernel;
 __u8 min_alignment;
 __u16 xloadflags;
 __u32 cmdline_size;
 __u32 hardware_subarch;
 __u64 hardware_subarch_data;
 __u32 payload_offset;
 __u32 payload_length;
 __u64 setup_data;
 __u64 pref_address;
 __u32 init_size;
 __u32 handover_offset;
 __u32 kernel_info_offset;
} __attribute__((packed));

struct sys_desc_table {
 __u16 length;
 __u8 table[14];
};


struct olpc_ofw_header {
 __u32 ofw_magic;
 __u32 ofw_version;
 __u32 cif_handler;
 __u32 irq_desc_table;
} __attribute__((packed));

struct efi_info {
 __u32 efi_loader_signature;
 __u32 efi_systab;
 __u32 efi_memdesc_size;
 __u32 efi_memdesc_version;
 __u32 efi_memmap;
 __u32 efi_memmap_size;
 __u32 efi_systab_hi;
 __u32 efi_memmap_hi;
};
# 140 "./arch/x86/include/uapi/asm/bootparam.h"
struct boot_e820_entry {
 __u64 addr;
 __u64 size;
 __u32 type;
} __attribute__((packed));
# 155 "./arch/x86/include/uapi/asm/bootparam.h"
struct jailhouse_setup_data {
 struct {
  __u16 version;
  __u16 compatible_version;
 } __attribute__((packed)) hdr;
 struct {
  __u16 pm_timer_address;
  __u16 num_cpus;
  __u64 pci_mmconfig_base;
  __u32 tsc_khz;
  __u32 apic_khz;
  __u8 standard_ioapic;
  __u8 cpu_ids[255];
 } __attribute__((packed)) v1;
 struct {
  __u32 flags;
 } __attribute__((packed)) v2;
} __attribute__((packed));


struct boot_params {
 struct screen_info screen_info;
 struct apm_bios_info apm_bios_info;
 __u8 _pad2[4];
 __u64 tboot_addr;
 struct ist_info ist_info;
 __u64 acpi_rsdp_addr;
 __u8 _pad3[8];
 __u8 hd0_info[16];
 __u8 hd1_info[16];
 struct sys_desc_table sys_desc_table;
 struct olpc_ofw_header olpc_ofw_header;
 __u32 ext_ramdisk_image;
 __u32 ext_ramdisk_size;
 __u32 ext_cmd_line_ptr;
 __u8 _pad4[116];
 struct edid_info edid_info;
 struct efi_info efi_info;
 __u32 alt_mem_k;
 __u32 scratch;
 __u8 e820_entries;
 __u8 eddbuf_entries;
 __u8 edd_mbr_sig_buf_entries;
 __u8 kbd_status;
 __u8 secure_boot;
 __u8 _pad5[2];
# 212 "./arch/x86/include/uapi/asm/bootparam.h"
 __u8 sentinel;
 __u8 _pad6[1];
 struct setup_header hdr;
 __u8 _pad7[0x290-0x1f1-sizeof(struct setup_header)];
 __u32 edd_mbr_sig_buffer[16];
 struct boot_e820_entry e820_table[128];
 __u8 _pad8[48];
 struct edd_info eddbuf[6];
 __u8 _pad9[276];
} __attribute__((packed));
# 262 "./arch/x86/include/uapi/asm/bootparam.h"
enum x86_hardware_subarch {
 X86_SUBARCH_PC = 0,
 X86_SUBARCH_LGUEST,
 X86_SUBARCH_XEN,
 X86_SUBARCH_INTEL_MID,
 X86_SUBARCH_CE4100,
 X86_NR_SUBARCHS,
};
# 19 "./arch/x86/include/asm/mem_encrypt.h" 2
# 63 "./arch/x86/include/asm/mem_encrypt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sme_early_encrypt(resource_size_t paddr,
         unsigned long size) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sme_early_decrypt(resource_size_t paddr,
         unsigned long size) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sme_map_bootdata(char *real_mode_data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sme_unmap_bootdata(char *real_mode_data) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sme_early_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sev_setup_arch(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sme_encrypt_kernel(struct boot_params *bp) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sme_enable(struct boot_params *bp) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sev_es_init_vc_handling(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi")))
early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi")))
early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi")))
early_set_mem_enc_dec_hypercall(unsigned long vaddr, int npages, bool enc) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_encrypt_free_decrypted_mem(void) { }
# 101 "./arch/x86/include/asm/mem_encrypt.h"
extern char __start_bss_decrypted[], __end_bss_decrypted[], __start_bss_decrypted_unused[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 sme_get_me_mask(void)
{
 return 0ULL;
}
# 18 "./include/linux/mem_encrypt.h" 2
# 8 "./arch/x86/include/asm/page_types.h" 2
# 46 "./arch/x86/include/asm/page_types.h"
# 1 "./arch/x86/include/asm/page_64_types.h" 1





# 1 "./arch/x86/include/asm/kaslr.h" 1




unsigned long kaslr_get_random_long(const char *purpose);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_randomize_memory(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_trampoline_kaslr(void) {}
# 7 "./arch/x86/include/asm/page_64_types.h" 2
# 47 "./arch/x86/include/asm/page_types.h" 2
# 62 "./arch/x86/include/asm/page_types.h"
extern int devmem_is_allowed(unsigned long pagenr);

extern unsigned long max_low_pfn_mapped;
extern unsigned long max_pfn_mapped;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) phys_addr_t get_max_mapped(void)
{
 return (phys_addr_t)max_pfn_mapped << 12;
}

bool pfn_range_is_mapped(unsigned long start_pfn, unsigned long end_pfn);

extern void initmem_init(void);
# 10 "./arch/x86/include/asm/page.h" 2


# 1 "./arch/x86/include/asm/page_64.h" 1
# 12 "./arch/x86/include/asm/page_64.h"
extern unsigned long max_pfn;
extern unsigned long phys_base;

extern unsigned long page_offset_base;
extern unsigned long vmalloc_base;
extern unsigned long vmemmap_base;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __phys_addr_nodebug(unsigned long x)
{
 unsigned long y = x - (0xffffffff80000000UL);


 x = y + ((x > y) ? phys_base : ((0xffffffff80000000UL) - ((unsigned long)page_offset_base)));

 return x;
}
# 44 "./arch/x86/include/asm/page_64.h"
void clear_page_orig(void *page);
void clear_page_rep(void *page);
void clear_page_erms(void *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_page(void *page)
{
 asm __inline volatile ("# ALT: oldinstr2\n" "661:\n\t" "call %P[old]" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+ 9)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "call %P[new1]" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" "call %P[new2]" "\n" "665""2" ":\n" ".popsection\n" : "=D" (page), "+r" (current_stack_pointer) : [old] "i" (clear_page_orig), [new1] "i" (clear_page_rep), [new2] "i" (clear_page_erms), "0" (page) : "cc", "memory", "rax", "rcx");





}

void copy_page(void *to, void *from);
# 79 "./arch/x86/include/asm/page_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long task_size_max(void)
{
 unsigned long ret;

 asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "movq %[small],%0" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(16*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "movq %[large],%0" "\n" "665""1" ":\n" ".popsection\n" : "=r" (ret) : "i" (0), [small] "i" ((1ul << 47)-((1UL) << 12)), [large] "i" ((1ul << 56)-((1UL) << 12)));





 return ret;
}
# 13 "./arch/x86/include/asm/page.h" 2






struct page;

# 1 "./include/linux/range.h" 1





struct range {
 u64 start;
 u64 end;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 range_len(const struct range *range)
{
 return range->end - range->start + 1;
}

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 22 "./arch/x86/include/asm/page.h" 2
extern struct range pfn_mapped[];
extern int nr_pfn_mapped;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_user_page(void *page, unsigned long vaddr,
       struct page *pg)
{
 clear_page(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_user_page(void *to, void *from, unsigned long vaddr,
      struct page *topage)
{
 copy_page(to, from);
}
# 71 "./arch/x86/include/asm/page.h"
extern bool __virt_addr_valid(unsigned long kaddr);




# 1 "./include/asm-generic/memory_model.h" 1




# 1 "./include/linux/pfn.h" 1
# 13 "./include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "./include/asm-generic/memory_model.h" 2
# 77 "./arch/x86/include/asm/page.h" 2
# 1 "./include/asm-generic/getorder.h" 1
# 29 "./include/asm-generic/getorder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - 12;

  if (size < (1UL << 12))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? (((size) - 1) < 2 ? 0 : 63 - __builtin_clzll((size) - 1)) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1;
 }

 size--;
 size >>= 12;



 return fls64(size);

}
# 78 "./arch/x86/include/asm/page.h" 2
# 13 "./arch/x86/include/asm/thread_info.h" 2

# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 15 "./arch/x86/include/asm/thread_info.h" 2
# 52 "./arch/x86/include/asm/thread_info.h"
struct task_struct;
# 1 "./arch/x86/include/asm/cpufeature.h" 1




# 1 "./arch/x86/include/asm/processor.h" 1




# 1 "./arch/x86/include/asm/processor-flags.h" 1




# 1 "./arch/x86/include/uapi/asm/processor-flags.h" 1
# 6 "./arch/x86/include/asm/processor-flags.h" 2
# 6 "./arch/x86/include/asm/processor.h" 2


struct task_struct;
struct mm_struct;
struct io_bitmap;
struct vm86;

# 1 "./arch/x86/include/asm/math_emu.h" 1




# 1 "./arch/x86/include/asm/ptrace.h" 1




# 1 "./arch/x86/include/asm/segment.h" 1
# 238 "./arch/x86/include/asm/segment.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vdso_encode_cpunode(int cpu, unsigned long node)
{
 return (node << 12) | cpu;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vdso_read_cpunode(unsigned *cpu, unsigned *node)
{
 unsigned int p;
# 255 "./arch/x86/include/asm/segment.h"
 asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "lsl %[seg],%[p]" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(16*32+22)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" ".byte 0xf3,0x0f,0xc7,0xf8" "\n" "665""1" ":\n" ".popsection\n" : [p] "=a" (p) : "i" (0), [seg] "r" ((15*8 + 3)));




 if (cpu)
  *cpu = (p & 0xfff);
 if (node)
  *node = (p >> 12);
}
# 290 "./arch/x86/include/asm/segment.h"
extern const char early_idt_handler_array[32][9];
extern void early_ignore_irq(void);
# 329 "./arch/x86/include/asm/segment.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __loadsegment_fs(unsigned short value)
{
 asm volatile("						\n"
       "1:	movw %0, %%fs			\n"
       "2:					\n"

       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long " "5" " \n" " .popsection\n"

       : : "rm" (value) : "memory");
}
# 6 "./arch/x86/include/asm/ptrace.h" 2

# 1 "./arch/x86/include/uapi/asm/ptrace.h" 1





# 1 "./arch/x86/include/uapi/asm/ptrace-abi.h" 1
# 7 "./arch/x86/include/uapi/asm/ptrace.h" 2
# 8 "./arch/x86/include/asm/ptrace.h" 2
# 59 "./arch/x86/include/asm/ptrace.h"
struct pt_regs {




 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;

 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;




 unsigned long orig_ax;

 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;

};







# 1 "./arch/x86/include/asm/proto.h" 1




# 1 "./arch/x86/include/uapi/asm/ldt.h" 1
# 21 "./arch/x86/include/uapi/asm/ldt.h"
struct user_desc {
 unsigned int entry_number;
 unsigned int base_addr;
 unsigned int limit;
 unsigned int seg_32bit:1;
 unsigned int contents:2;
 unsigned int read_exec_only:1;
 unsigned int limit_in_pages:1;
 unsigned int seg_not_present:1;
 unsigned int useable:1;
# 39 "./arch/x86/include/uapi/asm/ldt.h"
 unsigned int lm:1;

};
# 6 "./arch/x86/include/asm/proto.h" 2

struct task_struct;



void syscall_init(void);


void entry_SYSCALL_64(void);
void entry_SYSCALL_64_safe_stack(void);
long do_arch_prctl_64(struct task_struct *task, int option, unsigned long arg2);
# 37 "./arch/x86/include/asm/proto.h"
void x86_configure_nx(void);
void x86_report_nx(void);

extern int reboot_force;

long do_arch_prctl_common(struct task_struct *task, int option,
     unsigned long arg2);
# 101 "./arch/x86/include/asm/ptrace.h" 2

struct cpuinfo_x86;
struct task_struct;

extern unsigned long profile_pc(struct pt_regs *regs);

extern unsigned long
convert_ip_to_linear(struct task_struct *child, struct pt_regs *regs);
extern void send_sigtrap(struct pt_regs *regs, int error_code, int si_code);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_return_value(struct pt_regs *regs)
{
 return regs->ax;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void regs_set_return_value(struct pt_regs *regs, unsigned long rc)
{
 regs->ax = rc;
}
# 131 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int user_mode(struct pt_regs *regs)
{



 return !!(regs->cs & 3);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int v8086_mode(struct pt_regs *regs)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool user_64bit_mode(struct pt_regs *regs)
{






 return regs->cs == (6*8 + 3);







}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool any_64bit_mode(struct pt_regs *regs)
{

 return !user_mode(regs) || user_64bit_mode(regs);



}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool ip_within_syscall_gap(struct pt_regs *regs)
{
 bool ret = (regs->ip >= (unsigned long)entry_SYSCALL_64 &&
      regs->ip < (unsigned long)entry_SYSCALL_64_safe_stack);






 return ret;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return regs->ip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void instruction_pointer_set(struct pt_regs *regs,
  unsigned long val)
{
 regs->ip = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return regs->bp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void user_stack_pointer_set(struct pt_regs *regs,
  unsigned long val)
{
 regs->sp = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool regs_irqs_disabled(struct pt_regs *regs)
{
 return !(regs->flags & (((1UL)) << (9)));
}


extern int regs_query_register_offset(const char *name);
extern const char *regs_query_register_name(unsigned int offset);
# 249 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_get_register(struct pt_regs *regs,
           unsigned int offset)
{
 if (__builtin_expect(!!(offset > (__builtin_offsetof(struct pt_regs, ss))), 0))
  return 0;
# 266 "./arch/x86/include/asm/ptrace.h"
 return *(unsigned long *)((unsigned long)regs + offset);
}
# 277 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int regs_within_kernel_stack(struct pt_regs *regs,
        unsigned long addr)
{
 return ((addr & ~((((1UL) << 12) << (2 + 0)) - 1)) == (regs->sp & ~((((1UL) << 12) << (2 + 0)) - 1)));
}
# 292 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *regs_get_kernel_stack_nth_addr(struct pt_regs *regs, unsigned int n)
{
 unsigned long *addr = (unsigned long *)regs->sp;

 addr += n;
 if (regs_within_kernel_stack(regs, (unsigned long)addr))
  return addr;
 else
  return ((void *)0);
}


extern long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
# 315 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n)
{
 unsigned long *addr;
 unsigned long val;
 long ret;

 addr = regs_get_kernel_stack_nth_addr(regs, n);
 if (addr) {
  ret = copy_from_kernel_nofault(&val, addr, sizeof(val));
  if (!ret)
   return val;
 }
 return 0;
}
# 342 "./arch/x86/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_get_kernel_argument(struct pt_regs *regs,
           unsigned int n)
{
 static const unsigned int argument_offs[] = {






  __builtin_offsetof(struct pt_regs, di),
  __builtin_offsetof(struct pt_regs, si),
  __builtin_offsetof(struct pt_regs, dx),
  __builtin_offsetof(struct pt_regs, cx),
  __builtin_offsetof(struct pt_regs, r8),
  __builtin_offsetof(struct pt_regs, r9),


 };

 if (n >= 6) {
  n -= 6 - 1;
  return regs_get_kernel_stack_nth(regs, n);
 } else
  return regs_get_register(regs, argument_offs[n]);
}
# 378 "./arch/x86/include/asm/ptrace.h"
struct user_desc;
extern int do_get_thread_area(struct task_struct *p, int idx,
         struct user_desc *info);
extern int do_set_thread_area(struct task_struct *p, int idx,
         struct user_desc *info, int can_allocate);
# 6 "./arch/x86/include/asm/math_emu.h" 2





struct math_emu_info {
 long ___orig_eip;
 struct pt_regs *regs;
};
# 14 "./arch/x86/include/asm/processor.h" 2

# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 16 "./arch/x86/include/asm/processor.h" 2
# 1 "./arch/x86/include/uapi/asm/sigcontext.h" 1
# 40 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _fpx_sw_bytes {




 __u32 magic1;
# 54 "./arch/x86/include/uapi/asm/sigcontext.h"
 __u32 extended_size;





 __u64 xfeatures;





 __u32 xstate_size;


 __u32 padding[7];
};
# 85 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _fpreg {
 __u16 significand[4];
 __u16 exponent;
};


struct _fpxreg {
 __u16 significand[4];
 __u16 exponent;
 __u16 padding[3];
};


struct _xmmreg {
 __u32 element[4];
};






struct _fpstate_32 {

 __u32 cw;
 __u32 sw;
 __u32 tag;
 __u32 ipoff;
 __u32 cssel;
 __u32 dataoff;
 __u32 datasel;
 struct _fpreg _st[8];
 __u16 status;
 __u16 magic;



 __u32 _fxsr_env[6];
 __u32 mxcsr;
 __u32 reserved;
 struct _fpxreg _fxsr_st[8];
 struct _xmmreg _xmm[8];
 union {
  __u32 padding1[44];
  __u32 padding[44];
 };

 union {
  __u32 padding2[12];
  struct _fpx_sw_bytes sw_reserved;
 };
};
# 149 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _fpstate_64 {
 __u16 cwd;
 __u16 swd;

 __u16 twd;
 __u16 fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 reserved2[12];
 union {
  __u32 reserved3[12];
  struct _fpx_sw_bytes sw_reserved;
 };
};







struct _header {
 __u64 xfeatures;
 __u64 reserved1[2];
 __u64 reserved2[5];
};

struct _ymmh_state {

 __u32 ymmh_space[64];
};
# 192 "./arch/x86/include/uapi/asm/sigcontext.h"
struct _xstate {
 struct _fpstate_64 fpstate;
 struct _header xstate_hdr;
 struct _ymmh_state ymmh;

};




struct sigcontext_32 {
 __u16 gs, __gsh;
 __u16 fs, __fsh;
 __u16 es, __esh;
 __u16 ds, __dsh;
 __u32 di;
 __u32 si;
 __u32 bp;
 __u32 sp;
 __u32 bx;
 __u32 dx;
 __u32 cx;
 __u32 ax;
 __u32 trapno;
 __u32 err;
 __u32 ip;
 __u16 cs, __csh;
 __u32 flags;
 __u32 sp_at_signal;
 __u16 ss, __ssh;
# 230 "./arch/x86/include/uapi/asm/sigcontext.h"
 __u32 fpstate;
 __u32 oldmask;
 __u32 cr2;
};




struct sigcontext_64 {
 __u64 r8;
 __u64 r9;
 __u64 r10;
 __u64 r11;
 __u64 r12;
 __u64 r13;
 __u64 r14;
 __u64 r15;
 __u64 di;
 __u64 si;
 __u64 bp;
 __u64 bx;
 __u64 dx;
 __u64 ax;
 __u64 cx;
 __u64 sp;
 __u64 ip;
 __u64 flags;
 __u16 cs;
 __u16 gs;
 __u16 fs;
 __u16 ss;
 __u64 err;
 __u64 trapno;
 __u64 oldmask;
 __u64 cr2;
# 273 "./arch/x86/include/uapi/asm/sigcontext.h"
 __u64 fpstate;
 __u64 reserved1[8];
};
# 17 "./arch/x86/include/asm/processor.h" 2



# 1 "./arch/x86/include/asm/pgtable_types.h" 1
# 141 "./arch/x86/include/asm/pgtable_types.h"
enum page_cache_mode {
 _PAGE_CACHE_MODE_WB = 0,
 _PAGE_CACHE_MODE_WC = 1,
 _PAGE_CACHE_MODE_UC_MINUS = 2,
 _PAGE_CACHE_MODE_UC = 3,
 _PAGE_CACHE_MODE_WT = 4,
 _PAGE_CACHE_MODE_WP = 5,

 _PAGE_CACHE_MODE_NUM = 8
};
# 257 "./arch/x86/include/asm/pgtable_types.h"
# 1 "./arch/x86/include/asm/pgtable_64_types.h" 1




# 1 "./arch/x86/include/asm/sparsemem.h" 1
# 6 "./arch/x86/include/asm/pgtable_64_types.h" 2








typedef unsigned long pteval_t;
typedef unsigned long pmdval_t;
typedef unsigned long pudval_t;
typedef unsigned long p4dval_t;
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;

typedef struct { pteval_t pte; } pte_t;


extern unsigned int __pgtable_l5_enabled;
# 43 "./arch/x86/include/asm/pgtable_64_types.h"
extern unsigned int pgdir_shift;
extern unsigned int ptrs_per_p4d;
# 258 "./arch/x86/include/asm/pgtable_types.h" 2
# 273 "./arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot { pgprotval_t pgprot; } pgprot_t;

typedef struct { pgdval_t pgd; } pgd_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_nx(pgprot_t prot)
{
 return ((pgprot_t) { (((prot).pgprot) | (((pteval_t)(1)) << 63)) } );
}
# 306 "./arch/x86/include/asm/pgtable_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t native_make_pgd(pgdval_t val)
{
 return (pgd_t) { val & (~0ULL) };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgdval_t native_pgd_val(pgd_t pgd)
{
 return pgd.pgd & (~0ULL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgdval_t pgd_flags(pgd_t pgd)
{
 return native_pgd_val(pgd) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))));
}


typedef struct { p4dval_t p4d; } p4d_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4d_t native_make_p4d(pudval_t val)
{
 return (p4d_t) { val };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t native_p4d_val(p4d_t p4d)
{
 return p4d.p4d;
}
# 348 "./arch/x86/include/asm/pgtable_types.h"
typedef struct { pudval_t pud; } pud_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t native_make_pud(pmdval_t val)
{
 return (pud_t) { val };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t native_pud_val(pud_t pud)
{
 return pud.pud;
}
# 374 "./arch/x86/include/asm/pgtable_types.h"
typedef struct { pmdval_t pmd; } pmd_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t native_make_pmd(pmdval_t val)
{
 return (pmd_t) { val };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t native_pmd_val(pmd_t pmd)
{
 return pmd.pmd;
}
# 399 "./arch/x86/include/asm/pgtable_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t p4d_pfn_mask(p4d_t p4d)
{

 return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t p4d_flags_mask(p4d_t p4d)
{
 return ~p4d_pfn_mask(p4d);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t p4d_flags(p4d_t p4d)
{
 return native_p4d_val(p4d) & p4d_flags_mask(p4d);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t pud_pfn_mask(pud_t pud)
{
 if (native_pud_val(pud) & (((pteval_t)(1)) << 7))
  return (((signed long)(~(((1UL) << 30)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
 else
  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t pud_flags_mask(pud_t pud)
{
 return ~pud_pfn_mask(pud);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t pud_flags(pud_t pud)
{
 return native_pud_val(pud) & pud_flags_mask(pud);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t pmd_pfn_mask(pmd_t pmd)
{
 if (native_pmd_val(pmd) & (((pteval_t)(1)) << 7))
  return (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
 else
  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t pmd_flags_mask(pmd_t pmd)
{
 return ~pmd_pfn_mask(pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t pmd_flags(pmd_t pmd)
{
 return native_pmd_val(pmd) & pmd_flags_mask(pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t native_make_pte(pteval_t val)
{
 return (pte_t) { .pte = val };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pteval_t native_pte_val(pte_t pte)
{
 return pte.pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pteval_t pte_flags(pte_t pte)
{
 return native_pte_val(pte) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))));
}
# 475 "./arch/x86/include/asm/pgtable_types.h"
unsigned long cachemode2protval(enum page_cache_mode pcm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t protval_4k_2_large(pgprotval_t val)
{
 return (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
  ((val & (((pteval_t)(1)) << 7)) << (12 - 7));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_4k_2_large(pgprot_t pgprot)
{
 return ((pgprot_t) { (protval_4k_2_large(((pgprot).pgprot))) } );
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t protval_large_2_4k(pgprotval_t val)
{
 return (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
  ((val & (((pteval_t)(1)) << 12)) >>
   (12 - 7));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_large_2_4k(pgprot_t pgprot)
{
 return ((pgprot_t) { (protval_large_2_4k(((pgprot).pgprot))) } );
}


typedef struct page *pgtable_t;

extern pteval_t __supported_pte_mask;
extern pteval_t __default_kernel_pte_mask;
extern void set_nx(void);
extern int nx_enabled;


extern pgprot_t pgprot_writecombine(pgprot_t prot);


extern pgprot_t pgprot_writethrough(pgprot_t prot);





struct file;
pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t vma_prot);


void set_pte_vaddr(unsigned long vaddr, pte_t pte);







struct seq_file;
extern void arch_report_meminfo(struct seq_file *m);

enum pg_level {
 PG_LEVEL_NONE,
 PG_LEVEL_4K,
 PG_LEVEL_2M,
 PG_LEVEL_1G,
 PG_LEVEL_512G,
 PG_LEVEL_NUM
};


extern void update_page_count(int level, unsigned long pages);
# 552 "./arch/x86/include/asm/pgtable_types.h"
extern pte_t *lookup_address(unsigned long address, unsigned int *level);
extern pte_t *lookup_address_in_pgd(pgd_t *pgd, unsigned long address,
        unsigned int *level);

struct mm_struct;
extern pte_t *lookup_address_in_mm(struct mm_struct *mm, unsigned long address,
       unsigned int *level);
extern pmd_t *lookup_pmd_address(unsigned long address);
extern phys_addr_t slow_virt_to_phys(void *__address);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn,
       unsigned long address,
       unsigned numpages,
       unsigned long page_flags);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kernel_unmap_pages_in_pgd(pgd_t *pgd, unsigned long address,
         unsigned long numpages);
# 21 "./arch/x86/include/asm/processor.h" 2

# 1 "./arch/x86/include/asm/msr.h" 1




# 1 "./arch/x86/include/asm/msr-index.h" 1
# 6 "./arch/x86/include/asm/msr.h" 2




# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
# 11 "./arch/x86/include/asm/msr.h" 2
# 1 "./arch/x86/include/asm/cpumask.h" 1




# 1 "./include/linux/cpumask.h" 1
# 12 "./include/linux/cpumask.h"
# 1 "./include/linux/bitmap.h" 1
# 10 "./include/linux/bitmap.h"
# 1 "./include/linux/string.h" 1
# 10 "./include/linux/string.h"
# 1 "./include/uapi/linux/string.h" 1
# 11 "./include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "./arch/x86/include/asm/string.h" 1




# 1 "./arch/x86/include/asm/string_64.h" 1





# 1 "./include/linux/jump_label.h" 1
# 79 "./include/linux/jump_label.h"
extern bool static_key_initialized;
# 110 "./include/linux/jump_label.h"
struct static_key {
 atomic_t enabled;
};
# 196 "./include/linux/jump_label.h"
enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 261 "./include/linux/jump_label.h"
# 1 "./include/linux/atomic.h" 1






# 1 "./arch/x86/include/asm/atomic.h" 1







# 1 "./arch/x86/include/asm/cmpxchg.h" 1
# 13 "./arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void)
 __attribute__((__error__("Bad argument size for xchg")));
extern void __cmpxchg_wrong_size(void)
 __attribute__((__error__("Bad argument size for cmpxchg")));
extern void __xadd_wrong_size(void)
 __attribute__((__error__("Bad argument size for xadd")));
extern void __add_wrong_size(void)
 __attribute__((__error__("Bad argument size for add")));
# 145 "./arch/x86/include/asm/cmpxchg.h"
# 1 "./arch/x86/include/asm/cmpxchg_64.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_64bit(volatile u64 *ptr, u64 val)
{
 *ptr = val;
}
# 146 "./arch/x86/include/asm/cmpxchg.h" 2
# 9 "./arch/x86/include/asm/atomic.h" 2
# 23 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_read(const atomic_t *v)
{




 return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
}
# 39 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_set(atomic_t *v, int i)
{
 do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0);
}
# 51 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_add(int i, atomic_t *v)
{
 asm volatile("" "addl %1,%0"
       : "+m" (v->counter)
       : "ir" (i) : "memory");
}
# 65 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_sub(int i, atomic_t *v)
{
 asm volatile("" "subl %1,%0"
       : "+m" (v->counter)
       : "ir" (i) : "memory");
}
# 81 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_sub_and_test(int i, atomic_t *v)
{
 return ({ bool c; asm volatile ("" "subl" " %[val], " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : [val] "er" (i) : "memory"); c; });
}
# 93 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_inc(atomic_t *v)
{
 asm volatile("" "incl %0"
       : "+m" (v->counter) :: "memory");
}
# 106 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_dec(atomic_t *v)
{
 asm volatile("" "decl %0"
       : "+m" (v->counter) :: "memory");
}
# 121 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_dec_and_test(atomic_t *v)
{
 return ({ bool c; asm volatile ("" "decl" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
}
# 135 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_inc_and_test(atomic_t *v)
{
 return ({ bool c; asm volatile ("" "incl" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
}
# 150 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_add_negative(int i, atomic_t *v)
{
 return ({ bool c; asm volatile ("" "addl" " %[val], " "%[var]" "\n\t/* output condition code " "s" "*/\n" : [var] "+m" (v->counter), "=@cc" "s" (c) : [val] "er" (i) : "memory"); c; });
}
# 163 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_add_return(int i, atomic_t *v)
{
 return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}
# 176 "./arch/x86/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_sub_return(int i, atomic_t *v)
{
 return arch_atomic_add_return(-i, v);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_add(int i, atomic_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub(int i, atomic_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((-i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_cmpxchg(atomic_t *v, int old, int new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile("" "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile("" "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile("" "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile("" "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 return ({ bool success; __typeof__(((&v->counter))) _old = (__typeof__(((&v->counter))))(((old))); __typeof__(*(((&v->counter)))) __old = *_old; __typeof__(*(((&v->counter)))) __new = (((new))); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)(((&v->counter))); asm volatile("" "cmpxchgb %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "q" (__new) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)(((&v->counter))); asm volatile("" "cmpxchgw %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)(((&v->counter))); asm volatile("" "cmpxchgl %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)(((&v->counter))); asm volatile("" "cmpxchgq %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } default: __cmpxchg_wrong_size(); } if (__builtin_expect(!!(!success), 0)) *_old = __old; __builtin_expect(!!(success), 1); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_xchg(atomic_t *v, int new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_and(int i, atomic_t *v)
{
 asm volatile("" "andl %1,%0"
   : "+m" (v->counter)
   : "ir" (i)
   : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_and(int i, atomic_t *v)
{
 int val = arch_atomic_read(v);

 do { } while (!arch_atomic_try_cmpxchg(v, &val, val & i));

 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_or(int i, atomic_t *v)
{
 asm volatile("" "orl %1,%0"
   : "+m" (v->counter)
   : "ir" (i)
   : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_or(int i, atomic_t *v)
{
 int val = arch_atomic_read(v);

 do { } while (!arch_atomic_try_cmpxchg(v, &val, val | i));

 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_xor(int i, atomic_t *v)
{
 asm volatile("" "xorl %1,%0"
   : "+m" (v->counter)
   : "ir" (i)
   : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor(int i, atomic_t *v)
{
 int val = arch_atomic_read(v);

 do { } while (!arch_atomic_try_cmpxchg(v, &val, val ^ i));

 return val;
}





# 1 "./arch/x86/include/asm/atomic64_64.h" 1
# 20 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_read(const atomic64_t *v)
{
 return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
}
# 32 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_set(atomic64_t *v, s64 i)
{
 do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0);
}
# 44 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic64_add(s64 i, atomic64_t *v)
{
 asm volatile("" "addq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter) : "memory");
}
# 58 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_sub(s64 i, atomic64_t *v)
{
 asm volatile("" "subq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter) : "memory");
}
# 74 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return ({ bool c; asm volatile ("" "subq" " %[val], " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : [val] "er" (i) : "memory"); c; });
}
# 86 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic64_inc(atomic64_t *v)
{
 asm volatile("" "incq %0"
       : "=m" (v->counter)
       : "m" (v->counter) : "memory");
}
# 100 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic64_dec(atomic64_t *v)
{
 asm volatile("" "decq %0"
       : "=m" (v->counter)
       : "m" (v->counter) : "memory");
}
# 116 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_dec_and_test(atomic64_t *v)
{
 return ({ bool c; asm volatile ("" "decq" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
}
# 130 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_inc_and_test(atomic64_t *v)
{
 return ({ bool c; asm volatile ("" "incq" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
}
# 145 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_add_negative(s64 i, atomic64_t *v)
{
 return ({ bool c; asm volatile ("" "addq" " %[val], " "%[var]" "\n\t/* output condition code " "s" "*/\n" : [var] "+m" (v->counter), "=@cc" "s" (c) : [val] "er" (i) : "memory"); c; });
}
# 158 "./arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64 arch_atomic64_add_return(s64 i, atomic64_t *v)
{
 return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_sub_return(s64 i, atomic64_t *v)
{
 return arch_atomic64_add_return(-i, v);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_add(s64 i, atomic64_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((-i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile("" "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile("" "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile("" "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile("" "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 return ({ bool success; __typeof__(((&v->counter))) _old = (__typeof__(((&v->counter))))(((old))); __typeof__(*(((&v->counter)))) __old = *_old; __typeof__(*(((&v->counter)))) __new = (((new))); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)(((&v->counter))); asm volatile("" "cmpxchgb %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "q" (__new) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)(((&v->counter))); asm volatile("" "cmpxchgw %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)(((&v->counter))); asm volatile("" "cmpxchgl %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)(((&v->counter))); asm volatile("" "cmpxchgq %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } default: __cmpxchg_wrong_size(); } if (__builtin_expect(!!(!success), 0)) *_old = __old; __builtin_expect(!!(success), 1); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_xchg(atomic64_t *v, s64 new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_and(s64 i, atomic64_t *v)
{
 asm volatile("" "andq %1,%0"
   : "+m" (v->counter)
   : "er" (i)
   : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_and(s64 i, atomic64_t *v)
{
 s64 val = arch_atomic64_read(v);

 do {
 } while (!arch_atomic64_try_cmpxchg(v, &val, val & i));
 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_or(s64 i, atomic64_t *v)
{
 asm volatile("" "orq %1,%0"
   : "+m" (v->counter)
   : "er" (i)
   : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_or(s64 i, atomic64_t *v)
{
 s64 val = arch_atomic64_read(v);

 do {
 } while (!arch_atomic64_try_cmpxchg(v, &val, val | i));
 return val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_xor(s64 i, atomic64_t *v)
{
 asm volatile("" "xorq %1,%0"
   : "+m" (v->counter)
   : "er" (i)
   : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 s64 val = arch_atomic64_read(v);

 do {
 } while (!arch_atomic64_try_cmpxchg(v, &val, val ^ i));
 return val;
}
# 270 "./arch/x86/include/asm/atomic.h" 2
# 8 "./include/linux/atomic.h" 2
# 80 "./include/linux/atomic.h"
# 1 "./include/linux/atomic/atomic-arch-fallback.h" 1
# 151 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_read_acquire(const atomic_t *v)
{
 return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_24(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_24(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_25(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_25(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&(v)->counter))___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_set_release(atomic_t *v, int i)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_26(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_26(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_27(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_27(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 353 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_inc_return(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_acquire(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_release(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_relaxed(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}
# 434 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_acquire(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_release(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}
# 524 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_dec_return(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_acquire(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_release(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_relaxed(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}
# 605 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_acquire(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_release(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}
# 721 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_andnot(int i, atomic_t *v)
{
 arch_atomic_and(~i, v);
}
# 737 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot(int i, atomic_t *v)
{
 return arch_atomic_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 return arch_atomic_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_release(int i, atomic_t *v)
{
 return arch_atomic_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 return arch_atomic_fetch_and(~i, v);
}
# 1155 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + a));

 return c;
}
# 1180 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_add_unless(atomic_t *v, int a, int u)
{
 return arch_atomic_fetch_add_unless(v, a, u) != u;
}
# 1196 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_inc_not_zero(atomic_t *v)
{
 return arch_atomic_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_inc_unless_negative(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_dec_unless_positive(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
arch_atomic_dec_if_positive(atomic_t *v)
{
 int dec, c = arch_atomic_read(v);

 do {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, dec));

 return dec;
}
# 1258 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_read_acquire(const atomic64_t *v)
{
 return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_28(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_28(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_29(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_29(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&(v)->counter))___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic64_set_release(atomic64_t *v, s64 i)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_30(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_30(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_31(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_31(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 1460 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_acquire(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_release(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}
# 1541 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_release(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}
# 1631 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_acquire(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_release(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}
# 1712 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_release(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}
# 1828 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic64_andnot(s64 i, atomic64_t *v)
{
 arch_atomic64_and(~i, v);
}
# 1844 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and(~i, v);
}
# 2262 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + a));

 return c;
}
# 2287 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return arch_atomic64_fetch_add_unless(v, a, u) != u;
}
# 2303 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_not_zero(atomic64_t *v)
{
 return arch_atomic64_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_if_positive(atomic64_t *v)
{
 s64 dec, c = arch_atomic64_read(v);

 do {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
 } while (!arch_atomic64_try_cmpxchg(v, &c, dec));

 return dec;
}
# 81 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-long.h" 1
# 10 "./include/linux/atomic/atomic-long.h"
# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 11 "./include/linux/atomic/atomic-long.h" 2


typedef atomic64_t atomic_long_t;
# 26 "./include/linux/atomic/atomic-long.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_read(const atomic_long_t *v)
{
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_read_acquire(const atomic_long_t *v)
{
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_set(atomic_long_t *v, long i)
{
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_set_release(atomic_long_t *v, long i)
{
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_add(long i, atomic_long_t *v)
{
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_sub(long i, atomic_long_t *v)
{
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_inc(atomic_long_t *v)
{
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return(atomic_long_t *v)
{
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_release(atomic_long_t *v)
{
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_dec(atomic_long_t *v)
{
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return(atomic_long_t *v)
{
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_release(atomic_long_t *v)
{
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_and(long i, atomic_long_t *v)
{
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_andnot(long i, atomic_long_t *v)
{
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_or(long i, atomic_long_t *v)
{
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
arch_atomic_long_xor(long i, atomic_long_t *v)
{
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_and_test(atomic_long_t *v)
{
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_and_test(atomic_long_t *v)
{
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_negative(long i, atomic_long_t *v)
{
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_not_zero(atomic_long_t *v)
{
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_if_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_if_positive(v);
}
# 82 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-instrumented.h" 1
# 24 "./include/linux/atomic/atomic-instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_read(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_read_acquire(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_set(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_set_release(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_add_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_add_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_add_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_sub_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_sub_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_sub_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_inc_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_inc_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_dec_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_dec_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_and_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_or_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_xor_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_xchg(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_xchg_acquire(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_xchg_release(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_xchg_relaxed(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_dec_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_inc_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
atomic_dec_if_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_if_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_read(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_set(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_set_release(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_add_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_add_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_add_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_sub_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_inc_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_dec_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic64_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_xchg(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_xchg_release(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_xchg_relaxed(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
atomic64_dec_if_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_if_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_read(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_relaxed(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_if_positive(v);
}
# 83 "./include/linux/atomic.h" 2
# 262 "./include/linux/jump_label.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int static_key_count(struct static_key *key)
{
 return atomic_read(&key->enabled);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void jump_label_init(void)
{
 static_key_initialized = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 if (__builtin_expect(!!(static_key_count(key) > 0), 0))
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 if (__builtin_expect(!!(static_key_count(key) > 0), 1))
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_slow_inc(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); ({ if (0) ({ do {} while (0); _printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_inc(&key->enabled);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_slow_dec(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); ({ if (0) ({ do {} while (0); _printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_dec(&key->enabled);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int jump_label_text_reserved(void *start, void *end)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void jump_label_lock(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void jump_label_unlock(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int jump_label_apply_nops(struct module *mod)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_enable(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); ({ if (0) ({ do {} while (0); _printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });

 if (atomic_read(&key->enabled) != 0) {
  ({ int __ret_warn_on = !!(atomic_read(&key->enabled) != 1); __builtin_expect(!!(__ret_warn_on), 0); });
  return;
 }
 atomic_set(&key->enabled, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_disable(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); ({ if (0) ({ do {} while (0); _printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });

 if (atomic_read(&key->enabled) != 1) {
  ({ int __ret_warn_on = !!(atomic_read(&key->enabled) != 0); __builtin_expect(!!(__ret_warn_on), 0); });
  return;
 }
 atomic_set(&key->enabled, 0);
}
# 358 "./include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 412 "./include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 7 "./arch/x86/include/asm/string_64.h" 2







extern void *memcpy(void *to, const void *from, size_t len);
extern void *__memcpy(void *to, const void *from, size_t len);


void *memset(void *s, int c, size_t n);
void *__memset(void *s, int c, size_t n);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset16(uint16_t *s, uint16_t v, size_t n)
{
 long d0, d1;
 asm volatile("rep\n\t"
       "stosw"
       : "=&c" (d0), "=&D" (d1)
       : "a" (v), "1" (s), "0" (n)
       : "memory");
 return s;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset32(uint32_t *s, uint32_t v, size_t n)
{
 long d0, d1;
 asm volatile("rep\n\t"
       "stosl"
       : "=&c" (d0), "=&D" (d1)
       : "a" (v), "1" (s), "0" (n)
       : "memory");
 return s;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset64(uint64_t *s, uint64_t v, size_t n)
{
 long d0, d1;
 asm volatile("rep\n\t"
       "stosq"
       : "=&c" (d0), "=&D" (d1)
       : "a" (v), "1" (s), "0" (n)
       : "memory");
 return s;
}


void *memmove(void *dest, const void *src, size_t count);
void *__memmove(void *dest, const void *src, size_t count);

int memcmp(const void *cs, const void *ct, size_t count);
size_t strlen(const char *s);
char *strcpy(char *dest, const char *src);
char *strcat(char *dest, const char *src);
int strcmp(const char *cs, const char *ct);
# 87 "./arch/x86/include/asm/string_64.h"
void __memcpy_flushcache(void *dst, const void *src, size_t cnt);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void memcpy_flushcache(void *dst, const void *src, size_t cnt)
{
 if (__builtin_constant_p(cnt)) {
  switch (cnt) {
   case 4:
    asm ("movntil %1, %0" : "=m"(*(u32 *)dst) : "r"(*(u32 *)src));
    return;
   case 8:
    asm ("movntiq %1, %0" : "=m"(*(u64 *)dst) : "r"(*(u64 *)src));
    return;
   case 16:
    asm ("movntiq %1, %0" : "=m"(*(u64 *)dst) : "r"(*(u64 *)src));
    asm ("movntiq %1, %0" : "=m"(*(u64 *)(dst + 8)) : "r"(*(u64 *)(src + 8)));
    return;
  }
 }
 __memcpy_flushcache(dst, src, cnt);
}
# 6 "./arch/x86/include/asm/string.h" 2
# 21 "./include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);


extern int strcmp(const char *,const char *);


extern int strncmp(const char *,const char *,__kernel_size_t);


extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);


extern char * strchr(const char *,int);


extern char * strchrnul(const char *,int);

extern char * strnchrnul(const char *, size_t, int);

extern char * strnchr(const char *, size_t, int);


extern char * strrchr(const char *,int);

extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *,__kernel_size_t);


extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);
# 122 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 153 "./include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp(const void *,const void *,__kernel_size_t);


extern int bcmp(const void *,const void *,__kernel_size_t);


extern void * memchr(const void *,int,__kernel_size_t);
# 171 "./include/linux/string.h"
void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 199 "./include/linux/string.h"
int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((__format__(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);

int ptr_to_hashval(const void *ptr, unsigned long *hashval_out);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
# 235 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memzero_explicit(void *s, size_t count)
{
 memset(s, 0, count);
 __asm__ __volatile__("": :"r"(s) :"memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}





void memcpy_and_pad(void *dest, size_t dest_len, const void *src, size_t count,
      int pad);
# 309 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 11 "./include/linux/bitmap.h" 2


struct device;
# 124 "./include/linux/bitmap.h"
unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_alloc_node(unsigned int nbits, gfp_t flags, int node);
unsigned long *bitmap_zalloc_node(unsigned int nbits, gfp_t flags, int node);
void bitmap_free(const unsigned long *bitmap);


unsigned long *devm_bitmap_alloc(struct device *dev,
     unsigned int nbits, gfp_t flags);
unsigned long *devm_bitmap_zalloc(struct device *dev,
      unsigned int nbits, gfp_t flags);





int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
         const unsigned long *src2,
         const unsigned long *src3,
         unsigned int nbits);
void __bitmap_complement(unsigned long *dst, const unsigned long *src,
    unsigned int nbits);
void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
     unsigned int shift, unsigned int nbits);
void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
void bitmap_cut(unsigned long *dst, const unsigned long *src,
  unsigned int first, unsigned int cut, unsigned int nbits);
int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
    const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_replace(unsigned long *dst,
        const unsigned long *old, const unsigned long *new,
        const unsigned long *mask, unsigned int nbits);
int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_subset(const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
void __bitmap_set(unsigned long *map, unsigned int start, int len);
void __bitmap_clear(unsigned long *map, unsigned int start, int len);

unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 192 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *dst, int nbits);
int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);






unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);

extern int bitmap_print_bitmask_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);

extern int bitmap_print_list_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 64)
  dst[nbits / 64] &= (~0UL >> (-(nbits) & (64 - 1)));
}






void bitmap_from_arr32(unsigned long *bitmap, const u32 *buf,
       unsigned int nbits);
void bitmap_to_arr32(u32 *buf, const unsigned long *bitmap,
       unsigned int nbits);
# 289 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 339 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}
# 359 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bitmap_or_equal(const unsigned long *src1,
       const unsigned long *src2,
       const unsigned long *src3,
       unsigned int nbits)
{
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return __bitmap_or_equal(src1, src2, src3, nbits);

 return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (64 - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_zero_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_replace(unsigned long *dst,
      const unsigned long *old,
      const unsigned long *new,
      const unsigned long *mask,
      unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*old & ~(*mask)) | (*new & *mask);
 else
  __bitmap_replace(dst, old, new, mask, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_next_clear_region(unsigned long *bitmap,
         unsigned int *rs, unsigned int *re,
         unsigned int end)
{
 *rs = find_next_zero_bit(bitmap, end, *rs);
 *re = find_next_bit(bitmap, end, *rs + 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_next_set_region(unsigned long *bitmap,
       unsigned int *rs, unsigned int *re,
       unsigned int end)
{
 *rs = find_next_bit(bitmap, end, *rs);
 *re = find_next_zero_bit(bitmap, end, *rs + 1);
}
# 547 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 563 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long bitmap_get_value8(const unsigned long *map,
           unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 return (map[index] >> offset) & 0xFF;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_set_value8(unsigned long *map, unsigned long value,
         unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 map[index] &= ~(0xFFUL << offset);
 map[index] |= value << offset;
}
# 13 "./include/linux/cpumask.h" 2




typedef struct cpumask { unsigned long bits[(((1) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 90 "./include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
extern struct cpumask __cpu_dying_mask;






extern atomic_t __num_online_cpus;

extern cpumask_t cpus_booted_once_mask;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{



}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, ((unsigned int)1));
 return cpu;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_last(const struct cpumask *srcp)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next(int n, const struct cpumask *srcp)
{
 return n+1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{
 return n+1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next_and(int n,
         const struct cpumask *srcp,
         const struct cpumask *andp)
{
 return n+1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next_wrap(int n, const struct cpumask *mask,
          int start, bool wrap)
{

 return (wrap && n == 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_any_but(const struct cpumask *mask,
        unsigned int cpu)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_local_spread(unsigned int i, int node)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_any_and_distribute(const struct cpumask *src1p,
          const struct cpumask *src2p) {
 return cpumask_next_and(-1, src1p, src2p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_any_distribute(const struct cpumask *srcp)
{
 return cpumask_first(srcp);
}
# 309 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 __set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 __clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 342 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 356 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 370 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)1));
}
# 401 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)1));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)1));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)1));
}
# 444 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)1));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)1));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)1));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_or_equal(const struct cpumask *src1p,
        const struct cpumask *src2p,
        const struct cpumask *src3p)
{
 return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
          ((src3p)->bits), ((unsigned int)1));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)1));
}
# 509 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)1));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)1));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)1));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)1));
}
# 620 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)1));
}
# 634 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)1));
}
# 648 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parse(buf, (~0U), ((dstp)->bits), ((unsigned int)1));
}
# 660 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)1));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_size(void)
{
 return (((((unsigned int)1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 733 "./include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((1) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 793 "./include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

void set_cpu_online(unsigned int cpu, bool online);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
set_cpu_dying(unsigned int cpu, bool dying)
{
 if (dying)
  cpumask_set_cpu(cpu, &__cpu_dying_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_dying_mask);
}
# 854 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 866 "./include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((1) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 925 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_online(unsigned int cpu)
{
 return cpu == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_possible(unsigned int cpu)
{
 return cpu == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_present(unsigned int cpu)
{
 return cpu == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_active(unsigned int cpu)
{
 return cpu == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_dying(unsigned int cpu)
{
 return false;
}
# 979 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          1U);
}
# 1002 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t
cpumap_print_bitmask_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_bitmask_to_buf(buf, ((mask)->bits),
       1U, off, count) - 1;
}
# 1017 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t
cpumap_print_list_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_list_to_buf(buf, ((mask)->bits),
       1U, off, count) - 1;
}
# 6 "./arch/x86/include/asm/cpumask.h" 2

extern cpumask_var_t cpu_callin_mask;
extern cpumask_var_t cpu_callout_mask;
extern cpumask_var_t cpu_initialized_mask;
extern cpumask_var_t cpu_sibling_setup_mask;

extern void setup_cpu_local_masks(void);
# 24 "./arch/x86/include/asm/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_cpu_online(int cpu)
{
 return cpu == 0;
}
# 12 "./arch/x86/include/asm/msr.h" 2
# 1 "./arch/x86/include/uapi/asm/msr.h" 1
# 13 "./arch/x86/include/asm/msr.h" 2

struct msr {
 union {
  struct {
   u32 l;
   u32 h;
  };
  u64 q;
 };
};

struct msr_info {
 u32 msr_no;
 struct msr reg;
 struct msr *msrs;
 int err;
};

struct msr_regs_info {
 u32 *regs;
 int err;
};

struct saved_msr {
 bool valid;
 struct msr_info info;
};

struct saved_msrs {
 unsigned int num;
 struct saved_msr *array;
};
# 67 "./arch/x86/include/asm/msr.h"
# 1 "./include/linux/tracepoint-defs.h" 1
# 12 "./include/linux/tracepoint-defs.h"
# 1 "./include/linux/static_key.h" 1
# 13 "./include/linux/tracepoint-defs.h" 2

struct static_call_key;

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 struct static_call_key *static_call_key;
 void *static_call_tramp;
 void *iterator;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};


typedef const int tracepoint_ptr_t;




struct bpf_raw_event_map {
 struct tracepoint *tp;
 void *bpf_func;
 u32 num_args;
 u32 writable_size;
} __attribute__((__aligned__(32)));
# 68 "./arch/x86/include/asm/msr.h" 2


extern struct tracepoint __tracepoint_read_msr;
extern struct tracepoint __tracepoint_write_msr;
extern struct tracepoint __tracepoint_rdpmc;
extern void do_trace_write_msr(unsigned int msr, u64 val, int failed);
extern void do_trace_read_msr(unsigned int msr, u64 val, int failed);
extern void do_trace_rdpmc(unsigned int msr, u64 val, int failed);
# 89 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long long __rdmsr(unsigned int msr)
{
 unsigned long low, high;

 asm volatile("1: rdmsr\n"
       "2:\n"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long " "9" " \n" " .popsection\n"
       : "=a" (low), "=d" (high) : "c" (msr));

 return ((low) | (high) << 32);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __wrmsr(unsigned int msr, u32 low, u32 high)
{
 asm volatile("1: wrmsr\n"
       "2:\n"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long " "8" " \n" " .popsection\n"
       : : "c" (msr), "a"(low), "d" (high) : "memory");
}
# 123 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long native_read_msr(unsigned int msr)
{
 unsigned long long val;

 val = __rdmsr(msr);

 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_read_msr(msr, val, 0);

 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long native_read_msr_safe(unsigned int msr,
            int *err)
{
 unsigned long low, high;

 asm volatile("1: rdmsr ; xor %[err],%[err]\n"
       "2:\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" "extable_type_reg reg=" "%[err]" ", type=" "11" " \n" " .popsection\n"
       : [err] "=r" (*err), "=a" (low), "=d" (high)
       : "c" (msr));
 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_read_msr(msr, ((low) | (high) << 32), *err);
 return ((low) | (high) << 32);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((no_instrument_function))
native_write_msr(unsigned int msr, u32 low, u32 high)
{
 __wrmsr(msr, low, high);

 if (static_key_false(&(__tracepoint_write_msr).key))
  do_trace_write_msr(msr, ((u64)high << 32 | low), 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((no_instrument_function))
native_write_msr_safe(unsigned int msr, u32 low, u32 high)
{
 int err;

 asm volatile("1: wrmsr ; xor %[err],%[err]\n"
       "2:\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" "extable_type_reg reg=" "%[err]" ", type=" "10" " \n" " .popsection\n"
       : [err] "=a" (err)
       : "c" (msr), "0" (low), "d" (high)
       : "memory");
 if (static_key_false(&(__tracepoint_write_msr).key))
  do_trace_write_msr(msr, ((u64)high << 32 | low), err);
 return err;
}

extern int rdmsr_safe_regs(u32 regs[8]);
extern int wrmsr_safe_regs(u32 regs[8]);
# 189 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long long rdtsc(void)
{
 unsigned long low, high;

 asm volatile("rdtsc" : "=a" (low), "=d" (high));

 return ((low) | (high) << 32);
}
# 206 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long long rdtsc_ordered(void)
{
 unsigned long low, high;
# 224 "./arch/x86/include/asm/msr.h"
 asm volatile("# ALT: oldinstr2\n" "661:\n\t" "rdtsc" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 1*32+27)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "lfence; rdtsc" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" "rdtscp" "\n" "665""2" ":\n" ".popsection\n"


   : "=a" (low), "=d" (high)

   :: "ecx");

 return ((low) | (high) << 32);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long native_read_pmc(int counter)
{
 unsigned long low, high;

 asm volatile("rdpmc" : "=a" (low), "=d" (high) : "c" (counter));
 if (static_key_false(&(__tracepoint_rdpmc).key))
  do_trace_rdpmc(counter, ((low) | (high) << 32), 0);
 return ((low) | (high) << 32);
}
# 261 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrmsr(unsigned int msr, u32 low, u32 high)
{
 native_write_msr(msr, low, high);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrmsrl(unsigned int msr, u64 val)
{
 native_write_msr(msr, (u32)(val & 0xffffffffULL), (u32)(val >> 32));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_safe(unsigned int msr, u32 low, u32 high)
{
 return native_write_msr_safe(msr, low, high);
}
# 290 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsrl_safe(unsigned int msr, unsigned long long *p)
{
 int err;

 *p = native_read_msr_safe(msr, &err);
 return err;
}
# 312 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsrl_safe(u32 msr, u64 val)
{
 return wrmsr_safe(msr, (u32)val, (u32)(val >> 32));
}

struct msr *msrs_alloc(void);
void msrs_free(struct msr *msrs);
int msr_set_bit(u32 msr, u8 bit);
int msr_clear_bit(u32 msr, u8 bit);
# 336 "./arch/x86/include/asm/msr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h)
{
 do { u64 __val = native_read_msr((msr_no)); (void)((*l) = (u32)__val); (void)((*h) = (u32)(__val >> 32)); } while (0);
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h)
{
 wrmsr(msr_no, l, h);
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 *q)
{
 ((*q) = native_read_msr((msr_no)));
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 q)
{
 wrmsrl(msr_no, q);
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rdmsr_on_cpus(const struct cpumask *m, u32 msr_no,
    struct msr *msrs)
{
 rdmsr_on_cpu(0, msr_no, &(msrs[0].l), &(msrs[0].h));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrmsr_on_cpus(const struct cpumask *m, u32 msr_no,
    struct msr *msrs)
{
 wrmsr_on_cpu(0, msr_no, msrs[0].l, msrs[0].h);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsr_safe_on_cpu(unsigned int cpu, u32 msr_no,
        u32 *l, u32 *h)
{
 return ({ int __err; u64 __val = native_read_msr_safe((msr_no), &__err); (*l) = (u32)__val; (*h) = (u32)(__val >> 32); __err; });
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h)
{
 return wrmsr_safe(msr_no, l, h);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 *q)
{
 return rdmsrl_safe(msr_no, q);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 q)
{
 return wrmsrl_safe(msr_no, q);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8])
{
 return rdmsr_safe_regs(regs);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8])
{
 return wrmsr_safe_regs(regs);
}
# 23 "./arch/x86/include/asm/processor.h" 2
# 1 "./arch/x86/include/asm/desc_defs.h" 1
# 16 "./arch/x86/include/asm/desc_defs.h"
struct desc_struct {
 u16 limit0;
 u16 base0;
 u16 base1: 8, type: 4, s: 1, dpl: 2, p: 1;
 u16 limit1: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8;
} __attribute__((packed));
# 40 "./arch/x86/include/asm/desc_defs.h"
enum {
 GATE_INTERRUPT = 0xE,
 GATE_TRAP = 0xF,
 GATE_CALL = 0xC,
 GATE_TASK = 0x5,
};

enum {
 DESC_TSS = 0x9,
 DESC_LDT = 0x2,
 DESCTYPE_S = 0x10,
};


struct ldttss_desc {
 u16 limit0;
 u16 base0;

 u16 base1 : 8, type : 5, dpl : 2, p : 1;
 u16 limit1 : 4, zero0 : 3, g : 1, base2 : 8;

 u32 base3;
 u32 zero1;

} __attribute__((packed));

typedef struct ldttss_desc ldt_desc;
typedef struct ldttss_desc tss_desc;

struct idt_bits {
 u16 ist : 3,
   zero : 5,
   type : 5,
   dpl : 2,
   p : 1;
} __attribute__((packed));

struct idt_data {
 unsigned int vector;
 unsigned int segment;
 struct idt_bits bits;
 const void *addr;
};

struct gate_struct {
 u16 offset_low;
 u16 segment;
 struct idt_bits bits;
 u16 offset_middle;

 u32 offset_high;
 u32 reserved;

} __attribute__((packed));

typedef struct gate_struct gate_desc;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long gate_offset(const gate_desc *g)
{

 return g->offset_low | ((unsigned long)g->offset_middle << 16) |
  ((unsigned long) g->offset_high << 32);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long gate_segment(const gate_desc *g)
{
 return g->segment;
}

struct desc_ptr {
 unsigned short size;
 unsigned long address;
} __attribute__((packed)) ;
# 24 "./arch/x86/include/asm/processor.h" 2

# 1 "./arch/x86/include/asm/special_insns.h" 1
# 10 "./arch/x86/include/asm/special_insns.h"
# 1 "./include/linux/irqflags.h" 1
# 16 "./include/linux/irqflags.h"
# 1 "./arch/x86/include/asm/irqflags.h" 1








# 1 "./arch/x86/include/asm/nospec-branch.h" 1





# 1 "./include/linux/static_key.h" 1
# 7 "./arch/x86/include/asm/nospec-branch.h" 2
# 1 "./include/linux/objtool.h" 1
# 13 "./include/linux/objtool.h"
struct unwind_hint {
 u32 ip;
 s16 sp_offset;
 u8 sp_reg;
 u8 type;
 u8 end;
};
# 8 "./arch/x86/include/asm/nospec-branch.h" 2





# 1 "./arch/x86/include/asm/unwind_hints.h" 1





# 1 "./arch/x86/include/asm/orc_types.h" 1
# 53 "./arch/x86/include/asm/orc_types.h"
struct orc_entry {
 s16 sp_offset;
 s16 bp_offset;

 unsigned sp_reg:4;
 unsigned bp_reg:4;
 unsigned type:2;
 unsigned end:1;







} __attribute__((__packed__));
# 7 "./arch/x86/include/asm/unwind_hints.h" 2
# 14 "./arch/x86/include/asm/nospec-branch.h" 2
# 189 "./arch/x86/include/asm/nospec-branch.h"
enum spectre_v2_mitigation {
 SPECTRE_V2_NONE,
 SPECTRE_V2_RETPOLINE_GENERIC,
 SPECTRE_V2_RETPOLINE_AMD,
 SPECTRE_V2_IBRS_ENHANCED,
};


enum spectre_v2_user_mitigation {
 SPECTRE_V2_USER_NONE,
 SPECTRE_V2_USER_STRICT,
 SPECTRE_V2_USER_STRICT_PREFERRED,
 SPECTRE_V2_USER_PRCTL,
 SPECTRE_V2_USER_SECCOMP,
};


enum ssb_mitigation {
 SPEC_STORE_BYPASS_NONE,
 SPEC_STORE_BYPASS_DISABLE,
 SPEC_STORE_BYPASS_PRCTL,
 SPEC_STORE_BYPASS_SECCOMP,
};

extern char __indirect_thunk_start[];
extern char __indirect_thunk_end[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
void alternative_msr_write(unsigned int msr, u64 val, unsigned int feature)
{
 asm volatile("# ALT: oldnstr\n" "661:\n\t" "" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "%c[feature]" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "wrmsr" "\n" "665""1" ":\n" ".popsection\n"
  : : "c" (msr),
      "a" ((u32)val),
      "d" ((u32)(val >> 32)),
      [feature] "i" (feature)
  : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void indirect_branch_prediction_barrier(void)
{
 u64 val = ((((1UL))) << (0));

 alternative_msr_write(0x00000049, val, ( 7*32+21));
}


extern u64 x86_spec_ctrl_base;
# 261 "./arch/x86/include/asm/nospec-branch.h"
extern struct static_key_false switch_to_cond_stibp;
extern struct static_key_false switch_mm_cond_ibpb;
extern struct static_key_false switch_mm_always_ibpb;

extern struct static_key_false mds_user_clear;
extern struct static_key_false mds_idle_clear;

extern struct static_key_false switch_mm_cond_l1d_flush;
# 279 "./arch/x86/include/asm/nospec-branch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void mds_clear_cpu_buffers(void)
{
 static const u16 ds = (3*8);
# 292 "./arch/x86/include/asm/nospec-branch.h"
 asm volatile("verw %[ds]" : : [ds] "m" (ds) : "cc");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void mds_user_clear_cpu_buffers(void)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&mds_user_clear)->key) > 0; })), 1))
  mds_clear_cpu_buffers();
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mds_idle_clear_cpu_buffers(void)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&mds_idle_clear)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&mds_idle_clear)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&mds_idle_clear)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&mds_idle_clear)->key) > 0; })), 1))
  mds_clear_cpu_buffers();
}
# 10 "./arch/x86/include/asm/irqflags.h" 2
# 19 "./arch/x86/include/asm/irqflags.h"
extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_save_fl(void);
extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long native_save_fl(void)
{
 unsigned long flags;






 asm volatile("# __raw_save_flags\n\t"
       "pushf ; pop %0"
       : "=rm" (flags)
       :
       : "memory");

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_irq_disable(void)
{
 asm volatile("cli": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_irq_enable(void)
{
 asm volatile("sti": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void native_safe_halt(void)
{
 mds_idle_clear_cpu_buffers();
 asm volatile("sti; hlt": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void native_halt(void)
{
 mds_idle_clear_cpu_buffers();
 asm volatile("hlt": : :"memory");
}
# 68 "./arch/x86/include/asm/irqflags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long arch_local_save_flags(void)
{
 return native_save_fl();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_local_irq_disable(void)
{
 native_irq_disable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_local_irq_enable(void)
{
 native_irq_enable();
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void arch_safe_halt(void)
{
 native_safe_halt();
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void halt(void)
{
 native_halt();
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long arch_local_irq_save(void)
{
 unsigned long flags = arch_local_save_flags();
 arch_local_irq_disable();
 return flags;
}
# 125 "./arch/x86/include/asm/irqflags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_irqs_disabled_flags(unsigned long flags)
{
 return !(flags & (((1UL)) << (9)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_irqs_disabled(void)
{
 unsigned long flags = arch_local_save_flags();

 return arch_irqs_disabled_flags(flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_local_irq_restore(unsigned long flags)
{
 if (!arch_irqs_disabled_flags(flags))
  arch_local_irq_enable();
}
# 17 "./include/linux/irqflags.h" 2
# 27 "./include/linux/irqflags.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_softirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_softirqs_off(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_hardirqs_on_prepare(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_hardirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_hardirqs_off(unsigned long ip) { }
# 153 "./include/linux/irqflags.h"
extern void warn_bogus_irq_restore(void);
# 11 "./arch/x86/include/asm/special_insns.h" 2
# 24 "./arch/x86/include/asm/special_insns.h"
void native_write_cr0(unsigned long val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_read_cr0(void)
{
 unsigned long val;
 asm volatile("mov %%cr0,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long native_read_cr2(void)
{
 unsigned long val;
 asm volatile("mov %%cr2,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_write_cr2(unsigned long val)
{
 asm volatile("mov %0,%%cr2": : "r" (val) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __native_read_cr3(void)
{
 unsigned long val;
 asm volatile("mov %%cr3,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_write_cr3(unsigned long val)
{
 asm volatile("mov %0,%%cr3": : "r" (val) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_read_cr4(void)
{
 unsigned long val;
# 72 "./arch/x86/include/asm/special_insns.h"
 asm volatile("mov %%cr4,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));

 return val;
}

void native_write_cr4(unsigned long val);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 rdpkru(void)
{
 u32 ecx = 0;
 u32 edx, pkru;





 asm volatile(".byte 0x0f,0x01,0xee\n\t"
       : "=a" (pkru), "=d" (edx)
       : "c" (ecx));
 return pkru;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrpkru(u32 pkru)
{
 u32 ecx = 0, edx = 0;





 asm volatile(".byte 0x0f,0x01,0xef\n\t"
       : : "a" (pkru), "c"(ecx), "d"(edx));
}
# 118 "./arch/x86/include/asm/special_insns.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_wbinvd(void)
{
 asm volatile("wbinvd": : :"memory");
}

extern void asm_load_gs_index(unsigned int selector);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_load_gs_index(unsigned int selector)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 asm_load_gs_index(selector);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __read_cr4(void)
{
 return native_read_cr4();
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long read_cr0(void)
{
 return native_read_cr0();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_cr0(unsigned long x)
{
 native_write_cr0(x);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long read_cr2(void)
{
 return native_read_cr2();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void write_cr2(unsigned long x)
{
 native_write_cr2(x);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __read_cr3(void)
{
 return __native_read_cr3();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_cr3(unsigned long x)
{
 native_write_cr3(x);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __write_cr4(unsigned long x)
{
 native_write_cr4(x);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wbinvd(void)
{
 native_wbinvd();
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void load_gs_index(unsigned int selector)
{
 native_load_gs_index(selector);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clflush(volatile void *__p)
{
 asm volatile("clflush %0" : "+m" (*(volatile char *)__p));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clflushopt(volatile void *__p)
{
 asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" ".byte 0x3e; clflush %P0" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" ".byte 0x66; clflush %P0" "\n" "665""1" ":\n" ".popsection\n" : "+m" (*(volatile char *)__p) : "i" (0));



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clwb(volatile void *__p)
{
 volatile struct { char x[64]; } *p = __p;

 asm volatile("# ALT: oldinstr2\n" "661:\n\t" ".byte 0x3e; clflush (%[pax])" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+24)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" ".byte 0x66; clflush (%[pax])" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" ".byte 0x66, 0x0f, 0xae, 0x30" "\n" "665""2" ":\n" ".popsection\n"





  : [p] "+m" (*p)
  : [pax] "a" (p));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void serialize(void)
{

 asm volatile(".byte 0xf, 0x1, 0xe8" ::: "memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void movdir64b(void *dst, const void *src)
{
 const struct { char _[64]; } *__src = src;
 struct { char _[64]; } *__dst = dst;
# 250 "./arch/x86/include/asm/special_insns.h"
 asm volatile(".byte 0x66, 0x0f, 0x38, 0xf8, 0x02"
       : "+m" (*__dst)
       : "m" (*__src), "a" (__dst), "d" (__src));
}
# 274 "./arch/x86/include/asm/special_insns.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int enqcmds(void *dst, const void *src)
{
 const struct { char _[64]; } *__src = src;
 struct { char _[64]; } *__dst = dst;
 bool zf;






 asm volatile(".byte 0xf3, 0x0f, 0x38, 0xf8, 0x02, 0x66, 0x90"
       "\n\t/* output condition code " "z" "*/\n"
       : "=@cc" "z" (zf), "+m" (*__dst)
       : "m" (*__src), "a" (__dst), "d" (__src));


 if (zf)
  return -11;

 return 0;
}
# 26 "./arch/x86/include/asm/processor.h" 2
# 1 "./arch/x86/include/asm/fpu/types.h" 1
# 12 "./arch/x86/include/asm/fpu/types.h"
struct fregs_state {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;


 u32 st_space[20];


 u32 status;
};







struct fxregs_state {
 u16 cwd;
 u16 swd;
 u16 twd;
 u16 fop;
 union {
  struct {
   u64 rip;
   u64 rdp;
  };
  struct {
   u32 fip;
   u32 fcs;
   u32 foo;
   u32 fos;
  };
 };
 u32 mxcsr;
 u32 mxcsr_mask;


 u32 st_space[32];


 u32 xmm_space[64];

 u32 padding[12];

 union {
  u32 padding1[12];
  u32 sw_reserved[12];
 };

} __attribute__((aligned(16)));
# 79 "./arch/x86/include/asm/fpu/types.h"
struct swregs_state {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;

 u32 st_space[20];
 u8 ftop;
 u8 changed;
 u8 lookahead;
 u8 no_update;
 u8 rm;
 u8 alimit;
 struct math_emu_info *info;
 u32 entry_eip;
};




enum xfeature {
 XFEATURE_FP,
 XFEATURE_SSE,




 XFEATURE_YMM,
 XFEATURE_BNDREGS,
 XFEATURE_BNDCSR,
 XFEATURE_OPMASK,
 XFEATURE_ZMM_Hi256,
 XFEATURE_Hi16_ZMM,
 XFEATURE_PT_UNIMPLEMENTED_SO_FAR,
 XFEATURE_PKRU,
 XFEATURE_PASID,
 XFEATURE_RSRVD_COMP_11,
 XFEATURE_RSRVD_COMP_12,
 XFEATURE_RSRVD_COMP_13,
 XFEATURE_RSRVD_COMP_14,
 XFEATURE_LBR,
 XFEATURE_RSRVD_COMP_16,
 XFEATURE_XTILE_CFG,
 XFEATURE_XTILE_DATA,

 XFEATURE_MAX,
};
# 159 "./arch/x86/include/asm/fpu/types.h"
struct reg_128_bit {
 u8 regbytes[128/8];
};
struct reg_256_bit {
 u8 regbytes[256/8];
};
struct reg_512_bit {
 u8 regbytes[512/8];
};
struct reg_1024_byte {
 u8 regbytes[1024];
};
# 182 "./arch/x86/include/asm/fpu/types.h"
struct ymmh_struct {
 struct reg_128_bit hi_ymm[16];
} __attribute__((__packed__));



struct mpx_bndreg {
 u64 lower_bound;
 u64 upper_bound;
} __attribute__((__packed__));



struct mpx_bndreg_state {
 struct mpx_bndreg bndreg[4];
} __attribute__((__packed__));






struct mpx_bndcsr {
 u64 bndcfgu;
 u64 bndstatus;
} __attribute__((__packed__));




struct mpx_bndcsr_state {
 union {
  struct mpx_bndcsr bndcsr;
  u8 pad_to_64_bytes[64];
 };
} __attribute__((__packed__));







struct avx_512_opmask_state {
 u64 opmask_reg[8];
} __attribute__((__packed__));






struct avx_512_zmm_uppers_state {
 struct reg_256_bit zmm_upper[16];
} __attribute__((__packed__));





struct avx_512_hi16_state {
 struct reg_512_bit hi16_zmm[16];
} __attribute__((__packed__));





struct pkru_state {
 u32 pkru;
 u32 pad;
} __attribute__((__packed__));






struct lbr_entry {
 u64 from;
 u64 to;
 u64 info;
};

struct arch_lbr_state {
 u64 lbr_ctl;
 u64 lbr_depth;
 u64 ler_from;
 u64 ler_to;
 u64 ler_info;
 struct lbr_entry entries[];
};




struct xtile_cfg {
 u64 tcfg[8];
} __attribute__((__packed__));







struct xtile_data {
 struct reg_1024_byte tmm;
} __attribute__((__packed__));





struct ia32_pasid_state {
 u64 pasid;
} __attribute__((__packed__));

struct xstate_header {
 u64 xfeatures;
 u64 xcomp_bv;
 u64 reserved[6];
} __attribute__((packed));
# 321 "./arch/x86/include/asm/fpu/types.h"
struct xregs_state {
 struct fxregs_state i387;
 struct xstate_header header;
 u8 extended_state_area[0];
} __attribute__ ((packed, aligned (64)));
# 336 "./arch/x86/include/asm/fpu/types.h"
union fpregs_state {
 struct fregs_state fsave;
 struct fxregs_state fxsave;
 struct swregs_state soft;
 struct xregs_state xsave;
 u8 __padding[((1UL) << 12)];
};

struct fpstate {

 unsigned int size;


 unsigned int user_size;


 u64 xfeatures;


 u64 user_xfeatures;


 u64 xfd;


 unsigned int is_valloc : 1;


 unsigned int is_guest : 1;
# 379 "./arch/x86/include/asm/fpu/types.h"
 unsigned int is_confidential : 1;


 unsigned int in_use : 1;


 union fpregs_state regs;


} __attribute__((__aligned__(64)));

struct fpu_state_perm {
# 410 "./arch/x86/include/asm/fpu/types.h"
 u64 __state_perm;







 unsigned int __state_size;







 unsigned int __user_state_size;
};






struct fpu {
# 447 "./arch/x86/include/asm/fpu/types.h"
 unsigned int last_cpu;






 unsigned long avx512_timestamp;







 struct fpstate *fpstate;







 struct fpstate *__task_fpstate;






 struct fpu_state_perm perm;
# 487 "./arch/x86/include/asm/fpu/types.h"
 struct fpstate __fpstate;




};




struct fpu_guest {



 struct fpstate *fpstate;
};




struct fpu_state_config {






 unsigned int max_size;
# 523 "./arch/x86/include/asm/fpu/types.h"
 unsigned int default_size;







 u64 max_features;
# 540 "./arch/x86/include/asm/fpu/types.h"
 u64 default_features;






 u64 legacy_features;
};


extern struct fpu_state_config fpu_kernel_cfg, fpu_user_cfg;
# 27 "./arch/x86/include/asm/processor.h" 2

# 1 "./arch/x86/include/asm/vmxfeatures.h" 1
# 29 "./arch/x86/include/asm/processor.h" 2
# 1 "./arch/x86/include/asm/vdso/processor.h" 1
# 11 "./arch/x86/include/asm/vdso/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void rep_nop(void)
{
 asm volatile("rep; nop" ::: "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void cpu_relax(void)
{
 rep_nop();
}
# 30 "./arch/x86/include/asm/processor.h" 2

# 1 "./include/linux/personality.h" 1




# 1 "./include/uapi/linux/personality.h" 1
# 11 "./include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 42 "./include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 6 "./include/linux/personality.h" 2
# 32 "./arch/x86/include/asm/processor.h" 2
# 62 "./arch/x86/include/asm/processor.h"
enum tlb_infos {
 ENTRIES,
 NR_INFO
};

extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_1g[NR_INFO];







struct cpuinfo_x86 {
 __u8 x86;
 __u8 x86_vendor;
 __u8 x86_model;
 __u8 x86_stepping;


 int x86_tlbsize;


 __u32 vmx_capability[3];

 __u8 x86_virt_bits;
 __u8 x86_phys_bits;

 __u8 x86_coreid_bits;
 __u8 cu_id;

 __u32 extended_cpuid_level;

 int cpuid_level;





 union {
  __u32 x86_capability[20 + 1];
  unsigned long x86_capability_alignment;
 };
 char x86_vendor_id[16];
 char x86_model_id[64];

 unsigned int x86_cache_size;
 int x86_cache_alignment;

 int x86_cache_max_rmid;
 int x86_cache_occ_scale;
 int x86_cache_mbm_width_offset;
 int x86_power;
 unsigned long loops_per_jiffy;

 u16 x86_max_cores;
 u16 apicid;
 u16 initial_apicid;
 u16 x86_clflush_size;

 u16 booted_cores;

 u16 phys_proc_id;

 u16 logical_proc_id;

 u16 cpu_core_id;
 u16 cpu_die_id;
 u16 logical_die_id;

 u16 cpu_index;

 bool smt_active;
 u32 microcode;

 u8 x86_cache_bits;
 unsigned initialized : 1;
} ;

struct cpuid_regs {
 u32 eax, ebx, ecx, edx;
};

enum cpuid_regs_idx {
 CPUID_EAX = 0,
 CPUID_EBX,
 CPUID_ECX,
 CPUID_EDX,
};
# 175 "./arch/x86/include/asm/processor.h"
extern struct cpuinfo_x86 boot_cpu_data;
extern struct cpuinfo_x86 new_cpu_data;

extern __u32 cpu_caps_cleared[20 + 1];
extern __u32 cpu_caps_set[20 + 1];
# 189 "./arch/x86/include/asm/processor.h"
extern const struct seq_operations cpuinfo_op;



extern void cpu_detect(struct cpuinfo_x86 *c);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long l1tf_pfn_limit(void)
{
 return ((((1ULL))) << (boot_cpu_data.x86_cache_bits - 1 - 12));
}

extern void early_cpu_init(void);
extern void identify_boot_cpu(void);
extern void identify_secondary_cpu(struct cpuinfo_x86 *);
extern void print_cpu_info(struct cpuinfo_x86 *);
void print_cpu_msr(struct cpuinfo_x86 *);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int have_cpuid_p(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_cpuid(unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{

 asm volatile("cpuid"
     : "=a" (*eax),
       "=b" (*ebx),
       "=c" (*ecx),
       "=d" (*edx)
     : "0" (*eax), "2" (*ecx)
     : "memory");
}
# 240 "./arch/x86/include/asm/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_eax(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return eax; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_ebx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return ebx; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_ecx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return ecx; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_edx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return edx; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long read_cr3_pa(void)
{
 return __read_cr3() & (0x7FFFFFFFFFFFF000ull);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_read_cr3_pa(void)
{
 return __native_read_cr3() & (0x7FFFFFFFFFFFF000ull);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void load_cr3(pgd_t *pgdir)
{
 write_cr3((__phys_addr_nodebug((unsigned long)(pgdir)) | 0ULL));
}
# 317 "./arch/x86/include/asm/processor.h"
struct x86_hw_tss {
 u32 reserved1;
 u64 sp0;
 u64 sp1;






 u64 sp2;

 u64 reserved2;
 u64 ist[7];
 u32 reserved3;
 u32 reserved4;
 u16 reserved5;
 u16 io_bitmap_base;

} __attribute__((packed));
# 370 "./arch/x86/include/asm/processor.h"
struct entry_stack {
 char stack[((1UL) << 12)];
};

struct entry_stack_page {
 struct entry_stack stack;
} __attribute__((__aligned__(((1UL) << 12))));




struct x86_io_bitmap {

 u64 prev_sequence;
# 392 "./arch/x86/include/asm/processor.h"
 unsigned int prev_max;







 unsigned long bitmap[((65536 / 8) / sizeof(long)) + 1];





 unsigned long mapall[((65536 / 8) / sizeof(long)) + 1];
};

struct tss_struct {





 struct x86_hw_tss x86_tss;

 struct x86_io_bitmap io_bitmap;
} __attribute__((__aligned__(((1UL) << 12))));

extern __attribute__((section(".data" "..page_aligned"))) __typeof__(struct tss_struct) cpu_tss_rw __attribute__((__aligned__(((1UL) << 12))));


struct irq_stack {
 char stack[(((1UL) << 12) << (2 + 0))];
} __attribute__((__aligned__((((1UL) << 12) << (2 + 0)))));

extern __attribute__((section(".data" ""))) __typeof__(unsigned long) cpu_current_top_of_stack;


struct fixed_percpu_data {
# 439 "./arch/x86/include/asm/processor.h"
 char gs_base[40];
 unsigned long stack_canary;
};

extern __attribute__((section(".data" ""))) __typeof__(struct fixed_percpu_data) fixed_percpu_data ;
extern typeof(fixed_percpu_data) fixed_percpu_data;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long cpu_kernelmode_gs_base(int cpu)
{
 return (unsigned long)(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(fixed_percpu_data.gs_base)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(fixed_percpu_data.gs_base))) *)(&(fixed_percpu_data.gs_base)); }); }));
}

extern __attribute__((section(".data" ""))) __typeof__(void *) hardirq_stack_ptr;
extern __attribute__((section(".data" ""))) __typeof__(bool) hardirq_stack_inuse;
extern void ignore_sysret(void);


void current_save_fsgs(void);
# 465 "./arch/x86/include/asm/processor.h"
struct perf_event;

struct thread_struct {

 struct desc_struct tls_array[3];



 unsigned long sp;



 unsigned short es;
 unsigned short ds;
 unsigned short fsindex;
 unsigned short gsindex;



 unsigned long fsbase;
 unsigned long gsbase;
# 496 "./arch/x86/include/asm/processor.h"
 struct perf_event *ptrace_bps[4];

 unsigned long virtual_dr6;

 unsigned long ptrace_dr7;

 unsigned long cr2;
 unsigned long trap_nr;
 unsigned long error_code;





 struct io_bitmap *io_bitmap;






 unsigned long iopl_emul;

 unsigned int iopl_warn:1;
 unsigned int sig_on_uaccess_err:1;
# 529 "./arch/x86/include/asm/processor.h"
 u32 pkru;


 struct fpu fpu;




};

extern void fpu_thread_struct_whitelist(unsigned long *offset, unsigned long *size);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{
 fpu_thread_struct_whitelist(offset, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
native_load_sp0(unsigned long sp0)
{
 do { do { const void *__vpp_verify = (typeof((&(cpu_tss_rw.x86_tss.sp0)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_tss_rw.x86_tss.sp0)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) sp0) & 0xff)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) sp0) & 0xffff)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) sp0) & 0xffffffff)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(sp0)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_swapgs(void)
{

 asm volatile("swapgs" ::: "memory");

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long current_top_of_stack(void)
{





 return ({ typeof(cpu_current_top_of_stack) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_current_top_of_stack)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_current_top_of_stack)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm("mov" "b " "" "%" "P[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "p" (&(cpu_current_top_of_stack))); (typeof(cpu_current_top_of_stack))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm("mov" "w " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(cpu_current_top_of_stack))); (typeof(cpu_current_top_of_stack))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm("mov" "l " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(cpu_current_top_of_stack))); (typeof(cpu_current_top_of_stack))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm("mov" "q " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(cpu_current_top_of_stack))); (typeof(cpu_current_top_of_stack))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool on_thread_stack(void)
{
 return (unsigned long)(current_top_of_stack() -
          current_stack_pointer) < (((1UL) << 12) << (2 + 0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void load_sp0(unsigned long sp0)
{
 native_load_sp0(sp0);
}




extern void release_thread(struct task_struct *);

unsigned long __get_wchan(struct task_struct *p);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuid(unsigned int op,
    unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = 0;
 native_cpuid(eax, ebx, ecx, edx);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuid_count(unsigned int op, int count,
          unsigned int *eax, unsigned int *ebx,
          unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = count;
 native_cpuid(eax, ebx, ecx, edx);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_eax(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return eax;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_ebx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ebx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_ecx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ecx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_edx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return edx;
}

extern void select_idle_routine(const struct cpuinfo_x86 *c);
extern void amd_e400_c1e_apic_setup(void);

extern unsigned long boot_option_idle_override;

enum idle_boot_override {IDLE_NO_OVERRIDE=0, IDLE_HALT, IDLE_NOMWAIT,
    IDLE_POLL};

extern void enable_sep_cpu(void);
extern int sysenter_setup(void);



extern struct desc_ptr early_gdt_descr;

extern void switch_to_new_gdt(int);
extern void load_direct_gdt(int);
extern void load_fixmap_gdt(int);
extern void load_percpu_segment(int);
extern void cpu_init(void);
extern void cpu_init_secondary(void);
extern void cpu_init_exception_handling(void);
extern void cr4_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_debugctlmsr(void)
{
 unsigned long debugctlmsr = 0;





 ((debugctlmsr) = native_read_msr((0x000001d9)));

 return debugctlmsr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_debugctlmsr(unsigned long debugctlmsr)
{




 wrmsrl(0x000001d9, debugctlmsr);
}

extern void set_task_blockstep(struct task_struct *task, bool on);


extern int bootloader_type;
extern int bootloader_version;

extern char ignore_fpu_irq;
# 727 "./arch/x86/include/asm/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prefetch(const void *x)
{
 asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "prefetcht0 %P1" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 0*32+25)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "prefetchnta %P1" "\n" "665""1" ":\n" ".popsection\n" : : "i" (0), "m" (*(const char *)x));


}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void prefetchw(const void *x)
{
 asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "prefetcht0 %P1" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 6*32+ 8)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "prefetchw %P1" "\n" "665""1" ":\n" ".popsection\n" : : "i" (0), "m" (*(const char *)x));


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void spin_lock_prefetch(const void *x)
{
 prefetchw(x);
}
# 774 "./arch/x86/include/asm/processor.h"
extern unsigned long KSTK_ESP(struct task_struct *task);



extern void start_thread(struct pt_regs *regs, unsigned long new_ip,
            unsigned long new_sp);
# 794 "./arch/x86/include/asm/processor.h"
extern int get_tsc_mode(unsigned long adr);
extern int set_tsc_mode(unsigned int val);

extern __attribute__((section(".data" ""))) __typeof__(u64) msr_misc_features_shadow;

extern u16 get_llc_id(unsigned int cpu);


extern u32 amd_get_nodes_per_socket(void);
extern u32 amd_get_highest_perf(void);
# 812 "./arch/x86/include/asm/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uint32_t hypervisor_cpuid_base(const char *sig, uint32_t leaves)
{
 uint32_t base, eax, signature[3];

 for (base = 0x40000000; base < 0x40010000; base += 0x100) {
  cpuid(base, &eax, &signature[0], &signature[1], &signature[2]);

  if (!memcmp(sig, signature, 12) &&
      (leaves == 0 || ((eax - base) >= leaves)))
   return base;
 }

 return 0;
}

extern unsigned long arch_align_stack(unsigned long sp);
void free_init_pages(const char *what, unsigned long begin, unsigned long end);
extern void free_kernel_image_pages(const char *what, void *begin, void *end);

void default_idle(void);






void stop_this_cpu(void *dummy);
void microcode_check(void);

enum l1tf_mitigations {
 L1TF_MITIGATION_OFF,
 L1TF_MITIGATION_FLUSH_NOWARN,
 L1TF_MITIGATION_FLUSH,
 L1TF_MITIGATION_FLUSH_NOSMT,
 L1TF_MITIGATION_FULL,
 L1TF_MITIGATION_FULL_FORCE
};

extern enum l1tf_mitigations l1tf_mitigation;

enum mds_mitigations {
 MDS_MITIGATION_OFF,
 MDS_MITIGATION_FULL,
 MDS_MITIGATION_VMWERV,
};
# 6 "./arch/x86/include/asm/cpufeature.h" 2







enum cpuid_leafs
{
 CPUID_1_EDX = 0,
 CPUID_8000_0001_EDX,
 CPUID_8086_0001_EDX,
 CPUID_LNX_1,
 CPUID_1_ECX,
 CPUID_C000_0001_EDX,
 CPUID_8000_0001_ECX,
 CPUID_LNX_2,
 CPUID_LNX_3,
 CPUID_7_0_EBX,
 CPUID_D_1_EAX,
 CPUID_LNX_4,
 CPUID_7_1_EAX,
 CPUID_8000_0008_EBX,
 CPUID_6_EAX,
 CPUID_8000_000A_EDX,
 CPUID_7_ECX,
 CPUID_8000_0007_EBX,
 CPUID_7_EDX,
 CPUID_8000_001F_EAX,
};


extern const char * const x86_cap_flags[20*32];
extern const char * const x86_power_flags[32];
# 51 "./arch/x86/include/asm/cpufeature.h"
extern const char * const x86_bug_flags[1*32];
# 145 "./arch/x86/include/asm/cpufeature.h"
extern void setup_clear_cpu_cap(unsigned int bit);
extern void clear_cpu_cap(struct cpuinfo_x86 *c, unsigned int bit);
# 182 "./arch/x86/include/asm/cpufeature.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool _static_cpu_has(u16 bit)
{
 asm goto("# ALT: oldinstr2\n" "661:\n\t" "jmp 6f" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+21)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "%P[feature]" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "jmp %l[t_no]" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" "" "\n" "665""2" ":\n" ".popsection\n" ".pushsection .altinstr_aux,\"ax\"\n" "6:\n" " testb %[bitnum]," "%P[cap_byte] (%% rip)" "\n" " jnz %l[t_yes]\n" " jmp %l[t_no]\n" ".popsection\n" : : [feature] "i" (bit), [bitnum] "i" (1 << (bit & 7)), [cap_byte] "i" (&((const char *)boot_cpu_data.x86_capability)[bit >> 3]) : : t_yes, t_no);
# 196 "./arch/x86/include/asm/cpufeature.h"
t_yes:
 return true;
t_no:
 return false;
}
# 54 "./arch/x86/include/asm/thread_info.h" 2


struct thread_info {
 unsigned long flags;
 unsigned long syscall_work;
 u32 status;



};
# 169 "./arch/x86/include/asm/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{

 const void *frame = ((void *)0);
 const void *oldframe;

 oldframe = __builtin_frame_address(1);
 if (oldframe)
  frame = __builtin_frame_address(2);






 while (stack <= frame && frame < stackend) {






  if (obj + len <= frame)
   return obj >= oldframe + 2 * sizeof(void *) ?
    GOOD_FRAME : BAD_STACK;
  oldframe = frame;
  frame = *(const void * const *)frame;
 }
 return BAD_STACK;



}
# 232 "./arch/x86/include/asm/thread_info.h"
extern void arch_task_cache_init(void);
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
extern void arch_release_task_struct(struct task_struct *tsk);
extern void arch_setup_new_exec(void);
# 61 "./include/linux/thread_info.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long set_restart_fn(struct restart_block *restart,
     long (*fn)(struct restart_block *))
{
 restart->fn = fn;
 do { } while (0);
 return -516;
}
# 87 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_bit(flag, (unsigned long *)&ti->flags);
}
# 188 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_object_size(const void *ptr, unsigned long n,
         bool to_user)
{ }


extern void __attribute__((__error__("copy source size is too small")))
__bad_copy_from(void);
extern void __attribute__((__error__("copy destination size is too small")))
__bad_copy_to(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("Buffer overflow detected (%d < %lu)!\n", size, count); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = __builtin_object_size(addr, 0);
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 if (({ int __ret_warn_on = !!(bytes > ((int)(~0U >> 1))); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 check_object_size(addr, bytes, is_source);
 return true;
}
# 8 "./arch/x86/include/asm/preempt.h" 2


extern __attribute__((section(".data" ""))) __typeof__(int) __preempt_count;
# 25 "./arch/x86/include/asm/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int preempt_count(void)
{
 return ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; }) & ~0x80000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void preempt_count_set(int pc)
{
 int old, new;

 do {
  old = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; });
  new = (old & 0x80000000) |
   (pc & ~0x80000000);
 } while (({ u32 pco_old__ = ((u32)(((unsigned long) old) & 0xffffffff)); u32 pco_new__ = ((u32)(((unsigned long) new) & 0xffffffff)); asm ("cmpxchg" "l " "%[nval]" ", " "" "%" "[var]" : [oval] "+a" (pco_old__), [var] "+m" (__preempt_count) : [nval] "r" (pco_new__) : "memory"); (typeof(__preempt_count))(unsigned long) pco_old__; }) != old);
}
# 59 "./arch/x86/include/asm/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void set_preempt_need_resched(void)
{
 do { u32 pto_val__ = ((u32)(((unsigned long) ~0x80000000) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (~0x80000000); (void)pto_tmp__; } asm ("and" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void clear_preempt_need_resched(void)
{
 do { u32 pto_val__ = ((u32)(((unsigned long) 0x80000000) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (0x80000000); (void)pto_tmp__; } asm ("or" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool test_preempt_need_resched(void)
{
 return !(({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; }) & 0x80000000);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __preempt_count_add(int val)
{
 do { const int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (int)(val) : 0; if (0) { typeof((__preempt_count)) pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else if (pao_ID__ == -1) ({ asm ("dec" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) val) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (val); (void)pto_tmp__; } asm ("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __preempt_count_sub(int val)
{
 do { const int pao_ID__ = (__builtin_constant_p(-val) && ((-val) == 1 || (-val) == -1)) ? (int)(-val) : 0; if (0) { typeof((__preempt_count)) pao_tmp__; pao_tmp__ = (-val); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else if (pao_ID__ == -1) ({ asm ("dec" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -val) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (-val); (void)pto_tmp__; } asm ("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __preempt_count_dec_and_test(void)
{
 return ({ bool c; asm volatile ("decl" " " "" "%" "[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (__preempt_count), "=@cc" "e" (c) : : "memory"); c; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; }) == preempt_offset), 0);
}



extern void preempt_schedule(void);
extern void preempt_schedule_thunk(void);



extern void preempt_schedule_notrace(void);
extern void preempt_schedule_notrace_thunk(void);





extern struct static_call_key __SCK__preempt_schedule; extern typeof(preempt_schedule_thunk) __SCT__preempt_schedule;;







extern struct static_call_key __SCK__preempt_schedule_notrace; extern typeof(preempt_schedule_notrace_thunk) __SCT__preempt_schedule_notrace;;
# 79 "./include/linux/preempt.h" 2
# 89 "./include/linux/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned char interrupt_context_level(void)
{
 unsigned long pc = preempt_count();
 unsigned char level = 0;

 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4))));
 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4)) | (((1UL << (4))-1) << ((0 + 8) + 8))));
 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4)) | (((1UL << (4))-1) << ((0 + 8) + 8)) | (1UL << (0 + 8))));

 return level;
}
# 183 "./include/linux/preempt.h"
extern void preempt_count_add(int val);
extern void preempt_count_sub(int val);
# 309 "./include/linux/preempt.h"
struct preempt_notifier;
# 325 "./include/linux/preempt.h"
struct preempt_ops {
 void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 void (*sched_out)(struct preempt_notifier *notifier,
     struct task_struct *next);
};
# 338 "./include/linux/preempt.h"
struct preempt_notifier {
 struct hlist_node link;
 struct preempt_ops *ops;
};

void preempt_notifier_inc(void);
void preempt_notifier_dec(void);
void preempt_notifier_register(struct preempt_notifier *notifier);
void preempt_notifier_unregister(struct preempt_notifier *notifier);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void preempt_notifier_init(struct preempt_notifier *notifier,
         struct preempt_ops *ops)
{
 INIT_HLIST_NODE(&notifier->link);
 notifier->ops = ops;
}
# 419 "./include/linux/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void migrate_disable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void migrate_enable(void) { }
# 56 "./include/linux/spinlock.h" 2





# 1 "./include/linux/bottom_half.h" 1
# 11 "./include/linux/bottom_half.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool local_bh_blocked(void) { return false; }
# 62 "./include/linux/spinlock.h" 2
# 1 "./include/linux/lockdep.h" 1
# 14 "./include/linux/lockdep.h"
# 1 "./include/linux/smp.h" 1
# 15 "./include/linux/smp.h"
# 1 "./include/linux/smp_types.h" 1




# 1 "./include/linux/llist.h" 1
# 56 "./include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 71 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 189 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool llist_empty(const struct llist_head *head)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_32(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->first) == sizeof(char) || sizeof(head->first) == sizeof(short) || sizeof(head->first) == sizeof(int) || sizeof(head->first) == sizeof(long)) || sizeof(head->first) == sizeof(long long))) __compiletime_assert_32(); } while (0); (*(const volatile typeof( _Generic((head->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->first))) *)&(head->first)); }) == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __llist_add_batch(struct llist_node *new_first,
         struct llist_node *new_last,
         struct llist_head *head)
{
 new_last->next = head->first;
 head->first = new_first;
 return new_last->next == ((void *)0);
}
# 219 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __llist_add(struct llist_node *new, struct llist_head *head)
{
 return __llist_add_batch(new, new, head);
}
# 237 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(&head->first) __ai_ptr = (&head->first); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = ((((void *)0))); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct llist_node *__llist_del_all(struct llist_head *head)
{
 struct llist_node *first = head->first;

 head->first = ((void *)0);
 return first;
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 6 "./include/linux/smp_types.h" 2

enum {
 CSD_FLAG_LOCK = 0x01,

 IRQ_WORK_PENDING = 0x01,
 IRQ_WORK_BUSY = 0x02,
 IRQ_WORK_LAZY = 0x04,
 IRQ_WORK_HARD_IRQ = 0x08,

 IRQ_WORK_CLAIMED = (IRQ_WORK_PENDING | IRQ_WORK_BUSY),

 CSD_TYPE_ASYNC = 0x00,
 CSD_TYPE_SYNC = 0x10,
 CSD_TYPE_IRQ_WORK = 0x20,
 CSD_TYPE_TTWU = 0x30,

 CSD_FLAG_TYPE_MASK = 0xF0,
};
# 58 "./include/linux/smp_types.h"
struct __call_single_node {
 struct llist_node llist;
 union {
  unsigned int u_flags;
  atomic_t a_flags;
 };

 u16 src, dst;

};
# 16 "./include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
typedef bool (*smp_cond_func_t)(int cpu, void *info);




struct __call_single_data {
 struct __call_single_node node;
 smp_call_func_t func;
 void *info;
};





typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));
# 45 "./include/linux/smp.h"
extern void __smp_call_single_queue(int cpu, struct llist_node *node);


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);

void on_each_cpu_cond_mask(smp_cond_func_t cond_func, smp_call_func_t func,
      void *info, bool wait, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, struct __call_single_data *csd);





void panic_smp_self_stop(void);
void nmi_panic_self_stop(struct pt_regs *regs);
void crash_smp_send_stop(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void on_each_cpu(smp_call_func_t func, void *info, int wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 90 "./include/linux/smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void on_each_cpu_mask(const struct cpumask *mask,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, mask);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void on_each_cpu_cond(smp_cond_func_t cond_func,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(cond_func, func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 186 "./include/linux/smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_send_stop(void) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void up_smp_call_function(smp_call_func_t func, void *info)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_send_reschedule(int cpu) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void call_function_init(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
smp_call_function_any(const struct cpumask *mask, smp_call_func_t func,
        void *info, int wait)
{
 return smp_call_function_single(0, func, info, wait);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kick_all_cpus_sync(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wake_up_all_idle_cpus(void) { }


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) up_late_init(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_init(void) { up_late_init(); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_boot_cpu_id(void)
{
 return 0;
}
# 261 "./include/linux/smp.h"
  extern unsigned int debug_smp_processor_id(void);
# 274 "./include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_thaw_secondary_cpus_begin(void);
extern void arch_thaw_secondary_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 15 "./include/linux/lockdep.h" 2


struct task_struct;


extern int prove_locking;
extern int lock_stat;





# 1 "./include/linux/debug_locks.h" 1







struct task_struct;

extern int debug_locks __attribute__((__section__(".data..read_mostly")));
extern int debug_locks_silent __attribute__((__section__(".data..read_mostly")));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int __debug_locks_off(void)
{
 return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = ((0)); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
}




extern int debug_locks_off(void);
# 51 "./include/linux/debug_locks.h"
extern void debug_show_all_locks(void);
extern void debug_show_held_locks(struct task_struct *task);
extern void debug_check_no_locks_freed(const void *from, unsigned long len);
extern void debug_check_no_locks_held(void);
# 28 "./include/linux/lockdep.h" 2
# 1 "./include/linux/stacktrace.h" 1





# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
# 7 "./include/linux/stacktrace.h" 2

struct task_struct;
struct pt_regs;


void stack_trace_print(const unsigned long *trace, unsigned int nr_entries,
         int spaces);
int stack_trace_snprint(char *buf, size_t size, const unsigned long *entries,
   unsigned int nr_entries, int spaces);
unsigned int stack_trace_save(unsigned long *store, unsigned int size,
         unsigned int skipnr);
unsigned int stack_trace_save_tsk(struct task_struct *task,
      unsigned long *store, unsigned int size,
      unsigned int skipnr);
unsigned int stack_trace_save_regs(struct pt_regs *regs, unsigned long *store,
       unsigned int size, unsigned int skipnr);
unsigned int stack_trace_save_user(unsigned long *store, unsigned int size);
unsigned int filter_irq_stacks(unsigned long *entries, unsigned int nr_entries);
# 37 "./include/linux/stacktrace.h"
typedef bool (*stack_trace_consume_fn)(void *cookie, unsigned long addr);
# 54 "./include/linux/stacktrace.h"
void arch_stack_walk(stack_trace_consume_fn consume_entry, void *cookie,
       struct task_struct *task, struct pt_regs *regs);
# 74 "./include/linux/stacktrace.h"
int arch_stack_walk_reliable(stack_trace_consume_fn consume_entry, void *cookie,
        struct task_struct *task);

void arch_stack_walk_user(stack_trace_consume_fn consume_entry, void *cookie,
     const struct pt_regs *regs);
# 99 "./include/linux/stacktrace.h"
int stack_trace_save_tsk_reliable(struct task_struct *tsk, unsigned long *store,
      unsigned int size);
# 29 "./include/linux/lockdep.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_copy_map(struct lockdep_map *to,
        struct lockdep_map *from)
{
 int i;

 *to = *from;
# 44 "./include/linux/lockdep.h"
 for (i = 0; i < 2; i++)
  to->class_cache[i] = ((void *)0);
}





struct lock_list {
 struct list_head entry;
 struct lock_class *class;
 struct lock_class *links_to;
 const struct lock_trace *trace;
 u16 distance;

 u8 dep;

 u8 only_xr;





 struct lock_list *parent;
};
# 79 "./include/linux/lockdep.h"
struct lock_chain {

 unsigned int irq_context : 2,
     depth : 6,
     base : 24;

 struct hlist_node entry;
 u64 chain_key;
};





struct held_lock {
# 108 "./include/linux/lockdep.h"
 u64 prev_chain_key;
 unsigned long acquire_ip;
 struct lockdep_map *instance;
 struct lockdep_map *nest_lock;

 u64 waittime_stamp;
 u64 holdtime_stamp;






 unsigned int class_idx:13;
# 135 "./include/linux/lockdep.h"
 unsigned int irq_context:2;
 unsigned int trylock:1;

 unsigned int read:2;
 unsigned int check:1;
 unsigned int hardirqs_off:1;
 unsigned int references:12;
 unsigned int pin_count;
};




extern void lockdep_init(void);
extern void lockdep_reset(void);
extern void lockdep_reset_lock(struct lockdep_map *lock);
extern void lockdep_free_key_range(void *start, unsigned long size);
extern void lockdep_sys_exit(void);
extern void lockdep_set_selftest_task(struct task_struct *task);

extern void lockdep_init_task(struct task_struct *task);
# 179 "./include/linux/lockdep.h"
extern void lockdep_register_key(struct lock_class_key *key);
extern void lockdep_unregister_key(struct lock_class_key *key);







extern void lockdep_init_map_type(struct lockdep_map *lock, const char *name,
 struct lock_class_key *key, int subclass, u8 inner, u8 outer, u8 lock_type);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
lockdep_init_map_waits(struct lockdep_map *lock, const char *name,
         struct lock_class_key *key, int subclass, u8 inner, u8 outer)
{
 lockdep_init_map_type(lock, name, key, subclass, inner, LD_WAIT_INV, LD_LOCK_NORMAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
lockdep_init_map_wait(struct lockdep_map *lock, const char *name,
        struct lock_class_key *key, int subclass, u8 inner)
{
 lockdep_init_map_waits(lock, name, key, subclass, inner, LD_WAIT_INV);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_init_map(struct lockdep_map *lock, const char *name,
        struct lock_class_key *key, int subclass)
{
 lockdep_init_map_wait(lock, name, key, subclass, LD_WAIT_INV);
}
# 245 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int lockdep_match_key(struct lockdep_map *lock,
        struct lock_class_key *key)
{
 return lock->key == key;
}
# 265 "./include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map *lock, unsigned int subclass,
    int trylock, int read, int check,
    struct lockdep_map *nest_lock, unsigned long ip);

extern void lock_release(struct lockdep_map *lock, unsigned long ip);
# 279 "./include/linux/lockdep.h"
extern int lock_is_held_type(const struct lockdep_map *lock, int read);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int lock_is_held(const struct lockdep_map *lock)
{
 return lock_is_held_type(lock, -1);
}




extern void lock_set_class(struct lockdep_map *lock, const char *name,
      struct lock_class_key *key, unsigned int subclass,
      unsigned long ip);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lock_set_subclass(struct lockdep_map *lock,
  unsigned int subclass, unsigned long ip)
{
 lock_set_class(lock, lock->name, lock->key, subclass, ip);
}

extern void lock_downgrade(struct lockdep_map *lock, unsigned long ip);



extern struct pin_cookie lock_pin_lock(struct lockdep_map *lock);
extern void lock_repin_lock(struct lockdep_map *lock, struct pin_cookie);
extern void lock_unpin_lock(struct lockdep_map *lock, struct pin_cookie);
# 428 "./include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 442 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_free_task(struct task_struct *task) {}



extern void lock_contended(struct lockdep_map *lock, unsigned long ip);
extern void lock_acquired(struct lockdep_map *lock, unsigned long ip);
# 487 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 500 "./include/linux/lockdep.h"
extern bool read_lock_is_recursive(void);
# 653 "./include/linux/lockdep.h"
void lockdep_rcu_suspicious(const char *file, const int line, const char *s);
# 63 "./include/linux/spinlock.h" 2

# 1 "./arch/x86/include/generated/asm/mmiowb.h" 1
# 1 "./include/asm-generic/mmiowb.h" 1
# 2 "./arch/x86/include/generated/asm/mmiowb.h" 2
# 65 "./include/linux/spinlock.h" 2
# 95 "./include/linux/spinlock.h"
# 1 "./include/linux/spinlock_up.h" 1
# 29 "./include/linux/spinlock_up.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_spin_lock(arch_spinlock_t *lock)
{
 lock->slock = 0;
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_spin_trylock(arch_spinlock_t *lock)
{
 char oldval = lock->slock;

 lock->slock = 0;
 __asm__ __volatile__("": : :"memory");

 return oldval > 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_spin_unlock(arch_spinlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 lock->slock = 1;
}
# 96 "./include/linux/spinlock.h" 2



  extern void __raw_spin_lock_init(raw_spinlock_t *lock, const char *name,
       struct lock_class_key *key, short inner);
# 178 "./include/linux/spinlock.h"
 extern void do_raw_spin_lock(raw_spinlock_t *lock) ;
 extern int do_raw_spin_trylock(raw_spinlock_t *lock);
 extern void do_raw_spin_unlock(raw_spinlock_t *lock) ;
# 303 "./include/linux/spinlock.h"
# 1 "./include/linux/rwlock.h" 1
# 18 "./include/linux/rwlock.h"
  extern void __rwlock_init(rwlock_t *lock, const char *name,
       struct lock_class_key *key);
# 32 "./include/linux/rwlock.h"
 extern void do_raw_read_lock(rwlock_t *lock) ;
 extern int do_raw_read_trylock(rwlock_t *lock);
 extern void do_raw_read_unlock(rwlock_t *lock) ;
 extern void do_raw_write_lock(rwlock_t *lock) ;
 extern int do_raw_write_trylock(rwlock_t *lock);
 extern void do_raw_write_unlock(rwlock_t *lock) ;
# 304 "./include/linux/spinlock.h" 2






# 1 "./include/linux/spinlock_api_smp.h" 1
# 18 "./include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_spin_trylock(lock)) {
  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 return 0;
}
# 104 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_spin_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_spin_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}



# 1 "./include/linux/rwlock_api_smp.h" 1
# 18 "./include/linux/rwlock_api_smp.h"
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((__section__(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((__section__(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_read_trylock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_read_trylock(lock)) {
  do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 1, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 1, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_write_trylock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_write_trylock(lock)) {
  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 return 0;
}
# 146 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_lock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
 do { if (!do_raw_read_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_read_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
 do { if (!do_raw_read_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_read_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
 do { if (!do_raw_read_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_read_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
 do { if (!do_raw_read_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_read_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_write_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_write_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_write_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_write_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_write_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_write_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_lock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 do { if (!do_raw_write_trylock(lock)) { lock_contended(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); do_raw_write_lock(lock); } lock_acquired(&(lock)->dep_map, (unsigned long)__builtin_return_address(0)); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock(rwlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_unlock(rwlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_read_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_write_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 184 "./include/linux/spinlock_api_smp.h" 2
# 311 "./include/linux/spinlock.h" 2
# 322 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}
# 347 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 372 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 387 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}
# 440 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
{
 return ((&(&lock->rlock)->raw_lock)->slock == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
{
 return (((void)(&(&lock->rlock)->raw_lock), 0));
}
# 469 "./include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 493 "./include/linux/spinlock.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 10 "./include/linux/wait.h" 2


# 1 "./include/uapi/linux/wait.h" 1
# 13 "./include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 30 "./include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 64 "./include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 82 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 127 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 140 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool wq_has_single_sleeper(struct wait_queue_head *wq_head)
{
 return list_is_singular(&wq_head->head);
}
# 153 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 __asm__ __volatile__("": : :"memory");
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_priority(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 struct list_head *head = &wq_head->head;
 struct wait_queue_entry *wq;

 for (wq = ({ void *__mptr = (void *)((&wq_head->head)->next); _Static_assert(__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(((typeof(*wq) *)0)->entry)) || __builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*wq) *)(__mptr - __builtin_offsetof(typeof(*wq), entry))); }); !(&wq->entry == (&wq_head->head)); wq = ({ void *__mptr = (void *)((wq)->entry.next); _Static_assert(__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(((typeof(*(wq)) *)0)->entry)) || __builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(wq)) *)(__mptr - __builtin_offsetof(typeof(*(wq)), entry))); })) {
  if (!(wq->flags & 0x20))
   break;
  head = &wq->entry;
 }
 list_add(&wq_entry->entry, head);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode);
# 260 "./include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 744 "./include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 1138 "./include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
bool prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 1163 "./include/linux/wait.h"
typedef int (*task_call_f)(struct task_struct *p, void *arg);
extern int task_call_func(struct task_struct *p, task_call_f func, void *arg);
# 9 "./include/linux/wait_bit.h" 2

struct wait_bit_key {
 void *flags;
 int bit_nr;
 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};




typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);

void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 49 "./include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int mode);
extern int bit_wait_io(struct wait_bit_key *key, int mode);
extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
# 70 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 73); might_resched(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 95 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 98); might_resched(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 121 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { __might_sleep("include/linux/wait_bit.h", 125); might_resched(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 149 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 153); might_resched(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 178 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 181); might_resched(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 202 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 205); might_resched(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 228 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { __might_sleep("include/linux/wait_bit.h", 232); might_resched(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}

extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
extern void wake_up_var(void *var);
extern wait_queue_head_t *__var_waitqueue(void *p);
# 330 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 __asm__ __volatile__("": : :"memory");
 wake_up_bit(word, bit);
}
# 7 "./include/linux/fs.h" 2
# 1 "./include/linux/kdev_t.h" 1




# 1 "./include/uapi/linux/kdev_t.h" 1
# 6 "./include/linux/kdev_t.h" 2
# 24 "./include/linux/kdev_t.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "./include/linux/fs.h" 2
# 1 "./include/linux/dcache.h" 1







# 1 "./include/linux/rculist.h" 1
# 11 "./include/linux/rculist.h"
# 1 "./include/linux/rcupdate.h" 1
# 40 "./include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void rcu_barrier_tasks_rude(void);
void synchronize_rcu(void);



void __rcu_read_lock(void);
void __rcu_read_unlock(void);
# 86 "./include/linux/rcupdate.h"
void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_init_tasks_generic(void);





void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 110 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_user_exit(void) { }
# 120 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_init_nohz(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcu_nocb_cpu_offload(int cpu) { return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcu_nocb_cpu_deoffload(int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_nocb_flush_deferred_wakeup(void) { }
# 163 "./include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
# 191 "./include/linux/rcupdate.h"
void call_rcu_tasks_rude(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks_rude(void);



void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 226 "./include/linux/rcupdate.h"
# 1 "./include/linux/rcutree.h" 1
# 20 "./include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kvfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
void rcu_momentary_dyntick_idle(void);
void kfree_rcu_scheduler_running(void);
bool rcu_gp_might_be_stalled(void);
unsigned long get_state_synchronize_rcu(void);
unsigned long start_poll_synchronize_rcu(void);
bool poll_state_synchronize_rcu(unsigned long oldstate);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_is_idle_cpu(int cpu);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_irq_exit_check_preempt(void) { }


void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_inkernel_boot_has_ended(void);
bool rcu_is_watching(void);





int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 227 "./include/linux/rcupdate.h" 2
# 247 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_lockdep_current_cpu_online(void) { return true; }


extern struct lockdep_map rcu_lock_map;
extern struct lockdep_map rcu_bh_lock_map;
extern struct lockdep_map rcu_sched_lock_map;
extern struct lockdep_map rcu_callback_map;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_lock_acquire(struct lockdep_map *map)
{
 lock_acquire(map, 0, 0, 2, 0, ((void *)0), ({ __label__ __here; __here: (unsigned long)&&__here; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_lock_release(struct lockdep_map *map)
{
 lock_release(map, ({ __label__ __here; __here: (unsigned long)&&__here; }));
}

int debug_lockdep_rcu_enabled(void);
int rcu_read_lock_held(void);
int rcu_read_lock_bh_held(void);
int rcu_read_lock_sched_held(void);
int rcu_read_lock_any_held(void);
# 684 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 rcu_lock_acquire(&rcu_lock_map);
 do { } while (0 && (!rcu_is_watching()));

}
# 715 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_unlock(void)
{
 do { } while (0 && (!rcu_is_watching()));

 (void)0;
 __rcu_read_unlock();
 rcu_lock_release(&rcu_lock_map);
}
# 738 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 rcu_lock_acquire(&rcu_bh_lock_map);
 do { } while (0 && (!rcu_is_watching()));

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_unlock_bh(void)
{
 do { } while (0 && (!rcu_is_watching()));

 rcu_lock_release(&rcu_bh_lock_map);
 (void)0;
 local_bh_enable();
}
# 776 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_lock_sched(void)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
 rcu_lock_acquire(&rcu_sched_lock_map);
 do { } while (0 && (!rcu_is_watching()));

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched(void)
{
 do { } while (0 && (!rcu_is_watching()));

 rcu_lock_release(&rcu_sched_lock_map);
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0);
}
# 976 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 994 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_33(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rhp->func) == sizeof(char) || sizeof(rhp->func) == sizeof(short) || sizeof(rhp->func) == sizeof(int) || sizeof(rhp->func) == sizeof(long)) || sizeof(rhp->func) == sizeof(long long))) __compiletime_assert_33(); } while (0); (*(const volatile typeof( _Generic((rhp->func), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rhp->func))) *)&(rhp->func)); });

 if (func == f)
  return true;
 ({ int __ret_warn_on = !!(func != (rcu_callback_t)~0L); __builtin_expect(!!(__ret_warn_on), 0); });
 return false;
}


extern int rcu_expedited;
extern int rcu_normal;
# 12 "./include/linux/rculist.h" 2
# 22 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_34(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_34(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_35(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->prev) == sizeof(char) || sizeof(list->prev) == sizeof(short) || sizeof(list->prev) == sizeof(int) || sizeof(list->prev) == sizeof(long)) || sizeof(list->prev) == sizeof(long long))) __compiletime_assert_35(); } while (0); do { *(volatile typeof(list->prev) *)&(list->prev) = (list); } while (0); } while (0);
}
# 76 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_36(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_36(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_37(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_37(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_38(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_38(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 next->prev = new;
}
# 104 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 125 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 155 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 181 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_39(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_39(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *)0)); } while (0); } while (0);
 }
}
# 197 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_40(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long long))) __compiletime_assert_40(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(new->prev)->next))))) *)&(((*((struct list_head **)(&(new->prev)->next))))) = ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_41(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_41(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_42(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long long))) __compiletime_assert_42(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(new->prev)->next)))) *)&(*&(*((struct list_head **)(&(new->prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 226 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 249 "./include/linux/rculist.h"
 sync();
 __kcsan_check_access(&(*first), sizeof(*first), (1 << 0) | (1 << 3));
 __kcsan_check_access(&(*last), sizeof(*last), (1 << 0) | (1 << 3));
# 261 "./include/linux/rculist.h"
 last->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_43(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_43(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_44(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_44(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_45(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_45(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 274 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 289 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 511 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_46(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_46(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *) 0x122 + (0xdead000000000000UL))); } while (0); } while (0);
}
# 524 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_47(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->pprev) == sizeof(char) || sizeof(new->pprev) == sizeof(short) || sizeof(new->pprev) == sizeof(int) || sizeof(new->pprev) == sizeof(long)) || sizeof(new->pprev) == sizeof(long long))) __compiletime_assert_47(); } while (0); do { *(volatile typeof(new->pprev) *)&(new->pprev) = (old->pprev); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_48(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*(struct hlist_node **)new->pprev)) == sizeof(char) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(short) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(int) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long)) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long long))) __compiletime_assert_48(); } while (0); do { *(volatile typeof((*(struct hlist_node **)new->pprev)) *)&((*(struct hlist_node **)new->pprev)) = ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_49(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_49(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_50(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long long))) __compiletime_assert_50(); } while (0); do { *(volatile typeof(*&*(struct hlist_node **)new->pprev) *)&(*&*(struct hlist_node **)new->pprev) = ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_51(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->next->pprev) == sizeof(char) || sizeof(new->next->pprev) == sizeof(short) || sizeof(new->next->pprev) == sizeof(int) || sizeof(new->next->pprev) == sizeof(long)) || sizeof(new->next->pprev) == sizeof(long long))) __compiletime_assert_51(); } while (0); do { *(volatile typeof(new->next->pprev) *)&(new->next->pprev) = (&new->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_52(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(old->pprev) == sizeof(char) || sizeof(old->pprev) == sizeof(short) || sizeof(old->pprev) == sizeof(int) || sizeof(old->pprev) == sizeof(long)) || sizeof(old->pprev) == sizeof(long long))) __compiletime_assert_52(); } while (0); do { *(volatile typeof(old->pprev) *)&(old->pprev) = (((void *) 0x122 + (0xdead000000000000UL))); } while (0); } while (0);
}
# 547 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlists_swap_heads_rcu(struct hlist_head *left, struct hlist_head *right)
{
 struct hlist_node *node1 = left->first;
 struct hlist_node *node2 = right->first;

 do { uintptr_t _r_a_p__v = (uintptr_t)(node2); ; if (__builtin_constant_p(node2) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_53(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((left->first)) == sizeof(char) || sizeof((left->first)) == sizeof(short) || sizeof((left->first)) == sizeof(int) || sizeof((left->first)) == sizeof(long)) || sizeof((left->first)) == sizeof(long long))) __compiletime_assert_53(); } while (0); do { *(volatile typeof((left->first)) *)&((left->first)) = ((typeof(left->first))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_54(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)))) __compiletime_assert_54(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_55(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)) || sizeof(*&left->first) == sizeof(long long))) __compiletime_assert_55(); } while (0); do { *(volatile typeof(*&left->first) *)&(*&left->first) = ((typeof(*((typeof(left->first))_r_a_p__v)) *)((typeof(left->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(node1); ; if (__builtin_constant_p(node1) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_56(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((right->first)) == sizeof(char) || sizeof((right->first)) == sizeof(short) || sizeof((right->first)) == sizeof(int) || sizeof((right->first)) == sizeof(long)) || sizeof((right->first)) == sizeof(long long))) __compiletime_assert_56(); } while (0); do { *(volatile typeof((right->first)) *)&((right->first)) = ((typeof(right->first))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_57(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)))) __compiletime_assert_57(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_58(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)) || sizeof(*&right->first) == sizeof(long long))) __compiletime_assert_58(); } while (0); do { *(volatile typeof(*&right->first) *)&(*&right->first) = ((typeof(*((typeof(right->first))_r_a_p__v)) *)((typeof(right->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_59(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node2->pprev) == sizeof(char) || sizeof(node2->pprev) == sizeof(short) || sizeof(node2->pprev) == sizeof(int) || sizeof(node2->pprev) == sizeof(long)) || sizeof(node2->pprev) == sizeof(long long))) __compiletime_assert_59(); } while (0); do { *(volatile typeof(node2->pprev) *)&(node2->pprev) = (&left->first); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_60(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node1->pprev) == sizeof(char) || sizeof(node1->pprev) == sizeof(short) || sizeof(node1->pprev) == sizeof(int) || sizeof(node1->pprev) == sizeof(long)) || sizeof(node1->pprev) == sizeof(long long))) __compiletime_assert_60(); } while (0); do { *(volatile typeof(node1->pprev) *)&(node1->pprev) = (&right->first); } while (0); } while (0);
}
# 584 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_61(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_61(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_62(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long long))) __compiletime_assert_62(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(h)->first))))) *)&(((*((struct hlist_node **)(&(h)->first))))) = ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_63(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_63(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_64(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long long))) __compiletime_assert_64(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(h)->first)))) *)&(*&(*((struct hlist_node **)(&(h)->first)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (first)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_65(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_65(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
}
# 615 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_66(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_66(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&last->next); } while (0); } while (0);
  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_67(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long long))) __compiletime_assert_67(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(last)->next))))) *)&(((*((struct hlist_node **)(&(last)->next))))) = ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_68(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_68(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_69(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long long))) __compiletime_assert_69(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(last)->next)))) *)&(*&(*((struct hlist_node **)(&(last)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 651 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_70(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_70(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 n->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_71(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(char) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(short) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(int) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long long))) __compiletime_assert_71(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)((n)->pprev))))) *)&(((*((struct hlist_node **)((n)->pprev))))) = ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_72(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_72(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_73(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long long))) __compiletime_assert_73(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)((n)->pprev)))) *)&(*&(*((struct hlist_node **)((n)->pprev)))) = ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_74(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_74(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
}
# 678 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_75(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_75(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_76(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_76(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(prev)->next))))) *)&(((*((struct hlist_node **)(&(prev)->next))))) = ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_77(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_77(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_78(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_78(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(prev)->next)))) *)&(*&(*((struct hlist_node **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (n->next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_79(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_79(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 9 "./include/linux/dcache.h" 2
# 1 "./include/linux/rculist_bl.h" 1







# 1 "./include/linux/list_bl.h" 1





# 1 "./include/linux/bit_spinlock.h" 1
# 16 "./include/linux/bit_spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
  do {
   cpu_relax();
  } while (test_bit(bitnum, addr));
  do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 }

 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{

 do { if (__builtin_expect(!!(!test_bit(bitnum, addr)), 0)) do { ({ asm volatile("80" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "80" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("81" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "81" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);


 clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{

 do { if (__builtin_expect(!!(!test_bit(bitnum, addr)), 0)) do { ({ asm volatile("82" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "82" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("83" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "83" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);


 __clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return test_bit(bitnum, addr);





}
# 7 "./include/linux/list_bl.h" 2
# 34 "./include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_84(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_84(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); }) & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_before(struct hlist_bl_node *n,
           struct hlist_bl_node *next)
{
 struct hlist_bl_node **pprev = next->pprev;

 n->pprev = pprev;
 n->next = next;
 next->pprev = &n->next;


 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_85(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_85(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))); } while (0); } while (0);


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_behind(struct hlist_bl_node *n,
           struct hlist_bl_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 prev->next = n;

 if (n->next)
  n->next->pprev = &n->next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

                                                    ;


 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_86(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_86(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))); } while (0); } while (0);



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "./include/linux/rculist_bl.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_87(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_87(); } while (0); do { *(volatile typeof((h->first)) *)&((h->first)) = ((typeof(h->first))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_88(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)))) __compiletime_assert_88(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_89(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)) || sizeof(*&h->first) == sizeof(long long))) __compiletime_assert_89(); } while (0); do { *(volatile typeof(*&h->first) *)&(*&h->first) = ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_90(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_90(); } while (0); (*(const volatile typeof( _Generic(((h->first)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((h->first)))) *)&((h->first))); }); do { } while (0 && (!((hlist_bl_is_locked(h)) || rcu_read_lock_held()))); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 46 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 71 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 10 "./include/linux/dcache.h" 2

# 1 "./include/linux/seqlock.h" 1
# 19 "./include/linux/seqlock.h"
# 1 "./include/linux/mutex.h" 1
# 20 "./include/linux/mutex.h"
# 1 "./include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 21 "./include/linux/mutex.h" 2
# 63 "./include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 raw_spinlock_t wait_lock;



 struct list_head wait_list;

 void *magic;


 struct lockdep_map dep_map;

};






extern void mutex_destroy(struct mutex *lock);
# 118 "./include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







extern bool mutex_is_locked(struct mutex *lock);
# 178 "./include/linux/mutex.h"
extern void mutex_lock_nested(struct mutex *lock, unsigned int subclass);
extern void _mutex_lock_nest_lock(struct mutex *lock, struct lockdep_map *nest_lock);

extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible_nested(struct mutex *lock,
     unsigned int subclass);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable_nested(struct mutex *lock,
     unsigned int subclass);
extern void mutex_lock_io_nested(struct mutex *lock, unsigned int subclass);
# 217 "./include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
# 20 "./include/linux/seqlock.h" 2
# 1 "./include/linux/ww_mutex.h" 1
# 21 "./include/linux/ww_mutex.h"
# 1 "./include/linux/rtmutex.h" 1
# 18 "./include/linux/rtmutex.h"
# 1 "./include/linux/rbtree_types.h" 1




struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 26 "./include/linux/rbtree_types.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};
# 19 "./include/linux/rtmutex.h" 2


extern int max_lock_depth;

struct rt_mutex_base {
 raw_spinlock_t wait_lock;
 struct rb_root_cached waiters;
 struct task_struct *owner;
};
# 42 "./include/linux/rtmutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rt_mutex_base_is_locked(struct rt_mutex_base *lock)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_91(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(lock->owner) == sizeof(char) || sizeof(lock->owner) == sizeof(short) || sizeof(lock->owner) == sizeof(int) || sizeof(lock->owner) == sizeof(long)) || sizeof(lock->owner) == sizeof(long long))) __compiletime_assert_91(); } while (0); (*(const volatile typeof( _Generic((lock->owner), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (lock->owner))) *)&(lock->owner)); }) != ((void *)0);
}

extern void rt_mutex_base_init(struct rt_mutex_base *rtb);
# 57 "./include/linux/rtmutex.h"
struct rt_mutex {
 struct rt_mutex_base rtmutex;

 struct lockdep_map dep_map;

};

struct rt_mutex_waiter;
struct hrtimer_sleeper;


extern void rt_mutex_debug_task_free(struct task_struct *tsk);
# 98 "./include/linux/rtmutex.h"
extern void __rt_mutex_init(struct rt_mutex *lock, const char *name, struct lock_class_key *key);


extern void rt_mutex_lock_nested(struct rt_mutex *lock, unsigned int subclass);






extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);
# 22 "./include/linux/ww_mutex.h" 2
# 38 "./include/linux/ww_mutex.h"
struct ww_class {
 atomic_long_t stamp;
 struct lock_class_key acquire_key;
 struct lock_class_key mutex_key;
 const char *acquire_name;
 const char *mutex_name;
 unsigned int is_wait_die;
};

struct ww_mutex {
 struct mutex base;
 struct ww_acquire_ctx *ctx;

 struct ww_class *ww_class;

};

struct ww_acquire_ctx {
 struct task_struct *task;
 unsigned long stamp;
 unsigned int acquired;
 unsigned short wounded;
 unsigned short is_wait_die;

 unsigned int done_acquire;
 struct ww_class *ww_class;
 void *contending_lock;


 struct lockdep_map dep_map;


 unsigned int deadlock_inject_interval;
 unsigned int deadlock_inject_countdown;

};
# 98 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_mutex_init(struct ww_mutex *lock,
     struct ww_class *ww_class)
{
 __mutex_init(&lock->base,ww_class->mutex_name,&ww_class->mutex_key);
 lock->ctx = ((void *)0);

 lock->ww_class = ww_class;

}
# 132 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_acquire_init(struct ww_acquire_ctx *ctx,
       struct ww_class *ww_class)
{
 ctx->task = get_current();
 ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
 ctx->acquired = 0;
 ctx->wounded = false;
 ctx->is_wait_die = ww_class->is_wait_die;

 ctx->ww_class = ww_class;
 ctx->done_acquire = 0;
 ctx->contending_lock = ((void *)0);


 debug_check_no_locks_freed((void *)ctx, sizeof(*ctx));
 lockdep_init_map(&ctx->dep_map, ww_class->acquire_name,
    &ww_class->acquire_key, 0);
 lock_acquire(&ctx->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));


 ctx->deadlock_inject_interval = 1;
 ctx->deadlock_inject_countdown = ctx->stamp & 0xf;

}
# 168 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_acquire_done(struct ww_acquire_ctx *ctx)
{

 do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(ctx)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);

 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(ctx->done_acquire), 0)) { ({ asm volatile("92" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "92" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "ctx->done_acquire"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("93" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "93" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });
 ctx->done_acquire = 1;

}
# 185 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_acquire_fini(struct ww_acquire_ctx *ctx)
{

 lock_release(&ctx->dep_map, ({ __label__ __here; __here: (unsigned long)&&__here; }));


 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(ctx->acquired), 0)) { ({ asm volatile("94" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "94" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "ctx->acquired"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("95" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "95" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });
 if (!0)




  ctx->done_acquire = 1;

 if (!1)

  ctx->acquired = ~0U;

}
# 234 "./include/linux/ww_mutex.h"
extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
# 266 "./include/linux/ww_mutex.h"
extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
          struct ww_acquire_ctx *ctx);
# 292 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
{
 int ret;

 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(!ctx->contending_lock), 0)) { ({ asm volatile("96" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "96" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "!ctx->contending_lock"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("97" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "97" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });

 ret = ww_mutex_lock(lock, ctx);
 (void)ret;
}
# 328 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
     struct ww_acquire_ctx *ctx)
{

 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(!ctx->contending_lock), 0)) { ({ asm volatile("98" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "98" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "!ctx->contending_lock"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("99" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "99" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });

 return ww_mutex_lock_interruptible(lock, ctx);
}

extern void ww_mutex_unlock(struct ww_mutex *lock);

extern int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock,
      struct ww_acquire_ctx *ctx);
# 351 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_mutex_destroy(struct ww_mutex *lock)
{

 mutex_destroy(&lock->base);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ww_mutex_is_locked(struct ww_mutex *lock)
{
 return mutex_is_locked((&lock->base));
}
# 21 "./include/linux/seqlock.h" 2
# 65 "./include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;

 struct lockdep_map dep_map;

} seqcount_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 lockdep_init_map(&s->dep_map, name, key, 0);
 s->sequence = 0;
}
# 97 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seqcount_lockdep_reader_access(const seqcount_t *s)
{
 seqcount_t *l = (seqcount_t *)s;
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 lock_acquire(&l->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
 lock_release(&l->dep_map, (unsigned long)__builtin_return_address(0));
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 254 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) seqcount_t *__seqprop_ptr(seqcount_t *s)
{
 return s;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned __seqprop_sequence(const seqcount_t *s)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_100(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_100(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __seqprop_preemptible(const seqcount_t *s)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __seqprop_assert(const seqcount_t *s)
{
 do { } while (0);
}



typedef struct seqcount_raw_spinlock { seqcount_t seqcount; raw_spinlock_t *lock; } seqcount_raw_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_raw_spinlock_ptr(seqcount_raw_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_raw_spinlock_sequence(const seqcount_raw_spinlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_101(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_101(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (false && __builtin_expect(!!(seq & 1), 0)) { _raw_spin_lock(s->lock); _raw_spin_unlock(s->lock); seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_102(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_102(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_raw_spinlock_preemptible(const seqcount_raw_spinlock_t *s) { if (!0) return false; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_raw_spinlock_assert(const seqcount_raw_spinlock_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(s->lock)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
typedef struct seqcount_spinlock { seqcount_t seqcount; spinlock_t *lock; } seqcount_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_spinlock_ptr(seqcount_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_spinlock_sequence(const seqcount_spinlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_103(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_103(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { spin_lock(s->lock); spin_unlock(s->lock); seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_104(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_104(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_spinlock_preemptible(const seqcount_spinlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_spinlock_assert(const seqcount_spinlock_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(s->lock)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
typedef struct seqcount_rwlock { seqcount_t seqcount; rwlock_t *lock; } seqcount_rwlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_rwlock_ptr(seqcount_rwlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_rwlock_sequence(const seqcount_rwlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_105(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_105(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { _raw_read_lock(s->lock); _raw_read_unlock(s->lock); seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_106(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_106(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_rwlock_preemptible(const seqcount_rwlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_rwlock_assert(const seqcount_rwlock_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(s->lock)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
typedef struct seqcount_mutex { seqcount_t seqcount; struct mutex *lock; } seqcount_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_mutex_ptr(seqcount_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_mutex_sequence(const seqcount_mutex_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_107(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_107(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { mutex_lock_nested(s->lock, 0); mutex_unlock(s->lock); seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_108(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_108(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_mutex_preemptible(const seqcount_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_mutex_assert(const seqcount_mutex_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(s->lock)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
typedef struct seqcount_ww_mutex { seqcount_t seqcount; struct ww_mutex *lock; } seqcount_ww_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_ww_mutex_ptr(seqcount_ww_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_ww_mutex_sequence(const seqcount_ww_mutex_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_109(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_109(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ww_mutex_lock(s->lock, ((void *)0)); ww_mutex_unlock(s->lock); seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_110(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_110(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_ww_mutex_preemptible(const seqcount_ww_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_ww_mutex_assert(const seqcount_ww_mutex_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(&s->lock->base)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
# 430 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int do___read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 kcsan_atomic_next(0);
 return __builtin_expect(!!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_111(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_111(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); }) != start), 0);
}
# 450 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int do_read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 __asm__ __volatile__("": : :"memory");
 return do___read_seqcount_retry(s, start);
}
# 470 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_raw_write_seqcount_begin(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 __asm__ __volatile__("": : :"memory");
}
# 491 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_raw_write_seqcount_end(seqcount_t *s)
{
 __asm__ __volatile__("": : :"memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 517 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 do_raw_write_seqcount_begin(s);
 lock_acquire(&s->dep_map, subclass, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
}
# 543 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_begin(seqcount_t *s)
{
 do_write_seqcount_begin_nested(s, 0);
}
# 563 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_end(seqcount_t *s)
{
 lock_release(&s->dep_map, (unsigned long)__builtin_return_address(0));
 do_raw_write_seqcount_end(s);
}
# 613 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_raw_write_seqcount_barrier(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 __asm__ __volatile__("": : :"memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 633 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_invalidate(seqcount_t *s)
{
 __asm__ __volatile__("": : :"memory");
 kcsan_nestable_atomic_begin();
 s->sequence+=2;
 kcsan_nestable_atomic_end();
}
# 651 "./include/linux/seqlock.h"
typedef struct {
 seqcount_t seqcount;
} seqcount_latch_t;
# 680 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned raw_read_seqcount_latch(const seqcount_latch_t *s)
{




 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_112(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_112(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); });
}
# 696 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
read_seqcount_latch_retry(const seqcount_latch_t *s, unsigned start)
{
 return do_read_seqcount_retry(_Generic(*(&s->seqcount), seqcount_t: __seqprop_ptr((void *)(&s->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&s->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&s->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&s->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&s->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&s->seqcount)))), start);
}
# 783 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void raw_write_seqcount_latch(seqcount_latch_t *s)
{
 __asm__ __volatile__("": : :"memory");
 s->seqcount.sequence++;
 __asm__ __volatile__("": : :"memory");
}
# 800 "./include/linux/seqlock.h"
typedef struct {




 seqcount_spinlock_t seqcount;
 spinlock_t lock;
} seqlock_t;
# 838 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned read_seqbegin(const seqlock_t *sl)
{
 unsigned ret = ({ seqcount_lockdep_reader_access(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount))))); ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&sl->seqcount), seqcount_t: __seqprop_sequence((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&sl->seqcount))))) & 1) cpu_relax(); kcsan_atomic_next(1000); __seq; }); __asm__ __volatile__("": : :"memory"); _seq; }); });

 kcsan_atomic_next(0);
 kcsan_flat_atomic_begin();
 return ret;
}
# 858 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{




 kcsan_flat_atomic_end();

 return do_read_seqcount_retry(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount)))), start);
}
# 888 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 901 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_sequnlock(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock(&sl->lock);
}
# 914 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 928 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_sequnlock_bh(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_bh(&sl->lock);
}
# 941 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 954 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_sequnlock_irq(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
 return flags;
}
# 991 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1014 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 1037 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}
# 1061 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}
# 1104 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1141 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}
# 1156 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}
# 1169 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}
# 1195 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}
# 1220 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 12 "./include/linux/dcache.h" 2


# 1 "./include/linux/lockref.h" 1
# 19 "./include/linux/lockref.h"
# 1 "./include/generated/bounds.h" 1
# 20 "./include/linux/lockref.h" 2





struct lockref {
 union {



  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 15 "./include/linux/dcache.h" 2
# 1 "./include/linux/stringhash.h" 1






# 1 "./include/linux/hash.h" 1





# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 7 "./include/linux/hash.h" 2
# 60 "./include/linux/hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 8 "./include/linux/stringhash.h" 2
# 42 "./include/linux/stringhash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_64_generic(hash, 32);
}
# 66 "./include/linux/stringhash.h"
extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "./include/linux/stringhash.h"
extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
# 16 "./include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 48 "./include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;
extern const struct qstr dotdot_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 91 "./include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_spinlock_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
} __attribute__((__aligned__((1 << (6)))));
# 225 "./include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);

extern struct dentry *d_find_alias_rcu(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(const struct dentry *, char *, int);
extern char *dentry_path(const struct dentry *, char *, int);
# 317 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 340 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_flags_negative(unsigned flags)
{
 return (flags & 0x00700000) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 474 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 492 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 524 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 536 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_113(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dentry->d_inode) == sizeof(char) || sizeof(dentry->d_inode) == sizeof(short) || sizeof(dentry->d_inode) == sizeof(int) || sizeof(dentry->d_inode) == sizeof(long)) || sizeof(dentry->d_inode) == sizeof(long long))) __compiletime_assert_113(); } while (0); (*(const volatile typeof( _Generic((dentry->d_inode), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dentry->d_inode))) *)&(dentry->d_inode)); });
}
# 551 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 568 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 583 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 599 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "./include/linux/fs.h" 2
# 1 "./include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 10 "./include/linux/fs.h" 2
# 1 "./include/linux/stat.h" 1





# 1 "./arch/x86/include/uapi/asm/stat.h" 1




# 1 "./arch/x86/include/asm/posix_types.h" 1
# 6 "./arch/x86/include/uapi/asm/stat.h" 2
# 83 "./arch/x86/include/uapi/asm/stat.h"
struct stat {
 __kernel_ulong_t st_dev;
 __kernel_ulong_t st_ino;
 __kernel_ulong_t st_nlink;

 unsigned int st_mode;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned int __pad0;
 __kernel_ulong_t st_rdev;
 __kernel_long_t st_size;
 __kernel_long_t st_blksize;
 __kernel_long_t st_blocks;

 __kernel_ulong_t st_atime;
 __kernel_ulong_t st_atime_nsec;
 __kernel_ulong_t st_mtime;
 __kernel_ulong_t st_mtime_nsec;
 __kernel_ulong_t st_ctime;
 __kernel_ulong_t st_ctime_nsec;
 __kernel_long_t __unused[3];
};
# 117 "./arch/x86/include/uapi/asm/stat.h"
struct __old_kernel_stat {
 unsigned short st_dev;
 unsigned short st_ino;
 unsigned short st_mode;
 unsigned short st_nlink;
 unsigned short st_uid;
 unsigned short st_gid;
 unsigned short st_rdev;






 unsigned int st_size;
 unsigned int st_atime;
 unsigned int st_mtime;
 unsigned int st_ctime;

};
# 7 "./include/linux/stat.h" 2
# 1 "./include/uapi/linux/stat.h" 1
# 56 "./include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "./include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 8 "./include/linux/stat.h" 2
# 19 "./include/linux/stat.h"
# 1 "./include/linux/time.h" 1








extern struct timezone sys_tz;

int get_timespec64(struct timespec64 *ts,
  const struct __kernel_timespec *uts);
int put_timespec64(const struct timespec64 *ts,
  struct __kernel_timespec *uts);
int get_itimerspec64(struct itimerspec64 *it,
   const struct __kernel_itimerspec *uit);
int put_itimerspec64(const struct itimerspec64 *it,
   struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);


extern void clear_itimer(void);




extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);

# 1 "./include/linux/time32.h" 1
# 13 "./include/linux/time32.h"
# 1 "./include/linux/timex.h" 1
# 56 "./include/linux/timex.h"
# 1 "./include/uapi/linux/timex.h" 1
# 56 "./include/uapi/linux/timex.h"
# 1 "./include/linux/time.h" 1
# 57 "./include/uapi/linux/timex.h" 2
# 97 "./include/uapi/linux/timex.h"
struct __kernel_timex_timeval {
 __kernel_time64_t tv_sec;
 long long tv_usec;
};

struct __kernel_timex {
 unsigned int modes;
 int :32;
 long long offset;
 long long freq;
 long long maxerror;
 long long esterror;
 int status;
 int :32;
 long long constant;
 long long precision;
 long long tolerance;


 struct __kernel_timex_timeval time;
 long long tick;

 long long ppsfreq;
 long long jitter;
 int shift;
 int :32;
 long long stabil;
 long long jitcnt;
 long long calcnt;
 long long errcnt;
 long long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "./include/linux/timex.h" 2








# 1 "./arch/x86/include/asm/timex.h" 1





# 1 "./arch/x86/include/asm/tsc.h" 1
# 14 "./arch/x86/include/asm/tsc.h"
typedef unsigned long long cycles_t;

extern unsigned int cpu_khz;
extern unsigned int tsc_khz;

extern void disable_TSC(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) cycles_t get_cycles(void)
{





 return rdtsc();
}

extern struct system_counterval_t convert_art_to_tsc(u64 art);
extern struct system_counterval_t convert_art_ns_to_tsc(u64 art_ns);

extern void tsc_early_init(void);
extern void tsc_init(void);
extern unsigned long calibrate_delay_is_known(void);
extern void mark_tsc_unstable(char *reason);
extern int unsynchronized_tsc(void);
extern int check_tsc_unstable(void);
extern void mark_tsc_async_resets(char *reason);
extern unsigned long native_calibrate_cpu_early(void);
extern unsigned long native_calibrate_tsc(void);
extern unsigned long long native_sched_clock_from_tsc(u64 tsc);

extern int tsc_clocksource_reliable;

extern bool tsc_async_resets;
# 57 "./arch/x86/include/asm/tsc.h"
extern bool tsc_store_and_check_tsc_adjust(bool bootcpu);
extern void tsc_verify_tsc_adjust(bool resume);
extern void check_tsc_sync_source(int cpu);
extern void check_tsc_sync_target(void);







extern int notsc_setup(char *);
extern void tsc_save_sched_clock_state(void);
extern void tsc_restore_sched_clock_state(void);

unsigned long cpu_khz_from_msr(void);
# 7 "./arch/x86/include/asm/timex.h" 2
# 66 "./include/linux/timex.h" 2
# 139 "./include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "./include/linux/timex.h"
extern int do_adjtimex(struct __kernel_timex *);
extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);

extern void hardpps(const struct timespec64 *, const struct timespec64 *);

int read_current_timer(unsigned long *timer_val);
# 14 "./include/linux/time32.h" 2

# 1 "./include/vdso/time32.h" 1




typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};
# 16 "./include/linux/time32.h" 2

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);







extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 61 "./include/linux/time.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool itimerspec64_valid(const struct itimerspec64 *its)
{
 if (!timespec64_valid(&(its->it_interval)) ||
  !timespec64_valid(&(its->it_value)))
  return false;

 return true;
}
# 100 "./include/linux/time.h"
# 1 "./include/vdso/time.h" 1






struct timens_offset {
 s64 sec;
 u64 nsec;
};
# 101 "./include/linux/time.h" 2
# 20 "./include/linux/stat.h" 2
# 1 "./include/linux/uidgid.h" 1
# 16 "./include/linux/uidgid.h"
# 1 "./include/linux/highuid.h" 1
# 35 "./include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "./include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "./include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;
# 44 "./include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t __kuid_val(kuid_t uid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t __kgid_val(kgid_t gid)
{
 return 0;
}
# 61 "./include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}
# 143 "./include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t make_kuid(struct user_namespace *from, uid_t uid)
{
 return (kuid_t){ uid };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t make_kgid(struct user_namespace *from, gid_t gid)
{
 return (kgid_t){ gid };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t from_kuid(struct user_namespace *to, kuid_t kuid)
{
 return __kuid_val(kuid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t from_kgid(struct user_namespace *to, kgid_t kgid)
{
 return __kgid_val(kgid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t from_kuid_munged(struct user_namespace *to, kuid_t kuid)
{
 uid_t uid = from_kuid(to, kuid);
 if (uid == (uid_t)-1)
  uid = overflowuid;
 return uid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t from_kgid_munged(struct user_namespace *to, kgid_t kgid)
{
 gid_t gid = from_kgid(to, kgid);
 if (gid == (gid_t)-1)
  gid = overflowgid;
 return gid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return uid_valid(uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return gid_valid(gid);
}
# 21 "./include/linux/stat.h" 2

struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 41 "./include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
 u64 mnt_id;
};
# 11 "./include/linux/fs.h" 2


# 1 "./include/linux/list_lru.h" 1
# 12 "./include/linux/list_lru.h"
# 1 "./include/linux/nodemask.h" 1
# 96 "./include/linux/nodemask.h"
# 1 "./include/linux/numa.h" 1
# 47 "./include/linux/numa.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int numa_map_to_online_node(int node)
{
 return (-1);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int memory_add_physaddr_to_nid(u64 start)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int phys_to_target_node(u64 start)
{
 return 0;
}
# 97 "./include/linux/nodemask.h" 2

typedef struct { unsigned long bits[((((1 << 0)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 109 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 0) : 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : ((void *)0);
}
# 128 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_first_bit(srcp->bits, (1 << 0)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_bit(srcp->bits, (1 << 0)))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_first_bit(srcp->bits, (1 << 0)))) ? ((int)((1 << 0))) : ((int)(find_first_bit(srcp->bits, (1 << 0))))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x114 = ((int)((1 << 0))); typeof((int)(find_first_bit(srcp->bits, (1 << 0)))) __UNIQUE_ID___y115 = ((int)(find_first_bit(srcp->bits, (1 << 0)))); ((__UNIQUE_ID___x114) < (__UNIQUE_ID___y115) ? (__UNIQUE_ID___x114) : (__UNIQUE_ID___y115)); }));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) ? ((int)((1 << 0))) : ((int)(find_next_bit(srcp->bits, (1 << 0), n+1)))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x116 = ((int)((1 << 0))); typeof((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) __UNIQUE_ID___y117 = ((int)(find_next_bit(srcp->bits, (1 << 0), n+1))); ((__UNIQUE_ID___x116) < (__UNIQUE_ID___y117) ? (__UNIQUE_ID___x116) : (__UNIQUE_ID___y117)); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 0));
 __node_set((node), &(*mask));
}
# 299 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) ? ((int)((1 << 0))) : ((int)(find_first_zero_bit(maskp->bits, (1 << 0))))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x118 = ((int)((1 << 0))); typeof((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) __UNIQUE_ID___y119 = ((int)(find_first_zero_bit(maskp->bits, (1 << 0)))); ((__UNIQUE_ID___x118) < (__UNIQUE_ID___y119) ? (__UNIQUE_ID___x118) : (__UNIQUE_ID___y119)); }));

}
# 333 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 391 "./include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 N_GENERIC_INITIATOR,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];
# 465 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int node_state(int node, enum node_states state)
{
 return node == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_set_state(int node, enum node_states state)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_clear_state(int node, enum node_states state)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int num_node_state(enum node_states state)
{
 return 1;
}
# 500 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int node_random(const nodemask_t *mask)
{
 return 0;
}
# 532 "./include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 13 "./include/linux/list_lru.h" 2
# 1 "./include/linux/shrinker.h" 1
# 12 "./include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 60 "./include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;


 int id;


 atomic_long_t *nr_deferred;
};
# 91 "./include/linux/shrinker.h"
extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
extern void synchronize_shrinkers(void);
# 14 "./include/linux/list_lru.h" 2

struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;




 long nr_items;
} ;

struct list_lru {
 struct list_lru_node *node;





};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 72 "./include/linux/list_lru.h"
int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
# 91 "./include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 104 "./include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 116 "./include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 166 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
# 183 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one_irq(struct list_lru *lru,
        int nid, struct mem_cgroup *memcg,
        list_lru_walk_cb isolate, void *cb_arg,
        unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
    list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
         &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "./include/linux/fs.h" 2

# 1 "./include/linux/radix-tree.h" 1
# 12 "./include/linux/radix-tree.h"
# 1 "./include/linux/gfp.h" 1




# 1 "./include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

void dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 6 "./include/linux/gfp.h" 2
# 1 "./include/linux/mmzone.h" 1
# 18 "./include/linux/mmzone.h"
# 1 "./include/linux/pageblock-flags.h" 1
# 18 "./include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 55 "./include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(const struct page *page,
    unsigned long pfn,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long mask);
# 79 "./include/linux/pageblock-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool get_pageblock_skip(struct page *page)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_pageblock_skip(struct page *page)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pageblock_skip(struct page *page)
{
}
# 19 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags-layout.h" 1
# 20 "./include/linux/mmzone.h" 2

# 1 "./include/linux/mm_types.h" 1




# 1 "./include/linux/mm_types_task.h" 1
# 19 "./include/linux/mm_types_task.h"
# 1 "./arch/x86/include/asm/tlbbatch.h" 1






struct arch_tlbflush_unmap_batch {




 struct cpumask cpumask;
};
# 20 "./include/linux/mm_types_task.h" 2
# 34 "./include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};





enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};
# 60 "./include/linux/mm_types_task.h"
struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};


struct tlbflush_unmap_batch {
# 85 "./include/linux/mm_types_task.h"
 struct arch_tlbflush_unmap_batch arch;


 bool flush_required;






 bool writable;

};
# 6 "./include/linux/mm_types.h" 2

# 1 "./include/linux/auxvec.h" 1




# 1 "./include/uapi/linux/auxvec.h" 1




# 1 "./arch/x86/include/uapi/asm/auxvec.h" 1
# 6 "./include/uapi/linux/auxvec.h" 2
# 6 "./include/linux/auxvec.h" 2
# 8 "./include/linux/mm_types.h" 2


# 1 "./include/linux/rbtree.h" 1
# 39 "./include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_120(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*rb_link)) == sizeof(char) || sizeof((*rb_link)) == sizeof(short) || sizeof((*rb_link)) == sizeof(int) || sizeof((*rb_link)) == sizeof(long)) || sizeof((*rb_link)) == sizeof(long long))) __compiletime_assert_120(); } while (0); do { *(volatile typeof((*rb_link)) *)&((*rb_link)) = ((typeof(*rb_link))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_121(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)))) __compiletime_assert_121(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_122(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)) || sizeof(*&*rb_link) == sizeof(long long))) __compiletime_assert_122(); } while (0); do { *(volatile typeof(*&*rb_link) *)&(*&*rb_link) = ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}
# 108 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct rb_node *
rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)
{
 struct rb_node *leftmost = ((void *)0);

 if (root->rb_leftmost == node)
  leftmost = root->rb_leftmost = rb_next(node);

 rb_erase(node, &root->rb_root);

 return leftmost;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 164 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
rb_add_cached(struct rb_node *node, struct rb_root_cached *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_root.rb_node;
 struct rb_node *parent = ((void *)0);
 bool leftmost = true;

 while (*link) {
  parent = *link;
  if (less(node, parent)) {
   link = &parent->rb_left;
  } else {
   link = &parent->rb_right;
   leftmost = false;
  }
 }

 rb_link_node(node, parent, link);
 rb_insert_color_cached(node, tree, leftmost);

 return leftmost ? node : ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
rb_add(struct rb_node *node, struct rb_root *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);

 while (*link) {
  parent = *link;
  if (less(node, parent))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
}
# 222 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
rb_find_add(struct rb_node *node, struct rb_root *tree,
     int (*cmp)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);
 int c;

 while (*link) {
  parent = *link;
  c = cmp(node, parent);

  if (c < 0)
   link = &parent->rb_left;
  else if (c > 0)
   link = &parent->rb_right;
  else
   return parent;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
 return ((void *)0);
}
# 255 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
rb_find(const void *key, const struct rb_root *tree,
 int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;

 while (node) {
  int c = cmp(key, node);

  if (c < 0)
   node = node->rb_left;
  else if (c > 0)
   node = node->rb_right;
  else
   return node;
 }

 return ((void *)0);
}
# 283 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
rb_find_first(const void *key, const struct rb_root *tree,
       int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;
 struct rb_node *match = ((void *)0);

 while (node) {
  int c = cmp(key, node);

  if (c <= 0) {
   if (!c)
    match = node;
   node = node->rb_left;
  } else if (c > 0) {
   node = node->rb_right;
  }
 }

 return match;
}
# 313 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
rb_next_match(const void *key, struct rb_node *node,
       int (*cmp)(const void *key, const struct rb_node *))
{
 node = rb_next(node);
 if (node && cmp(key, node))
  node = ((void *)0);
 return node;
}
# 11 "./include/linux/mm_types.h" 2
# 1 "./include/linux/rwsem.h" 1
# 47 "./include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;



 raw_spinlock_t wait_lock;
 struct list_head wait_list;

 void *magic;


 struct lockdep_map dep_map;

};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 103 "./include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 119 "./include/linux/rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}
# 174 "./include/linux/rwsem.h"
extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_interruptible(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 223 "./include/linux/rwsem.h"
extern void down_read_nested(struct rw_semaphore *sem, int subclass);
extern int __attribute__((__warn_unused_result__)) down_read_killable_nested(struct rw_semaphore *sem, int subclass);
extern void down_write_nested(struct rw_semaphore *sem, int subclass);
extern int down_write_killable_nested(struct rw_semaphore *sem, int subclass);
extern void _down_write_nest_lock(struct rw_semaphore *sem, struct lockdep_map *nest_lock);
# 241 "./include/linux/rwsem.h"
extern void down_read_non_owner(struct rw_semaphore *sem);
extern void up_read_non_owner(struct rw_semaphore *sem);
# 12 "./include/linux/mm_types.h" 2
# 1 "./include/linux/completion.h" 1
# 12 "./include/linux/completion.h"
# 1 "./include/linux/swait.h" 1
# 41 "./include/linux/swait.h"
struct task_struct;

struct swait_queue_head {
 raw_spinlock_t lock;
 struct list_head task_list;
};

struct swait_queue {
 struct task_struct *task;
 struct list_head task_list;
};
# 69 "./include/linux/swait.h"
extern void __init_swait_queue_head(struct swait_queue_head *q, const char *name,
        struct lock_class_key *key);
# 121 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int swait_active(struct swait_queue_head *wq)
{
 return !list_empty(&wq->task_list);
}
# 134 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool swq_has_sleeper(struct swait_queue_head *wq)
{







 __asm__ __volatile__("": : :"memory");
 return swait_active(wq);
}

extern void swake_up_one(struct swait_queue_head *q);
extern void swake_up_all(struct swait_queue_head *q);
extern void swake_up_locked(struct swait_queue_head *q);

extern void prepare_to_swait_exclusive(struct swait_queue_head *q, struct swait_queue *wait, int state);
extern long prepare_to_swait_event(struct swait_queue_head *q, struct swait_queue *wait, int state);

extern void __finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
extern void finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
# 13 "./include/linux/completion.h" 2
# 26 "./include/linux/completion.h"
struct completion {
 unsigned int done;
 struct swait_queue_head wait;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void complete_acquire(struct completion *x) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void complete_release(struct completion *x) {}
# 84 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_swait_queue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 97 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "./include/linux/mm_types.h" 2

# 1 "./include/linux/uprobes.h" 1
# 19 "./include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};
# 142 "./include/linux/uprobes.h"
struct uprobes_state {
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uprobes_init(void)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool add)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int uprobe_mmap(struct vm_area_struct *vma)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uprobe_start_dup_mmap(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uprobe_end_dup_mmap(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uprobe_notify_resume(struct pt_regs *regs)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uprobe_deny_signal(void)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uprobe_free_utask(struct task_struct *t)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uprobe_copy_process(struct task_struct *t, unsigned long flags)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uprobe_clear_state(struct mm_struct *mm)
{
}
# 15 "./include/linux/mm_types.h" 2


# 1 "./include/linux/workqueue.h" 1








# 1 "./include/linux/timer.h" 1





# 1 "./include/linux/ktime.h" 1
# 25 "./include/linux/ktime.h"
# 1 "./include/linux/jiffies.h" 1
# 12 "./include/linux/jiffies.h"
# 1 "./include/vdso/jiffies.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/param.h" 1
# 6 "./include/vdso/jiffies.h" 2
# 13 "./include/linux/jiffies.h" 2
# 1 "./arch/x86/include/generated/uapi/asm/param.h" 1
# 14 "./include/linux/jiffies.h" 2
# 1 "./include/generated/timeconst.h" 1
# 15 "./include/linux/jiffies.h" 2
# 62 "./include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 79 "./include/linux/jiffies.h"
extern u64 jiffies_64;
extern unsigned long volatile jiffies;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 189 "./include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 290 "./include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 250) - 1) / (1000L / 250);
}
# 363 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 250) - 1) / (1000000L / 250);
}
# 410 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x123 = (0L); typeof(delta) __UNIQUE_ID___y124 = (delta); ((__UNIQUE_ID___x123) > (__UNIQUE_ID___y124) ? (__UNIQUE_ID___x123) : (__UNIQUE_ID___y124)); })));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x125 = (0L); typeof(delta) __UNIQUE_ID___y126 = (delta); ((__UNIQUE_ID___x125) > (__UNIQUE_ID___y126) ? (__UNIQUE_ID___x125) : (__UNIQUE_ID___y126)); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "./include/linux/ktime.h" 2



typedef s64 ktime_t;
# 38 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 71 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 95 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 111 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 123 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 148 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 209 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}

# 1 "./include/vdso/ktime.h" 1
# 221 "./include/linux/ktime.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}

# 1 "./include/linux/timekeeping.h" 1





# 1 "./include/linux/clocksource_ids.h" 1





enum clocksource_ids {
 CSID_GENERIC = 0,
 CSID_ARM_ARCH_COUNTER,
 CSID_MAX,
};
# 7 "./include/linux/timekeeping.h" 2



void timekeeping_init(void);
extern int timekeeping_suspended;


extern void legacy_timer_tick(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 41 "./include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);







struct ktime_timestamps {
 u64 mono;
 u64 boot;
 u64 real;
};
# 246 "./include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 enum clocksource_ids cs_id;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 262 "./include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 275 "./include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);


extern void ktime_get_fast_timestamps(struct ktime_timestamps *snap);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);

extern int update_persistent_clock64(struct timespec64 now);
# 233 "./include/linux/ktime.h" 2
# 7 "./include/linux/timer.h" 2

# 1 "./include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "./include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 const struct debug_obj_descr *descr;
};
# 55 "./include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};


extern void debug_object_init (void *addr, const struct debug_obj_descr *descr);
extern void
debug_object_init_on_stack(void *addr, const struct debug_obj_descr *descr);
extern int debug_object_activate (void *addr, const struct debug_obj_descr *descr);
extern void debug_object_deactivate(void *addr, const struct debug_obj_descr *descr);
extern void debug_object_destroy (void *addr, const struct debug_obj_descr *descr);
extern void debug_object_free (void *addr, const struct debug_obj_descr *descr);
extern void debug_object_assert_init(void *addr, const struct debug_obj_descr *descr);






extern void
debug_object_active_state(void *addr, const struct debug_obj_descr *descr,
     unsigned int expect, unsigned int next);

extern void debug_objects_early_init(void);
extern void debug_objects_mem_init(void);
# 108 "./include/linux/debugobjects.h"
extern void debug_check_no_obj_freed(const void *address, unsigned long size);
# 9 "./include/linux/timer.h" 2


struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;


 struct lockdep_map lockdep_map;

};
# 91 "./include/linux/timer.h"
void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);


extern void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags, const char *name,
        struct lock_class_key *key);
# 148 "./include/linux/timer.h"
extern void destroy_timer_on_stack(struct timer_list *timer);
# 166 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int timer_pending(const struct timer_list * timer)
{
 return !hlist_unhashed_lockless(&timer->entry);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);
# 195 "./include/linux/timer.h"
extern void init_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);
# 207 "./include/linux/timer.h"
unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);
# 10 "./include/linux/workqueue.h" 2








struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_INACTIVE_BIT= 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,

 WORK_STRUCT_STATIC_BIT = 4,
 WORK_STRUCT_COLOR_SHIFT = 5,




 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_INACTIVE = 1 << WORK_STRUCT_INACTIVE_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,

 WORK_STRUCT_STATIC = 1 << WORK_STRUCT_STATIC_BIT,




 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS),


 WORK_CPU_UNBOUND = 1,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;

 struct lockdep_map lockdep_map;

};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 150 "./include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 202 "./include/linux/workqueue.h"
extern void __init_work(struct work_struct *work, int onstack);
extern void destroy_work_on_stack(struct work_struct *work);
extern void destroy_delayed_work_on_stack(struct delayed_work *work);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int work_static(struct work_struct *work)
{
 return *((unsigned long *)(&(work)->data)) & WORK_STRUCT_STATIC;
}
# 303 "./include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 336 "./include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 380 "./include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 402 "./include/linux/workqueue.h"
__attribute__((__format__(printf, 1, 4))) struct workqueue_struct *
alloc_workqueue(const char *fmt, unsigned int flags, int max_active, ...);
# 430 "./include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(void);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_all_workqueues(void);
extern void show_one_workqueue(struct workqueue_struct *wq);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 499 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 513 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 528 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 542 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 561 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 590 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 604 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 618 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long work_on_cpu(int cpu, long (*fn)(void *), void *arg)
{
 return fn(arg);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg)
{
 return fn(arg);
}
# 645 "./include/linux/workqueue.h"
int workqueue_sysfs_register(struct workqueue_struct *wq);
# 654 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wq_watchdog_touch(int cpu) { }
# 663 "./include/linux/workqueue.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init_early(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init(void);
# 18 "./include/linux/mm_types.h" 2


# 1 "./arch/x86/include/asm/mmu.h" 1
# 19 "./arch/x86/include/asm/mmu.h"
typedef struct {




 u64 ctx_id;
# 34 "./arch/x86/include/asm/mmu.h"
 atomic64_t tlb_gen;


 struct rw_semaphore ldt_usr_sem;
 struct ldt_struct *ldt;



 unsigned short flags;


 struct mutex lock;
 void *vdso;
 const struct vdso_image *vdso_image;

 atomic_t perf_rdpmc_allowed;





 u16 pkey_allocation_map;
 s16 execute_only_pkey;

} mm_context_t;







void leave_mm(int cpu);
# 21 "./include/linux/mm_types.h" 2








struct address_space;
struct mem_cgroup;
# 71 "./include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   unsigned long pp_magic;
   struct page_pool *pp;
   unsigned long _pp_mapping_pad;
   unsigned long dma_addr;
   atomic_long_t pp_frag_count;
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;

     int pages;



    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
   unsigned int compound_nr;
  };
  struct {
   unsigned long _compound_pad_1;
   atomic_t hpage_pinned_refcount;

   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };

   spinlock_t *ptl;



  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
# 178 "./include/linux/mm_types.h"
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;


 unsigned long memcg_data;
# 228 "./include/linux/mm_types.h"
} ;
# 254 "./include/linux/mm_types.h"
struct folio {

 union {
  struct {

   unsigned long flags;
   struct list_head lru;
   struct address_space *mapping;
   unsigned long index;
   void *private;
   atomic_t _mapcount;
   atomic_t _refcount;

   unsigned long memcg_data;


  };
  struct page page;
 };
};

_Static_assert(sizeof(struct page) == sizeof(struct folio), "sizeof(struct page) == sizeof(struct folio)");


_Static_assert(__builtin_offsetof(struct page, flags) == __builtin_offsetof(struct folio, flags), "offsetof(struct page, flags) == offsetof(struct folio, flags)");
_Static_assert(__builtin_offsetof(struct page, lru) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, lru) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, compound_head) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, compound_head) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, index) == __builtin_offsetof(struct folio, index), "offsetof(struct page, index) == offsetof(struct folio, index)");
_Static_assert(__builtin_offsetof(struct page, private) == __builtin_offsetof(struct folio, private), "offsetof(struct page, private) == offsetof(struct folio, private)");
_Static_assert(__builtin_offsetof(struct page, _mapcount) == __builtin_offsetof(struct folio, _mapcount), "offsetof(struct page, _mapcount) == offsetof(struct folio, _mapcount)");
_Static_assert(__builtin_offsetof(struct page, _refcount) == __builtin_offsetof(struct folio, _refcount), "offsetof(struct page, _refcount) == offsetof(struct folio, _refcount)");

_Static_assert(__builtin_offsetof(struct page, memcg_data) == __builtin_offsetof(struct folio, memcg_data), "offsetof(struct page, memcg_data) == offsetof(struct folio, memcg_data)");



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) atomic_t *folio_mapcount_ptr(struct folio *folio)
{
 struct page *tail = &folio->page + 1;
 return &tail->compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) atomic_t *compound_pincount_ptr(struct page *page)
{
 return &page[2].hpage_pinned_refcount;
}
# 322 "./include/linux/mm_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_private(struct page *page, unsigned long private)
{
 page->private = private;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *folio_get_private(struct folio *folio)
{
 return folio->private;
}

struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 375 "./include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 384 "./include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;





 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;
# 452 "./include/linux/mm_types.h"
 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 484 "./include/linux/mm_types.h"
  atomic_t membarrier_state;
# 496 "./include/linux/mm_types.h"
  atomic_t mm_users;
# 505 "./include/linux/mm_types.h"
  atomic_t mm_count;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;
# 527 "./include/linux/mm_types.h"
  struct rw_semaphore mmap_lock;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;






  seqcount_t write_protect_seq;

  spinlock_t arg_lock;

  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(2 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 590 "./include/linux/mm_types.h"
  struct task_struct *owner;

  struct user_namespace *user_ns;


  struct file *exe_file;

  struct mmu_notifier_subscriptions *notifier_subscriptions;
# 621 "./include/linux/mm_types.h"
  atomic_t tlb_flush_pending;


  bool tlb_flush_batched;

  struct uprobes_state uprobes_state;






  struct work_struct async_put_work;


  u32 pasid;

 } ;





 unsigned long cpu_bitmap[];
};

extern struct mm_struct init_mm;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_init_cpumask(struct mm_struct *mm)
{
 unsigned long cpu_bitmap = (unsigned long)mm;

 cpu_bitmap += __builtin_offsetof(struct mm_struct, cpu_bitmap);
 cpumask_clear((struct cpumask *)cpu_bitmap);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_gather_mmu_fullmm(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_finish_mmu(struct mmu_gather *tlb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_set(&mm->tlb_flush_pending, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 713 "./include/linux/mm_types.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 725 "./include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 738 "./include/linux/mm_types.h"
 return atomic_read(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return atomic_read(&mm->tlb_flush_pending) > 1;
}

struct vm_fault;






typedef unsigned int vm_fault_t;
# 787 "./include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 827 "./include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 22 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags.h" 1
# 103 "./include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,


 PG_uncached,
# 139 "./include/linux/page-flags.h"
 PG_arch_2,




 __NR_PAGEFLAGS,

 PG_readahead = PG_reclaim,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,

 PG_xen_remapped = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_workingset,
# 186 "./include/linux/page-flags.h"
 PG_isolated = PG_reclaim,


 PG_reported = PG_uptodate,
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long _compound_head(const struct page *page)
{
 unsigned long head = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_127(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_127(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); });

 if (__builtin_expect(!!(head & 1), 0))
  return head - 1;
 return (unsigned long)page;
}
# 235 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageTail(struct page *page)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_128(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_128(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); }) & 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
{
 return test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PagePoisoned(const struct page *page)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_129(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->flags) == sizeof(char) || sizeof(page->flags) == sizeof(short) || sizeof(page->flags) == sizeof(int) || sizeof(page->flags) == sizeof(long)) || sizeof(page->flags) == sizeof(long long))) __compiletime_assert_129(); } while (0); (*(const volatile typeof( _Generic((page->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->flags))) *)&(page->flags)); }) == -1l;
}


void page_init_poison(struct page *page, size_t size);






static unsigned long *folio_flags(struct folio *folio, unsigned n)
{
 struct page *page = &folio->page;

 ((void)(sizeof(( long)(PageTail(page)))));
 ((void)(sizeof(( long)(n > 0 && !test_bit(PG_head, &page->flags)))));
 return &page[n].flags;
}
# 417 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_locked(struct folio *folio) { return test_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_locked(struct folio *folio) { __set_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { __set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_locked(struct folio *folio) { __clear_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { __clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_waiters(struct folio *folio) { return test_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_waiters(struct folio *folio) { set_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_waiters(struct folio *folio) { clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_waiters(struct folio *folio) { __clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { __clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_error(struct folio *folio) { return test_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageError(struct page *page) { return test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_error(struct folio *folio) { set_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_error(struct folio *folio) { clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_error(struct folio *folio) { return test_and_clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_referenced(struct folio *folio) { return test_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return test_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_referenced(struct folio *folio) { set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_referenced(struct folio *folio) { clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_referenced(struct folio *folio) { return test_and_clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_referenced(struct folio *folio) { __set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { __set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_dirty(struct folio *folio) { return test_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return test_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_dirty(struct folio *folio) { set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_dirty(struct folio *folio) { clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_set_dirty(struct folio *folio) { return test_and_set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_dirty(struct folio *folio) { return test_and_clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_dirty(struct folio *folio) { __clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_lru(struct folio *folio) { return test_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return test_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_lru(struct folio *folio) { set_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_lru(struct folio *folio) { clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_lru(struct folio *folio) { __clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_lru(struct folio *folio) { return test_and_clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageLRU(struct page *page) { return test_and_clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_active(struct folio *folio) { return test_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return test_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_active(struct folio *folio) { set_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { set_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_active(struct folio *folio) { clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_active(struct folio *folio) { __clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_active(struct folio *folio) { return test_and_clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_workingset(struct folio *folio) { return test_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return test_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_workingset(struct folio *folio) { set_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_workingset(struct folio *folio) { clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_workingset(struct folio *folio) { return test_and_clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_slab(struct folio *folio) { return test_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_slab(struct folio *folio) { __set_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_slab(struct folio *folio) { __clear_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_slob_free(struct folio *folio) { return test_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_slob_free(struct folio *folio) { __set_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_slob_free(struct folio *folio) { __clear_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_checked(struct folio *folio) { return test_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_checked(struct folio *folio) { set_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_checked(struct folio *folio) { clear_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_pinned(struct folio *folio) { return test_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_pinned(struct folio *folio) { set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_pinned(struct folio *folio) { clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_set_pinned(struct folio *folio) { return test_and_set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_pinned(struct folio *folio) { return test_and_clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_savepinned(struct folio *folio) { return test_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_savepinned(struct folio *folio) { set_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_savepinned(struct folio *folio) { clear_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_foreign(struct folio *folio) { return test_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_foreign(struct folio *folio) { set_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_foreign(struct folio *folio) { clear_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_xen_remapped(struct folio *folio) { return test_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageXenRemapped(struct page *page) { return test_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_xen_remapped(struct folio *folio) { set_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_xen_remapped(struct folio *folio) { clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_xen_remapped(struct folio *folio) { return test_and_clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_reserved(struct folio *folio) { return test_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_reserved(struct folio *folio) { set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_reserved(struct folio *folio) { clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_reserved(struct folio *folio) { __clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_reserved(struct folio *folio) { __set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { __set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_swapbacked(struct folio *folio) { return test_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_swapbacked(struct folio *folio) { set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_swapbacked(struct folio *folio) { clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_swapbacked(struct folio *folio) { __clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_swapbacked(struct folio *folio) { __set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { __set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_private(struct folio *folio) { return test_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return test_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_private(struct folio *folio) { set_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_private(struct folio *folio) { clear_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_private_2(struct folio *folio) { return test_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return test_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_private_2(struct folio *folio) { set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_private_2(struct folio *folio) { clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_set_private_2(struct folio *folio) { return test_and_set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_private_2(struct folio *folio) { return test_and_clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_owner_priv_1(struct folio *folio) { return test_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return test_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_owner_priv_1(struct folio *folio) { set_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_owner_priv_1(struct folio *folio) { clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_owner_priv_1(struct folio *folio) { return test_and_clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_writeback(struct folio *folio) { return test_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_set_writeback(struct folio *folio) { return test_and_set_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_writeback(struct folio *folio) { return test_and_clear_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_mappedtodisk(struct folio *folio) { return test_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_mappedtodisk(struct folio *folio) { set_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_mappedtodisk(struct folio *folio) { clear_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_reclaim(struct folio *folio) { return test_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_reclaim(struct folio *folio) { set_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_reclaim(struct folio *folio) { clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_reclaim(struct folio *folio) { return test_and_clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_readahead(struct folio *folio) { return test_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return test_bit(PG_readahead, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_readahead(struct folio *folio) { set_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { set_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_readahead(struct folio *folio) { clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_readahead(struct folio *folio) { return test_and_clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 481 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_highmem(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_set_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageHighMem(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_clear_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageHighMem(struct page *page) { }
# 499 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_swapcache(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageSwapCache(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_set_swapcache(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageSwapCache(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_clear_swapcache(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageSwapCache(struct page *page) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_unevictable(struct folio *folio) { return test_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return test_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_unevictable(struct folio *folio) { set_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_unevictable(struct folio *folio) { clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_unevictable(struct folio *folio) { __clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_unevictable(struct folio *folio) { return test_and_clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_mlocked(struct folio *folio) { return test_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_mlocked(struct folio *folio) { set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_mlocked(struct folio *folio) { clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_mlocked(struct folio *folio) { __clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_set_mlocked(struct folio *folio) { return test_and_set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_clear_mlocked(struct folio *folio) { return test_and_clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_uncached(struct folio *folio) { return test_bit(PG_uncached, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageUncached(struct page *page) { return test_bit(PG_uncached, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_set_uncached(struct folio *folio) { set_bit(PG_uncached, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageUncached(struct page *page) { set_bit(PG_uncached, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_uncached(struct folio *folio) { clear_bit(PG_uncached, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageUncached(struct page *page) { clear_bit(PG_uncached, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 527 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_hwpoison(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_set_hwpoison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_clear_hwpoison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageHWPoison(struct page *page) { }
# 541 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_skip_kasan_poison(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageSkipKASanPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_set_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageSkipKASanPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_clear_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageSkipKASanPoison(struct page *page) { }
# 550 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_reported(struct folio *folio) { return test_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReported(struct page *page) { return test_bit(PG_reported, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_reported(struct folio *folio) { __set_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageReported(struct page *page) { __set_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_reported(struct folio *folio) { __clear_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageReported(struct page *page) { __clear_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 574 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_anon(struct folio *folio)
{
 return ((unsigned long)folio->mapping & 0x1) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool PageAnon(struct page *page)
{
 return folio_test_anon((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 602 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_ksm(struct folio *folio)
{
 return ((unsigned long)folio->mapping & (0x1 | 0x2)) ==
    (0x1 | 0x2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool PageKsm(struct page *page)
{
 return folio_test_ksm((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}




u64 stable_page_flags(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_uptodate(struct folio *folio)
{
 bool ret = test_bit(PG_uptodate, folio_flags(folio, 0));
# 629 "./include/linux/page-flags.h"
 if (ret)
  __asm__ __volatile__("": : :"memory");

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageUptodate(struct page *page)
{
 return folio_test_uptodate((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_mark_uptodate(struct folio *folio)
{
 __asm__ __volatile__("": : :"memory");
 __set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_mark_uptodate(struct folio *folio)
{





 __asm__ __volatile__("": : :"memory");
 set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
{
 __folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
{
 folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_uptodate(struct folio *folio) { clear_bit(PG_uptodate, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }

bool __folio_start_writeback(struct folio *folio, bool keep_write);
bool set_page_writeback(struct page *page);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_writeback_keepwrite(struct page *page)
{
 __folio_start_writeback((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_set_page_writeback(struct page *page)
{
 return set_page_writeback(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_head(struct folio *folio) { return test_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return test_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_head(struct folio *folio) { __set_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { __set_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_head(struct folio *folio) { __clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void folio_clear_head(struct folio *folio) { clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_single(struct folio *folio)
{
 return !folio_test_head(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_multi(struct folio *folio)
{
 return folio_test_head(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_130(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_130(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = ((unsigned long)head + 1); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_131(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_131(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = (0); } while (0); } while (0);
}
# 728 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_hugetlb(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_headhuge(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHeadHuge(const struct page *page) { return 0; }
# 788 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_transhuge(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransHuge(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_transcompound(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransCompound(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_transcompoundmap(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransCompoundMap(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_transtail(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransTail(const struct page *page) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_double_map(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageDoubleMap(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_set_double_map(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageDoubleMap(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_clear_double_map(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageDoubleMap(struct page *page) { }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_set_double_map(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int TestSetPageDoubleMap(struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_clear_double_map(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int TestClearPageDoubleMap(struct page *page) { return 0; }
# 806 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_has_hwpoisoned(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHasHWPoisoned(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_set_has_hwpoisoned(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageHasHWPoisoned(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_clear_has_hwpoisoned(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageHasHWPoisoned(struct page *page) { }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_set_has_hwpoisoned(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int TestSetPageHasHWPoisoned(struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_test_clear_has_hwpoisoned(struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int TestClearPageHasHWPoisoned(struct page *page) { return 0; }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_page_hwpoison(struct page *page)
{
 if (PageHWPoison(page))
  return true;
 return PageHuge(page) && PageHWPoison(((typeof(page))_compound_head(page)));
}
# 842 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 867 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { ({ asm volatile("132" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "132" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("133" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "133" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000080; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { do { if (__builtin_expect(!!(!PageBuddy(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageBuddy(page)"")"); do { ({ asm volatile("134" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "134" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("135" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "135" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000080; }
# 891 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { ({ asm volatile("136" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "136" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("137" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "137" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000100; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { do { if (__builtin_expect(!!(!PageOffline(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageOffline(page)"")"); do { ({ asm volatile("138" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "138" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("139" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "139" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000100; }

extern void page_offline_freeze(void);
extern void page_offline_thaw(void);
extern void page_offline_begin(void);
extern void page_offline_end(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { ({ asm volatile("140" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "140" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("141" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "141" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000200; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { do { if (__builtin_expect(!!(!PageTable(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageTable(page)"")"); do { ({ asm volatile("142" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "142" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("143" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "143" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000200; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { do { if (__builtin_expect(!!(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!((page->page_type & (0xf0000000 | 0)) == 0xf0000000)"")"); do { ({ asm volatile("144" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "144" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("145" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "145" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type &= ~0x00000400; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { do { if (__builtin_expect(!!(!PageGuard(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageGuard(page)"")"); do { ({ asm volatile("146" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "146" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("147" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "147" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0); page->page_type |= 0x00000400; }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool folio_test_isolated(struct folio *folio) { return test_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return test_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_set_isolated(struct folio *folio) { __set_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { __set_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __folio_clear_isolated(struct folio *folio) { __clear_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { __clear_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); };





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { ({ asm volatile("148" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "148" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("149" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "149" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return PageActive(page);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __PageSlabPfmemalloc(struct page *page)
{
 return PageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { ({ asm volatile("150" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "150" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("151" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "151" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 SetPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { ({ asm volatile("152" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "152" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("153" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "153" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 __ClearPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageSlabPfmemalloc(struct page *page)
{
 do { if (__builtin_expect(!!(!PageSlab(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageSlab(page)"")"); do { ({ asm volatile("154" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "154" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("155" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "155" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 ClearPageActive(page);
}
# 986 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_has_private(struct folio *folio)
{
 return page_has_private(&folio->page);
}
# 23 "./include/linux/mmzone.h" 2
# 1 "./include/linux/local_lock.h" 1




# 1 "./include/linux/local_lock_internal.h" 1
# 11 "./include/linux/local_lock_internal.h"
typedef struct {

 struct lockdep_map dep_map;
 struct task_struct *owner;

} local_lock_t;
# 27 "./include/linux/local_lock_internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_lock_acquire(local_lock_t *l)
{
 lock_acquire(&l->dep_map, 0, 0, 0, 1, ((void *)0), ({ __label__ __here; __here: (unsigned long)&&__here; }));
 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(l->owner), 0)) { ({ asm volatile("156" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "156" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "l->owner"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("157" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "157" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });
 l->owner = get_current();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_lock_release(local_lock_t *l)
{
 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(l->owner != get_current()), 0)) { ({ asm volatile("158" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "158" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "l->owner != current"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("159" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "159" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });
 l->owner = ((void *)0);
 lock_release(&l->dep_map, ({ __label__ __here; __here: (unsigned long)&&__here; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_lock_debug_init(local_lock_t *l)
{
 l->owner = ((void *)0);
}
# 6 "./include/linux/local_lock.h" 2
# 24 "./include/linux/mmzone.h" 2
# 42 "./include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 67 "./include/linux/mmzone.h"
 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];
# 81 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_migrate_movable(int mt)
{
 return false || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;






struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *get_page_from_free_area(struct free_area *area,
         int migratetype)
{
 return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_160(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head__->next) == sizeof(char) || sizeof(head__->next) == sizeof(short) || sizeof(head__->next) == sizeof(int) || sizeof(head__->next) == sizeof(long)) || sizeof(head__->next) == sizeof(long long))) __compiletime_assert_160(); } while (0); (*(const volatile typeof( _Generic((head__->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head__->next))) *)&(head__->next)); }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); _Static_assert(__builtin_types_compatible_p(typeof(*(pos__)), typeof(((struct page *)0)->lru)) || __builtin_types_compatible_p(typeof(*(pos__)), typeof(void)), "pointer type mismatch in container_of()"); ((struct page *)(__mptr - __builtin_offsetof(struct page, lru))); }) : ((void *)0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool free_area_empty(struct free_area *area, int migratetype)
{
 return list_empty(&area->free_list[migratetype]);
}

struct pglist_data;
# 144 "./include/linux/mmzone.h"
enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,

 NR_BOUNCE,

 NR_ZSPAGES,

 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE_B,
 NR_SLAB_UNRECLAIMABLE_B,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_ANON = WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_FILE,
 WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_ANON = WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_FILE,
 WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_ANON = WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_FILE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_FILE_THPS,
 NR_FILE_PMDMAPPED,
 NR_ANON_THPS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_THROTTLED_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_FOLL_PIN_ACQUIRED,
 NR_FOLL_PIN_RELEASED,
 NR_KERNEL_STACK_KB,



 NR_PAGETABLE,



 NR_VM_NODE_STAT_ITEMS
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool vmstat_item_print_in_thp(enum node_stat_item item)
{
 if (!0)
  return false;

 return item == NR_ANON_THPS ||
        item == NR_FILE_THPS ||
        item == NR_SHMEM_THPS ||
        item == NR_SHMEM_PMDMAPPED ||
        item == NR_FILE_PMDMAPPED;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool vmstat_item_in_bytes(int idx)
{
# 250 "./include/linux/mmzone.h"
 return (idx == NR_SLAB_RECLAIMABLE_B ||
  idx == NR_SLAB_UNRECLAIMABLE_B);
}
# 267 "./include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};

enum vmscan_throttle_state {
 VMSCAN_THROTTLE_WRITEBACK,
 VMSCAN_THROTTLE_ISOLATED,
 VMSCAN_THROTTLE_NOPROGRESS,
 NR_VMSCAN_THROTTLE,
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}



enum lruvec_flags {
 LRUVEC_CONGESTED,


};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];

 spinlock_t lru_lock;





 unsigned long anon_cost;
 unsigned long file_cost;

 atomic_long_t nonresident_age;

 unsigned long refaults[2];

 unsigned long flags;

 struct pglist_data *pgdat;

};
# 335 "./include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};
# 368 "./include/linux/mmzone.h"
struct per_cpu_pages {
 int count;
 int high;
 int batch;
 short free_factor;





 struct list_head lists[(MIGRATE_PCPTYPES * (3 + 1 + 0))];
};

struct per_cpu_zonestat {
# 394 "./include/linux/mmzone.h"
};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 418 "./include/linux/mmzone.h"
 ZONE_DMA32,






 ZONE_NORMAL,
# 486 "./include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};





struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 516 "./include/linux/mmzone.h"
 long lowmem_reserve[3];




 struct pglist_data *zone_pgdat;
 struct per_cpu_pages *per_cpu_pageset;
 struct per_cpu_zonestat *per_cpu_zonestats;




 int pageset_high;
 int pageset_batch;
# 540 "./include/linux/mmzone.h"
 unsigned long zone_start_pfn;
# 584 "./include/linux/mmzone.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;







 const char *name;
# 610 "./include/linux/mmzone.h"
 int initialized;





 struct free_area free_area[11];


 unsigned long flags;


 spinlock_t lock;
# 632 "./include/linux/mmzone.h"
 unsigned long percpu_drift_mark;
# 660 "./include/linux/mmzone.h"
 bool contiguous;



 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_event[0];
} ;

enum pgdat_flags {
 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


 ZONE_RECLAIM_ACTIVE,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_managed_pages(struct zone *zone)
{
 return (unsigned long)atomic_long_read(&zone->managed_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_cma_pages(struct zone *zone)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 746 "./include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,







 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 781 "./include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 0) * 3) + 1];
};






extern struct page *mem_map;
# 808 "./include/linux/mmzone.h"
typedef struct pglist_data {





 struct zone node_zones[3];






 struct zonelist node_zonelists[MAX_ZONELISTS];

 int nr_zones;
# 845 "./include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;


 wait_queue_head_t reclaim_wait[NR_VMSCAN_THROTTLE];

 atomic_t nr_writeback_throttled;
 unsigned long nr_reclaim_start;

 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_highest_zoneidx;

 int kswapd_failures;
# 877 "./include/linux/mmzone.h"
 unsigned long totalreserve_pages;
# 909 "./include/linux/mmzone.h"
 struct lruvec __lruvec;

 unsigned long flags;




 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 932 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

# 1 "./include/linux/memory_hotplug.h" 1




# 1 "./include/linux/mmzone.h" 1
# 6 "./include/linux/memory_hotplug.h" 2

# 1 "./include/linux/notifier.h" 1
# 16 "./include/linux/notifier.h"
# 1 "./include/linux/srcu.h" 1
# 22 "./include/linux/srcu.h"
# 1 "./include/linux/rcu_segcblist.h" 1
# 21 "./include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
};
# 183 "./include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];



 long len;

 long seglen[4];
 u8 flags;
};
# 23 "./include/linux/srcu.h" 2

struct srcu_struct;



int __init_srcu_struct(struct srcu_struct *ssp, const char *name,
         struct lock_class_key *key);
# 49 "./include/linux/srcu.h"
# 1 "./include/linux/srcutree.h" 1
# 14 "./include/linux/srcutree.h"
# 1 "./include/linux/rcu_node_tree.h" 1
# 15 "./include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock ;
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[1];
 struct srcu_node *level[1 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;
 struct lockdep_map dep_map;
};
# 135 "./include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 50 "./include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
unsigned long get_state_synchronize_srcu(struct srcu_struct *ssp);
unsigned long start_poll_synchronize_srcu(struct srcu_struct *ssp);
bool poll_state_synchronize_srcu(struct srcu_struct *ssp, unsigned long cookie);


void srcu_init(void);
# 91 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 if (!debug_lockdep_rcu_enabled())
  return 1;
 return lock_is_held(&ssp->dep_map);
}
# 159 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 rcu_lock_acquire(&(ssp)->dep_map);
 return retval;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 185 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ int __ret_warn_on = !!(idx & ~0x1); __builtin_expect(!!(__ret_warn_on), 0); });
 rcu_lock_release(&(ssp)->dep_map);
 __srcu_read_unlock(ssp, idx);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 209 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "./include/linux/notifier.h" 2
# 49 "./include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 93 "./include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 144 "./include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);

extern int blocking_notifier_call_chain_robust(struct blocking_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
extern int raw_notifier_call_chain_robust(struct raw_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
# 187 "./include/linux/notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 231 "./include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 8 "./include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct memory_group;
struct resource;
struct vmem_altmap;
# 232 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_span_writelock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_span_writeunlock(struct zone *zone) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_seqlock_init(struct zone *zone) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int try_online_node(int nid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_online_mems(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_online_mems(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_hotplug_begin(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_hotplug_done(void) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool movable_node_is_enabled(void)
{
 return false;
}







struct range arch_get_mappable_range(void);
# 291 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgdat_resize_init(struct pglist_data *pgdat) {}
# 306 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void try_offline_node(int nid) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages,
    struct memory_group *group)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int remove_memory(u64 start, u64 size)
{
 return -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __remove_memory(u64 start, u64 size) {}


extern void set_zone_contiguous(struct zone *zone);
extern void clear_zone_contiguous(struct zone *zone);
# 943 "./include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
     enum zone_type highest_zoneidx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int highest_zoneidx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx);




enum meminit_context {
 MEMINIT_EARLY,
 MEMINIT_HOTPLUG,
};

extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int local_memory_node(int node_id) { return node_id; };
# 995 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_is_zone_device(struct zone *zone)
{
 return false;
}
# 1007 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool managed_zone(struct zone *zone)
{
 return zone_managed_pages(zone);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}
# 1029 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zone_to_nid(struct zone *zone)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_set_nid(struct zone *zone, int nid) {}


extern int movable_zone;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}
# 1056 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;

int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[3];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
int percpu_pagelist_high_fraction_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int numa_zonelist_order_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
extern int percpu_pagelist_high_fraction;
extern char numa_zonelist_order[];




extern struct pglist_data contig_page_data;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pglist_data *NODE_DATA(int nid)
{
 return &contig_page_data;
}
# 1102 "./include/linux/mmzone.h"
extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 1134 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zonelist_node_idx(struct zoneref *zoneref)
{
 return zone_to_nid(zoneref->zone);
}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1168 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1194 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1239 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool movable_only_nodes(nodemask_t *nodes)
{
 struct zonelist *zonelist;
 struct zoneref *z;
 int nid;

 if (__nodes_empty(&(*nodes), (1 << 0)))
  return false;






 nid = __first_node(&(*nodes));
 zonelist = &NODE_DATA(nid)->node_zonelists[ZONELIST_FALLBACK];
 z = first_zones_zonelist(zonelist, ZONE_NORMAL, nodes);
 return (!z->zone) ? true : false;
}
# 1289 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pfn_to_section_nr(unsigned long pfn)
{
 return pfn >> (27 - 12);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long section_nr_to_pfn(unsigned long sec)
{
 return sec << (27 - 12);
}
# 1317 "./include/linux/mmzone.h"
struct mem_section_usage {

 unsigned long subsection_map[((((1UL << (27 - 21))) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];


 unsigned long pageblock_flags[0];
};

void subsection_map_init(unsigned long pfn, unsigned long nr_pages);

struct page;
struct page_ext;
struct mem_section {
# 1342 "./include/linux/mmzone.h"
 unsigned long section_mem_map;

 struct mem_section_usage *usage;
# 1357 "./include/linux/mmzone.h"
};
# 1370 "./include/linux/mmzone.h"
extern struct mem_section **mem_section;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *section_to_usemap(struct mem_section *ms)
{
 return ms->usage->pageblock_flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_section *__nr_to_section(unsigned long nr)
{

 if (!mem_section)
  return ((void *)0);

 if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
  return ((void *)0);
 return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
}
extern size_t mem_section_usage_size(void);
# 1414 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<5)-1));
 return (struct page *)map;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int early_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<3)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int online_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int online_device_section(struct mem_section *section)
{
 unsigned long flags = (1UL<<2) | (1UL<<4);

 return section && ((section->section_mem_map & flags) == flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int online_section_nr(unsigned long nr)
{
 return online_section(__nr_to_section(nr));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(pfn_to_section_nr(pfn));
}

extern unsigned long __highest_present_section_nr;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int subsection_map_index(unsigned long pfn)
{
 return (pfn & ~((~((1UL << (27 - 12))-1)))) / (1UL << (21 - 12));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
{
 int idx = subsection_map_index(pfn);

 return test_bit(idx, ms->usage->subsection_map);
}
# 1506 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pfn_valid(unsigned long pfn)
{
 struct mem_section *ms;







 if (((unsigned long)((((phys_addr_t)(pfn) << 12)) >> 12)) != pfn)
  return 0;

 if (pfn_to_section_nr(pfn) >= (1UL << (((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) ? 52 : 46) - 27)))
  return 0;
 ms = __pfn_to_section(pfn);
 if (!valid_section(ms))
  return 0;




 return early_section(ms) || pfn_section_valid(ms, pfn);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pfn_in_present_section(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) ? 52 : 46) - 27)))
  return 0;
 return present_section(__pfn_to_section(pfn));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long next_present_section_nr(unsigned long section_nr)
{
 while (++section_nr <= __highest_present_section_nr) {
  if (present_section_nr(section_nr))
   return section_nr;
 }

 return -1;
}
# 1564 "./include/linux/mmzone.h"
void sparse_init(void);
# 7 "./include/linux/gfp.h" 2


# 1 "./include/linux/topology.h" 1
# 30 "./include/linux/topology.h"
# 1 "./include/linux/arch_topology.h" 1








# 1 "./include/linux/percpu.h" 1
# 65 "./include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);



extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_page_first_chunk(size_t reserved_size,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn,
    pcpu_fc_populate_pte_fn_t populate_pte_fn);


extern void *__alloc_reserved_percpu(size_t size, size_t align) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_per_cpu_areas(void);


extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__alloc_percpu(size_t size, size_t align) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 146 "./include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 10 "./include/linux/arch_topology.h" 2

void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data" ""))) __typeof__(unsigned long) cpu_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(cpu_scale))) *)(&(cpu_scale)); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data" ""))) __typeof__(unsigned long) arch_freq_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(arch_freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(arch_freq_scale))) *)(&(arch_freq_scale)); }); }));
}

void topology_set_freq_scale(const struct cpumask *cpus, unsigned long cur_freq,
        unsigned long max_freq);
bool topology_scale_freq_invariant(void);

enum scale_freq_source {
 SCALE_FREQ_SOURCE_CPUFREQ = 0,
 SCALE_FREQ_SOURCE_ARCH,
 SCALE_FREQ_SOURCE_CPPC,
};

struct scale_freq_data {
 enum scale_freq_source source;
 void (*set_freq_scale)(void);
};

void topology_scale_freq_tick(void);
void topology_set_scale_freq_source(struct scale_freq_data *data, const struct cpumask *cpus);
void topology_clear_scale_freq_source(enum scale_freq_source source, const struct cpumask *cpus);

extern __attribute__((section(".data" ""))) __typeof__(unsigned long) thermal_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long topology_get_thermal_pressure(int cpu)
{
 return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(thermal_pressure)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(thermal_pressure))) *)(&(thermal_pressure)); }); }));
}

void topology_set_thermal_pressure(const struct cpumask *cpus,
       unsigned long th_pressure);

struct cpu_topology {
 int thread_id;
 int core_id;
 int cluster_id;
 int package_id;
 int llc_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
 cpumask_t cluster_sibling;
 cpumask_t llc_sibling;
};
# 31 "./include/linux/topology.h" 2





# 1 "./arch/x86/include/asm/topology.h" 1
# 85 "./arch/x86/include/asm/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int numa_node_id(void)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int early_cpu_to_node(int cpu)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void setup_node_to_cpumask_map(void) { }



# 1 "./include/asm-generic/topology.h" 1
# 104 "./arch/x86/include/asm/topology.h" 2

extern const struct cpumask *cpu_coregroup_mask(int cpu);
extern const struct cpumask *cpu_clustergroup_mask(int cpu);







extern unsigned int __max_die_per_package;
# 146 "./arch/x86/include/asm/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
topology_update_package_map(unsigned int apicid, unsigned int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
topology_update_die_map(unsigned int dieid, unsigned int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_phys_to_logical_pkg(unsigned int pkg) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_phys_to_logical_die(unsigned int die,
  unsigned int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_max_die_per_package(void) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_max_smt_threads(void) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool topology_is_primary_thread(unsigned int cpu) { return true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool topology_smt_supported(void) { return false; }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_fix_phys_package_id(int num, u32 slot)
{
}

struct pci_bus;
int x86_pci_root_bus_node(int bus);
void x86_pci_root_bus_resources(int bus, struct list_head *resources);

extern bool x86_topology_update;
# 187 "./arch/x86/include/asm/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sched_set_itmt_core_prio(int prio, int core_cpu)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sched_set_itmt_support(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sched_clear_itmt_support(void)
{
}
# 219 "./arch/x86/include/asm/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_set_max_freq_ratio(bool turbo_disabled)
{
}
# 37 "./include/linux/topology.h" 2
# 46 "./include/linux/topology.h"
int arch_update_cpu_topology(void);
# 76 "./include/linux/topology.h"
extern int __attribute__((__section__(".data..read_mostly"))) node_reclaim_distance;
# 168 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int numa_mem_id(void)
{
 return numa_node_id();
}
# 222 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return ((void)(((void)(cpu),0)), ((const struct cpumask *)&__cpu_online_mask));
}
# 10 "./include/linux/gfp.h" 2
# 25 "./include/linux/gfp.h"
struct vm_area_struct;
# 343 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int gfp_migratetype(const gfp_t gfp_flags)
{
 (void)({ int __ret_warn_on = !!((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))); __builtin_expect(!!(__ret_warn_on), 0); });
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_161(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(1UL << GFP_MOVABLE_SHIFT) != ___GFP_MOVABLE"))); if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_161(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_162(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(___GFP_MOVABLE >> GFP_MOVABLE_SHIFT) != MIGRATE_MOVABLE"))); if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_162(); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 380 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400u) | (( gfp_t)0x20000u))) ==
  (( gfp_t)0x400u);
}
# 476 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_NORMAL << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_NORMAL << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 do { if (__builtin_expect(!!((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1), 0)) do { ({ asm volatile("163" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "163" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("164" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "164" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 return z;
}
# 494 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int gfp_zonelist(gfp_t flags)
{




 return ZONELIST_FALLBACK;
}
# 512 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return NODE_DATA(nid)->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_alloc_page(struct page *page, int order) { }


struct page *__alloc_pages(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);
struct folio *__folio_alloc(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);

unsigned long __alloc_pages_bulk(gfp_t gfp, int preferred_nid,
    nodemask_t *nodemask, int nr_pages,
    struct list_head *page_list,
    struct page **page_array);

unsigned long alloc_pages_bulk_array_mempolicy(gfp_t gfp,
    unsigned long nr_pages,
    struct page **page_array);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
alloc_pages_bulk_list(gfp_t gfp, unsigned long nr_pages, struct list_head *list)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, list, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
alloc_pages_bulk_array(gfp_t gfp, unsigned long nr_pages, struct page **page_array)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, ((void *)0), page_array);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_bulk(gfp, nid, ((void *)0), nr_pages, ((void *)0), page_array);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 do { if (__builtin_expect(!!(nid < 0 || nid >= (1 << 0)), 0)) do { ({ asm volatile("165" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "165" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("166" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "166" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 (void)({ int __ret_warn_on = !!((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)); __builtin_expect(!!(__ret_warn_on), 0); });

 return __alloc_pages(gfp_mask, order, nid, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct folio *__folio_alloc_node(gfp_t gfp, unsigned int order, int nid)
{
 do { if (__builtin_expect(!!(nid < 0 || nid >= (1 << 0)), 0)) do { ({ asm volatile("167" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "167" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("168" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "168" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 (void)({ int __ret_warn_on = !!((gfp & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)); __builtin_expect(!!(__ret_warn_on), 0); });

 return __folio_alloc(gfp, order, nid, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}
# 605 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
 return alloc_pages_node(numa_node_id(), gfp_mask, order);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct folio *folio_alloc(gfp_t gfp, unsigned int order)
{
 return __folio_alloc_node(gfp, order, numa_node_id());
}
# 622 "./include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void free_pages_exact(void *virt, size_t size);
__attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) void *alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc_align(struct page_frag_cache *nc,
       unsigned int fragsz, gfp_t gfp_mask,
       unsigned int align_mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask)
{
 return page_frag_alloc_align(nc, fragsz, gfp_mask, ~0u);
}

extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 669 "./include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);

extern gfp_t vma_thp_gfp_mask(struct vm_area_struct *vma);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pm_suspended_storage(void)
{
 return false;
}
# 695 "./include/linux/gfp.h"
void free_contig_range(unsigned long pfn, unsigned long nr_pages);
# 13 "./include/linux/radix-tree.h" 2








# 1 "./include/linux/xarray.h" 1
# 52 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_value(unsigned long v)
{
 ({ int __ret_warn_on = !!((long)v < 0); __builtin_expect(!!(__ret_warn_on), 0); });
 return (void *)((v << 1) | 1);
}
# 65 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long xa_to_value(const void *entry)
{
 return (unsigned long)entry >> 1;
}
# 77 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_value(const void *entry)
{
 return (unsigned long)entry & 1;
}
# 95 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_tag_pointer(void *p, unsigned long tag)
{
 return (void *)((unsigned long)p | tag);
}
# 110 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_untag_pointer(void *entry)
{
 return (void *)((unsigned long)entry & ~3UL);
}
# 125 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int xa_pointer_tag(void *entry)
{
 return (unsigned long)entry & 3UL;
}
# 143 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_internal(unsigned long v)
{
 return (void *)((v << 2) | 2);
}
# 155 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long xa_to_internal(const void *entry)
{
 return (unsigned long)entry >> 2;
}
# 167 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_internal(const void *entry)
{
 return ((unsigned long)entry & 3) == 2;
}
# 183 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_zero(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(257)), 0);
}
# 199 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_err(const void *entry)
{
 return __builtin_expect(!!(xa_is_internal(entry) && entry >= xa_mk_internal(-4095)), 0);

}
# 217 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_err(void *entry)
{

 if (xa_is_err(entry))
  return (long)entry >> 2;
 return 0;
}
# 237 "./include/linux/xarray.h"
struct xa_limit {
 u32 max;
 u32 min;
};







typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 294 "./include/linux/xarray.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 349 "./include/linux/xarray.h"
void *xa_load(struct xarray *, unsigned long index);
void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *xa_erase(struct xarray *, unsigned long index);
void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
   void *entry, gfp_t);
bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
void *xa_find(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
void *xa_find_after(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
  unsigned long max, unsigned int n, xa_mark_t);
void xa_destroy(struct xarray *);
# 376 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { static struct lock_class_key __key; __raw_spin_lock_init(spinlock_check(&xa->xa_lock), "&xa->xa_lock", &__key, LD_WAIT_CONFIG); } while (0);
 xa->xa_flags = flags;
 xa->xa_head = ((void *)0);
}
# 391 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == ((void *)0);
}
# 416 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_marked(const struct xarray *xa, xa_mark_t mark)
{
 return xa->xa_flags & (( gfp_t)((1U << (25 + 1)) << ( unsigned)(mark)));
}
# 556 "./include/linux/xarray.h"
void *__xa_erase(struct xarray *, unsigned long index);
void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
  struct xa_limit, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
  struct xa_limit, u32 *next, gfp_t);
void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
# 583 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_store_bh(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 609 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_store_irq(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 634 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_erase_bh(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_bh(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_bh(&(xa)->xa_lock);

 return entry;
}
# 658 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_erase_irq(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_irq(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_irq(&(xa)->xa_lock);

 return entry;
}
# 684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_cmpxchg(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return curr;
}
# 711 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 738 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 767 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 796 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 825 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 854 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 883 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 912 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 945 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 978 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 1011 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 1041 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1059 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_bh(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1077 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_irq(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1092 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xa_release(struct xarray *xa, unsigned long index)
{
 xa_cmpxchg(xa, index, xa_mk_internal(257), ((void *)0), 0);
}
# 1124 "./include/linux/xarray.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
 };
};

void xa_dump(const struct xarray *);
void xa_dump_node(const struct xa_node *);
# 1164 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_head(const struct xarray *xa)
{
 return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_169(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((xa->xa_head)) == sizeof(char) || sizeof((xa->xa_head)) == sizeof(short) || sizeof((xa->xa_head)) == sizeof(int) || sizeof((xa->xa_head)) == sizeof(long)) || sizeof((xa->xa_head)) == sizeof(long long))) __compiletime_assert_169(); } while (0); (*(const volatile typeof( _Generic(((xa->xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((xa->xa_head)))) *)&((xa->xa_head))); }); do { } while (0 && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))); ; ((typeof(*(xa->xa_head)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_head_locked(const struct xarray *xa)
{
 return ({ do { } while (0 && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_entry(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_170(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->slots[offset])) == sizeof(char) || sizeof((node->slots[offset])) == sizeof(short) || sizeof((node->slots[offset])) == sizeof(int) || sizeof((node->slots[offset])) == sizeof(long)) || sizeof((node->slots[offset])) == sizeof(long long))) __compiletime_assert_170(); } while (0); (*(const volatile typeof( _Generic(((node->slots[offset])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->slots[offset])))) *)&((node->slots[offset]))); }); do { } while (0 && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))); ; ((typeof(*(node->slots[offset])) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_entry_locked(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ do { } while (0 && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct xa_node *xa_parent(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_171(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->parent)) == sizeof(char) || sizeof((node->parent)) == sizeof(short) || sizeof((node->parent)) == sizeof(int) || sizeof((node->parent)) == sizeof(long)) || sizeof((node->parent)) == sizeof(long long))) __compiletime_assert_171(); } while (0); (*(const volatile typeof( _Generic(((node->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->parent)))) *)&((node->parent))); }); do { } while (0 && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))); ; ((typeof(*(node->parent)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct xa_node *xa_parent_locked(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ do { } while (0 && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))); ; ((typeof(*(node->parent)) *)((node->parent))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_node(const struct xa_node *node)
{
 return (void *)((unsigned long)node | 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct xa_node *xa_to_node(const void *entry)
{
 return (struct xa_node *)((unsigned long)entry - 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_node(const void *entry)
{
 return xa_is_internal(entry) && (unsigned long)entry > 4096;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_sibling(unsigned int offset)
{
 return xa_mk_internal(offset);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long xa_to_sibling(const void *entry)
{
 return xa_to_internal(entry);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_sibling(const void *entry)
{
 return 0 && xa_is_internal(entry) &&
  (entry < xa_mk_sibling((1UL << (0 ? 4 : 6)) - 1));
}
# 1261 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_retry(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(256)), 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_advanced(const void *entry)
{
 return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
}
# 1289 "./include/linux/xarray.h"
typedef void (*xa_update_node_t)(struct xa_node *node);

void xa_delete_node(struct xa_node *, xa_update_node_t);
# 1310 "./include/linux/xarray.h"
struct xa_state {
 struct xarray *xa;
 unsigned long xa_index;
 unsigned char xa_shift;
 unsigned char xa_sibs;
 unsigned char xa_offset;
 unsigned char xa_pad;
 struct xa_node *xa_node;
 struct xa_node *xa_alloc;
 xa_update_node_t xa_update;
};
# 1389 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xas_error(const struct xa_state *xas)
{
 return xa_err(xas->xa_node);
}
# 1403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set_err(struct xa_state *xas, long err)
{
 xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_invalid(const struct xa_state *xas)
{
 return (unsigned long)xas->xa_node & 3;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_valid(const struct xa_state *xas)
{
 return !xas_invalid(xas);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_is_node(const struct xa_state *xas)
{
 return xas_valid(xas) && xas->xa_node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_not_node(struct xa_node *node)
{
 return ((unsigned long)node & 3) || !node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_frozen(struct xa_node *node)
{
 return (unsigned long)node & 2;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_top(struct xa_node *node)
{
 return node <= ((struct xa_node *)3UL);
}
# 1469 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_reset(struct xa_state *xas)
{
 xas->xa_node = ((struct xa_node *)3UL);
}
# 1486 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_retry(struct xa_state *xas, const void *entry)
{
 if (xa_is_zero(entry))
  return true;
 if (!xa_is_retry(entry))
  return false;
 xas_reset(xas);
 return true;
}

void *xas_load(struct xa_state *);
void *xas_store(struct xa_state *, void *entry);
void *xas_find(struct xa_state *, unsigned long max);
void *xas_find_conflict(struct xa_state *);

bool xas_get_mark(const struct xa_state *, xa_mark_t);
void xas_set_mark(const struct xa_state *, xa_mark_t);
void xas_clear_mark(const struct xa_state *, xa_mark_t);
void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
void xas_init_marks(const struct xa_state *);

bool xas_nomem(struct xa_state *, gfp_t);
void xas_pause(struct xa_state *);

void xas_create_range(struct xa_state *);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_get_order(struct xarray *xa, unsigned long index)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_split(struct xa_state *xas, void *entry,
  unsigned int order)
{
 xas_store(xas, entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_split_alloc(struct xa_state *xas, void *entry,
  unsigned int order, gfp_t gfp)
{
}
# 1548 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_reload(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 char offset;

 if (!node)
  return xa_head(xas->xa);
 if (0) {
  offset = (xas->xa_index >> node->shift) & ((1UL << (0 ? 4 : 6)) - 1);
  entry = xa_entry(xas->xa, node, offset);
  if (!xa_is_sibling(entry))
   return entry;
  offset = xa_to_sibling(entry);
 } else {
  offset = xas->xa_offset;
 }
 return xa_entry(xas->xa, node, offset);
}
# 1577 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set(struct xa_state *xas, unsigned long index)
{
 xas->xa_index = index;
 xas->xa_node = ((struct xa_node *)3UL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set_order(struct xa_state *xas, unsigned long index,
     unsigned int order)
{






 do { if (__builtin_expect(!!(order > 0), 0)) do { ({ asm volatile("172" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "172" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("173" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "173" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 xas_set(xas, index);

}
# 1611 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set_update(struct xa_state *xas, xa_update_node_t update)
{
 xas->xa_update = update;
}
# 1627 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_next_entry(struct xa_state *xas, unsigned long max)
{
 struct xa_node *node = xas->xa_node;
 void *entry;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset != (xas->xa_index & ((1UL << (0 ? 4 : 6)) - 1))), 0))

  return xas_find(xas, max);

 do {
  if (__builtin_expect(!!(xas->xa_index >= max), 0))
   return xas_find(xas, max);
  if (__builtin_expect(!!(xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))
   return xas_find(xas, max);
  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
  if (__builtin_expect(!!(xa_is_internal(entry)), 0))
   return xas_find(xas, max);
  xas->xa_offset++;
  xas->xa_index++;
 } while (!entry);

 return entry;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
  xa_mark_t mark)
{
 unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
 unsigned int offset = xas->xa_offset;

 if (advance)
  offset++;
 if ((1UL << (0 ? 4 : 6)) == 64) {
  if (offset < (1UL << (0 ? 4 : 6))) {
   unsigned long data = *addr & (~0UL << offset);
   if (data)
    return __ffs(data);
  }
  return (1UL << (0 ? 4 : 6));
 }

 return find_next_bit(addr, (1UL << (0 ? 4 : 6)), offset);
}
# 1684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_next_marked(struct xa_state *xas, unsigned long max,
        xa_mark_t mark)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 unsigned int offset;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift), 0))
  return xas_find_marked(xas, max, mark);
 offset = xas_find_chunk(xas, true, mark);
 xas->xa_offset = offset;
 xas->xa_index = (xas->xa_index & ~((1UL << (0 ? 4 : 6)) - 1)) + offset;
 if (xas->xa_index > max)
  return ((void *)0);
 if (offset == (1UL << (0 ? 4 : 6)))
  return xas_find_marked(xas, max, mark);
 entry = xa_entry(xas->xa, node, offset);
 if (!entry)
  return xas_find_marked(xas, max, mark);
 return entry;
}





enum {
 XA_CHECK_SCHED = 4096,
};
# 1764 "./include/linux/xarray.h"
void *__xas_next(struct xa_state *);
void *__xas_prev(struct xa_state *);
# 1783 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_prev(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == 0), 0))

  return __xas_prev(xas);

 xas->xa_index--;
 xas->xa_offset--;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 1812 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_next(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))

  return __xas_next(xas);

 xas->xa_index++;
 xas->xa_offset++;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 22 "./include/linux/radix-tree.h" 2






struct radix_tree_preload {
 local_lock_t lock;
 unsigned nr;

 struct xa_node *nodes;
};
extern __attribute__((section(".data" ""))) __typeof__(struct radix_tree_preload) radix_tree_preloads;
# 55 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    2UL;
}
# 86 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool radix_tree_empty(const struct xarray *root)
{
 return root->xa_head == ((void *)0);
}
# 106 "./include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct xa_node *node;
};
# 177 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_174(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*slot)) == sizeof(char) || sizeof((*slot)) == sizeof(short) || sizeof((*slot)) == sizeof(int) || sizeof((*slot)) == sizeof(long)) || sizeof((*slot)) == sizeof(long long))) __compiletime_assert_174(); } while (0); (*(const volatile typeof( _Generic(((*slot)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*slot)))) *)&((*slot))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 191 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0 && (!((lock_is_held(&(treelock)->dep_map))))); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 204 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int radix_tree_insert(struct xarray *, unsigned long index,
   void *);
void *__radix_tree_lookup(const struct xarray *, unsigned long index,
     struct xa_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct xarray *, unsigned long);
void **radix_tree_lookup_slot(const struct xarray *,
     unsigned long index);
void __radix_tree_replace(struct xarray *, struct xa_node *,
     void **slot, void *entry);
void radix_tree_iter_replace(struct xarray *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct xarray *,
        void **slot, void *entry);
void radix_tree_iter_delete(struct xarray *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
void *radix_tree_delete(struct xarray *, unsigned long);
unsigned int radix_tree_gang_lookup(const struct xarray *,
   void **results, unsigned long first_index,
   unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct xarray *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct xarray *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct xarray *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_clear(struct xarray *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct xarray *, unsigned int tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void radix_tree_preload_end(void)
{
 do { local_lock_release(({ (void)(0); ({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0);
}

void **idr_get_free(struct xarray *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 280 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 291 "./include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 309 "./include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct xarray *,
        struct radix_tree_iter *iter, unsigned flags);
# 322 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void **
radix_tree_iter_lookup(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 339 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + slots;
}
# 363 "./include/linux/radix-tree.h"
void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
# 397 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 return slot;
}
# 16 "./include/linux/fs.h" 2



# 1 "./include/linux/pid.h" 1






# 1 "./include/linux/refcount.h" 1
# 101 "./include/linux/refcount.h"
struct mutex;
# 111 "./include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;





enum refcount_saturation_type {
 REFCOUNT_ADD_NOT_ZERO_OVF,
 REFCOUNT_ADD_OVF,
 REFCOUNT_ADD_UAF,
 REFCOUNT_SUB_UAF,
 REFCOUNT_DEC_LEAK,
};

void refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_set(refcount_t *r, int n)
{
 atomic_set(&r->refs, n);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_add_not_zero(int i, refcount_t *r, int *oldp)
{
 int old = refcount_read(r);

 do {
  if (!old)
   break;
 } while (!atomic_try_cmpxchg_relaxed(&r->refs, &old, old + i));

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_NOT_ZERO_OVF);

 return old;
}
# 186 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_add_not_zero(int i, refcount_t *r)
{
 return __refcount_add_not_zero(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __refcount_add(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_add_relaxed(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(!old), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
 else if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
}
# 220 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_add(int i, refcount_t *r)
{
 __refcount_add(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
{
 return __refcount_add_not_zero(1, r, oldp);
}
# 243 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero(refcount_t *r)
{
 return __refcount_inc_not_zero(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __refcount_inc(refcount_t *r, int *oldp)
{
 __refcount_add(1, r, oldp);
}
# 265 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_inc(refcount_t *r)
{
 __refcount_inc(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (old == i) {
  __asm__ __volatile__("": : :"memory");
  return true;
 }

 if (__builtin_expect(!!(old < 0 || old - i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_SUB_UAF);

 return false;
}
# 308 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_sub_and_test(int i, refcount_t *r)
{
 return __refcount_sub_and_test(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_dec_and_test(refcount_t *r, int *oldp)
{
 return __refcount_sub_and_test(1, r, oldp);
}
# 331 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_dec_and_test(refcount_t *r)
{
 return __refcount_dec_and_test(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __refcount_dec(refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(1, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old <= 1), 0))
  refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
}
# 357 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_dec(refcount_t *r)
{
 __refcount_dec(r, ((void *)0));
}

extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 8 "./include/linux/pid.h" 2

enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};
# 54 "./include/linux/pid.h"
struct upid {
 int nr;
 struct pid_namespace *ns;
};

struct pid
{
 refcount_t count;
 unsigned int level;
 spinlock_t lock;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct hlist_head inodes;

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

extern const struct file_operations pidfd_fops;

struct file;

extern struct pid *pidfd_pid(const struct file *file);
struct pid *pidfd_get_pid(unsigned int fd, unsigned int *flags);
struct task_struct *pidfd_get_task(int pidfd, unsigned int *flags);
int pidfd_create(struct pid *pid, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  refcount_inc(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pid_has_task(struct pid *pid, enum pid_type type)
{
 return !hlist_empty(&pid->tasks[type]);
}
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void exchange_tids(struct task_struct *task, struct task_struct *old);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;

extern int pid_max;
extern int pid_max_min, pid_max_max;
# 127 "./include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);

extern struct pid *alloc_pid(struct pid_namespace *ns, pid_t *set_tid,
        size_t set_tid_size);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 151 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 181 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 20 "./include/linux/fs.h" 2




# 1 "./include/linux/capability.h" 1
# 16 "./include/linux/capability.h"
# 1 "./include/uapi/linux/capability.h" 1
# 39 "./include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "./include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "./include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
 kuid_t rootid;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 118 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 166 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}
# 215 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_capability(struct task_struct *t, int cap)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_capability_noaudit(struct task_struct *t, int cap)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool capable(int cap)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ns_capable(struct user_namespace *ns, int cap)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ns_capable_noaudit(struct user_namespace *ns, int cap)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ns_capable_setid(struct user_namespace *ns, int cap)
{
 return true;
}

bool privileged_wrt_inode_uidgid(struct user_namespace *ns,
     struct user_namespace *mnt_userns,
     const struct inode *inode);
bool capable_wrt_inode_uidgid(struct user_namespace *mnt_userns,
         const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool perfmon_capable(void)
{
 return capable(38) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_capable(void)
{
 return capable(39) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool checkpoint_restore_ns_capable(struct user_namespace *ns)
{
 return ns_capable(ns, 40) ||
  ns_capable(ns, 21);
}


int get_vfs_caps_from_disk(struct user_namespace *mnt_userns,
      const struct dentry *dentry,
      struct cpu_vfs_cap_data *cpu_caps);

int cap_convert_nscap(struct user_namespace *mnt_userns, struct dentry *dentry,
        const void **ivalue, size_t size);
# 25 "./include/linux/fs.h" 2
# 1 "./include/linux/semaphore.h" 1
# 15 "./include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 31 "./include/linux/semaphore.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { 1 }, .magic = 0xdead4ead, .owner_cpu = -1, .owner = ((void *)-1L), .dep_map = { .name = "(*sem).lock", .wait_type_inner = LD_WAIT_SPIN, } }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 lockdep_init_map(&sem->lock.dep_map, "semaphore->lock", &__key, 0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 26 "./include/linux/fs.h" 2
# 1 "./include/linux/fcntl.h" 1





# 1 "./include/uapi/linux/fcntl.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/fcntl.h" 1
# 1 "./include/uapi/asm-generic/fcntl.h" 1
# 156 "./include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 200 "./include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 2 "./arch/x86/include/generated/uapi/asm/fcntl.h" 2
# 6 "./include/uapi/linux/fcntl.h" 2
# 1 "./include/uapi/linux/openat2.h" 1
# 19 "./include/uapi/linux/openat2.h"
struct open_how {
 __u64 flags;
 __u64 mode;
 __u64 resolve;
};
# 7 "./include/uapi/linux/fcntl.h" 2
# 7 "./include/linux/fcntl.h" 2
# 27 "./include/linux/fs.h" 2



# 1 "./include/linux/migrate_mode.h" 1
# 15 "./include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};

enum migrate_reason {
 MR_COMPACTION,
 MR_MEMORY_FAILURE,
 MR_MEMORY_HOTPLUG,
 MR_SYSCALL,
 MR_MEMPOLICY_MBIND,
 MR_NUMA_MISPLACED,
 MR_CONTIG_RANGE,
 MR_LONGTERM_PIN,
 MR_DEMOTION,
 MR_TYPES
};
# 31 "./include/linux/fs.h" 2


# 1 "./include/linux/percpu-rwsem.h" 1






# 1 "./include/linux/rcuwait.h" 1





# 1 "./include/linux/sched/signal.h" 1





# 1 "./include/linux/signal.h" 1





# 1 "./include/linux/signal_types.h" 1
# 10 "./include/linux/signal_types.h"
# 1 "./include/uapi/linux/signal.h" 1




# 1 "./arch/x86/include/asm/signal.h" 1
# 21 "./arch/x86/include/asm/signal.h"
typedef unsigned long old_sigset_t;

typedef struct {
 unsigned long sig[(64 / 64)];
} sigset_t;







typedef sigset_t compat_sigset_t;



# 1 "./arch/x86/include/uapi/asm/signal.h" 1
# 11 "./arch/x86/include/uapi/asm/signal.h"
struct siginfo;
# 70 "./arch/x86/include/uapi/asm/signal.h"
# 1 "./include/uapi/asm-generic/signal-defs.h" 1
# 82 "./include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 71 "./arch/x86/include/uapi/asm/signal.h" 2
# 104 "./arch/x86/include/uapi/asm/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 38 "./arch/x86/include/asm/signal.h" 2
# 6 "./include/uapi/linux/signal.h" 2
# 1 "./arch/x86/include/uapi/asm/siginfo.h" 1
# 13 "./arch/x86/include/uapi/asm/siginfo.h"
# 1 "./include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 37 "./include/uapi/asm-generic/siginfo.h"
union __sifields {

 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
 } _kill;


 struct {
  __kernel_timer_t _tid;
  int _overrun;
  sigval_t _sigval;
  int _sys_private;
 } _timer;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  sigval_t _sigval;
 } _rt;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  int _status;
  __kernel_clock_t _utime;
  __kernel_clock_t _stime;
 } _sigchld;


 struct {
  void *_addr;
# 79 "./include/uapi/asm-generic/siginfo.h"
  union {

   int _trapno;




   short _addr_lsb;

   struct {
    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    void *_lower;
    void *_upper;
   } _addr_bnd;

   struct {
    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    __u32 _pkey;
   } _addr_pkey;

   struct {
    unsigned long _data;
    __u32 _type;
   } _perf;
  };
 } _sigfault;


 struct {
  long _band;
  int _fd;
 } _sigpoll;


 struct {
  void *_call_addr;
  int _syscall;
  unsigned int _arch;
 } _sigsys;
};
# 138 "./include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 union {
  struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
  int _si_pad[128/sizeof(int)];
 };
} siginfo_t;
# 333 "./include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 14 "./arch/x86/include/uapi/asm/siginfo.h" 2
# 7 "./include/uapi/linux/signal.h" 2
# 11 "./include/linux/signal_types.h" 2

typedef struct kernel_siginfo {
 struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
} kernel_siginfo_t;

struct ucounts;





struct sigqueue {
 struct list_head list;
 int flags;
 kernel_siginfo_t info;
 struct ucounts *ucounts;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 67 "./include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 kernel_siginfo_t info;
 int sig;
};
# 7 "./include/linux/signal.h" 2


struct task_struct;


extern int print_fatal_signals;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_siginfo(kernel_siginfo_t *to,
    const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*to));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_siginfo(kernel_siginfo_t *info)
{
 memset(info, 0, sizeof(*info));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_siginfo_to_external(siginfo_t *to,
         const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*from));
 memset(((char *)to) + sizeof(struct kernel_siginfo), 0,
  (sizeof(struct siginfo) - sizeof(struct kernel_siginfo)));
}

int copy_siginfo_to_user(siginfo_t *to, const kernel_siginfo_t *from);
int copy_siginfo_from_user(kernel_siginfo_t *to, const siginfo_t *from);

enum siginfo_layout {
 SIL_KILL,
 SIL_TIMER,
 SIL_POLL,
 SIL_FAULT,
 SIL_FAULT_TRAPNO,
 SIL_FAULT_MCEERR,
 SIL_FAULT_BNDERR,
 SIL_FAULT_PKUERR,
 SIL_FAULT_PERF_EVENT,
 SIL_CHLD,
 SIL_RT,
 SIL_SYS,
};

enum siginfo_layout siginfo_layout(unsigned sig, int si_code);
# 64 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / 64] |= 1UL << (sig % 64);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / 64] &= ~(1UL << (sig % 64));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / 64] >> (sig % 64));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigisemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  do { __attribute__((__noreturn__)) extern void __compiletime_assert_175(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_175(); } while (0);
  return 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigequalsets(const sigset_t *set1, const sigset_t *set2)
{
 switch ((64 / 64)) {
 case 4:
  return (set1->sig[3] == set2->sig[3]) &&
   (set1->sig[2] == set2->sig[2]) &&
   (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 2:
  return (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 1:
  return set1->sig[0] == set2->sig[0];
 }
 return 0;
}
# 156 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_176(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_176(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_177(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_177(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_178(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_178(); } while (0); } }
# 186 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void signotset(sigset_t *set) { switch ((64 / 64)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); __attribute__((__fallthrough__)); case 2: set->sig[1] = (~(set->sig[1])); __attribute__((__fallthrough__)); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_179(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_179(); } while (0); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigfillset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = 0;
  break;
 case 1: ;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = -1;
  break;
 case 1: ;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

struct timespec;
struct pt_regs;
enum pid_type;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct kernel_siginfo *info,
    struct task_struct *p, enum pid_type type);
extern int group_send_sig_info(int sig, struct kernel_siginfo *info,
          struct task_struct *p, enum pid_type type);
extern int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked(const sigset_t *);
extern int show_unhandled_signals;

extern bool get_signal(struct ksignal *ksig);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern void kernel_sigaction(int, __sighandler_t);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void allow_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void allow_kernel_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)3));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disallow_signal(int sig)
{
 kernel_sigaction(sig, (( __sighandler_t)1));
}

extern struct kmem_cache *sighand_cachep;

extern bool unhandled_signal(struct task_struct *tsk, int sig);
# 453 "./include/linux/signal.h"
void signals_init(void);

int restore_altstack(const stack_t *);
int __save_altstack(stack_t *, unsigned long);
# 467 "./include/linux/signal.h"
bool sigaltstack_size_valid(size_t ss_size);





struct seq_file;
extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
# 483 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *arch_untagged_si_addr(void *addr,
       unsigned long sig,
       unsigned long si_code)
{
 return addr;
}
# 7 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/sched.h" 1
# 10 "./include/linux/sched.h"
# 1 "./include/uapi/linux/sched.h" 1
# 92 "./include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
 __u64 __attribute__((aligned(8))) set_tid;
 __u64 __attribute__((aligned(8))) set_tid_size;
 __u64 __attribute__((aligned(8))) cgroup;
};
# 11 "./include/linux/sched.h" 2




# 1 "./include/linux/sem.h" 1




# 1 "./include/uapi/linux/sem.h" 1




# 1 "./include/linux/ipc.h" 1






# 1 "./include/linux/rhashtable-types.h" 1
# 17 "./include/linux/rhashtable-types.h"
struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};

struct bucket_table;






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);
# 56 "./include/linux/rhashtable-types.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 81 "./include/linux/rhashtable-types.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 120 "./include/linux/rhashtable-types.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
 bool end_of_table;
};

int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);
# 8 "./include/linux/ipc.h" 2
# 1 "./include/uapi/linux/ipc.h" 1
# 10 "./include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};


# 1 "./arch/x86/include/generated/uapi/asm/ipcbuf.h" 1
# 1 "./include/uapi/asm-generic/ipcbuf.h" 1
# 22 "./include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 2 "./arch/x86/include/generated/uapi/asm/ipcbuf.h" 2
# 23 "./include/uapi/linux/ipc.h" 2
# 58 "./include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "./include/linux/ipc.h" 2



struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} ;
# 6 "./include/uapi/linux/sem.h" 2
# 25 "./include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_old_time_t sem_otime;
 __kernel_old_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};


# 1 "./arch/x86/include/uapi/asm/sembuf.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/ipcbuf.h" 1
# 6 "./arch/x86/include/uapi/asm/sembuf.h" 2
# 18 "./arch/x86/include/uapi/asm/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;






 __kernel_long_t sem_otime;
 __kernel_ulong_t __unused1;
 __kernel_long_t sem_ctime;
 __kernel_ulong_t __unused2;

 __kernel_ulong_t sem_nsems;
 __kernel_ulong_t __unused3;
 __kernel_ulong_t __unused4;
};
# 38 "./include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 6 "./include/linux/sem.h" 2

struct task_struct;
struct sem_undo_list;
# 21 "./include/linux/sem.h"
struct sysv_sem {

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_semundo(unsigned long clone_flags, struct task_struct *tsk)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_sem(struct task_struct *tsk)
{
 return;
}
# 16 "./include/linux/sched.h" 2
# 1 "./include/linux/shm.h" 1






# 1 "./include/uapi/linux/shm.h" 1






# 1 "./include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "./include/uapi/linux/shm.h" 2
# 28 "./include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_old_time_t shm_atime;
 __kernel_old_time_t shm_dtime;
 __kernel_old_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};


# 1 "./arch/x86/include/uapi/asm/shmbuf.h" 1





# 1 "./include/uapi/asm-generic/shmbuf.h" 1
# 25 "./include/uapi/asm-generic/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;

 long shm_atime;
 long shm_dtime;
 long shm_ctime;
# 40 "./include/uapi/asm-generic/shmbuf.h"
 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused4;
 unsigned long __unused5;
};

struct shminfo64 {
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 7 "./arch/x86/include/uapi/asm/shmbuf.h" 2
# 44 "./include/uapi/linux/shm.h" 2
# 93 "./include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "./include/linux/shm.h" 2
# 1 "./arch/x86/include/asm/shmparam.h" 1
# 9 "./include/linux/shm.h" 2

struct file;
# 23 "./include/linux/shm.h"
struct sysv_shm {

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long do_shmat(int shmid, char *shmaddr,
       int shmflg, unsigned long *addr,
       unsigned long shmlba)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_file_shm_hugepages(struct file *file)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_shm(struct task_struct *task)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void shm_init_task(struct task_struct *task)
{
}
# 17 "./include/linux/sched.h" 2

# 1 "./include/linux/plist.h" 1
# 82 "./include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 124 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 213 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 283 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); _Static_assert(__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) || __builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); _Static_assert(__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) || __builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void)), "pointer type mismatch in container_of()"); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 19 "./include/linux/sched.h" 2
# 1 "./include/linux/hrtimer.h" 1
# 15 "./include/linux/hrtimer.h"
# 1 "./include/linux/hrtimer_defs.h" 1
# 16 "./include/linux/hrtimer.h" 2






# 1 "./include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root_cached rb_root;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 33 "./include/linux/timerqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 struct rb_node *leftmost = (&head->rb_root)->rb_leftmost;

 return ({ void *__mptr = (void *)(leftmost); _Static_assert(__builtin_types_compatible_p(typeof(*(leftmost)), typeof(((struct timerqueue_node *)0)->node)) || __builtin_types_compatible_p(typeof(*(leftmost)), typeof(void)), "pointer type mismatch in container_of()"); ((struct timerqueue_node *)(__mptr - __builtin_offsetof(struct timerqueue_node, node))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timerqueue_node_queued(struct timerqueue_node *node)
{
 return !((&node->node)->__rb_parent_color == (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timerqueue_node_expires(struct timerqueue_node *node)
{
 return node->expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->rb_root = (struct rb_root_cached) { {((void *)0), }, ((void *)0) };
}
# 23 "./include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 39 "./include/linux/hrtimer.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,
 HRTIMER_MODE_HARD = 0x08,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,

 HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 118 "./include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
 u8 is_hard;
};
# 136 "./include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 159 "./include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 unsigned int index;
 clockid_t clockid;
 seqcount_raw_spinlock_t seq;
 struct hrtimer *running;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__((1 << (6)))));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_BASE_MONOTONIC_SOFT,
 HRTIMER_BASE_REALTIME_SOFT,
 HRTIMER_BASE_BOOTTIME_SOFT,
 HRTIMER_BASE_TAI_SOFT,
 HRTIMER_MAX_CLOCK_BASES,
};
# 214 "./include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 unsigned int hres_active : 1,
     in_hrtirq : 1,
     hang_detected : 1,
     softirq_activated : 1;

 unsigned int nr_events;
 unsigned short nr_retries;
 unsigned short nr_hangs;
 unsigned int max_hang_time;





 ktime_t expires_next;
 struct hrtimer *next_timer;
 ktime_t softirq_expires_next;
 struct hrtimer *softirq_next_timer;
 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ktime_to_ns(timer->node.expires);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return 1 ?
  timer->base->cpu_base->hres_active : 0;
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

extern unsigned int hrtimer_resolution;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}


extern void timerfd_clock_was_set(void);
extern void timerfd_resume(void);





extern __attribute__((section(".data" ""))) __typeof__(struct tick_device) tick_cpu_device;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_cancel_wait_running(struct hrtimer *timer)
{
 cpu_relax();
}





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);
extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, clockid_t clock_id,
     enum hrtimer_mode mode);


extern void hrtimer_init_on_stack(struct hrtimer *timer, clockid_t which_clock,
      enum hrtimer_mode mode);
extern void hrtimer_init_sleeper_on_stack(struct hrtimer_sleeper *sl,
       clockid_t clock_id,
       enum hrtimer_mode mode);

extern void destroy_hrtimer_on_stack(struct hrtimer *timer);
# 404 "./include/linux/hrtimer.h"
extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 415 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ktime_to_ns(((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *sl,
       enum hrtimer_mode mode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);
# 468 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hrtimer_is_queued(struct hrtimer *timer)
{

 return !!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_180(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(timer->state) == sizeof(char) || sizeof(timer->state) == sizeof(short) || sizeof(timer->state) == sizeof(int) || sizeof(timer->state) == sizeof(long)) || sizeof(timer->state) == sizeof(long long))) __compiletime_assert_180(); } while (0); (*(const volatile typeof( _Generic((timer->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (timer->state))) *)&(timer->state)); }) & 0x01);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 503 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
extern long hrtimer_nanosleep(ktime_t rqtp, const enum hrtimer_mode mode,
         const clockid_t clockid);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
        const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       clockid_t clock_id);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);
# 20 "./include/linux/sched.h" 2

# 1 "./include/linux/seccomp.h" 1




# 1 "./include/uapi/linux/seccomp.h" 1
# 60 "./include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};
# 109 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 128 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_addfd {
 __u64 id;
 __u32 flags;
 __u32 srcfd;
 __u32 newfd;
 __u32 newfd_flags;
};
# 6 "./include/linux/seccomp.h" 2
# 21 "./include/linux/seccomp.h"
# 1 "./arch/x86/include/asm/seccomp.h" 1




# 1 "./arch/x86/include/asm/unistd.h" 1




# 1 "./arch/x86/include/uapi/asm/unistd.h" 1
# 6 "./arch/x86/include/asm/unistd.h" 2
# 20 "./arch/x86/include/asm/unistd.h"
# 1 "./arch/x86/include/generated/uapi/asm/unistd_64.h" 1
# 21 "./arch/x86/include/asm/unistd.h" 2
# 1 "./arch/x86/include/generated/asm/unistd_64_x32.h" 1
# 22 "./arch/x86/include/asm/unistd.h" 2
# 1 "./arch/x86/include/generated/asm/unistd_32_ia32.h" 1
# 23 "./arch/x86/include/asm/unistd.h" 2
# 6 "./arch/x86/include/asm/seccomp.h" 2
# 39 "./arch/x86/include/asm/seccomp.h"
# 1 "./include/asm-generic/seccomp.h" 1
# 11 "./include/asm-generic/seccomp.h"
# 1 "./include/uapi/linux/unistd.h" 1
# 12 "./include/asm-generic/seccomp.h" 2
# 40 "./arch/x86/include/asm/seccomp.h" 2
# 22 "./include/linux/seccomp.h" 2

struct seccomp_filter;
# 35 "./include/linux/seccomp.h"
struct seccomp {
 int mode;
 atomic_t filter_count;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int secure_computing(void)
{
 if (__builtin_expect(!!(test_bit(SYSCALL_WORK_BIT_SECCOMP, &((struct thread_info *)get_current())->syscall_work)), 0))
  return __secure_computing(((void *)0));
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 93 "./include/linux/seccomp.h"
extern void seccomp_filter_release(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 112 "./include/linux/seccomp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long seccomp_get_metadata(struct task_struct *task,
     unsigned long filter_off,
     void *data)
{
 return -22;
}
# 22 "./include/linux/sched.h" 2



# 1 "./include/linux/resource.h" 1




# 1 "./include/uapi/linux/resource.h" 1
# 24 "./include/uapi/linux/resource.h"
struct rusage {
 struct __kernel_old_timeval ru_utime;
 struct __kernel_old_timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "./include/uapi/linux/resource.h"
# 1 "./arch/x86/include/generated/uapi/asm/resource.h" 1
# 1 "./include/asm-generic/resource.h" 1




# 1 "./include/uapi/asm-generic/resource.h" 1
# 6 "./include/asm-generic/resource.h" 2
# 2 "./arch/x86/include/generated/uapi/asm/resource.h" 2
# 79 "./include/uapi/linux/resource.h" 2
# 6 "./include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 26 "./include/linux/sched.h" 2
# 1 "./include/linux/latencytop.h" 1
# 14 "./include/linux/latencytop.h"
struct task_struct;
# 46 "./include/linux/latencytop.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_latency_tracing(struct task_struct *p)
{
}
# 27 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/prio.h" 1
# 32 "./include/linux/sched/prio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 28 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/types.h" 1
# 17 "./include/linux/sched/types.h"
struct task_cputime {
 u64 stime;
 u64 utime;
 unsigned long long sum_exec_runtime;
};
# 29 "./include/linux/sched.h" 2

# 1 "./include/linux/syscall_user_dispatch.h" 1
# 12 "./include/linux/syscall_user_dispatch.h"
struct syscall_user_dispatch {
 char *selector;
 unsigned long offset;
 unsigned long len;
 bool on_dispatch;
};

int set_syscall_user_dispatch(unsigned long mode, unsigned long offset,
         unsigned long len, char *selector);
# 31 "./include/linux/sched.h" 2

# 1 "./include/linux/task_io_accounting.h" 1
# 12 "./include/linux/task_io_accounting.h"
struct task_io_accounting {
# 46 "./include/linux/task_io_accounting.h"
};
# 33 "./include/linux/sched.h" 2
# 1 "./include/linux/posix-timers.h" 1






# 1 "./include/linux/alarmtimer.h" 1








struct rtc_device;

enum alarmtimer_type {
 ALARM_REALTIME,
 ALARM_BOOTTIME,


 ALARM_NUMTYPE,


 ALARM_REALTIME_FREEZER,
 ALARM_BOOTTIME_FREEZER,
};

enum alarmtimer_restart {
 ALARMTIMER_NORESTART,
 ALARMTIMER_RESTART,
};
# 42 "./include/linux/alarmtimer.h"
struct alarm {
 struct timerqueue_node node;
 struct hrtimer timer;
 enum alarmtimer_restart (*function)(struct alarm *, ktime_t now);
 enum alarmtimer_type type;
 int state;
 void *data;
};

void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
  enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
void alarm_start(struct alarm *alarm, ktime_t start);
void alarm_start_relative(struct alarm *alarm, ktime_t start);
void alarm_restart(struct alarm *alarm);
int alarm_try_to_cancel(struct alarm *alarm);
int alarm_cancel(struct alarm *alarm);

u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
ktime_t alarm_expires_remaining(const struct alarm *alarm);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct rtc_device *alarmtimer_get_rtcdev(void) { return ((void *)0); }
# 8 "./include/linux/posix-timers.h" 2

# 1 "./include/linux/task_work.h" 1





# 1 "./include/linux/sched.h" 1
# 7 "./include/linux/task_work.h" 2

typedef void (*task_work_func_t)(struct callback_head *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
init_task_work(struct callback_head *twork, task_work_func_t func)
{
 twork->func = func;
}

enum task_work_notify_mode {
 TWA_NONE,
 TWA_RESUME,
 TWA_SIGNAL,
};

int task_work_add(struct task_struct *task, struct callback_head *twork,
   enum task_work_notify_mode mode);

struct callback_head *task_work_cancel_match(struct task_struct *task,
 bool (*match)(struct callback_head *, void *data), void *data);
struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
void task_work_run(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_task_work(struct task_struct *task)
{
 task_work_run();
}
# 10 "./include/linux/posix-timers.h" 2

struct kernel_siginfo;
struct task_struct;
# 39 "./include/linux/posix-timers.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clockid_t make_process_cpuclock(const unsigned int pid,
  const clockid_t clock)
{
 return ((~pid) << 3) | clock;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clockid_t make_thread_cpuclock(const unsigned int tid,
  const clockid_t clock)
{
 return make_process_cpuclock(tid, clock | 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clockid_t fd_to_clockid(const int fd)
{
 return make_process_cpuclock((unsigned int) fd, 3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int clockid_to_fd(const clockid_t clk)
{
 return ~(clk >> 3);
}
# 70 "./include/linux/posix-timers.h"
struct cpu_timer {
 struct timerqueue_node node;
 struct timerqueue_head *head;
 struct pid *pid;
 struct list_head elist;
 int firing;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_timer_enqueue(struct timerqueue_head *head,
         struct cpu_timer *ctmr)
{
 ctmr->head = head;
 return timerqueue_add(head, &ctmr->node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_timer_queued(struct cpu_timer *ctmr)
{
 return !!ctmr->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_timer_dequeue(struct cpu_timer *ctmr)
{
 if (cpu_timer_queued(ctmr)) {
  timerqueue_del(ctmr->head, &ctmr->node);
  ctmr->head = ((void *)0);
  return true;
 }
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 cpu_timer_getexpires(struct cpu_timer *ctmr)
{
 return ctmr->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_timer_setexpires(struct cpu_timer *ctmr, u64 exp)
{
 ctmr->node.expires = exp;
}






struct posix_cputimer_base {
 u64 nextevt;
 struct timerqueue_head tqhead;
};
# 130 "./include/linux/posix-timers.h"
struct posix_cputimers {
 struct posix_cputimer_base bases[3];
 unsigned int timers_active;
 unsigned int expiry_active;
};






struct posix_cputimers_work {
 struct callback_head work;
 unsigned int scheduled;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void posix_cputimers_init(struct posix_cputimers *pct)
{
 memset(pct, 0, sizeof(*pct));
 pct->bases[0].nextevt = ((u64)~0ULL);
 pct->bases[1].nextevt = ((u64)~0ULL);
 pct->bases[2].nextevt = ((u64)~0ULL);
}

void posix_cputimers_group_init(struct posix_cputimers *pct, u64 cpu_limit);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void posix_cputimers_rt_watchdog(struct posix_cputimers *pct,
            u64 runtime)
{
 pct->bases[2].nextevt = runtime;
}
# 187 "./include/linux/posix-timers.h"
void clear_posix_cputimers_work(struct task_struct *p);
void posix_cputimers_init_work(void);
# 219 "./include/linux/posix-timers.h"
struct k_itimer {
 struct list_head list;
 struct hlist_node t_hash;
 spinlock_t it_lock;
 const struct k_clock *kclock;
 clockid_t it_clock;
 timer_t it_id;
 int it_active;
 s64 it_overrun;
 s64 it_overrun_last;
 int it_requeue_pending;
 int it_sigev_notify;
 ktime_t it_interval;
 struct signal_struct *it_signal;
 union {
  struct pid *it_pid;
  struct task_struct *it_process;
 };
 struct sigqueue *sigq;
 union {
  struct {
   struct hrtimer timer;
  } real;
  struct cpu_timer cpu;
  struct {
   struct alarm alarmtimer;
  } alarm;
 } it;
 struct callback_head rcu;
};

void run_posix_cpu_timers(void);
void posix_cpu_timers_exit(struct task_struct *task);
void posix_cpu_timers_exit_group(struct task_struct *task);
void set_process_cpu_timer(struct task_struct *task, unsigned int clock_idx,
      u64 *newval, u64 *oldval);

void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);

void posixtimer_rearm(struct kernel_siginfo *info);
# 34 "./include/linux/sched.h" 2
# 1 "./include/uapi/linux/rseq.h" 1
# 16 "./include/uapi/linux/rseq.h"
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "./include/uapi/linux/rseq.h"
 __u32 cpu_id_start;
# 90 "./include/uapi/linux/rseq.h"
 __u32 cpu_id;
# 109 "./include/uapi/linux/rseq.h"
 union {
  __u64 ptr64;

  __u64 ptr;
# 124 "./include/uapi/linux/rseq.h"
 } rseq_cs;
# 144 "./include/uapi/linux/rseq.h"
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 35 "./include/linux/sched.h" 2

# 1 "./include/linux/kcsan.h" 1
# 62 "./include/linux/kcsan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcsan_init(void) { }
# 37 "./include/linux/sched.h" 2
# 1 "./arch/x86/include/generated/asm/kmap_size.h" 1
# 1 "./include/asm-generic/kmap_size.h" 1
# 2 "./arch/x86/include/generated/asm/kmap_size.h" 2
# 38 "./include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct bpf_local_storage;
struct bpf_run_ctx;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct io_uring_task;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 280 "./include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);
           void preempt_schedule_irq(void);




extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 310 "./include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};

enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_IDLE,

 VTIME_SYS,

 VTIME_USER,

 VTIME_GUEST,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 unsigned int cpu;
 u64 utime;
 u64 stime;
 u64 gtime;
};







enum uclamp_id {
 UCLAMP_MIN = 0,
 UCLAMP_MAX,
 UCLAMP_CNT
};






struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 393 "./include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 427 "./include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;


} __attribute__((__aligned__(sizeof(u64))));
# 479 "./include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u64 runnable_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long runnable_avg;
 unsigned long util_avg;
 struct util_est util_est;
} __attribute__((__aligned__((1 << (6)))));

struct sched_statistics {

 u64 wait_start;
 u64 wait_max;
 u64 wait_count;
 u64 wait_sum;
 u64 iowait_count;
 u64 iowait_sum;

 u64 sleep_start;
 u64 sleep_max;
 s64 sum_sleep_runtime;

 u64 block_start;
 u64 block_max;
 s64 sum_block_runtime;

 u64 exec_max;
 u64 slice_max;

 u64 nr_migrations_cold;
 u64 nr_failed_migrations_affine;
 u64 nr_failed_migrations_running;
 u64 nr_failed_migrations_hot;
 u64 nr_forced_migrations;

 u64 nr_wakeups;
 u64 nr_wakeups_sync;
 u64 nr_wakeups_migrate;
 u64 nr_wakeups_local;
 u64 nr_wakeups_remote;
 u64 nr_wakeups_affine;
 u64 nr_wakeups_affine_attempts;
 u64 nr_wakeups_passive;
 u64 nr_wakeups_idle;

} __attribute__((__aligned__((1 << (6)))));

struct sched_entity {

 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;
# 563 "./include/linux/sched.h"
};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 630 "./include/linux/sched.h"
 unsigned int dl_throttled : 1;
 unsigned int dl_yielded : 1;
 unsigned int dl_non_contending : 1;
 unsigned int dl_overrun : 1;





 struct hrtimer dl_timer;
# 648 "./include/linux/sched.h"
 struct hrtimer inactive_timer;







 struct sched_dl_entity *pi_se;

};
# 695 "./include/linux/sched.h"
union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 need_mb;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct kmap_ctrl {

 int idx;
 pte_t pteval[33];

};

struct task_struct {





 struct thread_info thread_info;

 unsigned int __state;
# 744 "./include/linux/sched.h"
 void *stack;
 refcount_t usage;

 unsigned int flags;
 unsigned int ptrace;
# 767 "./include/linux/sched.h"
 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 struct sched_entity se;
 struct sched_rt_entity rt;
 struct sched_dl_entity dl;
 const struct sched_class *sched_class;
# 802 "./include/linux/sched.h"
 struct sched_statistics stats;



 struct hlist_head preempt_notifiers;






 unsigned int policy;
 int nr_cpus_allowed;
 const cpumask_t *cpus_ptr;
 cpumask_t *user_cpus_ptr;
 cpumask_t cpus_mask;
 void *migration_pending;



 unsigned short migration_flags;


 int rcu_read_lock_nesting;
 union rcu_special rcu_read_unlock_special;
 struct list_head rcu_node_entry;
 struct rcu_node *rcu_blocked_node;



 unsigned long rcu_tasks_nvcsw;
 u8 rcu_tasks_holdout;
 u8 rcu_tasks_idx;
 int rcu_tasks_idle_cpu;
 struct list_head rcu_tasks_holdout_list;



 int trc_reader_nesting;
 int trc_ipi_to_cpu;
 union rcu_special trc_reader_special;
 bool trc_reader_checked;
 struct list_head trc_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;





 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;




 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;

 unsigned sched_psi_wake_requeue:1;



 unsigned :0;
# 901 "./include/linux/sched.h"
 unsigned sched_remote_wakeup:1;


 unsigned in_execve:1;
 unsigned in_iowait:1;

 unsigned restore_sigmask:1;


 unsigned in_user_fault:1;






 unsigned no_cgroup_migration:1;

 unsigned frozen:1;






 unsigned in_memstall:1;







 unsigned in_eventfd_signal:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 955 "./include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;


 void *pf_io_worker;

 u64 utime;
 u64 stime;




 u64 gtime;
 struct prev_cputime prev_cputime;
# 1009 "./include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 start_boottime;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct posix_cputimers posix_cputimers;


 struct posix_cputimers_work posix_cputimers_work;





 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 1052 "./include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;






 unsigned long last_switch_count;
 unsigned long last_switch_time;


 struct fs_struct *fs;


 struct files_struct *files;


 struct io_uring_task *io_uring;



 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;
# 1098 "./include/linux/sched.h"
 struct seccomp seccomp;
 struct syscall_user_dispatch syscall_dispatch;


 u64 parent_exec_id;
 u64 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;




 struct mutex_waiter *blocked_on;



 int non_block_count;
# 1145 "./include/linux/sched.h"
 u64 curr_chain_key;
 int lockdep_depth;
 unsigned int lockdep_recursion;
 struct held_lock held_locks[48UL];







 void *journal_info;


 struct bio_list *bio_list;


 struct blk_plug *plug;


 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;





 unsigned long ptrace_message;
 kernel_siginfo_t *last_siginfo;

 struct task_io_accounting ioac;


 unsigned int psi_flags;
# 1201 "./include/linux/sched.h"
 struct css_set *cgroups;

 struct list_head cg_list;
# 1220 "./include/linux/sched.h"
 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;


 unsigned long preempt_disable_ip;
# 1284 "./include/linux/sched.h"
 struct rseq *rseq;
 u32 rseq_sig;




 unsigned long rseq_event_mask;


 struct tlbflush_unmap_batch tlb_ubc;

 union {
  refcount_t rcu_users;
  struct callback_head rcu;
 };


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;






 int make_it_fail;
 unsigned int fail_nth;





 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1330 "./include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1371 "./include/linux/sched.h"
 unsigned long trace;


 unsigned long trace_recursion;
# 1403 "./include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;


 struct mem_cgroup *active_memcg;
# 1425 "./include/linux/sched.h"
 struct kmap_ctrl kmap_ctrl;

 unsigned long task_state_change;




 int pagefault_disabled;

 struct task_struct *oom_reaper_list;


 struct vm_struct *stack_vm_area;



 refcount_t stack_refcount;
# 1484 "./include/linux/sched.h"
 struct callback_head l1d_flush_kill;
# 1494 "./include/linux/sched.h"
 struct thread_struct thread;







};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 1520 "./include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1553 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_181(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_181(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int task_state_index(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_182(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(tsk->__state) == sizeof(char) || sizeof(tsk->__state) == sizeof(short) || sizeof(tsk->__state) == sizeof(int) || sizeof(tsk->__state) == sizeof(long)) || sizeof(tsk->__state) == sizeof(long long))) __compiletime_assert_182(); } while (0); (*(const volatile typeof( _Generic((tsk->__state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (tsk->__state))) *)&(tsk->__state)); });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_183(void) __attribute__((__error__("BUILD_BUG_ON failed: " "((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)"))); if (!(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)))) __compiletime_assert_183(); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char task_index_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_184(void) __attribute__((__error__("BUILD_BUG_ON failed: " "1 + ilog2(TASK_REPORT_MAX) != sizeof(state_char) - 1"))); if (!(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : 63 - __builtin_clzll((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1))) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1))) __compiletime_assert_184(); } while (0);

 return state_char[state];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char task_state_to_char(struct task_struct *tsk)
{
 return task_index_to_char(task_state_index(tsk));
}
# 1651 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1720 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool is_percpu_thread(void)
{




 return true;

}
# 1752 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_no_new_privs(struct task_struct *p) { return test_bit(0, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spread_page(struct task_struct *p) { return test_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spread_slab(struct task_struct *p) { return test_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ssb_disable(struct task_struct *p) { return test_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ssb_noexec(struct task_struct *p) { return test_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ssb_force_disable(struct task_struct *p) { return test_bit(4, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ib_disable(struct task_struct *p) { return test_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ib_force_disable(struct task_struct *p) { return test_bit(6, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 get_current()->flags &= ~flags;
 get_current()->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);
# 1799 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask)
{
 if (!cpumask_test_cpu(0, new_mask))
  return -22;
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dup_user_cpus_ptr(struct task_struct *dst, struct task_struct *src, int node)
{
 if (src->user_cpus_ptr)
  return -22;
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void release_user_cpus_ptr(struct task_struct *p)
{
 ({ int __ret_warn_on = !!(p->user_cpus_ptr); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dl_task_check_affinity(struct task_struct *p, const struct cpumask *mask)
{
 return 0;
}


extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern void sched_set_fifo(struct task_struct *p);
extern void sched_set_fifo_low(struct task_struct *p);
extern void sched_set_normal(struct task_struct *p, int nice);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {

 struct task_struct task;




 unsigned long stack[(((1UL) << 12) << (2 + 0))/sizeof(long)];
};





extern unsigned long init_stack[(((1UL) << 12) << (2 + 0)) / sizeof(unsigned long)];
# 1902 "./include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kick_process(struct task_struct *tsk) { }


extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);
# 1945 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void scheduler_ipi(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long wait_task_inactive(struct task_struct *p, unsigned int match_state)
{
 return 1;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag((&(tsk)->thread_info), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag((&(tsk)->thread_info), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag((&(tsk)->thread_info), flag, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag((&(tsk)->thread_info), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag((&(tsk)->thread_info), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag((&(tsk)->thread_info), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,3)), 0);
}
# 2009 "./include/linux/sched.h"
extern int __cond_resched(void);



extern struct static_call_key __SCK__cond_resched; extern typeof(__cond_resched) __SCT__cond_resched;;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int _cond_resched(void)
{
 return (&__SCT__cond_resched)();
}
# 2040 "./include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t *lock);
extern int __cond_resched_rwlock_read(rwlock_t *lock);
extern int __cond_resched_rwlock_write(rwlock_t *lock);
# 2078 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cond_resched_rcu(void)
{

 rcu_read_unlock();
 ({ __might_resched("include/linux/sched.h", 2082, 0); _cond_resched(); });
 rcu_read_lock();

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int spin_needbreak(spinlock_t *lock)
{

 return spin_is_contended(lock);



}
# 2109 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rwlock_needbreak(rwlock_t *lock)
{

 return ((void)(lock), 0);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
}
# 2137 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int task_cpu(const struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_task_cpu(struct task_struct *p, unsigned int cpu)
{
}



extern bool sched_task_on_rq(struct task_struct *p);
extern unsigned long get_wchan(struct task_struct *p);
# 2160 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vcpu_is_preempted(int cpu)
{
 return false;
}


extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);
# 2184 "./include/linux/sched.h"
enum rseq_event_mask_bits {
 RSEQ_EVENT_PREEMPT_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT,
 RSEQ_EVENT_SIGNAL_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT,
 RSEQ_EVENT_MIGRATE_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT,
};

enum rseq_event_mask {
 RSEQ_EVENT_PREEMPT = (1U << RSEQ_EVENT_PREEMPT_BIT),
 RSEQ_EVENT_SIGNAL = (1U << RSEQ_EVENT_SIGNAL_BIT),
 RSEQ_EVENT_MIGRATE = (1U << RSEQ_EVENT_MIGRATE_BIT),
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_set_notify_resume(struct task_struct *t)
{
 if (t->rseq)
  set_tsk_thread_flag(t, 1);
}

void __rseq_handle_notify_resume(struct ksignal *sig, struct pt_regs *regs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_handle_notify_resume(struct ksignal *ksig,
          struct pt_regs *regs)
{
 if (get_current()->rseq)
  __rseq_handle_notify_resume(ksig, regs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_signal_deliver(struct ksignal *ksig,
           struct pt_regs *regs)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 __set_bit(RSEQ_EVENT_SIGNAL_BIT, &get_current()->rseq_event_mask);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 rseq_handle_notify_resume(ksig, regs);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_preempt(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_PREEMPT_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_migrate(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_MIGRATE_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_fork(struct task_struct *t, unsigned long clone_flags)
{
 if (clone_flags & 0x00000100) {
  t->rseq = ((void *)0);
  t->rseq_sig = 0;
  t->rseq_event_mask = 0;
 } else {
  t->rseq = get_current()->rseq;
  t->rseq_sig = get_current()->rseq_sig;
  t->rseq_event_mask = get_current()->rseq_event_mask;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_execve(struct task_struct *t)
{
 t->rseq = ((void *)0);
 t->rseq_sig = 0;
 t->rseq_event_mask = 0;
}
# 2292 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_syscall(struct pt_regs *regs)
{
}



const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);

const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);

int sched_trace_rq_cpu(struct rq *rq);
int sched_trace_rq_cpu_capacity(struct rq *rq);
int sched_trace_rq_nr_running(struct rq *rq);

const struct cpumask *sched_trace_rd_span(struct root_domain *rd);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sched_core_free(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sched_core_fork(struct task_struct *p) { }
# 8 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/sched/jobctl.h" 1






struct task_struct;
# 35 "./include/linux/sched/jobctl.h"
extern bool task_set_jobctl_pending(struct task_struct *task, unsigned long mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task, unsigned long mask);
# 9 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/sched/task.h" 1
# 11 "./include/linux/sched/task.h"
# 1 "./include/linux/uaccess.h" 1




# 1 "./include/linux/fault-inject-usercopy.h" 1
# 18 "./include/linux/fault-inject-usercopy.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool should_fail_usercopy(void) { return false; }
# 6 "./include/linux/uaccess.h" 2





# 1 "./arch/x86/include/asm/uaccess.h" 1
# 12 "./arch/x86/include/asm/uaccess.h"
# 1 "./arch/x86/include/asm/smap.h" 1
# 81 "./arch/x86/include/asm/smap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clac(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void stac(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long smap_save(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smap_restore(unsigned long flags) { }
# 13 "./arch/x86/include/asm/uaccess.h" 2
# 1 "./arch/x86/include/asm/extable.h" 1
# 23 "./arch/x86/include/asm/extable.h"
struct exception_table_entry {
 int insn, fixup, data;
};
struct pt_regs;
# 38 "./arch/x86/include/asm/extable.h"
extern int fixup_exception(struct pt_regs *regs, int trapnr,
      unsigned long error_code, unsigned long fault_addr);
extern int fixup_bug(struct pt_regs *regs, int trapnr);
extern int ex_get_fixup_type(unsigned long ip);
extern void early_fixup_exception(struct pt_regs *regs, int trapnr);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ex_handler_msr_mce(struct pt_regs *regs, bool wrmsr) { }



bool ex_handler_bpf(const struct exception_table_entry *x, struct pt_regs *regs);
# 14 "./arch/x86/include/asm/uaccess.h" 2





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __chk_range_not_ok(unsigned long addr, unsigned long size, unsigned long limit)
{







 if (__builtin_constant_p(size))
  return __builtin_expect(!!(addr > limit - size), 0);


 addr += size;
 if (__builtin_expect(!!(addr < size), 0))
  return true;
 return __builtin_expect(!!(addr > limit), 0);
}
# 45 "./arch/x86/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pagefault_disabled(void);
# 75 "./arch/x86/include/asm/uaccess.h"
extern int __get_user_1(void);
extern int __get_user_2(void);
extern int __get_user_4(void);
extern int __get_user_8(void);
extern int __get_user_nocheck_1(void);
extern int __get_user_nocheck_2(void);
extern int __get_user_nocheck_4(void);
extern int __get_user_nocheck_8(void);
extern int __get_user_bad(void);
# 196 "./arch/x86/include/asm/uaccess.h"
extern void __put_user_bad(void);





extern void __put_user_1(void);
extern void __put_user_2(void);
extern void __put_user_4(void);
extern void __put_user_8(void);
extern void __put_user_nocheck_1(void);
extern void __put_user_nocheck_2(void);
extern void __put_user_nocheck_4(void);
extern void __put_user_nocheck_8(void);
# 412 "./arch/x86/include/asm/uaccess.h"
struct __large_struct { unsigned long buf[100]; };
# 427 "./arch/x86/include/asm/uaccess.h"
extern unsigned long
copy_from_user_nmi(void *to, const void *from, unsigned long n);
extern __attribute__((__warn_unused_result__)) long
strncpy_from_user(char *dst, const char *src, long count);

extern __attribute__((__warn_unused_result__)) long strnlen_user(const char *str, long n);

unsigned long __attribute__((__warn_unused_result__)) clear_user(void *mem, unsigned long len);
unsigned long __attribute__((__warn_unused_result__)) __clear_user(void *mem, unsigned long len);


unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_kernel(void *to, const void *from, unsigned len);


unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_user(void *to, const void *from, unsigned len);
# 460 "./arch/x86/include/asm/uaccess.h"
# 1 "./arch/x86/include/asm/uaccess_64.h" 1
# 20 "./arch/x86/include/asm/uaccess_64.h"
__attribute__((__warn_unused_result__)) unsigned long
copy_user_enhanced_fast_string(void *to, const void *from, unsigned len);
__attribute__((__warn_unused_result__)) unsigned long
copy_user_generic_string(void *to, const void *from, unsigned len);
__attribute__((__warn_unused_result__)) unsigned long
copy_user_generic_unrolled(void *to, const void *from, unsigned len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
copy_user_generic(void *to, const void *from, unsigned len)
{
 unsigned ret;






 asm __inline volatile ("# ALT: oldinstr2\n" "661:\n\t" "call %P[old]" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+ 9)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "call %P[new1]" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" "call %P[new2]" "\n" "665""2" ":\n" ".popsection\n" : "=a" (ret), "=D" (to), "=S" (from), "=d" (len), "+r" (current_stack_pointer) : [old] "i" (copy_user_generic_unrolled), [new1] "i" (copy_user_generic_string), [new2] "i" (copy_user_enhanced_fast_string), "1" (to), "2" (from), "3" (len) : "memory", "rcx", "r8", "r9", "r10", "r11");
# 46 "./arch/x86/include/asm/uaccess_64.h"
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
raw_copy_from_user(void *dst, const void *src, unsigned long size)
{
 return copy_user_generic(dst, ( void *)src, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
raw_copy_to_user(void *dst, const void *src, unsigned long size)
{
 return copy_user_generic(( void *)dst, src, size);
}

extern long __copy_user_nocache(void *dst, const void *src,
    unsigned size, int zerorest);

extern long __copy_user_flushcache(void *dst, const void *src, unsigned size);
extern void memcpy_page_flushcache(char *to, struct page *page, size_t offset,
      size_t len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
__copy_from_user_inatomic_nocache(void *dst, const void *src,
      unsigned size)
{
 kasan_check_write(dst, size);
 return __copy_user_nocache(dst, src, size, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
__copy_from_user_flushcache(void *dst, const void *src, unsigned size)
{
 kasan_check_write(dst, size);
 return __copy_user_flushcache(dst, src, size);
}
# 461 "./arch/x86/include/asm/uaccess.h" 2








static __attribute__((__warn_unused_result__)) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool user_access_begin(const void *ptr, size_t len)
{
 if (__builtin_expect(!!(!({ ({ int __ret_warn_on = !!(!(!(((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4)))) | ((preempt_count() & (((1UL << (4))-1) << ((0 + 8) + 8)))) | ((preempt_count() & (((1UL << (8))-1) << (0 + 8))) & (1UL << (0 + 8))))) && !pagefault_disabled()); __builtin_expect(!!(__ret_warn_on), 0); }); __builtin_expect(!!(!({ (void)0; __chk_range_not_ok((unsigned long )(ptr), len, task_size_max()); })), 1); })), 0))
  return 0;
 ({ stac(); asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "lfence" "\n" "665""1" ":\n" ".popsection\n" : : : "memory"); });
 return 1;
}
# 12 "./include/linux/uaccess.h" 2
# 32 "./include/linux/uaccess.h"
typedef struct {

} mm_segment_t;
# 43 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) mm_segment_t force_uaccess_begin(void)
{
 return (mm_segment_t) { };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void force_uaccess_end(mm_segment_t oldfs)
{
}
# 98 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 __might_fault("include/linux/uaccess.h", 109);
 if (should_fail_usercopy())
  return n;
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}
# 130 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 __might_fault("include/linux/uaccess.h", 143);
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}
# 166 "./include/linux/uaccess.h"
extern __attribute__((__warn_unused_result__)) unsigned long
_copy_from_user(void *, const void *, unsigned long);
# 184 "./include/linux/uaccess.h"
extern __attribute__((__warn_unused_result__)) unsigned long
_copy_to_user(void *, const void *, unsigned long);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}
# 217 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void pagefault_disabled_inc(void)
{
 get_current()->pagefault_disabled++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void pagefault_disabled_dec(void)
{
 get_current()->pagefault_disabled--;
}
# 234 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pagefault_disable(void)
{
 pagefault_disabled_inc();




 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pagefault_enable(void)
{




 __asm__ __volatile__("": : :"memory");
 pagefault_disabled_dec();
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pagefault_disabled(void)
{
 return get_current()->pagefault_disabled != 0;
}
# 285 "./include/linux/uaccess.h"
extern __attribute__((__warn_unused_result__)) int check_zeroed_user(const void *from, size_t size);
# 334 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) int
copy_struct_from_user(void *dst, size_t ksize, const void *src,
        size_t usize)
{
 size_t size = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) < (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x185 = (ksize); typeof(usize) __UNIQUE_ID___y186 = (usize); ((__UNIQUE_ID___x185) < (__UNIQUE_ID___y186) ? (__UNIQUE_ID___x185) : (__UNIQUE_ID___y186)); }));
 size_t rest = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) > (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x187 = (ksize); typeof(usize) __UNIQUE_ID___y188 = (usize); ((__UNIQUE_ID___x187) > (__UNIQUE_ID___y188) ? (__UNIQUE_ID___x187) : (__UNIQUE_ID___y188)); })) - size;


 if (usize < ksize) {
  memset(dst + size, 0, rest);
 } else if (usize > ksize) {
  int ret = check_zeroed_user(src + size, rest);
  if (ret <= 0)
   return ret ?: -7;
 }

 if (copy_from_user(dst, src, size))
  return -14;
 return 0;
}

bool copy_from_kernel_nofault_allowed(const void *unsafe_src, size_t size);

long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
long __attribute__((no_instrument_function)) copy_to_kernel_nofault(void *dst, const void *src, size_t size);

long copy_from_user_nofault(void *dst, const void *src, size_t size);
long __attribute__((no_instrument_function)) copy_to_user_nofault(void *dst, const void *src,
  size_t size);

long strncpy_from_kernel_nofault(char *dst, const void *unsafe_addr,
  long count);

long strncpy_from_user_nofault(char *dst, const void *unsafe_addr,
  long count);
long strnlen_user_nofault(const void *unsafe_addr, long count);
# 12 "./include/linux/sched/task.h" 2

struct task_struct;
struct rusage;
union thread_union;
struct css_set;




struct kernel_clone_args {
 u64 flags;
 int *pidfd;
 int *child_tid;
 int *parent_tid;
 int exit_signal;
 unsigned long stack;
 unsigned long stack_size;
 unsigned long tls;
 pid_t *set_tid;

 size_t set_tid_size;
 int cgroup;
 int io_thread;
 struct cgroup *cgrp;
 struct css_set *cset;
};







extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern int lockdep_tasklist_lock_is_held(void);

extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);

extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_post_fork(struct task_struct *p,
       struct kernel_clone_args *kargs);
extern void sched_dead(struct task_struct *p);

void __attribute__((__noreturn__)) do_task_dead(void);

extern void proc_caches_init(void);

extern void fork_init(void);

extern void release_task(struct task_struct * p);

extern int copy_thread(unsigned long, unsigned long, unsigned long,
         struct task_struct *, unsigned long);

extern void flush_thread(void);


extern void exit_thread(struct task_struct *tsk);





extern void do_group_exit(int);

extern void exit_files(struct task_struct *);
extern void exit_itimers(struct signal_struct *);

extern pid_t kernel_clone(struct kernel_clone_args *kargs);
struct task_struct *create_io_thread(int (*fn)(void *), void *arg, int node);
struct task_struct *fork_idle(int);
struct mm_struct *copy_init_mm(void);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
extern long kernel_wait4(pid_t, int *, int, struct rusage *);
int kernel_wait(pid_t pid, int *stat);

extern void free_task(struct task_struct *tsk);
# 103 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *get_task_struct(struct task_struct *t)
{
 refcount_inc(&t->usage);
 return t;
}

extern void __put_task_struct(struct task_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_task_struct(struct task_struct *t)
{
 if (refcount_dec_and_test(&t->usage))
  __put_task_struct(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_task_struct_many(struct task_struct *t, int nr)
{
 if (refcount_sub_and_test(nr, &t->usage))
  __put_task_struct(t);
}

void put_task_struct_rcu_user(struct task_struct *task);


extern int arch_task_struct_size __attribute__((__section__(".data..read_mostly")));
# 146 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vm_struct *task_stack_vm_area(const struct task_struct *t)
{
 return t->stack_vm_area;
}
# 167 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_lock(struct task_struct *p)
{
 spin_lock(&p->alloc_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_unlock(struct task_struct *p)
{
 spin_unlock(&p->alloc_lock);
}
# 10 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/cred.h" 1
# 13 "./include/linux/cred.h"
# 1 "./include/linux/key.h" 1
# 17 "./include/linux/key.h"
# 1 "./include/linux/sysctl.h" 1
# 30 "./include/linux/sysctl.h"
# 1 "./include/uapi/linux/sysctl.h" 1
# 35 "./include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
 NET_IPV4_CONF_ARP_EVICT_NOCARRIER=23,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 NET_IPV6_RA_DEFRTR_METRIC=28,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "./include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler(struct ctl_table *ctl, int write, void *buffer,
  size_t *lenp, loff_t *ppos);

int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dobool(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec_minmax(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dou8vec_minmax(struct ctl_table *table, int write, void *buffer,
   size_t *lenp, loff_t *ppos);
int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int, void *,
  size_t *, loff_t *);
int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_do_static_key(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 98 "./include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 116 "./include/linux/sysctl.h"
struct ctl_table {
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header {
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);
void do_sysctl_args(void);

extern int pwrsw_enabled;
extern int unaligned_enabled;
extern int unaligned_dump_stack;
extern int no_unaligned_warning;

extern struct ctl_table sysctl_mount_point[];
extern struct ctl_table random_table[];
extern struct ctl_table firmware_config_table[];
extern struct ctl_table epoll_table[];
# 246 "./include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 18 "./include/linux/key.h" 2


# 1 "./include/linux/assoc_array.h" 1
# 22 "./include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 21 "./include/linux/key.h" 2







typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct net;
# 77 "./include/linux/key.h"
enum key_need_perm {
 KEY_NEED_UNSPECIFIED,
 KEY_NEED_VIEW,
 KEY_NEED_READ,
 KEY_NEED_WRITE,
 KEY_NEED_SEARCH,
 KEY_NEED_LINK,
 KEY_NEED_SETATTR,
 KEY_NEED_UNLINK,
 KEY_SYSADMIN_OVERRIDE,
 KEY_AUTHTOKEN_OVERRIDE,
 KEY_DEFER_PERM_CHECK,
};

struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct key_tag;
struct keyring_list;
struct keyring_name;

struct key_tag {
 struct callback_head rcu;
 refcount_t usage;
 bool removed;
};

struct keyring_index_key {

 unsigned long hash;
 union {
  struct {

   u16 desc_len;
   char desc[sizeof(long) - 2];




  };
  unsigned long x;
 };
 struct key_type *type;
 struct key_tag *domain_tag;
 const char *description;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 147 "./include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}

typedef int (*key_restrict_link_func_t)(struct key *dest_keyring,
     const struct key_type *type,
     const union key_payload *payload,
     struct key *restriction_key);

struct key_restriction {
 key_restrict_link_func_t check;
 struct key *key;
 struct key_type *keytype;
};

enum key_state {
 KEY_IS_UNINSTANTIATED,
 KEY_IS_POSITIVE,
};
# 189 "./include/linux/key.h"
struct key {
 refcount_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };



 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time64_t expiry;
  time64_t revoked_at;
 };
 time64_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;



 short state;






 unsigned long flags;
# 239 "./include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   unsigned long hash;
   unsigned long len_desc;
   struct key_type *type;
   struct key_tag *domain_tag;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
 };
# 274 "./include/linux/key.h"
 struct key_restriction *restrict_link;
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        struct key_restriction *restrict_link);
# 294 "./include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);
extern bool key_put_tag(struct key_tag *tag);
extern void key_remove_domain(struct key_tag *domain_tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct key *__key_get(struct key *key)
{
 refcount_inc(&key->usage);
 return key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key_tag(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag,
       const char *callout_info);

extern struct key *request_key_rcu(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         struct key_tag *domain_tag,
         const void *callout_info,
         size_t callout_len,
         void *aux);
# 340 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info)
{
 return request_key_tag(type, description, ((void *)0), callout_info);
}
# 379 "./include/linux/key.h"
extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_move(struct key *key,
      struct key *from_keyring,
      struct key *to_keyring,
      unsigned int flags);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key_restriction *restrict_link,
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload,
    struct key *restriction_key);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description,
    bool recurse);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern int keyring_restrict(key_ref_t keyring, const char *type,
       const char *restriction);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);

extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
     enum key_need_perm need_perm);
extern void key_free_user_ns(struct user_namespace *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) short key_read_state(const struct key *key)
{

 return ({ typeof( _Generic((*&key->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&key->state))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_189(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)) || sizeof(*&key->state) == sizeof(long long))) __compiletime_assert_189(); } while (0); (*(const volatile typeof( _Generic((*&key->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&key->state))) *)&(*&key->state)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_190(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)))) __compiletime_assert_190(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&key->state))___p1; });
}
# 457 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool key_is_positive(const struct key *key)
{
 return key_read_state(key) == KEY_IS_POSITIVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool key_is_negative(const struct key *key)
{
 return key_read_state(key) < 0;
}
# 480 "./include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct cred *new_cred);
extern void key_fsgid_changed(struct cred *new_cred);
extern void key_init(void);
# 14 "./include/linux/cred.h" 2



# 1 "./include/linux/sched/user.h" 1






# 1 "./include/linux/percpu_counter.h" 1
# 97 "./include/linux/percpu_counter.h"
struct percpu_counter {
 s64 count;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int percpu_counter_init(struct percpu_counter *fbc, s64 amount,
          gfp_t gfp)
{
 fbc->count = amount;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_destroy(struct percpu_counter *fbc)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_set(struct percpu_counter *fbc, s64 amount)
{
 fbc->count = amount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 if (fbc->count > rhs)
  return 1;
 else if (fbc->count < rhs)
  return -1;
 else
  return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
__percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch)
{
 return percpu_counter_compare(fbc, rhs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 fbc->count += amount;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount, s32 batch)
{
 percpu_counter_add(fbc, amount);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{
 return fbc->count;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 return percpu_counter_read_positive(fbc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return percpu_counter_read(fbc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_counter_initialized(struct percpu_counter *fbc)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_sync(struct percpu_counter *fbc)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 8 "./include/linux/sched/user.h" 2

# 1 "./include/linux/ratelimit.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { static struct lock_class_key __key; __raw_spin_lock_init((&rs->lock), "&rs->lock", &__key, LD_WAIT_SPIN); } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 250),
     10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & ((((1UL))) << (0))))
  return;

 if (rs->missed) {
  ({ do {} while (0); _printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed); });

  rs->missed = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;
# 10 "./include/linux/sched/user.h" 2




struct user_struct {
 refcount_t __count;



 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;






 struct ratelimit_state ratelimit;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_struct *get_uid(struct user_struct *u)
{
 refcount_inc(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);
# 18 "./include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[];
} ;
# 40 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 69 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void groups_free(struct group_info *group_info)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int in_group_p(kgid_t grp)
{
        return 1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int in_egroup_p(kgid_t grp)
{
        return 1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int groups_search(const struct group_info *group_info, kgid_t grp)
{
 return 1;
}
# 110 "./include/linux/cred.h"
struct cred {
 atomic_t usage;

 atomic_t subscribers;
 void *put_addr;
 unsigned magic;



 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;




 struct user_struct *user;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct group_info *group_info;

 union {
  int non_rcu;
  struct callback_head rcu;
 };
} ;

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern int cred_fscmp(const struct cred *, const struct cred *);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) cred_init(void);
extern int set_cred_ucounts(struct cred *);





extern void __invalid_creds(const struct cred *, const char *, unsigned);
extern void __validate_process_creds(struct task_struct *,
         const char *, unsigned);

extern bool creds_are_invalid(const struct cred *cred);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __validate_creds(const struct cred *cred,
        const char *file, unsigned line)
{
 if (__builtin_expect(!!(creds_are_invalid(cred)), 0))
  __invalid_creds(cred, file, line);
}
# 202 "./include/linux/cred.h"
extern void validate_creds_for_do_exit(struct task_struct *);
# 215 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 229 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 248 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return cred;
 do { __validate_creds((cred), "include/linux/cred.h", 253); } while(0);
 nonconst_cred->non_rcu = 0;
 return get_new_cred(nonconst_cred);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cred *get_cred_rcu(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return ((void *)0);
 if (!atomic_inc_not_zero(&nonconst_cred->usage))
  return ((void *)0);
 do { __validate_creds((cred), "include/linux/cred.h", 265); } while(0);
 nonconst_cred->non_rcu = 0;
 return cred;
}
# 281 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 if (cred) {
  do { __validate_creds((cred), "include/linux/cred.h", 286); } while(0);
  if (atomic_dec_and_test(&(cred)->usage))
   __put_cred(cred);
 }
}
# 393 "./include/linux/cred.h"
extern struct user_namespace init_user_ns;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *current_user_ns(void)
{
 return &init_user_ns;
}
# 11 "./include/linux/sched/signal.h" 2
# 20 "./include/linux/sched/signal.h"
struct sighand_struct {
 spinlock_t siglock;
 refcount_t count;
 wait_queue_head_t signalfd_wqh;
 struct k_sigaction action[64];
};




struct pacct_struct {
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 u64 ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;
};

struct cpu_itimer {
 u64 expires;
 u64 incr;
};





struct task_cputime_atomic {
 atomic64_t utime;
 atomic64_t stime;
 atomic64_t sum_exec_runtime;
};
# 66 "./include/linux/sched/signal.h"
struct thread_group_cputimer {
 struct task_cputime_atomic cputime_atomic;
};

struct multiprocess_signals {
 sigset_t signal;
 struct hlist_node node;
};

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};
# 93 "./include/linux/sched/signal.h"
struct signal_struct {
 refcount_t sigcnt;
 atomic_t live;
 int nr_threads;
 struct list_head thread_head;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 struct hlist_head multiprocess;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;

 struct core_state *core_state;
# 135 "./include/linux/sched/signal.h"
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;




 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;



 struct posix_cputimers posix_cputimers;


 struct pid *pids[PIDTYPE_MAX];





 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;
# 188 "./include/linux/sched/signal.h"
 seqlock_t stats_lock;
 u64 utime, stime, cutime, cstime;
 u64 gtime;
 u64 cgtime;
 struct prev_cputime prev_cputime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
# 216 "./include/linux/sched/signal.h"
 struct rlimit rlim[16];
# 233 "./include/linux/sched/signal.h"
 bool oom_flag_origin;
 short oom_score_adj;
 short oom_score_adj_min;

 struct mm_struct *oom_mm;


 struct mutex cred_guard_mutex;





 struct rw_semaphore exec_update_lock;




} ;
# 272 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void signal_set_stop_flags(struct signal_struct *sig,
      unsigned int flags)
{
 ({ int __ret_warn_on = !!(sig->flags & (0x00000004|0x00000008)); __builtin_expect(!!(__ret_warn_on), 0); });
 sig->flags = (sig->flags & ~((0x00000010|0x00000020) | 0x00000001 | 0x00000002)) | flags;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int signal_group_exit(const struct signal_struct *sig)
{
 return (sig->flags & 0x00000004) ||
  (sig->group_exit_task != ((void *)0));
}

extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *task,
     sigset_t *mask, kernel_siginfo_t *info);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernel_dequeue_signal(void)
{
 struct task_struct *task = get_current();
 kernel_siginfo_t __info;
 int ret;

 spin_lock_irq(&task->sighand->siglock);
 ret = dequeue_signal(task, &task->blocked, &__info);
 spin_unlock_irq(&task->sighand->siglock);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_signal_stop(void)
{
 spin_lock_irq(&get_current()->sighand->siglock);
 if (get_current()->jobctl & (1UL << 16))
  do { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(&get_current()->pi_lock); } while (0); do { ({ int __ret_warn_on = !!(!((((0x0100 | 0x0004))) & (0x0004 | 0x0008 | 0x0040 | 0x0080))); __builtin_expect(!!(__ret_warn_on), 0); }); get_current()->task_state_change = ({ __label__ __here; __here: (unsigned long)&&__here; }); } while (0); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_191(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_191(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = (((0x0100 | 0x0004))); } while (0); } while (0); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&get_current()->pi_lock, flags); } while (0); } while (0);
 spin_unlock_irq(&get_current()->sighand->siglock);

 schedule();
}






int force_sig_fault_to_task(int sig, int code, void *addr

 , struct task_struct *t);
int force_sig_fault(int sig, int code, void *addr
                                                                );
int send_sig_fault(int sig, int code, void *addr

 , struct task_struct *t);

int force_sig_mceerr(int code, void *, short);
int send_sig_mceerr(int code, void *, short, struct task_struct *);

int force_sig_bnderr(void *addr, void *lower, void *upper);
int force_sig_pkuerr(void *addr, u32 pkey);
int force_sig_perf(void *addr, u32 type, u64 sig_data);

int force_sig_ptrace_errno_trap(int errno, void *addr);
int force_sig_fault_trapno(int sig, int code, void *addr, int trapno);
int send_sig_fault_trapno(int sig, int code, void *addr, int trapno,
   struct task_struct *t);
int force_sig_seccomp(int syscall, int reason, bool force_coredump);

extern int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern void force_sigsegv(int sig);
extern int force_sig_info(struct kernel_siginfo *);
extern int __kill_pgrp_info(int sig, struct kernel_siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct kernel_siginfo *info, struct pid *pid);
extern int kill_pid_usb_asyncio(int sig, int errno, sigval_t addr, struct pid *,
    const struct cred *);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern __attribute__((__warn_unused_result__)) bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int);
extern void force_fatal_sig(int);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int restart_syscall(void)
{
 set_tsk_thread_flag(get_current(), 2);
 return -513;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_sigpending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,2)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int signal_pending(struct task_struct *p)
{





 if (__builtin_expect(!!(test_tsk_thread_flag(p, 17)), 0))
  return 1;
 return task_sigpending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __fatal_signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fatal_signal_pending(struct task_struct *p)
{
 return task_sigpending(p) && __fatal_signal_pending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int signal_pending_state(unsigned int state, struct task_struct *p)
{
 if (!(state & (0x0001 | 0x0100)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 0x0001) || __fatal_signal_pending(p);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fault_signal_pending(vm_fault_t fault_flags,
     struct pt_regs *regs)
{
 return __builtin_expect(!!((fault_flags & VM_FAULT_RETRY) && (fatal_signal_pending(get_current()) || (user_mode(regs) && signal_pending(get_current())))), 0);


}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);
extern void calculate_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0100 : 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0008 : 0);
}

void task_join_group_stop(struct task_struct *task);
# 489 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_restore_sigmask(void)
{
 get_current()->restore_sigmask = true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_restore_sigmask(struct task_struct *task)
{
 task->restore_sigmask = false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_restore_sigmask(void)
{
 get_current()->restore_sigmask = false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_restore_sigmask(void)
{
 return get_current()->restore_sigmask;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_tsk_restore_sigmask(struct task_struct *task)
{
 return task->restore_sigmask;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_clear_restore_sigmask(void)
{
 if (!get_current()->restore_sigmask)
  return false;
 get_current()->restore_sigmask = false;
 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&get_current()->saved_sigmask);
}

extern int set_user_sigmask(const sigset_t *umask, size_t sigsetsize);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void restore_saved_sigmask_unless(bool interrupted)
{
 if (interrupted)
  ({ int __ret_warn_on = !!(!signal_pending(get_current())); __builtin_expect(!!(__ret_warn_on), 0); });
 else
  restore_saved_sigmask();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &get_current()->blocked;
 if (__builtin_expect(!!(test_restore_sigmask()), 0))
  res = &get_current()->saved_sigmask;
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __on_sig_stack(unsigned long sp)
{




 return sp > get_current()->sas_ss_sp &&
  sp - get_current()->sas_ss_sp <= get_current()->sas_ss_size;

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int on_sig_stack(unsigned long sp)
{
# 576 "./include/linux/sched/signal.h"
 if (get_current()->sas_ss_flags & (1U << 31))
  return 0;

 return __on_sig_stack(sp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sas_ss_flags(unsigned long sp)
{
 if (!get_current()->sas_ss_size)
  return 2;

 return on_sig_stack(sp) ? 1 : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sas_ss_reset(struct task_struct *p)
{
 p->sas_ss_sp = 0;
 p->sas_ss_size = 0;
 p->sas_ss_flags = 2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000)), 0) && ! sas_ss_flags(sp))



  return get_current()->sas_ss_sp + get_current()->sas_ss_size;

 return sp;
}

extern void __cleanup_sighand(struct sighand_struct *);
extern void flush_itimer_signals(void);
# 620 "./include/linux/sched/signal.h"
extern bool current_is_single_threaded(void);
# 642 "./include/linux/sched/signal.h"
typedef int (*proc_visitor)(struct task_struct *p, void *data);
void walk_process_tree(struct task_struct *top, proc_visitor, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct pid *task_pid_type(struct task_struct *task, enum pid_type type)
{
 struct pid *pid;
 if (type == PIDTYPE_PID)
  pid = task_pid(task);
 else
  pid = task->signal->pids[type];
 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_tgid(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_TGID];
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_PGID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_session(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_SID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_nr_threads(struct task_struct *task)
{
 return task->signal->nr_threads;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool thread_group_leader(struct task_struct *p)
{
 return p->exit_signal >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return p1->signal == p2->signal;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *next_thread(const struct task_struct *p)
{
 return ({ void *__mptr = (void *)(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_192(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_192(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); })); _Static_assert(__builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_192(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_192(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(((struct task_struct *)0)->thread_group)) || __builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_192(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_192(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(void)), "pointer type mismatch in container_of()"); ((struct task_struct *)(__mptr - __builtin_offsetof(struct task_struct, thread_group))); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}




extern bool thread_group_exited(struct pid *pid);

extern struct sighand_struct *__lock_task_sighand(struct task_struct *task,
       unsigned long *flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct sighand_struct *lock_task_sighand(struct task_struct *task,
             unsigned long *flags)
{
 struct sighand_struct *ret;

 ret = __lock_task_sighand(task, flags);
 (void)(ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unlock_task_sighand(struct task_struct *task,
      unsigned long *flags)
{
 spin_unlock_irqrestore(&task->sighand->siglock, *flags);
}


extern void lockdep_assert_task_sighand_held(struct task_struct *task);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long task_rlimit(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_193(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long long))) __compiletime_assert_193(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_cur), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_cur))) *)&(task->signal->rlim[limit].rlim_cur)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long task_rlimit_max(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_194(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_max) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long long))) __compiletime_assert_194(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_max), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_max))) *)&(task->signal->rlim[limit].rlim_max)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long rlimit(unsigned int limit)
{
 return task_rlimit(get_current(), limit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max(get_current(), limit);
}
# 7 "./include/linux/rcuwait.h" 2
# 16 "./include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcuwait_active(struct rcuwait *w)
{
 return !!({ typeof(*(w->task)) *_________p1 = (typeof(*(w->task)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_195(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_195(); } while (0); (*(const volatile typeof( _Generic(((w->task)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((w->task)))) *)&((w->task))); }); ; ((typeof(*(w->task)) *)(_________p1)); });
}

extern int rcuwait_wake_up(struct rcuwait *w);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prepare_to_rcuwait(struct rcuwait *w)
{
 do { uintptr_t _r_a_p__v = (uintptr_t)(get_current()); ; if (__builtin_constant_p(get_current()) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_196(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_196(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_197(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_197(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_198(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_198(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void finish_rcuwait(struct rcuwait *w)
{
        do { uintptr_t _r_a_p__v = (uintptr_t)(((void *)0)); ; if (__builtin_constant_p(((void *)0)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_199(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_199(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_200(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_200(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_201(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_201(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { ({ int __ret_warn_on = !!((((0x0000)) & (0x0004 | 0x0008 | 0x0040 | 0x0080))); __builtin_expect(!!(__ret_warn_on), 0); }); get_current()->task_state_change = ({ __label__ __here; __here: (unsigned long)&&__here; }); } while (0); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_202(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_202(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = ((0x0000)); } while (0); } while (0); } while (0);
}
# 8 "./include/linux/percpu-rwsem.h" 2

# 1 "./include/linux/rcu_sync.h" 1
# 17 "./include/linux/rcu_sync.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 32 "./include/linux/rcu_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{
 do { } while (0 && (!rcu_read_lock_any_held()));

 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_203(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rsp->gp_state) == sizeof(char) || sizeof(rsp->gp_state) == sizeof(short) || sizeof(rsp->gp_state) == sizeof(int) || sizeof(rsp->gp_state) == sizeof(long)) || sizeof(rsp->gp_state) == sizeof(long long))) __compiletime_assert_203(); } while (0); (*(const volatile typeof( _Generic((rsp->gp_state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rsp->gp_state))) *)&(rsp->gp_state)); });
}

extern void rcu_sync_init(struct rcu_sync *);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "./include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rcuwait writer;
 wait_queue_head_t waiters;
 atomic_t block;

 struct lockdep_map dep_map;

};
# 45 "./include/linux/percpu-rwsem.h"
extern bool __percpu_down_read(struct percpu_rw_semaphore *, bool);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 do { __might_sleep("include/linux/percpu-rwsem.h", 49); might_resched(); } while (0);

 lock_acquire(&sem->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0));

 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
# 62 "./include/linux/percpu-rwsem.h"
 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  __percpu_down_read(sem, false);




 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 bool ret = true;

 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ret = __percpu_down_read(sem, true);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);





 if (ret)
  lock_acquire(&sem->dep_map, 0, 1, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0));

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 lock_release(&sem->dep_map, (unsigned long)__builtin_return_address(0));

 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1)) {
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(-(typeof(*sem->read_count))(1))); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 } else {




  __asm__ __volatile__("": : :"memory");





  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(-(typeof(*sem->read_count))(1))); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  rcuwait_wake_up(&sem->writer);
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 141 "./include/linux/percpu-rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 lock_release(&sem->dep_map, ip);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 lock_acquire(&sem->dep_map, 0, 1, read, 1, ((void *)0), ip);
}
# 34 "./include/linux/fs.h" 2

# 1 "./include/linux/delayed_call.h" 1
# 10 "./include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 36 "./include/linux/fs.h" 2
# 1 "./include/linux/uuid.h" 1
# 11 "./include/linux/uuid.h"
# 1 "./include/uapi/linux/uuid.h" 1
# 23 "./include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "./include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 12 "./include/linux/uuid.h" 2




typedef struct {
 __u8 b[16];
} uuid_t;
# 33 "./include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void import_guid(guid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void export_guid(__u8 *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void import_uuid(uuid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void export_uuid(__u8 *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);
void generate_random_guid(unsigned char guid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 37 "./include/linux/fs.h" 2
# 1 "./include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 38 "./include/linux/fs.h" 2
# 1 "./include/linux/ioprio.h" 1





# 1 "./include/linux/sched/rt.h" 1






struct task_struct;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rt_prio(int prio)
{
 if (__builtin_expect(!!(prio < 100), 0))
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rt_task(struct task_struct *p)
{
 return rt_prio(p->prio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_is_realtime(struct task_struct *tsk)
{
 int policy = tsk->policy;

 if (policy == 1 || policy == 2)
  return true;
 if (policy == 6)
  return true;
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *rt_mutex_get_top_task(struct task_struct *p)
{
 return p->pi_top_task;
}
extern void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task);
extern void rt_mutex_adjust_pi(struct task_struct *p);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool tsk_is_pi_blocked(struct task_struct *tsk)
{
 return tsk->pi_blocked_on != ((void *)0);
}
# 58 "./include/linux/sched/rt.h"
extern void normalize_rt_tasks(void);
# 7 "./include/linux/ioprio.h" 2
# 1 "./include/linux/iocontext.h" 1








enum {
 ICQ_EXITED = 1 << 2,
 ICQ_DESTROYED = 1 << 3,
};
# 73 "./include/linux/iocontext.h"
struct io_cq {
 struct request_queue *q;
 struct io_context *ioc;







 union {
  struct list_head q_node;
  struct kmem_cache *__rcu_icq_cache;
 };
 union {
  struct hlist_node ioc_node;
  struct callback_head __rcu_head;
 };

 unsigned int flags;
};





struct io_context {
 atomic_long_t refcount;
 atomic_t active_ref;
 atomic_t nr_tasks;


 spinlock_t lock;

 unsigned short ioprio;

 struct xarray icq_tree;
 struct io_cq *icq_hint;
 struct hlist_head icq_list;

 struct work_struct release_work;
};
# 124 "./include/linux/iocontext.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_io_context_active(struct io_context *ioc)
{
 ({ int __ret_warn_on = !!(atomic_long_read(&ioc->refcount) <= 0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(atomic_read(&ioc->active_ref) <= 0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_long_inc(&ioc->refcount);
 atomic_inc(&ioc->active_ref);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ioc_task_link(struct io_context *ioc)
{
 get_io_context_active(ioc);

 ({ int __ret_warn_on = !!(atomic_read(&ioc->nr_tasks) <= 0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_inc(&ioc->nr_tasks);
}

struct task_struct;







struct io_context;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_io_context(struct io_context *ioc) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_io_context(struct task_struct *task) { }
# 8 "./include/linux/ioprio.h" 2

# 1 "./include/uapi/linux/ioprio.h" 1
# 27 "./include/uapi/linux/ioprio.h"
enum {
 IOPRIO_CLASS_NONE,
 IOPRIO_CLASS_RT,
 IOPRIO_CLASS_BE,
 IOPRIO_CLASS_IDLE,
};







enum {
 IOPRIO_WHO_PROCESS = 1,
 IOPRIO_WHO_PGRP,
 IOPRIO_WHO_USER,
};
# 10 "./include/linux/ioprio.h" 2
# 19 "./include/linux/ioprio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ioprio_valid(unsigned short ioprio)
{
 unsigned short class = (((ioprio) >> 13) & 0x07);

 return class > IOPRIO_CLASS_NONE && class <= IOPRIO_CLASS_IDLE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_nice_ioprio(struct task_struct *task)
{
 return (task_nice(task) + 20) / 5;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_nice_ioclass(struct task_struct *task)
{
 if (task->policy == 5)
  return IOPRIO_CLASS_IDLE;
 else if (task_is_realtime(task))
  return IOPRIO_CLASS_RT;
 else
  return IOPRIO_CLASS_BE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_current_ioprio(void)
{
 struct io_context *ioc = get_current()->io_context;

 if (ioc)
  return ioc->ioprio;
 return ((((IOPRIO_CLASS_BE) & 0x07) << 13) | ((4) & ((1UL << 13) - 1)));
}




extern int ioprio_best(unsigned short aprio, unsigned short bprio);

extern int set_task_ioprio(struct task_struct *task, int ioprio);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ioprio_check_cap(int ioprio)
{
 return -15;
}
# 39 "./include/linux/fs.h" 2
# 1 "./include/linux/fs_types.h" 1
# 71 "./include/linux/fs_types.h"
extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
extern unsigned char fs_umode_to_ftype(umode_t mode);
extern unsigned char fs_umode_to_dtype(umode_t mode);
# 40 "./include/linux/fs.h" 2


# 1 "./include/linux/mount.h" 1
# 20 "./include/linux/mount.h"
struct super_block;
struct vfsmount;
struct dentry;
struct mnt_namespace;
struct fs_context;
# 71 "./include/linux/mount.h"
struct vfsmount {
 struct dentry *mnt_root;
 struct super_block *mnt_sb;
 int mnt_flags;
 struct user_namespace *mnt_userns;
} ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *mnt_user_ns(const struct vfsmount *mnt)
{

 return ({ typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_204(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)) || sizeof(*&mnt->mnt_userns) == sizeof(long long))) __compiletime_assert_204(); } while (0); (*(const volatile typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) *)&(*&mnt->mnt_userns)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_205(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)))) __compiletime_assert_205(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&mnt->mnt_userns))___p1; });
}

struct file;
struct path;

extern int mnt_want_write(struct vfsmount *mnt);
extern int mnt_want_write_file(struct file *file);
extern void mnt_drop_write(struct vfsmount *mnt);
extern void mnt_drop_write_file(struct file *file);
extern void mntput(struct vfsmount *mnt);
extern struct vfsmount *mntget(struct vfsmount *mnt);
extern struct vfsmount *mnt_clone_internal(const struct path *path);
extern bool __mnt_is_readonly(struct vfsmount *mnt);
extern bool mnt_may_suid(struct vfsmount *mnt);

struct path;
extern struct vfsmount *clone_private_mount(const struct path *path);
extern int __mnt_want_write(struct vfsmount *);
extern void __mnt_drop_write(struct vfsmount *);

struct file_system_type;
extern struct vfsmount *fc_mount(struct fs_context *fc);
extern struct vfsmount *vfs_create_mount(struct fs_context *fc);
extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
          int flags, const char *name,
          void *data);
extern struct vfsmount *vfs_submount(const struct dentry *mountpoint,
         struct file_system_type *type,
         const char *name, void *data);

extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
extern void mark_mounts_for_expiry(struct list_head *mounts);

extern dev_t name_to_dev_t(const char *name);

extern unsigned int sysctl_mount_max;

extern bool path_is_mountpoint(const struct path *path);

extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
# 43 "./include/linux/fs.h" 2



# 1 "./include/uapi/linux/fs.h" 1
# 54 "./include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 287 "./include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 47 "./include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct io_comp_batch;
struct export_operations;
struct fiemap_extent_info;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;
struct fs_context;
struct fs_parameter_spec;
struct fileattr;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 223 "./include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};




# 1 "./include/linux/quota.h" 1
# 42 "./include/linux/quota.h"
# 1 "./include/uapi/linux/dqblk_xfs.h" 1
# 53 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;


 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s8 d_itimer_hi;
 __s8 d_btimer_hi;
 __s8 d_rtbtimer_hi;
 __s8 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 159 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 202 "./include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u16 qs_rtbwarnlimit;
 __u16 qs_pad3;
 __u32 qs_pad4;
 __u64 qs_pad2[7];
};
# 43 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v1.h" 1
# 44 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v2.h" 1








# 1 "./include/linux/dqblk_qtree.h" 1
# 18 "./include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "./include/linux/dqblk_v2.h" 2
# 45 "./include/linux/quota.h" 2



# 1 "./include/linux/projid.h" 1
# 17 "./include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}
# 65 "./include/linux/projid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kprojid_t make_kprojid(struct user_namespace *from, projid_t projid)
{
 return (kprojid_t){ projid };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) projid_t from_kprojid(struct user_namespace *to, kprojid_t kprojid)
{
 return __kprojid_val(kprojid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t kprojid)
{
 projid_t projid = from_kprojid(to, kprojid);
 if (projid == (projid_t)-1)
  projid = 65534;
 return projid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return true;
}
# 49 "./include/linux/quota.h" 2
# 1 "./include/uapi/linux/quota.h" 1
# 90 "./include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "./include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "./include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "./include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "./include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { ({ asm volatile("206" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "206" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("207" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "207" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { ({ asm volatile("208" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "208" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("209" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "209" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "./include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int info_dirty(struct mem_dqinfo *info)
{
 return test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 unsigned long stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats dqstats;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 294 "./include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 395 "./include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;
 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 464 "./include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 491 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_210(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(flag) == 0 || (((flag) & ((flag) - 1)) != 0)"))); if (!(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0)))) __compiletime_assert_210(); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype)
{
 return;
}


struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 245 "./include/linux/fs.h" 2
# 278 "./include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 291 "./include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;
struct readahead_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 326 "./include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 struct wait_page_queue *ki_waitq;

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 356 "./include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);
 void (*readahead)(struct readahead_control *);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);
# 456 "./include/linux/fs.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 struct rw_semaphore invalidate_lock;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;




 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) ;
# 491 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
{
 return xa_marked(&mapping->i_pages, tag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int i_mmap_trylock_write(struct address_space *mapping)
{
 return down_write_trylock(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_assert_locked(struct address_space *mapping)
{
 do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(&mapping->i_mmap_rwsem)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_assert_write_locked(struct address_space *mapping)
{
 do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held_type(&(&mapping->i_mmap_rwsem)->dep_map, (0)))); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_211(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(char) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(short) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(int) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long)) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long long))) __compiletime_assert_211(); } while (0); (*(const volatile typeof( _Generic(((&mapping->i_mmap.rb_root)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&mapping->i_mmap.rb_root)->rb_node))) *)&((&mapping->i_mmap.rb_root)->rb_node)); }) == ((void *)0));
}
# 548 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 586 "./include/linux/fs.h"
struct posix_acl;
# 595 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;






 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;
# 685 "./include/linux/fs.h"
 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;



 struct fscrypt_info *i_crypt_info;






 void *i_private;
} ;

struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}
# 771 "./include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write_nested(&inode->i_rwsem, subclass);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read_nested(&inode->i_rwsem, subclass);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void filemap_invalidate_lock(struct address_space *mapping)
{
 down_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void filemap_invalidate_unlock(struct address_space *mapping)
{
 up_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void filemap_invalidate_lock_shared(struct address_space *mapping)
{
 down_read(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int filemap_invalidate_trylock_shared(
     struct address_space *mapping)
{
 return down_read_trylock(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void filemap_invalidate_unlock_shared(
     struct address_space *mapping)
{
 up_read(&mapping->invalidate_lock);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);

void filemap_invalidate_lock_two(struct address_space *mapping1,
     struct address_space *mapping2);
void filemap_invalidate_unlock_two(struct address_space *mapping1,
       struct address_space *mapping2);
# 872 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) loff_t i_size_read(const struct inode *inode)
{
# 891 "./include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 913 "./include/linux/fs.h"
 inode->i_size = i_size;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};
# 944 "./include/linux/fs.h"
struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;
 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;




 void *private_data;





 struct address_space *f_mapping;
 errseq_t f_wb_err;
 errseq_t f_sb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 1053 "./include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
 bool (*lm_breaker_owns_lease)(struct file_lock *);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);


# 1 "./include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1090 "./include/linux/fs.h" 2
# 1108 "./include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1160 "./include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);

struct notifier_block;
extern int lease_register_notifier(struct notifier_block *);
extern void lease_unregister_notifier(struct notifier_block *);

struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1345 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1446 "./include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;



 const struct xattr_handler **s_xattr;

 const struct fscrypt_operations *s_cop;
 struct key *s_master_keys;
# 1496 "./include/linux/fs.h"
 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 time64_t s_time_min;
 time64_t s_time_max;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;





 atomic_long_t s_fsnotify_connectors;


 int s_readonly_remount;


 errseq_t s_wb_err;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock ;
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}
# 1635 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t kuid_into_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return make_kuid(mnt_userns, __kuid_val(kuid));
}
# 1649 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t kgid_into_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return make_kgid(mnt_userns, __kgid_val(kgid));
}
# 1663 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t i_uid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kuid_into_mnt(mnt_userns, inode->i_uid);
}
# 1677 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t i_gid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kgid_into_mnt(mnt_userns, inode->i_gid);
}
# 1691 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t kuid_from_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return (kuid_t){ from_kuid(mnt_userns, kuid) };
}
# 1705 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t kgid_from_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return (kgid_t){ from_kgid(mnt_userns, kgid) };
}
# 1723 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t mapped_fsuid(struct user_namespace *mnt_userns)
{
 return kuid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsuid; })));
}
# 1740 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t mapped_fsgid(struct user_namespace *mnt_userns)
{
 return kgid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsgid; })));
}
# 1753 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_fsuid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_uid = mapped_fsuid(mnt_userns);
}
# 1767 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_fsgid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_gid = mapped_fsgid(mnt_userns);
}
# 1784 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fsuidgid_has_mapping(struct super_block *sb,
     struct user_namespace *mnt_userns)
{
 struct user_namespace *s_user_ns = sb->s_user_ns;

 return kuid_has_mapping(s_user_ns, mapped_fsuid(mnt_userns)) &&
        kgid_has_mapping(s_user_ns, mapped_fsgid(mnt_userns));
}

extern struct timespec64 current_time(struct inode *inode);
# 1803 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __sb_end_write(struct super_block *sb, int level)
{
 percpu_up_read(sb->s_writers.rw_sem + level-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __sb_start_write(struct super_block *sb, int level)
{
 percpu_down_read(sb->s_writers.rw_sem + level - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __sb_start_write_trylock(struct super_block *sb, int level)
{
 return percpu_down_read_trylock(sb->s_writers.rw_sem + level - 1);
}
# 1830 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1842 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1854 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1878 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_WRITE);
}
# 1907 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1925 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_start_intwrite_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_FS);
}

bool inode_owner_or_capable(struct user_namespace *mnt_userns,
       const struct inode *inode);




int vfs_create(struct user_namespace *, struct inode *,
        struct dentry *, umode_t, bool);
int vfs_mkdir(struct user_namespace *, struct inode *,
       struct dentry *, umode_t);
int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *,
              umode_t, dev_t);
int vfs_symlink(struct user_namespace *, struct inode *,
  struct dentry *, const char *);
int vfs_link(struct dentry *, struct user_namespace *, struct inode *,
      struct dentry *, struct inode **);
int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *,
        struct inode **);
# 1966 "./include/linux/fs.h"
struct renamedata {
 struct user_namespace *old_mnt_userns;
 struct inode *old_dir;
 struct dentry *old_dentry;
 struct user_namespace *new_mnt_userns;
 struct inode *new_dir;
 struct dentry *new_dentry;
 struct inode **delegated_inode;
 unsigned int flags;
} ;

int vfs_rename(struct renamedata *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_whiteout(struct user_namespace *mnt_userns,
          struct inode *dir, struct dentry *dentry)
{
 return vfs_mknod(mnt_userns, dir, dentry, 0020000 | 0,
    0);
}

struct dentry *vfs_tmpfile(struct user_namespace *mnt_userns,
      struct dentry *dentry, umode_t mode, int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

int vfs_fchown(struct file *file, uid_t user, gid_t group);
int vfs_fchmod(struct file *file, umode_t mode);
int vfs_utimes(const struct path *path, struct timespec64 *times);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
# 2009 "./include/linux/fs.h"
void inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode,
        const struct inode *dir, umode_t mode);
extern bool may_open_dev(const struct path *path);







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};
# 2067 "./include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, struct io_comp_batch *,
   unsigned int flags);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct user_namespace *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int, bool);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct user_namespace *, struct inode *,struct dentry *,
         umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct user_namespace *, struct inode *,struct dentry *,
   const char *);
 int (*mkdir) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t,dev_t);
 int (*rename) (struct user_namespace *, struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct user_namespace *, struct dentry *,
   struct iattr *);
 int (*getattr) (struct user_namespace *, const struct path *,
   struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct user_namespace *, struct inode *,
   struct dentry *, umode_t);
 int (*set_acl)(struct user_namespace *, struct inode *,
         struct posix_acl *, int);
 int (*fileattr_set)(struct user_namespace *mnt_userns,
       struct dentry *dentry, struct fileattr *fa);
 int (*fileattr_get)(struct dentry *dentry, struct fileattr *fa);
} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);





 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 2268 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 2298 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool HAS_UNMAPPED_ID(struct user_namespace *mnt_userns,
       struct inode *inode)
{
 return !uid_valid(i_uid_into_mnt(mnt_userns, inode)) ||
        !gid_valid(i_gid_into_mnt(mnt_userns, inode));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = ki_hint_validate(file_write_hint(filp)),
  .ki_ioprio = get_current_ioprio(),
 };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kiocb_clone(struct kiocb *kiocb, struct kiocb *kiocb_src,
          struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = kiocb_src->ki_flags,
  .ki_hint = kiocb_src->ki_hint,
  .ki_ioprio = kiocb_src->ki_ioprio,
  .ki_pos = kiocb_src->ki_pos,
 };
}
# 2448 "./include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}
# 2468 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool inode_is_dirtytime_only(struct inode *inode)
{
 return (inode->i_state & ((1 << 11) | (1 << 3) |
      (1 << 5) | (1 << 4))) == (1 << 11);
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
int inode_update_time(struct inode *inode, struct timespec64 *time, int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;
# 2523 "./include/linux/fs.h"
 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_spec *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key invalidate_lock_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 2590 "./include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_lease(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__("": : :"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_deleg(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__("": : :"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_layout(struct inode *inode, bool wait)
{
 __asm__ __volatile__("": : :"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2714 "./include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *file_mnt_user_ns(struct file *file)
{
 return mnt_user_ns(file->f_path.mnt);
}
extern long vfs_truncate(const struct path *, loff_t);
int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
  unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(const struct path *,
       const char *, int, umode_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct file *file_open_root_mnt(struct vfsmount *mnt,
       const char *name, int flags, umode_t mode)
{
 return file_open_root(&(struct path){.mnt = mnt, .dentry = mnt->mnt_root},
         name, flags, mode);
}
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname_uflags(const char *, int);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;




extern struct super_block *blockdev_superblock;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return 0 && sb == blockdev_superblock;
}

void emergency_thaw_all(void);
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;
# 2792 "./include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}

extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

void invalidate_mapping_pagevec(struct address_space *mapping,
    unsigned long start, unsigned long end,
    unsigned long *nr_pagevec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern bool filemap_range_needs_writeback(struct address_space *,
       loff_t lstart, loff_t lend);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);
int filemap_fdatawrite_wbc(struct address_space *mapping,
      struct writeback_control *wbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int filemap_write_and_wait(struct address_space *mapping)
{
 return filemap_write_and_wait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 2894 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2911 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2924 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}
# 2936 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) errseq_t file_sample_sb_err(struct file *file)
{
 return errseq_sample(&file->f_path.dentry->d_sb->s_wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000002)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000004)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bmap(struct inode *inode, sector_t *block)
{
 return -22;
}


int notify_change(struct user_namespace *, struct dentry *,
    struct iattr *, struct inode **);
int inode_permission(struct user_namespace *, struct inode *, int);
int generic_permission(struct user_namespace *, struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int file_permission(struct file *file, int mask)
{
 return inode_permission(file_mnt_user_ns(file),
    file_inode(file), mask);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int path_permission(const struct path *path, int mask)
{
 return inode_permission(mnt_user_ns(path->mnt),
    d_inode(path->dentry), mask);
}
int __check_sticky(struct user_namespace *mnt_userns, struct inode *dir,
     struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool inode_wrong_type(const struct inode *inode, umode_t mode)
{
 return (inode->i_mode ^ mode) & 00170000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 sb_start_write(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return sb_start_write_trylock(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 3047 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_readcount_dec(struct inode *inode)
{
 do { if (__builtin_expect(!!(!atomic_read(&inode->i_readcount)), 0)) do { ({ asm volatile("212" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "212" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("213" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "213" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 atomic_dec(&inode->i_readcount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_readcount_inc(struct inode *inode)
{
 atomic_inc(&inode->i_readcount);
}
# 3090 "./include/linux/fs.h"
extern int do_pipe_flags(int *, int);

extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
ssize_t __kernel_read(struct file *file, void *buf, size_t count, loff_t *pos);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}
extern void d_mark_dontcache(struct inode *inode);

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern struct inode *find_inode_rcu(struct super_block *, unsigned long,
        int (*)(struct inode *, void *), void *);
extern struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);

extern void lockdep_annotate_inode_mutex_key(struct inode *inode);



extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);
# 3167 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_zero_ino(ino_t ino)
{
 return (u32)ino == 0;
}

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);
extern void inode_add_lru(struct inode *inode);

extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_write_check_limits(struct file *file, loff_t pos,
  loff_t *count);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
ssize_t filemap_read(struct kiocb *iocb, struct iov_iter *to,
  ssize_t already_read);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iocb_iter_read(struct file *file, struct kiocb *iocb,
      struct iov_iter *iter);
ssize_t vfs_iocb_iter_write(struct file *file, struct kiocb *iocb,
       struct iov_iter *iter);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);
# 3279 "./include/linux/fs.h"
void inode_dio_wait(struct inode *inode);
# 3288 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3300 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}




void dio_warn_stale_pagecache(struct file *filp);

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
void generic_fill_statx_attr(struct inode *inode, struct kstat *stat);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

int vfs_fstatat(int dfd, const char *filename, struct kstat *stat,
  int flags);
int vfs_fstat(int fd, struct kstat *stat);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_fstatat(-100, filename, stat, 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_fstatat(-100, name, stat, 0x100);
}

extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct user_namespace *, struct dentry *,
     struct iattr *);
extern int simple_getattr(struct user_namespace *, const struct path *,
     struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename_exchange(struct inode *old_dir, struct dentry *old_dentry,
      struct inode *new_dir, struct dentry *new_dentry);
extern int simple_rename(struct user_namespace *, struct inode *,
    struct dentry *, struct inode *, struct dentry *,
    unsigned int);
extern void simple_recursive_removal(struct dentry *,
                              void (*callback)(struct dentry *));
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern const struct address_space_operations ram_aops;
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);

extern void generic_set_encrypted_ci_d_ops(struct dentry *dentry);
# 3446 "./include/linux/fs.h"
int may_setattr(struct user_namespace *mnt_userns, struct inode *inode,
  unsigned int ia_valid);
int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
void setattr_copy(struct user_namespace *, struct inode *inode,
    const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_dax(const struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!0 || !vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= ( int) (( __kernel_rwf_t)0x00000010);
 if (file->f_flags & 00040000)
  res |= (1 << 17);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & (1 << 0))))
  res |= ( int) (( __kernel_rwf_t)0x00000002);
 if (file->f_flags & 04000000)
  res |= ( int) (( __kernel_rwf_t)0x00000004);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 int kiocb_flags = 0;


 do { __attribute__((__noreturn__)) extern void __compiletime_assert_214(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(__force int) RWF_SUPPORTED & IOCB_EVENTFD"))); if (!(!(( int) ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)) & (1 << 16)))) __compiletime_assert_214(); } while (0);

 if (!flags)
  return 0;
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  kiocb_flags |= (1 << 20);
 }
 kiocb_flags |= ( int) (flags & ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)));
 if (flags & (( __kernel_rwf_t)0x00000004))
  kiocb_flags |= ( int) (( __kernel_rwf_t)0x00000002);

 ki->ki_flags |= kiocb_flags;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3579 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) list_bdev_fs_names(char *buf, size_t size);
# 3610 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int check_sticky(struct user_namespace *mnt_userns,
          struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(mnt_userns, dir, inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= (1 << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & (1 << 4));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & (1 << 4));
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);
extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
      int advice);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 6 "./include/linux/highmem.h" 2


# 1 "./include/linux/mm.h" 1
# 18 "./include/linux/mm.h"
# 1 "./include/linux/mmap_lock.h" 1
# 14 "./include/linux/mmap_lock.h"
extern struct tracepoint __tracepoint_mmap_lock_start_locking;
extern struct tracepoint __tracepoint_mmap_lock_acquire_returned;
extern struct tracepoint __tracepoint_mmap_lock_released;



void __mmap_lock_do_trace_start_locking(struct mm_struct *mm, bool write);
void __mmap_lock_do_trace_acquire_returned(struct mm_struct *mm, bool write,
        bool success);
void __mmap_lock_do_trace_released(struct mm_struct *mm, bool write);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mmap_lock_trace_start_locking(struct mm_struct *mm,
         bool write)
{
 if (static_key_false(&(__tracepoint_mmap_lock_start_locking).key))
  __mmap_lock_do_trace_start_locking(mm, write);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mmap_lock_trace_acquire_returned(struct mm_struct *mm,
            bool write, bool success)
{
 if (static_key_false(&(__tracepoint_mmap_lock_acquire_returned).key))
  __mmap_lock_do_trace_acquire_returned(mm, write, success);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mmap_lock_trace_released(struct mm_struct *mm, bool write)
{
 if (static_key_false(&(__tracepoint_mmap_lock_released).key))
  __mmap_lock_do_trace_released(mm, write);
}
# 63 "./include/linux/mmap_lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_init_lock(struct mm_struct *mm)
{
 do { static struct lock_class_key __key; __init_rwsem((&mm->mmap_lock), "&mm->mmap_lock", &__key); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_write_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_write_lock_nested(struct mm_struct *mm, int subclass)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write_nested(&mm->mmap_lock, subclass);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmap_write_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mmap_write_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, true, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_write_unlock(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, true);
 up_write(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_write_downgrade(struct mm_struct *mm)
{
 __mmap_lock_trace_acquire_returned(mm, false, true);
 downgrade_write(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_read_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, false);
 down_read(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmap_read_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mmap_read_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, false, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_read_unlock(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, false);
 up_read(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_read_unlock_non_owner(struct mm_struct *mm)
{
 __mmap_lock_trace_released(mm, false);
 up_read_non_owner(&mm->mmap_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_assert_locked(struct mm_struct *mm)
{
 do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(&mm->mmap_lock)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
 do { if (__builtin_expect(!!(!rwsem_is_locked(&mm->mmap_lock)), 0)) { dump_mm(mm); do { ({ asm volatile("215" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "215" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("216" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "216" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmap_assert_write_locked(struct mm_struct *mm)
{
 do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held_type(&(&mm->mmap_lock)->dep_map, (0)))); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
 do { if (__builtin_expect(!!(!rwsem_is_locked(&mm->mmap_lock)), 0)) { dump_mm(mm); do { ({ asm volatile("217" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "217" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("218" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "218" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmap_lock_is_contended(struct mm_struct *mm)
{
 return rwsem_is_contended(&mm->mmap_lock);
}
# 19 "./include/linux/mm.h" 2


# 1 "./include/linux/percpu-refcount.h" 1
# 59 "./include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {







 PERCPU_REF_INIT_ATOMIC = 1 << 0,






 PERCPU_REF_INIT_DEAD = 1 << 1,




 PERCPU_REF_ALLOW_REINIT = 1 << 2,
};

struct percpu_ref_data {
 atomic_long_t count;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 bool allow_reinit:1;
 struct callback_head rcu;
 struct percpu_ref *ref;
};

struct percpu_ref {




 unsigned long percpu_count_ptr;







 struct percpu_ref_data *data;
};

int __attribute__((__warn_unused_result__)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_resurrect(struct percpu_ref *ref);
void percpu_ref_reinit(struct percpu_ref *ref);
bool percpu_ref_is_zero(struct percpu_ref *ref);
# 147 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, ((void *)0));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 174 "./include/linux/percpu-refcount.h"
 percpu_ptr = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_219(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ref->percpu_count_ptr) == sizeof(char) || sizeof(ref->percpu_count_ptr) == sizeof(short) || sizeof(ref->percpu_count_ptr) == sizeof(int) || sizeof(ref->percpu_count_ptr) == sizeof(long)) || sizeof(ref->percpu_count_ptr) == sizeof(long long))) __compiletime_assert_219(); } while (0); (*(const volatile typeof( _Generic((ref->percpu_count_ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ref->percpu_count_ptr))) *)&(ref->percpu_count_ptr)); });







 if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 198 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) nr) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) nr) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) nr) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(nr)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->data->count);

 rcu_read_unlock();
}
# 220 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 235 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_tryget_many(struct percpu_ref *ref,
       unsigned long nr)
{
 unsigned long *percpu_count;
 bool ret;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) nr) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) nr) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) nr) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(nr)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = atomic_long_add_unless(&ref->data->count, nr, 0);
 }

 rcu_read_unlock();

 return ret;
}
# 264 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_tryget(struct percpu_ref *ref)
{
 return percpu_ref_tryget_many(ref, 1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_tryget_live_rcu(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret = false;

 ({ int __ret_warn_on = !!(!rcu_read_lock_held()); __builtin_expect(!!(__ret_warn_on), 0); });

 if (__builtin_expect(!!(__ref_is_percpu(ref, &percpu_count)), 1)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = atomic_long_inc_not_zero(&ref->data->count);
 }
 return ret;
}
# 306 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 bool ret = false;

 rcu_read_lock();
 ret = percpu_ref_tryget_live_rcu(ref);
 rcu_read_unlock();
 return ret;
}
# 326 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) -(typeof(*percpu_count))(nr)) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) -(typeof(*percpu_count))(nr)) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -(typeof(*percpu_count))(nr)) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(-(typeof(*percpu_count))(nr))); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->data->count)), 0))
  ref->data->release(ref);

 rcu_read_unlock();
}
# 349 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 363 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 22 "./include/linux/mm.h" 2



# 1 "./include/linux/page_ext.h" 1






# 1 "./include/linux/stackdepot.h" 1
# 16 "./include/linux/stackdepot.h"
typedef u32 depot_stack_handle_t;

depot_stack_handle_t __stack_depot_save(unsigned long *entries,
     unsigned int nr_entries,
     gfp_t gfp_flags, bool can_alloc);

depot_stack_handle_t stack_depot_save(unsigned long *entries,
          unsigned int nr_entries, gfp_t gfp_flags);

unsigned int stack_depot_fetch(depot_stack_handle_t handle,
          unsigned long **entries);

int stack_depot_snprint(depot_stack_handle_t handle, char *buf, size_t size,
         int spaces);

void stack_depot_print(depot_stack_handle_t stack);


int stack_depot_init(void);
# 8 "./include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 size_t offset;
 size_t size;
 bool (*need)(void);
 void (*init)(void);
};
# 68 "./include/linux/page_ext.h"
struct page_ext;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgdat_page_ext_init(struct pglist_data *pgdat)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page_ext *lookup_page_ext(const struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ext_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ext_init_flatmem_late(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ext_init_flatmem(void)
{
}
# 26 "./include/linux/mm.h" 2


# 1 "./include/linux/page_ref.h" 1
# 10 "./include/linux/page_ref.h"
extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 41 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_ref_count(const struct page *page)
{
 return atomic_read(&page->_refcount);
}
# 87 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_ref_count(const struct folio *folio)
{
 return page_ref_count(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_count(const struct page *page)
{
 return folio_ref_count((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_count(struct page *page, int v)
{
 atomic_set(&page->_refcount, v);
 if (false)
  __page_ref_set(page, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_set_count(struct folio *folio, int v)
{
 set_page_count(&folio->page, v);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_ref_add(struct folio *folio, int nr)
{
 page_ref_add(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_ref_sub(struct folio *folio, int nr)
{
 page_ref_sub(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_ref_sub_return(struct page *page, int nr)
{
 int ret = atomic_sub_return(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_ref_sub_return(struct folio *folio, int nr)
{
 return page_ref_sub_return(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ref_inc(struct page *page)
{
 atomic_inc(&page->_refcount);
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_ref_inc(struct folio *folio)
{
 page_ref_inc(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ref_dec(struct page *page)
{
 atomic_dec(&page->_refcount);
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_ref_dec(struct folio *folio)
{
 page_ref_dec(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = atomic_sub_and_test(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_ref_sub_and_test(struct folio *folio, int nr)
{
 return page_ref_sub_and_test(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_ref_inc_return(struct page *page)
{
 int ret = atomic_inc_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, 1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_ref_inc_return(struct folio *folio)
{
 return page_ref_inc_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_ref_dec_and_test(struct page *page)
{
 int ret = atomic_dec_and_test(&page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_ref_dec_and_test(struct folio *folio)
{
 return page_ref_dec_and_test(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_ref_dec_return(struct page *page)
{
 int ret = atomic_dec_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_ref_dec_return(struct folio *folio)
{
 return page_ref_dec_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_ref_add_unless(struct page *page, int nr, int u)
{
 bool ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_ref_add_unless(struct folio *folio, int nr, int u)
{
 return page_ref_add_unless(&folio->page, nr, u);
}
# 261 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_try_get(struct folio *folio)
{
 return folio_ref_add_unless(folio, 1, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_ref_try_add_rcu(struct folio *folio, int count)
{
# 280 "./include/linux/page_ref.h"
 if (__builtin_expect(!!(!folio_ref_add_unless(folio, count, 0)), 0)) {

  return false;
 }

 return true;
}
# 311 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_try_get_rcu(struct folio *folio)
{
 return folio_ref_try_add_rcu(folio, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(atomic_cmpxchg(&page->_refcount, count, 0) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_ref_freeze(struct folio *folio, int count)
{
 return page_ref_freeze(&folio->page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_ref_unfreeze(struct page *page, int count)
{
 do { if (__builtin_expect(!!(page_count(page) != 0), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "page_count(page) != 0"")"); do { ({ asm volatile("220" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "220" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("221" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "221" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 do { if (__builtin_expect(!!(count == 0), 0)) do { ({ asm volatile("222" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "222" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("223" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "223" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);

 atomic_set_release(&page->_refcount, count);
 if (false)
  __page_ref_unfreeze(page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_ref_unfreeze(struct folio *folio, int count)
{
 page_ref_unfreeze(&folio->page, count);
}
# 29 "./include/linux/mm.h" 2
# 1 "./include/linux/memremap.h" 1




# 1 "./include/linux/ioport.h" 1
# 21 "./include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 134 "./include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_RESERVED = 7,
 IORES_DESC_SOFT_RESERVED = 8,
};




enum {
 IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
 IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
};
# 185 "./include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return r1->start <= r2->end && r1->end >= r2->start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
resource_intersection(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) > (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x224 = (r1->start); typeof(r2->start) __UNIQUE_ID___y225 = (r2->start); ((__UNIQUE_ID___x224) > (__UNIQUE_ID___y225) ? (__UNIQUE_ID___x224) : (__UNIQUE_ID___y225)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) < (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x226 = (r1->end); typeof(r2->end) __UNIQUE_ID___y227 = (r2->end); ((__UNIQUE_ID___x226) < (__UNIQUE_ID___y227) ? (__UNIQUE_ID___x226) : (__UNIQUE_ID___y227)); }));
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
resource_union(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) < (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x228 = (r1->start); typeof(r2->start) __UNIQUE_ID___y229 = (r2->start); ((__UNIQUE_ID___x228) < (__UNIQUE_ID___y229) ? (__UNIQUE_ID___x228) : (__UNIQUE_ID___y229)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) > (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x230 = (r1->end); typeof(r2->end) __UNIQUE_ID___y231 = (r2->end); ((__UNIQUE_ID___x230) > (__UNIQUE_ID___y231) ? (__UNIQUE_ID___x230) : (__UNIQUE_ID___y231)); }));
 return true;
}
# 269 "./include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);
# 288 "./include/linux/ioport.h"
struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern bool iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_mem_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(struct resource *, void *));

struct resource *devm_request_free_mem_region(struct device *dev,
  struct resource *base, unsigned long size);
struct resource *request_free_mem_region(struct resource *base,
  unsigned long size, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqresource_disabled(struct resource *res, u32 irq)
{
 res->start = irq;
 res->end = irq;
 res->flags |= 0x00000400 | 0x10000000 | 0x20000000;
}

extern struct address_space *iomem_get_mapping(void);
# 6 "./include/linux/memremap.h" 2


struct resource;
struct device;
# 19 "./include/linux/memremap.h"
struct vmem_altmap {
 unsigned long base_pfn;
 const unsigned long end_pfn;
 const unsigned long reserve;
 unsigned long free;
 unsigned long align;
 unsigned long alloc;
};
# 59 "./include/linux/memremap.h"
enum memory_type {

 MEMORY_DEVICE_PRIVATE = 1,
 MEMORY_DEVICE_FS_DAX,
 MEMORY_DEVICE_GENERIC,
 MEMORY_DEVICE_PCI_P2PDMA,
};

struct dev_pagemap_ops {





 void (*page_free)(struct page *page);




 void (*kill)(struct dev_pagemap *pgmap);




 void (*cleanup)(struct dev_pagemap *pgmap);





 vm_fault_t (*migrate_to_ram)(struct vm_fault *vmf);
};
# 110 "./include/linux/memremap.h"
struct dev_pagemap {
 struct vmem_altmap altmap;
 struct percpu_ref *ref;
 struct percpu_ref internal_ref;
 struct completion done;
 enum memory_type type;
 unsigned int flags;
 const struct dev_pagemap_ops *ops;
 void *owner;
 int nr_range;
 union {
  struct range range;
  struct range ranges[0];
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vmem_altmap *pgmap_altmap(struct dev_pagemap *pgmap)
{
 if (pgmap->flags & (1 << 0))
  return &pgmap->altmap;
 return ((void *)0);
}
# 146 "./include/linux/memremap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devm_memremap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{





 ({ int __ret_warn_on = !!(1); __builtin_expect(!!(__ret_warn_on), 0); });
 return ERR_PTR(-6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void devm_memunmap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dev_pagemap *get_dev_pagemap(unsigned long pfn,
  struct dev_pagemap *pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pgmap_pfn_valid(struct dev_pagemap *pgmap, unsigned long pfn)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vmem_altmap_offset(struct vmem_altmap *altmap)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmem_altmap_free(struct vmem_altmap *altmap,
  unsigned long nr_pfns)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long memremap_compat_align(void)
{
 return ((1UL) << 12);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_dev_pagemap(struct dev_pagemap *pgmap)
{
 if (pgmap)
  percpu_ref_put(pgmap->ref);
}
# 30 "./include/linux/mm.h" 2
# 1 "./include/linux/overflow.h" 1
# 49 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) __must_check_overflow(bool overflow)
{
 return __builtin_expect(!!(overflow), 0);
}
# 131 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 153 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 31 "./include/linux/mm.h" 2
# 1 "./include/linux/sizes.h" 1
# 32 "./include/linux/mm.h" 2

# 1 "./include/linux/pgtable.h" 1





# 1 "./arch/x86/include/asm/pgtable.h" 1
# 25 "./arch/x86/include/asm/pgtable.h"
# 1 "./arch/x86/include/asm/x86_init.h" 1






struct ghcb;
struct mpc_bus;
struct mpc_cpu;
struct pt_regs;
struct mpc_table;
struct cpuinfo_x86;
struct irq_domain;







struct x86_init_mpparse {
 void (*setup_ioapic_ids)(void);
 void (*find_smp_config)(void);
 void (*get_smp_config)(unsigned int early);
};
# 35 "./arch/x86/include/asm/x86_init.h"
struct x86_init_resources {
 void (*probe_roms)(void);
 void (*reserve_resources)(void);
 char *(*memory_setup)(void);
};
# 50 "./arch/x86/include/asm/x86_init.h"
struct x86_init_irqs {
 void (*pre_vector_init)(void);
 void (*intr_init)(void);
 void (*intr_mode_select)(void);
 void (*intr_mode_init)(void);
 struct irq_domain *(*create_pci_msi_domain)(void);
};






struct x86_init_oem {
 void (*arch_setup)(void);
 void (*banner)(void);
};
# 75 "./arch/x86/include/asm/x86_init.h"
struct x86_init_paging {
 void (*pagetable_init)(void);
};
# 86 "./arch/x86/include/asm/x86_init.h"
struct x86_init_timers {
 void (*setup_percpu_clockev)(void);
 void (*timer_init)(void);
 void (*wallclock_init)(void);
};





struct x86_init_iommu {
 int (*iommu_init)(void);
};
# 107 "./arch/x86/include/asm/x86_init.h"
struct x86_init_pci {
 int (*arch_init)(void);
 int (*init)(void);
 void (*init_irq)(void);
 void (*fixup_irqs)(void);
};
# 123 "./arch/x86/include/asm/x86_init.h"
struct x86_hyper_init {
 void (*init_platform)(void);
 void (*guest_late_init)(void);
 bool (*x2apic_available)(void);
 bool (*msi_ext_dest_id)(void);
 void (*init_mem_mapping)(void);
 void (*init_after_bootmem)(void);
};







struct x86_init_acpi {
 void (*set_root_pointer)(u64 addr);
 u64 (*get_root_pointer)(void);
 void (*reduced_hw_early_init)(void);
};





struct x86_init_ops {
 struct x86_init_resources resources;
 struct x86_init_mpparse mpparse;
 struct x86_init_irqs irqs;
 struct x86_init_oem oem;
 struct x86_init_paging paging;
 struct x86_init_timers timers;
 struct x86_init_iommu iommu;
 struct x86_init_pci pci;
 struct x86_hyper_init hyper;
 struct x86_init_acpi acpi;
};






struct x86_cpuinit_ops {
 void (*setup_percpu_clockev)(void);
 void (*early_percpu_clock_init)(void);
 void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node);
};

struct timespec64;
# 193 "./arch/x86/include/asm/x86_init.h"
struct x86_legacy_devices {
 int pnpbios;
};
# 206 "./arch/x86/include/asm/x86_init.h"
enum x86_legacy_i8042_state {
 X86_LEGACY_I8042_PLATFORM_ABSENT,
 X86_LEGACY_I8042_FIRMWARE_ABSENT,
 X86_LEGACY_I8042_EXPECTED_PRESENT,
};
# 224 "./arch/x86/include/asm/x86_init.h"
struct x86_legacy_features {
 enum x86_legacy_i8042_state i8042;
 int rtc;
 int warm_reset;
 int no_vga;
 int reserve_bios_regions;
 struct x86_legacy_devices devices;
};
# 248 "./arch/x86/include/asm/x86_init.h"
struct x86_hyper_runtime {
 void (*pin_vcpu)(int cpu);
 void (*sev_es_hcall_prepare)(struct ghcb *ghcb, struct pt_regs *regs);
 bool (*sev_es_hcall_finish)(struct ghcb *ghcb, struct pt_regs *regs);
};
# 275 "./arch/x86/include/asm/x86_init.h"
struct x86_platform_ops {
 unsigned long (*calibrate_cpu)(void);
 unsigned long (*calibrate_tsc)(void);
 void (*get_wallclock)(struct timespec64 *ts);
 int (*set_wallclock)(const struct timespec64 *ts);
 void (*iommu_shutdown)(void);
 bool (*is_untracked_pat_range)(u64 start, u64 end);
 void (*nmi_init)(void);
 unsigned char (*get_nmi_reason)(void);
 void (*save_sched_clock_state)(void);
 void (*restore_sched_clock_state)(void);
 void (*apic_post_init)(void);
 struct x86_legacy_features legacy;
 void (*set_legacy_features)(void);
 struct x86_hyper_runtime hyper;
};

struct pci_dev;

struct x86_msi_ops {
 void (*restore_msi_irqs)(struct pci_dev *dev);
};

struct x86_apic_ops {
 unsigned int (*io_apic_read) (unsigned int apic, unsigned int reg);
 void (*restore)(void);
};

extern struct x86_init_ops x86_init;
extern struct x86_cpuinit_ops x86_cpuinit;
extern struct x86_platform_ops x86_platform;
extern struct x86_msi_ops x86_msi;
extern struct x86_apic_ops x86_apic_ops;

extern void x86_early_init_platform_quirks(void);
extern void x86_init_noop(void);
extern void x86_init_uint_noop(unsigned int unused);
extern bool bool_x86_init_noop(void);
extern void x86_op_int_noop(int cpu);
extern bool x86_pnpbios_disabled(void);
# 26 "./arch/x86/include/asm/pgtable.h" 2
# 1 "./arch/x86/include/asm/pkru.h" 1
# 12 "./arch/x86/include/asm/pkru.h"
extern u32 init_pkru_value;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pkru_allows_read(u32 pkru, u16 pkey)
{
 int pkru_pkey_bits = pkey * 2;
 return !(pkru & (0x1 << pkru_pkey_bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pkru_allows_write(u32 pkru, u16 pkey)
{
 int pkru_pkey_bits = pkey * 2;




 return !(pkru & ((0x1|0x2) << pkru_pkey_bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 read_pkru(void)
{
 if ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )))
  return rdpkru();
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_pkru(u32 pkru)
{
 if (!(__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )))
  return;




 if (pkru != rdpkru())
  wrpkru(pkru);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pkru_write_default(void)
{
 if (!(__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )))
  return;

 wrpkru(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_232(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(init_pkru_value) == sizeof(char) || sizeof(init_pkru_value) == sizeof(short) || sizeof(init_pkru_value) == sizeof(int) || sizeof(init_pkru_value) == sizeof(long)) || sizeof(init_pkru_value) == sizeof(long long))) __compiletime_assert_232(); } while (0); (*(const volatile typeof( _Generic((init_pkru_value), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (init_pkru_value))) *)&(init_pkru_value)); }));
}
# 27 "./arch/x86/include/asm/pgtable.h" 2
# 1 "./arch/x86/include/asm/fpu/api.h" 1
# 29 "./arch/x86/include/asm/fpu/api.h"
extern void kernel_fpu_begin_mask(unsigned int kfpu_mask);
extern void kernel_fpu_end(void);
extern bool irq_fpu_usable(void);
extern void fpregs_mark_activate(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_fpu_begin(void)
{





 kernel_fpu_begin_mask((((1UL)) << (1)));







}
# 69 "./arch/x86/include/asm/fpu/api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fpregs_lock(void)
{
 if (!0)
  local_bh_disable();
 else
  do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fpregs_unlock(void)
{
 if (!0)
  local_bh_enable();
 else
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}


extern void fpregs_assert_state_consistent(void);







extern void switch_fpu_return(void);
# 103 "./arch/x86/include/asm/fpu/api.h"
extern int cpu_has_xfeatures(u64 xfeatures_mask, const char **feature_name);
# 112 "./arch/x86/include/asm/fpu/api.h"
extern int fpu__exception_code(struct fpu *fpu, int trap_nr);
extern void fpu_sync_fpstate(struct fpu *fpu);
extern void fpu_reset_from_exception_fixup(void);


extern void fpu__init_cpu(void);
extern void fpu__init_system(struct cpuinfo_x86 *c);
extern void fpu__init_check_bugs(void);
extern void fpu__resume_cpu(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fpstate_init_soft(struct swregs_state *soft) {}



extern __attribute__((section(".data" ""))) __typeof__(struct fpu *) fpu_fpregs_owner_ctx;



extern void fpstate_free(struct fpu *fpu);





extern void fpstate_clear_xstate_component(struct fpstate *fps, unsigned int xfeature);


extern bool fpu_alloc_guest_fpstate(struct fpu_guest *gfpu);
extern void fpu_free_guest_fpstate(struct fpu_guest *gfpu);
extern int fpu_swap_kvm_fpstate(struct fpu_guest *gfpu, bool enter_guest);

extern void fpu_copy_guest_fpstate_to_uabi(struct fpu_guest *gfpu, void *buf, unsigned int size, u32 pkru);
extern int fpu_copy_uabi_to_guest_fpstate(struct fpu_guest *gfpu, const void *buf, u64 xcr0, u32 *vpkru);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fpstate_set_confidential(struct fpu_guest *gfpu)
{
 gfpu->fpstate->is_confidential = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fpstate_is_confidential(struct fpu_guest *gfpu)
{
 return gfpu->fpstate->is_confidential;
}


struct task_struct;
extern long fpu_xstate_prctl(struct task_struct *tsk, int option, unsigned long arg2);
# 28 "./arch/x86/include/asm/pgtable.h" 2
# 1 "./include/asm-generic/pgtable_uffd.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int pte_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int pmd_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pmd_t pmd_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pmd_t pmd_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_swp_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int pte_swp_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_swp_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_swp_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}
# 29 "./arch/x86/include/asm/pgtable.h" 2

extern pgd_t early_top_pgt[512];
bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) __early_make_pgtable(unsigned long address, pmdval_t pmd);

void ptdump_walk_pgd_level(struct seq_file *m, struct mm_struct *mm);
void ptdump_walk_pgd_level_debugfs(struct seq_file *m, struct mm_struct *mm,
       bool user);
void ptdump_walk_pgd_level_checkwx(void);
void ptdump_walk_user_pgd_level_checkwx(void);
# 51 "./arch/x86/include/asm/pgtable.h"
extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)]
          ;


extern spinlock_t pgd_lock;
extern struct list_head pgd_list;

extern struct mm_struct *pgd_page_get_mm(struct page *page);

extern pmdval_t early_pmd_flags;
# 124 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_young(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_dirty(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_young(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_dirty(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_young(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_write(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_huge(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 7);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_global(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 8);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_exec(pte_t pte)
{
 return !(pte_flags(pte) & (((pteval_t)(1)) << 63));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_special(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 9);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 protnone_mask(u64 val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pte_pfn(pte_t pte)
{
 phys_addr_t pfn = native_pte_val(pte);
 pfn ^= protnone_mask(pfn);
 return (pfn & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))))) >> 12;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pmd_pfn(pmd_t pmd)
{
 phys_addr_t pfn = native_pmd_val(pmd);
 pfn ^= protnone_mask(pfn);
 return (pfn & pmd_pfn_mask(pmd)) >> 12;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pud_pfn(pud_t pud)
{
 phys_addr_t pfn = native_pud_val(pud);
 pfn ^= protnone_mask(pfn);
 return (pfn & pud_pfn_mask(pud)) >> 12;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long p4d_pfn(p4d_t p4d)
{
 return (native_p4d_val(p4d) & p4d_pfn_mask(p4d)) >> 12;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pgd_pfn(pgd_t pgd)
{
 return (native_pgd_val(pgd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))))) >> 12;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_large(p4d_t p4d)
{

 return 0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_large(pmd_t pte)
{
 return pmd_flags(pte) & (((pteval_t)(1)) << 7);
}
# 274 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_set_flags(pte_t pte, pteval_t set)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v | set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clear_flags(pte_t pte, pteval_t clear)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v & ~clear);
}
# 305 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkclean(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 6));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkold(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 5));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_wrprotect(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkexec(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 63));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkdirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkyoung(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 5));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkwrite(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkhuge(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 7));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clrhuge(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 7));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkglobal(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 8));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clrglobal(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 8));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkspecial(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 9));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkdevmap(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 9)|(((u64)(1)) << 58));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_set_flags(pmd_t pmd, pmdval_t set)
{
 pmdval_t v = native_pmd_val(pmd);

 return native_make_pmd(v | set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_clear_flags(pmd_t pmd, pmdval_t clear)
{
 pmdval_t v = native_pmd_val(pmd);

 return native_make_pmd(v & ~clear);
}
# 401 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkold(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkclean(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 6));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_wrprotect(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkdirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkdevmap(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((u64)(1)) << 58));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkhuge(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 7));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkyoung(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkwrite(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_set_flags(pud_t pud, pudval_t set)
{
 pudval_t v = native_pud_val(pud);

 return native_make_pud(v | set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_clear_flags(pud_t pud, pudval_t clear)
{
 pudval_t v = native_pud_val(pud);

 return native_make_pud(v & ~clear);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkold(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(1)) << 5));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkclean(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(1)) << 6));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_wrprotect(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(1)) << 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkdirty(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkdevmap(pud_t pud)
{
 return pud_set_flags(pud, (((u64)(1)) << 58));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkhuge(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 7));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkyoung(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 5));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkwrite(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 1));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_soft_dirty(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_soft_dirty(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mksoft_dirty(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_clear_soft_dirty(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(0))));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t massage_pgprot(pgprot_t pgprot)
{
 pgprotval_t protval = ((pgprot).pgprot);

 if (protval & (((pteval_t)(1)) << 0))
  protval &= __supported_pte_mask;

 return protval;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t check_pgprot(pgprot_t pgprot)
{
 pgprotval_t massaged_val = massage_pgprot(pgprot);



 ({ int __ret_warn_on = !!(((pgprot).pgprot) != massaged_val); ({ if (0) ({ do {} while (0); _printk("attempted to set unsupported pgprot: %016llx " "bits: %016llx supported: %016llx\n", (u64)((pgprot).pgprot), (u64)((pgprot).pgprot) ^ massaged_val, (u64)__supported_pte_mask); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });







 return massaged_val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
{
 phys_addr_t pfn = (phys_addr_t)page_nr << 12;
 pfn ^= protnone_mask(((pgprot).pgprot));
 pfn &= ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
 return native_make_pte(pfn | check_pgprot(pgprot));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
{
 phys_addr_t pfn = (phys_addr_t)page_nr << 12;
 pfn ^= protnone_mask(((pgprot).pgprot));
 pfn &= (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
 return native_make_pmd(pfn | check_pgprot(pgprot));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pfn_pud(unsigned long page_nr, pgprot_t pgprot)
{
 phys_addr_t pfn = (phys_addr_t)page_nr << 12;
 pfn ^= protnone_mask(((pgprot).pgprot));
 pfn &= (((signed long)(~(((1UL) << 30)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
 return native_make_pud(pfn | check_pgprot(pgprot));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkinvalid(pmd_t pmd)
{
 return pfn_pmd(pmd_pfn(pmd),
        ((pgprot_t) { (pmd_flags(pmd) & ~((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 8))) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 flip_protnone_guard(u64 oldval, u64 val, u64 mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 pteval_t val = native_pte_val(pte), oldval = val;





 val &= (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
 val |= check_pgprot(newprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
 val = flip_protnone_guard(oldval, val, ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))));
 return native_make_pte(val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 pmdval_t val = native_pmd_val(pmd), oldval = val;

 val &= ((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0)))) | (((pteval_t)(1)) << 7));
 val |= check_pgprot(newprot) & ~((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0)))) | (((pteval_t)(1)) << 7));
 val = flip_protnone_guard(oldval, val, (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
 return native_make_pmd(val);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 pgprotval_t preservebits = ((oldprot).pgprot) & (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
 pgprotval_t addbits = ((newprot).pgprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
 return ((pgprot_t) { (preservebits | addbits) } );
}
# 649 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t arch_filter_pgprot(pgprot_t prot)
{
 return ((pgprot_t) { (massage_pgprot(prot)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_new_memtype_allowed(u64 paddr, unsigned long size,
      enum page_cache_mode pcm,
      enum page_cache_mode new_pcm)
{



 if (x86_platform.is_untracked_pat_range(paddr, paddr + size))
  return 1;
# 672 "./arch/x86/include/asm/pgtable.h"
 if ((pcm == _PAGE_CACHE_MODE_UC_MINUS &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WC &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WT &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WT &&
      new_pcm == _PAGE_CACHE_MODE_WC)) {
  return 0;
 }

 return 1;
}

pmd_t *populate_extra_pmd(unsigned long vaddr);
pte_t *populate_extra_pte(unsigned long vaddr);
# 704 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t pti_set_user_pgtbl(pgd_t *pgdp, pgd_t pgd)
{
 return pgd;
}
# 716 "./arch/x86/include/asm/pgtable.h"
# 1 "./arch/x86/include/asm/pgtable_64.h" 1
# 17 "./arch/x86/include/asm/pgtable_64.h"
# 1 "./arch/x86/include/asm/fixmap.h" 1
# 17 "./arch/x86/include/asm/fixmap.h"
# 1 "./arch/x86/include/generated/asm/kmap_size.h" 1
# 18 "./arch/x86/include/asm/fixmap.h" 2
# 36 "./arch/x86/include/asm/fixmap.h"
# 1 "./arch/x86/include/asm/apicdef.h" 1
# 179 "./arch/x86/include/asm/apicdef.h"
struct local_apic {

        struct { unsigned int __reserved[4]; } __reserved_01;

        struct { unsigned int __reserved[4]; } __reserved_02;

        struct {
  unsigned int __reserved_1 : 24,
   phys_apic_id : 4,
   __reserved_2 : 4;
  unsigned int __reserved[3];
 } id;

        const
 struct {
  unsigned int version : 8,
   __reserved_1 : 8,
   max_lvt : 8,
   __reserved_2 : 8;
  unsigned int __reserved[3];
 } version;

        struct { unsigned int __reserved[4]; } __reserved_03;

        struct { unsigned int __reserved[4]; } __reserved_04;

        struct { unsigned int __reserved[4]; } __reserved_05;

        struct { unsigned int __reserved[4]; } __reserved_06;

        struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } tpr;

        const
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } apr;

        const
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } ppr;

        struct {
  unsigned int eoi;
  unsigned int __reserved[3];
 } eoi;

        struct { unsigned int __reserved[4]; } __reserved_07;

        struct {
  unsigned int __reserved_1 : 24,
   logical_dest : 8;
  unsigned int __reserved_2[3];
 } ldr;

        struct {
  unsigned int __reserved_1 : 28,
   model : 4;
  unsigned int __reserved_2[3];
 } dfr;

        struct {
  unsigned int spurious_vector : 8,
   apic_enabled : 1,
   focus_cpu : 1,
   __reserved_2 : 22;
  unsigned int __reserved_3[3];
 } svr;

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } isr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } tmr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } irr [8];

        union {
  struct {
   unsigned int send_cs_error : 1,
    receive_cs_error : 1,
    send_accept_error : 1,
    receive_accept_error : 1,
    __reserved_1 : 1,
    send_illegal_vector : 1,
    receive_illegal_vector : 1,
    illegal_register_address : 1,
    __reserved_2 : 24;
   unsigned int __reserved_3[3];
  } error_bits;
  struct {
   unsigned int errors;
   unsigned int __reserved_3[3];
  } all_errors;
 } esr;

        struct { unsigned int __reserved[4]; } __reserved_08;

        struct { unsigned int __reserved[4]; } __reserved_09;

        struct { unsigned int __reserved[4]; } __reserved_10;

        struct { unsigned int __reserved[4]; } __reserved_11;

        struct { unsigned int __reserved[4]; } __reserved_12;

        struct { unsigned int __reserved[4]; } __reserved_13;

        struct { unsigned int __reserved[4]; } __reserved_14;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   destination_mode : 1,
   delivery_status : 1,
   __reserved_1 : 1,
   level : 1,
   trigger : 1,
   __reserved_2 : 2,
   shorthand : 2,
   __reserved_3 : 12;
  unsigned int __reserved_4[3];
 } icr1;

        struct {
  union {
   unsigned int __reserved_1 : 24,
    phys_dest : 4,
    __reserved_2 : 4;
   unsigned int __reserved_3 : 24,
    logical_dest : 8;
  } dest;
  unsigned int __reserved_4[3];
 } icr2;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   timer_mode : 1,
   __reserved_3 : 14;
  unsigned int __reserved_4[3];
 } lvt_timer;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_thermal;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_pc;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 } lvt_lint0;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 } lvt_lint1;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_error;

        struct {
  unsigned int initial_count;
  unsigned int __reserved_2[3];
 } timer_icr;

        const
 struct {
  unsigned int curr_count;
  unsigned int __reserved_2[3];
 } timer_ccr;

        struct { unsigned int __reserved[4]; } __reserved_16;

        struct { unsigned int __reserved[4]; } __reserved_17;

        struct { unsigned int __reserved[4]; } __reserved_18;

        struct { unsigned int __reserved[4]; } __reserved_19;

        struct {
  unsigned int divisor : 4,
   __reserved_1 : 28;
  unsigned int __reserved_2[3];
 } timer_dcr;

        struct { unsigned int __reserved[4]; } __reserved_20;

} __attribute__ ((packed));
# 435 "./arch/x86/include/asm/apicdef.h"
enum apic_delivery_modes {
 APIC_DELIVERY_MODE_FIXED = 0,
 APIC_DELIVERY_MODE_LOWESTPRIO = 1,
 APIC_DELIVERY_MODE_SMI = 2,
 APIC_DELIVERY_MODE_NMI = 4,
 APIC_DELIVERY_MODE_INIT = 5,
 APIC_DELIVERY_MODE_EXTINT = 7,
};
# 37 "./arch/x86/include/asm/fixmap.h" 2





# 1 "./arch/x86/include/uapi/asm/vsyscall.h" 1




enum vsyscall_num {
 __NR_vgettimeofday,
 __NR_vtime,
 __NR_vgetcpu,
};
# 43 "./arch/x86/include/asm/fixmap.h" 2
# 81 "./arch/x86/include/asm/fixmap.h"
enum fixed_addresses {




 VSYSCALL_PAGE = (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (-10UL << 20)) >> 12,


 FIX_DBGP_BASE,
 FIX_EARLYCON_MEM_BASE,




 FIX_APIC_BASE,


 FIX_IO_APIC_BASE_0,
 FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + 128 - 1,


 FIX_KMAP_BEGIN,
 FIX_KMAP_END = FIX_KMAP_BEGIN + (33 * 1) - 1,
# 118 "./arch/x86/include/asm/fixmap.h"
 __end_of_permanent_fixed_addresses,
# 130 "./arch/x86/include/asm/fixmap.h"
 FIX_BTMAP_END =
  (__end_of_permanent_fixed_addresses ^
   (__end_of_permanent_fixed_addresses + (64 * 8) - 1)) &
  -512
  ? __end_of_permanent_fixed_addresses + (64 * 8) -
    (__end_of_permanent_fixed_addresses & ((64 * 8) - 1))
  : __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + (64 * 8) - 1,






 __end_of_fixed_addresses
};


extern void reserve_top_address(unsigned long reserve);






extern int fixmaps_set;

extern pte_t *pkmap_page_table;

void __native_set_fixmap(enum fixed_addresses idx, pte_t pte);
void native_set_fixmap(unsigned idx,
         phys_addr_t phys, pgprot_t flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __set_fixmap(enum fixed_addresses idx,
    phys_addr_t phys, pgprot_t flags)
{
 native_set_fixmap(idx, phys, flags);
}
# 182 "./arch/x86/include/asm/fixmap.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) *early_memremap_encrypted(resource_size_t phys_addr,
          unsigned long size);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) *early_memremap_encrypted_wp(resource_size_t phys_addr,
      unsigned long size);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) *early_memremap_decrypted(resource_size_t phys_addr,
          unsigned long size);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) *early_memremap_decrypted_wp(resource_size_t phys_addr,
      unsigned long size);

# 1 "./include/asm-generic/fixmap.h" 1
# 30 "./include/asm-generic/fixmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long fix_to_virt(const unsigned int idx)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_233(void) __attribute__((__error__("BUILD_BUG_ON failed: " "idx >= __end_of_fixed_addresses"))); if (!(!(idx >= __end_of_fixed_addresses))) __compiletime_assert_233(); } while (0);
 return (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((idx) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long virt_to_fix(const unsigned long vaddr)
{
 do { if (__builtin_expect(!!(vaddr >= ((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) || vaddr < (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (__end_of_permanent_fixed_addresses << 12))), 0)) do { ({ asm volatile("234" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "234" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("235" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "235" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 return ((((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}
# 192 "./arch/x86/include/asm/fixmap.h" 2




void __early_set_fixmap(enum fixed_addresses idx,
   phys_addr_t phys, pgprot_t flags);
# 18 "./arch/x86/include/asm/pgtable_64.h" 2

extern p4d_t level4_kernel_pgt[512];
extern p4d_t level4_ident_pgt[512];
extern pud_t level3_kernel_pgt[512];
extern pud_t level3_ident_pgt[512];
extern pmd_t level2_kernel_pgt[512];
extern pmd_t level2_fixmap_pgt[512];
extern pmd_t level2_ident_pgt[512];
extern pte_t level1_fixmap_pgt[512 * ((33 * ((1 + 511) / 512)) + 2)];
extern pgd_t init_top_pgt[];



extern void paging_init(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sync_initial_page_table(void) { }
# 54 "./arch/x86/include/asm/pgtable_64.h"
struct mm_struct;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mm_p4d_folded(struct mm_struct *mm)
{
 return !(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) ));
}

void set_pte_vaddr_p4d(p4d_t *p4d_page, unsigned long vaddr, pte_t new_pte);
void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pte(pte_t *ptep, pte_t pte)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_236(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_236(); } while (0); do { *(volatile typeof(*ptep) *)&(*ptep) = (pte); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 native_set_pte(ptep, native_make_pte(0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pte_atomic(pte_t *ptep, pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_237(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pmdp) == sizeof(char) || sizeof(*pmdp) == sizeof(short) || sizeof(*pmdp) == sizeof(int) || sizeof(*pmdp) == sizeof(long)) || sizeof(*pmdp) == sizeof(long long))) __compiletime_assert_237(); } while (0); do { *(volatile typeof(*pmdp) *)&(*pmdp) = (pmd); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pmd_clear(pmd_t *pmd)
{
 native_set_pmd(pmd, native_make_pmd(0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t native_ptep_get_and_clear(pte_t *xp)
{





 pte_t ret = *xp;
 native_pte_clear(((void *)0), 0, xp);
 return ret;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t native_pmdp_get_and_clear(pmd_t *xp)
{





 pmd_t ret = *xp;
 native_pmd_clear(xp);
 return ret;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pud(pud_t *pudp, pud_t pud)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_238(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pudp) == sizeof(char) || sizeof(*pudp) == sizeof(short) || sizeof(*pudp) == sizeof(int) || sizeof(*pudp) == sizeof(long)) || sizeof(*pudp) == sizeof(long long))) __compiletime_assert_238(); } while (0); do { *(volatile typeof(*pudp) *)&(*pudp) = (pud); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pud_clear(pud_t *pud)
{
 native_set_pud(pud, native_make_pud(0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t native_pudp_get_and_clear(pud_t *xp)
{






 pud_t ret = *xp;

 native_pud_clear(xp);
 return ret;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_p4d(p4d_t *p4dp, p4d_t p4d)
{
 pgd_t pgd;

 if ((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) || !0) {
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_239(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p4dp) == sizeof(char) || sizeof(*p4dp) == sizeof(short) || sizeof(*p4dp) == sizeof(int) || sizeof(*p4dp) == sizeof(long)) || sizeof(*p4dp) == sizeof(long long))) __compiletime_assert_239(); } while (0); do { *(volatile typeof(*p4dp) *)&(*p4dp) = (p4d); } while (0); } while (0);
  return;
 }

 pgd = native_make_pgd(native_p4d_val(p4d));
 pgd = pti_set_user_pgtbl((pgd_t *)p4dp, pgd);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_240(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p4dp) == sizeof(char) || sizeof(*p4dp) == sizeof(short) || sizeof(*p4dp) == sizeof(int) || sizeof(*p4dp) == sizeof(long)) || sizeof(*p4dp) == sizeof(long long))) __compiletime_assert_240(); } while (0); do { *(volatile typeof(*p4dp) *)&(*p4dp) = (native_make_p4d(native_pgd_val(pgd))); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_p4d_clear(p4d_t *p4d)
{
 native_set_p4d(p4d, native_make_p4d(0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_241(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pgdp) == sizeof(char) || sizeof(*pgdp) == sizeof(short) || sizeof(*pgdp) == sizeof(int) || sizeof(*pgdp) == sizeof(long)) || sizeof(*pgdp) == sizeof(long long))) __compiletime_assert_241(); } while (0); do { *(volatile typeof(*pgdp) *)&(*pgdp) = (pti_set_user_pgtbl(pgdp, pgd)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pgd_clear(pgd_t *pgd)
{
 native_set_pgd(pgd, native_make_pgd(0));
}
# 241 "./arch/x86/include/asm/pgtable_64.h"
extern int kern_addr_valid(unsigned long addr);
extern void cleanup_highmap(void);
# 258 "./arch/x86/include/asm/pgtable_64.h"
extern void init_extra_mapping_uc(unsigned long phys, unsigned long size);
extern void init_extra_mapping_wb(unsigned long phys, unsigned long size);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gup_fast_permitted(unsigned long start, unsigned long end)
{
 if (end >> ((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) ? 56 : 47))
  return false;
 return true;
}

# 1 "./arch/x86/include/asm/pgtable-invert.h" 1
# 16 "./arch/x86/include/asm/pgtable-invert.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pte_needs_invert(u64 val)
{
 return val && !(val & (((pteval_t)(1)) << 0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 protnone_mask(u64 val)
{
 return __pte_needs_invert(val) ? ~0ull : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 flip_protnone_guard(u64 oldval, u64 val, u64 mask)
{





 if (__pte_needs_invert(oldval) != __pte_needs_invert(val))
  val = (val & ~mask) | (~val & mask);
 return val;
}
# 270 "./arch/x86/include/asm/pgtable_64.h" 2
# 717 "./arch/x86/include/asm/pgtable.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_none(pte_t pte)
{
 return !(pte.pte & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5))));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_same(pte_t a, pte_t b)
{
 return a.pte == b.pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_present(pte_t a)
{
 return pte_flags(a) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_devmap(pte_t a)
{
 return (pte_flags(a) & (((u64)(1)) << 58)) == (((u64)(1)) << 58);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pte_accessible(struct mm_struct *mm, pte_t a)
{
 if (pte_flags(a) & (((pteval_t)(1)) << 0))
  return true;

 if ((pte_flags(a) & (((pteval_t)(1)) << 8)) &&
   mm_tlb_flush_pending(mm))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_present(pmd_t pmd)
{






 return pmd_flags(pmd) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8) | (((pteval_t)(1)) << 7));
}
# 790 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_none(pmd_t pmd)
{


 unsigned long val = native_pmd_val(pmd);
 return (val & ~((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5))) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long)((void *)((unsigned long)(native_pmd_val(pmd) & pmd_pfn_mask(pmd))+((unsigned long)page_offset_base)));
}
# 818 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_bad(pmd_t pmd)
{
 return (pmd_flags(pmd) & ~(((pteval_t)(1)) << 2)) != ((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pages_to_mb(unsigned long npg)
{
 return npg >> (20 - 12);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_none(pud_t pud)
{
 return (native_pud_val(pud) & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5)))) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_present(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pud_pgtable(pud_t pud)
{
 return (pmd_t *)((void *)((unsigned long)(native_pud_val(pud) & pud_pfn_mask(pud))+((unsigned long)page_offset_base)));
}
# 851 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_large(pud_t pud)
{
 return (native_pud_val(pud) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0))) ==
  ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_bad(pud_t pud)
{
 return (pud_flags(pud) & ~(((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 2))) != 0;
}
# 870 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_none(p4d_t p4d)
{
 return (native_p4d_val(p4d) & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5)))) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_present(p4d_t p4d)
{
 return p4d_flags(p4d) & (((pteval_t)(1)) << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t *p4d_pgtable(p4d_t p4d)
{
 return (pud_t *)((void *)((unsigned long)(native_p4d_val(p4d) & p4d_pfn_mask(p4d))+((unsigned long)page_offset_base)));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_bad(p4d_t p4d)
{
 unsigned long ignore_flags = ((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 2);

 if (0)
  ignore_flags |= (((pteval_t)(1)) << 63);

 return (p4d_flags(p4d) & ~ignore_flags) != 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long p4d_index(unsigned long address)
{
 return (address >> 39) & (ptrs_per_p4d - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_present(pgd_t pgd)
{
 if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
  return 1;
 return pgd_flags(pgd) & (((pteval_t)(1)) << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pgd_page_vaddr(pgd_t pgd)
{
 return (unsigned long)((void *)((unsigned long)((unsigned long)native_pgd_val(pgd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))))+((unsigned long)page_offset_base)));
}
# 927 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
{
 if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
  return (p4d_t *)pgd;
 return (p4d_t *)pgd_page_vaddr(*pgd) + p4d_index(address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_bad(pgd_t pgd)
{
 unsigned long ignore_flags = (((pteval_t)(1)) << 2);

 if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
  return 0;

 if (0)
  ignore_flags |= (((pteval_t)(1)) << 63);

 return (pgd_flags(pgd) & ~ignore_flags) != ((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_none(pgd_t pgd)
{
 if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
  return 0;






 return !native_pgd_val(pgd);
}
# 968 "./arch/x86/include/asm/pgtable.h"
extern int direct_gbpages;
void init_mem_mapping(void);
void early_alloc_pgt_buf(void);
extern void memblock_find_dma_reserve(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) poking_init(void);
unsigned long init_memory_mapping(unsigned long start,
      unsigned long end, pgprot_t prot);


extern pgd_t trampoline_pgd_entry;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t native_local_ptep_get_and_clear(pte_t *ptep)
{
 pte_t res = *ptep;


 native_pte_clear(((void *)0), 0, ptep);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t native_local_pmdp_get_and_clear(pmd_t *pmdp)
{
 pmd_t res = *pmdp;

 native_pmd_clear(pmdp);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t native_local_pudp_get_and_clear(pud_t *pudp)
{
 pud_t res = *pudp;

 native_pud_clear(pudp);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pmd_at(struct mm_struct *mm, unsigned long addr,
         pmd_t *pmdp, pmd_t pmd)
{
 native_set_pmd(pmdp, pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pud_at(struct mm_struct *mm, unsigned long addr,
         pud_t *pudp, pud_t pud)
{
 native_set_pud(pudp, pud);
}
# 1031 "./arch/x86/include/asm/pgtable.h"
struct vm_area_struct;


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);


extern int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pte_t *ptep);


extern int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pte_t *ptep)
{
 pte_t pte = native_ptep_get_and_clear(ptep);
 return pte;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long addr, pte_t *ptep,
         int full)
{
 pte_t pte;
 if (full) {




  pte = native_local_ptep_get_and_clear(ptep);
 } else {
  pte = ptep_get_and_clear(mm, addr, ptep);
 }
 return pte;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptep_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pte_t *ptep)
{
 clear_bit(1, (unsigned long *)&ptep->pte);
}






extern int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty);
extern int pudp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pud_t *pudp,
     pud_t entry, int dirty);


extern int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pmd_t *pmdp);
extern int pudp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pud_t *pudp);


extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_write(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pmd_t *pmdp)
{
 return native_pmdp_get_and_clear(pmdp);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pudp_huge_get_and_clear(struct mm_struct *mm,
     unsigned long addr, pud_t *pudp)
{
 return native_pudp_get_and_clear(pudp);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pmd_t *pmdp)
{
 clear_bit(1, (unsigned long *)pmdp);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_write(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 1);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmdp_establish(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp, pmd_t pmd)
{
 if (0) {
  return ({ typeof(pmdp) __ai_ptr = (pmdp); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = ((pmd)); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
 } else {
  pmd_t old = *pmdp;
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_242(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pmdp) == sizeof(char) || sizeof(*pmdp) == sizeof(short) || sizeof(*pmdp) == sizeof(int) || sizeof(*pmdp) == sizeof(long)) || sizeof(*pmdp) == sizeof(long long))) __compiletime_assert_242(); } while (0); do { *(volatile typeof(*pmdp) *)&(*pmdp) = (pmd); } while (0); } while (0);
  return old;
 }
}
# 1156 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pgdp_maps_userspace(void *__ptr)
{
 unsigned long ptr = (unsigned long)__ptr;

 return (((ptr & ~(~(((1UL) << 12)-1))) / sizeof(pgd_t)) < ((((1UL) << 12) / 2) / sizeof(pgd_t)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_large(pgd_t pgd) { return 0; }
# 1225 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
{
 memcpy(dst, src, count * sizeof(pgd_t));







}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_level_shift(enum pg_level level)
{
 return (12 - ( __builtin_constant_p(512) ? ((512) < 2 ? 0 : 63 - __builtin_clzll(512)) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) )) + level * ( __builtin_constant_p(512) ? ((512) < 2 ? 0 : 63 - __builtin_clzll(512)) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) );
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long page_level_size(enum pg_level level)
{
 return 1UL << page_level_shift(level);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long page_level_mask(enum pg_level level)
{
 return ~(page_level_size(level) - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_cache(struct vm_area_struct *vma,
  unsigned long addr, pte_t *ptep)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_cache_pmd(struct vm_area_struct *vma,
  unsigned long addr, pmd_t *pmd)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_cache_pud(struct vm_area_struct *vma,
  unsigned long addr, pud_t *pud)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_swp_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(0))));
}
# 1334 "./arch/x86/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 pte_flags_pkey(unsigned long pte_flags)
{


 return (pte_flags & ((((pteval_t)(1)) << 59) | (((pteval_t)(1)) << 60) | (((pteval_t)(1)) << 61) | (((pteval_t)(1)) << 62))) >> 59;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pkru_allows_pkey(u16 pkey, bool write)
{
 u32 pkru = read_pkru();

 if (!__pkru_allows_read(pkru, pkey))
  return false;
 if (write && !__pkru_allows_write(pkru, pkey))
  return false;

 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pte_access_permitted(unsigned long pteval, bool write)
{
 unsigned long need_pte_bits = (((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 2);

 if (write)
  need_pte_bits |= (((pteval_t)(1)) << 1);

 if ((pteval & need_pte_bits) != need_pte_bits)
  return 0;

 return __pkru_allows_pkey(pte_flags_pkey(pteval), write);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pte_access_permitted(pte_t pte, bool write)
{
 return __pte_access_permitted(native_pte_val(pte), write);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pmd_access_permitted(pmd_t pmd, bool write)
{
 return __pte_access_permitted(native_pmd_val(pmd), write);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pud_access_permitted(pud_t pud, bool write)
{
 return __pte_access_permitted(native_pud_val(pud), write);
}


extern bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_has_pfn_modify_check(void)
{
 return (__builtin_constant_p((((20*32 + (18))))) && ( ((((((20*32 + (18)))))>>5)==(0) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((20*32 + (18)))))>>5)==(1) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((20*32 + (18)))))>>5)==(2) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(3) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((20*32 + (18)))))>>5)==(4) && (1UL<<(((((20*32 + (18)))))&31) & (0) )) || ((((((20*32 + (18)))))>>5)==(5) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(6) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(7) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(8) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(9) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(10) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(11) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(12) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(13) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(14) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(15) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(16) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(17) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(18) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(19) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((((20*32 + (18)))), (unsigned long *)((&boot_cpu_data)->x86_capability)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_faults_on_old_pte(void)
{
 return false;
}
# 7 "./include/linux/pgtable.h" 2
# 61 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pte_index(unsigned long address)
{
 return (address >> 12) & (512 - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pmd_index(unsigned long address)
{
 return (address >> 21) & (512 - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pud_index(unsigned long address)
{
 return (address >> 30) & (512 - 1);
}
# 88 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
}
# 107 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return pud_pgtable(*pud) + pmd_index(address);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t *pud_offset(p4d_t *p4d, unsigned long address)
{
 return p4d_pgtable(*p4d) + pud_index(address);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t *pgd_offset_pgd(pgd_t *pgd, unsigned long address)
{
 return (pgd + (((address) >> pgdir_shift) & (512 - 1)));
};
# 149 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pmd_off(struct mm_struct *mm, unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((mm)->pgd, (va)), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pmd_off_k(unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((&init_mm)->pgd, ((va))), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t *virt_to_kpte(unsigned long vaddr)
{
 pmd_t *pmd = pmd_off_k(vaddr);

 return pmd_none(*pmd) ? ((void *)0) : pte_offset_kernel(pmd, vaddr);
}
# 273 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get(pte_t *ptep)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_243(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_243(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
}
# 328 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get_lockless(pte_t *ptep)
{
 return ptep_get(ptep);
}
# 399 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_tlb(struct vm_area_struct *vma,
    unsigned long address, pte_t *ptep)
{
}
# 412 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 native_pte_clear(mm, address, ptep);
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);
# 454 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_sw_mkyoung(pte_t pte)
{
 return pte;
}
# 503 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 pud_t old_pud = *pudp;

 set_pud_at(mm, address, pudp, pud_wrprotect(old_pud));
}
# 524 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address,
     pmd_t *pmdp)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_244(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_244(); } while (0);
 return *pmdp;
}





extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
# 560 "./include/linux/pgtable.h"
extern pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);
# 578 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_unused(pte_t pte)
{
 return 0;
}
# 610 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return native_pmd_val(pmd_a) == native_pmd_val(pmd_b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_same(pud_t pud_a, pud_t pud_b)
{
 return native_pud_val(pud_a) == native_pud_val(pud_b);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_same(p4d_t p4d_a, p4d_t p4d_b)
{
 return native_p4d_val(p4d_a) == native_p4d_val(p4d_b);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_same(pgd_t pgd_a, pgd_t pgd_b)
{
 return native_pgd_val(pgd_a) == native_pgd_val(pgd_b);
}
# 682 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_do_swap_page(struct mm_struct *mm,
         struct vm_area_struct *vma,
         unsigned long addr,
         pte_t pte, pte_t oldpte)
{

}
# 700 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_unmap_one(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long addr,
      pte_t orig_pte)
{
 return 0;
}
# 715 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_prepare_to_swap(struct page *page)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_swap_invalidate_page(int type, unsigned long offset)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_swap_invalidate_area(int type)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_swap_restore(swp_entry_t entry, struct page *page)
{
}
# 790 "./include/linux/pgtable.h"
void pgd_clear_bad(pgd_t *);


void p4d_clear_bad(p4d_t *);





void pud_clear_bad(pud_t *);




void pmd_clear_bad(pmd_t *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_none_or_clear_bad(p4d_t *p4d)
{
 if (p4d_none(*p4d))
  return 1;
 if (__builtin_expect(!!(p4d_bad(*p4d)), 0)) {
  p4d_clear_bad(p4d);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_none_or_clear_bad(pud_t *pud)
{
 if (pud_none(*pud))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if (pmd_none(*pmd))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t __ptep_modify_prot_start(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(vma->vm_mm, addr, ptep);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __ptep_modify_prot_commit(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(vma->vm_mm, addr, ptep, pte);
}
# 888 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_modify_prot_start(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep)
{
 return __ptep_modify_prot_start(vma, addr, ptep);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptep_modify_prot_commit(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep, pte_t old_pte, pte_t pte)
{
 __ptep_modify_prot_commit(vma, addr, ptep, pte);
}
# 999 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_swp_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}
# 1129 "./include/linux/pgtable.h"
extern int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size);
extern void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn);
extern int track_pfn_copy(struct vm_area_struct *vma);
extern void untrack_pfn(struct vm_area_struct *vma, unsigned long pfn,
   unsigned long size);
extern void untrack_pfn_moved(struct vm_area_struct *vma);
# 1152 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}
# 1179 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_trans_huge(pmd_t pmd)
{
 return 0;
}
# 1201 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_devmap(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_devmap(pud_t pud)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_devmap(pgd_t pgd)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_none_or_trans_huge_or_dev_or_clear_bad(pud_t *pud)
{
 pud_t pudval = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_245(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pud) == sizeof(char) || sizeof(*pud) == sizeof(short) || sizeof(*pud) == sizeof(int) || sizeof(*pud) == sizeof(long)) || sizeof(*pud) == sizeof(long long))) __compiletime_assert_245(); } while (0); (*(const volatile typeof( _Generic((*pud), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*pud))) *)&(*pud)); });

 if (pud_none(pudval) || pud_trans_huge(pudval) || pud_devmap(pudval))
  return 1;
 if (__builtin_expect(!!(pud_bad(pudval)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_trans_unstable(pud_t *pud)
{




 return 0;

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 1285 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 1320 "./include/linux/pgtable.h"
 if (pmd_none(pmdval) || pmd_trans_huge(pmdval) ||
  (0 && !pmd_present(pmdval)))
  return 1;
 if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 1342 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_trans_unstable(pmd_t *pmd)
{



 return 0;

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_devmap_trans_unstable(pmd_t *pmd)
{
 return pmd_devmap(*pmd) || pmd_trans_unstable(pmd);
}
# 1371 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_protnone(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_protnone(pmd_t pmd)
{
 return 0;
}







int p4d_set_huge(p4d_t *p4d, phys_addr_t addr, pgprot_t prot);
int p4d_clear_huge(p4d_t *p4d);
# 1400 "./include/linux/pgtable.h"
int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
int pud_clear_huge(pud_t *pud);
int pmd_clear_huge(pmd_t *pmd);
int p4d_free_pud_page(p4d_t *p4d, unsigned long addr);
int pud_free_pmd_page(pud_t *pud, unsigned long addr);
int pmd_free_pte_page(pmd_t *pmd, unsigned long addr);
# 1465 "./include/linux/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_espfix_bsp(void) { }


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pgtable_cache_init(void);
# 1526 "./include/linux/pgtable.h"
typedef unsigned int pgtbl_mod_mask;
# 34 "./include/linux/mm.h" 2
# 1 "./include/linux/kasan.h" 1






# 1 "./include/linux/static_key.h" 1
# 8 "./include/linux/kasan.h" 2


struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 70 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_enable_current(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_disable_current(void) {}
# 102 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kasan_enabled(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kasan_hw_tags_enabled(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_alloc_pages(struct page *page,
           unsigned int order, gfp_t flags)
{

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_246(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_246(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_free_pages(struct page *page,
          unsigned int order)
{

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_247(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_247(); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kasan_has_integrated_init(void)
{
 return kasan_hw_tags_enabled();
}
# 311 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) slab_flags_t kasan_never_merge(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_unpoison_range(const void *address, size_t size) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_poison_pages(struct page *page, unsigned int order,
          bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_unpoison_pages(struct page *page, unsigned int order,
     bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          slab_flags_t *flags) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_cache_create_kmalloc(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kasan_slab_free(struct kmem_cache *s, void *object, bool init)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_kfree_large(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_slab_free_mempool(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags, bool init)
{
 return object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
{
 return (void *)ptr;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kasan_check_byte(const void *address)
{
 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_unpoison_task_stack(struct task_struct *task) {}
# 382 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_record_aux_stack(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_record_aux_stack_noalloc(void *ptr) {}
# 408 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 424 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_init_sw_tags(void) { }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_init_hw_tags_cpu(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_init_hw_tags(void) { }
# 448 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kasan_populate_vmalloc(unsigned long start,
     unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_poison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_unpoison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_release_vmalloc(unsigned long start,
      unsigned long end,
      unsigned long free_region_start,
      unsigned long free_region_end) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_populate_early_vm_area_shadow(void *start,
             unsigned long size)
{ }
# 482 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_free_shadow(const struct vm_struct *vm) {}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_non_canonical_hook(unsigned long addr) { }
# 35 "./include/linux/mm.h" 2

struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct user_struct;
struct pt_regs;

extern int sysctl_page_lock_unfairness;

void init_mm_internals(void);


extern unsigned long max_mapnr;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_max_mapnr(unsigned long limit)
{
 max_mapnr = limit;
}




extern atomic_long_t _totalram_pages;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long totalram_pages(void)
{
 return (unsigned long)atomic_long_read(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void totalram_pages_inc(void)
{
 atomic_long_inc(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void totalram_pages_dec(void)
{
 atomic_long_dec(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void totalram_pages_add(long count)
{
 atomic_long_add(count, &_totalram_pages);
}

extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits __attribute__((__section__(".data..read_mostly")));
# 149 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mm_zero_struct_page(struct page *page)
{
 unsigned long *_pp = (void *)page;


 do { __attribute__((__noreturn__)) extern void __compiletime_assert_248(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) & 7"))); if (!(!(sizeof(struct page) & 7))) __compiletime_assert_248(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_249(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) < 56"))); if (!(!(sizeof(struct page) < 56))) __compiletime_assert_249(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_250(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) > 80"))); if (!(!(sizeof(struct page) > 80))) __compiletime_assert_250(); } while (0);

 switch (sizeof(struct page)) {
 case 80:
  _pp[9] = 0;
  __attribute__((__fallthrough__));
 case 72:
  _pp[8] = 0;
  __attribute__((__fallthrough__));
 case 64:
  _pp[7] = 0;
  __attribute__((__fallthrough__));
 case 56:
  _pp[6] = 0;
  _pp[5] = 0;
  _pp[4] = 0;
  _pp[3] = 0;
  _pp[2] = 0;
  _pp[1] = 0;
  _pp[0] = 0;
 }
}
# 201 "./include/linux/mm.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
# 231 "./include/linux/mm.h"
void setup_initial_init_mm(void *start_code, void *end_code,
      void *end_data, void *brk);
# 243 "./include/linux/mm.h"
struct vm_area_struct *vm_area_alloc(struct mm_struct *);
struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
void vm_area_free(struct vm_area_struct *);
# 425 "./include/linux/mm.h"
extern pgprot_t protection_map[16];
# 459 "./include/linux/mm.h"
enum fault_flag {
 FAULT_FLAG_WRITE = 1 << 0,
 FAULT_FLAG_MKWRITE = 1 << 1,
 FAULT_FLAG_ALLOW_RETRY = 1 << 2,
 FAULT_FLAG_RETRY_NOWAIT = 1 << 3,
 FAULT_FLAG_KILLABLE = 1 << 4,
 FAULT_FLAG_TRIED = 1 << 5,
 FAULT_FLAG_USER = 1 << 6,
 FAULT_FLAG_REMOTE = 1 << 7,
 FAULT_FLAG_INSTRUCTION = 1 << 8,
 FAULT_FLAG_INTERRUPTIBLE = 1 << 9,
};
# 493 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fault_flag_allow_retry_first(enum fault_flag flags)
{
 return (flags & FAULT_FLAG_ALLOW_RETRY) &&
     (!(flags & FAULT_FLAG_TRIED));
}
# 521 "./include/linux/mm.h"
struct vm_fault {
 const struct {
  struct vm_area_struct *vma;
  gfp_t gfp_mask;
  unsigned long pgoff;
  unsigned long address;
 };
 enum fault_flag flags;

 pmd_t *pmd;

 pud_t *pud;


 union {
  pte_t orig_pte;
  pmd_t orig_pmd;


 };

 struct page *cow_page;
 struct page *page;





 pte_t *pte;



 spinlock_t *ptl;



 pgtable_t prealloc_pte;






};


enum page_entry_size {
 PE_SIZE_PTE = 0,
 PE_SIZE_PMD,
 PE_SIZE_PUD,
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);

 int (*may_split)(struct vm_area_struct *area, unsigned long addr);
 int (*mremap)(struct vm_area_struct *area);





 int (*mprotect)(struct vm_area_struct *vma, unsigned long start,
   unsigned long end, unsigned long newflags);
 vm_fault_t (*fault)(struct vm_fault *vmf);
 vm_fault_t (*huge_fault)(struct vm_fault *vmf,
   enum page_entry_size pe_size);
 vm_fault_t (*map_pages)(struct vm_fault *vmf,
   unsigned long start_pgoff, unsigned long end_pgoff);
 unsigned long (*pagesize)(struct vm_area_struct * area);



 vm_fault_t (*page_mkwrite)(struct vm_fault *vmf);


 vm_fault_t (*pfn_mkwrite)(struct vm_fault *vmf);





 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 645 "./include/linux/mm.h"
 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
{
 static const struct vm_operations_struct dummy_vm_ops = {};

 memset(vma, 0, sizeof(*vma));
 vma->vm_mm = mm;
 vma->vm_ops = &dummy_vm_ops;
 INIT_LIST_HEAD(&vma->anon_vma_chain);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vma_set_anonymous(struct vm_area_struct *vma)
{
 vma->vm_ops = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_temporary_stack(struct vm_area_struct *vma)
{
 int maybe_stack = vma->vm_flags & (0x00000100 | 0x00000000);

 if (!maybe_stack)
  return false;

 if ((vma->vm_flags & (0x00010000 | 0x00008000)) ==
      (0x00010000 | 0x00008000))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_foreign(struct vm_area_struct *vma)
{
 if (!get_current()->mm)
  return true;

 if (get_current()->mm != vma->vm_mm)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_accessible(struct vm_area_struct *vma)
{
 return vma->vm_flags & (0x00000001 | 0x00000002 | 0x00000004);
}
# 706 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_shmem(struct vm_area_struct *vma) { return false; }


int vma_is_stack_for_current(struct vm_area_struct *vma);




struct mmu_gather;
struct inode;

# 1 "./include/linux/huge_mm.h" 1




# 1 "./include/linux/sched/coredump.h" 1
# 17 "./include/linux/sched/coredump.h"
extern void set_dumpable(struct mm_struct *mm, int value);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __get_dumpable(unsigned long mm_flags)
{
 return mm_flags & ((1 << 2) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_dumpable(struct mm_struct *mm)
{
 return __get_dumpable(mm->flags);
}
# 6 "./include/linux/huge_mm.h" 2




vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf);
int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
void huge_pmd_set_accessed(struct vm_fault *vmf);
int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
    struct vm_area_struct *vma);


void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud);






vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf);
struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr, pmd_t *pmd,
       unsigned int flags);
bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
      pmd_t *pmd, unsigned long addr, unsigned long next);
int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr);
int zap_huge_pud(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud,
   unsigned long addr);
bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,
     unsigned long new_addr, pmd_t *old_pmd, pmd_t *new_pmd);
int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr,
      pgprot_t newprot, unsigned long cp_flags);
vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 55 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) vm_fault_t vmf_insert_pfn_pmd(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pmd_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}
vm_fault_t vmf_insert_pfn_pud_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 74 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) vm_fault_t vmf_insert_pfn_pud(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pud_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}

enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_NEVER_DAX,
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,
};

struct kobject;
struct kobj_attribute;

ssize_t single_hugepage_flag_store(struct kobject *kobj,
       struct kobj_attribute *attr,
       const char *buf, size_t count,
       enum transparent_hugepage_flag flag);
ssize_t single_hugepage_flag_show(struct kobject *kobj,
      struct kobj_attribute *attr, char *buf,
      enum transparent_hugepage_flag flag);
extern struct kobj_attribute shmem_enabled_attr;
# 330 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int thp_order(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int thp_nr_pages(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool transparent_hugepage_active(struct vm_area_struct *vma)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool transhuge_vma_suitable(struct vm_area_struct *vma,
  unsigned long haddr)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool transhuge_vma_enabled(struct vm_area_struct *vma,
       unsigned long vm_flags)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prep_transhuge_page(struct page *page) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_transparent_hugepage(struct page *page)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
can_split_huge_page(struct page *page, int *pextra_pins)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_251(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_251(); } while (0);
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
split_huge_page_to_list(struct page *page, struct list_head *list)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int split_huge_page(struct page *page)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void deferred_split_huge_page(struct page *page) {}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
  unsigned long address, bool freeze, struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void split_huge_pmd_address(struct vm_area_struct *vma,
  unsigned long address, bool freeze, struct page *page) {}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hugepage_madvise(struct vm_area_struct *vma,
       unsigned long *vm_flags, int advice)
{
 do { ({ asm volatile("252" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "252" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("253" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "253" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vma_adjust_trans_huge(struct vm_area_struct *vma,
      unsigned long start,
      unsigned long end,
      long adjust_next)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_swap_pmd(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) spinlock_t *pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) spinlock_t *pud_trans_huge_lock(pud_t *pud,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) vm_fault_t do_huge_pmd_numa_page(struct vm_fault *vmf)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_huge_zero_page(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_huge_zero_pmd(pmd_t pmd)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_huge_zero_pud(pud_t pud)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_put_huge_zero_page(struct mm_struct *mm)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *follow_devmap_pmd(struct vm_area_struct *vma,
 unsigned long addr, pmd_t *pmd, int flags, struct dev_pagemap **pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *follow_devmap_pud(struct vm_area_struct *vma,
 unsigned long addr, pud_t *pud, int flags, struct dev_pagemap **pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool thp_migration_supported(void)
{
 return false;
}
# 478 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long thp_size(struct page *page)
{
 return ((1UL) << 12) << thp_order(page);
}
# 718 "./include/linux/mm.h" 2
# 735 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int put_page_testzero(struct page *page)
{
 do { if (__builtin_expect(!!(page_ref_count(page) == 0), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "page_ref_count(page) == 0"")"); do { ({ asm volatile("254" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "254" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("255" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "255" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 return page_ref_dec_and_test(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_put_testzero(struct folio *folio)
{
 return put_page_testzero(&folio->page);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);


struct page *vmalloc_to_page(const void *addr);
unsigned long vmalloc_to_pfn(const void *addr);
# 784 "./include/linux/mm.h"
extern bool is_vmalloc_addr(const void *x);
extern int is_vmalloc_or_module_addr(const void *x);
# 797 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int head_compound_mapcount(struct page *head)
{
 return atomic_read(compound_mapcount_ptr(head)) + 1;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int compound_mapcount(struct page *page)
{
 do { if (__builtin_expect(!!(!PageCompound(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!PageCompound(page)"")"); do { ({ asm volatile("256" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "256" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("257" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "257" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 page = ((typeof(page))_compound_head(page));
 return head_compound_mapcount(page);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_mapcount_reset(struct page *page)
{
 atomic_set(&(page)->_mapcount, -1);
}

int __page_mapcount(struct page *page);
# 834 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_mapcount(struct page *page)
{
 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return atomic_read(&page->_mapcount) + 1;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int total_mapcount(struct page *page)
{
 return page_mapcount(page);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_trans_huge_mapcount(struct page *page,
        int *total_mapcount)
{
 int mapcount = page_mapcount(page);
 if (total_mapcount)
  *total_mapcount = mapcount;
 return mapcount;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *virt_to_head_page(const void *x)
{
 struct page *page = (((struct page *)vmemmap_base) + (__phys_addr_nodebug((unsigned long)(x)) >> 12));

 return ((typeof(page))_compound_head(page));
}

void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);
void folio_copy(struct folio *dst, struct folio *src);

unsigned long nr_free_buffer_pages(void);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,






 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[NR_COMPOUND_DTORS];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 do { if (__builtin_expect(!!(compound_dtor >= NR_COMPOUND_DTORS), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "compound_dtor >= NR_COMPOUND_DTORS"")"); do { ({ asm volatile("258" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "258" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("259" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "259" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void destroy_compound_page(struct page *page)
{
 do { if (__builtin_expect(!!(page[1].compound_dtor >= NR_COMPOUND_DTORS), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "page[1].compound_dtor >= NR_COMPOUND_DTORS"")"); do { ({ asm volatile("260" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "260" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("261" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "261" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 compound_page_dtors[page[1].compound_dtor](page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return page[1].compound_order;
}
# 925 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int folio_order(struct folio *folio)
{
 return compound_order(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hpage_pincount_available(struct page *page)
{





 page = ((typeof(page))_compound_head(page));
 return PageCompound(page) && compound_order(page) > 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int head_compound_pincount(struct page *head)
{
 return atomic_read(compound_pincount_ptr(head));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int compound_pincount(struct page *page)
{
 do { if (__builtin_expect(!!(!hpage_pincount_available(page)), 0)) { dump_page(page, "VM_BUG_ON_PAGE(" "!hpage_pincount_available(page)"")"); do { ({ asm volatile("262" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "262" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("263" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "263" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 page = ((typeof(page))_compound_head(page));
 return head_compound_pincount(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
 page[1].compound_nr = 1U << order;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long compound_nr(struct page *page)
{
 if (!PageHead(page))
  return 1;
 return page[1].compound_nr;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long page_size(struct page *page)
{
 return ((1UL) << 12) << compound_order(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int page_shift(struct page *page)
{
 return 12 + compound_order(page);
}

void free_compound_page(struct page *page);
# 988 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
{
 if (__builtin_expect(!!(vma->vm_flags & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}

vm_fault_t do_set_pmd(struct vm_fault *vmf, struct page *page);
void do_set_pte(struct vm_fault *vmf, struct page *page, unsigned long addr);

vm_fault_t finish_fault(struct vm_fault *vmf);
vm_fault_t finish_mkwrite_fault(struct vm_fault *vmf);
# 1105 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum zone_type page_zonenum(const struct page *page)
{
 do { kcsan_set_access_mask(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0))); __kcsan_check_access(&(page->flags), sizeof(page->flags), (1 << 3)); kcsan_set_access_mask(0); kcsan_atomic_next(1); } while (0);
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum zone_type folio_zonenum(const struct folio *folio)
{
 return page_zonenum(&folio->page);
}
# 1124 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_zone_device_page(const struct page *page)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_zone_movable_page(const struct page *page)
{
 return page_zonenum(page) == ZONE_MOVABLE;
}
# 1158 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_is_devmap_managed(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_devmap_managed_page(struct page *page)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_device_private_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PRIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_pci_p2pdma_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PCI_P2PDMA;
}
# 1196 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_get(struct folio *folio)
{
 do { if (__builtin_expect(!!(((unsigned int) folio_ref_count(folio) + 127u <= 127u)), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "((unsigned int) folio_ref_count(folio) + 127u <= 127u)"")"); do { ({ asm volatile("264" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "264" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("265" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "265" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 folio_ref_inc(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_page(struct page *page)
{
 folio_get((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

bool __attribute__((__warn_unused_result__)) try_grab_page(struct page *page, unsigned int flags);
struct page *try_grab_compound_head(struct page *page, int refs,
        unsigned int flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool try_get_page(struct page *page)
{
 page = ((typeof(page))_compound_head(page));
 if (({ int __ret_warn_on = !!(page_ref_count(page) <= 0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 page_ref_inc(page);
 return true;
}
# 1234 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void folio_put(struct folio *folio)
{
 if (folio_put_testzero(folio))
  __put_page(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_page(struct page *page)
{
 struct folio *folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));







 if (page_is_devmap_managed(&folio->page)) {
  put_devmap_managed_page(&folio->page);
  return;
 }

 folio_put(folio);
}
# 1291 "./include/linux/mm.h"
void unpin_user_page(struct page *page);
void unpin_user_pages_dirty_lock(struct page **pages, unsigned long npages,
     bool make_dirty);
void unpin_user_page_range_dirty_lock(struct page *page, unsigned long npages,
          bool make_dirty);
void unpin_user_pages(struct page **pages, unsigned long npages);
# 1324 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_maybe_dma_pinned(struct page *page)
{
 if (hpage_pincount_available(page))
  return compound_pincount(page) > 0;
# 1337 "./include/linux/mm.h"
 return ((unsigned int)page_ref_count(((typeof(page))_compound_head(page)))) >=
  (1U << 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_cow_mapping(vm_flags_t flags)
{
 return (flags & (0x00000008 | 0x00000020)) == 0x00000020;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_needs_cow_for_dma(struct vm_area_struct *vma,
       struct page *page)
{
 if (!is_cow_mapping(vma->vm_flags))
  return false;

 if (!test_bit(28, &vma->vm_mm->flags))
  return false;

 return page_maybe_dma_pinned(page);
}
# 1374 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 0) < ((((sizeof(unsigned long)*8) - 0) - 0) - 2))? (((sizeof(unsigned long)*8) - 0) - 0) : ((((sizeof(unsigned long)*8) - 0) - 0) - 2)) * ((0 + 2) != 0))) & ((1UL << (0 + 2)) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_to_nid(const struct page *page)
{
 struct page *p = (struct page *)page;

 return (({ ((void)(sizeof(( long)(PagePoisoned(p))))); p; })->flags >> ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0))) & ((1UL << 0) - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int folio_nid(const struct folio *folio)
{
 return page_to_nid(&folio->page);
}
# 1460 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_cpupid_xchg_last(struct page *page, int cpupid)
{
 return page_to_nid(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_cpupid_last(struct page *page)
{
 return page_to_nid(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpupid_to_nid(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpupid_to_pid(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpupid_to_cpu(int cpupid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpu_pid_to_cpupid(int nid, int pid)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpupid_pid_unset(int cpupid)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_cpupid_reset_last(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpupid_match_pid(struct task_struct *task, int cpupid)
{
 return false;
}
# 1542 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u8 page_kasan_tag(const struct page *page)
{
 return 0xff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_kasan_tag_set(struct page *page, u8 tag) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_kasan_tag_reset(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zone *page_zone(const struct page *page)
{
 return &NODE_DATA(page_to_nid(page))->node_zones[page_zonenum(page)];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pg_data_t *page_pgdat(const struct page *page)
{
 return NODE_DATA(page_to_nid(page));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zone *folio_zone(const struct folio *folio)
{
 return page_zone(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pg_data_t *folio_pgdat(const struct folio *folio)
{
 return page_pgdat(&folio->page);
}
# 1594 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long folio_pfn(struct folio *folio)
{
 return (unsigned long)((&folio->page) - ((struct page *)vmemmap_base));
}
# 1607 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_pinnable_page(struct page *page)
{
 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 0) - 1) << ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0)));
 page->flags |= (node & ((1UL << 0) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);



}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long folio_nr_pages(struct folio *folio)
{
 return compound_nr(&folio->page);
}
# 1660 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct folio *folio_next(struct folio *folio)
{
 return (struct folio *)((&(folio)->page) + (folio_nr_pages(folio)));
}
# 1677 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int folio_shift(struct folio *folio)
{
 return 12 + folio_order(folio);
}
# 1690 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) size_t folio_size(struct folio *folio)
{
 return ((1UL) << 12) << folio_order(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_make_page_accessible(struct page *page)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_make_folio_accessible(struct folio *folio)
{
 int ret;
 long i, nr = folio_nr_pages(folio);

 for (i = 0; i < nr; i++) {
  ret = arch_make_page_accessible(((&(folio)->page) + (i)));
  if (ret)
   break;
 }

 return ret;
}





# 1 "./include/linux/vmstat.h" 1







# 1 "./include/linux/vm_event_item.h" 1
# 25 "./include/linux/vm_event_item.h"
enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_DMA32, PGALLOC_NORMAL, PGALLOC_MOVABLE,
  ALLOCSTALL_DMA32, ALLOCSTALL_NORMAL, ALLOCSTALL_MOVABLE,
  PGSCAN_SKIP_DMA32, PGSCAN_SKIP_NORMAL, PGSCAN_SKIP_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,
  PGFAULT, PGMAJFAULT,
  PGLAZYFREED,
  PGREFILL,
  PGREUSE,
  PGSTEAL_KSWAPD,
  PGSTEAL_DIRECT,
  PGDEMOTE_KSWAPD,
  PGDEMOTE_DIRECT,
  PGSCAN_KSWAPD,
  PGSCAN_DIRECT,
  PGSCAN_DIRECT_THROTTLE,
  PGSCAN_ANON,
  PGSCAN_FILE,
  PGSTEAL_ANON,
  PGSTEAL_FILE,



  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, PGROTATED,
  DROP_PAGECACHE, DROP_SLAB,
  OOM_KILL,
# 80 "./include/linux/vm_event_item.h"
  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,
# 131 "./include/linux/vm_event_item.h"
  DIRECT_MAP_LEVEL2_SPLIT,
  DIRECT_MAP_LEVEL3_SPLIT,

  NR_VM_EVENT_ITEMS
};
# 9 "./include/linux/vmstat.h" 2

# 1 "./include/linux/static_key.h" 1
# 11 "./include/linux/vmstat.h" 2


extern int sysctl_stat_interval;
# 24 "./include/linux/vmstat.h"
struct reclaim_stat {
 unsigned nr_dirty;
 unsigned nr_unqueued_dirty;
 unsigned nr_congested;
 unsigned nr_writeback;
 unsigned nr_immediate;
 unsigned nr_pageout;
 unsigned nr_activate[2];
 unsigned nr_ref_keep;
 unsigned nr_unmap_fail;
 unsigned nr_lazyfree_fail;
};

enum writeback_stat_item {
 NR_DIRTY_THRESHOLD,
 NR_DIRTY_BG_THRESHOLD,
 NR_VM_WRITEBACK_STAT_ITEMS,
};
# 54 "./include/linux/vmstat.h"
struct vm_event_state {
 unsigned long event[NR_VM_EVENT_ITEMS];
};

extern __attribute__((section(".data" ""))) __typeof__(struct vm_event_state) vm_event_states;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) delta) & 0xff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm ("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) delta) & 0xffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm ("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) delta) & 0xffffffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm ("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u64 pto_val__ = ((u64)(delta)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm ("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) delta) & 0xff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) delta) & 0xffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) delta) & 0xffffffff)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(delta) && ((delta) == 1 || (delta) == -1)) ? (int)(delta) : 0; if (0) { typeof((vm_event_states.event[item])) pao_tmp__; pao_tmp__ = (delta); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item]))); }); else do { u64 pto_val__ = ((u64)(delta)); if (0) { typeof((vm_event_states.event[item])) pto_tmp__; pto_tmp__ = (delta); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((vm_event_states.event[item])) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
# 140 "./include/linux/vmstat.h"
extern atomic_long_t vm_zone_stat[NR_VM_ZONE_STAT_ITEMS];
extern atomic_long_t vm_node_stat[NR_VM_NODE_STAT_ITEMS];
extern atomic_long_t vm_numa_event[0];
# 165 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &vm_zone_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_page_state_add(long x, struct pglist_data *pgdat,
     enum node_stat_item item)
{
 atomic_long_add(x, &pgdat->vm_stat[item]);
 atomic_long_add(x, &vm_node_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long global_zone_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&vm_zone_stat[item]);




 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long global_node_page_state_pages(enum node_stat_item item)
{
 long x = atomic_long_read(&vm_node_stat[item]);




 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long global_node_page_state(enum node_stat_item item)
{
 (void)({ int __ret_warn_on = !!(vmstat_item_in_bytes(item)); __builtin_expect(!!(__ret_warn_on), 0); });

 return global_node_page_state_pages(item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);




 return x;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);
# 237 "./include/linux/vmstat.h"
 return x;
}
# 270 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fold_vm_numa_events(void)
{
}
# 319 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mod_zone_page_state(struct zone *zone,
   enum zone_stat_item item, long delta)
{
 zone_page_state_add(delta, zone, item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mod_node_page_state(struct pglist_data *pgdat,
   enum node_stat_item item, int delta)
{
 if (vmstat_item_in_bytes(item)) {






  (void)({ int __ret_warn_on = !!(delta & (((1UL) << 12) - 1)); __builtin_expect(!!(__ret_warn_on), 0); });
  delta >>= 12;
 }

 node_page_state_add(delta, pgdat, item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __inc_zone_state(struct zone *zone, enum zone_stat_item item)
{
 atomic_long_inc(&zone->vm_stat[item]);
 atomic_long_inc(&vm_zone_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __inc_node_state(struct pglist_data *pgdat, enum node_stat_item item)
{
 atomic_long_inc(&pgdat->vm_stat[item]);
 atomic_long_inc(&vm_node_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dec_zone_state(struct zone *zone, enum zone_stat_item item)
{
 atomic_long_dec(&zone->vm_stat[item]);
 atomic_long_dec(&vm_zone_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dec_node_state(struct pglist_data *pgdat, enum node_stat_item item)
{
 atomic_long_dec(&pgdat->vm_stat[item]);
 atomic_long_dec(&vm_node_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __inc_zone_page_state(struct page *page,
   enum zone_stat_item item)
{
 __inc_zone_state(page_zone(page), item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __inc_node_page_state(struct page *page,
   enum node_stat_item item)
{
 __inc_node_state(page_pgdat(page), item);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dec_zone_page_state(struct page *page,
   enum zone_stat_item item)
{
 __dec_zone_state(page_zone(page), item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dec_node_page_state(struct page *page,
   enum node_stat_item item)
{
 __dec_node_state(page_pgdat(page), item);
}
# 410 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refresh_zone_stat_thresholds(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_vm_stats_fold(int cpu) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void quiet_vmstat(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void drain_zonestat(struct zone *zone,
   struct per_cpu_zonestat *pzstats) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __zone_stat_mod_folio(struct folio *folio,
  enum zone_stat_item item, long nr)
{
 __mod_zone_page_state(folio_zone(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __zone_stat_add_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __zone_stat_sub_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_stat_mod_folio(struct folio *folio,
  enum zone_stat_item item, long nr)
{
 __mod_zone_page_state(folio_zone(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_stat_add_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_stat_sub_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __node_stat_mod_folio(struct folio *folio,
  enum node_stat_item item, long nr)
{
 __mod_node_page_state(folio_pgdat(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __node_stat_add_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __node_stat_sub_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_stat_mod_folio(struct folio *folio,
  enum node_stat_item item, long nr)
{
 __mod_node_page_state(folio_pgdat(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_stat_add_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_stat_sub_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (false)
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern const char * const vmstat_text[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *zone_stat_name(enum zone_stat_item item)
{
 return vmstat_text[item];
}
# 513 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *node_stat_name(enum node_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      0 +
      item];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *lru_list_name(enum lru_list lru)
{
 return node_stat_name(NR_LRU_BASE + lru) + 3;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *writeback_stat_name(enum writeback_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      0 +
      NR_VM_NODE_STAT_ITEMS +
      item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *vm_event_name(enum vm_event_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      0 +
      NR_VM_NODE_STAT_ITEMS +
      NR_VM_WRITEBACK_STAT_ITEMS +
      item];
}




void __mod_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
   int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mod_lruvec_state(struct lruvec *lruvec,
        enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_state(lruvec, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

void __mod_lruvec_page_state(struct page *page,
        enum node_stat_item idx, int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mod_lruvec_page_state(struct page *page,
      enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_page_state(page, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 600 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __inc_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dec_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __lruvec_stat_mod_folio(struct folio *folio,
        enum node_stat_item idx, int val)
{
 __mod_lruvec_page_state(&folio->page, idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __lruvec_stat_add_folio(struct folio *folio,
        enum node_stat_item idx)
{
 __lruvec_stat_mod_folio(folio, idx, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __lruvec_stat_sub_folio(struct folio *folio,
        enum node_stat_item idx)
{
 __lruvec_stat_mod_folio(folio, idx, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inc_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dec_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lruvec_stat_mod_folio(struct folio *folio,
      enum node_stat_item idx, int val)
{
 mod_lruvec_page_state(&folio->page, idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lruvec_stat_add_folio(struct folio *folio,
      enum node_stat_item idx)
{
 lruvec_stat_mod_folio(folio, idx, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lruvec_stat_sub_folio(struct folio *folio,
      enum node_stat_item idx)
{
 lruvec_stat_mod_folio(folio, idx, -folio_nr_pages(folio));
}
# 1722 "./include/linux/mm.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *lowmem_page_address(const struct page *page)
{
 return ((void *)((unsigned long)(((phys_addr_t)((unsigned long)((page) - ((struct page *)vmemmap_base))) << 12))+((unsigned long)page_offset_base)));
}
# 1756 "./include/linux/mm.h"
extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);
 return page->index;
}

bool page_mapped(struct page *page);
bool folio_mapped(struct folio *folio);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_is_pfmemalloc(const struct page *page)
{





 return (uintptr_t)page->lru.next & ((((1UL))) << (1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_pfmemalloc(struct page *page)
{
 page->lru.next = (void *)((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_page_pfmemalloc(struct page *page)
{
 page->lru.next = ((void *)0);
}




extern void pagefault_out_of_memory(void);
# 1818 "./include/linux/mm.h"
extern void show_free_areas(unsigned int flags, nodemask_t *nodemask);


extern bool can_do_mlock(void);



extern int user_shm_lock(size_t, struct ucounts *);
extern void user_shm_unlock(size_t, struct ucounts *);




struct zap_details {
 struct address_space *zap_mapping;
 struct page *single_page;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
zap_skip_check_mapping(struct zap_details *details, struct page *page)
{
 if (!details || !page)
  return false;

 return details->zap_mapping &&
     (details->zap_mapping != page_rmapping(page));
}

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
        pte_t pte);
struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

void zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
    unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
      unsigned long size);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);

struct mmu_notifier_range;

void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int
copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
int follow_invalidate_pte(struct mm_struct *mm, unsigned long address,
     struct mmu_notifier_range *range, pte_t **ptepp,
     pmd_t **pmdpp, spinlock_t **ptlp);
int follow_pte(struct mm_struct *mm, unsigned long address,
        pte_t **ptepp, spinlock_t **ptlp);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

extern void truncate_pagecache(struct inode *inode, loff_t new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern vm_fault_t handle_mm_fault(struct vm_area_struct *vma,
      unsigned long address, unsigned int flags,
      struct pt_regs *regs);
extern int fixup_user_fault(struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
void unmap_mapping_page(struct page *page);
void unmap_mapping_pages(struct address_space *mapping,
  unsigned long start, unsigned long nr, bool even_cows);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
# 1923 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern int access_process_vm(struct task_struct *tsk, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int __access_remote_vm(struct mm_struct *mm, unsigned long addr,
         void *buf, int len, unsigned int gup_flags);

long get_user_pages_remote(struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas, int *locked);
long pin_user_pages_remote(struct mm_struct *mm,
      unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas, int *locked);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas);
long pin_user_pages(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);
long pin_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);

int get_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);

int account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc);
int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,
   struct task_struct *task, bool bypass_rlim);

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

bool folio_mark_dirty(struct folio *folio);
bool set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
# 2004 "./include/linux/mm.h"
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         unsigned long cp_flags);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int get_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool get_user_page_fast_only(unsigned long addr,
   unsigned int gup_flags, struct page **pagep)
{
 return get_user_pages_fast_only(addr, 1, gup_flags, pagep) == 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);
# 2039 "./include/linux/mm.h"
 return (unsigned long)val;
}

void mm_trace_rss_stat(struct mm_struct *mm, int member, long count);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 long count = atomic_long_add_return(value, &mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_inc_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_dec_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_rss) *)1 == (typeof(get_mm_rss(mm)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_rss) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(get_mm_rss(mm)) * 0l)) : (int *)8))))), ((mm->hiwater_rss) > (get_mm_rss(mm)) ? (mm->hiwater_rss) : (get_mm_rss(mm))), ({ typeof(mm->hiwater_rss) __UNIQUE_ID___x266 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) __UNIQUE_ID___y267 = (get_mm_rss(mm)); ((__UNIQUE_ID___x266) > (__UNIQUE_ID___y267) ? (__UNIQUE_ID___x266) : (__UNIQUE_ID___y267)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_vm) *)1 == (typeof(mm->total_vm) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_vm) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->total_vm) * 0l)) : (int *)8))))), ((mm->hiwater_vm) > (mm->total_vm) ? (mm->hiwater_vm) : (mm->total_vm)), ({ typeof(mm->hiwater_vm) __UNIQUE_ID___x268 = (mm->hiwater_vm); typeof(mm->total_vm) __UNIQUE_ID___y269 = (mm->total_vm); ((__UNIQUE_ID___x268) > (__UNIQUE_ID___y269) ? (__UNIQUE_ID___x268) : (__UNIQUE_ID___y269)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sync_mm_rss(struct mm_struct *mm)
{
}
# 2152 "./include/linux/mm.h"
int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}
# 2171 "./include/linux/mm.h"
int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address);
# 2184 "./include/linux/mm.h"
int __pud_alloc(struct mm_struct *mm, p4d_t *p4d, unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_inc_nr_puds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_add(512 * sizeof(pud_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_dec_nr_puds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_sub(512 * sizeof(pud_t), &mm->pgtables_bytes);
}
# 2212 "./include/linux/mm.h"
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_inc_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_add(512 * sizeof(pmd_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_dec_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_sub(512 * sizeof(pmd_t), &mm->pgtables_bytes);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_pgtables_bytes_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->pgtables_bytes, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long mm_pgtables_bytes(const struct mm_struct *mm)
{
 return atomic_long_read(&mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_inc_nr_ptes(struct mm_struct *mm)
{
 atomic_long_add(512 * sizeof(pte_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_dec_nr_ptes(struct mm_struct *mm)
{
 atomic_long_sub(512 * sizeof(pte_t), &mm->pgtables_bytes);
}
# 2261 "./include/linux/mm.h"
int __pte_alloc(struct mm_struct *mm, pmd_t *pmd);
int __pte_alloc_kernel(pmd_t *pmd);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4d_t *p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
  unsigned long address)
{
 return (__builtin_expect(!!(pgd_none(*pgd)), 0) && __p4d_alloc(mm, pgd, address)) ?
  ((void *)0) : p4d_offset(pgd, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t *pud_alloc(struct mm_struct *mm, p4d_t *p4d,
  unsigned long address)
{
 return (__builtin_expect(!!(p4d_none(*p4d)), 0) && __pud_alloc(mm, p4d, address)) ?
  ((void *)0) : pud_offset(p4d, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!(pud_none(*pud)), 0) && __pmd_alloc(mm, pud, address))?
  ((void *)0): pmd_offset(pud, address);
}
# 2342 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return &mm->page_table_lock;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptlock_cache_init(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ptlock_init(struct page *page) { return true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptlock_free(struct page *page) {}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgtable_init(void)
{
 ptlock_cache_init();
 pgtable_cache_init();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pgtable_pte_page_ctor(struct page *page)
{
 if (!ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgtable_pte_page_dtor(struct page *page)
{
 ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}
# 2433 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pmd_ptlock_init(struct page *page) { return true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pmd_ptlock_free(struct page *page) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 spin_lock(ptl);
 return ptl;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pgtable_pmd_page_ctor(struct page *page)
{
 if (!pmd_ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgtable_pmd_page_dtor(struct page *page)
{
 pmd_ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) spinlock_t *pud_lockptr(struct mm_struct *mm, pud_t *pud)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) spinlock_t *pud_lock(struct mm_struct *mm, pud_t *pud)
{
 spinlock_t *ptl = pud_lockptr(mm, pud);

 spin_lock(ptl);
 return ptl;
}

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pagecache_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) free_area_init_memoryless_node(int nid);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, const char *s);

extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(void);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
 adjust_managed_page_count(page, 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel image (initmem)");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  phys_pages += (NODE_DATA(nid)->node_present_pages);

 return phys_pages;
}
# 2562 "./include/linux/mm.h"
void free_area_init(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int early_pfn_to_nid(unsigned long pfn)
{
 return 0;
}





extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_range(unsigned long, int, unsigned long,
  unsigned long, unsigned long, enum meminit_context,
  struct vmem_altmap *, int migratetype);
extern void setup_per_zone_wmarks(void);
extern void calculate_min_free_kbytes(void);
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) mmap_init(void);
extern void show_mem(unsigned int flags, nodemask_t *nodemask);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);




extern __attribute__((__format__(printf, 3, 4)))
void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...);

extern void setup_per_cpu_pageset(void);


extern int min_free_kbytes;
extern int watermark_boost_factor;
extern int watermark_scale_factor;
extern bool arch_has_descending_max_zone_pfns(void);


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root_cached *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root_cached *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root_cached *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root_cached *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root_cached *root);
struct anon_vma_chain *
anon_vma_interval_tree_iter_first(struct rb_root_cached *root,
      unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);

void anon_vma_interval_tree_verify(struct anon_vma_chain *node);







extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert,
 struct vm_area_struct *expand);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert)
{
 return __vma_adjust(vma, start, end, pgoff, insert, ((void *)0));
}
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *, struct vm_userfaultfd_ctx);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int __split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern int set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern int replace_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);
extern struct file *get_task_exe_file(struct task_struct *task);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern bool vma_is_special_mapping(const struct vm_area_struct *vma,
       const struct vm_special_mapping *sm);
extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

unsigned long randomize_stack_top(unsigned long stack_top);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
 struct list_head *uf);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate, struct list_head *uf);
extern int __do_munmap(struct mm_struct *, unsigned long, size_t,
         struct list_head *uf, bool downgrade);
extern int do_munmap(struct mm_struct *, unsigned long, size_t,
       struct list_head *uf);
extern int do_madvise(struct mm_struct *mm, unsigned long start, size_t len_in, int behavior);


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((__warn_unused_result__)) vm_brk(unsigned long, unsigned long);
extern int __attribute__((__warn_unused_result__)) vm_brk_flags(unsigned long, unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((__warn_unused_result__)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long vm_unmapped_area(struct vm_unmapped_area_info *info);


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);
extern void truncate_inode_pages_final(struct address_space *);


extern vm_fault_t filemap_fault(struct vm_fault *vmf);
extern vm_fault_t filemap_map_pages(struct vm_fault *vmf,
  unsigned long start_pgoff, unsigned long end_pgoff);
extern vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf);

extern unsigned long stack_guard_gap;

extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);
# 2799 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct vm_area_struct *find_vma_intersection(struct mm_struct *mm,
          unsigned long start_addr,
          unsigned long end_addr)
{
 struct vm_area_struct *vma = find_vma(mm, start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}
# 2818 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct vm_area_struct *vma_lookup(struct mm_struct *mm, unsigned long addr)
{
 struct vm_area_struct *vma = find_vma(mm, addr);

 if (vma && addr < vma->vm_start)
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vm_start_gap(struct vm_area_struct *vma)
{
 unsigned long vm_start = vma->vm_start;

 if (vma->vm_flags & 0x00000100) {
  vm_start -= stack_guard_gap;
  if (vm_start > vma->vm_start)
   vm_start = 0;
 }
 return vm_start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vm_end_gap(struct vm_area_struct *vma)
{
 unsigned long vm_end = vma->vm_end;

 if (vma->vm_flags & 0x00000000) {
  vm_end += stack_guard_gap;
  if (vm_end < vma->vm_end)
   vm_end = -((1UL) << 12);
 }
 return vm_end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> 12;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool range_in_vma(struct vm_area_struct *vma,
    unsigned long start, unsigned long end)
{
 return (vma && vma->vm_start <= start && end <= vma->vm_end);
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 2890 "./include/linux/mm.h"
void vma_set_file(struct vm_area_struct *vma, struct file *file);






struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int remap_pfn_range_notrack(struct vm_area_struct *vma, unsigned long addr,
  unsigned long pfn, unsigned long size, pgprot_t prot);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pages(struct vm_area_struct *vma, unsigned long addr,
   struct page **pages, unsigned long *num);
int vm_map_pages(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
vm_fault_t vmf_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *vma,
  unsigned long addr, pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) vm_fault_t vmf_insert_page(struct vm_area_struct *vma,
    unsigned long addr, struct page *page)
{
 int err = vm_insert_page(vma, addr, page);

 if (err == -12)
  return VM_FAULT_OOM;
 if (err < 0 && err != -16)
  return VM_FAULT_SIGBUS;

 return VM_FAULT_NOPAGE;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int io_remap_pfn_range(struct vm_area_struct *vma,
         unsigned long addr, unsigned long pfn,
         unsigned long size, pgprot_t prot)
{
 return remap_pfn_range(vma, addr, pfn, size, ((pgprot_t) { ((((prot).pgprot))) } ));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) vm_fault_t vmf_error(int err)
{
 if (err == -12)
  return VM_FAULT_OOM;
 return VM_FAULT_SIGBUS;
}

struct page *follow_page(struct vm_area_struct *vma, unsigned long address,
    unsigned int foll_flags);
# 3031 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vm_fault_to_errno(vm_fault_t vm_fault, int foll_flags)
{
 if (vm_fault & VM_FAULT_OOM)
  return -12;
 if (vm_fault & (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))
  return (foll_flags & 0x100) ? -133 : -14;
 if (vm_fault & (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))
  return -14;
 return 0;
}

typedef int (*pte_fn_t)(pte_t *pte, unsigned long addr, void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);
extern int apply_to_existing_page_range(struct mm_struct *mm,
       unsigned long address, unsigned long size,
       pte_fn_t fn, void *data);

extern void init_mem_debugging_and_hardening(void);
# 3078 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_poisoning_enabled_static(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __kernel_poison_pages(struct page *page, int nunmpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_poison_pages(struct page *page, int numpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_unpoison_pages(struct page *page, int numpages) { }


extern struct static_key_true init_on_alloc;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool want_init_on_alloc(gfp_t flags)
{
 if ((1 ? __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_alloc)->key) > 0; })), 1) : __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_alloc)->key) > 0; })), 0)))

  return true;
 return flags & (( gfp_t)0x100u);
}

extern struct static_key_true init_on_free;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool want_init_on_free(void)
{
 return (1 ? __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_free)->key) > 0; })), 1) : __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_free)->key) > 0; })), 0));

}

extern bool _debug_pagealloc_enabled_early;
extern struct static_key_false _debug_pagealloc_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool debug_pagealloc_enabled(void)
{
 return 1 &&
  _debug_pagealloc_enabled_early;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool debug_pagealloc_enabled_static(void)
{
 if (!1)
  return false;

 return __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&_debug_pagealloc_enabled)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&_debug_pagealloc_enabled)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&_debug_pagealloc_enabled)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&_debug_pagealloc_enabled)->key) > 0; })), 0);
}






extern void __kernel_map_pages(struct page *page, int numpages, int enable);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void debug_pagealloc_map_pages(struct page *page, int numpages)
{
 if (debug_pagealloc_enabled_static())
  __kernel_map_pages(page, numpages, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void debug_pagealloc_unmap_pages(struct page *page, int numpages)
{
 if (debug_pagealloc_enabled_static())
  __kernel_map_pages(page, numpages, 0);
}






extern struct vm_area_struct *get_gate_vma(struct mm_struct *mm);
extern int in_gate_area_no_mm(unsigned long addr);
extern int in_gate_area(struct mm_struct *mm, unsigned long addr);
# 3161 "./include/linux/mm.h"
extern bool process_shares_mm(struct task_struct *p, struct mm_struct *mm);


extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);

void print_vma_addr(char *prefix, unsigned long rip);






int vmemmap_remap_free(unsigned long start, unsigned long end,
         unsigned long reuse);
int vmemmap_remap_alloc(unsigned long start, unsigned long end,
   unsigned long reuse, gfp_t gfp_mask);

void *sparse_buffer_alloc(unsigned long size);
struct page * __populate_section_memmap(unsigned long pfn,
  unsigned long nr_pages, int nid, struct vmem_altmap *altmap);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
p4d_t *vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node);
pud_t *vmemmap_pud_populate(p4d_t *p4d, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node,
       struct vmem_altmap *altmap);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *vmemmap_alloc_block_buf(unsigned long size, int node,
         struct vmem_altmap *altmap);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node, struct vmem_altmap *altmap);
int vmemmap_populate(unsigned long start, unsigned long end, int node,
  struct vmem_altmap *altmap);
void vmemmap_populate_print_last(void);




void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long nr_pages);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int flags);
extern void memory_failure_queue(unsigned long pfn, int flags);
extern void memory_failure_queue_kick(int cpu);
extern int unpoison_memory(unsigned long pfn);
extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p);
extern atomic_long_t num_poisoned_pages __attribute__((__section__(".data..read_mostly")));
extern int soft_offline_page(unsigned long pfn, int flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_memory_failure(unsigned long pfn, int flags)
{
 return -6;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_is_platform_page(u64 paddr)
{
 return false;
}





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_NON_PMD_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_DAX,
 MF_MSG_UNSPLIT_THP,
 MF_MSG_UNKNOWN,
};
# 3316 "./include/linux/mm.h"
extern unsigned int _debug_guardpage_minorder;
extern struct static_key_false _debug_guardpage_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int debug_guardpage_minorder(void)
{
 return _debug_guardpage_minorder;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool debug_guardpage_enabled(void)
{
 return __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&_debug_guardpage_enabled)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&_debug_guardpage_enabled)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&_debug_guardpage_enabled)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&_debug_guardpage_enabled)->key) > 0; })), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_is_guard(struct page *page)
{
 if (!debug_guardpage_enabled())
  return false;

 return PageGuard(page);
}
# 3345 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void setup_nr_node_ids(void) {}


extern int memcmp_pages(struct page *page1, struct page *page2);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pages_identical(struct page *page1, struct page *page2)
{
 return !memcmp_pages(page1, page2);
}
# 3367 "./include/linux/mm.h"
extern int sysctl_nr_trim_pages;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_dump_obj(void *object) {}
# 3383 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int seal_check_future_write(int seals, struct vm_area_struct *vma)
{
 if (seals & 0x0010) {




  if ((vma->vm_flags & 0x00000008) && (vma->vm_flags & 0x00000002))
   return -1;
# 3400 "./include/linux/mm.h"
  if (vma->vm_flags & 0x00000008)
   vma->vm_flags &= ~(0x00000020);
 }

 return 0;
}
# 9 "./include/linux/highmem.h" 2

# 1 "./include/linux/hardirq.h" 1




# 1 "./include/linux/context_tracking_state.h" 1





# 1 "./include/linux/static_key.h" 1
# 7 "./include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 49 "./include/linux/context_tracking_state.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_in_user(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_enabled_cpu(int cpu) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_enabled_this_cpu(void) { return false; }
# 6 "./include/linux/hardirq.h" 2


# 1 "./include/linux/ftrace_irq.h" 1
# 15 "./include/linux/ftrace_irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_nmi_enter(void)
{
# 25 "./include/linux/ftrace_irq.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_nmi_exit(void)
{
# 37 "./include/linux/ftrace_irq.h"
}
# 9 "./include/linux/hardirq.h" 2

# 1 "./include/linux/vtime.h" 1
# 28 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_user_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_user_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_guest_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_guest_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }
# 41 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_account_irq(struct task_struct *tsk, unsigned int offset) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_account_softirq(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_account_hardirq(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_flush(struct task_struct *tsk) { }
# 116 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vtime_accounting_enabled_this_cpu(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_task_switch(struct task_struct *prev) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vtime_account_guest_enter(void)
{
 get_current()->flags |= 0x00000001;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vtime_account_guest_exit(void)
{
 get_current()->flags &= ~0x00000001;
}





extern void irqtime_account_irq(struct task_struct *tsk, unsigned int offset);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_softirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << (0 + 8)));
 irqtime_account_irq(tsk, (1UL << (0 + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_softirq_exit(struct task_struct *tsk)
{
 vtime_account_softirq(tsk);
 irqtime_account_irq(tsk, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_hardirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
 irqtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_hardirq_exit(struct task_struct *tsk)
{
 vtime_account_hardirq(tsk);
 irqtime_account_irq(tsk, 0);
}
# 11 "./include/linux/hardirq.h" 2
# 1 "./arch/x86/include/asm/hardirq.h" 1






typedef struct {
 u16 __softirq_pending;

 u8 kvm_cpu_l1tf_flush_l1d;

 unsigned int __nmi_count;

 unsigned int apic_timer_irqs;
 unsigned int irq_spurious_count;
 unsigned int icr_read_retry_count;


 unsigned int kvm_posted_intr_ipis;
 unsigned int kvm_posted_intr_wakeup_ipis;
 unsigned int kvm_posted_intr_nested_ipis;

 unsigned int x86_platform_ipis;
 unsigned int apic_perf_irqs;
 unsigned int apic_irq_work_irqs;




 unsigned int irq_tlb_count;

 unsigned int irq_thermal_count;
# 47 "./arch/x86/include/asm/hardirq.h"
} __attribute__((__aligned__((1 << (6))))) irq_cpustat_t;

extern __attribute__((section(".data" ""))) __typeof__(irq_cpustat_t) irq_stat ;





extern void ack_bad_irq(unsigned int irq);

extern u64 arch_irq_stat_cpu(unsigned int cpu);


extern u64 arch_irq_stat(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_set_cpu_l1tf_flush_l1d(void)
{
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(irq_stat.kvm_cpu_l1tf_flush_l1d)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(irq_stat.kvm_cpu_l1tf_flush_l1d)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_clear_cpu_l1tf_flush_l1d(void)
{
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(irq_stat.kvm_cpu_l1tf_flush_l1d)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(irq_stat.kvm_cpu_l1tf_flush_l1d)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) 0) & 0xff)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (0); (void)pto_tmp__; } asm ("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) 0) & 0xffff)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (0); (void)pto_tmp__; } asm ("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) 0) & 0xffffffff)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (0); (void)pto_tmp__; } asm ("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(0)); if (0) { typeof((irq_stat.kvm_cpu_l1tf_flush_l1d)) pto_tmp__; pto_tmp__ = (0); (void)pto_tmp__; } asm ("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((irq_stat.kvm_cpu_l1tf_flush_l1d)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool kvm_get_cpu_l1tf_flush_l1d(void)
{
 return ({ __this_cpu_preempt_check("read"); ({ typeof(irq_stat.kvm_cpu_l1tf_flush_l1d) pscr_ret__; do { const void *__vpp_verify = (typeof((&(irq_stat.kvm_cpu_l1tf_flush_l1d)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(irq_stat.kvm_cpu_l1tf_flush_l1d)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (irq_stat.kvm_cpu_l1tf_flush_l1d)); (typeof(irq_stat.kvm_cpu_l1tf_flush_l1d))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (irq_stat.kvm_cpu_l1tf_flush_l1d)); (typeof(irq_stat.kvm_cpu_l1tf_flush_l1d))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (irq_stat.kvm_cpu_l1tf_flush_l1d)); (typeof(irq_stat.kvm_cpu_l1tf_flush_l1d))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (irq_stat.kvm_cpu_l1tf_flush_l1d)); (typeof(irq_stat.kvm_cpu_l1tf_flush_l1d))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
}
# 12 "./include/linux/hardirq.h" 2

extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __rcu_irq_enter_check_tick(void) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void rcu_irq_enter_check_tick(void)
{
 if (context_tracking_enabled())
  __rcu_irq_enter_check_tick();
}
# 55 "./include/linux/hardirq.h"
void irq_enter(void);



void irq_enter_rcu(void);
# 83 "./include/linux/hardirq.h"
void irq_exit(void);




void irq_exit_rcu(void);
# 99 "./include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 11 "./include/linux/highmem.h" 2

# 1 "./arch/x86/include/asm/cacheflush.h" 1







# 1 "./include/asm-generic/cacheflush.h" 1




struct mm_struct;
struct vm_area_struct;
struct page;
struct address_space;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_cache_all(void)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_cache_mm(struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_cache_dup_mm(struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_cache_range(struct vm_area_struct *vma,
         unsigned long start,
         unsigned long end)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_cache_page(struct vm_area_struct *vma,
        unsigned long vmaddr,
        unsigned long pfn)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_dcache_page(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_dcache_folio(struct folio *folio) { }
# 63 "./include/asm-generic/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_dcache_mmap_lock(struct address_space *mapping)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_dcache_mmap_unlock(struct address_space *mapping)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_icache_range(unsigned long start, unsigned long end)
{
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_icache_page(struct vm_area_struct *vma,
         struct page *page)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_icache_user_page(struct vm_area_struct *vma,
        struct page *page,
        unsigned long addr, int len)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_cache_vmap(unsigned long start, unsigned long end)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_cache_vunmap(unsigned long start, unsigned long end)
{
}
# 9 "./arch/x86/include/asm/cacheflush.h" 2


void clflush_cache_range(void *addr, unsigned int size);
# 13 "./include/linux/highmem.h" 2

# 1 "././include/linux/highmem-internal.h" 1








void *__kmap_local_pfn_prot(unsigned long pfn, pgprot_t prot);
void *__kmap_local_page_prot(struct page *page, pgprot_t prot);
void kunmap_local_indexed(void *vaddr);
void kmap_local_fork(struct task_struct *tsk);
void __kmap_local_sched_out(void);
void __kmap_local_sched_in(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kmap_assert_nomap(void)
{
 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(get_current()->kmap_ctrl.idx), 0)) { ({ asm volatile("270" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "270" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "current->kmap_ctrl.idx"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("271" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "271" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });
}
# 154 "././include/linux/highmem-internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *kmap_to_page(void *addr)
{
 return (((struct page *)vmemmap_base) + (__phys_addr_nodebug((unsigned long)(addr)) >> 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap(struct page *page)
{
 do { __might_sleep("./include/linux/highmem-internal.h", 161); might_resched(); } while (0);
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kunmap_high(struct page *page) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kmap_flush_unused(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kunmap(struct page *page)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_local_page(struct page *page)
{
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_local_folio(struct folio *folio, size_t offset)
{
 return lowmem_page_address(&folio->page) + offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_local_page_prot(struct page *page, pgprot_t prot)
{
 return kmap_local_page(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_local_pfn(unsigned long pfn)
{
 return kmap_local_page((((struct page *)vmemmap_base) + (pfn)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __kunmap_local(void *addr)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_atomic(struct page *page)
{
 if (0)
  migrate_disable();
 else
  do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 pagefault_disable();
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_atomic_prot(struct page *page, pgprot_t prot)
{
 return kmap_atomic(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_atomic_pfn(unsigned long pfn)
{
 return kmap_atomic((((struct page *)vmemmap_base) + (pfn)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __kunmap_atomic(void *addr)
{



 pagefault_enable();
 if (0)
  migrate_enable();
 else
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int nr_free_highpages(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long totalhigh_pages(void) { return 0UL; }
# 15 "./include/linux/highmem.h" 2
# 37 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap(struct page *page);
# 46 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kunmap(struct page *page);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *kmap_to_page(void *addr);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kmap_flush_unused(void);
# 97 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_local_page(struct page *page);
# 134 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_local_folio(struct folio *folio, size_t offset);
# 147 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmap_atomic(struct page *page);
# 161 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int nr_free_highpages(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long totalhigh_pages(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_anon_page(struct vm_area_struct *vma, struct page *page, unsigned long vmaddr)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_kernel_vmap_range(void *vaddr, int size)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invalidate_kernel_vmap_range(void *vaddr, int size)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_user_highpage(struct page *page, unsigned long vaddr)
{
 void *addr = kmap_local_page(page);
 clear_user_page(addr, vaddr, page);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_272(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_272(); } while (0); __kunmap_local(addr); } while (0);
}
# 215 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_highpage(struct page *page)
{
 void *kaddr = kmap_local_page(page);
 clear_page(kaddr);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_273(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((kaddr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_273(); } while (0); __kunmap_local(kaddr); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tag_clear_highpage(struct page *page)
{
}
# 238 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zero_user_segments(struct page *page,
  unsigned start1, unsigned end1,
  unsigned start2, unsigned end2)
{
 void *kaddr = kmap_local_page(page);
 unsigned int i;

 do { if (__builtin_expect(!!(end1 > page_size(page) || end2 > page_size(page)), 0)) do { ({ asm volatile("274" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "274" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("275" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "275" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);

 if (end1 > start1)
  memset(kaddr + start1, 0, end1 - start1);

 if (end2 > start2)
  memset(kaddr + start2, 0, end2 - start2);

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_276(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((kaddr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_276(); } while (0); __kunmap_local(kaddr); } while (0);
 for (i = 0; i < compound_nr(page); i++)
  flush_dcache_page(page + i);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zero_user_segment(struct page *page,
 unsigned start, unsigned end)
{
 zero_user_segments(page, start, end, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zero_user(struct page *page,
 unsigned start, unsigned size)
{
 zero_user_segments(page, start, start + size, 0, 0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_user_highpage(struct page *to, struct page *from,
 unsigned long vaddr, struct vm_area_struct *vma)
{
 char *vfrom, *vto;

 vfrom = kmap_local_page(from);
 vto = kmap_local_page(to);
 copy_user_page(vto, vfrom, vaddr, to);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_277(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vto), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_277(); } while (0); __kunmap_local(vto); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_278(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vfrom), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_278(); } while (0); __kunmap_local(vfrom); } while (0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_highpage(struct page *to, struct page *from)
{
 char *vfrom, *vto;

 vfrom = kmap_local_page(from);
 vto = kmap_local_page(to);
 copy_page(vto, vfrom);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_279(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vto), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_279(); } while (0); __kunmap_local(vto); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_280(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((vfrom), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_280(); } while (0); __kunmap_local(vfrom); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcpy_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 do { if (__builtin_expect(!!(dst_off + len > ((1UL) << 12) || src_off + len > ((1UL) << 12)), 0)) do { ({ asm volatile("281" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "281" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("282" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "282" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 memcpy(dst + dst_off, src + src_off, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_283(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((src), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_283(); } while (0); __kunmap_local(src); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_284(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((dst), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_284(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memmove_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 do { if (__builtin_expect(!!(dst_off + len > ((1UL) << 12) || src_off + len > ((1UL) << 12)), 0)) do { ({ asm volatile("285" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "285" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("286" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "286" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 memmove(dst + dst_off, src + src_off, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_287(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((src), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_287(); } while (0); __kunmap_local(src); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_288(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((dst), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_288(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memset_page(struct page *page, size_t offset, int val,
          size_t len)
{
 char *addr = kmap_local_page(page);

 do { if (__builtin_expect(!!(offset + len > ((1UL) << 12)), 0)) do { ({ asm volatile("289" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "289" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("290" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "290" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 memset(addr + offset, val, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_291(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_291(); } while (0); __kunmap_local(addr); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcpy_from_page(char *to, struct page *page,
        size_t offset, size_t len)
{
 char *from = kmap_local_page(page);

 do { if (__builtin_expect(!!(offset + len > ((1UL) << 12)), 0)) do { ({ asm volatile("292" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "292" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("293" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "293" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 memcpy(to, from + offset, len);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_294(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((from), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((from)), typeof(struct page *))))) __compiletime_assert_294(); } while (0); __kunmap_local(from); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcpy_to_page(struct page *page, size_t offset,
      const char *from, size_t len)
{
 char *to = kmap_local_page(page);

 do { if (__builtin_expect(!!(offset + len > ((1UL) << 12)), 0)) do { ({ asm volatile("295" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "295" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("296" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "296" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 memcpy(to + offset, from, len);
 flush_dcache_page(page);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_297(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((to), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((to)), typeof(struct page *))))) __compiletime_assert_297(); } while (0); __kunmap_local(to); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memzero_page(struct page *page, size_t offset, size_t len)
{
 char *addr = kmap_local_page(page);
 memset(addr + offset, 0, len);
 flush_dcache_page(page);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_298(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__same_type((addr), struct page *)"))); if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_298(); } while (0); __kunmap_local(addr); } while (0);
}
# 17 "arch/x86/kvm/vmx/vmx.c" 2


# 1 "./include/linux/kvm_host.h" 1
# 13 "./include/linux/kvm_host.h"
# 1 "./include/linux/sched/stat.h" 1
# 16 "./include/linux/sched/stat.h"
extern unsigned long total_forks;
extern int nr_threads;
extern __attribute__((section(".data" ""))) __typeof__(unsigned long) process_counts;
extern int nr_processes(void);
extern unsigned int nr_running(void);
extern bool single_task_running(void);
extern unsigned int nr_iowait(void);
extern unsigned int nr_iowait_cpu(int cpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sched_info_on(void)
{
 return 1;
}


void force_schedstat_enabled(void);
# 14 "./include/linux/kvm_host.h" 2



# 1 "./include/linux/mmu_notifier.h" 1
# 10 "./include/linux/mmu_notifier.h"
# 1 "./include/linux/interval_tree.h" 1






struct interval_tree_node {
 struct rb_node rb;
 unsigned long start;
 unsigned long last;
 unsigned long __subtree_last;
};

extern void
interval_tree_insert(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern void
interval_tree_remove(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern struct interval_tree_node *
interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);

extern struct interval_tree_node *
interval_tree_iter_next(struct interval_tree_node *node,
   unsigned long start, unsigned long last);
# 11 "./include/linux/mmu_notifier.h" 2

struct mmu_notifier_subscriptions;
struct mmu_notifier;
struct mmu_notifier_range;
struct mmu_interval_notifier;
# 51 "./include/linux/mmu_notifier.h"
enum mmu_notifier_event {
 MMU_NOTIFY_UNMAP = 0,
 MMU_NOTIFY_CLEAR,
 MMU_NOTIFY_PROTECTION_VMA,
 MMU_NOTIFY_PROTECTION_PAGE,
 MMU_NOTIFY_SOFT_DIRTY,
 MMU_NOTIFY_RELEASE,
 MMU_NOTIFY_MIGRATE,
 MMU_NOTIFY_EXCLUSIVE,
};



struct mmu_notifier_ops {
# 88 "./include/linux/mmu_notifier.h"
 void (*release)(struct mmu_notifier *subscription,
   struct mm_struct *mm);
# 100 "./include/linux/mmu_notifier.h"
 int (*clear_flush_young)(struct mmu_notifier *subscription,
     struct mm_struct *mm,
     unsigned long start,
     unsigned long end);






 int (*clear_young)(struct mmu_notifier *subscription,
      struct mm_struct *mm,
      unsigned long start,
      unsigned long end);







 int (*test_young)(struct mmu_notifier *subscription,
     struct mm_struct *mm,
     unsigned long address);





 void (*change_pte)(struct mmu_notifier *subscription,
      struct mm_struct *mm,
      unsigned long address,
      pte_t pte);
# 184 "./include/linux/mmu_notifier.h"
 int (*invalidate_range_start)(struct mmu_notifier *subscription,
          const struct mmu_notifier_range *range);
 void (*invalidate_range_end)(struct mmu_notifier *subscription,
         const struct mmu_notifier_range *range);
# 207 "./include/linux/mmu_notifier.h"
 void (*invalidate_range)(struct mmu_notifier *subscription,
     struct mm_struct *mm,
     unsigned long start,
     unsigned long end);
# 222 "./include/linux/mmu_notifier.h"
 struct mmu_notifier *(*alloc_notifier)(struct mm_struct *mm);
 void (*free_notifier)(struct mmu_notifier *subscription);
};
# 237 "./include/linux/mmu_notifier.h"
struct mmu_notifier {
 struct hlist_node hlist;
 const struct mmu_notifier_ops *ops;
 struct mm_struct *mm;
 struct callback_head rcu;
 unsigned int users;
};







struct mmu_interval_notifier_ops {
 bool (*invalidate)(struct mmu_interval_notifier *interval_sub,
      const struct mmu_notifier_range *range,
      unsigned long cur_seq);
};

struct mmu_interval_notifier {
 struct interval_tree_node interval_tree;
 const struct mmu_interval_notifier_ops *ops;
 struct mm_struct *mm;
 struct hlist_node deferred_item;
 unsigned long invalidate_seq;
};




extern struct lockdep_map __mmu_notifier_invalidate_range_start_map;


struct mmu_notifier_range {
 struct vm_area_struct *vma;
 struct mm_struct *mm;
 unsigned long start;
 unsigned long end;
 unsigned flags;
 enum mmu_notifier_event event;
 void *owner;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mm_has_notifiers(struct mm_struct *mm)
{
 return __builtin_expect(!!(mm->notifier_subscriptions), 0);
}

struct mmu_notifier *mmu_notifier_get_locked(const struct mmu_notifier_ops *ops,
          struct mm_struct *mm);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mmu_notifier *
mmu_notifier_get(const struct mmu_notifier_ops *ops, struct mm_struct *mm)
{
 struct mmu_notifier *ret;

 mmap_write_lock(mm);
 ret = mmu_notifier_get_locked(ops, mm);
 mmap_write_unlock(mm);
 return ret;
}
void mmu_notifier_put(struct mmu_notifier *subscription);
void mmu_notifier_synchronize(void);

extern int mmu_notifier_register(struct mmu_notifier *subscription,
     struct mm_struct *mm);
extern int __mmu_notifier_register(struct mmu_notifier *subscription,
       struct mm_struct *mm);
extern void mmu_notifier_unregister(struct mmu_notifier *subscription,
        struct mm_struct *mm);

unsigned long
mmu_interval_read_begin(struct mmu_interval_notifier *interval_sub);
int mmu_interval_notifier_insert(struct mmu_interval_notifier *interval_sub,
     struct mm_struct *mm, unsigned long start,
     unsigned long length,
     const struct mmu_interval_notifier_ops *ops);
int mmu_interval_notifier_insert_locked(
 struct mmu_interval_notifier *interval_sub, struct mm_struct *mm,
 unsigned long start, unsigned long length,
 const struct mmu_interval_notifier_ops *ops);
void mmu_interval_notifier_remove(struct mmu_interval_notifier *interval_sub);
# 333 "./include/linux/mmu_notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
mmu_interval_set_seq(struct mmu_interval_notifier *interval_sub,
       unsigned long cur_seq)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_299(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(interval_sub->invalidate_seq) == sizeof(char) || sizeof(interval_sub->invalidate_seq) == sizeof(short) || sizeof(interval_sub->invalidate_seq) == sizeof(int) || sizeof(interval_sub->invalidate_seq) == sizeof(long)) || sizeof(interval_sub->invalidate_seq) == sizeof(long long))) __compiletime_assert_299(); } while (0); do { *(volatile typeof(interval_sub->invalidate_seq) *)&(interval_sub->invalidate_seq) = (cur_seq); } while (0); } while (0);
}
# 354 "./include/linux/mmu_notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
mmu_interval_read_retry(struct mmu_interval_notifier *interval_sub,
   unsigned long seq)
{
 return interval_sub->invalidate_seq != seq;
}
# 378 "./include/linux/mmu_notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
mmu_interval_check_retry(struct mmu_interval_notifier *interval_sub,
    unsigned long seq)
{

 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_300(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(interval_sub->invalidate_seq) == sizeof(char) || sizeof(interval_sub->invalidate_seq) == sizeof(short) || sizeof(interval_sub->invalidate_seq) == sizeof(int) || sizeof(interval_sub->invalidate_seq) == sizeof(long)) || sizeof(interval_sub->invalidate_seq) == sizeof(long long))) __compiletime_assert_300(); } while (0); (*(const volatile typeof( _Generic((interval_sub->invalidate_seq), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (interval_sub->invalidate_seq))) *)&(interval_sub->invalidate_seq)); }) != seq;
}

extern void __mmu_notifier_subscriptions_destroy(struct mm_struct *mm);
extern void __mmu_notifier_release(struct mm_struct *mm);
extern int __mmu_notifier_clear_flush_young(struct mm_struct *mm,
       unsigned long start,
       unsigned long end);
extern int __mmu_notifier_clear_young(struct mm_struct *mm,
          unsigned long start,
          unsigned long end);
extern int __mmu_notifier_test_young(struct mm_struct *mm,
         unsigned long address);
extern void __mmu_notifier_change_pte(struct mm_struct *mm,
          unsigned long address, pte_t pte);
extern int __mmu_notifier_invalidate_range_start(struct mmu_notifier_range *r);
extern void __mmu_notifier_invalidate_range_end(struct mmu_notifier_range *r,
      bool only_end);
extern void __mmu_notifier_invalidate_range(struct mm_struct *mm,
      unsigned long start, unsigned long end);
extern bool
mmu_notifier_range_update_to_read_only(const struct mmu_notifier_range *range);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
mmu_notifier_range_blockable(const struct mmu_notifier_range *range)
{
 return (range->flags & (1 << 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmu_notifier_release(struct mm_struct *mm)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_release(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmu_notifier_clear_flush_young(struct mm_struct *mm,
       unsigned long start,
       unsigned long end)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_clear_flush_young(mm, start, end);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmu_notifier_clear_young(struct mm_struct *mm,
        unsigned long start,
        unsigned long end)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_clear_young(mm, start, end);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmu_notifier_test_young(struct mm_struct *mm,
       unsigned long address)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_test_young(mm, address);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmu_notifier_change_pte(struct mm_struct *mm,
        unsigned long address, pte_t pte)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_change_pte(mm, address, pte);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
mmu_notifier_invalidate_range_start(struct mmu_notifier_range *range)
{
 do { __might_sleep("include/linux/mmu_notifier.h", 454); might_resched(); } while (0);

 lock_acquire(&__mmu_notifier_invalidate_range_start_map, 0, 0, 0, 1, ((void *)0), ({ __label__ __here; __here: (unsigned long)&&__here; }));
 if (mm_has_notifiers(range->mm)) {
  range->flags |= (1 << 0);
  __mmu_notifier_invalidate_range_start(range);
 }
 lock_release(&__mmu_notifier_invalidate_range_start_map, ({ __label__ __here; __here: (unsigned long)&&__here; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
mmu_notifier_invalidate_range_start_nonblock(struct mmu_notifier_range *range)
{
 int ret = 0;

 lock_acquire(&__mmu_notifier_invalidate_range_start_map, 0, 0, 0, 1, ((void *)0), ({ __label__ __here; __here: (unsigned long)&&__here; }));
 if (mm_has_notifiers(range->mm)) {
  range->flags &= ~(1 << 0);
  ret = __mmu_notifier_invalidate_range_start(range);
 }
 lock_release(&__mmu_notifier_invalidate_range_start_map, ({ __label__ __here; __here: (unsigned long)&&__here; }));
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
mmu_notifier_invalidate_range_end(struct mmu_notifier_range *range)
{
 if (mmu_notifier_range_blockable(range))
  do { __might_sleep("include/linux/mmu_notifier.h", 482); might_resched(); } while (0);

 if (mm_has_notifiers(range->mm))
  __mmu_notifier_invalidate_range_end(range, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
mmu_notifier_invalidate_range_only_end(struct mmu_notifier_range *range)
{
 if (mm_has_notifiers(range->mm))
  __mmu_notifier_invalidate_range_end(range, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmu_notifier_invalidate_range(struct mm_struct *mm,
      unsigned long start, unsigned long end)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_invalidate_range(mm, start, end);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmu_notifier_subscriptions_init(struct mm_struct *mm)
{
 mm->notifier_subscriptions = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmu_notifier_subscriptions_destroy(struct mm_struct *mm)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_subscriptions_destroy(mm);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmu_notifier_range_init(struct mmu_notifier_range *range,
        enum mmu_notifier_event event,
        unsigned flags,
        struct vm_area_struct *vma,
        struct mm_struct *mm,
        unsigned long start,
        unsigned long end)
{
 range->vma = vma;
 range->event = event;
 range->mm = mm;
 range->start = start;
 range->end = end;
 range->flags = flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmu_notifier_range_init_owner(
   struct mmu_notifier_range *range,
   enum mmu_notifier_event event, unsigned int flags,
   struct vm_area_struct *vma, struct mm_struct *mm,
   unsigned long start, unsigned long end, void *owner)
{
 mmu_notifier_range_init(range, event, flags, vma, mm, start, end);
 range->owner = owner;
}
# 18 "./include/linux/kvm_host.h" 2

# 1 "./include/linux/msi.h" 1




# 1 "./include/linux/kobject.h" 1
# 20 "./include/linux/kobject.h"
# 1 "./include/linux/sysfs.h" 1
# 16 "./include/linux/sysfs.h"
# 1 "./include/linux/kernfs.h" 1
# 13 "./include/linux/kernfs.h"
# 1 "./include/linux/idr.h" 1
# 19 "./include/linux/idr.h"
struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 66 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_301(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_301(); } while (0); (*(const volatile typeof( _Generic((idr->idr_next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (idr->idr_next))) *)&(idr->idr_next)); });
}
# 79 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_302(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_302(); } while (0); do { *(volatile typeof(idr->idr_next) *)&(idr->idr_next) = (val); } while (0); } while (0);
}
# 112 "./include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
    unsigned long max, gfp_t);
int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
void *idr_remove(struct idr *, unsigned long id);
void *idr_find(const struct idr *, unsigned long id);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ul(struct idr *, unsigned long *nextid);
void *idr_replace(struct idr *, void *, unsigned long id);
void idr_destroy(struct idr *);
# 135 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((25 + 1)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 149 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_preload_end(void)
{
 do { local_lock_release(({ (void)(0); ({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0);
}
# 240 "./include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

struct ida {
 struct xarray xa;
};
# 255 "./include/linux/idr.h"
int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
void ida_free(struct ida *, unsigned int id);
void ida_destroy(struct ida *ida);
# 271 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ida_alloc(struct ida *ida, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, ~0, gfp);
}
# 289 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
{
 return ida_alloc_range(ida, min, ~0, gfp);
}
# 307 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, max, gfp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ida_init(struct ida *ida)
{
 xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (25 + 1)) << ( unsigned)((( xa_mark_t)0U)))))));
}
# 325 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ida_is_empty(const struct ida *ida)
{
 return xa_empty(&ida->xa);
}
# 14 "./include/linux/kernfs.h" 2






struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;
struct fs_context;

struct kernfs_fs_context;
struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};






enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 76 "./include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,




 KERNFS_ROOT_SUPPORT_USER_XATTR = 0x0008,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;




 unsigned long rev;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};
# 128 "./include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;

 struct lockdep_map dep_map;







 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;





 u64 id;

 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 173 "./include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 last_id_lowbits;
 u32 id_highbits;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 241 "./include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 257 "./include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);
};




struct kernfs_fs_context {
 struct kernfs_root *root;
 void *ns_tag;
 unsigned long magic;


 bool new_sb_created;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t kernfs_id_ino(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return id;
 else
  return (u32)id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 kernfs_id_gen(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return 1;
 else
  return id >> 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t kernfs_ino(struct kernfs_node *kn)
{
 return kernfs_id_ino(kn->id);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t kernfs_gen(struct kernfs_node *kn)
{
 return kernfs_id_gen(kn->id);
}
# 329 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_303(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&kn->dir.children)->rb_node) == sizeof(char) || sizeof((&kn->dir.children)->rb_node) == sizeof(short) || sizeof((&kn->dir.children)->rb_node) == sizeof(int) || sizeof((&kn->dir.children)->rb_node) == sizeof(long)) || sizeof((&kn->dir.children)->rb_node) == sizeof(long long))) __compiletime_assert_303(); } while (0); (*(const volatile typeof( _Generic(((&kn->dir.children)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&kn->dir.children)->rb_node))) *)&((&kn->dir.children)->rb_node)); }) == ((void *)0))); __builtin_expect(!!(__ret_warn_on), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
        struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
       void *value, size_t size);
int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
       const void *value, size_t size, int flags);

const void *kernfs_super_ns(struct super_block *sb);
int kernfs_get_tree(struct fs_context *fc);
void kernfs_free_fs_context(struct fs_context *fc);
void kernfs_kill_sb(struct super_block *sb);

void kernfs_init(void);

struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *root,
         u64 id);
# 541 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode,
        (kuid_t){ 0 }, (kgid_t){ 0 },
        priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}
# 17 "./include/linux/sysfs.h" 2




# 1 "./include/linux/kobject_ns.h" 1
# 19 "./include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 39 "./include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "./include/linux/sysfs.h" 2



struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;

 bool ignore_lockdep:1;
 struct lock_class_key *key;
 struct lock_class_key skey;

};
# 84 "./include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 171 "./include/linux/sysfs.h"
struct file;
struct vm_area_struct;
struct address_space;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 struct address_space *(*f_mapping)(void);
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 238 "./include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
       const struct attribute * const *attr);
int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
      struct kobject *target_kobj,
      const char *target_name,
      const char *symlink_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((__warn_unused_result__)) sysfs_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}

int sysfs_file_change_owner(struct kobject *kobj, const char *name, kuid_t kuid,
       kgid_t kgid);
int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid);
int sysfs_link_change_owner(struct kobject *kobj, struct kobject *targ,
       const char *name, kuid_t kuid, kgid_t kgid);
int sysfs_groups_change_owner(struct kobject *kobj,
         const struct attribute_group **groups,
         kuid_t kuid, kgid_t kgid);
int sysfs_group_change_owner(struct kobject *kobj,
        const struct attribute_group *groups, kuid_t kuid,
        kgid_t kgid);
__attribute__((__format__(printf, 2, 3)))
int sysfs_emit(char *buf, const char *fmt, ...);
__attribute__((__format__(printf, 3, 4)))
int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
# 604 "./include/linux/sysfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 21 "./include/linux/kobject.h" 2


# 1 "./include/linux/kref.h" 1
# 19 "./include/linux/kref.h"
struct kref {
 refcount_t refcount;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kref_get(struct kref *kref)
{
 refcount_inc(&kref->refcount);
}
# 62 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 109 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero(&kref->refcount);
}
# 24 "./include/linux/kobject.h" 2
# 41 "./include/linux/kobject.h"
extern u64 uevent_seqnum;
# 53 "./include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((__format__(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((__format__(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern void kobject_get_ownership(struct kobject *kobj,
      kuid_t *uid, kgid_t *gid);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 130 "./include/linux/kobject.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kobject_has_children(struct kobject *kobj)
{
 ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); __builtin_expect(!!(__ret_warn_on), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[64];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 191 "./include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); _Static_assert(__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) || __builtin_types_compatible_p(typeof(*(kobj)), typeof(void)), "pointer type mismatch in container_of()"); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((__format__(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 6 "./include/linux/msi.h" 2

# 1 "./arch/x86/include/asm/msi.h" 1



# 1 "./arch/x86/include/asm/hw_irq.h" 1
# 17 "./arch/x86/include/asm/hw_irq.h"
# 1 "./arch/x86/include/asm/irq_vectors.h" 1
# 18 "./arch/x86/include/asm/hw_irq.h" 2






# 1 "./include/linux/profile.h" 1
# 10 "./include/linux/profile.h"
# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
# 11 "./include/linux/profile.h" 2






struct proc_dir_entry;
struct notifier_block;


void create_prof_cpu_mask(void);
int create_proc_profile(void);
# 34 "./include/linux/profile.h"
enum profile_type {
 PROFILE_TASK_EXIT,
 PROFILE_MUNMAP
};



extern int prof_on __attribute__((__section__(".data..read_mostly")));


int profile_init(void);
int profile_setup(char *str);
void profile_tick(int type);
int setup_profiling_timer(unsigned int multiplier);




void profile_hits(int type, void *ip, unsigned int nr_hits);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void profile_hit(int type, void *ip)
{



 if (__builtin_expect(!!(prof_on == type), 0))
  profile_hits(type, ip, 1);
}

struct task_struct;
struct mm_struct;


void profile_task_exit(struct task_struct * task);




int profile_handoff_task(struct task_struct * task);


void profile_munmap(unsigned long addr);

int task_handoff_register(struct notifier_block * n);
int task_handoff_unregister(struct notifier_block * n);

int profile_event_register(enum profile_type, struct notifier_block * n);
int profile_event_unregister(enum profile_type, struct notifier_block * n);
# 25 "./arch/x86/include/asm/hw_irq.h" 2



# 1 "./arch/x86/include/asm/irq.h" 1
# 21 "./arch/x86/include/asm/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_canonicalize(int irq)
{
 return ((irq == 2) ? 9 : irq);
}

extern int irq_init_percpu_irqstack(unsigned int cpu);

struct irq_desc;

extern void fixup_irqs(void);


extern void kvm_set_posted_intr_wakeup_handler(void (*handler)(void));


extern void (*x86_platform_ipi_callback)(void);
extern void native_init_IRQ(void);

extern void __handle_irq(struct irq_desc *desc, struct pt_regs *regs);

extern void init_ISA_irqs(void);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_IRQ(void);


void arch_trigger_cpumask_backtrace(const struct cpumask *mask,
        bool exclude_self);
# 29 "./arch/x86/include/asm/hw_irq.h" 2
# 1 "./arch/x86/include/asm/sections.h" 1






# 1 "./include/asm-generic/sections.h" 1
# 35 "./include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];
extern char __start_once[], __end_once[];


extern char __ctors_start[], __ctors_end[];


extern char __start_opd[], __end_opd[];


extern char __noinstr_text_start[], __noinstr_text_end[];

extern const void __nosave_begin, __nosave_end;
# 78 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 95 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 112 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 126 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 141 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_kernel_core_data(unsigned long addr)
{
 return addr >= (unsigned long)_sdata &&
        addr < (unsigned long)_edata;
}
# 155 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_kernel_rodata(unsigned long addr)
{
 return addr >= (unsigned long)__start_rodata &&
        addr < (unsigned long)__end_rodata;
}
# 169 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_kernel_inittext(unsigned long addr)
{
 return addr >= (unsigned long)_sinittext &&
        addr < (unsigned long)_einittext;
}
# 184 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __is_kernel_text(unsigned long addr)
{
 return addr >= (unsigned long)_stext &&
        addr < (unsigned long)_etext;
}
# 198 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __is_kernel(unsigned long addr)
{
 return addr >= (unsigned long)_stext &&
        addr < (unsigned long)_end;
}
# 8 "./arch/x86/include/asm/sections.h" 2


extern char __brk_base[], __brk_limit[];
extern char __end_rodata_aligned[];


extern char __end_rodata_hpage_align[];


extern char __end_of_kernel_reserve[];

extern unsigned long _brk_start, _brk_end;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_is_kernel_initmem_freed(unsigned long addr)
{




 if (_brk_start)
  return 0;





 return addr >= _brk_end && addr < (unsigned long)&_end;
}
# 30 "./arch/x86/include/asm/hw_irq.h" 2


struct irq_data;
struct pci_dev;
struct msi_desc;

enum irq_alloc_type {
 X86_IRQ_ALLOC_TYPE_IOAPIC = 1,
 X86_IRQ_ALLOC_TYPE_HPET,
 X86_IRQ_ALLOC_TYPE_PCI_MSI,
 X86_IRQ_ALLOC_TYPE_PCI_MSIX,
 X86_IRQ_ALLOC_TYPE_DMAR,
 X86_IRQ_ALLOC_TYPE_AMDVI,
 X86_IRQ_ALLOC_TYPE_UV,
};

struct ioapic_alloc_info {
 int pin;
 int node;
 u32 is_level : 1;
 u32 active_low : 1;
 u32 valid : 1;
};

struct uv_alloc_info {
 int limit;
 int blade;
 unsigned long offset;
 char *name;

};
# 75 "./arch/x86/include/asm/hw_irq.h"
struct irq_alloc_info {
 enum irq_alloc_type type;
 u32 flags;
 u32 devid;
 irq_hw_number_t hwirq;
 const struct cpumask *mask;
 struct msi_desc *desc;
 void *data;

 union {
  struct ioapic_alloc_info ioapic;
  struct uv_alloc_info uv;
 };
};

struct irq_cfg {
 unsigned int dest_apicid;
 unsigned int vector;
};

extern struct irq_cfg *irq_cfg(unsigned int irq);
extern struct irq_cfg *irqd_cfg(struct irq_data *irq_data);
extern void lock_vector_lock(void);
extern void unlock_vector_lock(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void send_cleanup_vector(struct irq_cfg *c) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_complete_move(struct irq_cfg *c) { }


extern void apic_ack_edge(struct irq_data *data);






extern atomic_t irq_err_count;
extern atomic_t irq_mis_count;

extern void elcr_set_level_irq(unsigned int irq);

extern char irq_entries_start[];




extern char spurious_entries_start[];





typedef struct irq_desc* vector_irq_t[256];
extern __attribute__((section(".data" ""))) __typeof__(vector_irq_t) vector_irq;
# 5 "./arch/x86/include/asm/msi.h" 2
# 1 "./arch/x86/include/asm/irqdomain.h" 1




# 1 "./include/linux/irqdomain.h" 1
# 34 "./include/linux/irqdomain.h"
# 1 "./include/linux/irqhandler.h" 1
# 10 "./include/linux/irqhandler.h"
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(struct irq_desc *desc);
# 35 "./include/linux/irqdomain.h" 2
# 1 "./include/linux/of.h" 1
# 18 "./include/linux/of.h"
# 1 "./include/linux/mod_devicetable.h" 1
# 14 "./include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;




enum {
 PCI_ID_F_VFIO_DRIVER_OVERRIDE = 1,
};
# 43 "./include/linux/mod_devicetable.h"
struct pci_device_id {
 __u32 vendor, device;
 __u32 subvendor, subdevice;
 __u32 class, class_mask;
 kernel_ulong_t driver_data;
 __u32 override_only;
};







struct ieee1394_device_id {
 __u32 match_flags;
 __u32 vendor_id;
 __u32 model_id;
 __u32 specifier_id;
 __u32 version;
 kernel_ulong_t driver_data;
};
# 127 "./include/linux/mod_devicetable.h"
struct usb_device_id {

 __u16 match_flags;


 __u16 idVendor;
 __u16 idProduct;
 __u16 bcdDevice_lo;
 __u16 bcdDevice_hi;


 __u8 bDeviceClass;
 __u8 bDeviceSubClass;
 __u8 bDeviceProtocol;


 __u8 bInterfaceClass;
 __u8 bInterfaceSubClass;
 __u8 bInterfaceProtocol;


 __u8 bInterfaceNumber;


 kernel_ulong_t driver_info
  __attribute__((aligned(sizeof(kernel_ulong_t))));
};
# 172 "./include/linux/mod_devicetable.h"
struct hid_device_id {
 __u16 bus;
 __u16 group;
 __u32 vendor;
 __u32 product;
 kernel_ulong_t driver_data;
};


struct ccw_device_id {
 __u16 match_flags;

 __u16 cu_type;
 __u16 dev_type;
 __u8 cu_model;
 __u8 dev_model;

 kernel_ulong_t driver_info;
};







struct ap_device_id {
 __u16 match_flags;
 __u8 dev_type;
 kernel_ulong_t driver_info;
};





struct css_device_id {
 __u8 match_flags;
 __u8 type;
 kernel_ulong_t driver_data;
};



struct acpi_device_id {
 __u8 id[9];
 kernel_ulong_t driver_data;
 __u32 cls;
 __u32 cls_msk;
};




struct pnp_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
 struct {
  __u8 id[8];
 } devs[8];
};




struct serio_device_id {
 __u8 type;
 __u8 extra;
 __u8 id;
 __u8 proto;
};

struct hda_device_id {
 __u32 vendor_id;
 __u32 rev_id;
 __u8 api_version;
 const char *name;
 unsigned long driver_data;
};

struct sdw_device_id {
 __u16 mfg_id;
 __u16 part_id;
 __u8 sdw_version;
 __u8 class_id;
 kernel_ulong_t driver_data;
};




struct of_device_id {
 char name[32];
 char type[32];
 char compatible[128];
 const void *data;
};


struct vio_device_id {
 char type[32];
 char compat[32];
};



struct pcmcia_device_id {
 __u16 match_flags;

 __u16 manf_id;
 __u16 card_id;

 __u8 func_id;


 __u8 function;


 __u8 device_no;

 __u32 prod_id_hash[4];


 const char * prod_id[4];


 kernel_ulong_t driver_info;
 char * cisfile;
};
# 348 "./include/linux/mod_devicetable.h"
struct input_device_id {

 kernel_ulong_t flags;

 __u16 bustype;
 __u16 vendor;
 __u16 product;
 __u16 version;

 kernel_ulong_t evbit[0x1f / 64 + 1];
 kernel_ulong_t keybit[0x2ff / 64 + 1];
 kernel_ulong_t relbit[0x0f / 64 + 1];
 kernel_ulong_t absbit[0x3f / 64 + 1];
 kernel_ulong_t mscbit[0x07 / 64 + 1];
 kernel_ulong_t ledbit[0x0f / 64 + 1];
 kernel_ulong_t sndbit[0x07 / 64 + 1];
 kernel_ulong_t ffbit[0x7f / 64 + 1];
 kernel_ulong_t swbit[0x10 / 64 + 1];
 kernel_ulong_t propbit[0x1f / 64 + 1];

 kernel_ulong_t driver_info;
};






struct eisa_device_id {
 char sig[8];
 kernel_ulong_t driver_data;
};



struct parisc_device_id {
 __u8 hw_type;
 __u8 hversion_rev;
 __u16 hversion;
 __u32 sversion;
};
# 399 "./include/linux/mod_devicetable.h"
struct sdio_device_id {
 __u8 class;
 __u16 vendor;
 __u16 device;
 kernel_ulong_t driver_data;
};


struct ssb_device_id {
 __u16 vendor;
 __u16 coreid;
 __u8 revision;
 __u8 __pad;
} __attribute__((packed, aligned(2)));
# 421 "./include/linux/mod_devicetable.h"
struct bcma_device_id {
 __u16 manuf;
 __u16 id;
 __u8 rev;
 __u8 class;
} __attribute__((packed,aligned(2)));
# 435 "./include/linux/mod_devicetable.h"
struct virtio_device_id {
 __u32 device;
 __u32 vendor;
};





struct hv_vmbus_device_id {
 guid_t guid;
 kernel_ulong_t driver_data;
};






struct rpmsg_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct i2c_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct pci_epf_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 486 "./include/linux/mod_devicetable.h"
struct i3c_device_id {
 __u8 match_flags;
 __u8 dcr;
 __u16 manuf_id;
 __u16 part_id;
 __u16 extra_info;

 const void *data;
};






struct spi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct slim_device_id {
 __u16 manf_id, prod_code;
 __u16 dev_index, instance;


 kernel_ulong_t driver_data;
};




struct apr_device_id {
 char name[32];
 __u32 domain_id;
 __u32 svc_id;
 __u32 svc_version;
 kernel_ulong_t driver_data;
};




struct spmi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};


enum dmi_field {
 DMI_NONE,
 DMI_BIOS_VENDOR,
 DMI_BIOS_VERSION,
 DMI_BIOS_DATE,
 DMI_BIOS_RELEASE,
 DMI_EC_FIRMWARE_RELEASE,
 DMI_SYS_VENDOR,
 DMI_PRODUCT_NAME,
 DMI_PRODUCT_VERSION,
 DMI_PRODUCT_SERIAL,
 DMI_PRODUCT_UUID,
 DMI_PRODUCT_SKU,
 DMI_PRODUCT_FAMILY,
 DMI_BOARD_VENDOR,
 DMI_BOARD_NAME,
 DMI_BOARD_VERSION,
 DMI_BOARD_SERIAL,
 DMI_BOARD_ASSET_TAG,
 DMI_CHASSIS_VENDOR,
 DMI_CHASSIS_TYPE,
 DMI_CHASSIS_VERSION,
 DMI_CHASSIS_SERIAL,
 DMI_CHASSIS_ASSET_TAG,
 DMI_STRING_MAX,
 DMI_OEM_STRING,
};

struct dmi_strmatch {
 unsigned char slot:7;
 unsigned char exact_match:1;
 char substr[79];
};

struct dmi_system_id {
 int (*callback)(const struct dmi_system_id *);
 const char *ident;
 struct dmi_strmatch matches[4];
 void *driver_data;
};
# 593 "./include/linux/mod_devicetable.h"
struct platform_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 620 "./include/linux/mod_devicetable.h"
struct mdio_device_id {
 __u32 phy_id;
 __u32 phy_id_mask;
};

struct zorro_device_id {
 __u32 id;
 kernel_ulong_t driver_data;
};






struct isapnp_device_id {
 unsigned short card_vendor, card_device;
 unsigned short vendor, function;
 kernel_ulong_t driver_data;
};
# 649 "./include/linux/mod_devicetable.h"
struct amba_id {
 unsigned int id;
 unsigned int mask;
 void *data;
};





struct mips_cdmm_device_id {
 __u8 type;
};
# 673 "./include/linux/mod_devicetable.h"
struct x86_cpu_id {
 __u16 vendor;
 __u16 family;
 __u16 model;
 __u16 steppings;
 __u16 feature;
 kernel_ulong_t driver_data;
};
# 694 "./include/linux/mod_devicetable.h"
struct cpu_feature {
 __u16 feature;
};



struct ipack_device_id {
 __u8 format;
 __u32 vendor;
 __u32 device;
};
# 719 "./include/linux/mod_devicetable.h"
struct mei_cl_device_id {
 char name[32];
 uuid_le uuid;
 __u8 version;
 kernel_ulong_t driver_info;
};
# 740 "./include/linux/mod_devicetable.h"
struct rio_device_id {
 __u16 did, vid;
 __u16 asm_did, asm_vid;
};

struct mcb_device_id {
 __u16 device;
 kernel_ulong_t driver_data;
};

struct ulpi_device_id {
 __u16 vendor;
 __u16 product;
 kernel_ulong_t driver_data;
};
# 764 "./include/linux/mod_devicetable.h"
struct fsl_mc_device_id {
 __u16 vendor;
 const char obj_type[16];
};
# 782 "./include/linux/mod_devicetable.h"
struct tb_service_id {
 __u32 match_flags;
 char protocol_key[8 + 1];
 __u32 protocol_id;
 __u32 protocol_version;
 __u32 protocol_revision;
 kernel_ulong_t driver_data;
};
# 806 "./include/linux/mod_devicetable.h"
struct typec_device_id {
 __u16 svid;
 __u8 mode;
 kernel_ulong_t driver_data;
};






struct tee_client_device_id {
 uuid_t uuid;
};
# 830 "./include/linux/mod_devicetable.h"
struct wmi_device_id {
 const char guid_string[36 +1];
 const void *context;
};
# 843 "./include/linux/mod_devicetable.h"
struct mhi_device_id {
 const char chan[32];
 kernel_ulong_t driver_data;
};




struct auxiliary_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};







struct ssam_device_id {
 __u8 match_flags;

 __u8 domain;
 __u8 category;
 __u8 target;
 __u8 instance;
 __u8 function;

 kernel_ulong_t driver_data;
};
# 892 "./include/linux/mod_devicetable.h"
struct dfl_device_id {
 __u16 type;
 __u16 feature_id;
 kernel_ulong_t driver_data;
};
# 19 "./include/linux/of.h" 2



# 1 "./include/linux/property.h" 1
# 14 "./include/linux/property.h"
# 1 "./include/linux/fwnode.h" 1
# 17 "./include/linux/fwnode.h"
struct fwnode_operations;
struct device;
# 36 "./include/linux/fwnode.h"
struct fwnode_handle {
 struct fwnode_handle *secondary;
 const struct fwnode_operations *ops;
 struct device *dev;
 struct list_head suppliers;
 struct list_head consumers;
 u8 flags;
};

struct fwnode_link {
 struct fwnode_handle *supplier;
 struct list_head s_hook;
 struct fwnode_handle *consumer;
 struct list_head c_hook;
};







struct fwnode_endpoint {
 unsigned int port;
 unsigned int id;
 const struct fwnode_handle *local_fwnode;
};
# 79 "./include/linux/fwnode.h"
struct fwnode_reference_args {
 struct fwnode_handle *fwnode;
 unsigned int nargs;
 u64 args[8];
};
# 110 "./include/linux/fwnode.h"
struct fwnode_operations {
 struct fwnode_handle *(*get)(struct fwnode_handle *fwnode);
 void (*put)(struct fwnode_handle *fwnode);
 bool (*device_is_available)(const struct fwnode_handle *fwnode);
 const void *(*device_get_match_data)(const struct fwnode_handle *fwnode,
          const struct device *dev);
 bool (*property_present)(const struct fwnode_handle *fwnode,
     const char *propname);
 int (*property_read_int_array)(const struct fwnode_handle *fwnode,
           const char *propname,
           unsigned int elem_size, void *val,
           size_t nval);
 int
 (*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
          const char *propname, const char **val,
          size_t nval);
 const char *(*get_name)(const struct fwnode_handle *fwnode);
 const char *(*get_name_prefix)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*get_next_child_node)(const struct fwnode_handle *fwnode,
          struct fwnode_handle *child);
 struct fwnode_handle *
 (*get_named_child_node)(const struct fwnode_handle *fwnode,
    const char *name);
 int (*get_reference_args)(const struct fwnode_handle *fwnode,
      const char *prop, const char *nargs_prop,
      unsigned int nargs, unsigned int index,
      struct fwnode_reference_args *args);
 struct fwnode_handle *
 (*graph_get_next_endpoint)(const struct fwnode_handle *fwnode,
       struct fwnode_handle *prev);
 struct fwnode_handle *
 (*graph_get_remote_endpoint)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*graph_get_port_parent)(struct fwnode_handle *fwnode);
 int (*graph_parse_endpoint)(const struct fwnode_handle *fwnode,
        struct fwnode_endpoint *endpoint);
 int (*add_links)(struct fwnode_handle *fwnode);
};
# 172 "./include/linux/fwnode.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fwnode_init(struct fwnode_handle *fwnode,
          const struct fwnode_operations *ops)
{
 fwnode->ops = ops;
 INIT_LIST_HEAD(&fwnode->consumers);
 INIT_LIST_HEAD(&fwnode->suppliers);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fwnode_dev_initialized(struct fwnode_handle *fwnode,
       bool initialized)
{
 if (IS_ERR_OR_NULL(fwnode))
  return;

 if (initialized)
  fwnode->flags |= ((((1UL))) << (2));
 else
  fwnode->flags &= ~((((1UL))) << (2));
}

extern u32 fw_devlink_get_flags(void);
extern bool fw_devlink_is_strict(void);
int fwnode_link_add(struct fwnode_handle *con, struct fwnode_handle *sup);
void fwnode_links_purge(struct fwnode_handle *fwnode);
void fw_devlink_purge_absent_suppliers(struct fwnode_handle *fwnode);
# 15 "./include/linux/property.h" 2


struct device;
struct net_device;

enum dev_prop_type {
 DEV_PROP_U8,
 DEV_PROP_U16,
 DEV_PROP_U32,
 DEV_PROP_U64,
 DEV_PROP_STRING,
 DEV_PROP_REF,
};

enum dev_dma_attr {
 DEV_DMA_NOT_SUPPORTED,
 DEV_DMA_NON_COHERENT,
 DEV_DMA_COHERENT,
};

struct fwnode_handle *dev_fwnode(struct device *dev);

bool device_property_present(struct device *dev, const char *propname);
int device_property_read_u8_array(struct device *dev, const char *propname,
      u8 *val, size_t nval);
int device_property_read_u16_array(struct device *dev, const char *propname,
       u16 *val, size_t nval);
int device_property_read_u32_array(struct device *dev, const char *propname,
       u32 *val, size_t nval);
int device_property_read_u64_array(struct device *dev, const char *propname,
       u64 *val, size_t nval);
int device_property_read_string_array(struct device *dev, const char *propname,
          const char **val, size_t nval);
int device_property_read_string(struct device *dev, const char *propname,
    const char **val);
int device_property_match_string(struct device *dev,
     const char *propname, const char *string);

bool fwnode_device_is_available(const struct fwnode_handle *fwnode);
bool fwnode_property_present(const struct fwnode_handle *fwnode,
        const char *propname);
int fwnode_property_read_u8_array(const struct fwnode_handle *fwnode,
      const char *propname, u8 *val,
      size_t nval);
int fwnode_property_read_u16_array(const struct fwnode_handle *fwnode,
       const char *propname, u16 *val,
       size_t nval);
int fwnode_property_read_u32_array(const struct fwnode_handle *fwnode,
       const char *propname, u32 *val,
       size_t nval);
int fwnode_property_read_u64_array(const struct fwnode_handle *fwnode,
       const char *propname, u64 *val,
       size_t nval);
int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
          const char *propname, const char **val,
          size_t nval);
int fwnode_property_read_string(const struct fwnode_handle *fwnode,
    const char *propname, const char **val);
int fwnode_property_match_string(const struct fwnode_handle *fwnode,
     const char *propname, const char *string);
int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
           const char *prop, const char *nargs_prop,
           unsigned int nargs, unsigned int index,
           struct fwnode_reference_args *args);

struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *fwnode,
         const char *name,
         unsigned int index);

const char *fwnode_get_name(const struct fwnode_handle *fwnode);
const char *fwnode_get_name_prefix(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_parent(
 struct fwnode_handle *fwnode);
struct device *fwnode_get_next_parent_dev(struct fwnode_handle *fwnode);
unsigned int fwnode_count_parents(const struct fwnode_handle *fwn);
struct fwnode_handle *fwnode_get_nth_parent(struct fwnode_handle *fwn,
         unsigned int depth);
bool fwnode_is_ancestor_of(struct fwnode_handle *test_ancestor,
      struct fwnode_handle *test_child);
struct fwnode_handle *fwnode_get_next_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
struct fwnode_handle *fwnode_get_next_available_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
# 108 "./include/linux/property.h"
struct fwnode_handle *device_get_next_child_node(
 struct device *dev, struct fwnode_handle *child);





struct fwnode_handle *fwnode_get_named_child_node(
 const struct fwnode_handle *fwnode, const char *childname);
struct fwnode_handle *device_get_named_child_node(struct device *dev,
        const char *childname);

struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *fwnode);
void fwnode_handle_put(struct fwnode_handle *fwnode);

int fwnode_irq_get(const struct fwnode_handle *fwnode, unsigned int index);

unsigned int device_get_child_node_count(struct device *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_property_read_bool(struct device *dev,
          const char *propname)
{
 return device_property_present(dev, propname);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_read_u8(struct device *dev,
       const char *propname, u8 *val)
{
 return device_property_read_u8_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_read_u16(struct device *dev,
        const char *propname, u16 *val)
{
 return device_property_read_u16_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_read_u32(struct device *dev,
        const char *propname, u32 *val)
{
 return device_property_read_u32_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_read_u64(struct device *dev,
        const char *propname, u64 *val)
{
 return device_property_read_u64_array(dev, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_count_u8(struct device *dev, const char *propname)
{
 return device_property_read_u8_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_count_u16(struct device *dev, const char *propname)
{
 return device_property_read_u16_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_count_u32(struct device *dev, const char *propname)
{
 return device_property_read_u32_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_count_u64(struct device *dev, const char *propname)
{
 return device_property_read_u64_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_property_string_array_count(struct device *dev,
           const char *propname)
{
 return device_property_read_string_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fwnode_property_read_bool(const struct fwnode_handle *fwnode,
          const char *propname)
{
 return fwnode_property_present(fwnode, propname);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_read_u8(const struct fwnode_handle *fwnode,
       const char *propname, u8 *val)
{
 return fwnode_property_read_u8_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_read_u16(const struct fwnode_handle *fwnode,
        const char *propname, u16 *val)
{
 return fwnode_property_read_u16_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_read_u32(const struct fwnode_handle *fwnode,
        const char *propname, u32 *val)
{
 return fwnode_property_read_u32_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_read_u64(const struct fwnode_handle *fwnode,
        const char *propname, u64 *val)
{
 return fwnode_property_read_u64_array(fwnode, propname, val, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_count_u8(const struct fwnode_handle *fwnode,
        const char *propname)
{
 return fwnode_property_read_u8_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_count_u16(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u16_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_count_u32(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u32_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fwnode_property_count_u64(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u64_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
fwnode_property_string_array_count(const struct fwnode_handle *fwnode,
       const char *propname)
{
 return fwnode_property_read_string_array(fwnode, propname, ((void *)0), 0);
}

struct software_node;







struct software_node_ref_args {
 const struct software_node *node;
 unsigned int nargs;
 u64 args[8];
};
# 274 "./include/linux/property.h"
struct property_entry {
 const char *name;
 size_t length;
 bool is_inline;
 enum dev_prop_type type;
 union {
  const void *pointer;
  union {
   u8 u8_data[sizeof(u64) / sizeof(u8)];
   u16 u16_data[sizeof(u64) / sizeof(u16)];
   u32 u32_data[sizeof(u64) / sizeof(u32)];
   u64 u64_data[sizeof(u64) / sizeof(u64)];
   const char *str[sizeof(u64) / sizeof(char *)];
  } value;
 };
};
# 376 "./include/linux/property.h"
struct property_entry *
property_entries_dup(const struct property_entry *properties);

void property_entries_free(const struct property_entry *properties);

int device_add_properties(struct device *dev,
     const struct property_entry *properties);
void device_remove_properties(struct device *dev);

bool device_dma_supported(struct device *dev);

enum dev_dma_attr device_get_dma_attr(struct device *dev);

const void *device_get_match_data(struct device *dev);

int device_get_phy_mode(struct device *dev);

int fwnode_get_phy_mode(struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_next_endpoint(
 const struct fwnode_handle *fwnode, struct fwnode_handle *prev);
struct fwnode_handle *
fwnode_graph_get_port_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port_parent(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_endpoint(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *
fwnode_graph_get_remote_node(const struct fwnode_handle *fwnode, u32 port,
        u32 endpoint);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fwnode_graph_is_endpoint(struct fwnode_handle *fwnode)
{
 return fwnode_property_present(fwnode, "remote-endpoint");
}
# 426 "./include/linux/property.h"
struct fwnode_handle *
fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *fwnode,
    u32 port, u32 endpoint, unsigned long flags);





int fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
    struct fwnode_endpoint *endpoint);

typedef void *(*devcon_match_fn_t)(struct fwnode_handle *fwnode, const char *id,
       void *data);

void *fwnode_connection_find_match(struct fwnode_handle *fwnode,
       const char *con_id, void *data,
       devcon_match_fn_t match);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *device_connection_find_match(struct device *dev,
       const char *con_id, void *data,
       devcon_match_fn_t match)
{
 return fwnode_connection_find_match(dev_fwnode(dev), con_id, data, match);
}
# 460 "./include/linux/property.h"
struct software_node {
 const char *name;
 const struct software_node *parent;
 const struct property_entry *properties;
};

bool is_software_node(const struct fwnode_handle *fwnode);
const struct software_node *
to_software_node(const struct fwnode_handle *fwnode);
struct fwnode_handle *software_node_fwnode(const struct software_node *node);

const struct software_node *
software_node_find_by_name(const struct software_node *parent,
      const char *name);

int software_node_register_nodes(const struct software_node *nodes);
void software_node_unregister_nodes(const struct software_node *nodes);

int software_node_register_node_group(const struct software_node **node_group);
void software_node_unregister_node_group(const struct software_node **node_group);

int software_node_register(const struct software_node *node);
void software_node_unregister(const struct software_node *node);

struct fwnode_handle *
fwnode_create_software_node(const struct property_entry *properties,
       const struct fwnode_handle *parent);
void fwnode_remove_software_node(struct fwnode_handle *fwnode);

int device_add_software_node(struct device *dev, const struct software_node *node);
void device_remove_software_node(struct device *dev);

int device_create_managed_software_node(struct device *dev,
     const struct property_entry *properties,
     const struct software_node *parent);
# 23 "./include/linux/of.h" 2



# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
# 27 "./include/linux/of.h" 2

typedef u32 phandle;
typedef u32 ihandle;

struct property {
 char *name;
 int length;
 void *value;
 struct property *next;

 unsigned long _flags;





 struct bin_attribute attr;

};





struct device_node {
 const char *name;
 phandle phandle;
 const char *full_name;
 struct fwnode_handle fwnode;

 struct property *properties;
 struct property *deadprops;
 struct device_node *parent;
 struct device_node *child;
 struct device_node *sibling;

 struct kobject kobj;

 unsigned long _flags;
 void *data;




};


struct of_phandle_args {
 struct device_node *np;
 int args_count;
 uint32_t args[16];
};

struct of_phandle_iterator {

 const char *cells_name;
 int cell_count;
 const struct device_node *parent;


 const __be32 *list_end;
 const __be32 *phandle_end;


 const __be32 *cur;
 uint32_t cur_count;
 phandle phandle;
 struct device_node *node;
};

struct of_reconfig_data {
 struct device_node *dn;
 struct property *prop;
 struct property *old_prop;
};


extern struct kobj_type of_node_ktype;
extern const struct fwnode_operations of_fwnode_ops;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void of_node_init(struct device_node *node)
{

 kobject_init(&node->kobj, &of_node_ktype);

 fwnode_init(&node->fwnode, &of_fwnode_ops);
}
# 121 "./include/linux/of.h"
extern struct device_node *of_node_get(struct device_node *node);
extern void of_node_put(struct device_node *node);
# 133 "./include/linux/of.h"
extern struct device_node *of_root;
extern struct device_node *of_chosen;
extern struct device_node *of_aliases;
extern struct device_node *of_stdout;
extern raw_spinlock_t devtree_lock;
# 153 "./include/linux/of.h"
void of_core_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_of_node(const struct fwnode_handle *fwnode)
{
 return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &of_fwnode_ops;
}
# 178 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool of_have_populated_dt(void)
{
 return of_root != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool of_node_is_root(const struct device_node *node)
{
 return node && (node->parent == ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_node_check_flag(const struct device_node *n, unsigned long flag)
{
 return test_bit(flag, &n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_node_test_and_set_flag(struct device_node *n,
         unsigned long flag)
{
 return test_and_set_bit(flag, &n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void of_node_set_flag(struct device_node *n, unsigned long flag)
{
 set_bit(flag, &n->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void of_node_clear_flag(struct device_node *n, unsigned long flag)
{
 clear_bit(flag, &n->_flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_check_flag(struct property *p, unsigned long flag)
{
 return test_bit(flag, &p->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void of_property_set_flag(struct property *p, unsigned long flag)
{
 set_bit(flag, &p->_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void of_property_clear_flag(struct property *p, unsigned long flag)
{
 clear_bit(flag, &p->_flags);
}


extern struct device_node *__of_find_all_nodes(struct device_node *prev);
extern struct device_node *of_find_all_nodes(struct device_node *prev);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 of_read_number(const __be32 *cell, int size)
{
 u64 r = 0;
 for (; size--; cell++)
  r = (r << 32) | (__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(*cell)));
 return r;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long of_read_ulong(const __be32 *cell, int size)
{

 return of_read_number(cell, size);
}
# 256 "./include/linux/of.h"
extern bool of_node_name_eq(const struct device_node *np, const char *name);
extern bool of_node_name_prefix(const struct device_node *np, const char *prefix);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *of_node_full_name(const struct device_node *np)
{
 return np ? np->full_name : "<no-node>";
}




extern struct device_node *of_find_node_by_name(struct device_node *from,
 const char *name);
extern struct device_node *of_find_node_by_type(struct device_node *from,
 const char *type);
extern struct device_node *of_find_compatible_node(struct device_node *from,
 const char *type, const char *compat);
extern struct device_node *of_find_matching_node_and_match(
 struct device_node *from,
 const struct of_device_id *matches,
 const struct of_device_id **match);

extern struct device_node *of_find_node_opts_by_path(const char *path,
 const char **opts);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device_node *of_find_node_by_path(const char *path)
{
 return of_find_node_opts_by_path(path, ((void *)0));
}

extern struct device_node *of_find_node_by_phandle(phandle handle);
extern struct device_node *of_get_parent(const struct device_node *node);
extern struct device_node *of_get_next_parent(struct device_node *node);
extern struct device_node *of_get_next_child(const struct device_node *node,
          struct device_node *prev);
extern struct device_node *of_get_next_available_child(
 const struct device_node *node, struct device_node *prev);

extern struct device_node *of_get_compatible_child(const struct device_node *parent,
     const char *compatible);
extern struct device_node *of_get_child_by_name(const struct device_node *node,
     const char *name);


extern struct device_node *of_find_next_cache_node(const struct device_node *);
extern int of_find_last_cache_level(unsigned int cpu);
extern struct device_node *of_find_node_with_property(
 struct device_node *from, const char *prop_name);

extern struct property *of_find_property(const struct device_node *np,
      const char *name,
      int *lenp);
extern int of_property_count_elems_of_size(const struct device_node *np,
    const char *propname, int elem_size);
extern int of_property_read_u32_index(const struct device_node *np,
           const char *propname,
           u32 index, u32 *out_value);
extern int of_property_read_u64_index(const struct device_node *np,
           const char *propname,
           u32 index, u64 *out_value);
extern int of_property_read_variable_u8_array(const struct device_node *np,
     const char *propname, u8 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u16_array(const struct device_node *np,
     const char *propname, u16 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u32_array(const struct device_node *np,
     const char *propname,
     u32 *out_values,
     size_t sz_min,
     size_t sz_max);
extern int of_property_read_u64(const struct device_node *np,
    const char *propname, u64 *out_value);
extern int of_property_read_variable_u64_array(const struct device_node *np,
     const char *propname,
     u64 *out_values,
     size_t sz_min,
     size_t sz_max);

extern int of_property_read_string(const struct device_node *np,
       const char *propname,
       const char **out_string);
extern int of_property_match_string(const struct device_node *np,
        const char *propname,
        const char *string);
extern int of_property_read_string_helper(const struct device_node *np,
           const char *propname,
           const char **out_strs, size_t sz, int index);
extern int of_device_is_compatible(const struct device_node *device,
       const char *);
extern int of_device_compatible_match(struct device_node *device,
          const char *const *compat);
extern bool of_device_is_available(const struct device_node *device);
extern bool of_device_is_big_endian(const struct device_node *device);
extern const void *of_get_property(const struct device_node *node,
    const char *name,
    int *lenp);
extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
extern struct device_node *of_get_next_cpu_node(struct device_node *prev);
extern struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
       int index);
extern u64 of_get_cpu_hwid(struct device_node *cpun, unsigned int thread);




extern int of_n_addr_cells(struct device_node *np);
extern int of_n_size_cells(struct device_node *np);
extern const struct of_device_id *of_match_node(
 const struct of_device_id *matches, const struct device_node *node);
extern int of_modalias_node(struct device_node *node, char *modalias, int len);
extern void of_print_phandle_args(const char *msg, const struct of_phandle_args *args);
extern struct device_node *of_parse_phandle(const struct device_node *np,
         const char *phandle_name,
         int index);
extern int of_parse_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_args_map(const struct device_node *np,
 const char *list_name, const char *stem_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 const char *list_name, int cells_count, int index,
 struct of_phandle_args *out_args);
extern int of_count_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name);


extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
        const struct device_node *np,
        const char *list_name,
        const char *cells_name,
        int cell_count);

extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
        uint32_t *args,
        int size);

extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
extern int of_alias_get_id(struct device_node *np, const char *stem);
extern int of_alias_get_highest_id(const char *stem);
extern int of_alias_get_alias_list(const struct of_device_id *matches,
       const char *stem, unsigned long *bitmap,
       unsigned int nbits);

extern int of_machine_is_compatible(const char *compat);

extern int of_add_property(struct device_node *np, struct property *prop);
extern int of_remove_property(struct device_node *np, struct property *prop);
extern int of_update_property(struct device_node *np, struct property *newprop);
# 414 "./include/linux/of.h"
extern int of_attach_node(struct device_node *);
extern int of_detach_node(struct device_node *);
# 439 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_u8_array(const struct device_node *np,
         const char *propname,
         u8 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u8_array(np, propname, out_values,
           sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 471 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_u16_array(const struct device_node *np,
          const char *propname,
          u16 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u16_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 501 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_u32_array(const struct device_node *np,
          const char *propname,
          u32 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u32_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 531 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_u64_array(const struct device_node *np,
          const char *propname,
          u64 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u64_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 551 "./include/linux/of.h"
const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
          u32 *pu);







const char *of_prop_next_string(struct property *prop, const char *cur);

bool of_console_check(struct device_node *dn, char *name, int index);

extern int of_cpu_node_to_id(struct device_node *np);

int of_map_id(struct device_node *np, u32 id,
        const char *map_name, const char *map_mask_name,
        struct device_node **target, u32 *id_out);

phys_addr_t of_dma_get_max_cpu_address(struct device_node *np);

struct kimage;
void *of_kexec_alloc_and_setup_fdt(const struct kimage *image,
       unsigned long initrd_load_addr,
       unsigned long initrd_len,
       const char *cmdline, size_t extra_fdt_size);
int ima_get_kexec_buffer(void **addr, size_t *size);
int ima_free_kexec_buffer(void);
# 1037 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_prop_val_eq(struct property *p1, struct property *p2)
{
 return p1->length == p2->length &&
        !memcmp(p1->value, p2->value, (size_t)p1->length);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_node_to_nid(struct device_node *device)
{
 return (-1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_numa_init(void)
{
 return -38;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device_node *of_find_matching_node(
 struct device_node *from,
 const struct of_device_id *matches)
{
 return of_find_matching_node_and_match(from, matches, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *of_node_get_device_type(const struct device_node *np)
{
 return of_get_property(np, "device_type", ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool of_node_is_type(const struct device_node *np, const char *type)
{
 const char *match = of_node_get_device_type(np);

 return np && match && type && !strcmp(match, type);
}
# 1093 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_count_u8_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u8));
}
# 1112 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_count_u16_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u16));
}
# 1131 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_count_u32_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u32));
}
# 1150 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_count_u64_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u64));
}
# 1169 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_string_array(const struct device_node *np,
      const char *propname, const char **out_strs,
      size_t sz)
{
 return of_property_read_string_helper(np, propname, out_strs, sz, 0);
}
# 1189 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_count_strings(const struct device_node *np,
         const char *propname)
{
 return of_property_read_string_helper(np, propname, ((void *)0), 0, 0);
}
# 1214 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_string_index(const struct device_node *np,
      const char *propname,
      int index, const char **output)
{
 int rc = of_property_read_string_helper(np, propname, output, 1, index);
 return rc < 0 ? rc : 0;
}
# 1231 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool of_property_read_bool(const struct device_node *np,
      const char *propname)
{
 struct property *prop = of_find_property(np, propname, ((void *)0));

 return prop ? true : false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_u8(const struct device_node *np,
           const char *propname,
           u8 *out_value)
{
 return of_property_read_u8_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_u16(const struct device_node *np,
           const char *propname,
           u16 *out_value)
{
 return of_property_read_u16_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_u32(const struct device_node *np,
           const char *propname,
           u32 *out_value)
{
 return of_property_read_u32_array(np, propname, out_value, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_property_read_s32(const struct device_node *np,
           const char *propname,
           s32 *out_value)
{
 return of_property_read_u32(np, propname, (u32*) out_value);
}
# 1316 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_get_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_child(np, child))
  num++;

 return num;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_get_available_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_available_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_available_child(np, child))
  num++;

 return num;
}
# 1356 "./include/linux/of.h"
typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
typedef int (*of_init_fn_1_ret)(struct device_node *);
typedef void (*of_init_fn_1)(struct device_node *);
# 1381 "./include/linux/of.h"
struct of_changeset_entry {
 struct list_head node;
 unsigned long action;
 struct device_node *np;
 struct property *prop;
 struct property *old_prop;
};
# 1399 "./include/linux/of.h"
struct of_changeset {
 struct list_head entries;
};

enum of_reconfig_change {
 OF_RECONFIG_NO_CHANGE = 0,
 OF_RECONFIG_CHANGE_ADD,
 OF_RECONFIG_CHANGE_REMOVE,
};


extern int of_reconfig_notifier_register(struct notifier_block *);
extern int of_reconfig_notifier_unregister(struct notifier_block *);
extern int of_reconfig_notify(unsigned long, struct of_reconfig_data *rd);
extern int of_reconfig_get_state_change(unsigned long action,
     struct of_reconfig_data *arg);

extern void of_changeset_init(struct of_changeset *ocs);
extern void of_changeset_destroy(struct of_changeset *ocs);
extern int of_changeset_apply(struct of_changeset *ocs);
extern int of_changeset_revert(struct of_changeset *ocs);
extern int of_changeset_action(struct of_changeset *ocs,
  unsigned long action, struct device_node *np,
  struct property *prop);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_changeset_attach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0001, np, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_changeset_detach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0002, np, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_changeset_add_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0003, np, prop);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_changeset_remove_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0004, np, prop);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int of_changeset_update_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0005, np, prop);
}
# 1480 "./include/linux/of.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool of_device_is_system_power_controller(const struct device_node *np)
{
 return of_property_read_bool(np, "system-power-controller");
}





enum of_overlay_notify_action {
 OF_OVERLAY_PRE_APPLY = 0,
 OF_OVERLAY_POST_APPLY,
 OF_OVERLAY_PRE_REMOVE,
 OF_OVERLAY_POST_REMOVE,
};

struct of_overlay_notify_data {
 struct device_node *overlay;
 struct device_node *target;
};



int of_overlay_fdt_apply(const void *overlay_fdt, u32 overlay_fdt_size,
    int *ovcs_id);
int of_overlay_remove(int *ovcs_id);
int of_overlay_remove_all(void);

int of_overlay_notifier_register(struct notifier_block *nb);
int of_overlay_notifier_unregister(struct notifier_block *nb);
# 36 "./include/linux/irqdomain.h" 2



struct device_node;
struct fwnode_handle;
struct irq_domain;
struct irq_chip;
struct irq_data;
struct irq_desc;
struct cpumask;
struct seq_file;
struct irq_affinity_desc;
# 61 "./include/linux/irqdomain.h"
struct irq_fwspec {
 struct fwnode_handle *fwnode;
 int param_count;
 u32 param[16];
};


void of_phandle_args_to_fwspec(struct device_node *np, const u32 *args,
          unsigned int count, struct irq_fwspec *fwspec);
# 78 "./include/linux/irqdomain.h"
enum irq_domain_bus_token {
 DOMAIN_BUS_ANY = 0,
 DOMAIN_BUS_WIRED,
 DOMAIN_BUS_GENERIC_MSI,
 DOMAIN_BUS_PCI_MSI,
 DOMAIN_BUS_PLATFORM_MSI,
 DOMAIN_BUS_NEXUS,
 DOMAIN_BUS_IPI,
 DOMAIN_BUS_FSL_MC_MSI,
 DOMAIN_BUS_TI_SCI_INTA_MSI,
 DOMAIN_BUS_WAKEUP,
 DOMAIN_BUS_VMD_MSI,
};
# 107 "./include/linux/irqdomain.h"
struct irq_domain_ops {
 int (*match)(struct irq_domain *d, struct device_node *node,
       enum irq_domain_bus_token bus_token);
 int (*select)(struct irq_domain *d, struct irq_fwspec *fwspec,
        enum irq_domain_bus_token bus_token);
 int (*map)(struct irq_domain *d, unsigned int virq, irq_hw_number_t hw);
 void (*unmap)(struct irq_domain *d, unsigned int virq);
 int (*xlate)(struct irq_domain *d, struct device_node *node,
       const u32 *intspec, unsigned int intsize,
       unsigned long *out_hwirq, unsigned int *out_type);


 int (*alloc)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs, void *arg);
 void (*free)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs);
 int (*activate)(struct irq_domain *d, struct irq_data *irqd, bool reserve);
 void (*deactivate)(struct irq_domain *d, struct irq_data *irq_data);
 int (*translate)(struct irq_domain *d, struct irq_fwspec *fwspec,
    unsigned long *out_hwirq, unsigned int *out_type);





};

extern struct irq_domain_ops irq_generic_chip_ops;

struct irq_domain_chip_generic;
# 162 "./include/linux/irqdomain.h"
struct irq_domain {
 struct list_head link;
 const char *name;
 const struct irq_domain_ops *ops;
 void *host_data;
 unsigned int flags;
 unsigned int mapcount;


 struct fwnode_handle *fwnode;
 enum irq_domain_bus_token bus_token;
 struct irq_domain_chip_generic *gc;

 struct irq_domain *parent;



 irq_hw_number_t hwirq_max;
 unsigned int revmap_size;
 struct xarray revmap_tree;
 struct mutex revmap_mutex;
 struct irq_data *revmap[];
};


enum {

 IRQ_DOMAIN_FLAG_HIERARCHY = (1 << 0),


 IRQ_DOMAIN_NAME_ALLOCATED = (1 << 1),


 IRQ_DOMAIN_FLAG_IPI_PER_CPU = (1 << 2),


 IRQ_DOMAIN_FLAG_IPI_SINGLE = (1 << 3),


 IRQ_DOMAIN_FLAG_MSI = (1 << 4),


 IRQ_DOMAIN_FLAG_MSI_REMAP = (1 << 5),






 IRQ_DOMAIN_MSI_NOMASK_QUIRK = (1 << 6),


 IRQ_DOMAIN_FLAG_NO_MAP = (1 << 7),






 IRQ_DOMAIN_FLAG_NONCORE = (1 << 16),
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device_node *irq_domain_get_of_node(struct irq_domain *d)
{
 return ({ typeof(d->fwnode) __to_of_node_fwnode = (d->fwnode); is_of_node(__to_of_node_fwnode) ? ({ void *__mptr = (void *)(__to_of_node_fwnode); _Static_assert(__builtin_types_compatible_p(typeof(*(__to_of_node_fwnode)), typeof(((struct device_node *)0)->fwnode)) || __builtin_types_compatible_p(typeof(*(__to_of_node_fwnode)), typeof(void)), "pointer type mismatch in container_of()"); ((struct device_node *)(__mptr - __builtin_offsetof(struct device_node, fwnode))); }) : ((void *)0); });
}


struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int type, int id,
      const char *name, phys_addr_t *pa);

enum {
 IRQCHIP_FWNODE_REAL,
 IRQCHIP_FWNODE_NAMED,
 IRQCHIP_FWNODE_NAMED_ID,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct fwnode_handle *irq_domain_alloc_named_fwnode(const char *name)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED, 0, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct fwnode_handle *irq_domain_alloc_named_id_fwnode(const char *name, int id)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED_ID, id, name,
      ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct fwnode_handle *irq_domain_alloc_fwnode(phys_addr_t *pa)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_REAL, 0, ((void *)0), pa);
}

void irq_domain_free_fwnode(struct fwnode_handle *fwnode);
struct irq_domain *__irq_domain_add(struct fwnode_handle *fwnode, unsigned int size,
        irq_hw_number_t hwirq_max, int direct_max,
        const struct irq_domain_ops *ops,
        void *host_data);
struct irq_domain *irq_domain_create_simple(struct fwnode_handle *fwnode,
         unsigned int size,
         unsigned int first_irq,
         const struct irq_domain_ops *ops,
         void *host_data);
struct irq_domain *irq_domain_add_legacy(struct device_node *of_node,
      unsigned int size,
      unsigned int first_irq,
      irq_hw_number_t first_hwirq,
      const struct irq_domain_ops *ops,
      void *host_data);
struct irq_domain *irq_domain_create_legacy(struct fwnode_handle *fwnode,
         unsigned int size,
         unsigned int first_irq,
         irq_hw_number_t first_hwirq,
         const struct irq_domain_ops *ops,
         void *host_data);
extern struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *fwspec,
         enum irq_domain_bus_token bus_token);
extern bool irq_domain_check_msi_remap(void);
extern void irq_set_default_host(struct irq_domain *host);
extern struct irq_domain *irq_get_default_host(void);
extern int irq_domain_alloc_descs(int virq, unsigned int nr_irqs,
      irq_hw_number_t hwirq, int node,
      const struct irq_affinity_desc *affinity);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct fwnode_handle *of_node_to_fwnode(struct device_node *node)
{
 return node ? &node->fwnode : ((void *)0);
}

extern const struct fwnode_operations irqchip_fwnode_ops;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_fwnode_irqchip(struct fwnode_handle *fwnode)
{
 return fwnode && fwnode->ops == &irqchip_fwnode_ops;
}

extern void irq_domain_update_bus_token(struct irq_domain *domain,
     enum irq_domain_bus_token bus_token);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct irq_domain *irq_find_matching_fwnode(struct fwnode_handle *fwnode,
         enum irq_domain_bus_token bus_token)
{
 struct irq_fwspec fwspec = {
  .fwnode = fwnode,
 };

 return irq_find_matching_fwspec(&fwspec, bus_token);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_find_matching_host(struct device_node *node,
       enum irq_domain_bus_token bus_token)
{
 return irq_find_matching_fwnode(of_node_to_fwnode(node), bus_token);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_find_host(struct device_node *node)
{
 struct irq_domain *d;

 d = irq_find_matching_host(node, DOMAIN_BUS_WIRED);
 if (!d)
  d = irq_find_matching_host(node, DOMAIN_BUS_ANY);

 return d;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_domain_add_simple(struct device_node *of_node,
             unsigned int size,
             unsigned int first_irq,
             const struct irq_domain_ops *ops,
             void *host_data)
{
 return irq_domain_create_simple(of_node_to_fwnode(of_node), size, first_irq, ops, host_data);
}
# 347 "./include/linux/irqdomain.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_domain_add_linear(struct device_node *of_node,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), size, size, 0, ops, host_data);
}
# 367 "./include/linux/irqdomain.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_domain_add_tree(struct device_node *of_node,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), 0, ~0, 0, ops, host_data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_domain_create_linear(struct fwnode_handle *fwnode,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, size, size, 0, ops, host_data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_domain_create_tree(struct fwnode_handle *fwnode,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, 0, ~0, 0, ops, host_data);
}

extern void irq_domain_remove(struct irq_domain *host);

extern int irq_domain_associate(struct irq_domain *domain, unsigned int irq,
     irq_hw_number_t hwirq);
extern void irq_domain_associate_many(struct irq_domain *domain,
          unsigned int irq_base,
          irq_hw_number_t hwirq_base, int count);

extern unsigned int irq_create_mapping_affinity(struct irq_domain *host,
          irq_hw_number_t hwirq,
          const struct irq_affinity_desc *affinity);
extern unsigned int irq_create_fwspec_mapping(struct irq_fwspec *fwspec);
extern void irq_dispose_mapping(unsigned int virq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int irq_create_mapping(struct irq_domain *host,
           irq_hw_number_t hwirq)
{
 return irq_create_mapping_affinity(host, hwirq, ((void *)0));
}

extern struct irq_desc *__irq_resolve_mapping(struct irq_domain *domain,
           irq_hw_number_t hwirq,
           unsigned int *irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_desc *irq_resolve_mapping(struct irq_domain *domain,
         irq_hw_number_t hwirq)
{
 return __irq_resolve_mapping(domain, hwirq, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int irq_find_mapping(struct irq_domain *domain,
         irq_hw_number_t hwirq)
{
 unsigned int irq;

 if (__irq_resolve_mapping(domain, hwirq, &irq))
  return irq;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int irq_linear_revmap(struct irq_domain *domain,
          irq_hw_number_t hwirq)
{
 return irq_find_mapping(domain, hwirq);
}

extern const struct irq_domain_ops irq_domain_simple_ops;


int irq_domain_xlate_onecell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_twocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_onetwocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);

int irq_domain_translate_twocell(struct irq_domain *d,
     struct irq_fwspec *fwspec,
     unsigned long *out_hwirq,
     unsigned int *out_type);

int irq_domain_translate_onecell(struct irq_domain *d,
     struct irq_fwspec *fwspec,
     unsigned long *out_hwirq,
     unsigned int *out_type);


int irq_reserve_ipi(struct irq_domain *domain, const struct cpumask *dest);
int irq_destroy_ipi(unsigned int irq, const struct cpumask *dest);


extern struct irq_data *irq_domain_get_irq_data(struct irq_domain *domain,
      unsigned int virq);
extern void irq_domain_set_info(struct irq_domain *domain, unsigned int virq,
    irq_hw_number_t hwirq, struct irq_chip *chip,
    void *chip_data, irq_flow_handler_t handler,
    void *handler_data, const char *handler_name);
extern void irq_domain_reset_irq_data(struct irq_data *irq_data);

extern struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *parent,
   unsigned int flags, unsigned int size,
   struct fwnode_handle *fwnode,
   const struct irq_domain_ops *ops, void *host_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *irq_domain_add_hierarchy(struct irq_domain *parent,
         unsigned int flags,
         unsigned int size,
         struct device_node *node,
         const struct irq_domain_ops *ops,
         void *host_data)
{
 return irq_domain_create_hierarchy(parent, flags, size,
        of_node_to_fwnode(node),
        ops, host_data);
}

extern int __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,
       unsigned int nr_irqs, int node, void *arg,
       bool realloc,
       const struct irq_affinity_desc *affinity);
extern void irq_domain_free_irqs(unsigned int virq, unsigned int nr_irqs);
extern int irq_domain_activate_irq(struct irq_data *irq_data, bool early);
extern void irq_domain_deactivate_irq(struct irq_data *irq_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_domain_alloc_irqs(struct irq_domain *domain,
   unsigned int nr_irqs, int node, void *arg)
{
 return __irq_domain_alloc_irqs(domain, -1, nr_irqs, node, arg, false,
           ((void *)0));
}

extern int irq_domain_alloc_irqs_hierarchy(struct irq_domain *domain,
        unsigned int irq_base,
        unsigned int nr_irqs, void *arg);
extern int irq_domain_set_hwirq_and_chip(struct irq_domain *domain,
      unsigned int virq,
      irq_hw_number_t hwirq,
      struct irq_chip *chip,
      void *chip_data);
extern void irq_domain_free_irqs_common(struct irq_domain *domain,
     unsigned int virq,
     unsigned int nr_irqs);
extern void irq_domain_free_irqs_top(struct irq_domain *domain,
         unsigned int virq, unsigned int nr_irqs);

extern int irq_domain_push_irq(struct irq_domain *domain, int virq, void *arg);
extern int irq_domain_pop_irq(struct irq_domain *domain, int virq);

extern int irq_domain_alloc_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs, void *arg);

extern void irq_domain_free_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs);

extern int irq_domain_disconnect_hierarchy(struct irq_domain *domain,
        unsigned int virq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_domain_is_hierarchy(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_HIERARCHY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_domain_is_ipi(struct irq_domain *domain)
{
 return domain->flags &
  (IRQ_DOMAIN_FLAG_IPI_PER_CPU | IRQ_DOMAIN_FLAG_IPI_SINGLE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_domain_is_ipi_per_cpu(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_PER_CPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_domain_is_ipi_single(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_SINGLE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_domain_is_msi(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_domain_is_msi_remap(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI_REMAP;
}

extern bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *domain);
# 6 "./arch/x86/include/asm/irqdomain.h" 2



enum {

 X86_IRQ_ALLOC_CONTIGUOUS_VECTORS = 0x1,
 X86_IRQ_ALLOC_LEGACY = 0x2,
};

extern int x86_fwspec_is_ioapic(struct irq_fwspec *fwspec);
extern int x86_fwspec_is_hpet(struct irq_fwspec *fwspec);

extern struct irq_domain *x86_vector_domain;

extern void init_irq_alloc_info(struct irq_alloc_info *info,
    const struct cpumask *mask);
extern void copy_irq_alloc_info(struct irq_alloc_info *dst,
    struct irq_alloc_info *src);



struct device_node;
struct irq_data;

enum ioapic_domain_type {
 IOAPIC_DOMAIN_INVALID,
 IOAPIC_DOMAIN_LEGACY,
 IOAPIC_DOMAIN_STRICT,
 IOAPIC_DOMAIN_DYNAMIC,
};

struct ioapic_domain_cfg {
 enum ioapic_domain_type type;
 const struct irq_domain_ops *ops;
 struct device_node *dev;
};

extern const struct irq_domain_ops mp_ioapic_irqdomain_ops;

extern int mp_irqdomain_alloc(struct irq_domain *domain, unsigned int virq,
         unsigned int nr_irqs, void *arg);
extern void mp_irqdomain_free(struct irq_domain *domain, unsigned int virq,
         unsigned int nr_irqs);
extern int mp_irqdomain_activate(struct irq_domain *domain,
     struct irq_data *irq_data, bool reserve);
extern void mp_irqdomain_deactivate(struct irq_domain *domain,
        struct irq_data *irq_data);
extern int mp_irqdomain_ioapic_idx(struct irq_domain *domain);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void x86_create_pci_msi_domain(void) { }
# 6 "./arch/x86/include/asm/msi.h" 2

typedef struct irq_alloc_info msi_alloc_info_t;

int pci_msi_prepare(struct irq_domain *domain, struct device *dev, int nvec,
      msi_alloc_info_t *arg);



typedef struct x86_msi_data {
 u32 vector : 8,
  delivery_mode : 3,
  dest_mode_logical : 1,
  reserved : 2,
  active_low : 1,
  is_level : 1;

 u32 dmar_subhandle;
} __attribute__ ((packed)) arch_msi_msg_data_t;


typedef struct x86_msi_addr_lo {
 union {
  struct {
   u32 reserved_0 : 2,
    dest_mode_logical : 1,
    redirect_hint : 1,
    reserved_1 : 1,
    virt_destid_8_14 : 7,
    destid_0_7 : 8,
    base_address : 12;
  };
  struct {
   u32 dmar_reserved_0 : 2,
    dmar_index_15 : 1,
    dmar_subhandle_valid : 1,
    dmar_format : 1,
    dmar_index_0_14 : 15,
    dmar_base_address : 12;
  };
 };
} __attribute__ ((packed)) arch_msi_msg_addr_lo_t;




typedef struct x86_msi_addr_hi {
 u32 reserved : 8,
  destid_8_31 : 24;
} __attribute__ ((packed)) arch_msi_msg_addr_hi_t;




struct msi_msg;
u32 x86_msi_msg_get_destid(struct msi_msg *msg, bool extid);
# 8 "./include/linux/msi.h" 2
# 38 "./include/linux/msi.h"
struct msi_msg {
 union {
  u32 address_lo;
  arch_msi_msg_addr_lo_t arch_addr_lo;
 };
 union {
  u32 address_hi;
  arch_msi_msg_addr_hi_t arch_addr_hi;
 };
 union {
  u32 data;
  arch_msi_msg_data_t arch_data;
 };
};

extern int pci_msi_ignore_mask;

struct irq_data;
struct msi_desc;
struct pci_dev;
struct platform_msi_priv_data;
void __get_cached_msi_msg(struct msi_desc *entry, struct msi_msg *msg);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_cached_msi_msg(unsigned int irq, struct msi_msg *msg)
{
}


typedef void (*irq_write_msi_msg_t)(struct msi_desc *desc,
        struct msi_msg *msg);






struct platform_msi_desc {
 struct platform_msi_priv_data *msi_priv_data;
 u16 msi_index;
};





struct fsl_mc_msi_desc {
 u16 msi_index;
};





struct ti_sci_inta_msi_desc {
 u16 dev_index;
};
# 125 "./include/linux/msi.h"
struct msi_desc {

 struct list_head list;
 unsigned int irq;
 unsigned int nvec_used;
 struct device *dev;
 struct msi_msg msg;
 struct irq_affinity_desc *affinity;

 const void *iommu_cookie;


 void (*write_msi_msg)(struct msi_desc *entry, void *data);
 void *write_msi_msg_data;

 union {

  struct {
   union {
    u32 msi_mask;
    u32 msix_ctrl;
   };
   struct {
    u8 is_msix : 1;
    u8 multiple : 3;
    u8 multi_cap : 3;
    u8 can_mask : 1;
    u8 is_64 : 1;
    u8 is_virtual : 1;
    u16 entry_nr;
    unsigned default_irq;
   } msi_attrib;
   union {
    u8 mask_pos;
    void *mask_base;
   };
  };
# 170 "./include/linux/msi.h"
  struct platform_msi_desc platform;
  struct fsl_mc_msi_desc fsl_mc;
  struct ti_sci_inta_msi_desc inta;
 };
};
# 193 "./include/linux/msi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const void *msi_desc_get_iommu_cookie(struct msi_desc *desc)
{
 return desc->iommu_cookie;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void msi_desc_set_iommu_cookie(struct msi_desc *desc,
          const void *iommu_cookie)
{
 desc->iommu_cookie = iommu_cookie;
}
# 224 "./include/linux/msi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *msi_desc_to_pci_sysdata(struct msi_desc *desc)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pci_write_msi_msg(unsigned int irq, struct msi_msg *msg)
{
}


struct msi_desc *alloc_msi_entry(struct device *dev, int nvec,
     const struct irq_affinity_desc *affinity);
void free_msi_entry(struct msi_desc *entry);
void __pci_read_msi_msg(struct msi_desc *entry, struct msi_msg *msg);
void __pci_write_msi_msg(struct msi_desc *entry, struct msi_msg *msg);

void pci_msi_mask_irq(struct irq_data *data);
void pci_msi_unmask_irq(struct irq_data *data);

const struct attribute_group **msi_populate_sysfs(struct device *dev);
void msi_destroy_sysfs(struct device *dev,
         const struct attribute_group **msi_irq_groups);
# 260 "./include/linux/msi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
{
 ({ int __ret_warn_on = !!(1); __builtin_expect(!!(__ret_warn_on), 0); });
 return -19;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_teardown_msi_irqs(struct pci_dev *dev)
{
 ({ int __ret_warn_on = !!(1); __builtin_expect(!!(__ret_warn_on), 0); });
}






void arch_restore_msi_irqs(struct pci_dev *dev);
void default_restore_msi_irqs(struct pci_dev *dev);
# 461 "./include/linux/msi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *pci_msi_get_device_domain(struct pci_dev *pdev)
{
 return ((void *)0);
}
# 20 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/slab.h" 1
# 138 "./include/linux/slab.h"
struct mem_cgroup;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init(void);
bool slab_is_available(void);

struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
   unsigned int align, slab_flags_t flags,
   void (*ctor)(void *));
struct kmem_cache *kmem_cache_create_usercopy(const char *name,
   unsigned int size, unsigned int align,
   slab_flags_t flags,
   unsigned int useroffset, unsigned int usersize,
   void (*ctor)(void *));
void kmem_cache_destroy(struct kmem_cache *s);
int kmem_cache_shrink(struct kmem_cache *s);
# 182 "./include/linux/slab.h"
void * __attribute__((__warn_unused_result__)) krealloc(const void *objp, size_t new_size, gfp_t flags) __attribute__((__alloc_size__(2))) __attribute__((__malloc__));
void kfree(const void *objp);
void kfree_sensitive(const void *objp);
size_t __ksize(const void *objp);
size_t ksize(const void *objp);
# 196 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __check_heap_object(const void *ptr, unsigned long n,
           struct page *page, bool to_user) { }
# 311 "./include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,

 KMALLOC_DMA = KMALLOC_NORMAL,


 KMALLOC_CGROUP = KMALLOC_NORMAL,



 KMALLOC_RECLAIM,



 NR_KMALLOC_TYPES
};
# 426 "./include/linux/slab.h"
void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *s, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *s, void *objp);
# 437 "./include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *s, size_t size, void **p);
int kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size, void **p);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *__kmalloc_node(size_t size, gfp_t flags, int node)
{
 return __kmalloc(size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node)
{
 return kmem_cache_alloc(s, flags);
}



extern void *kmem_cache_alloc_trace(struct kmem_cache *s, gfp_t flags, size_t size)
       __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__alloc_size__(3))) __attribute__((__malloc__));






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(4))) __attribute__((__malloc__)) void *kmem_cache_alloc_node_trace(struct kmem_cache *s,
       gfp_t gfpflags, int node, size_t size)
{
 return kmem_cache_alloc_trace(s, gfpflags, size);
}
# 502 "./include/linux/slab.h"
extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << 12))))
          __attribute__((__alloc_size__(1))) __attribute__((__malloc__));


extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)
    __attribute__((__assume_aligned__(((1UL) << 12)))) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
# 516 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 576 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {



  if (size > (1UL << 12))
   return kmalloc_large(size, flags);
# 594 "./include/linux/slab.h"
 }
 return __kmalloc(size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{
# 613 "./include/linux/slab.h"
 return __kmalloc_node(size, flags, node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(bytes, flags);
 return __kmalloc(bytes, flags);
}
# 640 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(2, 3))) __attribute__((__malloc__)) void * __attribute__((__warn_unused_result__)) krealloc_array(void *p,
            size_t new_n,
            size_t new_size,
            gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return krealloc(p, bytes, flags);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
}
# 672 "./include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)
       __attribute__((__alloc_size__(1))) __attribute__((__malloc__));



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
         int node)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc_node(bytes, flags, node);
 return __kmalloc_node(bytes, flags, node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
{
 return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
}
# 712 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x100u));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
}

extern void *kvmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kvmalloc(size_t size, gfp_t flags)
{
 return kvmalloc_node(size, flags, (-1));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kvzalloc_node(size_t size, gfp_t flags, int node)
{
 return kvmalloc_node(size, flags | (( gfp_t)0x100u), node);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kvzalloc(size_t size, gfp_t flags)
{
 return kvmalloc(size, flags | (( gfp_t)0x100u));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return kvmalloc(bytes, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kvcalloc(size_t n, size_t size, gfp_t flags)
{
 return kvmalloc_array(n, size, flags | (( gfp_t)0x100u));
}

extern void *kvrealloc(const void *p, size_t oldsize, size_t newsize, gfp_t flags)
        __attribute__((__alloc_size__(3))) __attribute__((__malloc__));
extern void kvfree(const void *addr);
extern void kvfree_sensitive(const void *addr, size_t len);

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init_late(void);
# 21 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/vmalloc.h" 1
# 13 "./include/linux/vmalloc.h"
# 1 "./arch/x86/include/asm/vmalloc.h" 1





# 1 "./arch/x86/include/asm/pgtable_areas.h" 1
# 7 "./arch/x86/include/asm/vmalloc.h" 2





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_vmap_pud_supported(pgprot_t prot)
{
 return (__builtin_constant_p(( 1*32+26)) && ( (((( 1*32+26))>>5)==(0) && (1UL<<((( 1*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 1*32+26))>>5)==(1) && (1UL<<((( 1*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 1*32+26))>>5)==(2) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(3) && (1UL<<((( 1*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 1*32+26))>>5)==(4) && (1UL<<((( 1*32+26))&31) & (0) )) || (((( 1*32+26))>>5)==(5) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(6) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(7) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(8) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(9) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(10) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(11) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(12) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(13) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(14) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(15) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(16) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(17) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(18) && (1UL<<((( 1*32+26))&31) & 0 )) || (((( 1*32+26))>>5)==(19) && (1UL<<((( 1*32+26))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 1*32+26), (unsigned long *)((&boot_cpu_data)->x86_capability)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_vmap_pmd_supported(pgprot_t prot)
{
 return (__builtin_constant_p(( 0*32+ 3)) && ( (((( 0*32+ 3))>>5)==(0) && (1UL<<((( 0*32+ 3))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+ 3))>>5)==(1) && (1UL<<((( 0*32+ 3))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+ 3))>>5)==(2) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(3) && (1UL<<((( 0*32+ 3))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+ 3))>>5)==(4) && (1UL<<((( 0*32+ 3))&31) & (0) )) || (((( 0*32+ 3))>>5)==(5) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(6) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(7) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(8) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(9) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(10) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(11) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(12) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(13) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(14) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(15) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(16) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(17) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(18) && (1UL<<((( 0*32+ 3))&31) & 0 )) || (((( 0*32+ 3))>>5)==(19) && (1UL<<((( 0*32+ 3))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 0*32+ 3), (unsigned long *)((&boot_cpu_data)->x86_capability)));
}
# 14 "./include/linux/vmalloc.h" 2

struct vm_area_struct;
struct notifier_block;
# 52 "./include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;



 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;

 struct rb_node rb_node;
 struct list_head list;







 union {
  unsigned long subtree_max_size;
  struct vm_struct *vm;
 };
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_vmap_p4d_supported(pgprot_t prot)
{
 return false;
}
# 108 "./include/linux/vmalloc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long arch_vmap_pte_range_map_size(unsigned long addr, unsigned long end,
        u64 pfn, unsigned int max_page_shift)
{
 return ((1UL) << 12);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_vmap_pte_supported_shift(unsigned long size)
{
 return 12;
}





extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count, int node);
extern void vm_unmap_aliases(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vzalloc(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_user(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_node(unsigned long size, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vzalloc_node(unsigned long size, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_32(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_32_user(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *__vmalloc_node(unsigned long size, unsigned long align, gfp_t gfp_mask,
  int node, const void *caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *vmalloc_no_huge(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));

extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
void *vmap_pfn(unsigned long *pfns, unsigned int count, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long pgoff, unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
# 184 "./include/linux/vmalloc.h"
void arch_sync_kernel_mappings(unsigned long start, unsigned long end);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << 12);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
void free_vm_area(struct vm_struct *area);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_vm_area_hugepages(const void *addr)
{
# 223 "./include/linux/vmalloc.h"
 return false;

}


void vunmap_range(unsigned long addr, unsigned long end);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_vm_flush_reset_perms(void *addr)
{
 struct vm_struct *vm = find_vm_area(addr);

 if (vm)
  vm->flags |= 0x00000100;
}
# 244 "./include/linux/vmalloc.h"
extern long vread(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_register_early(struct vm_struct *vm, size_t align);
# 282 "./include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmalloc_dump_obj(void *object) { return false; }
# 22 "./include/linux/kvm_host.h" 2




# 1 "./include/linux/context_tracking.h" 1
# 101 "./include/linux/context_tracking.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void user_exit(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void user_enter_irqoff(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void user_exit_irqoff(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum ctx_state exception_enter(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exception_exit(enum ctx_state prev_ctx) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum ctx_state ct_state(void) { return CONTEXT_DISABLED; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool context_tracking_guest_enter(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void context_tracking_guest_exit(void) { }
# 118 "./include/linux/context_tracking.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void context_tracking_init(void) { }
# 27 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/irqbypass.h" 1
# 13 "./include/linux/irqbypass.h"
struct irq_bypass_consumer;
# 45 "./include/linux/irqbypass.h"
struct irq_bypass_producer {
 struct list_head node;
 void *token;
 int irq;
 int (*add_consumer)(struct irq_bypass_producer *,
       struct irq_bypass_consumer *);
 void (*del_consumer)(struct irq_bypass_producer *,
        struct irq_bypass_consumer *);
 void (*stop)(struct irq_bypass_producer *);
 void (*start)(struct irq_bypass_producer *);
};
# 71 "./include/linux/irqbypass.h"
struct irq_bypass_consumer {
 struct list_head node;
 void *token;
 int (*add_producer)(struct irq_bypass_consumer *,
       struct irq_bypass_producer *);
 void (*del_producer)(struct irq_bypass_consumer *,
        struct irq_bypass_producer *);
 void (*stop)(struct irq_bypass_consumer *);
 void (*start)(struct irq_bypass_consumer *);
};

int irq_bypass_register_producer(struct irq_bypass_producer *);
void irq_bypass_unregister_producer(struct irq_bypass_producer *);
int irq_bypass_register_consumer(struct irq_bypass_consumer *);
void irq_bypass_unregister_consumer(struct irq_bypass_consumer *);
# 28 "./include/linux/kvm_host.h" 2


# 1 "./include/linux/nospec.h" 1
# 12 "./include/linux/nospec.h"
struct task_struct;
# 64 "./include/linux/nospec.h"
int arch_prctl_spec_ctrl_get(struct task_struct *task, unsigned long which);
int arch_prctl_spec_ctrl_set(struct task_struct *task, unsigned long which,
        unsigned long ctrl);

void arch_seccomp_spec_mitigate(struct task_struct *task);
# 31 "./include/linux/kvm_host.h" 2



# 1 "./include/uapi/linux/kvm.h" 1
# 15 "./include/uapi/linux/kvm.h"
# 1 "./arch/x86/include/uapi/asm/kvm.h" 1
# 56 "./arch/x86/include/uapi/asm/kvm.h"
struct kvm_memory_alias {
 __u32 slot;
 __u32 flags;
 __u64 guest_phys_addr;
 __u64 memory_size;
 __u64 target_phys_addr;
};


struct kvm_pic_state {
 __u8 last_irr;
 __u8 irr;
 __u8 imr;
 __u8 isr;
 __u8 priority_add;
 __u8 irq_base;
 __u8 read_reg_select;
 __u8 poll;
 __u8 special_mask;
 __u8 init_state;
 __u8 auto_eoi;
 __u8 rotate_on_auto_eoi;
 __u8 special_fully_nested_mode;
 __u8 init4;
 __u8 elcr;
 __u8 elcr_mask;
};


struct kvm_ioapic_state {
 __u64 base_address;
 __u32 ioregsel;
 __u32 id;
 __u32 irr;
 __u32 pad;
 union {
  __u64 bits;
  struct {
   __u8 vector;
   __u8 delivery_mode:3;
   __u8 dest_mode:1;
   __u8 delivery_status:1;
   __u8 polarity:1;
   __u8 remote_irr:1;
   __u8 trig_mode:1;
   __u8 mask:1;
   __u8 reserve:7;
   __u8 reserved[4];
   __u8 dest_id;
  } fields;
 } redirtbl[24];
};
# 118 "./arch/x86/include/uapi/asm/kvm.h"
struct kvm_regs {

 __u64 rax, rbx, rcx, rdx;
 __u64 rsi, rdi, rsp, rbp;
 __u64 r8, r9, r10, r11;
 __u64 r12, r13, r14, r15;
 __u64 rip, rflags;
};



struct kvm_lapic_state {
 char regs[0x400];
};

struct kvm_segment {
 __u64 base;
 __u32 limit;
 __u16 selector;
 __u8 type;
 __u8 present, dpl, db, s, l, g, avl;
 __u8 unusable;
 __u8 padding;
};

struct kvm_dtable {
 __u64 base;
 __u16 limit;
 __u16 padding[3];
};



struct kvm_sregs {

 struct kvm_segment cs, ds, es, fs, gs, ss;
 struct kvm_segment tr, ldt;
 struct kvm_dtable gdt, idt;
 __u64 cr0, cr2, cr3, cr4, cr8;
 __u64 efer;
 __u64 apic_base;
 __u64 interrupt_bitmap[(256 + 63) / 64];
};

struct kvm_sregs2 {

 struct kvm_segment cs, ds, es, fs, gs, ss;
 struct kvm_segment tr, ldt;
 struct kvm_dtable gdt, idt;
 __u64 cr0, cr2, cr3, cr4, cr8;
 __u64 efer;
 __u64 apic_base;
 __u64 flags;
 __u64 pdptrs[4];
};



struct kvm_fpu {
 __u8 fpr[8][16];
 __u16 fcw;
 __u16 fsw;
 __u8 ftwx;
 __u8 pad1;
 __u16 last_opcode;
 __u64 last_ip;
 __u64 last_dp;
 __u8 xmm[16][16];
 __u32 mxcsr;
 __u32 pad2;
};

struct kvm_msr_entry {
 __u32 index;
 __u32 reserved;
 __u64 data;
};


struct kvm_msrs {
 __u32 nmsrs;
 __u32 pad;

 struct kvm_msr_entry entries[0];
};


struct kvm_msr_list {
 __u32 nmsrs;
 __u32 indices[0];
};





struct kvm_msr_filter_range {


 __u32 flags;
 __u32 nmsrs;
 __u32 base;
 __u8 *bitmap;
};


struct kvm_msr_filter {


 __u32 flags;
 struct kvm_msr_filter_range ranges[16];
};

struct kvm_cpuid_entry {
 __u32 function;
 __u32 eax;
 __u32 ebx;
 __u32 ecx;
 __u32 edx;
 __u32 padding;
};


struct kvm_cpuid {
 __u32 nent;
 __u32 padding;
 struct kvm_cpuid_entry entries[0];
};

struct kvm_cpuid_entry2 {
 __u32 function;
 __u32 index;
 __u32 flags;
 __u32 eax;
 __u32 ebx;
 __u32 ecx;
 __u32 edx;
 __u32 padding[3];
};






struct kvm_cpuid2 {
 __u32 nent;
 __u32 padding;
 struct kvm_cpuid_entry2 entries[0];
};


struct kvm_pit_channel_state {
 __u32 count;
 __u16 latched_count;
 __u8 count_latched;
 __u8 status_latched;
 __u8 status;
 __u8 read_state;
 __u8 write_state;
 __u8 write_latch;
 __u8 rw_mode;
 __u8 mode;
 __u8 bcd;
 __u8 gate;
 __s64 count_load_time;
};

struct kvm_debug_exit_arch {
 __u32 exception;
 __u32 pad;
 __u64 pc;
 __u64 dr6;
 __u64 dr7;
};
# 301 "./arch/x86/include/uapi/asm/kvm.h"
struct kvm_guest_debug_arch {
 __u64 debugreg[8];
};

struct kvm_pit_state {
 struct kvm_pit_channel_state channels[3];
};



struct kvm_pit_state2 {
 struct kvm_pit_channel_state channels[3];
 __u32 flags;
 __u32 reserved[9];
};

struct kvm_reinject_control {
 __u8 pit_reinject;
 __u8 reserved[31];
};
# 334 "./arch/x86/include/uapi/asm/kvm.h"
struct kvm_vcpu_events {
 struct {
  __u8 injected;
  __u8 nr;
  __u8 has_error_code;
  __u8 pending;
  __u32 error_code;
 } exception;
 struct {
  __u8 injected;
  __u8 nr;
  __u8 soft;
  __u8 shadow;
 } interrupt;
 struct {
  __u8 injected;
  __u8 pending;
  __u8 masked;
  __u8 pad;
 } nmi;
 __u32 sipi_vector;
 __u32 flags;
 struct {
  __u8 smm;
  __u8 pending;
  __u8 smm_inside_nmi;
  __u8 latched_init;
 } smi;
 __u8 reserved[27];
 __u8 exception_has_payload;
 __u64 exception_payload;
};


struct kvm_debugregs {
 __u64 db[4];
 __u64 dr6;
 __u64 dr7;
 __u64 flags;
 __u64 reserved[9];
};


struct kvm_xsave {
 __u32 region[1024];
};



struct kvm_xcr {
 __u32 xcr;
 __u32 reserved;
 __u64 value;
};

struct kvm_xcrs {
 __u32 nr_xcrs;
 __u32 flags;
 struct kvm_xcr xcrs[16];
 __u64 padding[16];
};
# 406 "./arch/x86/include/uapi/asm/kvm.h"
struct kvm_sync_regs {





 struct kvm_regs regs;
 struct kvm_sregs sregs;
 struct kvm_vcpu_events events;
};
# 441 "./arch/x86/include/uapi/asm/kvm.h"
struct kvm_vmx_nested_state_data {
 __u8 vmcs12[0x1000];
 __u8 shadow_vmcs12[0x1000];
};

struct kvm_vmx_nested_state_hdr {
 __u64 vmxon_pa;
 __u64 vmcs12_pa;

 struct {
  __u16 flags;
 } smm;

 __u16 pad;

 __u32 flags;
 __u64 preemption_timer_deadline;
};

struct kvm_svm_nested_state_data {

 __u8 vmcb12[0x1000];
};

struct kvm_svm_nested_state_hdr {
 __u64 vmcb_pa;
};


struct kvm_nested_state {
 __u16 flags;
 __u16 format;
 __u32 size;

 union {
  struct kvm_vmx_nested_state_hdr vmx;
  struct kvm_svm_nested_state_hdr svm;


  __u8 pad[120];
 } hdr;






 union {
  struct kvm_vmx_nested_state_data vmx[0];
  struct kvm_svm_nested_state_data svm[0];
 } data;
};


struct kvm_pmu_event_filter {
 __u32 action;
 __u32 nevents;
 __u32 fixed_counter_bitmap;
 __u32 flags;
 __u32 pad[4];
 __u64 events[0];
};
# 16 "./include/uapi/linux/kvm.h" 2
# 59 "./include/uapi/linux/kvm.h"
struct kvm_user_trace_setup {
 __u32 buf_size;
 __u32 buf_nr;
};
# 71 "./include/uapi/linux/kvm.h"
struct kvm_breakpoint {
 __u32 enabled;
 __u32 padding;
 __u64 address;
};

struct kvm_debug_guest {
 __u32 enabled;
 __u32 pad;
 struct kvm_breakpoint breakpoints[4];
 __u32 singlestep;
};







struct kvm_memory_region {
 __u32 slot;
 __u32 flags;
 __u64 guest_phys_addr;
 __u64 memory_size;
};


struct kvm_userspace_memory_region {
 __u32 slot;
 __u32 flags;
 __u64 guest_phys_addr;
 __u64 memory_size;
 __u64 userspace_addr;
};
# 115 "./include/uapi/linux/kvm.h"
struct kvm_irq_level {






 union {
  __u32 irq;
  __s32 status;
 };
 __u32 level;
};


struct kvm_irqchip {
 __u32 chip_id;
 __u32 pad;
        union {
  char dummy[512];

  struct kvm_pic_state pic;


  struct kvm_ioapic_state ioapic;

 } chip;
};


struct kvm_pit_config {
 __u32 flags;
 __u32 pad[15];
};



struct kvm_s390_skeys {
 __u64 start_gfn;
 __u64 count;
 __u64 skeydata_addr;
 __u32 flags;
 __u32 reserved[9];
};
# 178 "./include/uapi/linux/kvm.h"
struct kvm_s390_cmma_log {
 __u64 start_gfn;
 __u32 count;
 __u32 flags;
 union {
  __u64 remaining;
  __u64 mask;
 };
 __u64 values;
};

struct kvm_hyperv_exit {



 __u32 type;
 __u32 pad1;
 union {
  struct {
   __u32 msr;
   __u32 pad2;
   __u64 control;
   __u64 evt_page;
   __u64 msg_page;
  } synic;
  struct {
   __u64 input;
   __u64 result;
   __u64 params[2];
  } hcall;
  struct {
   __u32 msr;
   __u32 pad2;
   __u64 control;
   __u64 status;
   __u64 send_page;
   __u64 recv_page;
   __u64 pending_page;
  } syndbg;
 } u;
};

struct kvm_xen_exit {

 __u32 type;
 union {
  struct {
   __u32 longmode;
   __u32 cpl;
   __u64 input;
   __u64 result;
   __u64 params[6];
  } hcall;
 } u;
};
# 288 "./include/uapi/linux/kvm.h"
struct kvm_run {

 __u8 request_interrupt_window;
 __u8 immediate_exit;
 __u8 padding1[6];


 __u32 exit_reason;
 __u8 ready_for_interrupt_injection;
 __u8 if_flag;
 __u16 flags;


 __u64 cr8;
 __u64 apic_base;






 union {

  struct {
   __u64 hardware_exit_reason;
  } hw;

  struct {
   __u64 hardware_entry_failure_reason;
   __u32 cpu;
  } fail_entry;

  struct {
   __u32 exception;
   __u32 error_code;
  } ex;

  struct {


   __u8 direction;
   __u8 size;
   __u16 port;
   __u32 count;
   __u64 data_offset;
  } io;

  struct {
   struct kvm_debug_exit_arch arch;
  } debug;

  struct {
   __u64 phys_addr;
   __u8 data[8];
   __u32 len;
   __u8 is_write;
  } mmio;

  struct {
   __u64 nr;
   __u64 args[6];
   __u64 ret;
   __u32 longmode;
   __u32 pad;
  } hypercall;

  struct {
   __u64 rip;
   __u32 is_write;
   __u32 pad;
  } tpr_access;

  struct {
   __u8 icptcode;
   __u16 ipa;
   __u32 ipb;
  } s390_sieic;






  __u64 s390_reset_flags;

  struct {
   __u64 trans_exc_code;
   __u32 pgm_code;
  } s390_ucontrol;

  struct {
   __u32 dcrn;
   __u32 data;
   __u8 is_write;
  } dcr;

  struct {
   __u32 suberror;

   __u32 ndata;
   __u64 data[16];
  } internal;
# 407 "./include/uapi/linux/kvm.h"
  struct {
   __u32 suberror;
   __u32 ndata;
   __u64 flags;
   union {
    struct {
     __u8 insn_size;
     __u8 insn_bytes[15];
    };
   };

  } emulation_failure;

  struct {
   __u64 gprs[32];
  } osi;

  struct {
   __u64 nr;
   __u64 ret;
   __u64 args[9];
  } papr_hcall;

  struct {
   __u16 subchannel_id;
   __u16 subchannel_nr;
   __u32 io_int_parm;
   __u32 io_int_word;
   __u32 ipb;
   __u8 dequeued;
  } s390_tsch;

  struct {
   __u32 epr;
  } epr;

  struct {



   __u32 type;
   __u64 flags;
  } system_event;

  struct {
   __u64 addr;
   __u8 ar;
   __u8 reserved;
   __u8 fc;
   __u8 sel1;
   __u16 sel2;
  } s390_stsi;

  struct {
   __u8 vector;
  } eoi;

  struct kvm_hyperv_exit hyperv;

  struct {
   __u64 esr_iss;
   __u64 fault_ipa;
  } arm_nisv;

  struct {
   __u8 error;
   __u8 pad[7];



   __u32 reason;
   __u32 index;
   __u64 data;
  } msr;

  struct kvm_xen_exit xen;

  struct {
   unsigned long extension_id;
   unsigned long function_id;
   unsigned long args[6];
   unsigned long ret[2];
  } riscv_sbi;

  char padding[256];
 };
# 505 "./include/uapi/linux/kvm.h"
 __u64 kvm_valid_regs;
 __u64 kvm_dirty_regs;
 union {
  struct kvm_sync_regs regs;
  char padding[2048];
 } s;
};



struct kvm_coalesced_mmio_zone {
 __u64 addr;
 __u32 size;
 union {
  __u32 pad;
  __u32 pio;
 };
};

struct kvm_coalesced_mmio {
 __u64 phys_addr;
 __u32 len;
 union {
  __u32 pad;
  __u32 pio;
 };
 __u8 data[8];
};

struct kvm_coalesced_mmio_ring {
 __u32 first, last;
 struct kvm_coalesced_mmio coalesced_mmio[0];
};






struct kvm_translation {

 __u64 linear_address;


 __u64 physical_address;
 __u8 valid;
 __u8 writeable;
 __u8 usermode;
 __u8 pad[5];
};


struct kvm_s390_mem_op {

 __u64 gaddr;
 __u64 flags;
 __u32 size;
 __u32 op;
 __u64 buf;
 union {
  __u8 ar;
  __u32 sida_offset;
  __u8 reserved[32];
 };
};
# 580 "./include/uapi/linux/kvm.h"
struct kvm_interrupt {

 __u32 irq;
};


struct kvm_dirty_log {
 __u32 slot;
 __u32 padding1;
 union {
  void *dirty_bitmap;
  __u64 padding2;
 };
};


struct kvm_clear_dirty_log {
 __u32 slot;
 __u32 num_pages;
 __u64 first_page;
 union {
  void *dirty_bitmap;
  __u64 padding2;
 };
};


struct kvm_signal_mask {
 __u32 len;
 __u8 sigset[0];
};


struct kvm_tpr_access_ctl {
 __u32 enabled;
 __u32 flags;
 __u32 reserved[8];
};


struct kvm_vapic_addr {
 __u64 vapic_addr;
};
# 638 "./include/uapi/linux/kvm.h"
struct kvm_mp_state {
 __u32 mp_state;
};

struct kvm_s390_psw {
 __u64 mask;
 __u64 addr;
};
# 672 "./include/uapi/linux/kvm.h"
struct kvm_s390_interrupt {
 __u32 type;
 __u32 parm;
 __u64 parm64;
};

struct kvm_s390_io_info {
 __u16 subchannel_id;
 __u16 subchannel_nr;
 __u32 io_int_parm;
 __u32 io_int_word;
};

struct kvm_s390_ext_info {
 __u32 ext_params;
 __u32 pad;
 __u64 ext_params2;
};

struct kvm_s390_pgm_info {
 __u64 trans_exc_code;
 __u64 mon_code;
 __u64 per_address;
 __u32 data_exc_code;
 __u16 code;
 __u16 mon_class_nr;
 __u8 per_code;
 __u8 per_atmid;
 __u8 exc_access_id;
 __u8 per_access_id;
 __u8 op_access_id;





 __u8 flags;
 __u8 pad[2];
};

struct kvm_s390_prefix_info {
 __u32 address;
};

struct kvm_s390_extcall_info {
 __u16 code;
};

struct kvm_s390_emerg_info {
 __u16 code;
};


struct kvm_s390_stop_info {
 __u32 flags;
};

struct kvm_s390_mchk_info {
 __u64 cr14;
 __u64 mcic;
 __u64 failing_storage_address;
 __u32 ext_damage_code;
 __u32 pad;
 __u8 fixed_logout[16];
};

struct kvm_s390_irq {
 __u64 type;
 union {
  struct kvm_s390_io_info io;
  struct kvm_s390_ext_info ext;
  struct kvm_s390_pgm_info pgm;
  struct kvm_s390_emerg_info emerg;
  struct kvm_s390_extcall_info extcall;
  struct kvm_s390_prefix_info prefix;
  struct kvm_s390_stop_info stop;
  struct kvm_s390_mchk_info mchk;
  char reserved[64];
 } u;
};

struct kvm_s390_irq_state {
 __u64 buf;
 __u32 flags;
 __u32 len;
 __u32 reserved[4];
};






struct kvm_guest_debug {
 __u32 control;
 __u32 pad;
 struct kvm_guest_debug_arch arch;
};

enum {
 kvm_ioeventfd_flag_nr_datamatch,
 kvm_ioeventfd_flag_nr_pio,
 kvm_ioeventfd_flag_nr_deassign,
 kvm_ioeventfd_flag_nr_virtio_ccw_notify,
 kvm_ioeventfd_flag_nr_fast_mmio,
 kvm_ioeventfd_flag_nr_max,
};
# 788 "./include/uapi/linux/kvm.h"
struct kvm_ioeventfd {
 __u64 datamatch;
 __u64 addr;
 __u32 len;
 __s32 fd;
 __u32 flags;
 __u8 pad[36];
};
# 807 "./include/uapi/linux/kvm.h"
struct kvm_enable_cap {

 __u32 cap;
 __u32 flags;
 __u64 args[4];
 __u8 pad[64];
};





struct kvm_ppc_pvinfo {

 __u32 flags;
 __u32 hcall[4];
 __u8 pad[108];
};




struct kvm_ppc_one_page_size {
 __u32 page_shift;
 __u32 pte_enc;
};

struct kvm_ppc_one_seg_page_size {
 __u32 page_shift;
 __u32 slb_enc;
 struct kvm_ppc_one_page_size enc[8];
};





struct kvm_ppc_smmu_info {
 __u64 flags;
 __u32 slb_size;
 __u16 data_keys;
 __u16 instr_keys;
 struct kvm_ppc_one_seg_page_size sps[8];
};


struct kvm_ppc_resize_hpt {
 __u64 flags;
 __u32 shift;
 __u32 pad;
};
# 1137 "./include/uapi/linux/kvm.h"
struct kvm_irq_routing_irqchip {
 __u32 irqchip;
 __u32 pin;
};

struct kvm_irq_routing_msi {
 __u32 address_lo;
 __u32 address_hi;
 __u32 data;
 union {
  __u32 pad;
  __u32 devid;
 };
};

struct kvm_irq_routing_s390_adapter {
 __u64 ind_addr;
 __u64 summary_addr;
 __u64 ind_offset;
 __u32 summary_offset;
 __u32 adapter_id;
};

struct kvm_irq_routing_hv_sint {
 __u32 vcpu;
 __u32 sint;
};







struct kvm_irq_routing_entry {
 __u32 gsi;
 __u32 type;
 __u32 flags;
 __u32 pad;
 union {
  struct kvm_irq_routing_irqchip irqchip;
  struct kvm_irq_routing_msi msi;
  struct kvm_irq_routing_s390_adapter adapter;
  struct kvm_irq_routing_hv_sint hv_sint;
  __u32 pad[8];
 } u;
};

struct kvm_irq_routing {
 __u32 nr;
 __u32 flags;
 struct kvm_irq_routing_entry entries[0];
};





struct kvm_x86_mce {
 __u64 status;
 __u64 addr;
 __u64 misc;
 __u64 mcg_status;
 __u8 bank;
 __u8 pad1[7];
 __u64 pad2[3];
};
# 1212 "./include/uapi/linux/kvm.h"
struct kvm_xen_hvm_config {
 __u32 flags;
 __u32 msr;
 __u64 blob_addr_32;
 __u64 blob_addr_64;
 __u8 blob_size_32;
 __u8 blob_size_64;
 __u8 pad2[30];
};
# 1233 "./include/uapi/linux/kvm.h"
struct kvm_irqfd {
 __u32 fd;
 __u32 gsi;
 __u32 flags;
 __u32 resamplefd;
 __u8 pad[16];
};
# 1248 "./include/uapi/linux/kvm.h"
struct kvm_clock_data {
 __u64 clock;
 __u32 flags;
 __u32 pad0;
 __u64 realtime;
 __u64 host_tsc;
 __u32 pad[4];
};






struct kvm_config_tlb {
 __u64 params;
 __u64 array;
 __u32 mmu_type;
 __u32 array_len;
};

struct kvm_dirty_tlb {
 __u64 bitmap;
 __u32 num_dirty;
};
# 1304 "./include/uapi/linux/kvm.h"
struct kvm_reg_list {
 __u64 n;
 __u64 reg[0];
};

struct kvm_one_reg {
 __u64 id;
 __u64 addr;
};


struct kvm_msi {
 __u32 address_lo;
 __u32 address_hi;
 __u32 data;
 __u32 flags;
 __u32 devid;
 __u8 pad[12];
};

struct kvm_arm_device_addr {
 __u64 id;
 __u64 addr;
};






struct kvm_create_device {
 __u32 type;
 __u32 fd;
 __u32 flags;
};

struct kvm_device_attr {
 __u32 flags;
 __u32 group;
 __u64 attr;
 __u64 addr;
};






enum kvm_device_type {
 KVM_DEV_TYPE_FSL_MPIC_20 = 1,

 KVM_DEV_TYPE_FSL_MPIC_42,

 KVM_DEV_TYPE_XICS,

 KVM_DEV_TYPE_VFIO,

 KVM_DEV_TYPE_ARM_VGIC_V2,

 KVM_DEV_TYPE_FLIC,

 KVM_DEV_TYPE_ARM_VGIC_V3,

 KVM_DEV_TYPE_ARM_VGIC_ITS,

 KVM_DEV_TYPE_XIVE,

 KVM_DEV_TYPE_ARM_PV_TIME,

 KVM_DEV_TYPE_MAX,
};

struct kvm_vfio_spapr_tce {
 __s32 groupfd;
 __s32 tablefd;
};
# 1401 "./include/uapi/linux/kvm.h"
struct kvm_s390_ucas_mapping {
 __u64 user_addr;
 __u64 vcpu_addr;
 __u64 length;
};
# 1585 "./include/uapi/linux/kvm.h"
struct kvm_enc_region {
 __u64 addr;
 __u64 size;
};
# 1613 "./include/uapi/linux/kvm.h"
struct kvm_s390_pv_sec_parm {
 __u64 origin;
 __u64 length;
};

struct kvm_s390_pv_unp {
 __u64 addr;
 __u64 size;
 __u64 tweak;
};

enum pv_cmd_id {
 KVM_PV_ENABLE,
 KVM_PV_DISABLE,
 KVM_PV_SET_SEC_PARMS,
 KVM_PV_UNPACK,
 KVM_PV_VERIFY,
 KVM_PV_PREP_RESET,
 KVM_PV_UNSHARE_ALL,
};

struct kvm_pv_cmd {
 __u32 cmd;
 __u16 rc;
 __u16 rrc;
 __u64 data;
 __u32 flags;
 __u32 reserved[3];
};
# 1656 "./include/uapi/linux/kvm.h"
struct kvm_xen_hvm_attr {
 __u16 type;
 __u16 pad[3];
 union {
  __u8 long_mode;
  __u8 vector;
  struct {
   __u64 gfn;
  } shared_info;
  __u64 pad[8];
 } u;
};
# 1681 "./include/uapi/linux/kvm.h"
struct kvm_xen_vcpu_attr {
 __u16 type;
 __u16 pad[3];
 union {
  __u64 gpa;
  __u64 pad[8];
  struct {
   __u64 state;
   __u64 state_entry_time;
   __u64 time_running;
   __u64 time_runnable;
   __u64 time_blocked;
   __u64 time_offline;
  } runstate;
 } u;
};
# 1707 "./include/uapi/linux/kvm.h"
enum sev_cmd_id {

 KVM_SEV_INIT = 0,
 KVM_SEV_ES_INIT,

 KVM_SEV_LAUNCH_START,
 KVM_SEV_LAUNCH_UPDATE_DATA,
 KVM_SEV_LAUNCH_UPDATE_VMSA,
 KVM_SEV_LAUNCH_SECRET,
 KVM_SEV_LAUNCH_MEASURE,
 KVM_SEV_LAUNCH_FINISH,

 KVM_SEV_SEND_START,
 KVM_SEV_SEND_UPDATE_DATA,
 KVM_SEV_SEND_UPDATE_VMSA,
 KVM_SEV_SEND_FINISH,

 KVM_SEV_RECEIVE_START,
 KVM_SEV_RECEIVE_UPDATE_DATA,
 KVM_SEV_RECEIVE_UPDATE_VMSA,
 KVM_SEV_RECEIVE_FINISH,

 KVM_SEV_GUEST_STATUS,
 KVM_SEV_DBG_DECRYPT,
 KVM_SEV_DBG_ENCRYPT,

 KVM_SEV_CERT_EXPORT,

 KVM_SEV_GET_ATTESTATION_REPORT,

 KVM_SEV_SEND_CANCEL,

 KVM_SEV_NR_MAX,
};

struct kvm_sev_cmd {
 __u32 id;
 __u64 data;
 __u32 error;
 __u32 sev_fd;
};

struct kvm_sev_launch_start {
 __u32 handle;
 __u32 policy;
 __u64 dh_uaddr;
 __u32 dh_len;
 __u64 session_uaddr;
 __u32 session_len;
};

struct kvm_sev_launch_update_data {
 __u64 uaddr;
 __u32 len;
};


struct kvm_sev_launch_secret {
 __u64 hdr_uaddr;
 __u32 hdr_len;
 __u64 guest_uaddr;
 __u32 guest_len;
 __u64 trans_uaddr;
 __u32 trans_len;
};

struct kvm_sev_launch_measure {
 __u64 uaddr;
 __u32 len;
};

struct kvm_sev_guest_status {
 __u32 handle;
 __u32 policy;
 __u32 state;
};

struct kvm_sev_dbg {
 __u64 src_uaddr;
 __u64 dst_uaddr;
 __u32 len;
};

struct kvm_sev_attestation_report {
 __u8 mnonce[16];
 __u64 uaddr;
 __u32 len;
};

struct kvm_sev_send_start {
 __u32 policy;
 __u64 pdh_cert_uaddr;
 __u32 pdh_cert_len;
 __u64 plat_certs_uaddr;
 __u32 plat_certs_len;
 __u64 amd_certs_uaddr;
 __u32 amd_certs_len;
 __u64 session_uaddr;
 __u32 session_len;
};

struct kvm_sev_send_update_data {
 __u64 hdr_uaddr;
 __u32 hdr_len;
 __u64 guest_uaddr;
 __u32 guest_len;
 __u64 trans_uaddr;
 __u32 trans_len;
};

struct kvm_sev_receive_start {
 __u32 handle;
 __u32 policy;
 __u64 pdh_uaddr;
 __u32 pdh_len;
 __u64 session_uaddr;
 __u32 session_len;
};

struct kvm_sev_receive_update_data {
 __u64 hdr_uaddr;
 __u32 hdr_len;
 __u64 guest_uaddr;
 __u32 guest_len;
 __u64 trans_uaddr;
 __u32 trans_len;
};





struct kvm_assigned_pci_dev {
 __u32 assigned_dev_id;
 __u32 busnr;
 __u32 devfn;
 __u32 flags;
 __u32 segnr;
 union {
  __u32 reserved[11];
 };
};
# 1861 "./include/uapi/linux/kvm.h"
struct kvm_assigned_irq {
 __u32 assigned_dev_id;
 __u32 host_irq;
 __u32 guest_irq;
 __u32 flags;
 union {
  __u32 reserved[12];
 };
};

struct kvm_assigned_msix_nr {
 __u32 assigned_dev_id;
 __u16 entry_nr;
 __u16 padding;
};


struct kvm_assigned_msix_entry {
 __u32 assigned_dev_id;
 __u32 gsi;
 __u16 entry;
 __u16 padding[3];
};
# 1895 "./include/uapi/linux/kvm.h"
struct kvm_hyperv_eventfd {
 __u32 conn_id;
 __s32 fd;
 __u32 flags;
 __u32 padding[3];
};
# 1950 "./include/uapi/linux/kvm.h"
struct kvm_dirty_gfn {
 __u32 flags;
 __u32 slot;
 __u64 offset;
};
# 1978 "./include/uapi/linux/kvm.h"
struct kvm_stats_header {
 __u32 flags;
 __u32 name_size;
 __u32 num_desc;
 __u32 id_offset;
 __u32 desc_offset;
 __u32 data_offset;
};
# 2023 "./include/uapi/linux/kvm.h"
struct kvm_stats_desc {
 __u32 flags;
 __s16 exponent;
 __u16 size;
 __u32 offset;
 __u32 bucket_size;
 char name[];
};
# 35 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/kvm_para.h" 1




# 1 "./include/uapi/linux/kvm_para.h" 1
# 37 "./include/uapi/linux/kvm_para.h"
# 1 "./arch/x86/include/asm/kvm_para.h" 1






# 1 "./include/linux/interrupt.h" 1








# 1 "./include/linux/irqreturn.h" 1
# 11 "./include/linux/irqreturn.h"
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;
# 10 "./include/linux/interrupt.h" 2
# 1 "./include/linux/irqnr.h" 1




# 1 "./include/uapi/linux/irqnr.h" 1
# 6 "./include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 11 "./include/linux/interrupt.h" 2
# 95 "./include/linux/interrupt.h"
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
# 118 "./include/linux/interrupt.h"
struct irqaction {
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 struct irqaction *secondary;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 const char *name;
 struct proc_dir_entry *dir;
} ;

extern irqreturn_t no_action(int cpl, void *dev_id);
# 146 "./include/linux/interrupt.h"
extern int __attribute__((__warn_unused_result__))
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, const char *name, void *dev);
# 164 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev)
{
 return request_threaded_irq(irq, handler, ((void *)0), flags, name, dev);
}

extern int __attribute__((__warn_unused_result__))
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, const char *name, void *dev_id);

extern int __attribute__((__warn_unused_result__))
__request_percpu_irq(unsigned int irq, irq_handler_t handler,
       unsigned long flags, const char *devname,
       void *percpu_dev_id);

extern int __attribute__((__warn_unused_result__))
request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     const char *devname, void *percpu_dev_id)
{
 return __request_percpu_irq(irq, handler, 0,
        devname, percpu_dev_id);
}

extern int __attribute__((__warn_unused_result__))
request_percpu_nmi(unsigned int irq, irq_handler_t handler,
     const char *devname, void *dev);

extern const void *free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

extern const void *free_nmi(unsigned int irq, void *dev_id);
extern void free_percpu_nmi(unsigned int irq, void *percpu_dev_id);

struct device;

extern int __attribute__((__warn_unused_result__))
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, const char *devname,
     void *dev_id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, const char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, ((void *)0), irqflags,
      devname, dev_id);
}

extern int __attribute__((__warn_unused_result__))
devm_request_any_context_irq(struct device *dev, unsigned int irq,
   irq_handler_t handler, unsigned long irqflags,
   const char *devname, void *dev_id);

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
# 243 "./include/linux/interrupt.h"
bool irq_has_action(unsigned int irq);
extern void disable_irq_nosync(unsigned int irq);
extern bool disable_hardirq(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);
extern bool irq_percpu_is_enabled(unsigned int irq);
extern void irq_wake_thread(unsigned int irq, void *dev_id);

extern void disable_nmi_nosync(unsigned int irq);
extern void disable_percpu_nmi(unsigned int irq);
extern void enable_nmi(unsigned int irq);
extern void enable_percpu_nmi(unsigned int irq, unsigned int type);
extern int prepare_percpu_nmi(unsigned int irq);
extern void teardown_percpu_nmi(unsigned int irq);

extern int irq_inject_interrupt(unsigned int irq);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);
extern void rearm_wake_irq(unsigned int irq);
# 279 "./include/linux/interrupt.h"
struct irq_affinity_notify {
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
 void (*release)(struct kref *ref);
};
# 303 "./include/linux/interrupt.h"
struct irq_affinity {
 unsigned int pre_vectors;
 unsigned int post_vectors;
 unsigned int nr_sets;
 unsigned int set_size[4];
 void (*calc_sets)(struct irq_affinity *, unsigned int nvecs);
 void *priv;
};






struct irq_affinity_desc {
 struct cpumask mask;
 unsigned int is_managed : 1;
};
# 347 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_set_affinity(unsigned int irq, const struct cpumask *m)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_force_affinity(unsigned int irq, const struct cpumask *cpumask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_can_set_affinity(unsigned int irq)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_select_affinity(unsigned int irq) { return 0; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_set_affinity_hint(unsigned int irq,
     const struct cpumask *m)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_update_affinity_desc(unsigned int irq,
        struct irq_affinity_desc *affinity)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_affinity_desc *
irq_create_affinity_masks(unsigned int nvec, struct irq_affinity *affd)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int
irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
     const struct irq_affinity *affd)
{
 return maxvec;
}
# 408 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);

 do { arch_local_irq_disable(); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);

 do { do { ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); *flags = arch_local_irq_save(); } while (0); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);

 do { arch_local_irq_disable(); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void enable_irq_lockdep(unsigned int irq)
{

 do { arch_local_irq_enable(); } while (0);

 enable_irq(irq);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{

 do { do { ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(*flags); } while (0); } while (0);

 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}




enum irqchip_irq_state {
 IRQCHIP_STATE_PENDING,
 IRQCHIP_STATE_ACTIVE,
 IRQCHIP_STATE_MASKED,
 IRQCHIP_STATE_LINE_LEVEL,
};

extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool *state);
extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool state);





extern struct static_key_false force_irqthreads_key;
# 515 "./include/linux/interrupt.h"
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 IRQ_POLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,
 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern const char * const softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
 void (*action)(struct softirq_action *);
};

           void do_softirq(void);
           void __do_softirq(void);

extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 587 "./include/linux/interrupt.h"
struct tasklet_struct
{
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 bool use_callback;
 union {
  void (*func)(unsigned long data);
  void (*callback)(struct tasklet_struct *t);
 };
 unsigned long data;
};
# 629 "./include/linux/interrupt.h"
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};
# 646 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int tasklet_trylock(struct tasklet_struct *t) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_unlock(struct tasklet_struct *t) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_unlock_wait(struct tasklet_struct *t) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_unlock_spin_wait(struct tasklet_struct *t) { }


extern void __tasklet_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_disable_nosync(struct tasklet_struct *t)
{
 atomic_inc(&t->count);
 __asm__ __volatile__("": : :"memory");
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_disable_in_atomic(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_spin_wait(t);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 atomic_dec(&t->count);
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);
extern void tasklet_setup(struct tasklet_struct *t,
     void (*callback)(struct tasklet_struct *));
# 746 "./include/linux/interrupt.h"
extern unsigned long probe_irq_on(void);
extern int probe_irq_off(unsigned long);
extern unsigned int probe_irq_mask(unsigned long);




extern void init_irq_proc(void);
# 766 "./include/linux/interrupt.h"
struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);
# 8 "./arch/x86/include/asm/kvm_para.h" 2
# 1 "./arch/x86/include/uapi/asm/kvm_para.h" 1
# 62 "./arch/x86/include/uapi/asm/kvm_para.h"
struct kvm_steal_time {
 __u64 steal;
 __u32 version;
 __u32 flags;
 __u8 preempted;
 __u8 u8_pad[3];
 __u32 pad[11];
};





struct kvm_clock_pairing {
 __s64 sec;
 __s64 nsec;
 __u64 tsc;
 __u32 flags;
 __u32 pad[9];
};
# 114 "./arch/x86/include/uapi/asm/kvm_para.h"
struct kvm_mmu_op_header {
 __u32 op;
 __u32 pad;
};

struct kvm_mmu_op_write_pte {
 struct kvm_mmu_op_header header;
 __u64 pte_phys;
 __u64 pte_val;
};

struct kvm_mmu_op_flush_tlb {
 struct kvm_mmu_op_header header;
};

struct kvm_mmu_op_release_pt {
 struct kvm_mmu_op_header header;
 __u64 pt_phys;
};




struct kvm_vcpu_pv_apf_data {

 __u32 flags;


 __u32 token;

 __u8 pad[56];
 __u32 enabled;
};
# 9 "./arch/x86/include/asm/kvm_para.h" 2




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_check_and_clear_guest_paused(void)
{
 return false;
}
# 32 "./arch/x86/include/asm/kvm_para.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long kvm_hypercall0(unsigned int nr)
{
 long ret;
 asm volatile("# ALT: oldnstr\n" "661:\n\t" "vmcall" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "vmmcall" "\n" "665""1" ":\n" ".popsection\n"
       : "=a"(ret)
       : "a"(nr)
       : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long kvm_hypercall1(unsigned int nr, unsigned long p1)
{
 long ret;
 asm volatile("# ALT: oldnstr\n" "661:\n\t" "vmcall" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "vmmcall" "\n" "665""1" ":\n" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1)
       : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long kvm_hypercall2(unsigned int nr, unsigned long p1,
      unsigned long p2)
{
 long ret;
 asm volatile("# ALT: oldnstr\n" "661:\n\t" "vmcall" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "vmmcall" "\n" "665""1" ":\n" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1), "c"(p2)
       : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long kvm_hypercall3(unsigned int nr, unsigned long p1,
      unsigned long p2, unsigned long p3)
{
 long ret;
 asm volatile("# ALT: oldnstr\n" "661:\n\t" "vmcall" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "vmmcall" "\n" "665""1" ":\n" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1), "c"(p2), "d"(p3)
       : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long kvm_hypercall4(unsigned int nr, unsigned long p1,
      unsigned long p2, unsigned long p3,
      unsigned long p4)
{
 long ret;
 asm volatile("# ALT: oldnstr\n" "661:\n\t" "vmcall" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "vmmcall" "\n" "665""1" ":\n" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1), "c"(p2), "d"(p3), "S"(p4)
       : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long kvm_sev_hypercall3(unsigned int nr, unsigned long p1,
          unsigned long p2, unsigned long p3)
{
 long ret;

 asm volatile("vmmcall"
       : "=a"(ret)
       : "a"(nr), "b"(p1), "c"(p2), "d"(p3)
       : "memory");
 return ret;
}
# 131 "./arch/x86/include/asm/kvm_para.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_para_available(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int kvm_arch_para_features(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int kvm_arch_para_hints(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 kvm_read_and_reset_apf_flags(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool kvm_handle_async_pf(struct pt_regs *regs, u32 token)
{
 return false;
}
# 38 "./include/uapi/linux/kvm_para.h" 2
# 6 "./include/linux/kvm_para.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_para_has_feature(unsigned int feature)
{
 return !!(kvm_arch_para_features() & (1UL << feature));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_para_has_hint(unsigned int feature)
{
 return !!(kvm_arch_para_hints() & (1UL << feature));
}
# 36 "./include/linux/kvm_host.h" 2

# 1 "./include/linux/kvm_types.h" 1





struct kvm;
struct kvm_async_pf;
struct kvm_device_ops;
struct kvm_interrupt;
struct kvm_irq_routing_table;
struct kvm_memory_slot;
struct kvm_one_reg;
struct kvm_run;
struct kvm_userspace_memory_region;
struct kvm_vcpu;
struct kvm_vcpu_init;
struct kvm_memslots;

enum kvm_mr_change;



# 1 "./arch/x86/include/asm/kvm_types.h" 1
# 24 "./include/linux/kvm_types.h" 2
# 36 "./include/linux/kvm_types.h"
typedef unsigned long gva_t;
typedef u64 gpa_t;
typedef u64 gfn_t;



typedef unsigned long hva_t;
typedef u64 hpa_t;
typedef u64 hfn_t;

typedef hfn_t kvm_pfn_t;

struct gfn_to_hva_cache {
 u64 generation;
 gpa_t gpa;
 unsigned long hva;
 unsigned long len;
 struct kvm_memory_slot *memslot;
};

struct gfn_to_pfn_cache {
 u64 generation;
 gfn_t gfn;
 kvm_pfn_t pfn;
 bool dirty;
};
# 71 "./include/linux/kvm_types.h"
struct kvm_mmu_memory_cache {
 int nobjs;
 gfp_t gfp_zero;
 struct kmem_cache *kmem_cache;
 void *objects[40];
};




struct kvm_vm_stat_generic {
 u64 remote_tlb_flush;
 u64 remote_tlb_flush_requests;
};

struct kvm_vcpu_stat_generic {
 u64 halt_successful_poll;
 u64 halt_attempted_poll;
 u64 halt_poll_invalid;
 u64 halt_wakeup;
 u64 halt_poll_success_ns;
 u64 halt_poll_fail_ns;
 u64 halt_wait_ns;
 u64 halt_poll_success_hist[32];
 u64 halt_poll_fail_hist[32];
 u64 halt_wait_hist[32];
};
# 38 "./include/linux/kvm_host.h" 2

# 1 "./arch/x86/include/asm/kvm_host.h" 1
# 14 "./arch/x86/include/asm/kvm_host.h"
# 1 "./include/linux/tracepoint.h" 1
# 22 "./include/linux/tracepoint.h"
# 1 "./include/linux/static_call.h" 1
# 135 "./include/linux/static_call.h"
# 1 "./include/linux/cpu.h" 1
# 17 "./include/linux/cpu.h"
# 1 "./include/linux/node.h" 1
# 18 "./include/linux/node.h"
# 1 "./include/linux/device.h" 1
# 15 "./include/linux/device.h"
# 1 "./include/linux/dev_printk.h" 1
# 22 "./include/linux/dev_printk.h"
struct device;




struct dev_printk_info {
 char subsystem[16];
 char device[48];
};
# 60 "./include/linux/dev_printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 3, 0)))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args)
{ return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 3, 4)))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...)
{ return 0; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dev_printk(const char *level, const struct device *dev,
    struct va_format *vaf)
{}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 3, 4)))
void _dev_printk(const char *level, const struct device *dev,
   const char *fmt, ...)
{}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 2, 3)))
void _dev_emerg(const struct device *dev, const char *fmt, ...)
{}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 2, 3)))
void _dev_crit(const struct device *dev, const char *fmt, ...)
{}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 2, 3)))
void _dev_alert(const struct device *dev, const char *fmt, ...)
{}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 2, 3)))
void _dev_err(const struct device *dev, const char *fmt, ...)
{}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 2, 3)))
void _dev_warn(const struct device *dev, const char *fmt, ...)
{}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 2, 3)))
void _dev_notice(const struct device *dev, const char *fmt, ...)
{}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 2, 3)))
void _dev_info(const struct device *dev, const char *fmt, ...)
{}
# 16 "./include/linux/device.h" 2
# 1 "./include/linux/energy_model.h" 1




# 1 "./include/linux/device.h" 1
# 6 "./include/linux/energy_model.h" 2



# 1 "./include/linux/sched/cpufreq.h" 1
# 14 "./include/linux/sched/cpufreq.h"
struct cpufreq_policy;

struct update_util_data {
       void (*func)(struct update_util_data *data, u64 time, unsigned int flags);
};

void cpufreq_add_update_util_hook(int cpu, struct update_util_data *data,
                       void (*func)(struct update_util_data *data, u64 time,
        unsigned int flags));
void cpufreq_remove_update_util_hook(int cpu);
bool cpufreq_this_cpu_can_update(struct cpufreq_policy *policy);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long map_util_freq(unsigned long util,
     unsigned long freq, unsigned long cap)
{
 return freq * util / cap;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long map_util_perf(unsigned long util)
{
 return util + (util >> 2);
}
# 10 "./include/linux/energy_model.h" 2
# 1 "./include/linux/sched/topology.h" 1






# 1 "./include/linux/sched/idle.h" 1






enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wake_up_if_idle(int cpu) { }
# 26 "./include/linux/sched/idle.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __current_set_polling(void)
{
 set_ti_thread_flag(((struct thread_info *)get_current()), 21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) current_set_polling_and_test(void)
{
 __current_set_polling();





 __asm__ __volatile__("": : :"memory");

 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __current_clr_polling(void)
{
 clear_ti_thread_flag(((struct thread_info *)get_current()), 21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) current_clr_polling_and_test(void)
{
 __current_clr_polling();





 __asm__ __volatile__("": : :"memory");

 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
}
# 76 "./include/linux/sched/idle.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void current_clr_polling(void)
{
 __current_clr_polling();







 __asm__ __volatile__("": : :"memory");

 do { if (test_ti_thread_flag(((struct thread_info *)get_current()), 3)) set_preempt_need_resched(); } while (0);
}
# 8 "./include/linux/sched/topology.h" 2
# 214 "./include/linux/sched/topology.h"
struct sched_domain_attr;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
partition_sched_domains_locked(int ndoms_new, cpumask_var_t doms_new[],
          struct sched_domain_attr *dattr_new)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
   struct sched_domain_attr *dattr_new)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpus_share_cache(int this_cpu, int that_cpu)
{
 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rebuild_sched_domains_energy(void)
{
}
# 254 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
unsigned long arch_scale_cpu_capacity(int cpu)
{
 return (1L << 10);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
unsigned long arch_scale_thermal_pressure(int cpu)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
void arch_set_thermal_pressure(const struct cpumask *cpus,
          unsigned long th_pressure)
{ }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_node(const struct task_struct *p)
{
 return ((void)(task_cpu(p)),0);
}
# 11 "./include/linux/energy_model.h" 2
# 22 "./include/linux/energy_model.h"
struct em_perf_state {
 unsigned long frequency;
 unsigned long power;
 unsigned long cost;
 unsigned long flags;
};
# 55 "./include/linux/energy_model.h"
struct em_perf_domain {
 struct em_perf_state *table;
 int nr_perf_states;
 unsigned long flags;
 unsigned long cpus[];
};
# 265 "./include/linux/energy_model.h"
struct em_data_callback {};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
int em_dev_register_perf_domain(struct device *dev, unsigned int nr_states,
    struct em_data_callback *cb, cpumask_t *span,
    bool milliwatts)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void em_dev_unregister_perf_domain(struct device *dev)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct em_perf_domain *em_cpu_get(int cpu)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct em_perf_domain *em_pd_get(struct device *dev)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long em_cpu_energy(struct em_perf_domain *pd,
   unsigned long max_util, unsigned long sum_util,
   unsigned long allowed_cpu_cap)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int em_pd_nr_perf_states(struct em_perf_domain *pd)
{
 return 0;
}
# 17 "./include/linux/device.h" 2


# 1 "./include/linux/klist.h" 1
# 17 "./include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 34 "./include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 20 "./include/linux/device.h" 2





# 1 "./include/linux/pm.h" 1
# 22 "./include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_vt_switch_required(struct device *dev, bool required)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_vt_switch_unregister(struct device *dev)
{
}
# 49 "./include/linux/pm.h"
typedef struct pm_message {
 int event;
} pm_message_t;
# 277 "./include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 501 "./include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 523 "./include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;
# 546 "./include/linux/pm.h"
};
# 566 "./include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;
# 590 "./include/linux/pm.h"
 unsigned int should_wakeup:1;
# 622 "./include/linux/pm.h"
 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 644 "./include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 int (*start)(struct device *dev);
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 763 "./include/linux/pm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dpm_suspend_start(pm_message_t state)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_pm_wait_for_dev(struct device *a, struct device *b)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *))
{
}
# 802 "./include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 26 "./include/linux/device.h" 2




# 1 "./include/linux/device/bus.h" 1
# 21 "./include/linux/device/bus.h"
struct device_driver;
struct fwnode_handle;
# 82 "./include/linux/device/bus.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 void (*sync_state)(struct device *dev);
 void (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 int (*dma_configure)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

 bool need_parent_lock;
};

extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 136 "./include/linux/device/bus.h"
extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);


int device_match_name(struct device *dev, const void *name);
int device_match_of_node(struct device *dev, const void *np);
int device_match_fwnode(struct device *dev, const void *fwnode);
int device_match_devt(struct device *dev, const void *pdevt);
int device_match_acpi_dev(struct device *dev, const void *adev);
int device_match_acpi_handle(struct device *dev, const void *handle);
int device_match_any(struct device *dev, const void *unused);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          const void *data,
          int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name)
{
 return bus_find_device(bus, start, name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
{
 return bus_find_device(bus, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
{
 return bus_find_device(bus, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *bus_find_device_by_devt(struct bus_type *bus,
           dev_t devt)
{
 return bus_find_device(bus, ((void *)0), &devt, device_match_devt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
bus_find_next_device(struct bus_type *bus,struct device *cur)
{
 return bus_find_device(bus, cur, ((void *)0), device_match_any);
}
# 243 "./include/linux/device/bus.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
bus_find_device_by_acpi_dev(struct bus_type *bus, const void *adev)
{
 return ((void *)0);
}


struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 286 "./include/linux/device/bus.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 31 "./include/linux/device.h" 2
# 1 "./include/linux/device/class.h" 1
# 22 "./include/linux/device/class.h"
struct device;
struct fwnode_handle;
# 54 "./include/linux/device/class.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 99 "./include/linux/device/class.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *class_find_device_by_name(struct class *class,
             const char *name)
{
 return class_find_device(class, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
class_find_device_by_of_node(struct class *class, const struct device_node *np)
{
 return class_find_device(class, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
class_find_device_by_fwnode(struct class *class,
       const struct fwnode_handle *fwnode)
{
 return class_find_device(class, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *class_find_device_by_devt(struct class *class,
             dev_t devt)
{
 return class_find_device(class, ((void *)0), &devt, device_match_devt);
}
# 184 "./include/linux/device/class.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
class_find_device_by_acpi_dev(struct class *class, const void *adev)
{
 return ((void *)0);
}


struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 206 "./include/linux/device/class.h"
extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 238 "./include/linux/device/class.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 32 "./include/linux/device.h" 2
# 1 "./include/linux/device/driver.h" 1
# 44 "./include/linux/device/driver.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 95 "./include/linux/device/driver.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 void (*sync_state)(struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};


extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);



struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 148 "./include/linux/device/driver.h"
extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, const void *data,
      int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *driver_find_device_by_name(struct device_driver *drv,
       const char *name)
{
 return driver_find_device(drv, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
driver_find_device_by_of_node(struct device_driver *drv,
         const struct device_node *np)
{
 return driver_find_device(drv, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
driver_find_device_by_fwnode(struct device_driver *drv,
        const struct fwnode_handle *fwnode)
{
 return driver_find_device(drv, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *driver_find_device_by_devt(struct device_driver *drv,
       dev_t devt)
{
 return driver_find_device(drv, ((void *)0), &devt, device_match_devt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *driver_find_next_device(struct device_driver *drv,
           struct device *start)
{
 return driver_find_device(drv, start, ((void *)0), device_match_any);
}
# 232 "./include/linux/device/driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
driver_find_device_by_acpi_dev(struct device_driver *drv, const void *adev)
{
 return ((void *)0);
}


extern int driver_deferred_probe_timeout;
void driver_deferred_probe_add(struct device *dev);
int driver_deferred_probe_check_state(struct device *dev);
void driver_init(void);
# 33 "./include/linux/device.h" 2
# 1 "./arch/x86/include/asm/device.h" 1




struct dev_archdata {
};

struct pdev_archdata {
};
# 34 "./include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct dev_pin_info;
struct dev_iommu;
# 62 "./include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 87 "./include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 153 "./include/linux/device.h"
int device_create_file(struct device *device,
         const struct device_attribute *entry);
void device_remove_file(struct device *dev,
   const struct device_attribute *attr);
bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);

void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
     int nid, const char *name) __attribute__((__malloc__));





void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
void devres_free(void *res);
void devres_add(struct device *dev, void *res);
void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id, gfp_t gfp);
void devres_close_group(struct device *dev, void *id);
void devres_remove_group(struct device *dev, void *id);
int devres_release_group(struct device *dev, void *id);


void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
void *devm_krealloc(struct device *dev, void *ptr, size_t size,
      gfp_t gfp) __attribute__((__warn_unused_result__));
__attribute__((__format__(printf, 3, 0))) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
         const char *fmt, va_list ap) __attribute__((__malloc__));
__attribute__((__format__(printf, 3, 4))) char *devm_kasprintf(struct device *dev, gfp_t gfp,
        const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return devm_kmalloc(dev, bytes, flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
}
void devm_kfree(struct device *dev, const void *p);
char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
const char *devm_kstrdup_const(struct device *dev, const char *s, gfp_t gfp);
void *devm_kmemdup(struct device *dev, const void *src, size_t len, gfp_t gfp);

unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);
void *devm_ioremap_resource_wc(struct device *dev,
           const struct resource *res);

void *devm_of_iomap(struct device *dev,
       struct device_node *node, int index,
       resource_size_t *size);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
void devm_release_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 275 "./include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned int min_align_mask;
 unsigned long segment_boundary_mask;
};
# 298 "./include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 337 "./include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};
# 353 "./include/linux/device.h"
enum device_removable {
 DEVICE_REMOVABLE_NOT_SUPPORTED = 0,
 DEVICE_REMOVABLE_UNKNOWN,
 DEVICE_FIXED,
 DEVICE_REMOVABLE,
};
# 367 "./include/linux/device.h"
struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 struct list_head defer_sync;
 enum dl_dev_state status;
};
# 473 "./include/linux/device.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;




 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;
# 508 "./include/linux/device.h"
 struct dev_pin_info *pins;






 const struct dma_map_ops *dma_ops;

 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_limit;
 const struct bus_dma_region *dma_range_map;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;
# 539 "./include/linux/device.h"
 struct io_tlb_mem *dma_io_tlb_mem;


 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;




 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct dev_iommu *iommu;

 enum device_removable removable;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
 bool state_synced:1;
 bool can_match:1;
# 578 "./include/linux/device.h"
};
# 594 "./include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 struct device link_dev;
 enum device_link_state status;
 u32 flags;
 refcount_t rpm_active;
 struct kref kref;
 struct work_struct rm_work;
 bool supplier_preactivated;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); _Static_assert(__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) || __builtin_types_compatible_p(typeof(*(kobj)), typeof(void)), "pointer type mismatch in container_of()"); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_iommu_mapped(struct device *dev)
{
 return (dev->iommu_group != ((void *)0));
}


# 1 "./include/linux/pm_wakeup.h" 1
# 18 "./include/linux/pm_wakeup.h"
struct wake_irq;
# 43 "./include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};
# 123 "./include/linux/pm_wakeup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_set_wakeup_capable(struct device *dev, bool capable)
{
 dev->power.can_wakeup = capable;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct wakeup_source *wakeup_source_create(const char *name)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_destroy(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_add(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_remove(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_unregister(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_wakeup_enable(struct device *dev)
{
 dev->power.should_wakeup = true;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_wakeup_disable(struct device *dev)
{
 dev->power.should_wakeup = false;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_set_wakeup_enable(struct device *dev, bool enable)
{
 dev->power.should_wakeup = enable;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_init_wakeup(struct device *dev, bool val)
{
 device_set_wakeup_capable(dev, val);
 device_set_wakeup_enable(dev, val);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && dev->power.should_wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_wakeup_path(struct device *dev)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_set_wakeup_path(struct device *dev) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __pm_stay_awake(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_stay_awake(struct device *dev) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __pm_relax(struct wakeup_source *ws) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_relax(struct device *dev) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_ws_event(struct wakeup_source *ws,
          unsigned int msec, bool hard) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_dev_event(struct device *dev, unsigned int msec,
           bool hard) {}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 625 "./include/linux/device.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}
# 642 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *dev_bus_name(const struct device *dev)
{
 return dev->bus ? dev->bus->name : (dev->class ? dev->class->name : "");
}

__attribute__((__format__(printf, 2, 3))) int dev_set_name(struct device *dev, const char *name, ...);
# 659 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dev_to_node(struct device *dev)
{
 return (-1);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_dev_node(struct device *dev, int node)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{



 return ((void *)0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_pm_syscore_device(struct device *dev, bool val)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
 dev->power.driver_flags = flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
{
 return !!(dev->power.driver_flags & flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_lock(struct device *dev)
{
 mutex_lock_nested(&dev->mutex, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible_nested(&dev->mutex, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_lock_assert(struct device *dev)
{
 do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(&dev->mutex)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1 || !dev)
  return ((void *)0);
 return dev->of_node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dev_has_sync_state(struct device *dev)
{
 if (!dev)
  return false;
 if (dev->driver && dev->driver->sync_state)
  return true;
 if (dev->bus && dev->bus->sync_state)
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_set_removable(struct device *dev,
         enum device_removable removable)
{
 dev->removable = removable;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dev_is_removable(struct device *dev)
{
 return dev->removable == DEVICE_REMOVABLE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dev_removable_is_valid(struct device *dev)
{
 return dev->removable != DEVICE_REMOVABLE_NOT_SUPPORTED;
}




int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
void device_unregister(struct device *dev);
void device_initialize(struct device *dev);
int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
void device_del(struct device *dev);
int device_for_each_child(struct device *dev, void *data,
     int (*fn)(struct device *dev, void *data));
int device_for_each_child_reverse(struct device *dev, void *data,
      int (*fn)(struct device *dev, void *data));
struct device *device_find_child(struct device *dev, void *data,
     int (*match)(struct device *dev, void *data));
struct device *device_find_child_by_name(struct device *parent,
      const char *name);
int device_rename(struct device *dev, const char *new_name);
int device_move(struct device *dev, struct device *new_parent,
  enum dpm_order dpm_order);
int device_change_owner(struct device *dev, kuid_t kuid, kgid_t kgid);
const char *device_get_devnode(struct device *dev, umode_t *mode, kuid_t *uid,
          kgid_t *gid, const char **tmp);
int device_is_dependent(struct device *dev, void *target);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

void lock_device_hotplug(void);
void unlock_device_hotplug(void);
int lock_device_hotplug_sysfs(void);
int device_offline(struct device *dev);
int device_online(struct device *dev);
void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);
void device_set_node(struct device *dev, struct fwnode_handle *fwnode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




struct device *__root_device_register(const char *name, struct module *owner);





void root_device_unregister(struct device *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





int __attribute__((__warn_unused_result__)) device_driver_attach(struct device_driver *drv,
          struct device *dev);
int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
void device_release_driver(struct device *dev);
int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
void device_initial_probe(struct device *dev);
int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);

bool device_is_bound(struct device *dev);




__attribute__((__format__(printf, 5, 6))) struct device *
device_create(struct class *cls, struct device *parent, dev_t devt,
       void *drvdata, const char *fmt, ...);
__attribute__((__format__(printf, 6, 7))) struct device *
device_create_with_groups(struct class *cls, struct device *parent, dev_t devt,
     void *drvdata, const struct attribute_group **groups,
     const char *fmt, ...);
void device_destroy(struct class *cls, dev_t devt);

int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
       const struct attribute_group **groups);
void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
           const struct attribute_group *grp);
void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






struct device *get_device(struct device *dev);
void put_device(struct device *dev);
bool kill_device(struct device *dev);


int devtmpfs_mount(void);





void device_shutdown(void);


const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);
void device_link_remove(void *consumer, struct device *supplier);
void device_links_supplier_sync_state_pause(void);
void device_links_supplier_sync_state_resume(void);

extern __attribute__((__format__(printf, 3, 4)))
int dev_err_probe(const struct device *dev, int err, const char *fmt, ...);
# 19 "./include/linux/node.h" 2
# 31 "./include/linux/node.h"
struct node_hmem_attrs {
 unsigned int read_bandwidth;
 unsigned int write_bandwidth;
 unsigned int read_latency;
 unsigned int write_latency;
};

enum cache_indexing {
 NODE_CACHE_DIRECT_MAP,
 NODE_CACHE_INDEXED,
 NODE_CACHE_OTHER,
};

enum cache_write_policy {
 NODE_CACHE_WRITE_BACK,
 NODE_CACHE_WRITE_THROUGH,
 NODE_CACHE_WRITE_OTHER,
};
# 59 "./include/linux/node.h"
struct node_cache_attrs {
 enum cache_indexing indexing;
 enum cache_write_policy write_policy;
 u64 size;
 u16 line_size;
 u8 level;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_add_cache(unsigned int nid,
      struct node_cache_attrs *cache_attrs)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_set_perf_attrs(unsigned int nid,
           struct node_hmem_attrs *hmem_attrs,
           unsigned access)
{
}


struct node {
 struct device dev;
 struct list_head access_list;
# 95 "./include/linux/node.h"
};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void link_mem_sections(int nid, unsigned long start_pfn,
         unsigned long end_pfn,
         enum meminit_context context)
{
}


extern void unregister_node(struct node *node);
# 152 "./include/linux/node.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __register_one_node(int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_one_node(int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_one_node(int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_cpu_under_node(unsigned int cpu, unsigned int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_cpu_under_node(unsigned int cpu, unsigned int nid)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unregister_memory_block_under_nodes(struct memory_block *mem_blk)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void register_hugetlbfs_with_node(node_registration_func_t reg,
      node_registration_func_t unreg)
{
}
# 18 "./include/linux/cpu.h" 2


# 1 "./include/linux/cpuhotplug.h" 1
# 57 "./include/linux/cpuhotplug.h"
enum cpuhp_state {
 CPUHP_INVALID = -1,


 CPUHP_OFFLINE = 0,
 CPUHP_CREATE_THREADS,
 CPUHP_PERF_PREPARE,
 CPUHP_PERF_X86_PREPARE,
 CPUHP_PERF_X86_AMD_UNCORE_PREP,
 CPUHP_PERF_POWER,
 CPUHP_PERF_SUPERH,
 CPUHP_X86_HPET_DEAD,
 CPUHP_X86_APB_DEAD,
 CPUHP_X86_MCE_DEAD,
 CPUHP_VIRT_NET_DEAD,
 CPUHP_SLUB_DEAD,
 CPUHP_DEBUG_OBJ_DEAD,
 CPUHP_MM_WRITEBACK_DEAD,

 CPUHP_MM_DEMOTION_DEAD,
 CPUHP_MM_VMSTAT_DEAD,
 CPUHP_SOFTIRQ_DEAD,
 CPUHP_NET_MVNETA_DEAD,
 CPUHP_CPUIDLE_DEAD,
 CPUHP_ARM64_FPSIMD_DEAD,
 CPUHP_ARM_OMAP_WAKE_DEAD,
 CPUHP_IRQ_POLL_DEAD,
 CPUHP_BLOCK_SOFTIRQ_DEAD,
 CPUHP_BIO_DEAD,
 CPUHP_ACPI_CPUDRV_DEAD,
 CPUHP_S390_PFAULT_DEAD,
 CPUHP_BLK_MQ_DEAD,
 CPUHP_FS_BUFF_DEAD,
 CPUHP_PRINTK_DEAD,
 CPUHP_MM_MEMCQ_DEAD,
 CPUHP_XFS_DEAD,
 CPUHP_PERCPU_CNT_DEAD,
 CPUHP_RADIX_DEAD,
 CPUHP_PAGE_ALLOC,
 CPUHP_NET_DEV_DEAD,
 CPUHP_PCI_XGENE_DEAD,
 CPUHP_IOMMU_IOVA_DEAD,
 CPUHP_LUSTRE_CFS_DEAD,
 CPUHP_AP_ARM_CACHE_B15_RAC_DEAD,
 CPUHP_PADATA_DEAD,
 CPUHP_AP_DTPM_CPU_DEAD,
 CPUHP_WORKQUEUE_PREP,
 CPUHP_POWER_NUMA_PREPARE,
 CPUHP_HRTIMERS_PREPARE,
 CPUHP_PROFILE_PREPARE,
 CPUHP_X2APIC_PREPARE,
 CPUHP_SMPCFD_PREPARE,
 CPUHP_RELAY_PREPARE,
 CPUHP_SLAB_PREPARE,
 CPUHP_MD_RAID5_PREPARE,
 CPUHP_RCUTREE_PREP,
 CPUHP_CPUIDLE_COUPLED_PREPARE,
 CPUHP_POWERPC_PMAC_PREPARE,
 CPUHP_POWERPC_MMU_CTX_PREPARE,
 CPUHP_XEN_PREPARE,
 CPUHP_XEN_EVTCHN_PREPARE,
 CPUHP_ARM_SHMOBILE_SCU_PREPARE,
 CPUHP_SH_SH3X_PREPARE,
 CPUHP_NET_FLOW_PREPARE,
 CPUHP_TOPOLOGY_PREPARE,
 CPUHP_NET_IUCV_PREPARE,
 CPUHP_ARM_BL_PREPARE,
 CPUHP_TRACE_RB_PREPARE,
 CPUHP_MM_ZS_PREPARE,
 CPUHP_MM_ZSWP_MEM_PREPARE,
 CPUHP_MM_ZSWP_POOL_PREPARE,
 CPUHP_KVM_PPC_BOOK3S_PREPARE,
 CPUHP_ZCOMP_PREPARE,
 CPUHP_TIMERS_PREPARE,
 CPUHP_MIPS_SOC_PREPARE,
 CPUHP_BP_PREPARE_DYN,
 CPUHP_BP_PREPARE_DYN_END = CPUHP_BP_PREPARE_DYN + 20,
 CPUHP_BRINGUP_CPU,





 CPUHP_AP_IDLE_DEAD,
 CPUHP_AP_OFFLINE,
 CPUHP_AP_SCHED_STARTING,
 CPUHP_AP_RCUTREE_DYING,
 CPUHP_AP_CPU_PM_STARTING,
 CPUHP_AP_IRQ_GIC_STARTING,
 CPUHP_AP_IRQ_HIP04_STARTING,
 CPUHP_AP_IRQ_APPLE_AIC_STARTING,
 CPUHP_AP_IRQ_ARMADA_XP_STARTING,
 CPUHP_AP_IRQ_BCM2836_STARTING,
 CPUHP_AP_IRQ_MIPS_GIC_STARTING,
 CPUHP_AP_IRQ_RISCV_STARTING,
 CPUHP_AP_IRQ_SIFIVE_PLIC_STARTING,
 CPUHP_AP_ARM_MVEBU_COHERENCY,
 CPUHP_AP_MICROCODE_LOADER,
 CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING,
 CPUHP_AP_PERF_X86_STARTING,
 CPUHP_AP_PERF_X86_AMD_IBS_STARTING,
 CPUHP_AP_PERF_X86_CQM_STARTING,
 CPUHP_AP_PERF_X86_CSTATE_STARTING,
 CPUHP_AP_PERF_XTENSA_STARTING,
 CPUHP_AP_MIPS_OP_LOONGSON3_STARTING,
 CPUHP_AP_ARM_SDEI_STARTING,
 CPUHP_AP_ARM_VFP_STARTING,
 CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING,
 CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING,
 CPUHP_AP_PERF_ARM_ACPI_STARTING,
 CPUHP_AP_PERF_ARM_STARTING,
 CPUHP_AP_ARM_L2X0_STARTING,
 CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING,
 CPUHP_AP_ARM_ARCH_TIMER_STARTING,
 CPUHP_AP_ARM_GLOBAL_TIMER_STARTING,
 CPUHP_AP_JCORE_TIMER_STARTING,
 CPUHP_AP_ARM_TWD_STARTING,
 CPUHP_AP_QCOM_TIMER_STARTING,
 CPUHP_AP_TEGRA_TIMER_STARTING,
 CPUHP_AP_ARMADA_TIMER_STARTING,
 CPUHP_AP_MARCO_TIMER_STARTING,
 CPUHP_AP_MIPS_GIC_TIMER_STARTING,
 CPUHP_AP_ARC_TIMER_STARTING,
 CPUHP_AP_RISCV_TIMER_STARTING,
 CPUHP_AP_CLINT_TIMER_STARTING,
 CPUHP_AP_CSKY_TIMER_STARTING,
 CPUHP_AP_TI_GP_TIMER_STARTING,
 CPUHP_AP_HYPERV_TIMER_STARTING,
 CPUHP_AP_KVM_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_STARTING,
 CPUHP_AP_KVM_ARM_TIMER_STARTING,

 CPUHP_AP_DUMMY_TIMER_STARTING,
 CPUHP_AP_ARM_XEN_STARTING,
 CPUHP_AP_ARM_CORESIGHT_STARTING,
 CPUHP_AP_ARM_CORESIGHT_CTI_STARTING,
 CPUHP_AP_ARM64_ISNDEP_STARTING,
 CPUHP_AP_SMPCFD_DYING,
 CPUHP_AP_X86_TBOOT_DYING,
 CPUHP_AP_ARM_CACHE_B15_RAC_DYING,
 CPUHP_AP_ONLINE,
 CPUHP_TEARDOWN_CPU,


 CPUHP_AP_ONLINE_IDLE,
 CPUHP_AP_SCHED_WAIT_EMPTY,
 CPUHP_AP_SMPBOOT_THREADS,
 CPUHP_AP_X86_VDSO_VMA_ONLINE,
 CPUHP_AP_IRQ_AFFINITY_ONLINE,
 CPUHP_AP_BLK_MQ_ONLINE,
 CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS,
 CPUHP_AP_X86_INTEL_EPB_ONLINE,
 CPUHP_AP_PERF_ONLINE,
 CPUHP_AP_PERF_X86_ONLINE,
 CPUHP_AP_PERF_X86_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_POWER_ONLINE,
 CPUHP_AP_PERF_X86_RAPL_ONLINE,
 CPUHP_AP_PERF_X86_CQM_ONLINE,
 CPUHP_AP_PERF_X86_CSTATE_ONLINE,
 CPUHP_AP_PERF_X86_IDXD_ONLINE,
 CPUHP_AP_PERF_S390_CF_ONLINE,
 CPUHP_AP_PERF_S390_SF_ONLINE,
 CPUHP_AP_PERF_ARM_CCI_ONLINE,
 CPUHP_AP_PERF_ARM_CCN_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_L3_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_PA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_SLLC_ONLINE,
 CPUHP_AP_PERF_ARM_L2X0_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE,
 CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE,
 CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE,
 CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_24x7_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_GPCI_ONLINE,
 CPUHP_AP_PERF_CSKY_ONLINE,
 CPUHP_AP_WATCHDOG_ONLINE,
 CPUHP_AP_WORKQUEUE_ONLINE,
 CPUHP_AP_RCUTREE_ONLINE,
 CPUHP_AP_BASE_CACHEINFO_ONLINE,
 CPUHP_AP_ONLINE_DYN,
 CPUHP_AP_ONLINE_DYN_END = CPUHP_AP_ONLINE_DYN + 30,

 CPUHP_AP_MM_DEMOTION_ONLINE,
 CPUHP_AP_X86_HPET_ONLINE,
 CPUHP_AP_X86_KVM_CLK_ONLINE,
 CPUHP_AP_ACTIVE,
 CPUHP_ONLINE,
};

int __cpuhp_setup_state(enum cpuhp_state state, const char *name, bool invoke,
   int (*startup)(unsigned int cpu),
   int (*teardown)(unsigned int cpu), bool multi_instance);

int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char *name,
       bool invoke,
       int (*startup)(unsigned int cpu),
       int (*teardown)(unsigned int cpu),
       bool multi_instance);
# 274 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_setup_state(enum cpuhp_state state,
        const char *name,
        int (*startup)(unsigned int cpu),
        int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, true, startup, teardown, false);
}
# 294 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_setup_state_cpuslocked(enum cpuhp_state state,
            const char *name,
            int (*startup)(unsigned int cpu),
            int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, true, startup,
           teardown, false);
}
# 314 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_setup_state_nocalls(enum cpuhp_state state,
         const char *name,
         int (*startup)(unsigned int cpu),
         int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, false, startup, teardown,
       false);
}
# 336 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_setup_state_nocalls_cpuslocked(enum cpuhp_state state,
           const char *name,
           int (*startup)(unsigned int cpu),
           int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, false, startup,
         teardown, false);
}
# 357 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_setup_state_multi(enum cpuhp_state state,
       const char *name,
       int (*startup)(unsigned int cpu,
        struct hlist_node *node),
       int (*teardown)(unsigned int cpu,
         struct hlist_node *node))
{
 return __cpuhp_setup_state(state, name, false,
       (void *) startup,
       (void *) teardown, true);
}

int __cpuhp_state_add_instance(enum cpuhp_state state, struct hlist_node *node,
          bool invoke);
int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state state,
       struct hlist_node *node, bool invoke);
# 385 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_state_add_instance(enum cpuhp_state state,
        struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, true);
}
# 401 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_state_add_instance_nocalls(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, false);
}
# 418 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
cpuhp_state_add_instance_nocalls_cpuslocked(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance_cpuslocked(state, node, false);
}

void __cpuhp_remove_state(enum cpuhp_state state, bool invoke);
void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke);
# 435 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuhp_remove_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, true);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuhp_remove_state_nocalls(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}
# 458 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuhp_remove_state_nocalls_cpuslocked(enum cpuhp_state state)
{
 __cpuhp_remove_state_cpuslocked(state, false);
}
# 471 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuhp_remove_multi_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

int __cpuhp_state_remove_instance(enum cpuhp_state state,
      struct hlist_node *node, bool invoke);
# 488 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_state_remove_instance(enum cpuhp_state state,
           struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, true);
}
# 502 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_state_remove_instance_nocalls(enum cpuhp_state state,
            struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, false);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuhp_online_idle(enum cpuhp_state state) { }
# 21 "./include/linux/cpu.h" 2

struct device;
struct device_node;
struct attribute_group;

struct cpu {
 int node_id;
 int hotpluggable;
 struct device dev;
};

extern void boot_cpu_init(void);
extern void boot_cpu_hotplug_init(void);
extern void cpu_init(void);
extern void trap_init(void);

extern int register_cpu(struct cpu *cpu, int num);
extern struct device *get_cpu_device(unsigned cpu);
extern bool cpu_is_hotpluggable(unsigned cpu);
extern bool arch_match_cpu_phys_id(int cpu, u64 phys_id);
extern bool arch_find_n_match_cpu_physical_id(struct device_node *cpun,
           int cpu, unsigned int *thread);

extern int cpu_add_dev_attr(struct device_attribute *attr);
extern void cpu_remove_dev_attr(struct device_attribute *attr);

extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);

extern ssize_t cpu_show_meltdown(struct device *dev,
     struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v1(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v2(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spec_store_bypass(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_l1tf(struct device *dev,
        struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_mds(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_tsx_async_abort(struct device *dev,
     struct device_attribute *attr,
     char *buf);
extern ssize_t cpu_show_itlb_multihit(struct device *dev,
          struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_srbds(struct device *dev, struct device_attribute *attr, char *buf);

extern __attribute__((__format__(printf, 4, 5)))
struct device *cpu_device_create(struct device *parent, void *drvdata,
     const struct attribute_group **groups,
     const char *fmt, ...);
# 103 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_maps_update_begin(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_maps_update_done(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int add_cpu(unsigned int cpu) { return 0;}


extern struct bus_type cpu_subsys;

extern int lockdep_is_cpus_held(void);
# 134 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpus_write_lock(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpus_write_unlock(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpus_read_lock(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpus_read_unlock(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpus_read_trylock(void) { return true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_assert_cpus_held(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_hotplug_disable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_hotplug_enable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int remove_cpu(unsigned int cpu) { return -1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_shutdown_nonboot_cpus(unsigned int primary_cpu) { }
# 165 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void thaw_secondary_cpus(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int suspend_disable_secondary_cpus(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void suspend_enable_secondary_cpus(void) { }


void cpu_startup_entry(enum cpuhp_state state);

void cpu_idle_poll_ctrl(bool enable);




bool cpu_in_idle(unsigned long pc);

void arch_cpu_idle(void);
void arch_cpu_idle_prepare(void);
void arch_cpu_idle_enter(void);
void arch_cpu_idle_exit(void);
void arch_cpu_idle_dead(void);

int cpu_report_state(int cpu);
int cpu_check_up_prepare(int cpu);
void cpu_set_state_online(int cpu);
void play_idle_precise(u64 duration_ns, u64 latency_ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void play_idle(unsigned long duration_us)
{
 play_idle_precise(duration_us * 1000L, ((u64)~0ULL));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuhp_report_idle_dead(void) { }


enum cpuhp_smt_control {
 CPU_SMT_ENABLED,
 CPU_SMT_DISABLED,
 CPU_SMT_FORCE_DISABLED,
 CPU_SMT_NOT_SUPPORTED,
 CPU_SMT_NOT_IMPLEMENTED,
};
# 220 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_smt_disable(bool force) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_smt_check_topology(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_smt_possible(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_smt_enable(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval) { return 0; }


extern bool cpu_mitigations_off(void);
extern bool cpu_mitigations_auto_nosmt(void);
# 136 "./include/linux/static_call.h" 2



# 1 "./arch/x86/include/asm/static_call.h" 1




# 1 "./arch/x86/include/asm/text-patching.h" 1








struct paravirt_patch_site;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void apply_paravirt(struct paravirt_patch_site *start,
      struct paravirt_patch_site *end)
{}
# 28 "./arch/x86/include/asm/text-patching.h"
extern void text_poke_early(void *addr, const void *opcode, size_t len);
# 44 "./arch/x86/include/asm/text-patching.h"
extern void *text_poke(void *addr, const void *opcode, size_t len);
extern void text_poke_sync(void);
extern void *text_poke_kgdb(void *addr, const void *opcode, size_t len);
extern int poke_int3_handler(struct pt_regs *regs);
extern void text_poke_bp(void *addr, const void *opcode, size_t len, const void *emulate);

extern void text_poke_queue(void *addr, const void *opcode, size_t len, const void *emulate);
extern void text_poke_finish(void);
# 70 "./arch/x86/include/asm/text-patching.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int text_opcode_size(u8 opcode)
{
 int size = 0;




 switch(opcode) {
 case 0xCC: size = 1; break;
 case 0xC3: size = 1; break;
 case 0xE8: size = 5; break;
 case 0xE9: size = 5; break;
 case 0xEB: size = 2; break;
 }



 return size;
}

union text_poke_insn {
 u8 text[5];
 struct {
  u8 opcode;
  s32 disp;
 } __attribute__((packed));
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
void *text_gen_insn(u8 opcode, const void *addr, const void *dest)
{
 static union text_poke_insn insn;
 int size = text_opcode_size(opcode);

 insn.opcode = opcode;

 if (size > 1) {
  insn.disp = (long)dest - (long)(addr + size);
  if (size == 2) {




   do { if (__builtin_expect(!!((insn.disp >> 31) != (insn.disp >> 7)), 0)) do { ({ asm volatile("304" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "304" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("305" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "305" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
  }
 }

 return &insn.text;
}

extern int after_bootmem;
extern __attribute__((__section__(".data..ro_after_init"))) struct mm_struct *poking_mm;
extern __attribute__((__section__(".data..ro_after_init"))) unsigned long poking_addr;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
void int3_emulate_jmp(struct pt_regs *regs, unsigned long ip)
{
 regs->ip = ip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
void int3_emulate_push(struct pt_regs *regs, unsigned long val)
{
# 143 "./arch/x86/include/asm/text-patching.h"
 regs->sp -= sizeof(unsigned long);
 *(unsigned long *)regs->sp = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
unsigned long int3_emulate_pop(struct pt_regs *regs)
{
 unsigned long val = *(unsigned long *)regs->sp;
 regs->sp += sizeof(unsigned long);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
void int3_emulate_call(struct pt_regs *regs, unsigned long func)
{
 int3_emulate_push(regs, regs->ip - 1 + 5);
 int3_emulate_jmp(regs, func);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
void int3_emulate_ret(struct pt_regs *regs)
{
 unsigned long ip = int3_emulate_pop(regs);
 int3_emulate_jmp(regs, ip);
}
# 6 "./arch/x86/include/asm/static_call.h" 2
# 140 "./include/linux/static_call.h" 2




extern void arch_static_call_transform(void *site, void *tramp, void *func, bool tail);
# 163 "./include/linux/static_call.h"
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) static_call_init(void);

struct static_call_mod {
 struct static_call_mod *next;
 struct module *mod;
 struct static_call_site *sites;
};


struct static_call_tramp_key {
 s32 tramp;
 s32 key;
};

extern void __static_call_update(struct static_call_key *key, void *tramp, void *func);
extern int static_call_mod_init(struct module *mod);
extern int static_call_text_reserved(void *start, void *end);

extern long __static_call_return0(void);
# 23 "./include/linux/tracepoint.h" 2

struct module;
struct tracepoint;
struct notifier_block;

struct trace_eval_map {
 const char *system;
 const char *eval_string;
 unsigned long eval_value;
};



extern struct srcu_struct tracepoint_srcu;

extern int
tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data);
extern int
tracepoint_probe_register_prio(struct tracepoint *tp, void *probe, void *data,
          int prio);
extern int
tracepoint_probe_register_prio_may_exist(struct tracepoint *tp, void *probe, void *data,
      int prio);
extern int
tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
tracepoint_probe_register_may_exist(struct tracepoint *tp, void *probe,
        void *data)
{
 return tracepoint_probe_register_prio_may_exist(tp, probe, data,
       10);
}
extern void
for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),
  void *priv);


struct tp_module {
 struct list_head list;
 struct module *mod;
};

bool trace_module_has_bad_taint(struct module *mod);
extern int register_tracepoint_module_notifier(struct notifier_block *nb);
extern int unregister_tracepoint_module_notifier(struct notifier_block *nb);
# 91 "./include/linux/tracepoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tracepoint_synchronize_unregister(void)
{
 synchronize_srcu(&tracepoint_srcu);
 synchronize_rcu();
}






extern int syscall_regfunc(void);
extern void syscall_unregfunc(void);
# 114 "./include/linux/tracepoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct tracepoint *tracepoint_ptr_deref(tracepoint_ptr_t *p)
{
 return offset_to_ptr(p);
}
# 15 "./arch/x86/include/asm/kvm_host.h" 2

# 1 "./include/linux/irq_work.h" 1
# 17 "./include/linux/irq_work.h"
struct irq_work {
 struct __call_single_node node;
 void (*func)(struct irq_work *);
 struct rcuwait irqwait;
};
# 36 "./include/linux/irq_work.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
void init_irq_work(struct irq_work *work, void (*func)(struct irq_work *))
{
 *work = (struct irq_work){ .node = { .u_flags = (0), }, .func = (func), .irqwait = { .task = ((void *)0), }, };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_work_is_pending(struct irq_work *work)
{
 return atomic_read(&work->node.a_flags) & IRQ_WORK_PENDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_work_is_busy(struct irq_work *work)
{
 return atomic_read(&work->node.a_flags) & IRQ_WORK_BUSY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_work_is_hard(struct irq_work *work)
{
 return atomic_read(&work->node.a_flags) & IRQ_WORK_HARD_IRQ;
}

bool irq_work_queue(struct irq_work *work);
bool irq_work_queue_on(struct irq_work *work, int cpu);

void irq_work_tick(void);
void irq_work_sync(struct irq_work *work);


# 1 "./arch/x86/include/asm/irq_work.h" 1







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_irq_work_has_interrupt(void)
{
 return (__builtin_constant_p(( 0*32+ 9)) && ( (((( 0*32+ 9))>>5)==(0) && (1UL<<((( 0*32+ 9))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+ 9))>>5)==(1) && (1UL<<((( 0*32+ 9))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+ 9))>>5)==(2) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(3) && (1UL<<((( 0*32+ 9))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+ 9))>>5)==(4) && (1UL<<((( 0*32+ 9))&31) & (0) )) || (((( 0*32+ 9))>>5)==(5) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(6) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(7) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(8) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(9) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(10) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(11) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(12) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(13) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(14) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(15) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(16) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(17) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(18) && (1UL<<((( 0*32+ 9))&31) & 0 )) || (((( 0*32+ 9))>>5)==(19) && (1UL<<((( 0*32+ 9))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 0*32+ 9), (unsigned long *)((&boot_cpu_data)->x86_capability)));
}
extern void arch_irq_work_raise(void);
# 65 "./include/linux/irq_work.h" 2

void irq_work_run(void);
bool irq_work_needs_cpu(void);
void irq_work_single(void *arg);
# 17 "./arch/x86/include/asm/kvm_host.h" 2
# 1 "./include/linux/irq.h" 1
# 20 "./include/linux/irq.h"
# 1 "./include/linux/io.h" 1
# 13 "./include/linux/io.h"
# 1 "./arch/x86/include/asm/io.h" 1
# 44 "./arch/x86/include/asm/io.h"
# 1 "./arch/x86/include/generated/asm/early_ioremap.h" 1
# 1 "./include/asm-generic/early_ioremap.h" 1
# 11 "./include/asm-generic/early_ioremap.h"
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap_ro(resource_size_t phys_addr,
          unsigned long size);
extern void *early_memremap_prot(resource_size_t phys_addr,
     unsigned long size, unsigned long prot_val);
extern void early_iounmap(void *addr, unsigned long size);
extern void early_memunmap(void *addr, unsigned long size);



extern void early_ioremap_init(void);


extern void early_ioremap_setup(void);





extern void early_ioremap_reset(void);




extern void copy_from_early_mem(void *dest, phys_addr_t src,
    unsigned long size);
# 2 "./arch/x86/include/generated/asm/early_ioremap.h" 2
# 45 "./arch/x86/include/asm/io.h" 2
# 57 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned char readb(const volatile void *addr) { unsigned char ret; asm volatile("mov" "b" " %1,%0":"=q" (ret) :"m" (*(volatile unsigned char *)addr) :"memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned short readw(const volatile void *addr) { unsigned short ret; asm volatile("mov" "w" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned short *)addr) :"memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int readl(const volatile void *addr) { unsigned int ret; asm volatile("mov" "l" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned int *)addr) :"memory"); return ret; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned char __readb(const volatile void *addr) { unsigned char ret; asm volatile("mov" "b" " %1,%0":"=q" (ret) :"m" (*(volatile unsigned char *)addr) ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned short __readw(const volatile void *addr) { unsigned short ret; asm volatile("mov" "w" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned short *)addr) ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __readl(const volatile void *addr) { unsigned int ret; asm volatile("mov" "l" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned int *)addr) ); return ret; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writeb(unsigned char val, volatile void *addr) { asm volatile("mov" "b" " %0,%1": :"q" (val), "m" (*(volatile unsigned char *)addr) :"memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writew(unsigned short val, volatile void *addr) { asm volatile("mov" "w" " %0,%1": :"r" (val), "m" (*(volatile unsigned short *)addr) :"memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writel(unsigned int val, volatile void *addr) { asm volatile("mov" "l" " %0,%1": :"r" (val), "m" (*(volatile unsigned int *)addr) :"memory"); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __writeb(unsigned char val, volatile void *addr) { asm volatile("mov" "b" " %0,%1": :"q" (val), "m" (*(volatile unsigned char *)addr) ); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __writew(unsigned short val, volatile void *addr) { asm volatile("mov" "w" " %0,%1": :"r" (val), "m" (*(volatile unsigned short *)addr) ); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __writel(unsigned int val, volatile void *addr) { asm volatile("mov" "l" " %0,%1": :"r" (val), "m" (*(volatile unsigned int *)addr) ); }
# 95 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 readq(const volatile void *addr) { u64 ret; asm volatile("mov" "q" " %1,%0":"=r" (ret) :"m" (*(volatile u64 *)addr) :"memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 __readq(const volatile void *addr) { u64 ret; asm volatile("mov" "q" " %1,%0":"=r" (ret) :"m" (*(volatile u64 *)addr) ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writeq(u64 val, volatile void *addr) { asm volatile("mov" "q" " %0,%1": :"r" (val), "m" (*(volatile u64 *)addr) :"memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __writeq(u64 val, volatile void *addr) { asm volatile("mov" "q" " %0,%1": :"r" (val), "m" (*(volatile u64 *)addr) ); }
# 113 "./arch/x86/include/asm/io.h"
extern int valid_phys_addr_range(phys_addr_t addr, size_t size);
extern int valid_mmap_phys_addr_range(unsigned long pfn, size_t size);
# 129 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) phys_addr_t virt_to_phys(volatile void *address)
{
 return __phys_addr_nodebug((unsigned long)(address));
}
# 148 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *phys_to_virt(phys_addr_t address)
{
 return ((void *)((unsigned long)(address)+((unsigned long)page_offset_base)));
}
# 164 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int isa_virt_to_bus(volatile void *address)
{
 return (unsigned int)virt_to_phys(address);
}
# 183 "./arch/x86/include/asm/io.h"
extern void *ioremap_uc(resource_size_t offset, unsigned long size);

extern void *ioremap_cache(resource_size_t offset, unsigned long size);

extern void *ioremap_prot(resource_size_t offset, unsigned long size, unsigned long prot_val);

extern void *ioremap_encrypted(resource_size_t phys_addr, unsigned long size);
# 206 "./arch/x86/include/asm/io.h"
void *ioremap(resource_size_t offset, unsigned long size);


extern void iounmap(volatile void *addr);


extern void set_iounmap_nonlazy(void);



void memcpy_fromio(void *, const volatile void *, size_t);
void memcpy_toio(volatile void *, const void *, size_t);
void memset_io(volatile void *, int, size_t);





# 1 "./include/asm-generic/iomap.h" 1
# 29 "./include/asm-generic/iomap.h"
extern unsigned int ioread8(const void *);
extern unsigned int ioread16(const void *);
extern unsigned int ioread16be(const void *);
extern unsigned int ioread32(const void *);
extern unsigned int ioread32be(const void *);

extern u64 ioread64(const void *);
extern u64 ioread64be(const void *);







extern u64 ioread64_lo_hi(const void *addr);
extern u64 ioread64_hi_lo(const void *addr);
extern u64 ioread64be_lo_hi(const void *addr);
extern u64 ioread64be_hi_lo(const void *addr);


extern void iowrite8(u8, void *);
extern void iowrite16(u16, void *);
extern void iowrite16be(u16, void *);
extern void iowrite32(u32, void *);
extern void iowrite32be(u32, void *);

extern void iowrite64(u64, void *);
extern void iowrite64be(u64, void *);







extern void iowrite64_lo_hi(u64 val, void *addr);
extern void iowrite64_hi_lo(u64 val, void *addr);
extern void iowrite64be_lo_hi(u64 val, void *addr);
extern void iowrite64be_hi_lo(u64 val, void *addr);
# 82 "./include/asm-generic/iomap.h"
extern void ioread8_rep(const void *port, void *buf, unsigned long count);
extern void ioread16_rep(const void *port, void *buf, unsigned long count);
extern void ioread32_rep(const void *port, void *buf, unsigned long count);

extern void iowrite8_rep(void *port, const void *buf, unsigned long count);
extern void iowrite16_rep(void *port, const void *buf, unsigned long count);
extern void iowrite32_rep(void *port, const void *buf, unsigned long count);



extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *);
# 107 "./include/asm-generic/iomap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *ioremap_np(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}


# 1 "./include/asm-generic/pci_iomap.h" 1
# 10 "./include/asm-generic/pci_iomap.h"
struct pci_dev;
# 33 "./include/asm-generic/pci_iomap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
            unsigned long offset,
            unsigned long maxlen)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pci_iounmap(struct pci_dev *dev, void *addr)
{ }
# 114 "./include/asm-generic/iomap.h" 2
# 225 "./arch/x86/include/asm/io.h" 2
# 238 "./arch/x86/include/asm/io.h"
extern void native_io_delay(void);

extern int io_delay_type;
extern void io_delay_init(void);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void slow_down_io(void)
{
 native_io_delay();





}
# 270 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sev_key_active(void) { return false; }
# 334 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outb(unsigned char value, int port) { asm volatile("out" "b" " %" "b" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned char inb(int port) { unsigned char value; asm volatile("in" "b" " %w1, %" "b" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outb_p(unsigned char value, int port) { outb(value, port); slow_down_io(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned char inb_p(int port) { unsigned char value = inb(port); slow_down_io(); return value; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outsb(int port, const void *addr, unsigned long count) { if (sev_key_active()) { unsigned char *value = (unsigned char *)addr; while (count) { outb(*value, port); value++; count--; } } else { asm volatile("rep; outs" "b" : "+S"(addr), "+c"(count) : "d"(port) : "memory"); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insb(int port, void *addr, unsigned long count) { if (sev_key_active()) { unsigned char *value = (unsigned char *)addr; while (count) { *value = inb(port); value++; count--; } } else { asm volatile("rep; ins" "b" : "+D"(addr), "+c"(count) : "d"(port) : "memory"); } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outw(unsigned short value, int port) { asm volatile("out" "w" " %" "w" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned short inw(int port) { unsigned short value; asm volatile("in" "w" " %w1, %" "w" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outw_p(unsigned short value, int port) { outw(value, port); slow_down_io(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned short inw_p(int port) { unsigned short value = inw(port); slow_down_io(); return value; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outsw(int port, const void *addr, unsigned long count) { if (sev_key_active()) { unsigned short *value = (unsigned short *)addr; while (count) { outw(*value, port); value++; count--; } } else { asm volatile("rep; outs" "w" : "+S"(addr), "+c"(count) : "d"(port) : "memory"); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insw(int port, void *addr, unsigned long count) { if (sev_key_active()) { unsigned short *value = (unsigned short *)addr; while (count) { *value = inw(port); value++; count--; } } else { asm volatile("rep; ins" "w" : "+D"(addr), "+c"(count) : "d"(port) : "memory"); } }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outl(unsigned int value, int port) { asm volatile("out" "l" " %" "" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int inl(int port) { unsigned int value; asm volatile("in" "l" " %w1, %" "" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outl_p(unsigned int value, int port) { outl(value, port); slow_down_io(); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int inl_p(int port) { unsigned int value = inl(port); slow_down_io(); return value; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outsl(int port, const void *addr, unsigned long count) { if (sev_key_active()) { unsigned int *value = (unsigned int *)addr; while (count) { outl(*value, port); value++; count--; } } else { asm volatile("rep; outs" "l" : "+S"(addr), "+c"(count) : "d"(port) : "memory"); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insl(int port, void *addr, unsigned long count) { if (sev_key_active()) { unsigned int *value = (unsigned int *)addr; while (count) { *value = inl(port); value++; count--; } } else { asm volatile("rep; ins" "l" : "+D"(addr), "+c"(count) : "d"(port) : "memory"); } }
# 358 "./arch/x86/include/asm/io.h"
extern void *xlate_dev_mem_ptr(phys_addr_t phys);
extern void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr);




extern int ioremap_change_attr(unsigned long vaddr, unsigned long size,
    enum page_cache_mode pcm);
extern void *ioremap_wc(resource_size_t offset, unsigned long size);

extern void *ioremap_wt(resource_size_t offset, unsigned long size);


extern bool is_early_ioremap_ptep(pte_t *ptep);



# 1 "./include/asm-generic/io.h" 1
# 18 "./include/asm-generic/io.h"
# 1 "./arch/x86/include/generated/asm/mmiowb.h" 1
# 19 "./include/asm-generic/io.h" 2
# 317 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void readsb(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u8 *buf = buffer;

  do {
   u8 x = __readb(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void readsw(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u16 *buf = buffer;

  do {
   u16 x = __readw(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void readsl(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u32 *buf = buffer;

  do {
   u32 x = __readl(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void readsq(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u64 *buf = buffer;

  do {
   u64 x = __readq(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writesb(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u8 *buf = buffer;

  do {
   __writeb(*buf++, addr);
  } while (--count);
 }
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writesw(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u16 *buf = buffer;

  do {
   __writew(*buf++, addr);
  } while (--count);
 }
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writesl(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u32 *buf = buffer;

  do {
   __writel(*buf++, addr);
  } while (--count);
 }
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void writesq(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u64 *buf = buffer;

  do {
   __writeq(*buf++, addr);
  } while (--count);
 }
}
# 526 "./include/asm-generic/io.h"
# 1 "./include/linux/logic_pio.h" 1
# 13 "./include/linux/logic_pio.h"
enum {
 LOGIC_PIO_INDIRECT,
 LOGIC_PIO_CPU_MMIO,
};

struct logic_pio_hwaddr {
 struct list_head list;
 struct fwnode_handle *fwnode;
 resource_size_t hw_start;
 resource_size_t io_start;
 resource_size_t size;
 unsigned long flags;

 void *hostdata;
 const struct logic_pio_host_ops *ops;
};

struct logic_pio_host_ops {
 u32 (*in)(void *hostdata, unsigned long addr, size_t dwidth);
 void (*out)(void *hostdata, unsigned long addr, u32 val,
      size_t dwidth);
 u32 (*ins)(void *hostdata, unsigned long addr, void *buffer,
     size_t dwidth, unsigned int count);
 void (*outs)(void *hostdata, unsigned long addr, const void *buffer,
       size_t dwidth, unsigned int count);
};
# 116 "./include/linux/logic_pio.h"
struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *fwnode);
unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *fwnode,
   resource_size_t hw_addr, resource_size_t size);
int logic_pio_register_range(struct logic_pio_hwaddr *newrange);
void logic_pio_unregister_range(struct logic_pio_hwaddr *range);
resource_size_t logic_pio_to_hwaddr(unsigned long pio);
unsigned long logic_pio_trans_cpuaddr(resource_size_t hw_addr);
# 527 "./include/asm-generic/io.h" 2
# 658 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 insb(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 insw(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 insl(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsb(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsw(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsl(addr, buffer, count);
}
# 1036 "./include/asm-generic/io.h"
extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *p);
# 1129 "./include/asm-generic/io.h"
extern int devmem_is_allowed(unsigned long pfn);
# 376 "./arch/x86/include/asm/io.h" 2



extern int __attribute__((__warn_unused_result__)) arch_phys_wc_index(int handle);


extern int __attribute__((__warn_unused_result__)) arch_phys_wc_add(unsigned long base,
      unsigned long size);
extern void arch_phys_wc_del(int handle);




extern int arch_io_reserve_memtype_wc(resource_size_t start, resource_size_t size);
extern void arch_io_free_memtype_wc(resource_size_t start, resource_size_t size);
# 403 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool phys_mem_access_encrypted(unsigned long phys_addr,
          unsigned long size)
{
 return true;
}
# 423 "./arch/x86/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void iosubmit_cmds512(void *dst, const void *src,
        size_t count)
{
 const u8 *from = src;
 const u8 *end = from + count * 64;

 while (from < end) {
  movdir64b(dst, from);
  from += 64;
 }
}
# 14 "./include/linux/io.h" 2


struct device;
struct resource;

          void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 38 "./include/linux/io.h"
void * devm_ioport_map(struct device *dev, unsigned long port,
          unsigned int nr);
void devm_ioport_unmap(struct device *dev, void *addr);
# 56 "./include/linux/io.h"
void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_uc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_np(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);
# 135 "./include/linux/io.h"
int devm_arch_phys_wc_add(struct device *dev, unsigned long base, unsigned long size);

enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
 MEMREMAP_ENC = 1 << 3,
 MEMREMAP_DEC = 1 << 4,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 171 "./include/linux/io.h"
int devm_arch_io_reserve_memtype_wc(struct device *dev, resource_size_t start,
        resource_size_t size);
# 21 "./include/linux/irq.h" 2




# 1 "./arch/x86/include/generated/asm/irq_regs.h" 1
# 1 "./include/asm-generic/irq_regs.h" 1
# 17 "./include/asm-generic/irq_regs.h"
extern __attribute__((section(".data" ""))) __typeof__(struct pt_regs *) __irq_regs;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pt_regs *get_irq_regs(void)
{
 return ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs;

 old_regs = ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__irq_regs)); (typeof(__irq_regs))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) new_regs) & 0xff)); if (0) { typeof((__irq_regs)) pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } asm ("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__irq_regs)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) new_regs) & 0xffff)); if (0) { typeof((__irq_regs)) pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } asm ("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__irq_regs)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) new_regs) & 0xffffffff)); if (0) { typeof((__irq_regs)) pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } asm ("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__irq_regs)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(new_regs)); if (0) { typeof((__irq_regs)) pto_tmp__; pto_tmp__ = (new_regs); (void)pto_tmp__; } asm ("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__irq_regs)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 return old_regs;
}
# 2 "./arch/x86/include/generated/asm/irq_regs.h" 2
# 26 "./include/linux/irq.h" 2

struct seq_file;
struct module;
struct msi_msg;
struct irq_affinity_desc;
enum irqchip_irq_state;
# 77 "./include/linux/irq.h"
enum {
 IRQ_TYPE_NONE = 0x00000000,
 IRQ_TYPE_EDGE_RISING = 0x00000001,
 IRQ_TYPE_EDGE_FALLING = 0x00000002,
 IRQ_TYPE_EDGE_BOTH = (IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING),
 IRQ_TYPE_LEVEL_HIGH = 0x00000004,
 IRQ_TYPE_LEVEL_LOW = 0x00000008,
 IRQ_TYPE_LEVEL_MASK = (IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH),
 IRQ_TYPE_SENSE_MASK = 0x0000000f,
 IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK,

 IRQ_TYPE_PROBE = 0x00000010,

 IRQ_LEVEL = (1 << 8),
 IRQ_PER_CPU = (1 << 9),
 IRQ_NOPROBE = (1 << 10),
 IRQ_NOREQUEST = (1 << 11),
 IRQ_NOAUTOEN = (1 << 12),
 IRQ_NO_BALANCING = (1 << 13),
 IRQ_MOVE_PCNTXT = (1 << 14),
 IRQ_NESTED_THREAD = (1 << 15),
 IRQ_NOTHREAD = (1 << 16),
 IRQ_PER_CPU_DEVID = (1 << 17),
 IRQ_IS_POLLED = (1 << 18),
 IRQ_DISABLE_UNLAZY = (1 << 19),
 IRQ_HIDDEN = (1 << 20),
 IRQ_NO_DEBUG = (1 << 21),
};
# 123 "./include/linux/irq.h"
enum {
 IRQ_SET_MASK_OK = 0,
 IRQ_SET_MASK_OK_NOCOPY,
 IRQ_SET_MASK_OK_DONE,
};

struct msi_desc;
struct irq_domain;
# 147 "./include/linux/irq.h"
struct irq_common_data {
 unsigned int state_use_accessors;



 void *handler_data;
 struct msi_desc *msi_desc;
 cpumask_var_t affinity;






};
# 177 "./include/linux/irq.h"
struct irq_data {
 u32 mask;
 unsigned int irq;
 unsigned long hwirq;
 struct irq_common_data *common;
 struct irq_chip *chip;
 struct irq_domain *domain;

 struct irq_data *parent_data;

 void *chip_data;
};
# 225 "./include/linux/irq.h"
enum {
 IRQD_TRIGGER_MASK = 0xf,
 IRQD_SETAFFINITY_PENDING = (1 << 8),
 IRQD_ACTIVATED = (1 << 9),
 IRQD_NO_BALANCING = (1 << 10),
 IRQD_PER_CPU = (1 << 11),
 IRQD_AFFINITY_SET = (1 << 12),
 IRQD_LEVEL = (1 << 13),
 IRQD_WAKEUP_STATE = (1 << 14),
 IRQD_MOVE_PCNTXT = (1 << 15),
 IRQD_IRQ_DISABLED = (1 << 16),
 IRQD_IRQ_MASKED = (1 << 17),
 IRQD_IRQ_INPROGRESS = (1 << 18),
 IRQD_WAKEUP_ARMED = (1 << 19),
 IRQD_FORWARDED_TO_VCPU = (1 << 20),
 IRQD_AFFINITY_MANAGED = (1 << 21),
 IRQD_IRQ_STARTED = (1 << 22),
 IRQD_MANAGED_SHUTDOWN = (1 << 23),
 IRQD_SINGLE_TARGET = (1 << 24),
 IRQD_DEFAULT_TRIGGER_SET = (1 << 25),
 IRQD_CAN_RESERVE = (1 << 26),
 IRQD_MSI_NOMASK_QUIRK = (1 << 27),
 IRQD_HANDLE_ENFORCE_IRQCTX = (1 << 28),
 IRQD_AFFINITY_ON_ACTIVATE = (1 << 29),
 IRQD_IRQ_ENABLED_ON_SUSPEND = (1 << 30),
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_setaffinity_pending(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SETAFFINITY_PENDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_per_cpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_PER_CPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_can_balance(struct irq_data *d)
{
 return !((((d)->common)->state_use_accessors) & (IRQD_PER_CPU | IRQD_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_affinity_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_mark_affinity_was_set(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_trigger_type_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 irqd_get_trigger_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_TRIGGER_MASK;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_trigger_type(struct irq_data *d, u32 type)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= type & IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_level_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_LEVEL;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_single_target(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_single_target(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_handle_enforce_irqctx(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_handle_enforce_irqctx(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_enabled_on_suspend(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_ENABLED_ON_SUSPEND;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_wakeup_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_STATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_can_move_in_process_context(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MOVE_PCNTXT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_irq_disabled(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_DISABLED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_irq_masked(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_MASKED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_irq_inprogress(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_INPROGRESS;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_wakeup_armed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_ARMED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_forwarded_to_vcpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_clr_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_affinity_is_managed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_MANAGED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_activated(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_clr_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_started(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_STARTED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_is_managed_and_shutdown(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MANAGED_SHUTDOWN;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_clr_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_can_reserve(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_clr_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_msi_nomask_quirk(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqd_set_affinity_on_activate(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_ON_ACTIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irqd_affinity_on_activate(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_ON_ACTIVATE;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) irq_hw_number_t irqd_to_hwirq(struct irq_data *d)
{
 return d->hwirq;
}
# 505 "./include/linux/irq.h"
struct irq_chip {
 struct device *parent_device;
 const char *name;
 unsigned int (*irq_startup)(struct irq_data *data);
 void (*irq_shutdown)(struct irq_data *data);
 void (*irq_enable)(struct irq_data *data);
 void (*irq_disable)(struct irq_data *data);

 void (*irq_ack)(struct irq_data *data);
 void (*irq_mask)(struct irq_data *data);
 void (*irq_mask_ack)(struct irq_data *data);
 void (*irq_unmask)(struct irq_data *data);
 void (*irq_eoi)(struct irq_data *data);

 int (*irq_set_affinity)(struct irq_data *data, const struct cpumask *dest, bool force);
 int (*irq_retrigger)(struct irq_data *data);
 int (*irq_set_type)(struct irq_data *data, unsigned int flow_type);
 int (*irq_set_wake)(struct irq_data *data, unsigned int on);

 void (*irq_bus_lock)(struct irq_data *data);
 void (*irq_bus_sync_unlock)(struct irq_data *data);





 void (*irq_suspend)(struct irq_data *data);
 void (*irq_resume)(struct irq_data *data);
 void (*irq_pm_shutdown)(struct irq_data *data);

 void (*irq_calc_mask)(struct irq_data *data);

 void (*irq_print_chip)(struct irq_data *data, struct seq_file *p);
 int (*irq_request_resources)(struct irq_data *data);
 void (*irq_release_resources)(struct irq_data *data);

 void (*irq_compose_msi_msg)(struct irq_data *data, struct msi_msg *msg);
 void (*irq_write_msi_msg)(struct irq_data *data, struct msi_msg *msg);

 int (*irq_get_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool *state);
 int (*irq_set_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool state);

 int (*irq_set_vcpu_affinity)(struct irq_data *data, void *vcpu_info);

 void (*ipi_send_single)(struct irq_data *data, unsigned int cpu);
 void (*ipi_send_mask)(struct irq_data *data, const struct cpumask *dest);

 int (*irq_nmi_setup)(struct irq_data *data);
 void (*irq_nmi_teardown)(struct irq_data *data);

 unsigned long flags;
};
# 575 "./include/linux/irq.h"
enum {
 IRQCHIP_SET_TYPE_MASKED = (1 << 0),
 IRQCHIP_EOI_IF_HANDLED = (1 << 1),
 IRQCHIP_MASK_ON_SUSPEND = (1 << 2),
 IRQCHIP_ONOFFLINE_ENABLED = (1 << 3),
 IRQCHIP_SKIP_SET_WAKE = (1 << 4),
 IRQCHIP_ONESHOT_SAFE = (1 << 5),
 IRQCHIP_EOI_THREADED = (1 << 6),
 IRQCHIP_SUPPORTS_LEVEL_MSI = (1 << 7),
 IRQCHIP_SUPPORTS_NMI = (1 << 8),
 IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND = (1 << 9),
 IRQCHIP_AFFINITY_PRE_STARTUP = (1 << 10),
};

# 1 "./include/linux/irqdesc.h" 1
# 13 "./include/linux/irqdesc.h"
struct irq_affinity_notify;
struct proc_dir_entry;
struct module;
struct irq_desc;
struct irq_domain;
struct pt_regs;
# 55 "./include/linux/irqdesc.h"
struct irq_desc {
 struct irq_common_data irq_common_data;
 struct irq_data irq_data;
 unsigned int *kstat_irqs;
 irq_flow_handler_t handle_irq;
 struct irqaction *action;
 unsigned int status_use_accessors;
 unsigned int core_internal_state__do_not_mess_with_it;
 unsigned int depth;
 unsigned int wake_depth;
 unsigned int tot_count;
 unsigned int irq_count;
 unsigned long last_unhandled;
 unsigned int irqs_unhandled;
 atomic_t threads_handled;
 int threads_handled_last;
 raw_spinlock_t lock;
 struct cpumask *percpu_enabled;
 const struct cpumask *percpu_affinity;







 unsigned long threads_oneshot;
 atomic_t threads_active;
 wait_queue_head_t wait_for_threads;







 struct proc_dir_entry *dir;






 struct callback_head rcu;
 struct kobject kobj;

 struct mutex request_mutex;
 int parent_irq;
 struct module *owner;
 const char *name;
} ;


extern void irq_lock_sparse(void);
extern void irq_unlock_sparse(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int irq_desc_kstat_cpu(struct irq_desc *desc,
           unsigned int cpu)
{
 return desc->kstat_irqs ? *({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((desc->kstat_irqs) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(desc->kstat_irqs)) *)(desc->kstat_irqs); }); }) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_desc *irq_data_to_desc(struct irq_data *data)
{
 return ({ void *__mptr = (void *)(data->common); _Static_assert(__builtin_types_compatible_p(typeof(*(data->common)), typeof(((struct irq_desc *)0)->irq_common_data)) || __builtin_types_compatible_p(typeof(*(data->common)), typeof(void)), "pointer type mismatch in container_of()"); ((struct irq_desc *)(__mptr - __builtin_offsetof(struct irq_desc, irq_common_data))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int irq_desc_get_irq(struct irq_desc *desc)
{
 return desc->irq_data.irq;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_data *irq_desc_get_irq_data(struct irq_desc *desc)
{
 return &desc->irq_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_chip *irq_desc_get_chip(struct irq_desc *desc)
{
 return desc->irq_data.chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *irq_desc_get_chip_data(struct irq_desc *desc)
{
 return desc->irq_data.chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *irq_desc_get_handler_data(struct irq_desc *desc)
{
 return desc->irq_common_data.handler_data;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void generic_handle_irq_desc(struct irq_desc *desc)
{
 desc->handle_irq(desc);
}

int handle_irq_desc(struct irq_desc *desc);
int generic_handle_irq(unsigned int irq);







int generic_handle_domain_irq(struct irq_domain *domain, unsigned int hwirq);
int generic_handle_domain_nmi(struct irq_domain *domain, unsigned int hwirq);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_desc_has_action(struct irq_desc *desc)
{
 return desc && desc->action != ((void *)0);
}
# 190 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_handler_locked(struct irq_data *data,
       irq_flow_handler_t handler)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
}
# 210 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
irq_set_chip_handler_name_locked(struct irq_data *data, struct irq_chip *chip,
     irq_flow_handler_t handler, const char *name)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
 desc->name = name;
 data->chip = chip;
}

bool irq_check_status_bit(unsigned int irq, unsigned int bitmask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_balancing_disabled(unsigned int irq)
{
 return irq_check_status_bit(irq, (IRQ_PER_CPU | IRQ_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_is_percpu(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_is_percpu_devid(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU_DEVID);
}

void __irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class)
{
 if (1)
  __irq_set_lockdep_class(irq, lock_class, request_class);
}
# 590 "./include/linux/irq.h" 2
# 606 "./include/linux/irq.h"
struct irqaction;
extern int setup_percpu_irq(unsigned int irq, struct irqaction *new);
extern void remove_percpu_irq(unsigned int irq, struct irqaction *act);





extern int irq_set_affinity_locked(struct irq_data *data,
       const struct cpumask *cpumask, bool force);
extern int irq_set_vcpu_affinity(unsigned int irq, void *vcpu_info);
# 635 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_move_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_move_masked_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_force_complete_move(struct irq_desc *desc) { }


extern int no_irq_affinity;


int irq_set_parent(int irq, int parent_irq);
# 655 "./include/linux/irq.h"
extern void handle_level_irq(struct irq_desc *desc);
extern void handle_fasteoi_irq(struct irq_desc *desc);
extern void handle_edge_irq(struct irq_desc *desc);
extern void handle_edge_eoi_irq(struct irq_desc *desc);
extern void handle_simple_irq(struct irq_desc *desc);
extern void handle_untracked_irq(struct irq_desc *desc);
extern void handle_percpu_irq(struct irq_desc *desc);
extern void handle_percpu_devid_irq(struct irq_desc *desc);
extern void handle_bad_irq(struct irq_desc *desc);
extern void handle_nested_irq(unsigned int irq);

extern void handle_fasteoi_nmi(struct irq_desc *desc);
extern void handle_percpu_devid_fasteoi_nmi(struct irq_desc *desc);

extern int irq_chip_compose_msi_msg(struct irq_data *data, struct msi_msg *msg);
extern int irq_chip_pm_get(struct irq_data *data);
extern int irq_chip_pm_put(struct irq_data *data);

extern void handle_fasteoi_ack_irq(struct irq_desc *desc);
extern void handle_fasteoi_mask_irq(struct irq_desc *desc);
extern int irq_chip_set_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool val);
extern int irq_chip_get_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool *state);
extern void irq_chip_enable_parent(struct irq_data *data);
extern void irq_chip_disable_parent(struct irq_data *data);
extern void irq_chip_ack_parent(struct irq_data *data);
extern int irq_chip_retrigger_hierarchy(struct irq_data *data);
extern void irq_chip_mask_parent(struct irq_data *data);
extern void irq_chip_mask_ack_parent(struct irq_data *data);
extern void irq_chip_unmask_parent(struct irq_data *data);
extern void irq_chip_eoi_parent(struct irq_data *data);
extern int irq_chip_set_affinity_parent(struct irq_data *data,
     const struct cpumask *dest,
     bool force);
extern int irq_chip_set_wake_parent(struct irq_data *data, unsigned int on);
extern int irq_chip_set_vcpu_affinity_parent(struct irq_data *data,
          void *vcpu_info);
extern int irq_chip_set_type_parent(struct irq_data *data, unsigned int type);
extern int irq_chip_request_resources_parent(struct irq_data *data);
extern void irq_chip_release_resources_parent(struct irq_data *data);



extern void note_interrupt(struct irq_desc *desc, irqreturn_t action_ret);



extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle)
{
 irq_set_chip_and_handler_name(irq, chip, handle, ((void *)0));
}

extern int irq_set_percpu_devid(unsigned int irq);
extern int irq_set_percpu_devid_partition(unsigned int irq,
       const struct cpumask *affinity);
extern int irq_get_percpu_devid_partition(unsigned int irq,
       struct cpumask *affinity);

extern void
__irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
irq_set_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 0, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
irq_set_chained_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 1, ((void *)0));
}






void
irq_set_chained_handler_and_data(unsigned int irq, irq_flow_handler_t handle,
     void *data);

void irq_modify_status(unsigned int irq, unsigned long clr, unsigned long set);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_status_flags(unsigned int irq, unsigned long set)
{
 irq_modify_status(irq, 0, set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
 irq_modify_status(irq, clr, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_noprobe(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOPROBE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_probe(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOPROBE, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_nothread(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOTHREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_thread(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOTHREAD, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_nested_thread(unsigned int irq, bool nest)
{
 if (nest)
  irq_set_status_flags(irq, IRQ_NESTED_THREAD);
 else
  irq_clear_status_flags(irq, IRQ_NESTED_THREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_set_percpu_devid_flags(unsigned int irq)
{
 irq_set_status_flags(irq,
        IRQ_NOAUTOEN | IRQ_PER_CPU | IRQ_NOTHREAD |
        IRQ_NOPROBE | IRQ_PER_CPU_DEVID);
}


extern int irq_set_chip(unsigned int irq, struct irq_chip *chip);
extern int irq_set_handler_data(unsigned int irq, void *data);
extern int irq_set_chip_data(unsigned int irq, void *data);
extern int irq_set_irq_type(unsigned int irq, unsigned int type);
extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
    struct msi_desc *entry);
extern struct irq_data *irq_get_irq_data(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_chip *irq_get_chip(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_chip *irq_data_get_irq_chip(struct irq_data *d)
{
 return d->chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *irq_get_chip_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *irq_data_get_irq_chip_data(struct irq_data *d)
{
 return d->chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *irq_get_handler_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->handler_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *irq_data_get_irq_handler_data(struct irq_data *d)
{
 return d->common->handler_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct msi_desc *irq_get_msi_desc(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->msi_desc : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct msi_desc *irq_data_get_msi_desc(struct irq_data *d)
{
 return d->common->msi_desc;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 irq_get_trigger_type(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? irqd_get_trigger_type(d) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_common_data_get_node(struct irq_common_data *d)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_data_get_node(struct irq_data *d)
{
 return irq_common_data_get_node(d->common);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cpumask *irq_get_affinity_mask(int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? d->common->affinity : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cpumask *irq_data_get_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}
# 905 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_data_update_effective_affinity(struct irq_data *d,
            const struct cpumask *m)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct cpumask *irq_data_get_effective_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cpumask *irq_get_effective_affinity_mask(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? irq_data_get_effective_affinity_mask(d) : ((void *)0);
}

unsigned int arch_dynirq_lower_bound(unsigned int from);

int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
        struct module *owner,
        const struct irq_affinity_desc *affinity);

int __devm_irq_alloc_descs(struct device *dev, int irq, unsigned int from,
      unsigned int cnt, int node, struct module *owner,
      const struct irq_affinity_desc *affinity);
# 964 "./include/linux/irq.h"
void irq_free_descs(unsigned int irq, unsigned int cnt);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_free_desc(unsigned int irq)
{
 irq_free_descs(irq, 1);
}
# 984 "./include/linux/irq.h"
struct irq_chip_regs {
 unsigned long enable;
 unsigned long disable;
 unsigned long mask;
 unsigned long ack;
 unsigned long eoi;
 unsigned long type;
 unsigned long polarity;
};
# 1007 "./include/linux/irq.h"
struct irq_chip_type {
 struct irq_chip chip;
 struct irq_chip_regs regs;
 irq_flow_handler_t handler;
 u32 type;
 u32 mask_cache_priv;
 u32 *mask_cache;
};
# 1049 "./include/linux/irq.h"
struct irq_chip_generic {
 raw_spinlock_t lock;
 void *reg_base;
 u32 (*reg_readl)(void *addr);
 void (*reg_writel)(u32 val, void *addr);
 void (*suspend)(struct irq_chip_generic *gc);
 void (*resume)(struct irq_chip_generic *gc);
 unsigned int irq_base;
 unsigned int irq_cnt;
 u32 mask_cache;
 u32 type_cache;
 u32 polarity_cache;
 u32 wake_enabled;
 u32 wake_active;
 unsigned int num_ct;
 void *private;
 unsigned long installed;
 unsigned long unused;
 struct irq_domain *domain;
 struct list_head list;
 struct irq_chip_type chip_types[];
};
# 1082 "./include/linux/irq.h"
enum irq_gc_flags {
 IRQ_GC_INIT_MASK_CACHE = 1 << 0,
 IRQ_GC_INIT_NESTED_LOCK = 1 << 1,
 IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2,
 IRQ_GC_NO_MASK = 1 << 3,
 IRQ_GC_BE_IO = 1 << 4,
};
# 1099 "./include/linux/irq.h"
struct irq_domain_chip_generic {
 unsigned int irqs_per_chip;
 unsigned int num_chips;
 unsigned int irq_flags_to_clear;
 unsigned int irq_flags_to_set;
 enum irq_gc_flags gc_flags;
 struct irq_chip_generic *gc[];
};


void irq_gc_noop(struct irq_data *d);
void irq_gc_mask_disable_reg(struct irq_data *d);
void irq_gc_mask_set_bit(struct irq_data *d);
void irq_gc_mask_clr_bit(struct irq_data *d);
void irq_gc_unmask_enable_reg(struct irq_data *d);
void irq_gc_ack_set_bit(struct irq_data *d);
void irq_gc_ack_clr_bit(struct irq_data *d);
void irq_gc_mask_disable_and_ack_set(struct irq_data *d);
void irq_gc_eoi(struct irq_data *d);
int irq_gc_set_wake(struct irq_data *d, unsigned int on);


int irq_map_generic_chip(struct irq_domain *d, unsigned int virq,
    irq_hw_number_t hw_irq);
struct irq_chip_generic *
irq_alloc_generic_chip(const char *name, int nr_ct, unsigned int irq_base,
         void *reg_base, irq_flow_handler_t handler);
void irq_setup_generic_chip(struct irq_chip_generic *gc, u32 msk,
       enum irq_gc_flags flags, unsigned int clr,
       unsigned int set);
int irq_setup_alt_chip(struct irq_data *d, unsigned int type);
void irq_remove_generic_chip(struct irq_chip_generic *gc, u32 msk,
        unsigned int clr, unsigned int set);

struct irq_chip_generic *
devm_irq_alloc_generic_chip(struct device *dev, const char *name, int num_ct,
       unsigned int irq_base, void *reg_base,
       irq_flow_handler_t handler);
int devm_irq_setup_generic_chip(struct device *dev, struct irq_chip_generic *gc,
    u32 msk, enum irq_gc_flags flags,
    unsigned int clr, unsigned int set);

struct irq_chip_generic *irq_get_domain_generic_chip(struct irq_domain *d, unsigned int hw_irq);

int __irq_alloc_domain_generic_chips(struct irq_domain *d, int irqs_per_chip,
         int num_ct, const char *name,
         irq_flow_handler_t handler,
         unsigned int clr, unsigned int set,
         enum irq_gc_flags flags);
# 1157 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_free_generic_chip(struct irq_chip_generic *gc)
{
 kfree(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_destroy_generic_chip(struct irq_chip_generic *gc,
         u32 msk, unsigned int clr,
         unsigned int set)
{
 irq_remove_generic_chip(gc, msk, clr, set);
 irq_free_generic_chip(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
{
 return ({ void *__mptr = (void *)(d->chip); _Static_assert(__builtin_types_compatible_p(typeof(*(d->chip)), typeof(((struct irq_chip_type *)0)->chip)) || __builtin_types_compatible_p(typeof(*(d->chip)), typeof(void)), "pointer type mismatch in container_of()"); ((struct irq_chip_type *)(__mptr - __builtin_offsetof(struct irq_chip_type, chip))); });
}
# 1188 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_gc_lock(struct irq_chip_generic *gc) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_gc_unlock(struct irq_chip_generic *gc) { }
# 1202 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_reg_writel(struct irq_chip_generic *gc,
      u32 val, int reg_offset)
{
 if (gc->reg_writel)
  gc->reg_writel(val, gc->reg_base + reg_offset);
 else
  writel(val, gc->reg_base + reg_offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 irq_reg_readl(struct irq_chip_generic *gc,
    int reg_offset)
{
 if (gc->reg_readl)
  return gc->reg_readl(gc->reg_base + reg_offset);
 else
  return readl(gc->reg_base + reg_offset);
}

struct irq_matrix;
struct irq_matrix *irq_alloc_matrix(unsigned int matrix_bits,
        unsigned int alloc_start,
        unsigned int alloc_end);
void irq_matrix_online(struct irq_matrix *m);
void irq_matrix_offline(struct irq_matrix *m);
void irq_matrix_assign_system(struct irq_matrix *m, unsigned int bit, bool replace);
int irq_matrix_reserve_managed(struct irq_matrix *m, const struct cpumask *msk);
void irq_matrix_remove_managed(struct irq_matrix *m, const struct cpumask *msk);
int irq_matrix_alloc_managed(struct irq_matrix *m, const struct cpumask *msk,
    unsigned int *mapped_cpu);
void irq_matrix_reserve(struct irq_matrix *m);
void irq_matrix_remove_reserved(struct irq_matrix *m);
int irq_matrix_alloc(struct irq_matrix *m, const struct cpumask *msk,
       bool reserved, unsigned int *mapped_cpu);
void irq_matrix_free(struct irq_matrix *m, unsigned int cpu,
       unsigned int bit, bool managed);
void irq_matrix_assign(struct irq_matrix *m, unsigned int bit);
unsigned int irq_matrix_available(struct irq_matrix *m, bool cpudown);
unsigned int irq_matrix_allocated(struct irq_matrix *m);
unsigned int irq_matrix_reserved(struct irq_matrix *m);
void irq_matrix_debug_show(struct seq_file *sf, struct irq_matrix *m, int ind);



irq_hw_number_t ipi_get_hwirq(unsigned int irq, unsigned int cpu);
int __ipi_send_single(struct irq_desc *desc, unsigned int cpu);
int __ipi_send_mask(struct irq_desc *desc, const struct cpumask *dest);
int ipi_send_single(unsigned int virq, unsigned int cpu);
int ipi_send_mask(unsigned int virq, const struct cpumask *dest);
# 18 "./arch/x86/include/asm/kvm_host.h" 2




# 1 "./include/linux/perf_event.h" 1
# 17 "./include/linux/perf_event.h"
# 1 "./include/uapi/linux/perf_event.h" 1
# 29 "./include/uapi/linux/perf_event.h"
enum perf_type_id {
 PERF_TYPE_HARDWARE = 0,
 PERF_TYPE_SOFTWARE = 1,
 PERF_TYPE_TRACEPOINT = 2,
 PERF_TYPE_HW_CACHE = 3,
 PERF_TYPE_RAW = 4,
 PERF_TYPE_BREAKPOINT = 5,

 PERF_TYPE_MAX,
};
# 60 "./include/uapi/linux/perf_event.h"
enum perf_hw_id {



 PERF_COUNT_HW_CPU_CYCLES = 0,
 PERF_COUNT_HW_INSTRUCTIONS = 1,
 PERF_COUNT_HW_CACHE_REFERENCES = 2,
 PERF_COUNT_HW_CACHE_MISSES = 3,
 PERF_COUNT_HW_BRANCH_INSTRUCTIONS = 4,
 PERF_COUNT_HW_BRANCH_MISSES = 5,
 PERF_COUNT_HW_BUS_CYCLES = 6,
 PERF_COUNT_HW_STALLED_CYCLES_FRONTEND = 7,
 PERF_COUNT_HW_STALLED_CYCLES_BACKEND = 8,
 PERF_COUNT_HW_REF_CPU_CYCLES = 9,

 PERF_COUNT_HW_MAX,
};
# 85 "./include/uapi/linux/perf_event.h"
enum perf_hw_cache_id {
 PERF_COUNT_HW_CACHE_L1D = 0,
 PERF_COUNT_HW_CACHE_L1I = 1,
 PERF_COUNT_HW_CACHE_LL = 2,
 PERF_COUNT_HW_CACHE_DTLB = 3,
 PERF_COUNT_HW_CACHE_ITLB = 4,
 PERF_COUNT_HW_CACHE_BPU = 5,
 PERF_COUNT_HW_CACHE_NODE = 6,

 PERF_COUNT_HW_CACHE_MAX,
};

enum perf_hw_cache_op_id {
 PERF_COUNT_HW_CACHE_OP_READ = 0,
 PERF_COUNT_HW_CACHE_OP_WRITE = 1,
 PERF_COUNT_HW_CACHE_OP_PREFETCH = 2,

 PERF_COUNT_HW_CACHE_OP_MAX,
};

enum perf_hw_cache_op_result_id {
 PERF_COUNT_HW_CACHE_RESULT_ACCESS = 0,
 PERF_COUNT_HW_CACHE_RESULT_MISS = 1,

 PERF_COUNT_HW_CACHE_RESULT_MAX,
};







enum perf_sw_ids {
 PERF_COUNT_SW_CPU_CLOCK = 0,
 PERF_COUNT_SW_TASK_CLOCK = 1,
 PERF_COUNT_SW_PAGE_FAULTS = 2,
 PERF_COUNT_SW_CONTEXT_SWITCHES = 3,
 PERF_COUNT_SW_CPU_MIGRATIONS = 4,
 PERF_COUNT_SW_PAGE_FAULTS_MIN = 5,
 PERF_COUNT_SW_PAGE_FAULTS_MAJ = 6,
 PERF_COUNT_SW_ALIGNMENT_FAULTS = 7,
 PERF_COUNT_SW_EMULATION_FAULTS = 8,
 PERF_COUNT_SW_DUMMY = 9,
 PERF_COUNT_SW_BPF_OUTPUT = 10,
 PERF_COUNT_SW_CGROUP_SWITCHES = 11,

 PERF_COUNT_SW_MAX,
};





enum perf_event_sample_format {
 PERF_SAMPLE_IP = 1U << 0,
 PERF_SAMPLE_TID = 1U << 1,
 PERF_SAMPLE_TIME = 1U << 2,
 PERF_SAMPLE_ADDR = 1U << 3,
 PERF_SAMPLE_READ = 1U << 4,
 PERF_SAMPLE_CALLCHAIN = 1U << 5,
 PERF_SAMPLE_ID = 1U << 6,
 PERF_SAMPLE_CPU = 1U << 7,
 PERF_SAMPLE_PERIOD = 1U << 8,
 PERF_SAMPLE_STREAM_ID = 1U << 9,
 PERF_SAMPLE_RAW = 1U << 10,
 PERF_SAMPLE_BRANCH_STACK = 1U << 11,
 PERF_SAMPLE_REGS_USER = 1U << 12,
 PERF_SAMPLE_STACK_USER = 1U << 13,
 PERF_SAMPLE_WEIGHT = 1U << 14,
 PERF_SAMPLE_DATA_SRC = 1U << 15,
 PERF_SAMPLE_IDENTIFIER = 1U << 16,
 PERF_SAMPLE_TRANSACTION = 1U << 17,
 PERF_SAMPLE_REGS_INTR = 1U << 18,
 PERF_SAMPLE_PHYS_ADDR = 1U << 19,
 PERF_SAMPLE_AUX = 1U << 20,
 PERF_SAMPLE_CGROUP = 1U << 21,
 PERF_SAMPLE_DATA_PAGE_SIZE = 1U << 22,
 PERF_SAMPLE_CODE_PAGE_SIZE = 1U << 23,
 PERF_SAMPLE_WEIGHT_STRUCT = 1U << 24,

 PERF_SAMPLE_MAX = 1U << 25,

 __PERF_SAMPLE_CALLCHAIN_EARLY = 1ULL << 63,
};
# 182 "./include/uapi/linux/perf_event.h"
enum perf_branch_sample_type_shift {
 PERF_SAMPLE_BRANCH_USER_SHIFT = 0,
 PERF_SAMPLE_BRANCH_KERNEL_SHIFT = 1,
 PERF_SAMPLE_BRANCH_HV_SHIFT = 2,

 PERF_SAMPLE_BRANCH_ANY_SHIFT = 3,
 PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT = 4,
 PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT = 5,
 PERF_SAMPLE_BRANCH_IND_CALL_SHIFT = 6,
 PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT = 7,
 PERF_SAMPLE_BRANCH_IN_TX_SHIFT = 8,
 PERF_SAMPLE_BRANCH_NO_TX_SHIFT = 9,
 PERF_SAMPLE_BRANCH_COND_SHIFT = 10,

 PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT = 11,
 PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT = 12,
 PERF_SAMPLE_BRANCH_CALL_SHIFT = 13,

 PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT = 14,
 PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT = 15,

 PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT = 16,

 PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT = 17,

 PERF_SAMPLE_BRANCH_MAX_SHIFT
};

enum perf_branch_sample_type {
 PERF_SAMPLE_BRANCH_USER = 1U << PERF_SAMPLE_BRANCH_USER_SHIFT,
 PERF_SAMPLE_BRANCH_KERNEL = 1U << PERF_SAMPLE_BRANCH_KERNEL_SHIFT,
 PERF_SAMPLE_BRANCH_HV = 1U << PERF_SAMPLE_BRANCH_HV_SHIFT,

 PERF_SAMPLE_BRANCH_ANY = 1U << PERF_SAMPLE_BRANCH_ANY_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_CALL = 1U << PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_RETURN = 1U << PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT,
 PERF_SAMPLE_BRANCH_IND_CALL = 1U << PERF_SAMPLE_BRANCH_IND_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ABORT_TX = 1U << PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT,
 PERF_SAMPLE_BRANCH_IN_TX = 1U << PERF_SAMPLE_BRANCH_IN_TX_SHIFT,
 PERF_SAMPLE_BRANCH_NO_TX = 1U << PERF_SAMPLE_BRANCH_NO_TX_SHIFT,
 PERF_SAMPLE_BRANCH_COND = 1U << PERF_SAMPLE_BRANCH_COND_SHIFT,

 PERF_SAMPLE_BRANCH_CALL_STACK = 1U << PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT,
 PERF_SAMPLE_BRANCH_IND_JUMP = 1U << PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT,
 PERF_SAMPLE_BRANCH_CALL = 1U << PERF_SAMPLE_BRANCH_CALL_SHIFT,

 PERF_SAMPLE_BRANCH_NO_FLAGS = 1U << PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT,
 PERF_SAMPLE_BRANCH_NO_CYCLES = 1U << PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT,

 PERF_SAMPLE_BRANCH_TYPE_SAVE =
  1U << PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT,

 PERF_SAMPLE_BRANCH_HW_INDEX = 1U << PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT,

 PERF_SAMPLE_BRANCH_MAX = 1U << PERF_SAMPLE_BRANCH_MAX_SHIFT,
};




enum {
 PERF_BR_UNKNOWN = 0,
 PERF_BR_COND = 1,
 PERF_BR_UNCOND = 2,
 PERF_BR_IND = 3,
 PERF_BR_CALL = 4,
 PERF_BR_IND_CALL = 5,
 PERF_BR_RET = 6,
 PERF_BR_SYSCALL = 7,
 PERF_BR_SYSRET = 8,
 PERF_BR_COND_CALL = 9,
 PERF_BR_COND_RET = 10,
 PERF_BR_MAX,
};
# 265 "./include/uapi/linux/perf_event.h"
enum perf_sample_regs_abi {
 PERF_SAMPLE_REGS_ABI_NONE = 0,
 PERF_SAMPLE_REGS_ABI_32 = 1,
 PERF_SAMPLE_REGS_ABI_64 = 2,
};





enum {
 PERF_TXN_ELISION = (1 << 0),
 PERF_TXN_TRANSACTION = (1 << 1),
 PERF_TXN_SYNC = (1 << 2),
 PERF_TXN_ASYNC = (1 << 3),
 PERF_TXN_RETRY = (1 << 4),
 PERF_TXN_CONFLICT = (1 << 5),
 PERF_TXN_CAPACITY_WRITE = (1 << 6),
 PERF_TXN_CAPACITY_READ = (1 << 7),

 PERF_TXN_MAX = (1 << 8),



 PERF_TXN_ABORT_MASK = (0xffffffffULL << 32),
 PERF_TXN_ABORT_SHIFT = 32,
};
# 313 "./include/uapi/linux/perf_event.h"
enum perf_event_read_format {
 PERF_FORMAT_TOTAL_TIME_ENABLED = 1U << 0,
 PERF_FORMAT_TOTAL_TIME_RUNNING = 1U << 1,
 PERF_FORMAT_ID = 1U << 2,
 PERF_FORMAT_GROUP = 1U << 3,

 PERF_FORMAT_MAX = 1U << 4,
};
# 338 "./include/uapi/linux/perf_event.h"
struct perf_event_attr {




 __u32 type;




 __u32 size;




 __u64 config;

 union {
  __u64 sample_period;
  __u64 sample_freq;
 };

 __u64 sample_type;
 __u64 read_format;

 __u64 disabled : 1,
    inherit : 1,
    pinned : 1,
    exclusive : 1,
    exclude_user : 1,
    exclude_kernel : 1,
    exclude_hv : 1,
    exclude_idle : 1,
    mmap : 1,
    comm : 1,
    freq : 1,
    inherit_stat : 1,
    enable_on_exec : 1,
    task : 1,
    watermark : 1,
# 388 "./include/uapi/linux/perf_event.h"
    precise_ip : 2,
    mmap_data : 1,
    sample_id_all : 1,

    exclude_host : 1,
    exclude_guest : 1,

    exclude_callchain_kernel : 1,
    exclude_callchain_user : 1,
    mmap2 : 1,
    comm_exec : 1,
    use_clockid : 1,
    context_switch : 1,
    write_backward : 1,
    namespaces : 1,
    ksymbol : 1,
    bpf_event : 1,
    aux_output : 1,
    cgroup : 1,
    text_poke : 1,
    build_id : 1,
    inherit_thread : 1,
    remove_on_exec : 1,
    sigtrap : 1,
    __reserved_1 : 26;

 union {
  __u32 wakeup_events;
  __u32 wakeup_watermark;
 };

 __u32 bp_type;
 union {
  __u64 bp_addr;
  __u64 kprobe_func;
  __u64 uprobe_path;
  __u64 config1;
 };
 union {
  __u64 bp_len;
  __u64 kprobe_addr;
  __u64 probe_offset;
  __u64 config2;
 };
 __u64 branch_sample_type;





 __u64 sample_regs_user;




 __u32 sample_stack_user;

 __s32 clockid;
# 454 "./include/uapi/linux/perf_event.h"
 __u64 sample_regs_intr;




 __u32 aux_watermark;
 __u16 sample_max_stack;
 __u16 __reserved_2;
 __u32 aux_sample_size;
 __u32 __reserved_3;





 __u64 sig_data;
};






struct perf_event_query_bpf {



 __u32 ids_len;




 __u32 prog_cnt;



 __u32 ids[0];
};
# 509 "./include/uapi/linux/perf_event.h"
enum perf_event_ioc_flags {
 PERF_IOC_FLAG_GROUP = 1U << 0,
};




struct perf_event_mmap_page {
 __u32 version;
 __u32 compat_version;
# 555 "./include/uapi/linux/perf_event.h"
 __u32 lock;
 __u32 index;
 __s64 offset;
 __u64 time_enabled;
 __u64 time_running;
 union {
  __u64 capabilities;
  struct {
   __u64 cap_bit0 : 1,
    cap_bit0_is_deprecated : 1,

    cap_user_rdpmc : 1,
    cap_user_time : 1,
    cap_user_time_zero : 1,
    cap_user_time_short : 1,
    cap_____res : 58;
  };
 };
# 583 "./include/uapi/linux/perf_event.h"
 __u16 pmc_width;
# 609 "./include/uapi/linux/perf_event.h"
 __u16 time_shift;
 __u32 time_mult;
 __u64 time_offset;
# 628 "./include/uapi/linux/perf_event.h"
 __u64 time_zero;

 __u32 size;
 __u32 __reserved_1;
# 644 "./include/uapi/linux/perf_event.h"
 __u64 time_cycles;
 __u64 time_mask;





 __u8 __reserved[116*8];
# 669 "./include/uapi/linux/perf_event.h"
 __u64 data_head;
 __u64 data_tail;
 __u64 data_offset;
 __u64 data_size;
# 685 "./include/uapi/linux/perf_event.h"
 __u64 aux_head;
 __u64 aux_tail;
 __u64 aux_offset;
 __u64 aux_size;
};
# 760 "./include/uapi/linux/perf_event.h"
struct perf_event_header {
 __u32 type;
 __u16 misc;
 __u16 size;
};

struct perf_ns_link_info {
 __u64 dev;
 __u64 ino;
};

enum {
 NET_NS_INDEX = 0,
 UTS_NS_INDEX = 1,
 IPC_NS_INDEX = 2,
 PID_NS_INDEX = 3,
 USER_NS_INDEX = 4,
 MNT_NS_INDEX = 5,
 CGROUP_NS_INDEX = 6,

 NR_NAMESPACES,
};

enum perf_event_type {
# 824 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_MMAP = 1,
# 834 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_LOST = 2,
# 845 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_COMM = 3,
# 856 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_EXIT = 4,
# 867 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_THROTTLE = 5,
 PERF_RECORD_UNTHROTTLE = 6,
# 879 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_FORK = 7,
# 890 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_READ = 8,
# 972 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_SAMPLE = 9,
# 1004 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_MMAP2 = 10,
# 1018 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_AUX = 11,
# 1030 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_ITRACE_START = 12,
# 1042 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_LOST_SAMPLES = 13,
# 1054 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_SWITCH = 14,
# 1068 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_SWITCH_CPU_WIDE = 15,
# 1080 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_NAMESPACES = 16,
# 1095 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_KSYMBOL = 17,
# 1114 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_BPF_EVENT = 18,
# 1124 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_CGROUP = 19,
# 1142 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_TEXT_POKE = 20,
# 1157 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_AUX_OUTPUT_HW_ID = 21,

 PERF_RECORD_MAX,
};

enum perf_record_ksymbol_type {
 PERF_RECORD_KSYMBOL_TYPE_UNKNOWN = 0,
 PERF_RECORD_KSYMBOL_TYPE_BPF = 1,




 PERF_RECORD_KSYMBOL_TYPE_OOL = 2,
 PERF_RECORD_KSYMBOL_TYPE_MAX
};



enum perf_bpf_event_type {
 PERF_BPF_EVENT_UNKNOWN = 0,
 PERF_BPF_EVENT_PROG_LOAD = 1,
 PERF_BPF_EVENT_PROG_UNLOAD = 2,
 PERF_BPF_EVENT_MAX,
};




enum perf_callchain_context {
 PERF_CONTEXT_HV = (__u64)-32,
 PERF_CONTEXT_KERNEL = (__u64)-128,
 PERF_CONTEXT_USER = (__u64)-512,

 PERF_CONTEXT_GUEST = (__u64)-2048,
 PERF_CONTEXT_GUEST_KERNEL = (__u64)-2176,
 PERF_CONTEXT_GUEST_USER = (__u64)-2560,

 PERF_CONTEXT_MAX = (__u64)-4095,
};
# 1216 "./include/uapi/linux/perf_event.h"
union perf_mem_data_src {
 __u64 val;
 struct {
  __u64 mem_op:5,
   mem_lvl:14,
   mem_snoop:5,
   mem_lock:2,
   mem_dtlb:7,
   mem_lvl_num:4,
   mem_remote:1,
   mem_snoopx:2,
   mem_blk:3,
   mem_hops:3,
   mem_rsvd:18;
 };
};
# 1357 "./include/uapi/linux/perf_event.h"
struct perf_branch_entry {
 __u64 from;
 __u64 to;
 __u64 mispred:1,
  predicted:1,
  in_tx:1,
  abort:1,
  cycles:16,
  type:4,
  reserved:40;
};

union perf_sample_weight {
 __u64 full;

 struct {
  __u32 var1_dw;
  __u16 var2_w;
  __u16 var3_w;
 };
# 1386 "./include/uapi/linux/perf_event.h"
};
# 18 "./include/linux/perf_event.h" 2
# 1 "./include/uapi/linux/bpf_perf_event.h" 1
# 11 "./include/uapi/linux/bpf_perf_event.h"
# 1 "./arch/x86/include/generated/uapi/asm/bpf_perf_event.h" 1
# 1 "./include/uapi/asm-generic/bpf_perf_event.h" 1



# 1 "./include/linux/ptrace.h" 1
# 10 "./include/linux/ptrace.h"
# 1 "./include/linux/pid_namespace.h" 1
# 10 "./include/linux/pid_namespace.h"
# 1 "./include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "./include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct time_namespace *time_ns;
 struct time_namespace *time_ns_for_children;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 53 "./include/linux/nsproxy.h"
struct nsset {
 unsigned flags;
 struct nsproxy *nsproxy;
 struct fs_struct *fs;
 const struct cred *cred;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cred *nsset_cred(struct nsset *set)
{
 if (set->flags & 0x10000000)
  return (struct cred *)set->cred;

 return ((void *)0);
}
# 94 "./include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) nsproxy_cache_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 11 "./include/linux/pid_namespace.h" 2
# 1 "./include/linux/ns_common.h" 1






struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
 refcount_t count;
};
# 12 "./include/linux/pid_namespace.h" 2





struct fs_pin;

struct pid_namespace {
 struct idr idr;
 struct callback_head rcu;
 unsigned int pid_allocated;
 struct task_struct *child_reaper;
 struct kmem_cache *pid_cachep;
 unsigned int level;
 struct pid_namespace *parent;



 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 int reboot;
 struct ns_common ns;
} ;

extern struct pid_namespace init_pid_ns;
# 57 "./include/linux/pid_namespace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid_namespace *get_pid_ns(struct pid_namespace *ns)
{
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid_namespace *copy_pid_ns(unsigned long flags,
 struct user_namespace *user_ns, struct pid_namespace *ns)
{
 if (flags & 0x20000000)
  ns = ERR_PTR(-22);
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_pid_ns(struct pid_namespace *ns)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zap_pid_ns_processes(struct pid_namespace *ns)
{
 do { ({ asm volatile("306" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "306" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("307" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "307" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int reboot_pid_ns(struct pid_namespace *pid_ns, int cmd)
{
 return 0;
}


extern struct pid_namespace *task_active_pid_ns(struct task_struct *tsk);
void pidhash_init(void);
void pid_idr_init(void);
# 11 "./include/linux/ptrace.h" 2
# 1 "./include/uapi/linux/ptrace.h" 1
# 59 "./include/uapi/linux/ptrace.h"
struct ptrace_peeksiginfo_args {
 __u64 off;
 __u32 flags;
 __s32 nr;
};







struct seccomp_metadata {
 __u64 filter_off;
 __u64 flags;
};







struct ptrace_syscall_info {
 __u8 op;
 __u8 pad[3];
 __u32 arch;
 __u64 instruction_pointer;
 __u64 stack_pointer;
 union {
  struct {
   __u64 nr;
   __u64 args[6];
  } entry;
  struct {
   __s64 rval;
   __u8 is_error;
  } exit;
  struct {
   __u64 nr;
   __u64 args[6];
   __u32 ret_data;
  } seccomp;
 };
};



struct ptrace_rseq_configuration {
 __u64 rseq_abi_pointer;
 __u32 rseq_abi_size;
 __u32 signature;
 __u32 flags;
 __u32 pad;
};
# 12 "./include/linux/ptrace.h" 2



struct syscall_info {
 __u64 sp;
 struct seccomp_data data;
};

extern int ptrace_access_vm(struct task_struct *tsk, unsigned long addr,
       void *buf, int len, unsigned int gup_flags);
# 56 "./include/linux/ptrace.h"
extern long arch_ptrace(struct task_struct *child, long request,
   unsigned long addr, unsigned long data);
extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);
extern int ptrace_writedata(struct task_struct *tsk, char *src, unsigned long dst, int len);
extern void ptrace_disable(struct task_struct *);
extern int ptrace_request(struct task_struct *child, long request,
     unsigned long addr, unsigned long data);
extern void ptrace_notify(int exit_code);
extern void __ptrace_link(struct task_struct *child,
     struct task_struct *new_parent,
     const struct cred *ptracer_cred);
extern void __ptrace_unlink(struct task_struct *child);
extern void exit_ptrace(struct task_struct *tracer, struct list_head *dead);
# 95 "./include/linux/ptrace.h"
extern bool ptrace_may_access(struct task_struct *task, unsigned int mode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ptrace_reparented(struct task_struct *child)
{
 return !same_thread_group(child->real_parent, child->parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptrace_unlink(struct task_struct *child)
{
 if (__builtin_expect(!!(child->ptrace), 0))
  __ptrace_unlink(child);
}

int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
# 124 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *ptrace_parent(struct task_struct *task)
{
 if (__builtin_expect(!!(task->ptrace), 0))
  return ({ typeof(*(task->parent)) *________p1 = (typeof(*(task->parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_308(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((task->parent)) == sizeof(char) || sizeof((task->parent)) == sizeof(short) || sizeof((task->parent)) == sizeof(int) || sizeof((task->parent)) == sizeof(long)) || sizeof((task->parent)) == sizeof(long long))) __compiletime_assert_308(); } while (0); (*(const volatile typeof( _Generic(((task->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((task->parent)))) *)&((task->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(task->parent)) *)(________p1)); });
 return ((void *)0);
}
# 140 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ptrace_event_enabled(struct task_struct *task, int event)
{
 return task->ptrace & (1 << (3 + (event)));
}
# 155 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptrace_event(int event, unsigned long message)
{
 if (__builtin_expect(!!(ptrace_event_enabled(get_current(), event)), 0)) {
  get_current()->ptrace_message = message;
  ptrace_notify((event << 8) | 5);
 } else if (event == 4) {

  if ((get_current()->ptrace & (0x00000001|0x00010000)) == 0x00000001)
   send_sig(5, get_current(), 0);
 }
}
# 178 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptrace_event_pid(int event, struct pid *pid)
{






 unsigned long message = 0;
 struct pid_namespace *ns;

 rcu_read_lock();
 ns = task_active_pid_ns(({ typeof(*(get_current()->parent)) *________p1 = (typeof(*(get_current()->parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_309(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((get_current()->parent)) == sizeof(char) || sizeof((get_current()->parent)) == sizeof(short) || sizeof((get_current()->parent)) == sizeof(int) || sizeof((get_current()->parent)) == sizeof(long)) || sizeof((get_current()->parent)) == sizeof(long long))) __compiletime_assert_309(); } while (0); (*(const volatile typeof( _Generic(((get_current()->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((get_current()->parent)))) *)&((get_current()->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(get_current()->parent)) *)(________p1)); }));
 if (ns)
  message = pid_nr_ns(pid, ns);
 rcu_read_unlock();

 ptrace_event(event, message);
}
# 208 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptrace_init_task(struct task_struct *child, bool ptrace)
{
 INIT_LIST_HEAD(&child->ptrace_entry);
 INIT_LIST_HEAD(&child->ptraced);
 child->jobctl = 0;
 child->ptrace = 0;
 child->parent = child->real_parent;

 if (__builtin_expect(!!(ptrace), 0) && get_current()->ptrace) {
  child->ptrace = get_current()->ptrace;
  __ptrace_link(child, get_current()->parent, get_current()->ptracer_cred);

  if (child->ptrace & 0x00010000)
   task_set_jobctl_pending(child, (1UL << 19));
  else
   sigaddset(&child->pending.signal, 19);
 }
 else
  child->ptracer_cred = ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptrace_release_task(struct task_struct *task)
{
 do { if (__builtin_expect(!!(!list_empty(&task->ptraced)), 0)) do { ({ asm volatile("310" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "310" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("311" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "311" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 ptrace_unlink(task);
 do { if (__builtin_expect(!!(!list_empty(&task->ptrace_entry)), 0)) do { ({ asm volatile("312" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "312" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("313" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "313" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
}
# 313 "./include/linux/ptrace.h"
extern void user_enable_single_step(struct task_struct *);
extern void user_disable_single_step(struct task_struct *);
# 343 "./include/linux/ptrace.h"
extern void user_enable_block_step(struct task_struct *);



extern void user_single_step_report(struct pt_regs *regs);
# 413 "./include/linux/ptrace.h"
extern int task_current_syscall(struct task_struct *target, struct syscall_info *info);

extern void sigaction_compat_abi(struct k_sigaction *act, struct k_sigaction *oact);
# 5 "./include/uapi/asm-generic/bpf_perf_event.h" 2


typedef struct pt_regs bpf_user_pt_regs_t;
# 2 "./arch/x86/include/generated/uapi/asm/bpf_perf_event.h" 2
# 12 "./include/uapi/linux/bpf_perf_event.h" 2

struct bpf_perf_event_data {
 bpf_user_pt_regs_t regs;
 __u64 sample_period;
 __u64 addr;
};
# 19 "./include/linux/perf_event.h" 2






# 1 "./arch/x86/include/asm/perf_event.h" 1
# 113 "./arch/x86/include/asm/perf_event.h"
union cpuid10_eax {
 struct {
  unsigned int version_id:8;
  unsigned int num_counters:8;
  unsigned int bit_width:8;
  unsigned int mask_length:8;
 } split;
 unsigned int full;
};

union cpuid10_ebx {
 struct {
  unsigned int no_unhalted_core_cycles:1;
  unsigned int no_instructions_retired:1;
  unsigned int no_unhalted_reference_cycles:1;
  unsigned int no_llc_reference:1;
  unsigned int no_llc_misses:1;
  unsigned int no_branch_instruction_retired:1;
  unsigned int no_branch_misses_retired:1;
 } split;
 unsigned int full;
};

union cpuid10_edx {
 struct {
  unsigned int num_counters_fixed:5;
  unsigned int bit_width_fixed:8;
  unsigned int reserved1:2;
  unsigned int anythread_deprecated:1;
  unsigned int reserved2:16;
 } split;
 unsigned int full;
};




union cpuid28_eax {
 struct {

  unsigned int lbr_depth_mask:8;
  unsigned int reserved:22;

  unsigned int lbr_deep_c_reset:1;

  unsigned int lbr_lip:1;
 } split;
 unsigned int full;
};

union cpuid28_ebx {
 struct {

  unsigned int lbr_cpl:1;

  unsigned int lbr_filter:1;

  unsigned int lbr_call_stack:1;
 } split;
 unsigned int full;
};

union cpuid28_ecx {
 struct {

  unsigned int lbr_mispred:1;

  unsigned int lbr_timed_lbr:1;

  unsigned int lbr_br_type:1;
 } split;
 unsigned int full;
};

struct x86_pmu_capability {
 int version;
 int num_counters_gp;
 int num_counters_fixed;
 int bit_width_gp;
 int bit_width_fixed;
 unsigned int events_mask;
 int events_mask_len;
};
# 296 "./arch/x86/include/asm/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_metric_idx(int idx)
{
 return (unsigned)(idx - (32 + 16)) < 8;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_topdown_idx(int idx)
{
 return is_metric_idx(idx) || idx == (32 + 3);
}
# 345 "./arch/x86/include/asm/perf_event.h"
struct pebs_basic {
 u64 format_size;
 u64 ip;
 u64 applicable_counters;
 u64 tsc;
};

struct pebs_meminfo {
 u64 address;
 u64 aux;
 u64 latency;
 u64 tsx_tuning;
};

struct pebs_gprs {
 u64 flags, ip, ax, cx, dx, bx, sp, bp, si, di;
 u64 r8, r9, r10, r11, r12, r13, r14, r15;
};

struct pebs_xmm {
 u64 xmm[16*2];
};
# 424 "./arch/x86/include/asm/perf_event.h"
extern u32 get_ibs_caps(void);





extern void perf_events_lapic_init(void);
# 444 "./arch/x86/include/asm/perf_event.h"
struct pt_regs;
struct x86_perf_regs {
 struct pt_regs regs;
 u64 *xmm_regs;
};

extern unsigned long perf_instruction_pointer(struct pt_regs *regs);
extern unsigned long perf_misc_flags(struct pt_regs *regs);


# 1 "./arch/x86/include/asm/stacktrace.h" 1
# 13 "./arch/x86/include/asm/stacktrace.h"
# 1 "./arch/x86/include/asm/cpu_entry_area.h" 1







# 1 "./arch/x86/include/asm/intel_ds.h" 1
# 18 "./arch/x86/include/asm/intel_ds.h"
struct debug_store {
 u64 bts_buffer_base;
 u64 bts_index;
 u64 bts_absolute_maximum;
 u64 bts_interrupt_threshold;
 u64 pebs_buffer_base;
 u64 pebs_index;
 u64 pebs_absolute_maximum;
 u64 pebs_interrupt_threshold;
 u64 pebs_event_reset[8 + 4];
} __attribute__((__aligned__(((1UL) << 12))));

extern __attribute__((section(".data" "..page_aligned"))) __typeof__(struct debug_store) cpu_debug_store __attribute__((__aligned__(((1UL) << 12))));

struct debug_store_buffers {
 char bts_buffer[(((1UL) << 12) << 4)];
 char pebs_buffer[(((1UL) << 12) << 4)];
};
# 9 "./arch/x86/include/asm/cpu_entry_area.h" 2
# 36 "./arch/x86/include/asm/cpu_entry_area.h"
struct exception_stacks {
 char DF_stack_guard[0]; char DF_stack[(((1UL) << 12) << (1 + 0))]; char NMI_stack_guard[0]; char NMI_stack[(((1UL) << 12) << (1 + 0))]; char DB_stack_guard[0]; char DB_stack[(((1UL) << 12) << (1 + 0))]; char MCE_stack_guard[0]; char MCE_stack[(((1UL) << 12) << (1 + 0))]; char VC_stack_guard[0]; char VC_stack[0]; char VC2_stack_guard[0]; char VC2_stack[0]; char IST_top_guard[0];
};


struct cea_exception_stacks {
 char DF_stack_guard[((1UL) << 12)]; char DF_stack[(((1UL) << 12) << (1 + 0))]; char NMI_stack_guard[((1UL) << 12)]; char NMI_stack[(((1UL) << 12) << (1 + 0))]; char DB_stack_guard[((1UL) << 12)]; char DB_stack[(((1UL) << 12) << (1 + 0))]; char MCE_stack_guard[((1UL) << 12)]; char MCE_stack[(((1UL) << 12) << (1 + 0))]; char VC_stack_guard[((1UL) << 12)]; char VC_stack[(((1UL) << 12) << (1 + 0))]; char VC2_stack_guard[((1UL) << 12)]; char VC2_stack[(((1UL) << 12) << (1 + 0))]; char IST_top_guard[((1UL) << 12)];
};




enum exception_stack_ordering {
 ESTACK_DF,
 ESTACK_NMI,
 ESTACK_DB,
 ESTACK_MCE,
 ESTACK_VC,
 ESTACK_VC2,
 N_EXCEPTION_STACKS
};
# 90 "./arch/x86/include/asm/cpu_entry_area.h"
struct cpu_entry_area {
 char gdt[((1UL) << 12)];
# 101 "./arch/x86/include/asm/cpu_entry_area.h"
 struct entry_stack_page entry_stack_page;
# 112 "./arch/x86/include/asm/cpu_entry_area.h"
 struct tss_struct tss;





 struct cea_exception_stacks estacks;





 struct debug_store cpu_debug_store;




 struct debug_store_buffers cpu_debug_buffers;
};







extern __attribute__((section(".data" ""))) __typeof__(struct cpu_entry_area *) cpu_entry_area;
extern __attribute__((section(".data" ""))) __typeof__(struct cea_exception_stacks *) cea_exception_stacks;

extern void setup_cpu_entry_areas(void);
extern void cea_set_pte(void *cea_vaddr, phys_addr_t pa, pgprot_t flags);

extern struct cpu_entry_area *get_cpu_entry_area(int cpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct entry_stack *cpu_entry_stack(int cpu)
{
 return &get_cpu_entry_area(cpu)->entry_stack_page.stack;
}
# 14 "./arch/x86/include/asm/stacktrace.h" 2
# 1 "./arch/x86/include/asm/switch_to.h" 1




# 1 "./include/linux/sched/task_stack.h" 1
# 10 "./include/linux/sched/task_stack.h"
# 1 "./include/uapi/linux/magic.h" 1
# 11 "./include/linux/sched/task_stack.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *task_stack_page(const struct task_struct *task)
{
 return task->stack;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *end_of_stack(const struct task_struct *task)
{



 return task->stack;

}
# 66 "./include/linux/sched/task_stack.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *try_get_task_stack(struct task_struct *tsk)
{
 return refcount_inc_not_zero(&tsk->stack_refcount) ?
  task_stack_page(tsk) : ((void *)0);
}

extern void put_task_stack(struct task_struct *tsk);
# 85 "./include/linux/sched/task_stack.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int object_is_on_stack(const void *obj)
{
 void *stack = task_stack_page(get_current());

 return (obj >= stack) && (obj < (stack + (((1UL) << 12) << (2 + 0))));
}

extern void thread_stack_cache_init(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long stack_not_used(struct task_struct *p)
{
 unsigned long *n = end_of_stack(p);

 do {



  n++;

 } while (!*n);




 return (unsigned long)n - (unsigned long)end_of_stack(p);

}

extern void set_task_stack_end_magic(struct task_struct *tsk);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & ((((1UL) << 12) << (2 + 0))-sizeof(void*)));
}
# 6 "./arch/x86/include/asm/switch_to.h" 2

struct task_struct;

struct task_struct *__switch_to_asm(struct task_struct *prev,
        struct task_struct *next);

          struct task_struct *__switch_to(struct task_struct *prev,
       struct task_struct *next);

           void ret_from_fork(void);





struct inactive_task_frame {

 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;





 unsigned long bx;





 unsigned long bp;
 unsigned long ret_addr;
};

struct fork_frame {
 struct inactive_task_frame frame;
 struct pt_regs regs;
};
# 65 "./arch/x86/include/asm/switch_to.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_task_stack(struct task_struct *task)
{
# 75 "./arch/x86/include/asm/switch_to.h"
 if (( __builtin_constant_p((__builtin_constant_p(( 8*32+16)) && ( (((( 8*32+16))>>5)==(0) && (1UL<<((( 8*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 8*32+16))>>5)==(1) && (1UL<<((( 8*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 8*32+16))>>5)==(2) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(3) && (1UL<<((( 8*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 8*32+16))>>5)==(4) && (1UL<<((( 8*32+16))&31) & (0) )) || (((( 8*32+16))>>5)==(5) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(6) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(7) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(8) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(9) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(10) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(11) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(12) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(13) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(14) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(15) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(16) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(17) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(18) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(19) && (1UL<<((( 8*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 8*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(( 8*32+16)) && ( (((( 8*32+16))>>5)==(0) && (1UL<<((( 8*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 8*32+16))>>5)==(1) && (1UL<<((( 8*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 8*32+16))>>5)==(2) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(3) && (1UL<<((( 8*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 8*32+16))>>5)==(4) && (1UL<<((( 8*32+16))&31) & (0) )) || (((( 8*32+16))>>5)==(5) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(6) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(7) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(8) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(9) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(10) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(11) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(12) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(13) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(14) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(15) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(16) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(17) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(18) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(19) && (1UL<<((( 8*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 8*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(( 8*32+16)) ))
  load_sp0(((unsigned long)(({ unsigned long __ptr = (unsigned long)task_stack_page(task); __ptr += (((1UL) << 12) << (2 + 0)) - 0; ((struct pt_regs *)__ptr) - 1; }) + 1)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kthread_frame_init(struct inactive_task_frame *frame,
          unsigned long fun, unsigned long arg)
{
 frame->bx = fun;



 frame->r12 = arg;

}
# 15 "./arch/x86/include/asm/stacktrace.h" 2

enum stack_type {
 STACK_TYPE_UNKNOWN,
 STACK_TYPE_TASK,
 STACK_TYPE_IRQ,
 STACK_TYPE_SOFTIRQ,
 STACK_TYPE_ENTRY,
 STACK_TYPE_EXCEPTION,
 STACK_TYPE_EXCEPTION_LAST = STACK_TYPE_EXCEPTION + N_EXCEPTION_STACKS-1,
};

struct stack_info {
 enum stack_type type;
 unsigned long *begin, *end, *next_sp;
};

bool in_task_stack(unsigned long *stack, struct task_struct *task,
     struct stack_info *info);

bool in_entry_stack(unsigned long *stack, struct stack_info *info);

int get_stack_info(unsigned long *stack, struct task_struct *task,
     struct stack_info *info, unsigned long *visit_mask);
bool get_stack_info_noinstr(unsigned long *stack, struct task_struct *task,
       struct stack_info *info);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
bool get_stack_guard_info(unsigned long *stack, struct stack_info *info)
{

 if (get_stack_info_noinstr(stack, get_current(), info))
  return false;

 return get_stack_info_noinstr((void *)stack + ((1UL) << 12), get_current(), info);
}

const char *stack_type_name(enum stack_type type);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool on_stack(struct stack_info *info, void *addr, size_t len)
{
 void *begin = info->begin;
 void *end = info->end;

 return (info->type != STACK_TYPE_UNKNOWN &&
  addr >= begin && addr < end &&
  addr + len > begin && addr + len <= end);
}
# 70 "./arch/x86/include/asm/stacktrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *
get_frame_pointer(struct task_struct *task, struct pt_regs *regs)
{
 if (regs)
  return (unsigned long *)regs->bp;

 if (task == get_current())
  return __builtin_frame_address(0);

 return &((struct inactive_task_frame *)task->thread.sp)->bp;
}
# 89 "./arch/x86/include/asm/stacktrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *
get_stack_pointer(struct task_struct *task, struct pt_regs *regs)
{
 if (regs)
  return (unsigned long *)regs->sp;

 if (task == get_current())
  return __builtin_frame_address(0);

 return (unsigned long *)task->thread.sp;
}


struct stack_frame {
 struct stack_frame *next_frame;
 unsigned long return_address;
};

struct stack_frame_ia32 {
    u32 next_frame;
    u32 return_address;
};

void show_opcodes(struct pt_regs *regs, const char *loglvl);
void show_ip(struct pt_regs *regs, const char *loglvl);
# 455 "./arch/x86/include/asm/perf_event.h" 2
# 467 "./arch/x86/include/asm/perf_event.h"
struct perf_guest_switch_msr {
 unsigned msr;
 u64 host, guest;
};

struct x86_pmu_lbr {
 unsigned int nr;
 unsigned int from;
 unsigned int to;
 unsigned int info;
};

extern void perf_get_x86_pmu_capability(struct x86_pmu_capability *cap);
extern void perf_check_microcode(void);
extern void perf_clear_dirty_counters(void);
extern int x86_perf_rdpmc_index(struct perf_event *event);
# 494 "./arch/x86/include/asm/perf_event.h"
extern struct perf_guest_switch_msr *perf_guest_get_msrs(int *nr);
extern int x86_perf_get_lbr(struct x86_pmu_lbr *lbr);
# 505 "./arch/x86/include/asm/perf_event.h"
 extern void intel_pt_handle_vmx(int on);
# 514 "./arch/x86/include/asm/perf_event.h"
 extern void amd_pmu_enable_virt(void);
 extern void amd_pmu_disable_virt(void);
# 26 "./include/linux/perf_event.h" 2
# 1 "./arch/x86/include/generated/asm/local64.h" 1
# 1 "./include/asm-generic/local64.h" 1





# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/local64.h" 2
# 22 "./include/asm-generic/local64.h"
# 1 "./arch/x86/include/asm/local.h" 1
# 10 "./arch/x86/include/asm/local.h"
typedef struct {
 atomic_long_t a;
} local_t;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_inc(local_t *l)
{
 asm volatile(" " "incq" " " "%0"
       : "+m" (l->a.counter));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_dec(local_t *l)
{
 asm volatile(" " "decq" " " "%0"
       : "+m" (l->a.counter));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_add(long i, local_t *l)
{
 asm volatile(" " "addq" " " "%1,%0"
       : "+m" (l->a.counter)
       : "ir" (i));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_sub(long i, local_t *l)
{
 asm volatile(" " "subq" " " "%1,%0"
       : "+m" (l->a.counter)
       : "ir" (i));
}
# 54 "./arch/x86/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool local_sub_and_test(long i, local_t *l)
{
 return ({ bool c; asm volatile (" " "subq" " " " %[val], " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (l->a.counter), "=@cc" "e" (c) : [val] "er" (i) : "memory"); c; });
}
# 67 "./arch/x86/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool local_dec_and_test(local_t *l)
{
 return ({ bool c; asm volatile (" " "decq" " " " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (l->a.counter), "=@cc" "e" (c) : : "memory"); c; });
}
# 80 "./arch/x86/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool local_inc_and_test(local_t *l)
{
 return ({ bool c; asm volatile (" " "incq" " " " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (l->a.counter), "=@cc" "e" (c) : : "memory"); c; });
}
# 94 "./arch/x86/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool local_add_negative(long i, local_t *l)
{
 return ({ bool c; asm volatile (" " "addq" " " " %[val], " "%[var]" "\n\t/* output condition code " "s" "*/\n" : [var] "+m" (l->a.counter), "=@cc" "s" (c) : [val] "er" (i) : "memory"); c; });
}
# 106 "./arch/x86/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long local_add_return(long i, local_t *l)
{
 long __i = i;
 asm volatile(" " "xaddq" " " "%0, %1;"
       : "+r" (i), "+m" (l->a.counter)
       : : "memory");
 return i + __i;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long local_sub_return(long i, local_t *l)
{
 return local_add_return(-i, l);
}
# 23 "./include/asm-generic/local64.h" 2

typedef struct {
 local_t a;
} local64_t;
# 2 "./arch/x86/include/generated/asm/local64.h" 2
# 27 "./include/linux/perf_event.h" 2


struct perf_guest_info_callbacks {
 int (*is_in_guest)(void);
 int (*is_user_mode)(void);
 unsigned long (*get_guest_ip)(void);
 void (*handle_intel_pt_intr)(void);
};


# 1 "./arch/x86/include/asm/hw_breakpoint.h" 1




# 1 "./arch/x86/include/uapi/asm/hw_breakpoint.h" 1
# 6 "./arch/x86/include/asm/hw_breakpoint.h" 2








struct arch_hw_breakpoint {
 unsigned long address;
 unsigned long mask;
 u8 len;
 u8 type;
};

# 1 "./include/linux/kdebug.h" 1




# 1 "./arch/x86/include/asm/kdebug.h" 1






struct pt_regs;


enum die_val {
 DIE_OOPS = 1,
 DIE_INT3,
 DIE_DEBUG,
 DIE_PANIC,
 DIE_NMI,
 DIE_DIE,
 DIE_KERNELDEBUG,
 DIE_TRAP,
 DIE_GPF,
 DIE_CALL,
 DIE_PAGE_FAULT,
 DIE_NMIUNKNOWN,
};

enum show_regs_mode {
 SHOW_REGS_SHORT,




 SHOW_REGS_USER,
 SHOW_REGS_ALL
};

extern void die(const char *, struct pt_regs *,long);
void die_addr(const char *str, struct pt_regs *regs, long err, long gp_addr);
extern int __attribute__((__warn_unused_result__)) __die(const char *, struct pt_regs *, long);
extern void show_stack_regs(struct pt_regs *regs);
extern void __show_regs(struct pt_regs *regs, enum show_regs_mode,
   const char *log_lvl);
extern void show_iret_regs(struct pt_regs *regs, const char *log_lvl);
extern unsigned long oops_begin(void);
extern void oops_end(unsigned long, struct pt_regs *, int signr);
# 6 "./include/linux/kdebug.h" 2

struct notifier_block;

struct die_args {
 struct pt_regs *regs;
 const char *str;
 long err;
 int trapnr;
 int signr;
};

int register_die_notifier(struct notifier_block *nb);
int unregister_die_notifier(struct notifier_block *nb);

int notify_die(enum die_val val, const char *str,
        struct pt_regs *regs, long err, int trap, int sig);
# 22 "./arch/x86/include/asm/hw_breakpoint.h" 2
# 47 "./arch/x86/include/asm/hw_breakpoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hw_breakpoint_slots(int type)
{
 return 4;
}

struct perf_event_attr;
struct perf_event;
struct pmu;

extern int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_arch_parse(struct perf_event *bp,
        const struct perf_event_attr *attr,
        struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
        unsigned long val, void *data);


int arch_install_hw_breakpoint(struct perf_event *bp);
void arch_uninstall_hw_breakpoint(struct perf_event *bp);
void hw_breakpoint_pmu_read(struct perf_event *bp);
void hw_breakpoint_pmu_unthrottle(struct perf_event *bp);

extern void
arch_fill_perf_breakpoint(struct perf_event *bp);

unsigned long encode_dr7(int drnum, unsigned int len, unsigned int type);
int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

extern int arch_bp_generic_fields(int x86_len, int x86_type,
      int *gen_len, int *gen_type);

extern struct pmu perf_ops_bp;
# 38 "./include/linux/perf_event.h" 2
# 49 "./include/linux/perf_event.h"
# 1 "./include/linux/ftrace.h" 1
# 10 "./include/linux/ftrace.h"
# 1 "./include/linux/trace_recursion.h" 1
# 22 "./include/linux/trace_recursion.h"
enum {

 TRACE_FTRACE_BIT,
 TRACE_FTRACE_NMI_BIT,
 TRACE_FTRACE_IRQ_BIT,
 TRACE_FTRACE_SIRQ_BIT,
 TRACE_FTRACE_TRANSITION_BIT,


 TRACE_INTERNAL_BIT,
 TRACE_INTERNAL_NMI_BIT,
 TRACE_INTERNAL_IRQ_BIT,
 TRACE_INTERNAL_SIRQ_BIT,
 TRACE_INTERNAL_TRANSITION_BIT,

 TRACE_BRANCH_BIT,







 TRACE_IRQ_BIT,


 TRACE_GRAPH_BIT,
# 66 "./include/linux/trace_recursion.h"
 TRACE_GRAPH_DEPTH_START_BIT,
 TRACE_GRAPH_DEPTH_END_BIT,






 TRACE_GRAPH_NOTRACE_BIT,


 TRACE_RECORD_RECURSION_BIT,
};
# 109 "./include/linux/trace_recursion.h"
enum {
 TRACE_CTX_NMI,
 TRACE_CTX_IRQ,
 TRACE_CTX_SOFTIRQ,
 TRACE_CTX_NORMAL,
 TRACE_CTX_TRANSITION,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int trace_get_context_bit(void)
{
 unsigned char bit = interrupt_context_level();

 return TRACE_CTX_NORMAL - bit;
}
# 141 "./include/linux/trace_recursion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int trace_test_and_set_recursion(unsigned long ip, unsigned long pip,
       int start)
{
 unsigned int val = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_314(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->trace_recursion) == sizeof(char) || sizeof(get_current()->trace_recursion) == sizeof(short) || sizeof(get_current()->trace_recursion) == sizeof(int) || sizeof(get_current()->trace_recursion) == sizeof(long)) || sizeof(get_current()->trace_recursion) == sizeof(long long))) __compiletime_assert_314(); } while (0); (*(const volatile typeof( _Generic((get_current()->trace_recursion), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (get_current()->trace_recursion))) *)&(get_current()->trace_recursion)); });
 int bit;

 bit = trace_get_context_bit() + start;
 if (__builtin_expect(!!(val & (1 << bit)), 0)) {
# 157 "./include/linux/trace_recursion.h"
  bit = TRACE_CTX_TRANSITION + start;
  if (val & (1 << bit)) {
   do { } while (0);
   return -1;
  }
 }

 val |= 1 << bit;
 get_current()->trace_recursion = val;
 __asm__ __volatile__("": : :"memory");

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 return bit;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void trace_clear_recursion(int bit)
{
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { (get_current())->trace_recursion &= ~(1<<(bit)); } while (0);
}
# 192 "./include/linux/trace_recursion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int ftrace_test_recursion_trylock(unsigned long ip,
        unsigned long parent_ip)
{
 return trace_test_and_set_recursion(ip, parent_ip, TRACE_FTRACE_BIT);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ftrace_test_recursion_unlock(int bit)
{
 trace_clear_recursion(bit);
}
# 11 "./include/linux/ftrace.h" 2
# 1 "./include/linux/trace_clock.h" 1
# 16 "./include/linux/trace_clock.h"
# 1 "./arch/x86/include/asm/trace_clock.h" 1
# 10 "./arch/x86/include/asm/trace_clock.h"
extern u64 __attribute__((no_instrument_function)) trace_clock_x86_tsc(void);
# 17 "./include/linux/trace_clock.h" 2

extern u64 __attribute__((no_instrument_function)) trace_clock_local(void);
extern u64 __attribute__((no_instrument_function)) trace_clock(void);
extern u64 __attribute__((no_instrument_function)) trace_clock_jiffies(void);
extern u64 __attribute__((no_instrument_function)) trace_clock_global(void);
extern u64 __attribute__((no_instrument_function)) trace_clock_counter(void);
# 12 "./include/linux/ftrace.h" 2
# 1 "./include/linux/kallsyms.h" 1
# 10 "./include/linux/kallsyms.h"
# 1 "./include/linux/buildid.h" 1








int build_id_parse(struct vm_area_struct *vma, unsigned char *build_id,
     __u32 *size);
int build_id_parse_buf(const void *buf, unsigned char *build_id, u32 buf_size);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_vmlinux_build_id(void) { }
# 11 "./include/linux/kallsyms.h" 2



# 1 "./include/linux/module.h" 1
# 17 "./include/linux/module.h"
# 1 "./include/linux/kmod.h" 1








# 1 "./include/linux/umh.h" 1
# 11 "./include/linux/umh.h"
struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} ;

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 10 "./include/linux/kmod.h" 2
# 20 "./include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((__format__(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 18 "./include/linux/module.h" 2

# 1 "./include/linux/elf.h" 1





# 1 "./arch/x86/include/asm/elf.h" 1
# 11 "./arch/x86/include/asm/elf.h"
# 1 "./arch/x86/include/asm/user.h" 1







# 1 "./arch/x86/include/asm/user_64.h" 1




# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 6 "./arch/x86/include/asm/user_64.h" 2
# 51 "./arch/x86/include/asm/user_64.h"
struct user_i387_struct {
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;

 unsigned short fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 padding[24];
};




struct user_regs_struct {
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;
 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;
 unsigned long orig_ax;
 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;
 unsigned long fs_base;
 unsigned long gs_base;
 unsigned long ds;
 unsigned long es;
 unsigned long fs;
 unsigned long gs;
};





struct user {


  struct user_regs_struct regs;

  int u_fpvalid;

  int pad0;
  struct user_i387_struct i387;

  unsigned long int u_tsize;
  unsigned long int u_dsize;
  unsigned long int u_ssize;
  unsigned long start_code;
  unsigned long start_stack;



  long int signal;
  int reserved;
  int pad1;
  unsigned long u_ar0;

  struct user_i387_struct *u_fpstate;
  unsigned long magic;
  char u_comm[32];
  unsigned long u_debugreg[8];
  unsigned long error_code;
  unsigned long fault_address;
};
# 9 "./arch/x86/include/asm/user.h" 2


# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
# 12 "./arch/x86/include/asm/user.h" 2

struct user_ymmh_regs {

 __u32 ymmh_space[64];
};

struct user_xstate_header {
 __u64 xfeatures;
 __u64 reserved1[2];
 __u64 reserved2[5];
};
# 54 "./arch/x86/include/asm/user.h"
struct user_xstateregs {
 struct {
  __u64 fpx_space[58];
  __u64 xstate_fx_sw[6];
 } i387;
 struct user_xstate_header header;
 struct user_ymmh_regs ymmh;

};
# 12 "./arch/x86/include/asm/elf.h" 2

# 1 "./arch/x86/include/asm/fsgsbase.h" 1
# 17 "./arch/x86/include/asm/fsgsbase.h"
extern unsigned long x86_fsbase_read_task(struct task_struct *task);
extern unsigned long x86_gsbase_read_task(struct task_struct *task);
extern void x86_fsbase_write_task(struct task_struct *task, unsigned long fsbase);
extern void x86_gsbase_write_task(struct task_struct *task, unsigned long gsbase);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long rdfsbase(void)
{
 unsigned long fsbase;

 asm volatile("rdfsbase %0" : "=r" (fsbase) :: "memory");

 return fsbase;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long rdgsbase(void)
{
 unsigned long gsbase;

 asm volatile("rdgsbase %0" : "=r" (gsbase) :: "memory");

 return gsbase;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void wrfsbase(unsigned long fsbase)
{
 asm volatile("wrfsbase %0" :: "r" (fsbase) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void wrgsbase(unsigned long gsbase)
{
 asm volatile("wrgsbase %0" :: "r" (gsbase) : "memory");
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long x86_fsbase_read_cpu(void)
{
 unsigned long fsbase;

 if ((__builtin_constant_p(( 9*32+ 0)) && ( (((( 9*32+ 0))>>5)==(0) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+ 0))>>5)==(1) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+ 0))>>5)==(2) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(3) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+ 0))>>5)==(4) && (1UL<<((( 9*32+ 0))&31) & (0) )) || (((( 9*32+ 0))>>5)==(5) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(6) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(7) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(8) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(9) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(10) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(11) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(12) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(13) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(14) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(15) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(16) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(17) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(18) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(19) && (1UL<<((( 9*32+ 0))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+ 0), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  fsbase = rdfsbase();
 else
  ((fsbase) = native_read_msr((0xc0000100)));

 return fsbase;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void x86_fsbase_write_cpu(unsigned long fsbase)
{
 if ((__builtin_constant_p(( 9*32+ 0)) && ( (((( 9*32+ 0))>>5)==(0) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+ 0))>>5)==(1) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+ 0))>>5)==(2) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(3) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+ 0))>>5)==(4) && (1UL<<((( 9*32+ 0))&31) & (0) )) || (((( 9*32+ 0))>>5)==(5) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(6) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(7) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(8) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(9) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(10) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(11) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(12) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(13) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(14) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(15) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(16) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(17) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(18) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(19) && (1UL<<((( 9*32+ 0))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+ 0), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  wrfsbase(fsbase);
 else
  wrmsrl(0xc0000100, fsbase);
}

extern unsigned long x86_gsbase_read_cpu_inactive(void);
extern void x86_gsbase_write_cpu_inactive(unsigned long gsbase);
extern unsigned long x86_fsgsbase_read_task(struct task_struct *task,
         unsigned short selector);
# 14 "./arch/x86/include/asm/elf.h" 2

typedef unsigned long elf_greg_t;


typedef elf_greg_t elf_gregset_t[(sizeof(struct user_regs_struct) / sizeof(elf_greg_t))];

typedef struct user_i387_struct elf_fpregset_t;
# 75 "./arch/x86/include/asm/elf.h"
# 1 "./arch/x86/include/asm/vdso.h" 1
# 13 "./arch/x86/include/asm/vdso.h"
struct vdso_image {
 void *data;
 unsigned long size;

 unsigned long alt, alt_len;
 unsigned long extable_base, extable_len;
 const void *extable;

 long sym_vvar_start;

 long sym_vvar_page;
 long sym_pvclock_page;
 long sym_hvclock_page;
 long sym_timens_page;
 long sym_VDSO32_NOTE_MASK;
 long sym___kernel_sigreturn;
 long sym___kernel_rt_sigreturn;
 long sym___kernel_vsyscall;
 long sym_int80_landing_pad;
 long sym_vdso32_sigreturn_landing_pad;
 long sym_vdso32_rt_sigreturn_landing_pad;
};


extern const struct vdso_image vdso_image_64;
# 48 "./arch/x86/include/asm/vdso.h"
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_vdso_image(const struct vdso_image *image);

extern int map_vdso_once(const struct vdso_image *image, unsigned long addr);

extern bool fixup_vdso_exception(struct pt_regs *regs, int trapnr,
     unsigned long error_code,
     unsigned long fault_addr);
# 76 "./arch/x86/include/asm/elf.h" 2


extern unsigned int vdso64_enabled;
# 170 "./arch/x86/include/asm/elf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void elf_common_init(struct thread_struct *t,
       struct pt_regs *regs, const u16 ds)
{

                 regs->bx = regs->cx = regs->dx = 0;
 regs->si = regs->di = regs->bp = 0;
 regs->r8 = regs->r9 = regs->r10 = regs->r11 = 0;
 regs->r12 = regs->r13 = regs->r14 = regs->r15 = 0;
 t->fsbase = t->gsbase = 0;
 t->fsindex = t->gsindex = 0;
 t->ds = t->es = ds;
}







void compat_start_thread(struct pt_regs *regs, u32 new_ip, u32 new_sp, bool x32);



void set_personality_ia32(bool);
# 239 "./arch/x86/include/asm/elf.h"
extern void set_personality_64bit(void);
extern unsigned int sysctl_vsyscall32;
extern int force_personality32;
# 262 "./arch/x86/include/asm/elf.h"
extern u32 elf_hwcap2;
# 307 "./arch/x86/include/asm/elf.h"
struct task_struct;
# 321 "./arch/x86/include/asm/elf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmap_is_ia32(void)
{
 return 0 ||
        (0 &&
  test_ti_thread_flag(((struct thread_info *)get_current()), 29));
}

extern unsigned long task_size_32bit(void);
extern unsigned long task_size_64bit(int full_addr_space);
extern unsigned long get_mmap_base(int is_legacy);
extern bool mmap_address_hint_valid(unsigned long addr, unsigned long len);
extern unsigned long get_sigframe_size(void);
# 384 "./arch/x86/include/asm/elf.h"
struct linux_binprm;


extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
extern int compat_arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp, bool x32);




extern bool arch_syscall_is_vdso_sigreturn(struct pt_regs *regs);


enum align_flags {
 ALIGN_VA_32 = ((((1UL))) << (0)),
 ALIGN_VA_64 = ((((1UL))) << (1)),
};

struct va_alignment {
 int flags;
 unsigned long mask;
 unsigned long bits;
} __attribute__((__aligned__((1 << (6)))));

extern struct va_alignment va_align;
extern unsigned long align_vdso_addr(unsigned long);
# 7 "./include/linux/elf.h" 2
# 1 "./include/uapi/linux/elf.h" 1





# 1 "./include/uapi/linux/elf-em.h" 1
# 7 "./include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 139 "./include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 162 "./include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 304 "./include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 440 "./include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 8 "./include/linux/elf.h" 2
# 52 "./include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 65 "./include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 81 "./include/linux/elf.h"
struct gnu_property {
 u32 pr_type;
 u32 pr_datasz;
};

struct arch_elf_state;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_parse_elf_property(u32 type, const void *data,
       size_t datasz, bool compat,
       struct arch_elf_state *arch)
{
 return 0;
}
# 104 "./include/linux/elf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_elf_adjust_prot(int prot,
           const struct arch_elf_state *state,
           bool has_interp, bool is_interp)
{
 return prot;
}
# 20 "./include/linux/module.h" 2


# 1 "./include/linux/moduleparam.h" 1
# 36 "./include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 304 "./include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 372 "./include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 382 "./include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 411 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);
int param_set_uint_minmax(const char *val, const struct kernel_param *kp,
  unsigned int min, unsigned int max);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_hexint;
extern int param_set_hexint(const char *val, const struct kernel_param *kp);
extern int param_get_hexint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 526 "./include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 587 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 23 "./include/linux/module.h" 2


# 1 "./include/linux/rbtree_latch.h" 1
# 40 "./include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_latch_t seq;
 struct rb_root tree[2];
};
# 64 "./include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); _Static_assert(__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) || __builtin_types_compatible_p(typeof(*(node)), typeof(void)), "pointer type mismatch in container_of()"); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_315(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ltr->tree[idx].rb_node) == sizeof(char) || sizeof(ltr->tree[idx].rb_node) == sizeof(short) || sizeof(ltr->tree[idx].rb_node) == sizeof(int) || sizeof(ltr->tree[idx].rb_node) == sizeof(long)) || sizeof(ltr->tree[idx].rb_node) == sizeof(long long))) __compiletime_assert_315(); } while (0); (*(const volatile typeof( _Generic((ltr->tree[idx].rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ltr->tree[idx].rb_node))) *)&(ltr->tree[idx].rb_node)); }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_316(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_left) == sizeof(char) || sizeof(node->rb_left) == sizeof(short) || sizeof(node->rb_left) == sizeof(int) || sizeof(node->rb_left) == sizeof(long)) || sizeof(node->rb_left) == sizeof(long long))) __compiletime_assert_316(); } while (0); (*(const volatile typeof( _Generic((node->rb_left), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_left))) *)&(node->rb_left)); }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_317(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_right) == sizeof(char) || sizeof(node->rb_right) == sizeof(short) || sizeof(node->rb_right) == sizeof(int) || sizeof(node->rb_right) == sizeof(long)) || sizeof(node->rb_right) == sizeof(long long))) __compiletime_assert_317(); } while (0); (*(const volatile typeof( _Generic((node->rb_right), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_right))) *)&(node->rb_right)); }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 143 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 170 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 199 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_latch_retry(&root->seq, seq));

 return node;
}
# 26 "./include/linux/module.h" 2
# 1 "./include/linux/error-injection.h" 1





# 1 "./include/asm-generic/error-injection.h" 1





enum {
 EI_ETYPE_NONE,
 EI_ETYPE_NULL,
 EI_ETYPE_ERRNO,
 EI_ETYPE_ERRNO_NULL,
 EI_ETYPE_TRUE,
};

struct error_injection_entry {
 unsigned long addr;
 int etype;
};

struct pt_regs;
# 38 "./include/asm-generic/error-injection.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void override_function_with_return(struct pt_regs *regs) { }
# 7 "./include/linux/error-injection.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool within_error_injection_list(unsigned long addr)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_injectable_error_type(unsigned long addr)
{
 return EI_ETYPE_NONE;
}
# 27 "./include/linux/module.h" 2



# 1 "./include/linux/cfi.h" 1
# 31 "./include/linux/module.h" 2


# 1 "./arch/x86/include/asm/module.h" 1




# 1 "./include/asm-generic/module.h" 1
# 6 "./arch/x86/include/asm/module.h" 2


struct mod_arch_specific {





};
# 34 "./include/linux/module.h" 2



struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
};

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 295 "./include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 348 "./include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
 char *typetab;
};
# 364 "./include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];







 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;







 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
 bool using_gplonly_symbols;



 bool sig_ok;


 bool async_probe_requested;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << (6)))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;
# 439 "./include/linux/module.h"
 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;






 void *noinstr_text_start;
 unsigned int noinstr_text_size;


 unsigned int num_tracepoints;
 tracepoint_ptr_t *tracepoints_ptrs;


 unsigned int num_srcu_structs;
 struct srcu_struct **srcu_struct_ptrs;
# 482 "./include/linux/module.h"
 unsigned int num_trace_bprintk_fmt;
 const char **trace_bprintk_fmt_start;


 struct trace_event_call **trace_events;
 unsigned int num_trace_events;
 struct trace_eval_map **trace_evals;
 unsigned int num_trace_evals;
# 502 "./include/linux/module.h"
 int num_static_call_sites;
 struct static_call_site *static_call_sites;
# 521 "./include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;
# 541 "./include/linux/module.h"
} __attribute__((__aligned__((1 << (6))))) ;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
{
 return sym->st_value;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 642 "./include/linux/module.h"
void *dereference_module_function_descriptor(struct module *mod, void *ptr);




const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, const unsigned char **modbuildid,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_livepatch_module(struct module *mod)
{
 return false;
}


bool is_module_sig_enforced(void);
void set_module_sig_enforced(void);
# 823 "./include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 841 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void module_bug_finalize(const Elf64_Ehdr *hdr,
     const Elf64_Shdr *sechdrs,
     struct module *mod)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void module_bug_cleanup(struct module *mod) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool module_sig_ok(struct module *module)
{
 return module->sig_ok;
}







int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);
# 15 "./include/linux/kallsyms.h" 2
# 24 "./include/linux/kallsyms.h"
struct cred;
struct module;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_kernel_text(unsigned long addr)
{
 if (__is_kernel_text(addr))
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_kernel(unsigned long addr)
{
 if (__is_kernel(addr))
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_ksym_addr(unsigned long addr)
{
 if (1)
  return is_kernel(addr);

 return is_kernel_text(addr) || is_kernel_inittext(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *dereference_symbol_descriptor(void *ptr)
{
# 65 "./include/linux/kallsyms.h"
 return ptr;
}

int kallsyms_on_each_symbol(int (*fn)(void *, const char *, struct module *,
          unsigned long),
       void *data);



unsigned long kallsyms_lookup_name(const char *name);

extern int kallsyms_lookup_size_offset(unsigned long addr,
      unsigned long *symbolsize,
      unsigned long *offset);


const char *kallsyms_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, char *namebuf);


extern int sprint_symbol(char *buffer, unsigned long address);
extern int sprint_symbol_build_id(char *buffer, unsigned long address);
extern int sprint_symbol_no_offset(char *buffer, unsigned long address);
extern int sprint_backtrace(char *buffer, unsigned long address);
extern int sprint_backtrace_build_id(char *buffer, unsigned long address);

int lookup_symbol_name(unsigned long addr, char *symname);
int lookup_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);


extern bool kallsyms_show_value(const struct cred *cred);
# 168 "./include/linux/kallsyms.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void print_ip_sym(const char *loglvl, unsigned long ip)
{
 ({ do {} while (0); _printk("%s[<%px>] %pS\n", loglvl, (void *) ip, (void *) ip); });
}
# 13 "./include/linux/ftrace.h" 2
# 22 "./include/linux/ftrace.h"
# 1 "./arch/x86/include/asm/ftrace.h" 1
# 85 "./arch/x86/include/asm/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_ftrace_ops_ro(void) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_syscall_match_sym_name(const char *sym, const char *name)
{




 return !strcmp(sym + 3, name + 3) ||
  (!strncmp(sym, "__x64_", 6) && !strcmp(sym + 9, name + 3)) ||
  (!strncmp(sym, "__ia32_", 7) && !strcmp(sym + 10, name + 3)) ||
  (!strncmp(sym, "__do_sys", 8) && !strcmp(sym + 8, name + 3));
}
# 23 "./include/linux/ftrace.h" 2
# 56 "./include/linux/ftrace.h"
void trace_init(void);
void early_trace_init(void);





struct module;
struct ftrace_hash;
struct ftrace_direct_func;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *
ftrace_mod_address_lookup(unsigned long addr, unsigned long *size,
     unsigned long *off, char **modname, char *sym)
{
 return ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ftrace_mod_get_kallsym(unsigned int symnum, unsigned long *value,
      char *type, char *name,
      char *module_name, int *exported)
{
 return -1;
}
# 303 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_kill(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_free_init_mem(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_free_mem(struct module *mod, void *start, void *end) { }


struct ftrace_func_entry {
 struct hlist_node hlist;
 unsigned long ip;
 unsigned long direct;
};

struct dyn_ftrace;
# 332 "./include/linux/ftrace.h"
struct ftrace_ops;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_ftrace_direct(unsigned long ip, unsigned long addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_ftrace_direct(unsigned long ip, unsigned long addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int modify_ftrace_direct(unsigned long ip,
           unsigned long old_addr, unsigned long new_addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct ftrace_direct_func *ftrace_find_direct_func(unsigned long addr)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ftrace_modify_direct_caller(struct ftrace_func_entry *entry,
           struct dyn_ftrace *rec,
           unsigned long old_addr,
           unsigned long new_addr)
{
 return -19;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long ftrace_find_rec_direct(unsigned long ip)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_ftrace_direct_multi(struct ftrace_ops *ops, unsigned long addr)
{
 return -19;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_ftrace_direct_multi(struct ftrace_ops *ops, unsigned long addr)
{
 return -19;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int modify_ftrace_direct_multi(struct ftrace_ops *ops, unsigned long addr)
{
 return -19;
}
# 436 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void stack_tracer_disable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void stack_tracer_enable(void) { }
# 782 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int skip_trace(unsigned long ip) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_disable_daemon(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_enable_daemon(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_module_init(struct module *mod) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_module_enable(struct module *mod) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_release_mod(struct module *mod) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ftrace_text_reserved(const void *start, const void *end)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long ftrace_location(unsigned long ip)
{
 return 0;
}
# 810 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t ftrace_filter_write(struct file *file, const char *ubuf,
       size_t cnt, loff_t *ppos) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t ftrace_notrace_write(struct file *file, const char *ubuf,
        size_t cnt, loff_t *ppos) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
ftrace_regex_release(struct inode *inode, struct file *file) { return -19; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_ftrace_trampoline(unsigned long addr)
{
 return false;
}
# 833 "./include/linux/ftrace.h"
void ftrace_kill(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tracer_disable(void)
{



}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __ftrace_enabled_save(void)
{





 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __ftrace_enabled_restore(int enabled)
{



}
# 887 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_lock_parent_ip(void)
{
 unsigned long addr = ((unsigned long)__builtin_return_address(0));

 if (!in_lock_functions(addr))
  return addr;
 addr = ((unsigned long)__builtin_return_address(1));
 if (!in_lock_functions(addr))
  return addr;
 return ((unsigned long)__builtin_return_address(2));
}
# 919 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_init(void) { }







struct ftrace_graph_ent {
 unsigned long func;
 int depth;
} __attribute__((__packed__));






struct ftrace_graph_ret {
 unsigned long func;
 int depth;

 unsigned int overrun;
 unsigned long long calltime;
 unsigned long long rettime;
} __attribute__((__packed__));


typedef void (*trace_func_graph_ret_t)(struct ftrace_graph_ret *);
typedef int (*trace_func_graph_ent_t)(struct ftrace_graph_ent *);

extern int ftrace_graph_entry_stub(struct ftrace_graph_ent *trace);
# 1033 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_graph_init_task(struct task_struct *t) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_graph_exit_task(struct task_struct *t) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_graph_init_idle_task(struct task_struct *t, int cpu) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
ftrace_graph_ret_addr(struct task_struct *task, int *idx, unsigned long ret,
        unsigned long *retp)
{
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pause_graph_tracing(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unpause_graph_tracing(void) { }





enum {
 TSK_TRACE_FL_TRACE_BIT = 0,
 TSK_TRACE_FL_GRAPH_BIT = 1,
};
enum {
 TSK_TRACE_FL_TRACE = 1 << TSK_TRACE_FL_TRACE_BIT,
 TSK_TRACE_FL_GRAPH = 1 << TSK_TRACE_FL_GRAPH_BIT,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_tsk_trace_trace(struct task_struct *tsk)
{
 set_bit(TSK_TRACE_FL_TRACE_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_trace_trace(struct task_struct *tsk)
{
 clear_bit(TSK_TRACE_FL_TRACE_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_tsk_trace_trace(struct task_struct *tsk)
{
 return tsk->trace & TSK_TRACE_FL_TRACE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_tsk_trace_graph(struct task_struct *tsk)
{
 set_bit(TSK_TRACE_FL_GRAPH_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_trace_graph(struct task_struct *tsk)
{
 clear_bit(TSK_TRACE_FL_GRAPH_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_tsk_trace_graph(struct task_struct *tsk)
{
 return tsk->trace & TSK_TRACE_FL_GRAPH;
}

enum ftrace_dump_mode;

extern enum ftrace_dump_mode ftrace_dump_on_oops;
extern int tracepoint_printk;

extern void disable_trace_on_warning(void);
extern int __disable_trace_on_warning;

int tracepoint_printk_sysctl(struct ctl_table *table, int write,
        void *buffer, size_t *lenp, loff_t *ppos);







unsigned long arch_syscall_addr(int nr);
# 50 "./include/linux/perf_event.h" 2


# 1 "./include/linux/static_key.h" 1
# 53 "./include/linux/perf_event.h" 2
# 1 "./include/linux/jump_label_ratelimit.h" 1
# 64 "./include/linux/jump_label_ratelimit.h"
struct static_key_deferred {
 struct static_key key;
};
struct static_key_true_deferred {
 struct static_key_true key;
};
struct static_key_false_deferred {
 struct static_key_false key;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_slow_dec_deferred(struct static_key_deferred *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); ({ if (0) ({ do {} while (0); _printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
 static_key_slow_dec(&key->key);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_deferred_flush(void *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); ({ if (0) ({ do {} while (0); _printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
jump_label_rate_limit(struct static_key_deferred *key,
  unsigned long rl)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); ({ if (0) ({ do {} while (0); _printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
}
# 54 "./include/linux/perf_event.h" 2


# 1 "./include/linux/perf_regs.h" 1






struct perf_regs {
 __u64 abi;
 struct pt_regs *regs;
};


# 1 "./arch/x86/include/uapi/asm/perf_regs.h" 1




enum perf_event_x86_regs {
 PERF_REG_X86_AX,
 PERF_REG_X86_BX,
 PERF_REG_X86_CX,
 PERF_REG_X86_DX,
 PERF_REG_X86_SI,
 PERF_REG_X86_DI,
 PERF_REG_X86_BP,
 PERF_REG_X86_SP,
 PERF_REG_X86_IP,
 PERF_REG_X86_FLAGS,
 PERF_REG_X86_CS,
 PERF_REG_X86_SS,
 PERF_REG_X86_DS,
 PERF_REG_X86_ES,
 PERF_REG_X86_FS,
 PERF_REG_X86_GS,
 PERF_REG_X86_R8,
 PERF_REG_X86_R9,
 PERF_REG_X86_R10,
 PERF_REG_X86_R11,
 PERF_REG_X86_R12,
 PERF_REG_X86_R13,
 PERF_REG_X86_R14,
 PERF_REG_X86_R15,

 PERF_REG_X86_32_MAX = PERF_REG_X86_GS + 1,
 PERF_REG_X86_64_MAX = PERF_REG_X86_R15 + 1,


 PERF_REG_X86_XMM0 = 32,
 PERF_REG_X86_XMM1 = 34,
 PERF_REG_X86_XMM2 = 36,
 PERF_REG_X86_XMM3 = 38,
 PERF_REG_X86_XMM4 = 40,
 PERF_REG_X86_XMM5 = 42,
 PERF_REG_X86_XMM6 = 44,
 PERF_REG_X86_XMM7 = 46,
 PERF_REG_X86_XMM8 = 48,
 PERF_REG_X86_XMM9 = 50,
 PERF_REG_X86_XMM10 = 52,
 PERF_REG_X86_XMM11 = 54,
 PERF_REG_X86_XMM12 = 56,
 PERF_REG_X86_XMM13 = 58,
 PERF_REG_X86_XMM14 = 60,
 PERF_REG_X86_XMM15 = 62,


 PERF_REG_X86_XMM_MAX = PERF_REG_X86_XMM15 + 2,
};
# 14 "./include/linux/perf_regs.h" 2





u64 perf_reg_value(struct pt_regs *regs, int idx);
int perf_reg_validate(u64 mask);
u64 perf_reg_abi(struct task_struct *task);
void perf_get_regs_user(struct perf_regs *regs_user,
   struct pt_regs *regs);
# 57 "./include/linux/perf_event.h" 2
# 1 "./include/linux/cgroup.h" 1
# 16 "./include/linux/cgroup.h"
# 1 "./include/uapi/linux/cgroupstats.h" 1
# 20 "./include/uapi/linux/cgroupstats.h"
# 1 "./include/uapi/linux/taskstats.h" 1
# 41 "./include/uapi/linux/taskstats.h"
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 72 "./include/uapi/linux/taskstats.h"
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;

 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 132 "./include/uapi/linux/taskstats.h"
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;


 __u64 thrashing_count;
 __u64 thrashing_delay_total;


 __u64 ac_btime64;
};
# 184 "./include/uapi/linux/taskstats.h"
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 21 "./include/uapi/linux/cgroupstats.h" 2
# 32 "./include/uapi/linux/cgroupstats.h"
struct cgroupstats {
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
# 17 "./include/linux/cgroup.h" 2

# 1 "./include/linux/seq_file.h" 1






# 1 "./include/linux/string_helpers.h" 1





# 1 "./include/linux/ctype.h" 1
# 21 "./include/linux/ctype.h"
extern const unsigned char _ctype[];
# 43 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int isdigit(int c)
{
 return '0' <= c && c <= '9';
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned char __tolower(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x01)) != 0))
  c -= 'A'-'a';
 return c;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned char __toupper(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x02)) != 0))
  c -= 'a'-'A';
 return c;
}
# 70 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char _tolower(const char c)
{
 return c | 0x20;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int isodigit(const char c)
{
 return c >= '0' && c <= '7';
}
# 7 "./include/linux/string_helpers.h" 2



struct file;
struct task_struct;



enum string_size_units {
 STRING_UNITS_10,
 STRING_UNITS_2,
};

void string_get_size(u64 size, u64 blk_size, enum string_size_units units,
       char *buf, int len);
# 32 "./include/linux/string_helpers.h"
int string_unescape(char *src, char *dst, size_t size, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int string_unescape_inplace(char *buf, unsigned int flags)
{
 return string_unescape(buf, buf, 0, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int string_unescape_any(char *src, char *dst, size_t size)
{
 return string_unescape(src, dst, size, (((((1UL))) << (0)) | ((((1UL))) << (1)) | ((((1UL))) << (2)) | ((((1UL))) << (3))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int string_unescape_any_inplace(char *buf)
{
 return string_unescape_any(buf, buf, 0);
}
# 64 "./include/linux/string_helpers.h"
int string_escape_mem(const char *src, size_t isz, char *dst, size_t osz,
  unsigned int flags, const char *only);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int string_escape_mem_any_np(const char *src, size_t isz,
  char *dst, size_t osz, const char *only)
{
 return string_escape_mem(src, isz, dst, osz, ((((((1UL))) << (0)) | ((((1UL))) << (3)) | ((((1UL))) << (1)) | ((((1UL))) << (2))) | ((((1UL))) << (4))), only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int string_escape_str(const char *src, char *dst, size_t sz,
  unsigned int flags, const char *only)
{
 return string_escape_mem(src, strlen(src), dst, sz, flags, only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int string_escape_str_any_np(const char *src, char *dst,
  size_t sz, const char *only)
{
 return string_escape_str(src, dst, sz, ((((((1UL))) << (0)) | ((((1UL))) << (3)) | ((((1UL))) << (1)) | ((((1UL))) << (2))) | ((((1UL))) << (4))), only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void string_upper(char *dst, const char *src)
{
 do {
  *dst++ = __toupper(*src);
 } while (*src++);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void string_lower(char *dst, const char *src)
{
 do {
  *dst++ = __tolower(*src);
 } while (*src++);
}

char *kstrdup_quotable(const char *src, gfp_t gfp);
char *kstrdup_quotable_cmdline(struct task_struct *task, gfp_t gfp);
char *kstrdup_quotable_file(struct file *file, gfp_t gfp);

void kfree_strarray(char **array, size_t n);
# 8 "./include/linux/seq_file.h" 2







struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 51 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 64 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_expect(!!(m->count > m->size), 0)) do { ({ asm volatile("318" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "318" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("319" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "319" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 84 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_expect(!!(m->count + num > m->size), 0)) do { ({ asm volatile("320" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "320" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("321" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "321" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
  m->count += num;
 }
}
# 102 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
ssize_t seq_read_iter(struct kiocb *iocb, struct iov_iter *iter);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((__format__(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((__format__(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull_width(struct seq_file *m, const char *delimiter,
          unsigned long long num, unsigned int width);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_put_hex_ll(struct seq_file *m, const char *delimiter,
      unsigned long long v, unsigned int width);

void seq_escape_mem(struct seq_file *m, const char *src, size_t len,
      unsigned int flags, const char *esc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_escape_str(struct seq_file *m, const char *src,
      unsigned int flags, const char *esc)
{
 seq_escape_mem(m, src, strlen(src), flags, esc);
}
# 150 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_escape(struct seq_file *m, const char *s, const char *esc)
{
 seq_escape_str(m, s, ((((1UL))) << (3)), esc);
}

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);


void seq_bprintf(struct seq_file *m, const char *f, const u32 *binary);
# 222 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{



 extern struct user_namespace init_user_ns;
 return &init_user_ns;

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 272 "./include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);

void seq_file_init(void);
# 19 "./include/linux/cgroup.h" 2





# 1 "./include/linux/user_namespace.h" 1
# 17 "./include/linux/user_namespace.h"
struct uid_gid_extent {
 u32 first;
 u32 lower_first;
 u32 count;
};

struct uid_gid_map {
 u32 nr_extents;
 union {
  struct uid_gid_extent extent[5];
  struct {
   struct uid_gid_extent *forward;
   struct uid_gid_extent *reverse;
  };
 };
};





struct ucounts;

enum ucount_type {
 UCOUNT_USER_NAMESPACES,
 UCOUNT_PID_NAMESPACES,
 UCOUNT_UTS_NAMESPACES,
 UCOUNT_IPC_NAMESPACES,
 UCOUNT_NET_NAMESPACES,
 UCOUNT_MNT_NAMESPACES,
 UCOUNT_CGROUP_NAMESPACES,
 UCOUNT_TIME_NAMESPACES,

 UCOUNT_INOTIFY_INSTANCES,
 UCOUNT_INOTIFY_WATCHES,





 UCOUNT_RLIMIT_NPROC,
 UCOUNT_RLIMIT_MSGQUEUE,
 UCOUNT_RLIMIT_SIGPENDING,
 UCOUNT_RLIMIT_MEMLOCK,
 UCOUNT_COUNTS,
};



struct user_namespace {
 struct uid_gid_map uid_map;
 struct uid_gid_map gid_map;
 struct uid_gid_map projid_map;
 struct user_namespace *parent;
 int level;
 kuid_t owner;
 kgid_t group;
 struct ns_common ns;
 unsigned long flags;


 bool parent_could_setfcap;







 struct list_head keyring_name_list;
 struct key *user_keyring_register;
 struct rw_semaphore keyring_sem;




 struct key *persistent_keyring_register;

 struct work_struct work;

 struct ctl_table_set set;
 struct ctl_table_header *sysctls;

 struct ucounts *ucounts;
 long ucount_max[UCOUNT_COUNTS];
} ;

struct ucounts {
 struct hlist_node node;
 struct user_namespace *ns;
 kuid_t uid;
 atomic_t count;
 atomic_long_t ucount[UCOUNT_COUNTS];
};

extern struct user_namespace init_user_ns;
extern struct ucounts init_ucounts;

bool setup_userns_sysctls(struct user_namespace *ns);
void retire_userns_sysctls(struct user_namespace *ns);
struct ucounts *inc_ucount(struct user_namespace *ns, kuid_t uid, enum ucount_type type);
void dec_ucount(struct ucounts *ucounts, enum ucount_type type);
struct ucounts *alloc_ucounts(struct user_namespace *ns, kuid_t uid);
struct ucounts * __attribute__((__warn_unused_result__)) get_ucounts(struct ucounts *ucounts);
void put_ucounts(struct ucounts *ucounts);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long get_ucounts_value(struct ucounts *ucounts, enum ucount_type type)
{
 return atomic_long_read(&ucounts->ucount[type]);
}

long inc_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
bool dec_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
long inc_rlimit_get_ucounts(struct ucounts *ucounts, enum ucount_type type);
void dec_rlimit_put_ucounts(struct ucounts *ucounts, enum ucount_type type);
bool is_ucounts_overlimit(struct ucounts *ucounts, enum ucount_type type, unsigned long max);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_rlimit_ucount_max(struct user_namespace *ns,
  enum ucount_type type, unsigned long max)
{
 ns->ucount_max[type] = max <= ((long)(~0UL >> 1)) ? max : ((long)(~0UL >> 1));
}
# 175 "./include/linux/user_namespace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *get_user_ns(struct user_namespace *ns)
{
 return &init_user_ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int create_user_ns(struct cred *new)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unshare_userns(unsigned long unshare_flags,
     struct cred **new_cred)
{
 if (unshare_flags & 0x10000000)
  return -22;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_user_ns(struct user_namespace *ns)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool userns_may_setgroups(const struct user_namespace *ns)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool in_userns(const struct user_namespace *ancestor,
        const struct user_namespace *child)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool current_in_userns(const struct user_namespace *target_ns)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct ns_common *ns_get_owner(struct ns_common *ns)
{
 return ERR_PTR(-1);
}
# 25 "./include/linux/cgroup.h" 2

# 1 "./include/linux/kernel_stat.h" 1
# 20 "./include/linux/kernel_stat.h"
enum cpu_usage_stat {
 CPUTIME_USER,
 CPUTIME_NICE,
 CPUTIME_SYSTEM,
 CPUTIME_SOFTIRQ,
 CPUTIME_IRQ,
 CPUTIME_IDLE,
 CPUTIME_IOWAIT,
 CPUTIME_STEAL,
 CPUTIME_GUEST,
 CPUTIME_GUEST_NICE,
 NR_STATS,
};

struct kernel_cpustat {
 u64 cpustat[NR_STATS];
};

struct kernel_stat {
 unsigned long irqs_sum;
 unsigned int softirqs[NR_SOFTIRQS];
};

extern __attribute__((section(".data" ""))) __typeof__(struct kernel_stat) kstat;
extern __attribute__((section(".data" ""))) __typeof__(struct kernel_cpustat) kernel_cpustat;







extern unsigned long long nr_context_switches(void);

extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);
extern void kstat_incr_irq_this_cpu(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kstat_incr_softirqs_this_cpu(unsigned int irq)
{
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(kstat.softirqs[irq])) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((kstat.softirqs[irq])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "b " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "b " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((kstat.softirqs[irq])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq])) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((kstat.softirqs[irq])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "w " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "w " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((kstat.softirqs[irq])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((kstat.softirqs[irq])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "l " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "l " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((kstat.softirqs[irq])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq])) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((kstat.softirqs[irq])) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "q " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else if (pao_ID__ == -1) ({ asm ("dec" "q " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq]))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((kstat.softirqs[irq])) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm ("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstat.softirqs[irq])) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int kstat_softirqs_cpu(unsigned int irq, int cpu)
{
       return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(kstat))) *)(&(kstat)); }); })).softirqs[irq];
}




extern unsigned int kstat_irqs_usr(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int kstat_cpu_irqs_sum(unsigned int cpu)
{
 return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(kstat))) *)(&(kstat)); }); })).irqs_sum;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 kcpustat_field(struct kernel_cpustat *kcpustat,
     enum cpu_usage_stat usage, int cpu)
{
 return kcpustat->cpustat[usage];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcpustat_cpu_fetch(struct kernel_cpustat *dst, int cpu)
{
 *dst = (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(kernel_cpustat)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(kernel_cpustat))) *)(&(kernel_cpustat)); }); }));
}



extern void account_user_time(struct task_struct *, u64);
extern void account_guest_time(struct task_struct *, u64);
extern void account_system_time(struct task_struct *, int, u64);
extern void account_system_index_time(struct task_struct *, u64,
          enum cpu_usage_stat);
extern void account_steal_time(u64);
extern void account_idle_time(u64);
extern u64 get_idle_time(struct kernel_cpustat *kcs, int cpu);







extern void account_process_tick(struct task_struct *, int user);


extern void account_idle_ticks(unsigned long ticks);
# 27 "./include/linux/cgroup.h" 2

# 1 "./include/linux/cgroup-defs.h" 1
# 20 "./include/linux/cgroup-defs.h"
# 1 "./include/linux/u64_stats_sync.h" 1
# 68 "./include/linux/u64_stats_sync.h"
struct u64_stats_sync {



};


# 1 "./arch/x86/include/generated/asm/local64.h" 1
# 76 "./include/linux/u64_stats_sync.h" 2

typedef struct {
 local64_t v;
} u64_stats_t ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 u64_stats_read(const u64_stats_t *p)
{
 return atomic_long_read(&(&(&p->v)->a)->a);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void u64_stats_set(u64_stats_t *p, u64 val)
{
 atomic_long_set(&((&(&p->v)->a))->a, ((val)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void u64_stats_add(u64_stats_t *p, unsigned long val)
{
 local_add((val),(&(&p->v)->a));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void u64_stats_inc(u64_stats_t *p)
{
 local_inc(&(&p->v)->a);
}
# 131 "./include/linux/u64_stats_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void u64_stats_init(struct u64_stats_sync *syncp)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
u64_stats_update_begin_irqsave(struct u64_stats_sync *syncp)
{
 unsigned long flags = 0;





 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
u64_stats_update_end_irqrestore(struct u64_stats_sync *syncp,
    unsigned long flags)
{




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return false;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
          unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}
# 21 "./include/linux/cgroup-defs.h" 2

# 1 "./include/linux/bpf-cgroup.h" 1




# 1 "./include/linux/bpf.h" 1






# 1 "./include/uapi/linux/bpf.h" 1
# 12 "./include/uapi/linux/bpf.h"
# 1 "./include/uapi/linux/bpf_common.h" 1
# 13 "./include/uapi/linux/bpf.h" 2
# 53 "./include/uapi/linux/bpf.h"
enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};




struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};

struct bpf_cgroup_storage_key {
 __u64 cgroup_inode_id;
 __u32 attach_type;
};

union bpf_iter_link_info {
 struct {
  __u32 map_fd;
 } map;
};
# 838 "./include/uapi/linux/bpf.h"
enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_RUN = BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
 BPF_PROG_QUERY,
 BPF_RAW_TRACEPOINT_OPEN,
 BPF_BTF_LOAD,
 BPF_BTF_GET_FD_BY_ID,
 BPF_TASK_FD_QUERY,
 BPF_MAP_LOOKUP_AND_DELETE_ELEM,
 BPF_MAP_FREEZE,
 BPF_BTF_GET_NEXT_ID,
 BPF_MAP_LOOKUP_BATCH,
 BPF_MAP_LOOKUP_AND_DELETE_BATCH,
 BPF_MAP_UPDATE_BATCH,
 BPF_MAP_DELETE_BATCH,
 BPF_LINK_CREATE,
 BPF_LINK_UPDATE,
 BPF_LINK_GET_FD_BY_ID,
 BPF_LINK_GET_NEXT_ID,
 BPF_ENABLE_STATS,
 BPF_ITER_CREATE,
 BPF_LINK_DETACH,
 BPF_PROG_BIND_MAP,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
 BPF_MAP_TYPE_CPUMAP,
 BPF_MAP_TYPE_XSKMAP,
 BPF_MAP_TYPE_SOCKHASH,
 BPF_MAP_TYPE_CGROUP_STORAGE,
 BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
 BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
 BPF_MAP_TYPE_QUEUE,
 BPF_MAP_TYPE_STACK,
 BPF_MAP_TYPE_SK_STORAGE,
 BPF_MAP_TYPE_DEVMAP_HASH,
 BPF_MAP_TYPE_STRUCT_OPS,
 BPF_MAP_TYPE_RINGBUF,
 BPF_MAP_TYPE_INODE_STORAGE,
 BPF_MAP_TYPE_TASK_STORAGE,
 BPF_MAP_TYPE_BLOOM_FILTER,
};
# 920 "./include/uapi/linux/bpf.h"
enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
 BPF_PROG_TYPE_CGROUP_DEVICE,
 BPF_PROG_TYPE_SK_MSG,
 BPF_PROG_TYPE_RAW_TRACEPOINT,
 BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
 BPF_PROG_TYPE_LWT_SEG6LOCAL,
 BPF_PROG_TYPE_LIRC_MODE2,
 BPF_PROG_TYPE_SK_REUSEPORT,
 BPF_PROG_TYPE_FLOW_DISSECTOR,
 BPF_PROG_TYPE_CGROUP_SYSCTL,
 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
 BPF_PROG_TYPE_CGROUP_SOCKOPT,
 BPF_PROG_TYPE_TRACING,
 BPF_PROG_TYPE_STRUCT_OPS,
 BPF_PROG_TYPE_EXT,
 BPF_PROG_TYPE_LSM,
 BPF_PROG_TYPE_SK_LOOKUP,
 BPF_PROG_TYPE_SYSCALL,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 BPF_CGROUP_DEVICE,
 BPF_SK_MSG_VERDICT,
 BPF_CGROUP_INET4_BIND,
 BPF_CGROUP_INET6_BIND,
 BPF_CGROUP_INET4_CONNECT,
 BPF_CGROUP_INET6_CONNECT,
 BPF_CGROUP_INET4_POST_BIND,
 BPF_CGROUP_INET6_POST_BIND,
 BPF_CGROUP_UDP4_SENDMSG,
 BPF_CGROUP_UDP6_SENDMSG,
 BPF_LIRC_MODE2,
 BPF_FLOW_DISSECTOR,
 BPF_CGROUP_SYSCTL,
 BPF_CGROUP_UDP4_RECVMSG,
 BPF_CGROUP_UDP6_RECVMSG,
 BPF_CGROUP_GETSOCKOPT,
 BPF_CGROUP_SETSOCKOPT,
 BPF_TRACE_RAW_TP,
 BPF_TRACE_FENTRY,
 BPF_TRACE_FEXIT,
 BPF_MODIFY_RETURN,
 BPF_LSM_MAC,
 BPF_TRACE_ITER,
 BPF_CGROUP_INET4_GETPEERNAME,
 BPF_CGROUP_INET6_GETPEERNAME,
 BPF_CGROUP_INET4_GETSOCKNAME,
 BPF_CGROUP_INET6_GETSOCKNAME,
 BPF_XDP_DEVMAP,
 BPF_CGROUP_INET_SOCK_RELEASE,
 BPF_XDP_CPUMAP,
 BPF_SK_LOOKUP,
 BPF_XDP,
 BPF_SK_SKB_VERDICT,
 BPF_SK_REUSEPORT_SELECT,
 BPF_SK_REUSEPORT_SELECT_OR_MIGRATE,
 BPF_PERF_EVENT,
 __MAX_BPF_ATTACH_TYPE
};



enum bpf_link_type {
 BPF_LINK_TYPE_UNSPEC = 0,
 BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
 BPF_LINK_TYPE_TRACING = 2,
 BPF_LINK_TYPE_CGROUP = 3,
 BPF_LINK_TYPE_ITER = 4,
 BPF_LINK_TYPE_NETNS = 5,
 BPF_LINK_TYPE_XDP = 6,
 BPF_LINK_TYPE_PERF_EVENT = 7,

 MAX_BPF_LINK_TYPE,
};
# 1169 "./include/uapi/linux/bpf.h"
enum {
 BPF_ANY = 0,
 BPF_NOEXIST = 1,
 BPF_EXIST = 2,
 BPF_F_LOCK = 4,
};


enum {
 BPF_F_NO_PREALLOC = (1U << 0),






 BPF_F_NO_COMMON_LRU = (1U << 1),

 BPF_F_NUMA_NODE = (1U << 2),


 BPF_F_RDONLY = (1U << 3),
 BPF_F_WRONLY = (1U << 4),


 BPF_F_STACK_BUILD_ID = (1U << 5),


 BPF_F_ZERO_SEED = (1U << 6),


 BPF_F_RDONLY_PROG = (1U << 7),
 BPF_F_WRONLY_PROG = (1U << 8),


 BPF_F_CLONE = (1U << 9),


 BPF_F_MMAPABLE = (1U << 10),


 BPF_F_PRESERVE_ELEMS = (1U << 11),


 BPF_F_INNER_MAP = (1U << 12),
};
# 1230 "./include/uapi/linux/bpf.h"
enum bpf_stats_type {

 BPF_STATS_RUN_TIME = 0,
};

enum bpf_stack_build_id_status {

 BPF_STACK_BUILD_ID_EMPTY = 0,

 BPF_STACK_BUILD_ID_VALID = 1,

 BPF_STACK_BUILD_ID_IP = 2,
};


struct bpf_stack_build_id {
 __s32 status;
 unsigned char build_id[20];
 union {
  __u64 offset;
  __u64 ip;
 };
};



union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


  char map_name[16U];
  __u32 map_ifindex;
  __u32 btf_fd;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
  __u32 btf_vmlinux_value_type_id;
# 1284 "./include/uapi/linux/bpf.h"
  __u64 map_extra;
 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u64 __attribute__((aligned(8))) in_batch;


  __u64 __attribute__((aligned(8))) out_batch;
  __u64 __attribute__((aligned(8))) keys;
  __u64 __attribute__((aligned(8))) values;
  __u32 count;




  __u32 map_fd;
  __u64 elem_flags;
  __u64 flags;
 } batch;

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
  char prog_name[16U];
  __u32 prog_ifindex;




  __u32 expected_attach_type;
  __u32 prog_btf_fd;
  __u32 func_info_rec_size;
  __u64 __attribute__((aligned(8))) func_info;
  __u32 func_info_cnt;
  __u32 line_info_rec_size;
  __u64 __attribute__((aligned(8))) line_info;
  __u32 line_info_cnt;
  __u32 attach_btf_id;
  union {

   __u32 attach_prog_fd;

   __u32 attach_btf_obj_fd;
  };
  __u32 :32;
  __u64 __attribute__((aligned(8))) fd_array;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
  __u32 replace_bpf_fd;



 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;



  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
  __u32 ctx_size_in;
  __u32 ctx_size_out;



  __u64 __attribute__((aligned(8))) ctx_in;
  __u64 __attribute__((aligned(8))) ctx_out;
  __u32 flags;
  __u32 cpu;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
   __u32 btf_id;
   __u32 link_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;

 struct {
  __u32 target_fd;
  __u32 attach_type;
  __u32 query_flags;
  __u32 attach_flags;
  __u64 __attribute__((aligned(8))) prog_ids;
  __u32 prog_cnt;
 } query;

 struct {
  __u64 name;
  __u32 prog_fd;
 } raw_tracepoint;

 struct {
  __u64 __attribute__((aligned(8))) btf;
  __u64 __attribute__((aligned(8))) btf_log_buf;
  __u32 btf_size;
  __u32 btf_log_size;
  __u32 btf_log_level;
 };

 struct {
  __u32 pid;
  __u32 fd;
  __u32 flags;
  __u32 buf_len;
  __u64 __attribute__((aligned(8))) buf;




  __u32 prog_id;
  __u32 fd_type;
  __u64 probe_offset;
  __u64 probe_addr;
 } task_fd_query;

 struct {
  __u32 prog_fd;
  union {
   __u32 target_fd;
   __u32 target_ifindex;
  };
  __u32 attach_type;
  __u32 flags;
  union {
   __u32 target_btf_id;
   struct {
    __u64 __attribute__((aligned(8))) iter_info;
    __u32 iter_info_len;
   };
   struct {




    __u64 bpf_cookie;
   } perf_event;
  };
 } link_create;

 struct {
  __u32 link_fd;

  __u32 new_prog_fd;
  __u32 flags;


  __u32 old_prog_fd;
 } link_update;

 struct {
  __u32 link_fd;
 } link_detach;

 struct {
  __u32 type;
 } enable_stats;

 struct {
  __u32 link_fd;
  __u32 flags;
 } iter_create;

 struct {
  __u32 prog_fd;
  __u32 map_fd;
  __u32 flags;
 } prog_bind_map;

} __attribute__((aligned(8)));
# 5129 "./include/uapi/linux/bpf.h"
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update, BPF_FUNC_xdp_adjust_meta, BPF_FUNC_perf_event_read_value, BPF_FUNC_perf_prog_read_value, BPF_FUNC_getsockopt, BPF_FUNC_override_return, BPF_FUNC_sock_ops_cb_flags_set, BPF_FUNC_msg_redirect_map, BPF_FUNC_msg_apply_bytes, BPF_FUNC_msg_cork_bytes, BPF_FUNC_msg_pull_data, BPF_FUNC_bind, BPF_FUNC_xdp_adjust_tail, BPF_FUNC_skb_get_xfrm_state, BPF_FUNC_get_stack, BPF_FUNC_skb_load_bytes_relative, BPF_FUNC_fib_lookup, BPF_FUNC_sock_hash_update, BPF_FUNC_msg_redirect_hash, BPF_FUNC_sk_redirect_hash, BPF_FUNC_lwt_push_encap, BPF_FUNC_lwt_seg6_store_bytes, BPF_FUNC_lwt_seg6_adjust_srh, BPF_FUNC_lwt_seg6_action, BPF_FUNC_rc_repeat, BPF_FUNC_rc_keydown, BPF_FUNC_skb_cgroup_id, BPF_FUNC_get_current_cgroup_id, BPF_FUNC_get_local_storage, BPF_FUNC_sk_select_reuseport, BPF_FUNC_skb_ancestor_cgroup_id, BPF_FUNC_sk_lookup_tcp, BPF_FUNC_sk_lookup_udp, BPF_FUNC_sk_release, BPF_FUNC_map_push_elem, BPF_FUNC_map_pop_elem, BPF_FUNC_map_peek_elem, BPF_FUNC_msg_push_data, BPF_FUNC_msg_pop_data, BPF_FUNC_rc_pointer_rel, BPF_FUNC_spin_lock, BPF_FUNC_spin_unlock, BPF_FUNC_sk_fullsock, BPF_FUNC_tcp_sock, BPF_FUNC_skb_ecn_set_ce, BPF_FUNC_get_listener_sock, BPF_FUNC_skc_lookup_tcp, BPF_FUNC_tcp_check_syncookie, BPF_FUNC_sysctl_get_name, BPF_FUNC_sysctl_get_current_value, BPF_FUNC_sysctl_get_new_value, BPF_FUNC_sysctl_set_new_value, BPF_FUNC_strtol, BPF_FUNC_strtoul, BPF_FUNC_sk_storage_get, BPF_FUNC_sk_storage_delete, BPF_FUNC_send_signal, BPF_FUNC_tcp_gen_syncookie, BPF_FUNC_skb_output, BPF_FUNC_probe_read_user, BPF_FUNC_probe_read_kernel, BPF_FUNC_probe_read_user_str, BPF_FUNC_probe_read_kernel_str, BPF_FUNC_tcp_send_ack, BPF_FUNC_send_signal_thread, BPF_FUNC_jiffies64, BPF_FUNC_read_branch_records, BPF_FUNC_get_ns_current_pid_tgid, BPF_FUNC_xdp_output, BPF_FUNC_get_netns_cookie, BPF_FUNC_get_current_ancestor_cgroup_id, BPF_FUNC_sk_assign, BPF_FUNC_ktime_get_boot_ns, BPF_FUNC_seq_printf, BPF_FUNC_seq_write, BPF_FUNC_sk_cgroup_id, BPF_FUNC_sk_ancestor_cgroup_id, BPF_FUNC_ringbuf_output, BPF_FUNC_ringbuf_reserve, BPF_FUNC_ringbuf_submit, BPF_FUNC_ringbuf_discard, BPF_FUNC_ringbuf_query, BPF_FUNC_csum_level, BPF_FUNC_skc_to_tcp6_sock, BPF_FUNC_skc_to_tcp_sock, BPF_FUNC_skc_to_tcp_timewait_sock, BPF_FUNC_skc_to_tcp_request_sock, BPF_FUNC_skc_to_udp6_sock, BPF_FUNC_get_task_stack, BPF_FUNC_load_hdr_opt, BPF_FUNC_store_hdr_opt, BPF_FUNC_reserve_hdr_opt, BPF_FUNC_inode_storage_get, BPF_FUNC_inode_storage_delete, BPF_FUNC_d_path, BPF_FUNC_copy_from_user, BPF_FUNC_snprintf_btf, BPF_FUNC_seq_printf_btf, BPF_FUNC_skb_cgroup_classid, BPF_FUNC_redirect_neigh, BPF_FUNC_per_cpu_ptr, BPF_FUNC_this_cpu_ptr, BPF_FUNC_redirect_peer, BPF_FUNC_task_storage_get, BPF_FUNC_task_storage_delete, BPF_FUNC_get_current_task_btf, BPF_FUNC_bprm_opts_set, BPF_FUNC_ktime_get_coarse_ns, BPF_FUNC_ima_inode_hash, BPF_FUNC_sock_from_file, BPF_FUNC_check_mtu, BPF_FUNC_for_each_map_elem, BPF_FUNC_snprintf, BPF_FUNC_sys_bpf, BPF_FUNC_btf_find_by_name_kind, BPF_FUNC_sys_close, BPF_FUNC_timer_init, BPF_FUNC_timer_set_callback, BPF_FUNC_timer_start, BPF_FUNC_timer_cancel, BPF_FUNC_get_func_ip, BPF_FUNC_get_attach_cookie, BPF_FUNC_task_pt_regs, BPF_FUNC_get_branch_snapshot, BPF_FUNC_trace_vprintk, BPF_FUNC_skc_to_unix_sock, BPF_FUNC_kallsyms_lookup_name,
 __BPF_FUNC_MAX_ID,
};





enum {
 BPF_F_RECOMPUTE_CSUM = (1ULL << 0),
 BPF_F_INVALIDATE_HASH = (1ULL << 1),
};




enum {
 BPF_F_HDR_FIELD_MASK = 0xfULL,
};


enum {
 BPF_F_PSEUDO_HDR = (1ULL << 4),
 BPF_F_MARK_MANGLED_0 = (1ULL << 5),
 BPF_F_MARK_ENFORCE = (1ULL << 6),
};


enum {
 BPF_F_INGRESS = (1ULL << 0),
};


enum {
 BPF_F_TUNINFO_IPV6 = (1ULL << 0),
};


enum {
 BPF_F_SKIP_FIELD_MASK = 0xffULL,
 BPF_F_USER_STACK = (1ULL << 8),

 BPF_F_FAST_STACK_CMP = (1ULL << 9),
 BPF_F_REUSE_STACKID = (1ULL << 10),

 BPF_F_USER_BUILD_ID = (1ULL << 11),
};


enum {
 BPF_F_ZERO_CSUM_TX = (1ULL << 1),
 BPF_F_DONT_FRAGMENT = (1ULL << 2),
 BPF_F_SEQ_NUMBER = (1ULL << 3),
};




enum {
 BPF_F_INDEX_MASK = 0xffffffffULL,
 BPF_F_CURRENT_CPU = BPF_F_INDEX_MASK,

 BPF_F_CTXLEN_MASK = (0xfffffULL << 32),
};


enum {
 BPF_F_CURRENT_NETNS = (-1L),
};


enum {
 BPF_CSUM_LEVEL_QUERY,
 BPF_CSUM_LEVEL_INC,
 BPF_CSUM_LEVEL_DEC,
 BPF_CSUM_LEVEL_RESET,
};


enum {
 BPF_F_ADJ_ROOM_FIXED_GSO = (1ULL << 0),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV4 = (1ULL << 1),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV6 = (1ULL << 2),
 BPF_F_ADJ_ROOM_ENCAP_L4_GRE = (1ULL << 3),
 BPF_F_ADJ_ROOM_ENCAP_L4_UDP = (1ULL << 4),
 BPF_F_ADJ_ROOM_NO_CSUM_RESET = (1ULL << 5),
 BPF_F_ADJ_ROOM_ENCAP_L2_ETH = (1ULL << 6),
};

enum {
 BPF_ADJ_ROOM_ENCAP_L2_MASK = 0xff,
 BPF_ADJ_ROOM_ENCAP_L2_SHIFT = 56,
};






enum {
 BPF_F_SYSCTL_BASE_NAME = (1ULL << 0),
};


enum {
 BPF_LOCAL_STORAGE_GET_F_CREATE = (1ULL << 0),



 BPF_SK_STORAGE_GET_F_CREATE = BPF_LOCAL_STORAGE_GET_F_CREATE,
};


enum {
 BPF_F_GET_BRANCH_RECORDS_SIZE = (1ULL << 0),
};




enum {
 BPF_RB_NO_WAKEUP = (1ULL << 0),
 BPF_RB_FORCE_WAKEUP = (1ULL << 1),
};


enum {
 BPF_RB_AVAIL_DATA = 0,
 BPF_RB_RING_SIZE = 1,
 BPF_RB_CONS_POS = 2,
 BPF_RB_PROD_POS = 3,
};


enum {
 BPF_RINGBUF_BUSY_BIT = (1U << 31),
 BPF_RINGBUF_DISCARD_BIT = (1U << 30),
 BPF_RINGBUF_HDR_SZ = 8,
};


enum {
 BPF_SK_LOOKUP_F_REPLACE = (1ULL << 0),
 BPF_SK_LOOKUP_F_NO_REUSEPORT = (1ULL << 1),
};


enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
 BPF_ADJ_ROOM_MAC,
};


enum bpf_hdr_start_off {
 BPF_HDR_START_MAC,
 BPF_HDR_START_NET,
};


enum bpf_lwt_encap_mode {
 BPF_LWT_ENCAP_SEG6,
 BPF_LWT_ENCAP_SEG6_INLINE,
 BPF_LWT_ENCAP_IP,
};


enum {
 BPF_F_BPRM_SECUREEXEC = (1ULL << 0),
};


enum {
 BPF_F_BROADCAST = (1ULL << 3),
 BPF_F_EXCLUDE_INGRESS = (1ULL << 4),
};
# 5315 "./include/uapi/linux/bpf.h"
struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;


 __u32 data_meta;
 union { struct bpf_flow_keys * flow_keys; __u64 :64; } __attribute__((aligned(8)));
 __u64 tstamp;
 __u32 wire_len;
 __u32 gso_segs;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 __u32 gso_size;
 __u32 :32;
 __u64 hwtstamp;
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};




struct bpf_xfrm_state {
 __u32 reqid;
 __u32 spi;
 __u16 family;
 __u16 ext;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
};
# 5389 "./include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,
# 5403 "./include/uapi/linux/bpf.h"
 BPF_LWT_REROUTE = 128,
};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;

 __u32 src_ip4;
 __u32 src_ip6[4];
 __u32 src_port;
 __u32 dst_port;
 __u32 dst_ip4;
 __u32 dst_ip6[4];
 __u32 state;
 __s32 rx_queue_mapping;
};

struct bpf_tcp_sock {
 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;


 __u32 data_segs_in;


 __u32 segs_out;


 __u32 data_segs_out;


 __u32 lost_out;
 __u32 sacked_out;
 __u64 bytes_received;



 __u64 bytes_acked;



 __u32 dsack_dups;


 __u32 delivered;
 __u32 delivered_ce;
 __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
 union {
  struct {
   __be32 saddr;
   __be32 daddr;
   __be16 sport;
   __be16 dport;
  } ipv4;
  struct {
   __be32 saddr[4];
   __be32 daddr[4];
   __be16 sport;
   __be16 dport;
  } ipv6;
 };
};

struct bpf_xdp_sock {
 __u32 queue_id;
};
# 5497 "./include/uapi/linux/bpf.h"
enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
 __u32 data_meta;

 __u32 ingress_ifindex;
 __u32 rx_queue_index;

 __u32 egress_ifindex;
};






struct bpf_devmap_val {
 __u32 ifindex;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};






struct bpf_cpumap_val {
 __u32 qsize;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};




struct sk_msg_md {
 union { void * data; __u64 :64; } __attribute__((aligned(8)));
 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));

 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 size;

 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};

struct sk_reuseport_md {




 union { void * data; __u64 :64; } __attribute__((aligned(8)));

 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));






 __u32 len;




 __u32 eth_protocol;
 __u32 ip_protocol;
 __u32 bind_inany;
 __u32 hash;
# 5604 "./include/uapi/linux/bpf.h"
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_sock * migrating_sk; __u64 :64; } __attribute__((aligned(8)));
};



struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
 __u64 load_time;
 __u32 created_by_uid;
 __u32 nr_map_ids;
 __u64 __attribute__((aligned(8))) map_ids;
 char name[16U];
 __u32 ifindex;
 __u32 gpl_compatible:1;
 __u32 :31;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 nr_jited_ksyms;
 __u32 nr_jited_func_lens;
 __u64 __attribute__((aligned(8))) jited_ksyms;
 __u64 __attribute__((aligned(8))) jited_func_lens;
 __u32 btf_id;
 __u32 func_info_rec_size;
 __u64 __attribute__((aligned(8))) func_info;
 __u32 nr_func_info;
 __u32 nr_line_info;
 __u64 __attribute__((aligned(8))) line_info;
 __u64 __attribute__((aligned(8))) jited_line_info;
 __u32 nr_jited_line_info;
 __u32 line_info_rec_size;
 __u32 jited_line_info_rec_size;
 __u32 nr_prog_tags;
 __u64 __attribute__((aligned(8))) prog_tags;
 __u64 run_time_ns;
 __u64 run_cnt;
 __u64 recursion_misses;
 __u32 verified_insns;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
 char name[16U];
 __u32 ifindex;
 __u32 btf_vmlinux_value_type_id;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 btf_id;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
 __u32 :32;
 __u64 map_extra;
} __attribute__((aligned(8)));

struct bpf_btf_info {
 __u64 __attribute__((aligned(8))) btf;
 __u32 btf_size;
 __u32 id;
 __u64 __attribute__((aligned(8))) name;
 __u32 name_len;
 __u32 kernel_btf;
} __attribute__((aligned(8)));

struct bpf_link_info {
 __u32 type;
 __u32 id;
 __u32 prog_id;
 union {
  struct {
   __u64 __attribute__((aligned(8))) tp_name;
   __u32 tp_name_len;
  } raw_tracepoint;
  struct {
   __u32 attach_type;
   __u32 target_obj_id;
   __u32 target_btf_id;
  } tracing;
  struct {
   __u64 cgroup_id;
   __u32 attach_type;
  } cgroup;
  struct {
   __u64 __attribute__((aligned(8))) target_name;
   __u32 target_name_len;
   union {
    struct {
     __u32 map_id;
    } map;
   };
  } iter;
  struct {
   __u32 netns_ino;
   __u32 attach_type;
  } netns;
  struct {
   __u32 ifindex;
  } xdp;
 };
} __attribute__((aligned(8)));





struct bpf_sock_addr {
 __u32 user_family;
 __u32 user_ip4;


 __u32 user_ip6[4];


 __u32 user_port;


 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 msg_src_ip4;


 __u32 msg_src_ip6[4];


 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 args[4];
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 is_fullsock;



 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 bpf_sock_ops_cb_flags;
 __u32 state;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;
 __u32 data_segs_in;
 __u32 segs_out;
 __u32 data_segs_out;
 __u32 lost_out;
 __u32 sacked_out;
 __u32 sk_txhash;
 __u64 bytes_received;
 __u64 bytes_acked;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
# 5806 "./include/uapi/linux/bpf.h"
 union { void * skb_data; __u64 :64; } __attribute__((aligned(8)));
 union { void * skb_data_end; __u64 :64; } __attribute__((aligned(8)));
 __u32 skb_len;



 __u32 skb_tcp_flags;
# 5822 "./include/uapi/linux/bpf.h"
};


enum {
 BPF_SOCK_OPS_RTO_CB_FLAG = (1<<0),
 BPF_SOCK_OPS_RETRANS_CB_FLAG = (1<<1),
 BPF_SOCK_OPS_STATE_CB_FLAG = (1<<2),
 BPF_SOCK_OPS_RTT_CB_FLAG = (1<<3),
# 5848 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG = (1<<4),
# 5857 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG = (1<<5),
# 5872 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG = (1<<6),

 BPF_SOCK_OPS_ALL_CB_FLAGS = 0x7F,
};




enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


 BPF_SOCK_OPS_BASE_RTT,






 BPF_SOCK_OPS_RTO_CB,




 BPF_SOCK_OPS_RETRANS_CB,





 BPF_SOCK_OPS_STATE_CB,



 BPF_SOCK_OPS_TCP_LISTEN_CB,


 BPF_SOCK_OPS_RTT_CB,

 BPF_SOCK_OPS_PARSE_HDR_OPT_CB,
# 5944 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_HDR_OPT_LEN_CB,
# 5961 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB,
# 5987 "./include/uapi/linux/bpf.h"
};






enum {
 BPF_TCP_ESTABLISHED = 1,
 BPF_TCP_SYN_SENT,
 BPF_TCP_SYN_RECV,
 BPF_TCP_FIN_WAIT1,
 BPF_TCP_FIN_WAIT2,
 BPF_TCP_TIME_WAIT,
 BPF_TCP_CLOSE,
 BPF_TCP_CLOSE_WAIT,
 BPF_TCP_LAST_ACK,
 BPF_TCP_LISTEN,
 BPF_TCP_CLOSING,
 BPF_TCP_NEW_SYN_RECV,

 BPF_TCP_MAX_STATES
};

enum {
 TCP_BPF_IW = 1001,
 TCP_BPF_SNDCWND_CLAMP = 1002,
 TCP_BPF_DELACK_MAX = 1003,
 TCP_BPF_RTO_MIN = 1004,
# 6048 "./include/uapi/linux/bpf.h"
 TCP_BPF_SYN = 1005,
 TCP_BPF_SYN_IP = 1006,
 TCP_BPF_SYN_MAC = 1007,
};

enum {
 BPF_LOAD_HDR_OPT_TCP_SYN = (1ULL << 0),
};




enum {
 BPF_WRITE_HDR_TCP_CURRENT_MSS = 1,






 BPF_WRITE_HDR_TCP_SYNACK_COOKIE = 2,


};

struct bpf_perf_event_value {
 __u64 counter;
 __u64 enabled;
 __u64 running;
};

enum {
 BPF_DEVCG_ACC_MKNOD = (1ULL << 0),
 BPF_DEVCG_ACC_READ = (1ULL << 1),
 BPF_DEVCG_ACC_WRITE = (1ULL << 2),
};

enum {
 BPF_DEVCG_DEV_BLOCK = (1ULL << 0),
 BPF_DEVCG_DEV_CHAR = (1ULL << 1),
};

struct bpf_cgroup_dev_ctx {

 __u32 access_type;
 __u32 major;
 __u32 minor;
};

struct bpf_raw_tracepoint_args {
 __u64 args[0];
};




enum {
 BPF_FIB_LOOKUP_DIRECT = (1U << 0),
 BPF_FIB_LOOKUP_OUTPUT = (1U << 1),
};

enum {
 BPF_FIB_LKUP_RET_SUCCESS,
 BPF_FIB_LKUP_RET_BLACKHOLE,
 BPF_FIB_LKUP_RET_UNREACHABLE,
 BPF_FIB_LKUP_RET_PROHIBIT,
 BPF_FIB_LKUP_RET_NOT_FWDED,
 BPF_FIB_LKUP_RET_FWD_DISABLED,
 BPF_FIB_LKUP_RET_UNSUPP_LWT,
 BPF_FIB_LKUP_RET_NO_NEIGH,
 BPF_FIB_LKUP_RET_FRAG_NEEDED,
};

struct bpf_fib_lookup {



 __u8 family;


 __u8 l4_protocol;
 __be16 sport;
 __be16 dport;

 union {

  __u16 tot_len;


  __u16 mtu_result;
 };



 __u32 ifindex;

 union {

  __u8 tos;
  __be32 flowinfo;


  __u32 rt_metric;
 };

 union {
  __be32 ipv4_src;
  __u32 ipv6_src[4];
 };





 union {
  __be32 ipv4_dst;
  __u32 ipv6_dst[4];
 };


 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __u8 smac[6];
 __u8 dmac[6];
};

struct bpf_redir_neigh {

 __u32 nh_family;

 union {
  __be32 ipv4_nh;
  __u32 ipv6_nh[4];
 };
};


enum bpf_check_mtu_flags {
 BPF_MTU_CHK_SEGS = (1U << 0),
};

enum bpf_check_mtu_ret {
 BPF_MTU_CHK_RET_SUCCESS,
 BPF_MTU_CHK_RET_FRAG_NEEDED,
 BPF_MTU_CHK_RET_SEGS_TOOBIG,
};

enum bpf_task_fd_type {
 BPF_FD_TYPE_RAW_TRACEPOINT,
 BPF_FD_TYPE_TRACEPOINT,
 BPF_FD_TYPE_KPROBE,
 BPF_FD_TYPE_KRETPROBE,
 BPF_FD_TYPE_UPROBE,
 BPF_FD_TYPE_URETPROBE,
};

enum {
 BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG = (1U << 0),
 BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL = (1U << 1),
 BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP = (1U << 2),
};

struct bpf_flow_keys {
 __u16 nhoff;
 __u16 thoff;
 __u16 addr_proto;
 __u8 is_frag;
 __u8 is_first_frag;
 __u8 is_encap;
 __u8 ip_proto;
 __be16 n_proto;
 __be16 sport;
 __be16 dport;
 union {
  struct {
   __be32 ipv4_src;
   __be32 ipv4_dst;
  };
  struct {
   __u32 ipv6_src[4];
   __u32 ipv6_dst[4];
  };
 };
 __u32 flags;
 __be32 flow_label;
};

struct bpf_func_info {
 __u32 insn_off;
 __u32 type_id;
};




struct bpf_line_info {
 __u32 insn_off;
 __u32 file_name_off;
 __u32 line_off;
 __u32 line_col;
};

struct bpf_spin_lock {
 __u32 val;
};

struct bpf_timer {
 __u64 :64;
 __u64 :64;
} __attribute__((aligned(8)));

struct bpf_sysctl {
 __u32 write;


 __u32 file_pos;


};

struct bpf_sockopt {
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval_end; __u64 :64; } __attribute__((aligned(8)));

 __s32 level;
 __s32 optname;
 __s32 optlen;
 __s32 retval;
};

struct bpf_pidns_info {
 __u32 pid;
 __u32 tgid;
};


struct bpf_sk_lookup {
 union {
  union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
  __u64 cookie;
 };

 __u32 family;
 __u32 protocol;
 __u32 remote_ip4;
 __u32 remote_ip6[4];
 __u32 remote_port;
 __u32 local_ip4;
 __u32 local_ip6[4];
 __u32 local_port;
};
# 6309 "./include/uapi/linux/bpf.h"
struct btf_ptr {
 void *ptr;
 __u32 type_id;
 __u32 flags;
};
# 6324 "./include/uapi/linux/bpf.h"
enum {
 BTF_F_COMPACT = (1ULL << 0),
 BTF_F_NONAME = (1ULL << 1),
 BTF_F_PTR_RAW = (1ULL << 2),
 BTF_F_ZERO = (1ULL << 3),
};
# 8 "./include/linux/bpf.h" 2


# 1 "./include/linux/file.h" 1
# 14 "./include/linux/file.h"
struct file;

extern void fput(struct file *);
extern void fput_many(struct file *, unsigned int);

struct file_operations;
struct task_struct;
struct vfsmount;
struct dentry;
struct inode;
struct path;
extern struct file *alloc_file_pseudo(struct inode *, struct vfsmount *,
 const char *, int flags, const struct file_operations *);
extern struct file *alloc_file_clone(struct file *, int flags,
 const struct file_operations *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fput_light(struct file *file, int fput_needed)
{
 if (fput_needed)
  fput(file);
}

struct fd {
 struct file *file;
 unsigned int flags;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fdput(struct fd fd)
{
 if (fd.flags & 1)
  fput(fd.file);
}

extern struct file *fget(unsigned int fd);
extern struct file *fget_many(unsigned int fd, unsigned int refs);
extern struct file *fget_raw(unsigned int fd);
extern struct file *fget_task(struct task_struct *task, unsigned int fd);
extern unsigned long __fdget(unsigned int fd);
extern unsigned long __fdget_raw(unsigned int fd);
extern unsigned long __fdget_pos(unsigned int fd);
extern void __f_unlock_pos(struct file *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct fd __to_fd(unsigned long v)
{
 return (struct fd){(struct file *)(v & ~3),v & 3};
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct fd fdget(unsigned int fd)
{
 return __to_fd(__fdget(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct fd fdget_raw(unsigned int fd)
{
 return __to_fd(__fdget_raw(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct fd fdget_pos(int fd)
{
 return __to_fd(__fdget_pos(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fdput_pos(struct fd f)
{
 if (f.flags & 2)
  __f_unlock_pos(f.file);
 fdput(f);
}

extern int f_dupfd(unsigned int from, struct file *file, unsigned flags);
extern int replace_fd(unsigned fd, struct file *file, unsigned flags);
extern void set_close_on_exec(unsigned int fd, int flag);
extern bool get_close_on_exec(unsigned int fd);
extern int __get_unused_fd_flags(unsigned flags, unsigned long nofile);
extern int get_unused_fd_flags(unsigned flags);
extern void put_unused_fd(unsigned int fd);

extern void fd_install(unsigned int fd, struct file *file);

extern int __receive_fd(struct file *file, int *ufd,
   unsigned int o_flags);

extern int receive_fd(struct file *file, unsigned int o_flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int receive_fd_user(struct file *file, int *ufd,
      unsigned int o_flags)
{
 if (ufd == ((void *)0))
  return -14;
 return __receive_fd(file, ufd, o_flags);
}
int receive_fd_replace(int new_fd, struct file *file, unsigned int o_flags);

extern void flush_delayed_fput(void);
extern void __fput_sync(struct file *);

extern unsigned int sysctl_nr_open_min, sysctl_nr_open_max;
# 11 "./include/linux/bpf.h" 2
# 22 "./include/linux/bpf.h"
# 1 "./include/linux/sched/mm.h" 1
# 10 "./include/linux/sched/mm.h"
# 1 "./include/linux/sync_core.h" 1





# 1 "./arch/x86/include/asm/sync_core.h" 1
# 22 "./arch/x86/include/asm/sync_core.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void iret_to_self(void)
{
 unsigned int tmp;

 asm volatile (
  "mov %%ss, %0\n\t"
  "pushq %q0\n\t"
  "pushq %%rsp\n\t"
  "addq $8, (%%rsp)\n\t"
  "pushfq\n\t"
  "mov %%cs, %0\n\t"
  "pushq %q0\n\t"
  "pushq $1f\n\t"
  "iretq\n\t"
  "1:"
  : "=&r" (tmp), "+r" (current_stack_pointer) : : "cc", "memory");
}
# 58 "./arch/x86/include/asm/sync_core.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sync_core(void)
{




 if (( __builtin_constant_p((__builtin_constant_p((18*32+14)) && ( ((((18*32+14))>>5)==(0) && (1UL<<(((18*32+14))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+14))>>5)==(1) && (1UL<<(((18*32+14))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+14))>>5)==(2) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(3) && (1UL<<(((18*32+14))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+14))>>5)==(4) && (1UL<<(((18*32+14))&31) & (0) )) || ((((18*32+14))>>5)==(5) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(6) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(7) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(8) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(9) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(10) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(11) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(12) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(13) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(14) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(15) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(16) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(17) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(18) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(19) && (1UL<<(((18*32+14))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((18*32+14), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((18*32+14)) && ( ((((18*32+14))>>5)==(0) && (1UL<<(((18*32+14))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+14))>>5)==(1) && (1UL<<(((18*32+14))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+14))>>5)==(2) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(3) && (1UL<<(((18*32+14))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+14))>>5)==(4) && (1UL<<(((18*32+14))&31) & (0) )) || ((((18*32+14))>>5)==(5) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(6) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(7) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(8) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(9) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(10) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(11) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(12) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(13) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(14) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(15) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(16) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(17) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(18) && (1UL<<(((18*32+14))&31) & 0 )) || ((((18*32+14))>>5)==(19) && (1UL<<(((18*32+14))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((18*32+14), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((18*32+14)) )) {
  serialize();
  return;
 }
# 88 "./arch/x86/include/asm/sync_core.h"
 iret_to_self();
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sync_core_before_usermode(void)
{

 if (( __builtin_constant_p((__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(19) && (1UL<<((( 7*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(19) && (1UL<<((( 7*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(( 7*32+11)) ))
  return;







 sync_core();
}
# 7 "./include/linux/sync_core.h" 2
# 11 "./include/linux/sched/mm.h" 2




extern struct mm_struct *mm_alloc(void);
# 34 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmgrab(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_count);
}

extern void __mmdrop(struct mm_struct *mm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmdrop(struct mm_struct *mm)
{





 if (__builtin_expect(!!(atomic_dec_and_test(&mm->mm_count)), 0))
  __mmdrop(mm);
}
# 75 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmdrop_sched(struct mm_struct *mm)
{
 mmdrop(mm);
}
# 97 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mmget(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_users);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mmget_not_zero(struct mm_struct *mm)
{
 return atomic_inc_not_zero(&mm->mm_users);
}


extern void mmput(struct mm_struct *);




void mmput_async(struct mm_struct *);



extern struct mm_struct *get_task_mm(struct task_struct *task);





extern struct mm_struct *mm_access(struct task_struct *task, unsigned int mode);

extern void exit_mm_release(struct task_struct *, struct mm_struct *);

extern void exec_mm_release(struct task_struct *, struct mm_struct *);


extern void mm_update_next_owner(struct mm_struct *mm);







extern void arch_pick_mmap_layout(struct mm_struct *mm,
      struct rlimit *rlim_stack);
extern unsigned long
arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
         unsigned long, unsigned long);
extern unsigned long
arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
     unsigned long len, unsigned long pgoff,
     unsigned long flags);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool in_vfork(struct task_struct *tsk)
{
 bool ret;
# 171 "./include/linux/sched/mm.h"
 rcu_read_lock();
 ret = tsk->vfork_done &&
   ({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_322(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_322(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); })->mm == tsk->mm;
 rcu_read_unlock();

 return ret;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gfp_t current_gfp_context(gfp_t flags)
{
 unsigned int pflags = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_323(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->flags) == sizeof(char) || sizeof(get_current()->flags) == sizeof(short) || sizeof(get_current()->flags) == sizeof(int) || sizeof(get_current()->flags) == sizeof(long)) || sizeof(get_current()->flags) == sizeof(long long))) __compiletime_assert_323(); } while (0); (*(const volatile typeof( _Generic((get_current()->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (get_current()->flags))) *)&(get_current()->flags)); });

 if (__builtin_expect(!!(pflags & (0x00080000 | 0x00040000 | 0x10000000)), 0)) {




  if (pflags & 0x00080000)
   flags &= ~((( gfp_t)0x40u) | (( gfp_t)0x80u));
  else if (pflags & 0x00040000)
   flags &= ~(( gfp_t)0x80u);

  if (pflags & 0x10000000)
   flags &= ~(( gfp_t)0x08u);
 }
 return flags;
}


extern void __fs_reclaim_acquire(unsigned long ip);
extern void __fs_reclaim_release(unsigned long ip);
extern void fs_reclaim_acquire(gfp_t gfp_mask);
extern void fs_reclaim_release(gfp_t gfp_mask);
# 225 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void might_alloc(gfp_t gfp_mask)
{
 fs_reclaim_acquire(gfp_mask);
 fs_reclaim_release(gfp_mask);

 do { if (gfpflags_allow_blocking(gfp_mask)) do { __might_sleep("include/linux/sched/mm.h", 230); might_resched(); } while (0); } while (0);
}
# 244 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int memalloc_noio_save(void)
{
 unsigned int flags = get_current()->flags & 0x00080000;
 get_current()->flags |= 0x00080000;
 return flags;
}
# 259 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memalloc_noio_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00080000) | flags;
}
# 275 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int memalloc_nofs_save(void)
{
 unsigned int flags = get_current()->flags & 0x00040000;
 get_current()->flags |= 0x00040000;
 return flags;
}
# 290 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memalloc_nofs_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00040000) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int memalloc_noreclaim_save(void)
{
 unsigned int flags = get_current()->flags & 0x00000800;
 get_current()->flags |= 0x00000800;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memalloc_noreclaim_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00000800) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int memalloc_pin_save(void)
{
 unsigned int flags = get_current()->flags & 0x10000000;

 get_current()->flags |= 0x10000000;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memalloc_pin_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x10000000) | flags;
}


extern __attribute__((section(".data" ""))) __typeof__(struct mem_cgroup *) int_active_memcg;
# 333 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *
set_active_memcg(struct mem_cgroup *memcg)
{
 struct mem_cgroup *old;

 if (!(!(((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4)))) | ((preempt_count() & (((1UL << (4))-1) << ((0 + 8) + 8)))) | ((preempt_count() & (((1UL << (8))-1) << (0 + 8))) & (1UL << (0 + 8)))))) {
  old = ({ typeof(int_active_memcg) pscr_ret__; do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(int_active_memcg)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (int_active_memcg)); (typeof(int_active_memcg))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (int_active_memcg)); (typeof(int_active_memcg))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (int_active_memcg)); (typeof(int_active_memcg))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (int_active_memcg)); (typeof(int_active_memcg))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
  do { do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(int_active_memcg)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) memcg) & 0xff)); if (0) { typeof((int_active_memcg)) pto_tmp__; pto_tmp__ = (memcg); (void)pto_tmp__; } asm volatile("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((int_active_memcg)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) memcg) & 0xffff)); if (0) { typeof((int_active_memcg)) pto_tmp__; pto_tmp__ = (memcg); (void)pto_tmp__; } asm volatile("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((int_active_memcg)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) memcg) & 0xffffffff)); if (0) { typeof((int_active_memcg)) pto_tmp__; pto_tmp__ = (memcg); (void)pto_tmp__; } asm volatile("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((int_active_memcg)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(memcg)); if (0) { typeof((int_active_memcg)) pto_tmp__; pto_tmp__ = (memcg); (void)pto_tmp__; } asm volatile("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((int_active_memcg)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 } else {
  old = get_current()->active_memcg;
  get_current()->active_memcg = memcg;
 }

 return old;
}
# 357 "./include/linux/sched/mm.h"
enum {
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY = (1U << 0),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED = (1U << 1),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY = (1U << 2),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED = (1U << 3),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY = (1U << 4),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE = (1U << 5),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY = (1U << 6),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ = (1U << 7),
};

enum {
 MEMBARRIER_FLAG_SYNC_CORE = (1U << 0),
 MEMBARRIER_FLAG_RSEQ = (1U << 1),
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void membarrier_mm_sync_core_before_usermode(struct mm_struct *mm)
{
 if (get_current()->mm != mm)
  return;
 if (__builtin_expect(!!(!(atomic_read(&mm->membarrier_state) & MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE)), 1))

  return;
 sync_core_before_usermode();
}

extern void membarrier_exec_mmap(struct mm_struct *mm);

extern void membarrier_update_current_mm(struct mm_struct *next_mm);
# 23 "./include/linux/bpf.h" 2


# 1 "./include/linux/bpfptr.h" 1






# 1 "./include/linux/sockptr.h" 1
# 14 "./include/linux/sockptr.h"
typedef struct {
 union {
  void *kernel;
  void *user;
 };
 bool is_kernel : 1;
} sockptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sockptr_is_kernel(sockptr_t sockptr)
{
 return sockptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sockptr_t KERNEL_SOCKPTR(void *p)
{
 return (sockptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sockptr_t USER_SOCKPTR(void *p)
{
 return (sockptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sockptr_is_null(sockptr_t sockptr)
{
 if (sockptr_is_kernel(sockptr))
  return !sockptr.kernel;
 return !sockptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_from_sockptr_offset(void *dst, sockptr_t src,
  size_t offset, size_t size)
{
 if (!sockptr_is_kernel(src))
  return copy_from_user(dst, src.user + offset, size);
 memcpy(dst, src.kernel + offset, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_from_sockptr(void *dst, sockptr_t src, size_t size)
{
 return copy_from_sockptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_to_sockptr_offset(sockptr_t dst, size_t offset,
  const void *src, size_t size)
{
 if (!sockptr_is_kernel(dst))
  return copy_to_user(dst.user + offset, src, size);
 memcpy(dst.kernel + offset, src, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memdup_sockptr(sockptr_t src, size_t len)
{
 void *p = __kmalloc_track_caller(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memdup_sockptr_nul(sockptr_t src, size_t len)
{
 char *p = __kmalloc_track_caller(len + 1, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 p[len] = '\0';
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long strncpy_from_sockptr(char *dst, sockptr_t src, size_t count)
{
 if (sockptr_is_kernel(src)) {
  size_t len = __builtin_choose_expr(((!!(sizeof((typeof(strnlen(src.kernel, count - 1) + 1) *)1 == (typeof(count) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(strnlen(src.kernel, count - 1) + 1) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(count) * 0l)) : (int *)8))))), ((strnlen(src.kernel, count - 1) + 1) < (count) ? (strnlen(src.kernel, count - 1) + 1) : (count)), ({ typeof(strnlen(src.kernel, count - 1) + 1) __UNIQUE_ID___x324 = (strnlen(src.kernel, count - 1) + 1); typeof(count) __UNIQUE_ID___y325 = (count); ((__UNIQUE_ID___x324) < (__UNIQUE_ID___y325) ? (__UNIQUE_ID___x324) : (__UNIQUE_ID___y325)); }));

  memcpy(dst, src.kernel, len);
  return len;
 }
 return strncpy_from_user(dst, src.user, count);
}
# 8 "./include/linux/bpfptr.h" 2

typedef sockptr_t bpfptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpfptr_is_kernel(bpfptr_t bpfptr)
{
 return bpfptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bpfptr_t KERNEL_BPFPTR(void *p)
{
 return (bpfptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bpfptr_t USER_BPFPTR(void *p)
{
 return (bpfptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bpfptr_t make_bpfptr(u64 addr, bool is_kernel)
{
 if (is_kernel)
  return KERNEL_BPFPTR((void*) (uintptr_t) addr);
 else
  return USER_BPFPTR(( { ({ u64 __dummy; typeof((addr)) __dummy2; (void)(&__dummy == &__dummy2); 1; }); (void *)(uintptr_t)(addr); } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpfptr_is_null(bpfptr_t bpfptr)
{
 if (bpfptr_is_kernel(bpfptr))
  return !bpfptr.kernel;
 return !bpfptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpfptr_add(bpfptr_t *bpfptr, size_t val)
{
 if (bpfptr_is_kernel(*bpfptr))
  bpfptr->kernel += val;
 else
  bpfptr->user += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_from_bpfptr_offset(void *dst, bpfptr_t src,
       size_t offset, size_t size)
{
 return copy_from_sockptr_offset(dst, (sockptr_t) src, offset, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_from_bpfptr(void *dst, bpfptr_t src, size_t size)
{
 return copy_from_bpfptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_to_bpfptr_offset(bpfptr_t dst, size_t offset,
     const void *src, size_t size)
{
 return copy_to_sockptr_offset((sockptr_t) dst, offset, src, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kvmemdup_bpfptr(bpfptr_t src, size_t len)
{
 void *p = kvmalloc(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_bpfptr(p, src, len)) {
  kvfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long strncpy_from_bpfptr(char *dst, bpfptr_t src, size_t count)
{
 return strncpy_from_sockptr(dst, (sockptr_t) src, count);
}
# 26 "./include/linux/bpf.h" 2

struct bpf_verifier_env;
struct bpf_verifier_log;
struct perf_event;
struct bpf_prog;
struct bpf_prog_aux;
struct bpf_map;
struct sock;
struct seq_file;
struct btf;
struct btf_type;
struct exception_table_entry;
struct seq_operations;
struct bpf_iter_aux_info;
struct bpf_local_storage;
struct bpf_local_storage_map;
struct kobject;
struct mem_cgroup;
struct module;
struct bpf_func_state;

extern struct idr btf_idr;
extern spinlock_t btf_idr_lock;
extern struct kobject *btf_kobj;

typedef u64 (*bpf_callback_t)(u64, u64, u64, u64, u64);
typedef int (*bpf_iter_init_seq_priv_t)(void *private_data,
     struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_fini_seq_priv_t)(void *private_data);
struct bpf_iter_seq_info {
 const struct seq_operations *seq_ops;
 bpf_iter_init_seq_priv_t init_seq_private;
 bpf_iter_fini_seq_priv_t fini_seq_private;
 u32 seq_priv_size;
};


struct bpf_map_ops {

 int (*map_alloc_check)(union bpf_attr *attr);
 struct bpf_map *(*map_alloc)(union bpf_attr *attr);
 void (*map_release)(struct bpf_map *map, struct file *map_file);
 void (*map_free)(struct bpf_map *map);
 int (*map_get_next_key)(struct bpf_map *map, void *key, void *next_key);
 void (*map_release_uref)(struct bpf_map *map);
 void *(*map_lookup_elem_sys_only)(struct bpf_map *map, void *key);
 int (*map_lookup_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_lookup_and_delete_elem)(struct bpf_map *map, void *key,
       void *value, u64 flags);
 int (*map_lookup_and_delete_batch)(struct bpf_map *map,
        const union bpf_attr *attr,
        union bpf_attr *uattr);
 int (*map_update_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_delete_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);


 void *(*map_lookup_elem)(struct bpf_map *map, void *key);
 int (*map_update_elem)(struct bpf_map *map, void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_map *map, void *key);
 int (*map_push_elem)(struct bpf_map *map, void *value, u64 flags);
 int (*map_pop_elem)(struct bpf_map *map, void *value);
 int (*map_peek_elem)(struct bpf_map *map, void *value);


 void *(*map_fd_get_ptr)(struct bpf_map *map, struct file *map_file,
    int fd);
 void (*map_fd_put_ptr)(void *ptr);
 int (*map_gen_lookup)(struct bpf_map *map, struct bpf_insn *insn_buf);
 u32 (*map_fd_sys_lookup_elem)(void *ptr);
 void (*map_seq_show_elem)(struct bpf_map *map, void *key,
      struct seq_file *m);
 int (*map_check_btf)(const struct bpf_map *map,
        const struct btf *btf,
        const struct btf_type *key_type,
        const struct btf_type *value_type);


 int (*map_poke_track)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_untrack)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_run)(struct bpf_map *map, u32 key, struct bpf_prog *old,
        struct bpf_prog *new);


 int (*map_direct_value_addr)(const struct bpf_map *map,
         u64 *imm, u32 off);
 int (*map_direct_value_meta)(const struct bpf_map *map,
         u64 imm, u32 *off);
 int (*map_mmap)(struct bpf_map *map, struct vm_area_struct *vma);
 __poll_t (*map_poll)(struct bpf_map *map, struct file *filp,
        struct poll_table_struct *pts);


 int (*map_local_storage_charge)(struct bpf_local_storage_map *smap,
     void *owner, u32 size);
 void (*map_local_storage_uncharge)(struct bpf_local_storage_map *smap,
        void *owner, u32 size);
 struct bpf_local_storage ** (*map_owner_storage_ptr)(void *owner);


 int (*map_redirect)(struct bpf_map *map, u32 ifindex, u64 flags);
# 139 "./include/linux/bpf.h"
 bool (*map_meta_equal)(const struct bpf_map *meta0,
          const struct bpf_map *meta1);


 int (*map_set_for_each_callback_args)(struct bpf_verifier_env *env,
           struct bpf_func_state *caller,
           struct bpf_func_state *callee);
 int (*map_for_each_callback)(struct bpf_map *map,
         bpf_callback_t callback_fn,
         void *callback_ctx, u64 flags);


 const char * const map_btf_name;
 int *map_btf_id;


 const struct bpf_iter_seq_info *iter_seq_info;
};

struct bpf_map {



 const struct bpf_map_ops *ops __attribute__((__aligned__((1 << (6)))));
 struct bpf_map *inner_map_meta;



 enum bpf_map_type map_type;
 u32 key_size;
 u32 value_size;
 u32 max_entries;
 u64 map_extra;
 u32 map_flags;
 int spin_lock_off;
 int timer_off;
 u32 id;
 int numa_node;
 u32 btf_key_type_id;
 u32 btf_value_type_id;
 u32 btf_vmlinux_value_type_id;
 struct btf *btf;



 char name[16U];
 bool bypass_spec_v1;
 bool frozen;





 atomic64_t refcnt __attribute__((__aligned__((1 << (6)))));
 atomic64_t usercnt;
 struct work_struct work;
 struct mutex freeze_mutex;
 u64 writecnt;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool map_value_has_spin_lock(const struct bpf_map *map)
{
 return map->spin_lock_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool map_value_has_timer(const struct bpf_map *map)
{
 return map->timer_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_and_init_map_value(struct bpf_map *map, void *dst)
{
 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0))
  *(struct bpf_spin_lock *)(dst + map->spin_lock_off) =
   (struct bpf_spin_lock){};
 if (__builtin_expect(!!(map_value_has_timer(map)), 0))
  *(struct bpf_timer *)(dst + map->timer_off) =
   (struct bpf_timer){};
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_map_value(struct bpf_map *map, void *dst, void *src)
{
 u32 s_off = 0, s_sz = 0, t_off = 0, t_sz = 0;

 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0)) {
  s_off = map->spin_lock_off;
  s_sz = sizeof(struct bpf_spin_lock);
 } else if (__builtin_expect(!!(map_value_has_timer(map)), 0)) {
  t_off = map->timer_off;
  t_sz = sizeof(struct bpf_timer);
 }

 if (__builtin_expect(!!(s_sz || t_sz), 0)) {
  if (s_off < t_off || !s_sz) {
   do { typeof(s_off) __tmp = (s_off); (s_off) = (t_off); (t_off) = __tmp; } while (0);
   do { typeof(s_sz) __tmp = (s_sz); (s_sz) = (t_sz); (t_sz) = __tmp; } while (0);
  }
  memcpy(dst, src, t_off);
  memcpy(dst + t_off + t_sz,
         src + t_off + t_sz,
         s_off - t_off - t_sz);
  memcpy(dst + s_off + s_sz,
         src + s_off + s_sz,
         map->value_size - s_off - s_sz);
 } else {
  memcpy(dst, src, map->value_size);
 }
}
void copy_map_value_locked(struct bpf_map *map, void *dst, void *src,
      bool lock_src);
void bpf_timer_cancel_and_free(void *timer);
int bpf_obj_name_cpy(char *dst, const char *src, unsigned int size);

struct bpf_offload_dev;
struct bpf_offloaded_map;

struct bpf_map_dev_ops {
 int (*map_get_next_key)(struct bpf_offloaded_map *map,
    void *key, void *next_key);
 int (*map_lookup_elem)(struct bpf_offloaded_map *map,
          void *key, void *value);
 int (*map_update_elem)(struct bpf_offloaded_map *map,
          void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_offloaded_map *map, void *key);
};

struct bpf_offloaded_map {
 struct bpf_map map;
 struct net_device *netdev;
 const struct bpf_map_dev_ops *dev_ops;
 void *dev_priv;
 struct list_head offloads;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_offloaded_map *map_to_offmap(struct bpf_map *map)
{
 return ({ void *__mptr = (void *)(map); _Static_assert(__builtin_types_compatible_p(typeof(*(map)), typeof(((struct bpf_offloaded_map *)0)->map)) || __builtin_types_compatible_p(typeof(*(map)), typeof(void)), "pointer type mismatch in container_of()"); ((struct bpf_offloaded_map *)(__mptr - __builtin_offsetof(struct bpf_offloaded_map, map))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_map_offload_neutral(const struct bpf_map *map)
{
 return map->map_type == BPF_MAP_TYPE_PERF_EVENT_ARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_map_support_seq_show(const struct bpf_map *map)
{
 return (map->btf_value_type_id || map->btf_vmlinux_value_type_id) &&
  map->ops->map_seq_show_elem;
}

int map_check_no_btf(const struct bpf_map *map,
       const struct btf *btf,
       const struct btf_type *key_type,
       const struct btf_type *value_type);

bool bpf_map_meta_equal(const struct bpf_map *meta0,
   const struct bpf_map *meta1);

extern const struct bpf_map_ops bpf_map_offload_ops;


enum bpf_arg_type {
 ARG_DONTCARE = 0,




 ARG_CONST_MAP_PTR,
 ARG_PTR_TO_MAP_KEY,
 ARG_PTR_TO_MAP_VALUE,
 ARG_PTR_TO_UNINIT_MAP_VALUE,
 ARG_PTR_TO_MAP_VALUE_OR_NULL,




 ARG_PTR_TO_MEM,
 ARG_PTR_TO_MEM_OR_NULL,
 ARG_PTR_TO_UNINIT_MEM,




 ARG_CONST_SIZE,
 ARG_CONST_SIZE_OR_ZERO,

 ARG_PTR_TO_CTX,
 ARG_PTR_TO_CTX_OR_NULL,
 ARG_ANYTHING,
 ARG_PTR_TO_SPIN_LOCK,
 ARG_PTR_TO_SOCK_COMMON,
 ARG_PTR_TO_INT,
 ARG_PTR_TO_LONG,
 ARG_PTR_TO_SOCKET,
 ARG_PTR_TO_SOCKET_OR_NULL,
 ARG_PTR_TO_BTF_ID,
 ARG_PTR_TO_ALLOC_MEM,
 ARG_PTR_TO_ALLOC_MEM_OR_NULL,
 ARG_CONST_ALLOC_SIZE_OR_ZERO,
 ARG_PTR_TO_BTF_ID_SOCK_COMMON,
 ARG_PTR_TO_PERCPU_BTF_ID,
 ARG_PTR_TO_FUNC,
 ARG_PTR_TO_STACK_OR_NULL,
 ARG_PTR_TO_CONST_STR,
 ARG_PTR_TO_TIMER,
 __BPF_ARG_TYPE_MAX,
};


enum bpf_return_type {
 RET_INTEGER,
 RET_VOID,
 RET_PTR_TO_MAP_VALUE,
 RET_PTR_TO_MAP_VALUE_OR_NULL,
 RET_PTR_TO_SOCKET_OR_NULL,
 RET_PTR_TO_TCP_SOCK_OR_NULL,
 RET_PTR_TO_SOCK_COMMON_OR_NULL,
 RET_PTR_TO_ALLOC_MEM_OR_NULL,
 RET_PTR_TO_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID,
 RET_PTR_TO_BTF_ID,
};





struct bpf_func_proto {
 u64 (*func)(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
 bool gpl_only;
 bool pkt_access;
 enum bpf_return_type ret_type;
 union {
  struct {
   enum bpf_arg_type arg1_type;
   enum bpf_arg_type arg2_type;
   enum bpf_arg_type arg3_type;
   enum bpf_arg_type arg4_type;
   enum bpf_arg_type arg5_type;
  };
  enum bpf_arg_type arg_type[5];
 };
 union {
  struct {
   u32 *arg1_btf_id;
   u32 *arg2_btf_id;
   u32 *arg3_btf_id;
   u32 *arg4_btf_id;
   u32 *arg5_btf_id;
  };
  u32 *arg_btf_id[5];
 };
 int *ret_btf_id;
 bool (*allowed)(const struct bpf_prog *prog);
};





struct bpf_context;

enum bpf_access_type {
 BPF_READ = 1,
 BPF_WRITE = 2
};
# 418 "./include/linux/bpf.h"
enum bpf_reg_type {
 NOT_INIT = 0,
 SCALAR_VALUE,
 PTR_TO_CTX,
 CONST_PTR_TO_MAP,
 PTR_TO_MAP_VALUE,
 PTR_TO_MAP_VALUE_OR_NULL,
 PTR_TO_STACK,
 PTR_TO_PACKET_META,
 PTR_TO_PACKET,
 PTR_TO_PACKET_END,
 PTR_TO_FLOW_KEYS,
 PTR_TO_SOCKET,
 PTR_TO_SOCKET_OR_NULL,
 PTR_TO_SOCK_COMMON,
 PTR_TO_SOCK_COMMON_OR_NULL,
 PTR_TO_TCP_SOCK,
 PTR_TO_TCP_SOCK_OR_NULL,
 PTR_TO_TP_BUFFER,
 PTR_TO_XDP_SOCK,
# 448 "./include/linux/bpf.h"
 PTR_TO_BTF_ID,




 PTR_TO_BTF_ID_OR_NULL,
 PTR_TO_MEM,
 PTR_TO_MEM_OR_NULL,
 PTR_TO_RDONLY_BUF,
 PTR_TO_RDONLY_BUF_OR_NULL,
 PTR_TO_RDWR_BUF,
 PTR_TO_RDWR_BUF_OR_NULL,
 PTR_TO_PERCPU_BTF_ID,
 PTR_TO_FUNC,
 PTR_TO_MAP_KEY,
 __BPF_REG_TYPE_MAX,
};




struct bpf_insn_access_aux {
 enum bpf_reg_type reg_type;
 union {
  int ctx_field_size;
  struct {
   struct btf *btf;
   u32 btf_id;
  };
 };
 struct bpf_verifier_log *log;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
bpf_ctx_record_field_size(struct bpf_insn_access_aux *aux, u32 size)
{
 aux->ctx_field_size = size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_pseudo_func(const struct bpf_insn *insn)
{
 return insn->code == (0x00 | 0x00 | 0x18) &&
        insn->src_reg == 4;
}

struct bpf_prog_ops {
 int (*test_run)(struct bpf_prog *prog, const union bpf_attr *kattr,
   union bpf_attr *uattr);
};

struct bpf_verifier_ops {

 const struct bpf_func_proto *
 (*get_func_proto)(enum bpf_func_id func_id,
     const struct bpf_prog *prog);




 bool (*is_valid_access)(int off, int size, enum bpf_access_type type,
    const struct bpf_prog *prog,
    struct bpf_insn_access_aux *info);
 int (*gen_prologue)(struct bpf_insn *insn, bool direct_write,
       const struct bpf_prog *prog);
 int (*gen_ld_abs)(const struct bpf_insn *orig,
     struct bpf_insn *insn_buf);
 u32 (*convert_ctx_access)(enum bpf_access_type type,
      const struct bpf_insn *src,
      struct bpf_insn *dst,
      struct bpf_prog *prog, u32 *target_size);
 int (*btf_struct_access)(struct bpf_verifier_log *log,
     const struct btf *btf,
     const struct btf_type *t, int off, int size,
     enum bpf_access_type atype,
     u32 *next_btf_id);
 bool (*check_kfunc_call)(u32 kfunc_btf_id, struct module *owner);
};

struct bpf_prog_offload_ops {

 int (*insn_hook)(struct bpf_verifier_env *env,
    int insn_idx, int prev_insn_idx);
 int (*finalize)(struct bpf_verifier_env *env);

 int (*replace_insn)(struct bpf_verifier_env *env, u32 off,
       struct bpf_insn *insn);
 int (*remove_insns)(struct bpf_verifier_env *env, u32 off, u32 cnt);

 int (*prepare)(struct bpf_prog *prog);
 int (*translate)(struct bpf_prog *prog);
 void (*destroy)(struct bpf_prog *prog);
};

struct bpf_prog_offload {
 struct bpf_prog *prog;
 struct net_device *netdev;
 struct bpf_offload_dev *offdev;
 void *dev_priv;
 struct list_head offloads;
 bool dev_state;
 bool opt_failed;
 void *jited_image;
 u32 jited_len;
};

enum bpf_cgroup_storage_type {
 BPF_CGROUP_STORAGE_SHARED,
 BPF_CGROUP_STORAGE_PERCPU,
 __BPF_CGROUP_STORAGE_MAX
};
# 571 "./include/linux/bpf.h"
struct btf_func_model {
 u8 ret_size;
 u8 nr_args;
 u8 arg_size[12];
};
# 602 "./include/linux/bpf.h"
struct bpf_tramp_progs {
 struct bpf_prog *progs[38];
 int nr_progs;
};
# 627 "./include/linux/bpf.h"
struct bpf_tramp_image;
int arch_prepare_bpf_trampoline(struct bpf_tramp_image *tr, void *image, void *image_end,
    const struct btf_func_model *m, u32 flags,
    struct bpf_tramp_progs *tprogs,
    void *orig_call);

u64 __attribute__((no_instrument_function)) __bpf_prog_enter(struct bpf_prog *prog);
void __attribute__((no_instrument_function)) __bpf_prog_exit(struct bpf_prog *prog, u64 start);
u64 __attribute__((no_instrument_function)) __bpf_prog_enter_sleepable(struct bpf_prog *prog);
void __attribute__((no_instrument_function)) __bpf_prog_exit_sleepable(struct bpf_prog *prog, u64 start);
void __attribute__((no_instrument_function)) __bpf_tramp_enter(struct bpf_tramp_image *tr);
void __attribute__((no_instrument_function)) __bpf_tramp_exit(struct bpf_tramp_image *tr);

struct bpf_ksym {
 unsigned long start;
 unsigned long end;
 char name[128];
 struct list_head lnode;
 struct latch_tree_node tnode;
 bool prog;
};

enum bpf_tramp_prog_type {
 BPF_TRAMP_FENTRY,
 BPF_TRAMP_FEXIT,
 BPF_TRAMP_MODIFY_RETURN,
 BPF_TRAMP_MAX,
 BPF_TRAMP_REPLACE,
};

struct bpf_tramp_image {
 void *image;
 struct bpf_ksym ksym;
 struct percpu_ref pcref;
 void *ip_after_call;
 void *ip_epilogue;
 union {
  struct callback_head rcu;
  struct work_struct work;
 };
};

struct bpf_trampoline {

 struct hlist_node hlist;

 struct mutex mutex;
 refcount_t refcnt;
 u64 key;
 struct {
  struct btf_func_model model;
  void *addr;
  bool ftrace_managed;
 } func;




 struct bpf_prog *extension_prog;

 struct hlist_head progs_hlist[BPF_TRAMP_MAX];

 int progs_cnt[BPF_TRAMP_MAX];

 struct bpf_tramp_image *cur_image;
 u64 selector;
 struct module *mod;
};

struct bpf_attach_target_info {
 struct btf_func_model fmodel;
 long tgt_addr;
 const char *tgt_name;
 const struct btf_type *tgt_type;
};



struct bpf_dispatcher_prog {
 struct bpf_prog *prog;
 refcount_t users;
};

struct bpf_dispatcher {

 struct mutex mutex;
 void *func;
 struct bpf_dispatcher_prog progs[48];
 int num_progs;
 void *image;
 u32 image_off;
 struct bpf_ksym ksym;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__no_sanitize__("cfi"))) unsigned int bpf_dispatcher_nop_func(
 const void *ctx,
 const struct bpf_insn *insnsi,
 unsigned int (*bpf_func)(const void *,
     const struct bpf_insn *))
{
 return bpf_func(ctx, insnsi);
}

int bpf_trampoline_link_prog(struct bpf_prog *prog, struct bpf_trampoline *tr);
int bpf_trampoline_unlink_prog(struct bpf_prog *prog, struct bpf_trampoline *tr);
struct bpf_trampoline *bpf_trampoline_get(u64 key,
       struct bpf_attach_target_info *tgt_info);
void bpf_trampoline_put(struct bpf_trampoline *tr);
# 769 "./include/linux/bpf.h"
void bpf_dispatcher_change_prog(struct bpf_dispatcher *d, struct bpf_prog *from,
    struct bpf_prog *to);

void *bpf_jit_alloc_exec_page(void);
void bpf_image_ksym_add(void *data, struct bpf_ksym *ksym);
void bpf_image_ksym_del(struct bpf_ksym *ksym);
void bpf_ksym_add(struct bpf_ksym *ksym);
void bpf_ksym_del(struct bpf_ksym *ksym);
int bpf_jit_charge_modmem(u32 pages);
void bpf_jit_uncharge_modmem(u32 pages);
# 809 "./include/linux/bpf.h"
struct bpf_func_info_aux {
 u16 linkage;
 bool unreliable;
};

enum bpf_jit_poke_reason {
 BPF_POKE_REASON_TAIL_CALL,
};


struct bpf_jit_poke_descriptor {
 void *tailcall_target;
 void *tailcall_bypass;
 void *bypass_addr;
 void *aux;
 union {
  struct {
   struct bpf_map *map;
   u32 key;
  } tail_call;
 };
 bool tailcall_target_stable;
 u8 adj_off;
 u16 reason;
 u32 insn_idx;
};


struct bpf_ctx_arg_aux {
 u32 offset;
 enum bpf_reg_type reg_type;
 u32 btf_id;
};

struct btf_mod_pair {
 struct btf *btf;
 struct module *module;
};

struct bpf_kfunc_desc_tab;

struct bpf_prog_aux {
 atomic64_t refcnt;
 u32 used_map_cnt;
 u32 used_btf_cnt;
 u32 max_ctx_offset;
 u32 max_pkt_offset;
 u32 max_tp_access;
 u32 stack_depth;
 u32 id;
 u32 func_cnt;
 u32 func_idx;
 u32 attach_btf_id;
 u32 ctx_arg_info_size;
 u32 max_rdonly_access;
 u32 max_rdwr_access;
 struct btf *attach_btf;
 const struct bpf_ctx_arg_aux *ctx_arg_info;
 struct mutex dst_mutex;
 struct bpf_prog *dst_prog;
 struct bpf_trampoline *dst_trampoline;
 enum bpf_prog_type saved_dst_prog_type;
 enum bpf_attach_type saved_dst_attach_type;
 bool verifier_zext;
 bool offload_requested;
 bool attach_btf_trace;
 bool func_proto_unreliable;
 bool sleepable;
 bool tail_call_reachable;
 struct hlist_node tramp_hlist;

 const struct btf_type *attach_func_proto;

 const char *attach_func_name;
 struct bpf_prog **func;
 void *jit_data;
 struct bpf_jit_poke_descriptor *poke_tab;
 struct bpf_kfunc_desc_tab *kfunc_tab;
 struct bpf_kfunc_btf_tab *kfunc_btf_tab;
 u32 size_poke_tab;
 struct bpf_ksym ksym;
 const struct bpf_prog_ops *ops;
 struct bpf_map **used_maps;
 struct mutex used_maps_mutex;
 struct btf_mod_pair *used_btfs;
 struct bpf_prog *prog;
 struct user_struct *user;
 u64 load_time;
 u32 verified_insns;
 struct bpf_map *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
 char name[16U];



 struct bpf_prog_offload *offload;
 struct btf *btf;
 struct bpf_func_info *func_info;
 struct bpf_func_info_aux *func_info_aux;






 struct bpf_line_info *linfo;







 void **jited_linfo;
 u32 func_info_cnt;
 u32 nr_linfo;




 u32 linfo_idx;
 u32 num_exentries;
 struct exception_table_entry *extable;
 union {
  struct work_struct work;
  struct callback_head rcu;
 };
};

struct bpf_array_aux {





 struct {
  spinlock_t lock;
  enum bpf_prog_type type;
  bool jited;
 } owner;

 struct list_head poke_progs;
 struct bpf_map *map;
 struct mutex poke_mutex;
 struct work_struct work;
};

struct bpf_link {
 atomic64_t refcnt;
 u32 id;
 enum bpf_link_type type;
 const struct bpf_link_ops *ops;
 struct bpf_prog *prog;
 struct work_struct work;
};

struct bpf_link_ops {
 void (*release)(struct bpf_link *link);
 void (*dealloc)(struct bpf_link *link);
 int (*detach)(struct bpf_link *link);
 int (*update_prog)(struct bpf_link *link, struct bpf_prog *new_prog,
      struct bpf_prog *old_prog);
 void (*show_fdinfo)(const struct bpf_link *link, struct seq_file *seq);
 int (*fill_link_info)(const struct bpf_link *link,
         struct bpf_link_info *info);
};

struct bpf_link_primer {
 struct bpf_link *link;
 struct file *file;
 int fd;
 u32 id;
};

struct bpf_struct_ops_value;
struct btf_member;


struct bpf_struct_ops {
 const struct bpf_verifier_ops *verifier_ops;
 int (*init)(struct btf *btf);
 int (*check_member)(const struct btf_type *t,
       const struct btf_member *member);
 int (*init_member)(const struct btf_type *t,
      const struct btf_member *member,
      void *kdata, const void *udata);
 int (*reg)(void *kdata);
 void (*unreg)(void *kdata);
 const struct btf_type *type;
 const struct btf_type *value_type;
 const char *name;
 struct btf_func_model func_models[64];
 u32 type_id;
 u32 value_id;
};
# 1047 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct bpf_struct_ops *bpf_struct_ops_find(u32 type_id)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_struct_ops_init(struct btf *btf,
           struct bpf_verifier_log *log)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_try_module_get(const void *data, struct module *owner)
{
 return try_module_get(owner);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_module_put(const void *data, struct module *owner)
{
 module_put(owner);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_struct_ops_map_sys_lookup_elem(struct bpf_map *map,
           void *key,
           void *value)
{
 return -22;
}


struct bpf_array {
 struct bpf_map map;
 u32 elem_size;
 u32 index_mask;
 struct bpf_array_aux *aux;
 union {
  char value[0] __attribute__((__aligned__(8)));
  void *ptrs[0] __attribute__((__aligned__(8)));
  void *pptrs[0] __attribute__((__aligned__(8)));
 };
};
# 1094 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 bpf_map_flags_to_cap(struct bpf_map *map)
{
 u32 access_flags = map->map_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);




 if (access_flags & BPF_F_RDONLY_PROG)
  return ((((1UL))) << (0));
 else if (access_flags & BPF_F_WRONLY_PROG)
  return ((((1UL))) << (1));
 else
  return ((((1UL))) << (0)) | ((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_map_flags_access_ok(u32 access_flags)
{
 return (access_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG)) !=
        (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);
}

struct bpf_event_entry {
 struct perf_event *event;
 struct file *perf_file;
 struct file *map_file;
 struct callback_head rcu;
};

bool bpf_prog_array_compatible(struct bpf_array *array, const struct bpf_prog *fp);
int bpf_prog_calc_tag(struct bpf_prog *fp);

const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
const struct bpf_func_proto *bpf_get_trace_vprintk_proto(void);

typedef unsigned long (*bpf_ctx_copy_t)(void *dst, const void *src,
     unsigned long off, unsigned long len);
typedef u32 (*bpf_convert_ctx_access_t)(enum bpf_access_type type,
     const struct bpf_insn *src,
     struct bpf_insn *dst,
     struct bpf_prog *prog,
     u32 *target_size);

u64 bpf_event_output(struct bpf_map *map, u64 flags, void *meta, u64 meta_size,
       void *ctx, u64 ctx_size, bpf_ctx_copy_t ctx_copy);
# 1151 "./include/linux/bpf.h"
struct bpf_prog_array_item {
 struct bpf_prog *prog;
 union {
  struct bpf_cgroup_storage *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
  u64 bpf_cookie;
 };
};

struct bpf_prog_array {
 struct callback_head rcu;
 struct bpf_prog_array_item items[];
};

struct bpf_prog_array *bpf_prog_array_alloc(u32 prog_cnt, gfp_t flags);
void bpf_prog_array_free(struct bpf_prog_array *progs);
int bpf_prog_array_length(struct bpf_prog_array *progs);
bool bpf_prog_array_is_empty(struct bpf_prog_array *array);
int bpf_prog_array_copy_to_user(struct bpf_prog_array *progs,
    __u32 *prog_ids, u32 cnt);

void bpf_prog_array_delete_safe(struct bpf_prog_array *progs,
    struct bpf_prog *old_prog);
int bpf_prog_array_delete_safe_at(struct bpf_prog_array *array, int index);
int bpf_prog_array_update_at(struct bpf_prog_array *array, int index,
        struct bpf_prog *prog);
int bpf_prog_array_copy_info(struct bpf_prog_array *array,
        u32 *prog_ids, u32 request_cnt,
        u32 *prog_cnt);
int bpf_prog_array_copy(struct bpf_prog_array *old_array,
   struct bpf_prog *exclude_prog,
   struct bpf_prog *include_prog,
   u64 bpf_cookie,
   struct bpf_prog_array **new_array);

struct bpf_run_ctx {};

struct bpf_cg_run_ctx {
 struct bpf_run_ctx run_ctx;
 const struct bpf_prog_array_item *prog_item;
};

struct bpf_trace_run_ctx {
 struct bpf_run_ctx run_ctx;
 u64 bpf_cookie;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_run_ctx *bpf_set_run_ctx(struct bpf_run_ctx *new_ctx)
{
 struct bpf_run_ctx *old_ctx = ((void *)0);





 return old_ctx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_reset_run_ctx(struct bpf_run_ctx *old_ctx)
{



}






typedef u32 (*bpf_prog_run_fn)(const struct bpf_prog *prog, const void *ctx);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG_FLAGS(const struct bpf_prog_array *array_rcu,
       const void *ctx, bpf_prog_run_fn run_prog,
       u32 *ret_flags)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;
 u32 func_ret;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_326(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_326(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_327(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_327(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  func_ret = run_prog(prog, ctx);
  ret &= (func_ret & 1);
  *(ret_flags) |= (func_ret >> 1);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG(const struct bpf_prog_array *array_rcu,
        const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_328(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_328(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_329(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_329(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY(const struct bpf_prog_array *array_rcu,
     const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_trace_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_330(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_330(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 if (__builtin_expect(!!(!array), 0))
  goto out;
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 item = &array->items[0];
 while ((prog = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_331(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_331(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.bpf_cookie = item->bpf_cookie;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
out:
 rcu_read_unlock();
 migrate_enable();
 return ret;
}
# 1736 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_prog *bpf_prog_get(u32 ufd)
{
 return ERR_PTR(-95);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_prog *bpf_prog_get_type_dev(u32 ufd,
           enum bpf_prog_type type,
           bool attach_drv)
{
 return ERR_PTR(-95);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_prog_add(struct bpf_prog *prog, int i)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_prog_sub(struct bpf_prog *prog, int i)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_prog_put(struct bpf_prog *prog)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_prog_inc(struct bpf_prog *prog)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_prog *__attribute__((__warn_unused_result__))
bpf_prog_inc_not_zero(struct bpf_prog *prog)
{
 return ERR_PTR(-95);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_link_init(struct bpf_link *link, enum bpf_link_type type,
     const struct bpf_link_ops *ops,
     struct bpf_prog *prog)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_link_prime(struct bpf_link *link,
     struct bpf_link_primer *primer)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_link_settle(struct bpf_link_primer *primer)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_link_cleanup(struct bpf_link_primer *primer)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_link_inc(struct bpf_link *link)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_link_put(struct bpf_link *link)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_obj_get_user(const char *pathname, int flags)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dev_map_can_have_prog(struct bpf_map *map)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dev_flush(void)
{
}

struct xdp_buff;
struct bpf_dtab_netdev;
struct bpf_cpu_map_entry;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
int dev_xdp_enqueue(struct net_device *dev, struct xdp_buff *xdp,
      struct net_device *dev_rx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
int dev_map_enqueue(struct bpf_dtab_netdev *dst, struct xdp_buff *xdp,
      struct net_device *dev_rx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
int dev_map_enqueue_multi(struct xdp_buff *xdp, struct net_device *dev_rx,
     struct bpf_map *map, bool exclude_ingress)
{
 return 0;
}

struct sk_buff;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dev_map_generic_redirect(struct bpf_dtab_netdev *dst,
        struct sk_buff *skb,
        struct bpf_prog *xdp_prog)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
int dev_map_redirect_multi(struct net_device *dev, struct sk_buff *skb,
      struct bpf_prog *xdp_prog, struct bpf_map *map,
      bool exclude_ingress)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __cpu_map_flush(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpu_map_enqueue(struct bpf_cpu_map_entry *rcpu,
      struct xdp_buff *xdp,
      struct net_device *dev_rx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpu_map_generic_redirect(struct bpf_cpu_map_entry *rcpu,
        struct sk_buff *skb)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_map_prog_allowed(struct bpf_map *map)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_prog *bpf_prog_get_type_path(const char *name,
    enum bpf_prog_type type)
{
 return ERR_PTR(-95);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_prog_test_run_xdp(struct bpf_prog *prog,
     const union bpf_attr *kattr,
     union bpf_attr *uattr)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_prog_test_run_skb(struct bpf_prog *prog,
     const union bpf_attr *kattr,
     union bpf_attr *uattr)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_prog_test_run_tracing(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_prog_test_run_flow_dissector(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_prog_test_run_sk_lookup(struct bpf_prog *prog,
           const union bpf_attr *kattr,
           union bpf_attr *uattr)
{
 return -524;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_prog_test_check_kfunc_call(u32 kfunc_id,
        struct module *owner)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_map_put(struct bpf_map *map)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_prog *bpf_prog_by_id(u32 id)
{
 return ERR_PTR(-524);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct bpf_func_proto *
bpf_base_func_proto(enum bpf_func_id func_id)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_task_storage_free(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_prog_has_kfunc_call(const struct bpf_prog *prog)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct btf_func_model *
bpf_jit_find_kfunc_model(const struct bpf_prog *prog,
    const struct bpf_insn *insn)
{
 return ((void *)0);
}


void __bpf_free_used_btfs(struct bpf_prog_aux *aux,
     struct btf_mod_pair *used_btfs, u32 len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_prog *bpf_prog_get_type(u32 ufd,
       enum bpf_prog_type type)
{
 return bpf_prog_get_type_dev(ufd, type, false);
}

void __bpf_free_used_maps(struct bpf_prog_aux *aux,
     struct bpf_map **used_maps, u32 len);

bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);

int bpf_prog_offload_compile(struct bpf_prog *prog);
void bpf_prog_offload_destroy(struct bpf_prog *prog);
int bpf_prog_offload_info_fill(struct bpf_prog_info *info,
          struct bpf_prog *prog);

int bpf_map_offload_info_fill(struct bpf_map_info *info, struct bpf_map *map);

int bpf_map_offload_lookup_elem(struct bpf_map *map, void *key, void *value);
int bpf_map_offload_update_elem(struct bpf_map *map,
    void *key, void *value, u64 flags);
int bpf_map_offload_delete_elem(struct bpf_map *map, void *key);
int bpf_map_offload_get_next_key(struct bpf_map *map,
     void *key, void *next_key);

bool bpf_offload_prog_map_match(struct bpf_prog *prog, struct bpf_map *map);

struct bpf_offload_dev *
bpf_offload_dev_create(const struct bpf_prog_offload_ops *ops, void *priv);
void bpf_offload_dev_destroy(struct bpf_offload_dev *offdev);
void *bpf_offload_dev_priv(struct bpf_offload_dev *offdev);
int bpf_offload_dev_netdev_register(struct bpf_offload_dev *offdev,
        struct net_device *netdev);
void bpf_offload_dev_netdev_unregister(struct bpf_offload_dev *offdev,
           struct net_device *netdev);
bool bpf_offload_dev_match(struct bpf_prog *prog, struct net_device *netdev);
# 2021 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_prog_offload_init(struct bpf_prog *prog,
     union bpf_attr *attr)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_prog_is_dev_bound(struct bpf_prog_aux *aux)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_map_is_dev_bound(struct bpf_map *map)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *attr)
{
 return ERR_PTR(-95);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_map_offload_map_free(struct bpf_map *map)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_prog_test_run_syscall(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr)
{
 return -524;
}
# 2081 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_sk_reuseport_detach(struct sock *sk)
{
}
# 2102 "./include/linux/bpf.h"
extern const struct bpf_func_proto bpf_map_lookup_elem_proto;
extern const struct bpf_func_proto bpf_map_update_elem_proto;
extern const struct bpf_func_proto bpf_map_delete_elem_proto;
extern const struct bpf_func_proto bpf_map_push_elem_proto;
extern const struct bpf_func_proto bpf_map_pop_elem_proto;
extern const struct bpf_func_proto bpf_map_peek_elem_proto;

extern const struct bpf_func_proto bpf_get_prandom_u32_proto;
extern const struct bpf_func_proto bpf_get_smp_processor_id_proto;
extern const struct bpf_func_proto bpf_get_numa_node_id_proto;
extern const struct bpf_func_proto bpf_tail_call_proto;
extern const struct bpf_func_proto bpf_ktime_get_ns_proto;
extern const struct bpf_func_proto bpf_ktime_get_boot_ns_proto;
extern const struct bpf_func_proto bpf_get_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_get_current_uid_gid_proto;
extern const struct bpf_func_proto bpf_get_current_comm_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto;
extern const struct bpf_func_proto bpf_get_stack_proto;
extern const struct bpf_func_proto bpf_get_task_stack_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto_pe;
extern const struct bpf_func_proto bpf_get_stack_proto_pe;
extern const struct bpf_func_proto bpf_sock_map_update_proto;
extern const struct bpf_func_proto bpf_sock_hash_update_proto;
extern const struct bpf_func_proto bpf_get_current_cgroup_id_proto;
extern const struct bpf_func_proto bpf_get_current_ancestor_cgroup_id_proto;
extern const struct bpf_func_proto bpf_msg_redirect_hash_proto;
extern const struct bpf_func_proto bpf_msg_redirect_map_proto;
extern const struct bpf_func_proto bpf_sk_redirect_hash_proto;
extern const struct bpf_func_proto bpf_sk_redirect_map_proto;
extern const struct bpf_func_proto bpf_spin_lock_proto;
extern const struct bpf_func_proto bpf_spin_unlock_proto;
extern const struct bpf_func_proto bpf_get_local_storage_proto;
extern const struct bpf_func_proto bpf_strtol_proto;
extern const struct bpf_func_proto bpf_strtoul_proto;
extern const struct bpf_func_proto bpf_tcp_sock_proto;
extern const struct bpf_func_proto bpf_jiffies64_proto;
extern const struct bpf_func_proto bpf_get_ns_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_event_output_data_proto;
extern const struct bpf_func_proto bpf_ringbuf_output_proto;
extern const struct bpf_func_proto bpf_ringbuf_reserve_proto;
extern const struct bpf_func_proto bpf_ringbuf_submit_proto;
extern const struct bpf_func_proto bpf_ringbuf_discard_proto;
extern const struct bpf_func_proto bpf_ringbuf_query_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp6_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_timewait_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_request_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_udp6_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_unix_sock_proto;
extern const struct bpf_func_proto bpf_copy_from_user_proto;
extern const struct bpf_func_proto bpf_snprintf_btf_proto;
extern const struct bpf_func_proto bpf_snprintf_proto;
extern const struct bpf_func_proto bpf_per_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_this_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_ktime_get_coarse_ns_proto;
extern const struct bpf_func_proto bpf_sock_from_file_proto;
extern const struct bpf_func_proto bpf_get_socket_ptr_cookie_proto;
extern const struct bpf_func_proto bpf_task_storage_get_proto;
extern const struct bpf_func_proto bpf_task_storage_delete_proto;
extern const struct bpf_func_proto bpf_for_each_map_elem_proto;
extern const struct bpf_func_proto bpf_btf_find_by_name_kind_proto;
extern const struct bpf_func_proto bpf_sk_setsockopt_proto;
extern const struct bpf_func_proto bpf_sk_getsockopt_proto;
extern const struct bpf_func_proto bpf_kallsyms_lookup_name_proto;

const struct bpf_func_proto *tracing_prog_func_proto(
  enum bpf_func_id func_id, const struct bpf_prog *prog);


void bpf_user_rnd_init_once(void);
u64 bpf_user_rnd_u32(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
u64 bpf_get_raw_cpu_id(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);


bool bpf_sock_common_is_valid_access(int off, int size,
         enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
bool bpf_sock_is_valid_access(int off, int size, enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
u32 bpf_sock_convert_ctx_access(enum bpf_access_type type,
    const struct bpf_insn *si,
    struct bpf_insn *insn_buf,
    struct bpf_prog *prog,
    u32 *target_size);
# 2238 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_tcp_sock_is_valid_access(int off, int size,
      enum bpf_access_type type,
      struct bpf_insn_access_aux *info)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_xdp_sock_is_valid_access(int off, int size,
      enum bpf_access_type type,
      struct bpf_insn_access_aux *info)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size)
{
 return 0;
}


enum bpf_text_poke_type {
 BPF_MOD_CALL,
 BPF_MOD_JUMP,
};

int bpf_arch_text_poke(void *ip, enum bpf_text_poke_type t,
         void *addr1, void *addr2);

struct btf_id_set;
bool btf_id_set_contains(const struct btf_id_set *set, u32 id);



int bpf_bprintf_prepare(char *fmt, u32 fmt_size, const u64 *raw_args,
   u32 **bin_buf, u32 num_args);
void bpf_bprintf_cleanup(void);
# 6 "./include/linux/bpf-cgroup.h" 2







struct sock;
struct sockaddr;
struct cgroup;
struct sk_buff;
struct bpf_map;
struct bpf_prog;
struct bpf_sock_ops_kern;
struct bpf_cgroup_storage;
struct ctl_table;
struct ctl_table_header;
struct task_struct;
# 454 "./include/linux/bpf-cgroup.h"
struct cgroup_bpf {};
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cgroup_bpf_inherit(struct cgroup *cgrp) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_bpf_offline(struct cgroup *cgrp) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cgroup_bpf_prog_attach(const union bpf_attr *attr,
      enum bpf_prog_type ptype,
      struct bpf_prog *prog)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cgroup_bpf_prog_detach(const union bpf_attr *attr,
      enum bpf_prog_type ptype)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cgroup_bpf_link_attach(const union bpf_attr *attr,
      struct bpf_prog *prog)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cgroup_bpf_prog_query(const union bpf_attr *attr,
     union bpf_attr *uattr)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_cgroup_storage_assign(struct bpf_prog_aux *aux,
         struct bpf_map *map) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(
 struct bpf_prog *prog, enum bpf_cgroup_storage_type stype) { return ((void *)0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_cgroup_storage_free(
 struct bpf_cgroup_storage *storage) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_percpu_cgroup_storage_copy(struct bpf_map *map, void *key,
       void *value) {
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_percpu_cgroup_storage_update(struct bpf_map *map,
     void *key, void *value, u64 flags) {
 return 0;
}
# 23 "./include/linux/cgroup-defs.h" 2
# 1 "./include/linux/psi_types.h" 1



# 1 "./include/linux/kthread.h" 1







struct mm_struct;

__attribute__((__format__(printf, 4, 5)))
struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),
        void *data,
        int node,
        const char namefmt[], ...);
# 31 "./include/linux/kthread.h"
struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
       void *data,
       unsigned int cpu,
       const char *namefmt);

void set_kthread_struct(struct task_struct *p);

void kthread_set_per_cpu(struct task_struct *k, int cpu);
bool kthread_is_per_cpu(struct task_struct *k);
# 59 "./include/linux/kthread.h"
void free_kthread_struct(struct task_struct *k);
void kthread_bind(struct task_struct *k, unsigned int cpu);
void kthread_bind_mask(struct task_struct *k, const struct cpumask *mask);
int kthread_stop(struct task_struct *k);
bool kthread_should_stop(void);
bool kthread_should_park(void);
bool __kthread_should_park(struct task_struct *k);
bool kthread_freezable_should_stop(bool *was_frozen);
void *kthread_func(struct task_struct *k);
void *kthread_data(struct task_struct *k);
void *kthread_probe_data(struct task_struct *k);
int kthread_park(struct task_struct *k);
void kthread_unpark(struct task_struct *k);
void kthread_parkme(void);

int kthreadd(void *unused);
extern struct task_struct *kthreadd_task;
extern int tsk_fork_get_node(struct task_struct *tsk);
# 86 "./include/linux/kthread.h"
struct kthread_work;
typedef void (*kthread_work_func_t)(struct kthread_work *work);
void kthread_delayed_work_timer_fn(struct timer_list *t);

enum {
 KTW_FREEZABLE = 1 << 0,
};

struct kthread_worker {
 unsigned int flags;
 raw_spinlock_t lock;
 struct list_head work_list;
 struct list_head delayed_work_list;
 struct task_struct *task;
 struct kthread_work *current_work;
};

struct kthread_work {
 struct list_head node;
 kthread_work_func_t func;
 struct kthread_worker *worker;

 int canceling;
};

struct kthread_delayed_work {
 struct kthread_work work;
 struct timer_list timer;
};
# 156 "./include/linux/kthread.h"
extern void __kthread_init_worker(struct kthread_worker *worker,
   const char *name, struct lock_class_key *key);
# 180 "./include/linux/kthread.h"
int kthread_worker_fn(void *worker_ptr);

__attribute__((__format__(printf, 2, 3)))
struct kthread_worker *
kthread_create_worker(unsigned int flags, const char namefmt[], ...);

__attribute__((__format__(printf, 3, 4))) struct kthread_worker *
kthread_create_worker_on_cpu(int cpu, unsigned int flags,
        const char namefmt[], ...);

bool kthread_queue_work(struct kthread_worker *worker,
   struct kthread_work *work);

bool kthread_queue_delayed_work(struct kthread_worker *worker,
    struct kthread_delayed_work *dwork,
    unsigned long delay);

bool kthread_mod_delayed_work(struct kthread_worker *worker,
         struct kthread_delayed_work *dwork,
         unsigned long delay);

void kthread_flush_work(struct kthread_work *work);
void kthread_flush_worker(struct kthread_worker *worker);

bool kthread_cancel_work_sync(struct kthread_work *work);
bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *work);

void kthread_destroy_worker(struct kthread_worker *worker);

void kthread_use_mm(struct mm_struct *mm);
void kthread_unuse_mm(struct mm_struct *mm);

struct cgroup_subsys_state;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kthread_associate_blkcg(struct cgroup_subsys_state *css) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup_subsys_state *kthread_blkcg(void)
{
 return ((void *)0);
}
# 5 "./include/linux/psi_types.h" 2








enum psi_task_count {
 NR_IOWAIT,
 NR_MEMSTALL,
 NR_RUNNING,






 NR_ONCPU,
 NR_PSI_TASK_COUNTS = 4,
};
# 34 "./include/linux/psi_types.h"
enum psi_res {
 PSI_IO,
 PSI_MEM,
 PSI_CPU,
 NR_PSI_RESOURCES = 3,
};







enum psi_states {
 PSI_IO_SOME,
 PSI_IO_FULL,
 PSI_MEM_SOME,
 PSI_MEM_FULL,
 PSI_CPU_SOME,
 PSI_CPU_FULL,

 PSI_NONIDLE,
 NR_PSI_STATES = 7,
};

enum psi_aggregators {
 PSI_AVGS = 0,
 PSI_POLL,
 NR_PSI_AGGREGATORS,
};

struct psi_group_cpu {



 seqcount_t seq ;


 unsigned int tasks[NR_PSI_TASK_COUNTS];


 u32 state_mask;


 u32 times[NR_PSI_STATES];


 u64 state_start;




 u32 times_prev[NR_PSI_AGGREGATORS][NR_PSI_STATES]
                               ;
};


struct psi_window {

 u64 size;


 u64 start_time;


 u64 start_value;


 u64 prev_growth;
};

struct psi_trigger {

 enum psi_states state;


 u64 threshold;


 struct list_head node;


 struct psi_group *group;


 wait_queue_head_t event_wait;


 int event;


 struct psi_window win;





 u64 last_event_time;


 struct kref refcount;
};

struct psi_group {

 struct mutex avgs_lock;


 struct psi_group_cpu *pcpu;


 u64 avg_total[NR_PSI_STATES - 1];
 u64 avg_last_update;
 u64 avg_next_update;


 struct delayed_work avgs_work;


 u64 total[NR_PSI_AGGREGATORS][NR_PSI_STATES - 1];
 unsigned long avg[NR_PSI_STATES - 1][3];


 struct task_struct *poll_task;
 struct timer_list poll_timer;
 wait_queue_head_t poll_wait;
 atomic_t poll_wakeup;


 struct mutex trigger_lock;


 struct list_head triggers;
 u32 nr_triggers[NR_PSI_STATES - 1];
 u32 poll_states;
 u64 poll_min_period;


 u64 polling_total[NR_PSI_STATES - 1];
 u64 polling_next_update;
 u64 polling_until;
};
# 24 "./include/linux/cgroup-defs.h" 2



struct cgroup;
struct cgroup_root;
struct cgroup_subsys;
struct cgroup_taskset;
struct kernfs_node;
struct kernfs_ops;
struct kernfs_open_file;
struct seq_file;
struct poll_table_struct;







enum cgroup_subsys_id {
# 1 "./include/linux/cgroup_subsys.h" 1
# 21 "./include/linux/cgroup_subsys.h"
cpuacct_cgrp_id,







memory_cgrp_id,
# 41 "./include/linux/cgroup_subsys.h"
net_cls_cgrp_id,
# 61 "./include/linux/cgroup_subsys.h"
rdma_cgrp_id,
# 45 "./include/linux/cgroup-defs.h" 2
 CGROUP_SUBSYS_COUNT,
};



enum {
 CSS_NO_REF = (1 << 0),
 CSS_ONLINE = (1 << 1),
 CSS_RELEASED = (1 << 2),
 CSS_VISIBLE = (1 << 3),
 CSS_DYING = (1 << 4),
};


enum {

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,


 CGRP_FREEZE,


 CGRP_FROZEN,


 CGRP_KILL,
};


enum {
 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),






 CGRP_ROOT_NS_DELEGATE = (1 << 3),




 CGRP_ROOT_CPUSET_V2_MODE = (1 << 4),




 CGRP_ROOT_MEMORY_LOCAL_EVENTS = (1 << 5),




 CGRP_ROOT_MEMORY_RECURSIVE_PROT = (1 << 6),
};


enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_NS_DELEGATABLE = (1 << 2),

 CFTYPE_NO_PREFIX = (1 << 3),
 CFTYPE_WORLD_WRITABLE = (1 << 4),
 CFTYPE_DEBUG = (1 << 5),
 CFTYPE_PRESSURE = (1 << 6),


 __CFTYPE_ONLY_ON_DFL = (1 << 16),
 __CFTYPE_NOT_ON_DFL = (1 << 17),
};






struct cgroup_file {

 struct kernfs_node *kn;
 unsigned long notified_at;
 struct timer_list notify_timer;
};
# 142 "./include/linux/cgroup-defs.h"
struct cgroup_subsys_state {

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct list_head sibling;
 struct list_head children;


 struct list_head rstat_css_node;





 int id;

 unsigned int flags;







 u64 serial_nr;





 atomic_t online_cnt;


 struct work_struct destroy_work;
 struct rcu_work destroy_rwork;





 struct cgroup_subsys_state *parent;
};
# 199 "./include/linux/cgroup-defs.h"
struct css_set {





 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];


 refcount_t refcount;







 struct css_set *dom_cset;


 struct cgroup *dfl_cgrp;


 int nr_tasks;
# 231 "./include/linux/cgroup-defs.h"
 struct list_head tasks;
 struct list_head mg_tasks;
 struct list_head dying_tasks;


 struct list_head task_iters;
# 245 "./include/linux/cgroup-defs.h"
 struct list_head e_cset_node[CGROUP_SUBSYS_COUNT];


 struct list_head threaded_csets;
 struct list_head threaded_csets_node;





 struct hlist_node hlist;





 struct list_head cgrp_links;





 struct list_head mg_preload_node;
 struct list_head mg_node;
# 277 "./include/linux/cgroup-defs.h"
 struct cgroup *mg_src_cgrp;
 struct cgroup *mg_dst_cgrp;
 struct css_set *mg_dst_cset;


 bool dead;


 struct callback_head callback_head;
};

struct cgroup_base_stat {
 struct task_cputime cputime;
};
# 312 "./include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {




 struct u64_stats_sync bsync;
 struct cgroup_base_stat bstat;





 struct cgroup_base_stat last_bstat;
# 337 "./include/linux/cgroup-defs.h"
 struct cgroup *updated_children;
 struct cgroup *updated_next;
};

struct cgroup_freezer_state {

 bool freeze;


 int e_freeze;




 int nr_frozen_descendants;





 int nr_frozen_tasks;
};

struct cgroup {

 struct cgroup_subsys_state self;

 unsigned long flags;







 int level;


 int max_depth;
# 388 "./include/linux/cgroup-defs.h"
 int nr_descendants;
 int nr_dying_descendants;
 int max_descendants;
# 403 "./include/linux/cgroup-defs.h"
 int nr_populated_csets;
 int nr_populated_domain_children;
 int nr_populated_threaded_children;

 int nr_threaded_children;

 struct kernfs_node *kn;
 struct cgroup_file procs_file;
 struct cgroup_file events_file;
# 420 "./include/linux/cgroup-defs.h"
 u16 subtree_control;
 u16 subtree_ss_mask;
 u16 old_subtree_control;
 u16 old_subtree_ss_mask;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroup_root *root;





 struct list_head cset_links;
# 443 "./include/linux/cgroup-defs.h"
 struct list_head e_csets[CGROUP_SUBSYS_COUNT];
# 452 "./include/linux/cgroup-defs.h"
 struct cgroup *dom_cgrp;
 struct cgroup *old_dom_cgrp;


 struct cgroup_rstat_cpu *rstat_cpu;
 struct list_head rstat_css_list;


 struct cgroup_base_stat last_bstat;
 struct cgroup_base_stat bstat;
 struct prev_cputime prev_cputime;





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 wait_queue_head_t offline_waitq;


 struct work_struct release_agent_work;


 struct psi_group psi;


 struct cgroup_bpf bpf;


 atomic_t congestion_count;


 struct cgroup_freezer_state freezer;


 u64 ancestor_ids[];
};






struct cgroup_root {
 struct kernfs_root *kf_root;


 unsigned int subsys_mask;


 int hierarchy_id;


 struct cgroup cgrp;


 u64 cgrp_ancestor_id_storage;


 atomic_t nr_cgrps;


 struct list_head root_list;


 unsigned int flags;


 char release_agent_path[4096];


 char name[64];
};
# 536 "./include/linux/cgroup-defs.h"
struct cftype {





 char name[64];
 unsigned long private;





 size_t max_write_len;


 unsigned int flags;







 unsigned int file_offset;





 struct cgroup_subsys *ss;
 struct list_head node;
 struct kernfs_ops *kf_ops;

 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);





 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);


 int (*seq_show)(struct seq_file *sf, void *v);


 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);







 ssize_t (*write)(struct kernfs_open_file *of,
    char *buf, size_t nbytes, loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);


 struct lock_class_key lockdep_key;

};





struct cgroup_subsys {
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_released)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);
 void (*css_reset)(struct cgroup_subsys_state *css);
 void (*css_rstat_flush)(struct cgroup_subsys_state *css, int cpu);
 int (*css_extra_stat_show)(struct seq_file *seq,
       struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_taskset *tset);
 void (*post_attach)(void);
 int (*can_fork)(struct task_struct *task,
   struct css_set *cset);
 void (*cancel_fork)(struct task_struct *task, struct css_set *cset);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct task_struct *task);
 void (*release)(struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 bool early_init:1;
# 661 "./include/linux/cgroup-defs.h"
 bool implicit_on_dfl:1;
# 673 "./include/linux/cgroup-defs.h"
 bool threaded:1;


 int id;
 const char *name;


 const char *legacy_name;


 struct cgroup_root *root;


 struct idr css_idr;





 struct list_head cfts;





 struct cftype *dfl_cftypes;
 struct cftype *legacy_cftypes;
# 708 "./include/linux/cgroup-defs.h"
 unsigned int depends_on;
};

extern struct percpu_rw_semaphore cgroup_threadgroup_rwsem;
# 720 "./include/linux/cgroup-defs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_threadgroup_change_begin(struct task_struct *tsk)
{
 percpu_down_read(&cgroup_threadgroup_rwsem);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_threadgroup_change_end(struct task_struct *tsk)
{
 percpu_up_read(&cgroup_threadgroup_rwsem);
}
# 761 "./include/linux/cgroup-defs.h"
struct sock_cgroup_data {
 struct cgroup *cgroup;

 u32 classid;




};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 sock_cgroup_prioidx(const struct sock_cgroup_data *skcd)
{



 return 1;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 sock_cgroup_classid(const struct sock_cgroup_data *skcd)
{

 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_332(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(skcd->classid) == sizeof(char) || sizeof(skcd->classid) == sizeof(short) || sizeof(skcd->classid) == sizeof(int) || sizeof(skcd->classid) == sizeof(long)) || sizeof(skcd->classid) == sizeof(long long))) __compiletime_assert_332(); } while (0); (*(const volatile typeof( _Generic((skcd->classid), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (skcd->classid))) *)&(skcd->classid)); });



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sock_cgroup_set_prioidx(struct sock_cgroup_data *skcd,
        u16 prioidx)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sock_cgroup_set_classid(struct sock_cgroup_data *skcd,
        u32 classid)
{

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_333(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(skcd->classid) == sizeof(char) || sizeof(skcd->classid) == sizeof(short) || sizeof(skcd->classid) == sizeof(int) || sizeof(skcd->classid) == sizeof(long)) || sizeof(skcd->classid) == sizeof(long long))) __compiletime_assert_333(); } while (0); do { *(volatile typeof(skcd->classid) *)&(skcd->classid) = (classid); } while (0); } while (0);

}
# 29 "./include/linux/cgroup.h" 2

struct kernel_clone_args;
# 52 "./include/linux/cgroup.h"
struct css_task_iter {
 struct cgroup_subsys *ss;
 unsigned int flags;

 struct list_head *cset_pos;
 struct list_head *cset_head;

 struct list_head *tcset_pos;
 struct list_head *tcset_head;

 struct list_head *task_pos;

 struct list_head *cur_tasks_head;
 struct css_set *cur_cset;
 struct css_set *cur_dcset;
 struct task_struct *cur_task;
 struct list_head iters_node;
};

extern struct cgroup_root cgrp_dfl_root;
extern struct css_set init_css_set;


# 1 "./include/linux/cgroup_subsys.h" 1
# 21 "./include/linux/cgroup_subsys.h"
extern struct cgroup_subsys cpuacct_cgrp_subsys;







extern struct cgroup_subsys memory_cgrp_subsys;
# 41 "./include/linux/cgroup_subsys.h"
extern struct cgroup_subsys net_cls_cgrp_subsys;
# 61 "./include/linux/cgroup_subsys.h"
extern struct cgroup_subsys rdma_cgrp_subsys;
# 76 "./include/linux/cgroup.h" 2





# 1 "./include/linux/cgroup_subsys.h" 1
# 21 "./include/linux/cgroup_subsys.h"
extern struct static_key_true cpuacct_cgrp_subsys_enabled_key; extern struct static_key_true cpuacct_cgrp_subsys_on_dfl_key;







extern struct static_key_true memory_cgrp_subsys_enabled_key; extern struct static_key_true memory_cgrp_subsys_on_dfl_key;
# 41 "./include/linux/cgroup_subsys.h"
extern struct static_key_true net_cls_cgrp_subsys_enabled_key; extern struct static_key_true net_cls_cgrp_subsys_on_dfl_key;
# 61 "./include/linux/cgroup_subsys.h"
extern struct static_key_true rdma_cgrp_subsys_enabled_key; extern struct static_key_true rdma_cgrp_subsys_on_dfl_key;
# 82 "./include/linux/cgroup.h" 2
# 98 "./include/linux/cgroup.h"
bool css_has_online_children(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_e_css(struct cgroup *cgroup,
      struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *cgroup,
          struct cgroup_subsys *ss);
struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *dentry,
             struct cgroup_subsys *ss);

struct cgroup *cgroup_get_from_path(const char *path);
struct cgroup *cgroup_get_from_fd(int fd);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_add_legacy_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);
void cgroup_file_notify(struct cgroup_file *cfile);

int task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);
int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry);
int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
       struct pid *pid, struct task_struct *tsk);

void cgroup_fork(struct task_struct *p);
extern int cgroup_can_fork(struct task_struct *p,
      struct kernel_clone_args *kargs);
extern void cgroup_cancel_fork(struct task_struct *p,
          struct kernel_clone_args *kargs);
extern void cgroup_post_fork(struct task_struct *p,
        struct kernel_clone_args *kargs);
void cgroup_exit(struct task_struct *p);
void cgroup_release(struct task_struct *p);
void cgroup_free(struct task_struct *p);

int cgroup_init_early(void);
int cgroup_init(void);

int cgroup_parse_float(const char *input, unsigned dec_shift, s64 *v);





struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);
struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *pos,
          struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *pos,
           struct cgroup_subsys_state *css);

struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset,
      struct cgroup_subsys_state **dst_cssp);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset,
     struct cgroup_subsys_state **dst_cssp);

void css_task_iter_start(struct cgroup_subsys_state *css, unsigned int flags,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);
# 310 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 cgroup_id(const struct cgroup *cgrp)
{
 return cgrp->kn->id;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void css_get(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get(&css->refcnt);
}
# 334 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void css_get_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get_many(&css->refcnt, n);
}
# 351 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool css_tryget(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget(&css->refcnt);
 return true;
}
# 368 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool css_tryget_online(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget_live(&css->refcnt);
 return true;
}
# 390 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool css_is_dying(struct cgroup_subsys_state *css)
{
 return !(css->flags & CSS_NO_REF) && percpu_ref_is_dying(&css->refcnt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put(&css->refcnt);
}
# 414 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void css_put_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put_many(&css->refcnt, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_get(struct cgroup *cgrp)
{
 css_get(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cgroup_tryget(struct cgroup *cgrp)
{
 return css_tryget(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_put(struct cgroup *cgrp)
{
 css_put(&cgrp->self);
}
# 479 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct css_set *task_css_set(struct task_struct *task)
{
 return ({ typeof(*((task)->cgroups)) *________p1 = (typeof(*((task)->cgroups)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_334(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((task)->cgroups)) == sizeof(char) || sizeof(((task)->cgroups)) == sizeof(short) || sizeof(((task)->cgroups)) == sizeof(int) || sizeof(((task)->cgroups)) == sizeof(long)) || sizeof(((task)->cgroups)) == sizeof(long long))) __compiletime_assert_334(); } while (0); (*(const volatile typeof( _Generic((((task)->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((task)->cgroups)))) *)&(((task)->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*((task)->cgroups)) *)(________p1)); });
}
# 491 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_335(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_335(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)];
}
# 506 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup_subsys_state *
task_get_css(struct task_struct *task, int subsys_id)
{
 struct cgroup_subsys_state *css;

 rcu_read_lock();
 while (true) {
  css = task_css(task, subsys_id);






  if (__builtin_expect(!!(css_tryget(css)), 1))
   break;
  cpu_relax();
 }
 rcu_read_unlock();
 return css;
}
# 536 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_css_is_root(struct task_struct *task, int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_336(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_336(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)] ==
  init_css_set.subsys[subsys_id];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup *task_dfl_cgroup(struct task_struct *task)
{
 return task_css_set(task)->dfl_cgrp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup *cgroup_parent(struct cgroup *cgrp)
{
 struct cgroup_subsys_state *parent_css = cgrp->self.parent;

 if (parent_css)
  return ({ void *__mptr = (void *)(parent_css); _Static_assert(__builtin_types_compatible_p(typeof(*(parent_css)), typeof(((struct cgroup *)0)->self)) || __builtin_types_compatible_p(typeof(*(parent_css)), typeof(void)), "pointer type mismatch in container_of()"); ((struct cgroup *)(__mptr - __builtin_offsetof(struct cgroup, self))); });
 return ((void *)0);
}
# 571 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cgroup_is_descendant(struct cgroup *cgrp,
     struct cgroup *ancestor)
{
 if (cgrp->root != ancestor->root || cgrp->level < ancestor->level)
  return false;
 return cgrp->ancestor_ids[ancestor->level] == cgroup_id(ancestor);
}
# 590 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup *cgroup_ancestor(struct cgroup *cgrp,
          int ancestor_level)
{
 if (cgrp->level < ancestor_level)
  return ((void *)0);
 while (cgrp && cgrp->level > ancestor_level)
  cgrp = cgroup_parent(cgrp);
 return cgrp;
}
# 609 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_under_cgroup_hierarchy(struct task_struct *task,
            struct cgroup *ancestor)
{
 struct css_set *cset = task_css_set(task);

 return cgroup_is_descendant(cset->dfl_cgrp, ancestor);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cgroup_is_populated(struct cgroup *cgrp)
{
 return cgrp->nr_populated_csets + cgrp->nr_populated_domain_children +
  cgrp->nr_populated_threaded_children;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t cgroup_ino(struct cgroup *cgrp)
{
 return kernfs_ino(cgrp->kn);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cftype *of_cft(struct kernfs_open_file *of)
{
 return of->kn->priv;
}

struct cgroup_subsys_state *of_css(struct kernfs_open_file *of);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cftype *seq_cft(struct seq_file *seq)
{
 return of_cft(seq->private);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup_subsys_state *seq_css(struct seq_file *seq)
{
 return of_css(seq->private);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cgroup_name(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_name(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cgroup_path(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_path(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pr_cont_cgroup_name(struct cgroup *cgrp)
{
 pr_cont_kernfs_name(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pr_cont_cgroup_path(struct cgroup *cgrp)
{
 pr_cont_kernfs_path(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct psi_group *cgroup_psi(struct cgroup *cgrp)
{
 return &cgrp->psi;
}

bool cgroup_psi_enabled(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_init_kthreadd(void)
{





 get_current()->no_cgroup_migration = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_kthread_ready(void)
{




 get_current()->no_cgroup_migration = 0;
}

void cgroup_path_from_kernfs_id(u64 id, char *buf, size_t buflen);
struct cgroup *cgroup_get_from_id(u64 id);
# 765 "./include/linux/cgroup.h"
void cgroup_rstat_updated(struct cgroup *cgrp, int cpu);
void cgroup_rstat_flush(struct cgroup *cgrp);
void cgroup_rstat_flush_irqsafe(struct cgroup *cgrp);
void cgroup_rstat_flush_hold(struct cgroup *cgrp);
void cgroup_rstat_flush_release(void);





void cpuacct_charge(struct task_struct *tsk, u64 cputime);
void cpuacct_account_field(struct task_struct *tsk, int index, u64 val);






void __cgroup_account_cputime(struct cgroup *cgrp, u64 delta_exec);
void __cgroup_account_cputime_field(struct cgroup *cgrp,
        enum cpu_usage_stat index, u64 delta_exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_account_cputime(struct task_struct *task,
       u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_charge(task, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime(cgrp, delta_exec);
 rcu_read_unlock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_account_cputime_field(struct task_struct *task,
      enum cpu_usage_stat index,
      u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_account_field(task, index, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime_field(cgrp, index, delta_exec);
 rcu_read_unlock();
}
# 832 "./include/linux/cgroup.h"
void cgroup_sk_alloc(struct sock_cgroup_data *skcd);
void cgroup_sk_clone(struct sock_cgroup_data *skcd);
void cgroup_sk_free(struct sock_cgroup_data *skcd);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cgroup *sock_cgroup_ptr(struct sock_cgroup_data *skcd)
{
 return skcd->cgroup;
}
# 849 "./include/linux/cgroup.h"
struct cgroup_namespace {
 struct ns_common ns;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct css_set *root_cset;
};

extern struct cgroup_namespace init_cgroup_ns;



void free_cgroup_ns(struct cgroup_namespace *ns);

struct cgroup_namespace *copy_cgroup_ns(unsigned long flags,
     struct user_namespace *user_ns,
     struct cgroup_namespace *old_ns);

int cgroup_path_ns(struct cgroup *cgrp, char *buf, size_t buflen,
     struct cgroup_namespace *ns);
# 881 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->ns.count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->ns.count))
  free_cgroup_ns(ns);
}



void cgroup_enter_frozen(void);
void cgroup_leave_frozen(bool always_leave);
void cgroup_update_frozen(struct cgroup *cgrp);
void cgroup_freeze(struct cgroup *cgrp, bool freeze);
void cgroup_freezer_migrate_task(struct task_struct *task, struct cgroup *src,
     struct cgroup *dst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cgroup_task_frozen(struct task_struct *task)
{
 return task->frozen;
}
# 931 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_bpf_get(struct cgroup *cgrp) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_bpf_put(struct cgroup *cgrp) {}
# 58 "./include/linux/perf_event.h" 2

# 1 "./include/linux/security.h" 1
# 26 "./include/linux/security.h"
# 1 "./include/linux/kernel_read_file.h" 1
# 22 "./include/linux/kernel_read_file.h"
enum kernel_read_file_id {
 READING_UNKNOWN, READING_FIRMWARE, READING_MODULE, READING_KEXEC_IMAGE, READING_KEXEC_INITRAMFS, READING_POLICY, READING_X509_CERTIFICATE, READING_MAX_ID,
};

static const char * const kernel_read_file_str[] = {
 "unknown", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "x509-certificate", "",
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *kernel_read_file_id_str(enum kernel_read_file_id id)
{
 if ((unsigned int)id >= READING_MAX_ID)
  return kernel_read_file_str[READING_UNKNOWN];

 return kernel_read_file_str[id];
}

int kernel_read_file(struct file *file, loff_t offset,
       void **buf, size_t buf_size,
       size_t *file_size,
       enum kernel_read_file_id id);
int kernel_read_file_from_path(const char *path, loff_t offset,
          void **buf, size_t buf_size,
          size_t *file_size,
          enum kernel_read_file_id id);
int kernel_read_file_from_path_initns(const char *path, loff_t offset,
          void **buf, size_t buf_size,
          size_t *file_size,
          enum kernel_read_file_id id);
int kernel_read_file_from_fd(int fd, loff_t offset,
        void **buf, size_t buf_size,
        size_t *file_size,
        enum kernel_read_file_id id);
# 27 "./include/linux/security.h" 2








struct linux_binprm;
struct cred;
struct rlimit;
struct kernel_siginfo;
struct sembuf;
struct kern_ipc_perm;
struct audit_context;
struct super_block;
struct inode;
struct dentry;
struct file;
struct vfsmount;
struct path;
struct qstr;
struct iattr;
struct fown_struct;
struct file_operations;
struct msg_msg;
struct xattr;
struct kernfs_node;
struct xfrm_sec_ctx;
struct mm_struct;
struct fs_context;
struct fs_parameter;
enum fs_value_type;
struct watch;
struct watch_notification;
# 73 "./include/linux/security.h"
struct ctl_table;
struct audit_krule;
struct user_namespace;
struct timezone;

enum lsm_event {
 LSM_POLICY_CHANGE,
};
# 106 "./include/linux/security.h"
enum lockdown_reason {
 LOCKDOWN_NONE,
 LOCKDOWN_MODULE_SIGNATURE,
 LOCKDOWN_DEV_MEM,
 LOCKDOWN_EFI_TEST,
 LOCKDOWN_KEXEC,
 LOCKDOWN_HIBERNATION,
 LOCKDOWN_PCI_ACCESS,
 LOCKDOWN_IOPORT,
 LOCKDOWN_MSR,
 LOCKDOWN_ACPI_TABLES,
 LOCKDOWN_PCMCIA_CIS,
 LOCKDOWN_TIOCSSERIAL,
 LOCKDOWN_MODULE_PARAMETERS,
 LOCKDOWN_MMIOTRACE,
 LOCKDOWN_DEBUGFS,
 LOCKDOWN_XMON_WR,
 LOCKDOWN_BPF_WRITE_USER,
 LOCKDOWN_INTEGRITY_MAX,
 LOCKDOWN_KCORE,
 LOCKDOWN_KPROBES,
 LOCKDOWN_BPF_READ_KERNEL,
 LOCKDOWN_PERF,
 LOCKDOWN_TRACEFS,
 LOCKDOWN_XMON_RW,
 LOCKDOWN_XFRM_SECRET,
 LOCKDOWN_CONFIDENTIALITY_MAX,
};

extern const char *const lockdown_reasons[LOCKDOWN_CONFIDENTIALITY_MAX+1];


extern int cap_capable(const struct cred *cred, struct user_namespace *ns,
         int cap, unsigned int opts);
extern int cap_settime(const struct timespec64 *ts, const struct timezone *tz);
extern int cap_ptrace_access_check(struct task_struct *child, unsigned int mode);
extern int cap_ptrace_traceme(struct task_struct *parent);
extern int cap_capget(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern int cap_capset(struct cred *new, const struct cred *old,
        const kernel_cap_t *effective,
        const kernel_cap_t *inheritable,
        const kernel_cap_t *permitted);
extern int cap_bprm_creds_from_file(struct linux_binprm *bprm, struct file *file);
int cap_inode_setxattr(struct dentry *dentry, const char *name,
         const void *value, size_t size, int flags);
int cap_inode_removexattr(struct user_namespace *mnt_userns,
     struct dentry *dentry, const char *name);
int cap_inode_need_killpriv(struct dentry *dentry);
int cap_inode_killpriv(struct user_namespace *mnt_userns,
         struct dentry *dentry);
int cap_inode_getsecurity(struct user_namespace *mnt_userns,
     struct inode *inode, const char *name, void **buffer,
     bool alloc);
extern int cap_mmap_addr(unsigned long addr);
extern int cap_mmap_file(struct file *file, unsigned long reqprot,
    unsigned long prot, unsigned long flags);
extern int cap_task_fix_setuid(struct cred *new, const struct cred *old, int flags);
extern int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
     unsigned long arg4, unsigned long arg5);
extern int cap_task_setscheduler(struct task_struct *p);
extern int cap_task_setioprio(struct task_struct *p, int ioprio);
extern int cap_task_setnice(struct task_struct *p, int nice);
extern int cap_vm_enough_memory(struct mm_struct *mm, long pages);

struct msghdr;
struct sk_buff;
struct sock;
struct sockaddr;
struct socket;
struct flowi_common;
struct dst_entry;
struct xfrm_selector;
struct xfrm_policy;
struct xfrm_state;
struct xfrm_user_sec_ctx;
struct seq_file;
struct sctp_association;


extern unsigned long mmap_min_addr;
extern unsigned long dac_mmap_min_addr;
# 212 "./include/linux/security.h"
struct sched_param;
struct request_sock;







extern int mmap_min_addr_handler(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);



typedef int (*initxattrs) (struct inode *inode,
      const struct xattr *xattr_array, void *fs_data);






enum kernel_load_data_id {
 LOADING_UNKNOWN, LOADING_FIRMWARE, LOADING_MODULE, LOADING_KEXEC_IMAGE, LOADING_KEXEC_INITRAMFS, LOADING_POLICY, LOADING_X509_CERTIFICATE, LOADING_MAX_ID,
};

static const char * const kernel_load_data_str[] = {
 "unknown", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "x509-certificate", "",
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *kernel_load_data_id_str(enum kernel_load_data_id id)
{
 if ((unsigned)id >= LOADING_MAX_ID)
  return kernel_load_data_str[LOADING_UNKNOWN];

 return kernel_load_data_str[id];
}
# 478 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int call_blocking_lsm_notifier(enum lsm_event event, void *data)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_blocking_lsm_notifier(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_blocking_lsm_notifier(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_free_mnt_opts(void **mnt_opts)
{
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_init(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int early_security_init(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_binder_set_context_mgr(const struct cred *mgr)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_binder_transaction(const struct cred *from,
           const struct cred *to)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_binder_transfer_binder(const struct cred *from,
        const struct cred *to)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_binder_transfer_file(const struct cred *from,
      const struct cred *to,
      struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_ptrace_access_check(struct task_struct *child,
          unsigned int mode)
{
 return cap_ptrace_access_check(child, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_ptrace_traceme(struct task_struct *parent)
{
 return cap_ptrace_traceme(parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_capget(struct task_struct *target,
       kernel_cap_t *effective,
       kernel_cap_t *inheritable,
       kernel_cap_t *permitted)
{
 return cap_capget(target, effective, inheritable, permitted);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_capset(struct cred *new,
       const struct cred *old,
       const kernel_cap_t *effective,
       const kernel_cap_t *inheritable,
       const kernel_cap_t *permitted)
{
 return cap_capset(new, old, effective, inheritable, permitted);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_capable(const struct cred *cred,
       struct user_namespace *ns,
       int cap,
       unsigned int opts)
{
 return cap_capable(cred, ns, cap, opts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_quotactl(int cmds, int type, int id,
         struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_quota_on(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_syslog(int type)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_settime64(const struct timespec64 *ts,
         const struct timezone *tz)
{
 return cap_settime(ts, tz);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_vm_enough_memory_mm(struct mm_struct *mm, long pages)
{
 return __vm_enough_memory(mm, pages, cap_vm_enough_memory(mm, pages));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_bprm_creds_for_exec(struct linux_binprm *bprm)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_bprm_creds_from_file(struct linux_binprm *bprm,
      struct file *file)
{
 return cap_bprm_creds_from_file(bprm, file);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_bprm_check(struct linux_binprm *bprm)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_bprm_committing_creds(struct linux_binprm *bprm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_bprm_committed_creds(struct linux_binprm *bprm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_fs_context_dup(struct fs_context *fc,
       struct fs_context *src_fc)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_fs_context_parse_param(struct fs_context *fc,
        struct fs_parameter *param)
{
 return -519;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_alloc(struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sb_delete(struct super_block *sb)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sb_free(struct super_block *sb)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_eat_lsm_opts(char *options,
        void **mnt_opts)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_remount(struct super_block *sb,
          void *mnt_opts)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_mnt_opts_compat(struct super_block *sb,
           void *mnt_opts)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_kern_mount(struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_show_options(struct seq_file *m,
        struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_statfs(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_mount(const char *dev_name, const struct path *path,
        const char *type, unsigned long flags,
        void *data)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_umount(struct vfsmount *mnt, int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_pivotroot(const struct path *old_path,
     const struct path *new_path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_set_mnt_opts(struct super_block *sb,
        void *mnt_opts,
        unsigned long kern_flags,
        unsigned long *set_kern_flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sb_clone_mnt_opts(const struct super_block *oldsb,
           struct super_block *newsb,
           unsigned long kern_flags,
           unsigned long *set_kern_flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_add_mnt_opt(const char *option, const char *val,
     int len, void **mnt_opts)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_move_mount(const struct path *from_path,
          const struct path *to_path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_notify(const struct path *path, u64 mask,
    unsigned int obj_type)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_alloc(struct inode *inode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_inode_free(struct inode *inode)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_dentry_init_security(struct dentry *dentry,
       int mode,
       const struct qstr *name,
       const char **xattr_name,
       void **ctx,
       u32 *ctxlen)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_dentry_create_files_as(struct dentry *dentry,
        int mode, struct qstr *name,
        const struct cred *old,
        struct cred *new)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_init_security(struct inode *inode,
      struct inode *dir,
      const struct qstr *qstr,
      const initxattrs xattrs,
      void *fs_data)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_init_security_anon(struct inode *inode,
          const struct qstr *name,
          const struct inode *context_inode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_old_inode_init_security(struct inode *inode,
         struct inode *dir,
         const struct qstr *qstr,
         const char **name,
         void **value, size_t *len)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_create(struct inode *dir,
      struct dentry *dentry,
      umode_t mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_link(struct dentry *old_dentry,
           struct inode *dir,
           struct dentry *new_dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_unlink(struct inode *dir,
      struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_symlink(struct inode *dir,
       struct dentry *dentry,
       const char *old_name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_mkdir(struct inode *dir,
     struct dentry *dentry,
     int mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_rmdir(struct inode *dir,
     struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_mknod(struct inode *dir,
     struct dentry *dentry,
     int mode, dev_t dev)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_rename(struct inode *old_dir,
      struct dentry *old_dentry,
      struct inode *new_dir,
      struct dentry *new_dentry,
      unsigned int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_readlink(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_follow_link(struct dentry *dentry,
          struct inode *inode,
          bool rcu)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_permission(struct inode *inode, int mask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_setattr(struct dentry *dentry,
       struct iattr *attr)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_getattr(const struct path *path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_setxattr(struct user_namespace *mnt_userns,
  struct dentry *dentry, const char *name, const void *value,
  size_t size, int flags)
{
 return cap_inode_setxattr(dentry, name, value, size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_inode_post_setxattr(struct dentry *dentry,
  const char *name, const void *value, size_t size, int flags)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_getxattr(struct dentry *dentry,
   const char *name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_listxattr(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_removexattr(struct user_namespace *mnt_userns,
          struct dentry *dentry,
          const char *name)
{
 return cap_inode_removexattr(mnt_userns, dentry, name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_need_killpriv(struct dentry *dentry)
{
 return cap_inode_need_killpriv(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_killpriv(struct user_namespace *mnt_userns,
       struct dentry *dentry)
{
 return cap_inode_killpriv(mnt_userns, dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_getsecurity(struct user_namespace *mnt_userns,
          struct inode *inode,
          const char *name, void **buffer,
          bool alloc)
{
 return cap_inode_getsecurity(mnt_userns, inode, name, buffer, alloc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_setsecurity(struct inode *inode, const char *name, const void *value, size_t size, int flags)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_inode_getsecid(struct inode *inode, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_copy_up(struct dentry *src, struct cred **new)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernfs_init_security(struct kernfs_node *kn_dir,
      struct kernfs_node *kn)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_copy_up_xattr(const char *name)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_permission(struct file *file, int mask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_alloc(struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_file_free(struct file *file)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_ioctl(struct file *file, unsigned int cmd,
          unsigned long arg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_mmap_file(struct file *file, unsigned long prot,
         unsigned long flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_mmap_addr(unsigned long addr)
{
 return cap_mmap_addr(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_mprotect(struct vm_area_struct *vma,
      unsigned long reqprot,
      unsigned long prot)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_lock(struct file *file, unsigned int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_fcntl(struct file *file, unsigned int cmd,
          unsigned long arg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_file_set_fowner(struct file *file)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_send_sigiotask(struct task_struct *tsk,
            struct fown_struct *fown,
            int sig)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_receive(struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_file_open(struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_alloc(struct task_struct *task,
          unsigned long clone_flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_task_free(struct task_struct *task)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_cred_alloc_blank(struct cred *cred, gfp_t gfp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_cred_free(struct cred *cred)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_prepare_creds(struct cred *new,
      const struct cred *old,
      gfp_t gfp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_transfer_creds(struct cred *new,
        const struct cred *old)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_cred_getsecid(const struct cred *c, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernel_act_as(struct cred *cred, u32 secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernel_create_files_as(struct cred *cred,
        struct inode *inode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernel_module_request(char *kmod_name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernel_load_data(enum kernel_load_data_id id, bool contents)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernel_post_load_data(char *buf, loff_t size,
       enum kernel_load_data_id id,
       char *description)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernel_read_file(struct file *file,
         enum kernel_read_file_id id,
         bool contents)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_kernel_post_read_file(struct file *file,
       char *buf, loff_t size,
       enum kernel_read_file_id id)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_fix_setuid(struct cred *new,
        const struct cred *old,
        int flags)
{
 return cap_task_fix_setuid(new, old, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_fix_setgid(struct cred *new,
        const struct cred *old,
        int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_setpgid(struct task_struct *p, pid_t pgid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_getpgid(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_getsid(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_task_getsecid_subj(struct task_struct *p, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_task_getsecid_obj(struct task_struct *p, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_setnice(struct task_struct *p, int nice)
{
 return cap_task_setnice(p, nice);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_setioprio(struct task_struct *p, int ioprio)
{
 return cap_task_setioprio(p, ioprio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_getioprio(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_prlimit(const struct cred *cred,
     const struct cred *tcred,
     unsigned int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_setrlimit(struct task_struct *p,
       unsigned int resource,
       struct rlimit *new_rlim)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_setscheduler(struct task_struct *p)
{
 return cap_task_setscheduler(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_getscheduler(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_movememory(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_kill(struct task_struct *p,
         struct kernel_siginfo *info, int sig,
         const struct cred *cred)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_task_prctl(int option, unsigned long arg2,
          unsigned long arg3,
          unsigned long arg4,
          unsigned long arg5)
{
 return cap_task_prctl(option, arg2, arg3, arg4, arg5);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_task_to_inode(struct task_struct *p, struct inode *inode)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_ipc_permission(struct kern_ipc_perm *ipcp,
       short flag)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_msg_msg_alloc(struct msg_msg *msg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_msg_msg_free(struct msg_msg *msg)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_msg_queue_alloc(struct kern_ipc_perm *msq)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_msg_queue_free(struct kern_ipc_perm *msq)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_msg_queue_associate(struct kern_ipc_perm *msq,
            int msqflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_msg_queue_msgctl(struct kern_ipc_perm *msq, int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_msg_queue_msgsnd(struct kern_ipc_perm *msq,
         struct msg_msg *msg, int msqflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_msg_queue_msgrcv(struct kern_ipc_perm *msq,
         struct msg_msg *msg,
         struct task_struct *target,
         long type, int mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_shm_alloc(struct kern_ipc_perm *shp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_shm_free(struct kern_ipc_perm *shp)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_shm_associate(struct kern_ipc_perm *shp,
      int shmflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_shm_shmctl(struct kern_ipc_perm *shp, int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_shm_shmat(struct kern_ipc_perm *shp,
         char *shmaddr, int shmflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sem_alloc(struct kern_ipc_perm *sma)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sem_free(struct kern_ipc_perm *sma)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sem_associate(struct kern_ipc_perm *sma, int semflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sem_semctl(struct kern_ipc_perm *sma, int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sem_semop(struct kern_ipc_perm *sma,
         struct sembuf *sops, unsigned nsops,
         int alter)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_d_instantiate(struct dentry *dentry,
       struct inode *inode)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_getprocattr(struct task_struct *p, const char *lsm,
           char *name, char **value)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_setprocattr(const char *lsm, char *name,
           void *value, size_t size)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_netlink_send(struct sock *sk, struct sk_buff *skb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_ismaclabel(const char *name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_secid_to_secctx(u32 secid, char **secdata, u32 *seclen)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_secctx_to_secid(const char *secdata,
        u32 seclen,
        u32 *secid)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_release_secctx(char *secdata, u32 seclen)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_inode_invalidate_secctx(struct inode *inode)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_notifysecctx(struct inode *inode, void *ctx, u32 ctxlen)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_locked_down(enum lockdown_reason what)
{
 return 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_post_notification(const struct cred *w_cred,
          const struct cred *cred,
          struct watch_notification *n)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_watch_key(struct key *key)
{
 return 0;
}
# 1435 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_unix_stream_connect(struct sock *sock,
            struct sock *other,
            struct sock *newsk)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_unix_may_send(struct socket *sock,
      struct socket *other)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_create(int family, int type,
      int protocol, int kern)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_post_create(struct socket *sock,
           int family,
           int type,
           int protocol, int kern)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_socketpair(struct socket *socka,
          struct socket *sockb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_bind(struct socket *sock,
           struct sockaddr *address,
           int addrlen)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_connect(struct socket *sock,
       struct sockaddr *address,
       int addrlen)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_listen(struct socket *sock, int backlog)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_accept(struct socket *sock,
      struct socket *newsock)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_sendmsg(struct socket *sock,
       struct msghdr *msg, int size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_recvmsg(struct socket *sock,
       struct msghdr *msg, int size,
       int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_getsockname(struct socket *sock)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_getpeername(struct socket *sock)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_getsockopt(struct socket *sock,
          int level, int optname)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_setsockopt(struct socket *sock,
          int level, int optname)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_shutdown(struct socket *sock, int how)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sock_rcv_skb(struct sock *sk,
     struct sk_buff *skb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_getpeersec_stream(struct socket *sock, char *optval,
          int *optlen, unsigned len)
{
 return -92;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid)
{
 return -92;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sk_alloc(struct sock *sk, int family, gfp_t priority)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sk_free(struct sock *sk)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sk_clone(const struct sock *sk, struct sock *newsk)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sk_classify_flow(struct sock *sk,
          struct flowi_common *flic)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_req_classify_flow(const struct request_sock *req,
           struct flowi_common *flic)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sock_graft(struct sock *sk, struct socket *parent)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_inet_conn_request(const struct sock *sk,
   struct sk_buff *skb, struct request_sock *req)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_inet_csk_clone(struct sock *newsk,
   const struct request_sock *req)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_inet_conn_established(struct sock *sk,
   struct sk_buff *skb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_secmark_relabel_packet(u32 secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_secmark_refcount_inc(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_secmark_refcount_dec(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_tun_dev_alloc_security(void **security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_tun_dev_free_security(void *security)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_tun_dev_create(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_tun_dev_attach_queue(void *security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_tun_dev_attach(struct sock *sk, void *security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_tun_dev_open(void *security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sctp_assoc_request(struct sctp_association *asoc,
           struct sk_buff *skb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_sctp_bind_connect(struct sock *sk, int optname,
          struct sockaddr *address,
          int addrlen)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_sctp_sk_clone(struct sctp_association *asoc,
       struct sock *sk,
       struct sock *newsk)
{
}
# 1660 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_ib_pkey_access(void *sec, u64 subnet_prefix, u16 pkey)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_ib_endport_manage_subnet(void *sec, const char *dev_name, u8 port_num)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_ib_alloc_security(void **sec)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_ib_free_security(void *sec)
{
}
# 1701 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_policy_alloc(struct xfrm_sec_ctx **ctxp,
          struct xfrm_user_sec_ctx *sec_ctx,
          gfp_t gfp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_policy_clone(struct xfrm_sec_ctx *old, struct xfrm_sec_ctx **new_ctxp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_xfrm_policy_free(struct xfrm_sec_ctx *ctx)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_policy_delete(struct xfrm_sec_ctx *ctx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_state_alloc(struct xfrm_state *x,
     struct xfrm_user_sec_ctx *sec_ctx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_state_alloc_acquire(struct xfrm_state *x,
     struct xfrm_sec_ctx *polsec, u32 secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_xfrm_state_free(struct xfrm_state *x)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_state_delete(struct xfrm_state *x)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_policy_lookup(struct xfrm_sec_ctx *ctx, u32 fl_secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_state_pol_flow_match(struct xfrm_state *x,
           struct xfrm_policy *xp,
           const struct flowi_common *flic)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_xfrm_decode_session(struct sk_buff *skb, u32 *secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_skb_classify_flow(struct sk_buff *skb,
           struct flowi_common *flic)
{
}
# 1785 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_unlink(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_mkdir(const struct path *dir, struct dentry *dentry,
          umode_t mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_rmdir(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_mknod(const struct path *dir, struct dentry *dentry,
          umode_t mode, unsigned int dev)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_truncate(const struct path *path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_symlink(const struct path *dir, struct dentry *dentry,
     const char *old_name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_link(struct dentry *old_dentry,
         const struct path *new_dir,
         struct dentry *new_dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_rename(const struct path *old_dir,
           struct dentry *old_dentry,
           const struct path *new_dir,
           struct dentry *new_dentry,
           unsigned int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_chmod(const struct path *path, umode_t mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_path_chroot(const struct path *path)
{
 return 0;
}
# 1861 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_key_alloc(struct key *key,
         const struct cred *cred,
         unsigned long flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_key_free(struct key *key)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_key_permission(key_ref_t key_ref,
       const struct cred *cred,
       enum key_need_perm need_perm)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_key_getsecurity(struct key *key, char **_buffer)
{
 *_buffer = ((void *)0);
 return 0;
}
# 1922 "./include/linux/security.h"
extern struct dentry *securityfs_create_file(const char *name, umode_t mode,
          struct dentry *parent, void *data,
          const struct file_operations *fops);
extern struct dentry *securityfs_create_dir(const char *name, struct dentry *parent);
struct dentry *securityfs_create_symlink(const char *name,
      struct dentry *parent,
      const char *target,
      const struct inode_operations *iops);
extern void securityfs_remove(struct dentry *dentry);
# 2011 "./include/linux/security.h"
struct perf_event_attr;
struct perf_event;
# 2021 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_perf_event_open(struct perf_event_attr *attr,
        int type)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_perf_event_alloc(struct perf_event *event)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void security_perf_event_free(struct perf_event *event)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_perf_event_read(struct perf_event *event)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_perf_event_write(struct perf_event *event)
{
 return 0;
}
# 2053 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_uring_override_creds(const struct cred *new)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int security_uring_sqpoll(void)
{
 return 0;
}
# 60 "./include/linux/perf_event.h" 2



struct perf_callchain_entry {
 __u64 nr;
 __u64 ip[];
};

struct perf_callchain_entry_ctx {
 struct perf_callchain_entry *entry;
 u32 max_stack;
 u32 nr;
 short contexts;
 bool contexts_maxed;
};

typedef unsigned long (*perf_copy_f)(void *dst, const void *src,
         unsigned long off, unsigned long len);

struct perf_raw_frag {
 union {
  struct perf_raw_frag *next;
  unsigned long pad;
 };
 perf_copy_f copy;
 void *data;
 u32 size;
} __attribute__((__packed__));

struct perf_raw_record {
 struct perf_raw_frag frag;
 u32 size;
};
# 114 "./include/linux/perf_event.h"
struct perf_branch_stack {
 __u64 nr;
 __u64 hw_idx;
 struct perf_branch_entry entries[];
};

struct task_struct;




struct hw_perf_event_extra {
 u64 config;
 unsigned int reg;
 int alloc;
 int idx;
};




struct hw_perf_event {

 union {
  struct {
   u64 config;
   u64 last_tag;
   unsigned long config_base;
   unsigned long event_base;
   int event_base_rdpmc;
   int idx;
   int last_cpu;
   int flags;

   struct hw_perf_event_extra extra_reg;
   struct hw_perf_event_extra branch_reg;
  };
  struct {
   struct hrtimer hrtimer;
  };
  struct {

   struct list_head tp_list;
  };
  struct {
   u64 pwr_acc;
   u64 ptsc;
  };

  struct {





   struct arch_hw_breakpoint info;
   struct list_head bp_list;
  };

  struct {
   u8 iommu_bank;
   u8 iommu_cntr;
   u16 padding;
   u64 conf;
   u64 conf1;
  };
 };




 struct task_struct *target;





 void *addr_filters;


 unsigned long addr_filters_gen;
# 203 "./include/linux/perf_event.h"
 int state;





 local64_t prev_count;




 u64 sample_period;

 union {
  struct {



   u64 last_period;







   local64_t period_left;
  };
  struct {
   u64 saved_metric;
   u64 saved_slots;
  };
 };





 u64 interrupts_seq;
 u64 interrupts;





 u64 freq_time_stamp;
 u64 freq_count_stamp;

};

struct perf_event;
# 275 "./include/linux/perf_event.h"
struct perf_output_handle;




struct pmu {
 struct list_head entry;

 struct module *module;
 struct device *dev;
 const struct attribute_group **attr_groups;
 const struct attribute_group **attr_update;
 const char *name;
 int type;




 int capabilities;

 int *pmu_disable_count;
 struct perf_cpu_context *pmu_cpu_context;
 atomic_t exclusive_cnt;
 int task_ctx_nr;
 int hrtimer_interval_ms;


 unsigned int nr_addr_filters;





 void (*pmu_enable) (struct pmu *pmu);
 void (*pmu_disable) (struct pmu *pmu);
# 327 "./include/linux/perf_event.h"
 int (*event_init) (struct perf_event *event);





 void (*event_mapped) (struct perf_event *event, struct mm_struct *mm);
 void (*event_unmapped) (struct perf_event *event, struct mm_struct *mm);
# 362 "./include/linux/perf_event.h"
 int (*add) (struct perf_event *event, int flags);
 void (*del) (struct perf_event *event, int flags);
# 383 "./include/linux/perf_event.h"
 void (*start) (struct perf_event *event, int flags);
 void (*stop) (struct perf_event *event, int flags);







 void (*read) (struct perf_event *event);
# 404 "./include/linux/perf_event.h"
 void (*start_txn) (struct pmu *pmu, unsigned int txn_flags);
# 413 "./include/linux/perf_event.h"
 int (*commit_txn) (struct pmu *pmu);






 void (*cancel_txn) (struct pmu *pmu);





 int (*event_idx) (struct perf_event *event);




 void (*sched_task) (struct perf_event_context *ctx,
     bool sched_in);




 struct kmem_cache *task_ctx_cache;







 void (*swap_task_ctx) (struct perf_event_context *prev,
      struct perf_event_context *next);





 void *(*setup_aux) (struct perf_event *event, void **pages,
      int nr_pages, bool overwrite);





 void (*free_aux) (void *aux);
# 470 "./include/linux/perf_event.h"
 long (*snapshot_aux) (struct perf_event *event,
      struct perf_output_handle *handle,
      unsigned long size);
# 482 "./include/linux/perf_event.h"
 int (*addr_filters_validate) (struct list_head *filters);
# 496 "./include/linux/perf_event.h"
 void (*addr_filters_sync) (struct perf_event *event);
# 506 "./include/linux/perf_event.h"
 int (*aux_output_match) (struct perf_event *event);





 int (*filter_match) (struct perf_event *event);




 int (*check_period) (struct perf_event *event, u64 value);
};

enum perf_addr_filter_action_t {
 PERF_ADDR_FILTER_ACTION_STOP = 0,
 PERF_ADDR_FILTER_ACTION_START,
 PERF_ADDR_FILTER_ACTION_FILTER,
};
# 536 "./include/linux/perf_event.h"
struct perf_addr_filter {
 struct list_head entry;
 struct path path;
 unsigned long offset;
 unsigned long size;
 enum perf_addr_filter_action_t action;
};
# 554 "./include/linux/perf_event.h"
struct perf_addr_filters_head {
 struct list_head list;
 raw_spinlock_t lock;
 unsigned int nr_file_filters;
};

struct perf_addr_filter_range {
 unsigned long start;
 unsigned long size;
};




enum perf_event_state {
 PERF_EVENT_STATE_DEAD = -4,
 PERF_EVENT_STATE_EXIT = -3,
 PERF_EVENT_STATE_ERROR = -2,
 PERF_EVENT_STATE_OFF = -1,
 PERF_EVENT_STATE_INACTIVE = 0,
 PERF_EVENT_STATE_ACTIVE = 1,
};

struct file;
struct perf_sample_data;

typedef void (*perf_overflow_handler_t)(struct perf_event *,
     struct perf_sample_data *,
     struct pt_regs *regs);
# 601 "./include/linux/perf_event.h"
struct swevent_hlist {
 struct hlist_head heads[(1 << 8)];
 struct callback_head callback_head;
};
# 614 "./include/linux/perf_event.h"
struct perf_cgroup;
struct perf_buffer;

struct pmu_event_list {
 raw_spinlock_t lock;
 struct list_head list;
};
# 629 "./include/linux/perf_event.h"
struct perf_event {






 struct list_head event_entry;





 struct list_head sibling_list;
 struct list_head active_list;



 struct rb_node group_node;
 u64 group_index;





 struct list_head migrate_entry;

 struct hlist_node hlist_entry;
 struct list_head active_entry;
 int nr_siblings;


 int event_caps;

 int group_caps;

 struct perf_event *group_leader;
 struct pmu *pmu;
 void *pmu_private;

 enum perf_event_state state;
 unsigned int attach_state;
 local64_t count;
 atomic64_t child_count;







 u64 total_time_enabled;
 u64 total_time_running;
 u64 tstamp;
# 694 "./include/linux/perf_event.h"
 u64 shadow_ctx_time;

 struct perf_event_attr attr;
 u16 header_size;
 u16 id_header_size;
 u16 read_size;
 struct hw_perf_event hw;

 struct perf_event_context *ctx;
 atomic_long_t refcount;





 atomic64_t child_total_time_enabled;
 atomic64_t child_total_time_running;




 struct mutex child_mutex;
 struct list_head child_list;
 struct perf_event *parent;

 int oncpu;
 int cpu;

 struct list_head owner_entry;
 struct task_struct *owner;


 struct mutex mmap_mutex;
 atomic_t mmap_count;

 struct perf_buffer *rb;
 struct list_head rb_entry;
 unsigned long rcu_batches;
 int rcu_pending;


 wait_queue_head_t waitq;
 struct fasync_struct *fasync;


 int pending_wakeup;
 int pending_kill;
 int pending_disable;
 unsigned long pending_addr;
 struct irq_work pending;

 atomic_t event_limit;


 struct perf_addr_filters_head addr_filters;

 struct perf_addr_filter_range *addr_filter_ranges;
 unsigned long addr_filters_gen;


 struct perf_event *aux_event;

 void (*destroy)(struct perf_event *);
 struct callback_head callback_head;

 struct pid_namespace *ns;
 u64 id;

 u64 (*clock)(void);
 perf_overflow_handler_t overflow_handler;
 void *overflow_handler_context;







 struct trace_event_call *tp_event;
 struct event_filter *filter;
# 786 "./include/linux/perf_event.h"
 struct list_head sb_list;

};


struct perf_event_groups {
 struct rb_root tree;
 u64 index;
};






struct perf_event_context {
 struct pmu *pmu;




 raw_spinlock_t lock;





 struct mutex mutex;

 struct list_head active_ctx_list;
 struct perf_event_groups pinned_groups;
 struct perf_event_groups flexible_groups;
 struct list_head event_list;

 struct list_head pinned_active;
 struct list_head flexible_active;

 int nr_events;
 int nr_active;
 int is_active;
 int nr_stat;
 int nr_freq;
 int rotate_disable;




 int rotate_necessary;
 refcount_t refcount;
 struct task_struct *task;




 u64 time;
 u64 timestamp;





 struct perf_event_context *parent_ctx;
 u64 parent_gen;
 u64 generation;
 int pin_count;



 void *task_ctx_data;
 struct callback_head callback_head;
};
# 867 "./include/linux/perf_event.h"
struct perf_cpu_context {
 struct perf_event_context ctx;
 struct perf_event_context *task_ctx;
 int active_oncpu;
 int exclusive;

 raw_spinlock_t hrtimer_lock;
 struct hrtimer hrtimer;
 ktime_t hrtimer_interval;
 unsigned int hrtimer_active;






 struct list_head sched_cb_entry;
 int sched_cb_usage;

 int online;




 int heap_size;
 struct perf_event **heap;
 struct perf_event *heap_default[2];
};

struct perf_output_handle {
 struct perf_event *event;
 struct perf_buffer *rb;
 unsigned long wakeup;
 unsigned long size;
 u64 aux_flags;
 union {
  void *addr;
  unsigned long head;
 };
 int page;
};

struct bpf_perf_event_data_kern {
 bpf_user_pt_regs_t *regs;
 struct perf_sample_data *data;
 struct perf_event *event;
};
# 948 "./include/linux/perf_event.h"
extern void *perf_aux_output_begin(struct perf_output_handle *handle,
       struct perf_event *event);
extern void perf_aux_output_end(struct perf_output_handle *handle,
    unsigned long size);
extern int perf_aux_output_skip(struct perf_output_handle *handle,
    unsigned long size);
extern void *perf_get_aux(struct perf_output_handle *handle);
extern void perf_aux_output_flag(struct perf_output_handle *handle, u64 flags);
extern void perf_event_itrace_started(struct perf_event *event);

extern int perf_pmu_register(struct pmu *pmu, const char *name, int type);
extern void perf_pmu_unregister(struct pmu *pmu);

extern void __perf_event_task_sched_in(struct task_struct *prev,
           struct task_struct *task);
extern void __perf_event_task_sched_out(struct task_struct *prev,
     struct task_struct *next);
extern int perf_event_init_task(struct task_struct *child, u64 clone_flags);
extern void perf_event_exit_task(struct task_struct *child);
extern void perf_event_free_task(struct task_struct *task);
extern void perf_event_delayed_put(struct task_struct *task);
extern struct file *perf_event_get(unsigned int fd);
extern const struct perf_event *perf_get_event(struct file *file);
extern const struct perf_event_attr *perf_event_attrs(struct perf_event *event);
extern void perf_event_print_debug(void);
extern void perf_pmu_disable(struct pmu *pmu);
extern void perf_pmu_enable(struct pmu *pmu);
extern void perf_sched_cb_dec(struct pmu *pmu);
extern void perf_sched_cb_inc(struct pmu *pmu);
extern int perf_event_task_disable(void);
extern int perf_event_task_enable(void);

extern void perf_pmu_resched(struct pmu *pmu);

extern int perf_event_refresh(struct perf_event *event, int refresh);
extern void perf_event_update_userpage(struct perf_event *event);
extern int perf_event_release_kernel(struct perf_event *event);
extern struct perf_event *
perf_event_create_kernel_counter(struct perf_event_attr *attr,
    int cpu,
    struct task_struct *task,
    perf_overflow_handler_t callback,
    void *context);
extern void perf_pmu_migrate_context(struct pmu *pmu,
    int src_cpu, int dst_cpu);
int perf_event_read_local(struct perf_event *event, u64 *value,
     u64 *enabled, u64 *running);
extern u64 perf_event_read_value(struct perf_event *event,
     u64 *enabled, u64 *running);


struct perf_sample_data {




 u64 addr;
 struct perf_raw_record *raw;
 struct perf_branch_stack *br_stack;
 u64 period;
 union perf_sample_weight weight;
 u64 txn;
 union perf_mem_data_src data_src;





 u64 type;
 u64 ip;
 struct {
  u32 pid;
  u32 tid;
 } tid_entry;
 u64 time;
 u64 id;
 u64 stream_id;
 struct {
  u32 cpu;
  u32 reserved;
 } cpu_entry;
 struct perf_callchain_entry *callchain;
 u64 aux_size;

 struct perf_regs regs_user;
 struct perf_regs regs_intr;
 u64 stack_user_size;

 u64 phys_addr;
 u64 cgroup;
 u64 data_page_size;
 u64 code_page_size;
} __attribute__((__aligned__((1 << (6)))));
# 1049 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void perf_sample_data_init(struct perf_sample_data *data,
      u64 addr, u64 period)
{

 data->addr = addr;
 data->raw = ((void *)0);
 data->br_stack = ((void *)0);
 data->period = period;
 data->weight.full = 0;
 data->data_src.val = ((((__u64)0x01) << 0) | (((__u64)0x01) << 5) | (((__u64)0x01) << 19) | (((__u64)0x01) << 24) | (((__u64)0x01) << 26));
 data->txn = 0;
}

extern void perf_output_sample(struct perf_output_handle *handle,
          struct perf_event_header *header,
          struct perf_sample_data *data,
          struct perf_event *event);
extern void perf_prepare_sample(struct perf_event_header *header,
    struct perf_sample_data *data,
    struct perf_event *event,
    struct pt_regs *regs);

extern int perf_event_overflow(struct perf_event *event,
     struct perf_sample_data *data,
     struct pt_regs *regs);

extern void perf_event_output_forward(struct perf_event *event,
         struct perf_sample_data *data,
         struct pt_regs *regs);
extern void perf_event_output_backward(struct perf_event *event,
           struct perf_sample_data *data,
           struct pt_regs *regs);
extern int perf_event_output(struct perf_event *event,
        struct perf_sample_data *data,
        struct pt_regs *regs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
is_default_overflow_handler(struct perf_event *event)
{
 if (__builtin_expect(!!(event->overflow_handler == perf_event_output_forward), 1))
  return true;
 if (__builtin_expect(!!(event->overflow_handler == perf_event_output_backward), 0))
  return true;
 return false;
}

extern void
perf_event_header__init_id(struct perf_event_header *header,
      struct perf_sample_data *data,
      struct perf_event *event);
extern void
perf_event__output_id_sample(struct perf_event *event,
        struct perf_output_handle *handle,
        struct perf_sample_data *sample);

extern void
perf_log_lost_samples(struct perf_event *event, u64 lost);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool event_has_any_exclude_flag(struct perf_event *event)
{
 struct perf_event_attr *attr = &event->attr;

 return attr->exclude_idle || attr->exclude_user ||
        attr->exclude_kernel || attr->exclude_hv ||
        attr->exclude_guest || attr->exclude_host;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_sampling_event(struct perf_event *event)
{
 return event->attr.sample_period != 0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_software_event(struct perf_event *event)
{
 return event->event_caps & ((((1UL))) << (0));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int in_software_context(struct perf_event *event)
{
 return event->ctx->pmu->task_ctx_nr == perf_sw_context;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_exclusive_pmu(struct pmu *pmu)
{
 return pmu->capabilities & 0x0010;
}

extern struct static_key perf_swevent_enabled[PERF_COUNT_SW_MAX];

extern void ___perf_sw_event(u32, u64, struct pt_regs *, u64);
extern void __perf_sw_event(u32, u64, struct pt_regs *, u64);
# 1165 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void perf_fetch_caller_regs(struct pt_regs *regs)
{
 { (regs)->ip = (((unsigned long)__builtin_return_address(0))); (regs)->sp = (unsigned long)__builtin_frame_address(0); (regs)->cs = (2*8); regs->flags = 0; };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
perf_sw_event(u32 event_id, u64 nr, struct pt_regs *regs, u64 addr)
{
 if (static_key_false(&perf_swevent_enabled[event_id]))
  __perf_sw_event(event_id, nr, regs, addr);
}

extern __attribute__((section(".data" ""))) __typeof__(struct pt_regs) __perf_regs[4];






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __perf_sw_event_sched(u32 event_id, u64 nr, u64 addr)
{
 struct pt_regs *regs = ({ (void)(0); ({ do { const void *__vpp_verify = (typeof((&__perf_regs[0]) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&__perf_regs[0])) *)(&__perf_regs[0]); }); });

 perf_fetch_caller_regs(regs);
 ___perf_sw_event(event_id, nr, regs, addr);
}

extern struct static_key_false perf_sched_events;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __perf_sw_enabled(int swevt)
{
 return static_key_false(&perf_swevent_enabled[swevt]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void perf_event_task_migrate(struct task_struct *task)
{
 if (__perf_sw_enabled(PERF_COUNT_SW_CPU_MIGRATIONS))
  task->sched_migrated = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void perf_event_task_sched_in(struct task_struct *prev,
         struct task_struct *task)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&perf_sched_events)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&perf_sched_events)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&perf_sched_events)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&perf_sched_events)->key) > 0; })), 0))
  __perf_event_task_sched_in(prev, task);

 if (__perf_sw_enabled(PERF_COUNT_SW_CPU_MIGRATIONS) &&
     task->sched_migrated) {
  __perf_sw_event_sched(PERF_COUNT_SW_CPU_MIGRATIONS, 1, 0);
  task->sched_migrated = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void perf_event_task_sched_out(struct task_struct *prev,
          struct task_struct *next)
{
 if (__perf_sw_enabled(PERF_COUNT_SW_CONTEXT_SWITCHES))
  __perf_sw_event_sched(PERF_COUNT_SW_CONTEXT_SWITCHES, 1, 0);
# 1231 "./include/linux/perf_event.h"
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&perf_sched_events)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&perf_sched_events)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&perf_sched_events)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&perf_sched_events)->key) > 0; })), 0))
  __perf_event_task_sched_out(prev, next);
}

extern void perf_event_mmap(struct vm_area_struct *vma);

extern void perf_event_ksymbol(u16 ksym_type, u64 addr, u32 len,
          bool unregister, const char *sym);
extern void perf_event_bpf_event(struct bpf_prog *prog,
     enum perf_bpf_event_type type,
     u16 flags);

extern struct perf_guest_info_callbacks *perf_guest_cbs;
extern int perf_register_guest_info_callbacks(struct perf_guest_info_callbacks *callbacks);
extern int perf_unregister_guest_info_callbacks(struct perf_guest_info_callbacks *callbacks);

extern void perf_event_exec(void);
extern void perf_event_comm(struct task_struct *tsk, bool exec);
extern void perf_event_namespaces(struct task_struct *tsk);
extern void perf_event_fork(struct task_struct *tsk);
extern void perf_event_text_poke(const void *addr,
     const void *old_bytes, size_t old_len,
     const void *new_bytes, size_t new_len);


extern __attribute__((section(".data" ""))) __typeof__(struct perf_callchain_entry) perf_callchain_entry;

extern void perf_callchain_user(struct perf_callchain_entry_ctx *entry, struct pt_regs *regs);
extern void perf_callchain_kernel(struct perf_callchain_entry_ctx *entry, struct pt_regs *regs);
extern struct perf_callchain_entry *
get_perf_callchain(struct pt_regs *regs, u32 init_nr, bool kernel, bool user,
     u32 max_stack, bool crosstask, bool add_mark);
extern struct perf_callchain_entry *perf_callchain(struct perf_event *event, struct pt_regs *regs);
extern int get_callchain_buffers(int max_stack);
extern void put_callchain_buffers(void);
extern struct perf_callchain_entry *get_callchain_entry(int *rctx);
extern void put_callchain_entry(int rctx);

extern int sysctl_perf_event_max_stack;
extern int sysctl_perf_event_max_contexts_per_stack;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int perf_callchain_store_context(struct perf_callchain_entry_ctx *ctx, u64 ip)
{
 if (ctx->contexts < sysctl_perf_event_max_contexts_per_stack) {
  struct perf_callchain_entry *entry = ctx->entry;
  entry->ip[entry->nr++] = ip;
  ++ctx->contexts;
  return 0;
 } else {
  ctx->contexts_maxed = true;
  return -1;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int perf_callchain_store(struct perf_callchain_entry_ctx *ctx, u64 ip)
{
 if (ctx->nr < ctx->max_stack && !ctx->contexts_maxed) {
  struct perf_callchain_entry *entry = ctx->entry;
  entry->ip[entry->nr++] = ip;
  ++ctx->nr;
  return 0;
 } else {
  return -1;
 }
}

extern int sysctl_perf_event_paranoid;
extern int sysctl_perf_event_mlock;
extern int sysctl_perf_event_sample_rate;
extern int sysctl_perf_cpu_time_max_percent;

extern void perf_sample_event_took(u64 sample_len_ns);

int perf_proc_update_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int perf_cpu_time_max_percent_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int perf_event_max_stack_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
# 1319 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int perf_is_paranoid(void)
{
 return sysctl_perf_event_paranoid > -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int perf_allow_kernel(struct perf_event_attr *attr)
{
 if (sysctl_perf_event_paranoid > 1 && !perfmon_capable())
  return -13;

 return security_perf_event_open(attr, 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int perf_allow_cpu(struct perf_event_attr *attr)
{
 if (sysctl_perf_event_paranoid > 0 && !perfmon_capable())
  return -13;

 return security_perf_event_open(attr, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int perf_allow_tracepoint(struct perf_event_attr *attr)
{
 if (sysctl_perf_event_paranoid > -1 && !perfmon_capable())
  return -1;

 return security_perf_event_open(attr, 3);
}

extern void perf_event_init(void);
extern void perf_tp_event(u16 event_type, u64 count, void *record,
     int entry_size, struct pt_regs *regs,
     struct hlist_head *head, int rctx,
     struct task_struct *task);
extern void perf_bp_event(struct perf_event *event, void *data);
# 1364 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_branch_stack(struct perf_event *event)
{
 return event->attr.sample_type & PERF_SAMPLE_BRANCH_STACK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool needs_branch_stack(struct perf_event *event)
{
 return event->attr.branch_sample_type != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_aux(struct perf_event *event)
{
 return event->pmu->setup_aux;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_write_backward(struct perf_event *event)
{
 return !!event->attr.write_backward;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_addr_filter(struct perf_event *event)
{
 return event->pmu->nr_addr_filters;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct perf_addr_filters_head *
perf_event_addr_filters(struct perf_event *event)
{
 struct perf_addr_filters_head *ifh = &event->addr_filters;

 if (event->parent)
  ifh = &event->parent->addr_filters;

 return ifh;
}

extern void perf_event_addr_filters_sync(struct perf_event *event);
extern void perf_report_aux_output_id(struct perf_event *event, u64 hw_id);

extern int perf_output_begin(struct perf_output_handle *handle,
        struct perf_sample_data *data,
        struct perf_event *event, unsigned int size);
extern int perf_output_begin_forward(struct perf_output_handle *handle,
         struct perf_sample_data *data,
         struct perf_event *event,
         unsigned int size);
extern int perf_output_begin_backward(struct perf_output_handle *handle,
          struct perf_sample_data *data,
          struct perf_event *event,
          unsigned int size);

extern void perf_output_end(struct perf_output_handle *handle);
extern unsigned int perf_output_copy(struct perf_output_handle *handle,
        const void *buf, unsigned int len);
extern unsigned int perf_output_skip(struct perf_output_handle *handle,
         unsigned int len);
extern long perf_output_copy_aux(struct perf_output_handle *aux_handle,
     struct perf_output_handle *handle,
     unsigned long from, unsigned long to);
extern int perf_swevent_get_recursion_context(void);
extern void perf_swevent_put_recursion_context(int rctx);
extern u64 perf_swevent_set_period(struct perf_event *event);
extern void perf_event_enable(struct perf_event *event);
extern void perf_event_disable(struct perf_event *event);
extern void perf_event_disable_local(struct perf_event *event);
extern void perf_event_disable_inatomic(struct perf_event *event);
extern void perf_event_task_tick(void);
extern int perf_event_account_interrupt(struct perf_event *event);
extern int perf_event_period(struct perf_event *event, u64 value);
extern u64 perf_event_pause(struct perf_event *event, bool reset);
# 1531 "./include/linux/perf_event.h"
extern void perf_restore_debug_store(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool perf_raw_frag_last(const struct perf_raw_frag *frag)
{
 return frag->pad < sizeof(u64);
}



struct perf_pmu_events_attr {
 struct device_attribute attr;
 u64 id;
 const char *event_str;
};

struct perf_pmu_events_ht_attr {
 struct device_attribute attr;
 u64 id;
 const char *event_str_ht;
 const char *event_str_noht;
};

struct perf_pmu_events_hybrid_attr {
 struct device_attribute attr;
 u64 id;
 const char *event_str;
 u64 pmu_type;
};

struct perf_pmu_format_hybrid_attr {
 struct device_attribute attr;
 u64 pmu_type;
};

ssize_t perf_event_sysfs_show(struct device *dev, struct device_attribute *attr,
         char *page);
# 1604 "./include/linux/perf_event.h"
int perf_event_init_cpu(unsigned int cpu);
int perf_event_exit_cpu(unsigned int cpu);





extern void __attribute__((__weak__)) arch_perf_update_userpage(struct perf_event *event,
          struct perf_event_mmap_page *userpg,
          u64 now);


extern __attribute__((__weak__)) u64 arch_perf_get_page_size(struct mm_struct *mm, unsigned long addr);
# 1637 "./include/linux/perf_event.h"
typedef int (perf_snapshot_branch_stack_t)(struct perf_branch_entry *entries,
        unsigned int cnt);
extern struct static_call_key __SCK__perf_snapshot_branch_stack; extern typeof(perf_snapshot_branch_stack_t) __SCT__perf_snapshot_branch_stack;;
# 23 "./arch/x86/include/asm/kvm_host.h" 2
# 1 "./include/linux/pvclock_gtod.h" 1
# 14 "./include/linux/pvclock_gtod.h"
extern int pvclock_gtod_register_notifier(struct notifier_block *nb);
extern int pvclock_gtod_unregister_notifier(struct notifier_block *nb);
# 24 "./arch/x86/include/asm/kvm_host.h" 2
# 1 "./include/linux/clocksource.h" 1
# 24 "./include/linux/clocksource.h"
struct clocksource;
struct module;



# 1 "./arch/x86/include/asm/clocksource.h" 1






# 1 "./arch/x86/include/asm/vdso/clocksource.h" 1
# 8 "./arch/x86/include/asm/clocksource.h" 2

extern unsigned int vclocks_used;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vclock_was_used(int vclock)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_337(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(vclocks_used) == sizeof(char) || sizeof(vclocks_used) == sizeof(short) || sizeof(vclocks_used) == sizeof(int) || sizeof(vclocks_used) == sizeof(long)) || sizeof(vclocks_used) == sizeof(long long))) __compiletime_assert_337(); } while (0); (*(const volatile typeof( _Generic((vclocks_used), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (vclocks_used))) *)&(vclocks_used)); }) & (1U << vclock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vclocks_set_used(unsigned int which)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_339(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(vclocks_used) == sizeof(char) || sizeof(vclocks_used) == sizeof(short) || sizeof(vclocks_used) == sizeof(int) || sizeof(vclocks_used) == sizeof(long)) || sizeof(vclocks_used) == sizeof(long long))) __compiletime_assert_339(); } while (0); do { *(volatile typeof(vclocks_used) *)&(vclocks_used) = (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_338(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(vclocks_used) == sizeof(char) || sizeof(vclocks_used) == sizeof(short) || sizeof(vclocks_used) == sizeof(int) || sizeof(vclocks_used) == sizeof(long)) || sizeof(vclocks_used) == sizeof(long long))) __compiletime_assert_338(); } while (0); (*(const volatile typeof( _Generic((vclocks_used), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (vclocks_used))) *)&(vclocks_used)); }) | (1 << which)); } while (0); } while (0);
}
# 30 "./include/linux/clocksource.h" 2


# 1 "./include/vdso/clocksource.h" 1
# 11 "./include/vdso/clocksource.h"
enum vdso_clock_mode {
 VDSO_CLOCKMODE_NONE,

 VDSO_CLOCKMODE_TSC, VDSO_CLOCKMODE_PVCLOCK, VDSO_CLOCKMODE_HVCLOCK,

 VDSO_CLOCKMODE_MAX,


 VDSO_CLOCKMODE_TIMENS = ((int)(~0U >> 1))
};
# 33 "./include/linux/clocksource.h" 2
# 96 "./include/linux/clocksource.h"
struct clocksource {
 u64 (*read)(struct clocksource *cs);
 u64 mask;
 u32 mult;
 u32 shift;
 u64 max_idle_ns;
 u32 maxadj;
 u32 uncertainty_margin;



 u64 max_cycles;
 const char *name;
 struct list_head list;
 int rating;
 enum clocksource_ids id;
 enum vdso_clock_mode vdso_clock_mode;
 unsigned long flags;

 int (*enable)(struct clocksource *cs);
 void (*disable)(struct clocksource *cs);
 void (*suspend)(struct clocksource *cs);
 void (*resume)(struct clocksource *cs);
 void (*mark_unstable)(struct clocksource *cs);
 void (*tick_stable)(struct clocksource *cs);




 struct list_head wd_list;
 u64 cs_last;
 u64 wd_last;

 struct module *owner;
};
# 147 "./include/linux/clocksource.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 clocksource_freq2mult(u32 freq, u32 shift_constant, u64 from)
{







 u64 tmp = ((u64)from) << shift_constant;

 tmp += freq/2;
 ({ uint32_t __base = (freq); uint32_t __rem; __rem = ((uint64_t)(tmp)) % __base; (tmp) = ((uint64_t)(tmp)) / __base; __rem; });

 return (u32)tmp;
}
# 172 "./include/linux/clocksource.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 clocksource_khz2mult(u32 khz, u32 shift_constant)
{
 return clocksource_freq2mult(khz, shift_constant, 1000000L);
}
# 186 "./include/linux/clocksource.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 clocksource_hz2mult(u32 hz, u32 shift_constant)
{
 return clocksource_freq2mult(hz, shift_constant, 1000000000L);
}
# 204 "./include/linux/clocksource.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 clocksource_cyc2ns(u64 cycles, u32 mult, u32 shift)
{
 return ((u64) cycles * mult) >> shift;
}


extern int clocksource_unregister(struct clocksource*);
extern void clocksource_touch_watchdog(void);
extern void clocksource_change_rating(struct clocksource *cs, int rating);
extern void clocksource_suspend(void);
extern void clocksource_resume(void);
extern struct clocksource * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) clocksource_default_clock(void);
extern void clocksource_mark_unstable(struct clocksource *cs);
extern void
clocksource_start_suspend_timing(struct clocksource *cs, u64 start_cycles);
extern u64 clocksource_stop_suspend_timing(struct clocksource *cs, u64 now);

extern u64
clocks_calc_max_nsecs(u32 mult, u32 shift, u32 maxadj, u64 mask, u64 *max_cycles);
extern void
clocks_calc_mult_shift(u32 *mult, u32 *shift, u32 from, u32 to, u32 minsec);





extern int
__clocksource_register_scale(struct clocksource *cs, u32 scale, u32 freq);
extern void
__clocksource_update_freq_scale(struct clocksource *cs, u32 scale, u32 freq);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __clocksource_register(struct clocksource *cs)
{
 return __clocksource_register_scale(cs, 1, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int clocksource_register_hz(struct clocksource *cs, u32 hz)
{
 return __clocksource_register_scale(cs, 1, hz);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int clocksource_register_khz(struct clocksource *cs, u32 khz)
{
 return __clocksource_register_scale(cs, 1000, khz);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clocksource_update_freq_hz(struct clocksource *cs, u32 hz)
{
 __clocksource_update_freq_scale(cs, 1, hz);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clocksource_update_freq_khz(struct clocksource *cs, u32 khz)
{
 __clocksource_update_freq_scale(cs, 1000, khz);
}


extern void clocksource_arch_init(struct clocksource *cs);




extern int timekeeping_notify(struct clocksource *clock);

extern u64 clocksource_mmio_readl_up(struct clocksource *);
extern u64 clocksource_mmio_readl_down(struct clocksource *);
extern u64 clocksource_mmio_readw_up(struct clocksource *);
extern u64 clocksource_mmio_readw_down(struct clocksource *);

extern int clocksource_mmio_init(void *, const char *,
 unsigned long, int, unsigned, u64 (*)(struct clocksource *));

extern int clocksource_i8253_init(void);





extern void timer_probe(void);







extern ulong max_cswd_read_retries;
void clocksource_verify_percpu(struct clocksource *cs);
# 25 "./arch/x86/include/asm/kvm_host.h" 2

# 1 "./include/linux/hyperv.h" 1
# 15 "./include/linux/hyperv.h"
# 1 "./include/uapi/linux/hyperv.h" 1
# 54 "./include/uapi/linux/hyperv.h"
enum hv_vss_op {
 VSS_OP_CREATE = 0,
 VSS_OP_DELETE,
 VSS_OP_HOT_BACKUP,
 VSS_OP_GET_DM_INFO,
 VSS_OP_BU_COMPLETE,



 VSS_OP_FREEZE,
 VSS_OP_THAW,
 VSS_OP_AUTO_RECOVER,
 VSS_OP_COUNT
};





struct hv_vss_hdr {
 __u8 operation;
 __u8 reserved[7];
} __attribute__((packed));
# 85 "./include/uapi/linux/hyperv.h"
struct hv_vss_check_feature {
 __u32 flags;
} __attribute__((packed));

struct hv_vss_check_dm_info {
 __u32 flags;
} __attribute__((packed));

struct hv_vss_msg {
 union {
  struct hv_vss_hdr vss_hdr;
  int error;
 };
 union {
  struct hv_vss_check_feature vss_cf;
  struct hv_vss_check_dm_info dm_info;
 };
} __attribute__((packed));
# 113 "./include/uapi/linux/hyperv.h"
enum hv_fcopy_op {
 START_FILE_COPY = 0,
 WRITE_TO_FILE,
 COMPLETE_FCOPY,
 CANCEL_FCOPY,
};

struct hv_fcopy_hdr {
 __u32 operation;
 __u8 service_id0[16];
 __u8 service_id1[16];
} __attribute__((packed));




struct hv_start_fcopy {
 struct hv_fcopy_hdr hdr;
 __u16 file_name[260];
 __u16 path_name[260];
 __u32 copy_flags;
 __u64 file_size;
} __attribute__((packed));






struct hv_do_fcopy {
 struct hv_fcopy_hdr hdr;
 __u32 pad;
 __u64 offset;
 __u32 size;
 __u8 data[(6 * 1024)];
} __attribute__((packed));
# 285 "./include/uapi/linux/hyperv.h"
enum hv_kvp_exchg_op {
 KVP_OP_GET = 0,
 KVP_OP_SET,
 KVP_OP_DELETE,
 KVP_OP_ENUMERATE,
 KVP_OP_GET_IP_INFO,
 KVP_OP_SET_IP_INFO,
 KVP_OP_COUNT
};

enum hv_kvp_exchg_pool {
 KVP_POOL_EXTERNAL = 0,
 KVP_POOL_GUEST,
 KVP_POOL_AUTO,
 KVP_POOL_AUTO_EXTERNAL,
 KVP_POOL_AUTO_INTERNAL,
 KVP_POOL_COUNT
};
# 328 "./include/uapi/linux/hyperv.h"
struct hv_kvp_ipaddr_value {
 __u16 adapter_id[128];
 __u8 addr_family;
 __u8 dhcp_enabled;
 __u16 ip_addr[1024];
 __u16 sub_net[1024];
 __u16 gate_way[512];
 __u16 dns_addr[1024];
} __attribute__((packed));


struct hv_kvp_hdr {
 __u8 operation;
 __u8 pool;
 __u16 pad;
} __attribute__((packed));

struct hv_kvp_exchg_msg_value {
 __u32 value_type;
 __u32 key_size;
 __u32 value_size;
 __u8 key[(512)];
 union {
  __u8 value[(2048)];
  __u32 value_u32;
  __u64 value_u64;
 };
} __attribute__((packed));

struct hv_kvp_msg_enumerate {
 __u32 index;
 struct hv_kvp_exchg_msg_value data;
} __attribute__((packed));

struct hv_kvp_msg_get {
 struct hv_kvp_exchg_msg_value data;
};

struct hv_kvp_msg_set {
 struct hv_kvp_exchg_msg_value data;
};

struct hv_kvp_msg_delete {
 __u32 key_size;
 __u8 key[(512)];
};

struct hv_kvp_register {
 __u8 version[(512)];
};

struct hv_kvp_msg {
 union {
  struct hv_kvp_hdr kvp_hdr;
  int error;
 };
 union {
  struct hv_kvp_msg_get kvp_get;
  struct hv_kvp_msg_set kvp_set;
  struct hv_kvp_msg_delete kvp_delete;
  struct hv_kvp_msg_enumerate kvp_enum_data;
  struct hv_kvp_ipaddr_value kvp_ip_val;
  struct hv_kvp_register kvp_register;
 } body;
} __attribute__((packed));

struct hv_kvp_ip_msg {
 __u8 operation;
 __u8 pool;
 struct hv_kvp_ipaddr_value kvp_ip_val;
} __attribute__((packed));
# 16 "./include/linux/hyperv.h" 2



# 1 "./include/linux/scatterlist.h" 1
# 11 "./include/linux/scatterlist.h"
struct scatterlist {
 unsigned long page_link;
 unsigned int offset;
 unsigned int length;
 dma_addr_t dma_address;

 unsigned int dma_length;

};
# 36 "./include/linux/scatterlist.h"
struct sg_table {
 struct scatterlist *sgl;
 unsigned int nents;
 unsigned int orig_nents;
};

struct sg_append_table {
 struct sg_table sgt;
 struct scatterlist *prv;
 unsigned int total_nents;
};
# 87 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sg_assign_page(struct scatterlist *sg, struct page *page)
{
 unsigned long page_link = sg->page_link & (0x01UL | 0x02UL);





 do { if (__builtin_expect(!!((unsigned long) page & (0x01UL | 0x02UL)), 0)) do { ({ asm volatile("340" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "340" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("341" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "341" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);



 sg->page_link = page_link | (unsigned long) page;
}
# 116 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sg_set_page(struct scatterlist *sg, struct page *page,
          unsigned int len, unsigned int offset)
{
 sg_assign_page(sg, page);
 sg->offset = offset;
 sg->length = len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *sg_page(struct scatterlist *sg)
{



 return (struct page *)((sg)->page_link & ~(0x01UL | 0x02UL));
}
# 139 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sg_set_buf(struct scatterlist *sg, const void *buf,
         unsigned int buflen)
{



 sg_set_page(sg, (((struct page *)vmemmap_base) + (__phys_addr_nodebug((unsigned long)(buf)) >> 12)), buflen, ((unsigned long)(buf) & ~(~(((1UL) << 12)-1))));
}
# 168 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __sg_chain(struct scatterlist *chain_sg,
         struct scatterlist *sgl)
{



 chain_sg->offset = 0;
 chain_sg->length = 0;





 chain_sg->page_link = ((unsigned long) sgl | 0x01UL) & ~0x02UL;
}
# 194 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sg_chain(struct scatterlist *prv, unsigned int prv_nents,
       struct scatterlist *sgl)
{
 __sg_chain(&prv[prv_nents - 1], sgl);
}
# 209 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sg_mark_end(struct scatterlist *sg)
{



 sg->page_link |= 0x02UL;
 sg->page_link &= ~0x01UL;
}
# 226 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sg_unmark_end(struct scatterlist *sg)
{
 sg->page_link &= ~0x02UL;
}
# 241 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) dma_addr_t sg_phys(struct scatterlist *sg)
{
 return ((dma_addr_t)(unsigned long)((sg_page(sg)) - ((struct page *)vmemmap_base)) << 12) + sg->offset;
}
# 256 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *sg_virt(struct scatterlist *sg)
{
 return lowmem_page_address(sg_page(sg)) + sg->offset;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sg_init_marker(struct scatterlist *sgl,
      unsigned int nents)
{
 sg_mark_end(&sgl[nents - 1]);
}

int sg_nents(struct scatterlist *sg);
int sg_nents_for_len(struct scatterlist *sg, u64 len);
struct scatterlist *sg_next(struct scatterlist *);
struct scatterlist *sg_last(struct scatterlist *s, unsigned int);
void sg_init_table(struct scatterlist *, unsigned int);
void sg_init_one(struct scatterlist *, const void *, unsigned int);
int sg_split(struct scatterlist *in, const int in_mapped_nents,
      const off_t skip, const int nb_splits,
      const size_t *split_sizes,
      struct scatterlist **out, int *out_mapped_nents,
      gfp_t gfp_mask);

typedef struct scatterlist *(sg_alloc_fn)(unsigned int, gfp_t);
typedef void (sg_free_fn)(struct scatterlist *, unsigned int);

void __sg_free_table(struct sg_table *, unsigned int, unsigned int,
       sg_free_fn *, unsigned int);
void sg_free_table(struct sg_table *);
void sg_free_append_table(struct sg_append_table *sgt);
int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int,
       struct scatterlist *, unsigned int, gfp_t, sg_alloc_fn *);
int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
int sg_alloc_append_table_from_pages(struct sg_append_table *sgt,
         struct page **pages, unsigned int n_pages,
         unsigned int offset, unsigned long size,
         unsigned int max_segment,
         unsigned int left_pages, gfp_t gfp_mask);
int sg_alloc_table_from_pages_segment(struct sg_table *sgt, struct page **pages,
          unsigned int n_pages, unsigned int offset,
          unsigned long size,
          unsigned int max_segment, gfp_t gfp_mask);
# 325 "./include/linux/scatterlist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sg_alloc_table_from_pages(struct sg_table *sgt,
         struct page **pages,
         unsigned int n_pages,
         unsigned int offset,
         unsigned long size, gfp_t gfp_mask)
{
 return sg_alloc_table_from_pages_segment(sgt, pages, n_pages, offset,
       size, (~0U), gfp_mask);
}


struct scatterlist *sgl_alloc_order(unsigned long long length,
        unsigned int order, bool chainable,
        gfp_t gfp, unsigned int *nent_p);
struct scatterlist *sgl_alloc(unsigned long long length, gfp_t gfp,
         unsigned int *nent_p);
void sgl_free_n_order(struct scatterlist *sgl, int nents, int order);
void sgl_free_order(struct scatterlist *sgl, int order);
void sgl_free(struct scatterlist *sgl);


size_t sg_copy_buffer(struct scatterlist *sgl, unsigned int nents, void *buf,
        size_t buflen, off_t skip, bool to_buffer);

size_t sg_copy_from_buffer(struct scatterlist *sgl, unsigned int nents,
      const void *buf, size_t buflen);
size_t sg_copy_to_buffer(struct scatterlist *sgl, unsigned int nents,
    void *buf, size_t buflen);

size_t sg_pcopy_from_buffer(struct scatterlist *sgl, unsigned int nents,
       const void *buf, size_t buflen, off_t skip);
size_t sg_pcopy_to_buffer(struct scatterlist *sgl, unsigned int nents,
     void *buf, size_t buflen, off_t skip);
size_t sg_zero_buffer(struct scatterlist *sgl, unsigned int nents,
         size_t buflen, off_t skip);
# 404 "./include/linux/scatterlist.h"
struct sg_page_iter {
 struct scatterlist *sg;
 unsigned int sg_pgoffset;


 unsigned int __nents;
 int __pg_advance;

};
# 421 "./include/linux/scatterlist.h"
struct sg_dma_page_iter {
 struct sg_page_iter base;
};

bool __sg_page_iter_next(struct sg_page_iter *piter);
bool __sg_page_iter_dma_next(struct sg_dma_page_iter *dma_iter);
void __sg_page_iter_start(struct sg_page_iter *piter,
     struct scatterlist *sglist, unsigned int nents,
     unsigned long pgoffset);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *sg_page_iter_page(struct sg_page_iter *piter)
{
 return ((sg_page(piter->sg)) + (piter->sg_pgoffset));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) dma_addr_t
sg_page_iter_dma_address(struct sg_dma_page_iter *dma_iter)
{
 return ((dma_iter->base.sg)->dma_address) +
        (dma_iter->base.sg_pgoffset << 12);
}
# 529 "./include/linux/scatterlist.h"
struct sg_mapping_iter {

 struct page *page;
 void *addr;
 size_t length;
 size_t consumed;
 struct sg_page_iter piter;


 unsigned int __offset;
 unsigned int __remaining;
 unsigned int __flags;
};

void sg_miter_start(struct sg_mapping_iter *miter, struct scatterlist *sgl,
      unsigned int nents, unsigned int flags);
bool sg_miter_skip(struct sg_mapping_iter *miter, off_t offset);
bool sg_miter_next(struct sg_mapping_iter *miter);
void sg_miter_stop(struct sg_mapping_iter *miter);
# 20 "./include/linux/hyperv.h" 2






# 1 "./include/linux/reciprocal_div.h" 1
# 23 "./include/linux/reciprocal_div.h"
struct reciprocal_value {
 u32 m;
 u8 sh1, sh2;
};




struct reciprocal_value reciprocal_value(u32 d);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 reciprocal_divide(u32 a, struct reciprocal_value R)
{
 u32 t = (u32)(((u64)a * R.m) >> 32);
 return (t + ((a - t) >> R.sh1)) >> R.sh2;
}

struct reciprocal_value_adv {
 u32 m;
 u8 sh, exp;
 bool is_wide_m;
};
# 102 "./include/linux/reciprocal_div.h"
struct reciprocal_value_adv reciprocal_value_adv(u32 d, u8 prec);
# 27 "./include/linux/hyperv.h" 2
# 1 "./arch/x86/include/asm/hyperv-tlfs.h" 1
# 158 "./arch/x86/include/asm/hyperv-tlfs.h"
enum hv_isolation_type {
 HV_ISOLATION_TYPE_NONE = 0,
 HV_ISOLATION_TYPE_VBS = 1,
 HV_ISOLATION_TYPE_SNP = 2
};
# 280 "./arch/x86/include/asm/hyperv-tlfs.h"
enum hv_mem_host_visibility {
 VMBUS_PAGE_NOT_VISIBLE = 0,
 VMBUS_PAGE_VISIBLE_READ_ONLY = 1,
 VMBUS_PAGE_VISIBLE_READ_WRITE = 3
};



struct hv_gpa_range_for_visibility {
 u64 partition_id;
 u32 host_visibility:2;
 u32 reserved0:30;
 u32 reserved1;
 u64 gpa_page_list[((((1UL) << 12) / sizeof(u64)) - 2)];
} __attribute__((__packed__));




union hv_x64_msr_hypercall_contents {
 u64 as_uint64;
 struct {
  u64 enable:1;
  u64 reserved:11;
  u64 guest_physical_address:52;
 } __attribute__((__packed__));
};

union hv_vp_assist_msr_contents {
 u64 as_uint64;
 struct {
  u64 enable:1;
  u64 reserved:11;
  u64 pfn:52;
 } __attribute__((__packed__));
};

struct hv_reenlightenment_control {
 __u64 vector:8;
 __u64 reserved1:8;
 __u64 enabled:1;
 __u64 reserved2:15;
 __u64 target_vp:32;
} __attribute__((__packed__));

struct hv_tsc_emulation_control {
 __u64 enabled:1;
 __u64 reserved:63;
} __attribute__((__packed__));

struct hv_tsc_emulation_status {
 __u64 inprogress:1;
 __u64 reserved:63;
} __attribute__((__packed__));
# 360 "./arch/x86/include/asm/hyperv-tlfs.h"
struct hv_nested_enlightenments_control {
 struct {
  __u32 directhypercall:1;
  __u32 reserved:31;
 } features;
 struct {
  __u32 reserved;
 } hypercallControls;
} __attribute__((__packed__));


struct hv_vp_assist_page {
 __u32 apic_assist;
 __u32 reserved1;
 __u64 vtl_control[3];
 struct hv_nested_enlightenments_control nested_control;
 __u8 enlighten_vmentry;
 __u8 reserved2[7];
 __u64 current_nested_vmcs;
} __attribute__((__packed__));

struct hv_enlightened_vmcs {
 u32 revision_id;
 u32 abort;

 u16 host_es_selector;
 u16 host_cs_selector;
 u16 host_ss_selector;
 u16 host_ds_selector;
 u16 host_fs_selector;
 u16 host_gs_selector;
 u16 host_tr_selector;

 u16 padding16_1;

 u64 host_ia32_pat;
 u64 host_ia32_efer;

 u64 host_cr0;
 u64 host_cr3;
 u64 host_cr4;

 u64 host_ia32_sysenter_esp;
 u64 host_ia32_sysenter_eip;
 u64 host_rip;
 u32 host_ia32_sysenter_cs;

 u32 pin_based_vm_exec_control;
 u32 vm_exit_controls;
 u32 secondary_vm_exec_control;

 u64 io_bitmap_a;
 u64 io_bitmap_b;
 u64 msr_bitmap;

 u16 guest_es_selector;
 u16 guest_cs_selector;
 u16 guest_ss_selector;
 u16 guest_ds_selector;
 u16 guest_fs_selector;
 u16 guest_gs_selector;
 u16 guest_ldtr_selector;
 u16 guest_tr_selector;

 u32 guest_es_limit;
 u32 guest_cs_limit;
 u32 guest_ss_limit;
 u32 guest_ds_limit;
 u32 guest_fs_limit;
 u32 guest_gs_limit;
 u32 guest_ldtr_limit;
 u32 guest_tr_limit;
 u32 guest_gdtr_limit;
 u32 guest_idtr_limit;

 u32 guest_es_ar_bytes;
 u32 guest_cs_ar_bytes;
 u32 guest_ss_ar_bytes;
 u32 guest_ds_ar_bytes;
 u32 guest_fs_ar_bytes;
 u32 guest_gs_ar_bytes;
 u32 guest_ldtr_ar_bytes;
 u32 guest_tr_ar_bytes;

 u64 guest_es_base;
 u64 guest_cs_base;
 u64 guest_ss_base;
 u64 guest_ds_base;
 u64 guest_fs_base;
 u64 guest_gs_base;
 u64 guest_ldtr_base;
 u64 guest_tr_base;
 u64 guest_gdtr_base;
 u64 guest_idtr_base;

 u64 padding64_1[3];

 u64 vm_exit_msr_store_addr;
 u64 vm_exit_msr_load_addr;
 u64 vm_entry_msr_load_addr;

 u64 cr3_target_value0;
 u64 cr3_target_value1;
 u64 cr3_target_value2;
 u64 cr3_target_value3;

 u32 page_fault_error_code_mask;
 u32 page_fault_error_code_match;

 u32 cr3_target_count;
 u32 vm_exit_msr_store_count;
 u32 vm_exit_msr_load_count;
 u32 vm_entry_msr_load_count;

 u64 tsc_offset;
 u64 virtual_apic_page_addr;
 u64 vmcs_link_pointer;

 u64 guest_ia32_debugctl;
 u64 guest_ia32_pat;
 u64 guest_ia32_efer;

 u64 guest_pdptr0;
 u64 guest_pdptr1;
 u64 guest_pdptr2;
 u64 guest_pdptr3;

 u64 guest_pending_dbg_exceptions;
 u64 guest_sysenter_esp;
 u64 guest_sysenter_eip;

 u32 guest_activity_state;
 u32 guest_sysenter_cs;

 u64 cr0_guest_host_mask;
 u64 cr4_guest_host_mask;
 u64 cr0_read_shadow;
 u64 cr4_read_shadow;
 u64 guest_cr0;
 u64 guest_cr3;
 u64 guest_cr4;
 u64 guest_dr7;

 u64 host_fs_base;
 u64 host_gs_base;
 u64 host_tr_base;
 u64 host_gdtr_base;
 u64 host_idtr_base;
 u64 host_rsp;

 u64 ept_pointer;

 u16 virtual_processor_id;
 u16 padding16_2[3];

 u64 padding64_2[5];
 u64 guest_physical_address;

 u32 vm_instruction_error;
 u32 vm_exit_reason;
 u32 vm_exit_intr_info;
 u32 vm_exit_intr_error_code;
 u32 idt_vectoring_info_field;
 u32 idt_vectoring_error_code;
 u32 vm_exit_instruction_len;
 u32 vmx_instruction_info;

 u64 exit_qualification;
 u64 exit_io_instruction_ecx;
 u64 exit_io_instruction_esi;
 u64 exit_io_instruction_edi;
 u64 exit_io_instruction_eip;

 u64 guest_linear_address;
 u64 guest_rsp;
 u64 guest_rflags;

 u32 guest_interruptibility_info;
 u32 cpu_based_vm_exec_control;
 u32 exception_bitmap;
 u32 vm_entry_controls;
 u32 vm_entry_intr_info_field;
 u32 vm_entry_exception_error_code;
 u32 vm_entry_instruction_len;
 u32 tpr_threshold;

 u64 guest_rip;

 u32 hv_clean_fields;
 u32 hv_padding_32;
 u32 hv_synthetic_controls;
 struct {
  u32 nested_flush_hypercall:1;
  u32 msr_bitmap:1;
  u32 reserved:30;
 } __attribute__((__packed__)) hv_enlightenments_control;
 u32 hv_vp_id;

 u64 hv_vm_id;
 u64 partition_assist_page;
 u64 padding64_4[4];
 u64 guest_bndcfgs;
 u64 padding64_5[7];
 u64 xss_exit_bitmap;
 u64 padding64_6[7];
} __attribute__((__packed__));
# 587 "./arch/x86/include/asm/hyperv-tlfs.h"
struct hv_partition_assist_pg {
 u32 tlb_lock_count;
};

enum hv_interrupt_type {
 HV_X64_INTERRUPT_TYPE_FIXED = 0x0000,
 HV_X64_INTERRUPT_TYPE_LOWESTPRIORITY = 0x0001,
 HV_X64_INTERRUPT_TYPE_SMI = 0x0002,
 HV_X64_INTERRUPT_TYPE_REMOTEREAD = 0x0003,
 HV_X64_INTERRUPT_TYPE_NMI = 0x0004,
 HV_X64_INTERRUPT_TYPE_INIT = 0x0005,
 HV_X64_INTERRUPT_TYPE_SIPI = 0x0006,
 HV_X64_INTERRUPT_TYPE_EXTINT = 0x0007,
 HV_X64_INTERRUPT_TYPE_LOCALINT0 = 0x0008,
 HV_X64_INTERRUPT_TYPE_LOCALINT1 = 0x0009,
 HV_X64_INTERRUPT_TYPE_MAXIMUM = 0x000A,
};

# 1 "./include/asm-generic/hyperv-tlfs.h" 1
# 98 "./include/asm-generic/hyperv-tlfs.h"
struct ms_hyperv_tsc_page {
 volatile u32 tsc_sequence;
 u32 reserved1;
 volatile u64 tsc_scale;
 volatile s64 tsc_offset;
} __attribute__((__packed__));
# 175 "./include/asm-generic/hyperv-tlfs.h"
enum HV_GENERIC_SET_FORMAT {
 HV_GENERIC_SET_SPARSE_4K,
 HV_GENERIC_SET_ALL,
};
# 240 "./include/asm-generic/hyperv-tlfs.h"
enum hv_message_type {
 HVMSG_NONE = 0x00000000,


 HVMSG_UNMAPPED_GPA = 0x80000000,
 HVMSG_GPA_INTERCEPT = 0x80000001,


 HVMSG_TIMER_EXPIRED = 0x80000010,


 HVMSG_INVALID_VP_REGISTER_VALUE = 0x80000020,
 HVMSG_UNRECOVERABLE_EXCEPTION = 0x80000021,
 HVMSG_UNSUPPORTED_FEATURE = 0x80000022,


 HVMSG_EVENTLOG_BUFFERCOMPLETE = 0x80000040,


 HVMSG_X64_IOPORT_INTERCEPT = 0x80010000,
 HVMSG_X64_MSR_INTERCEPT = 0x80010001,
 HVMSG_X64_CPUID_INTERCEPT = 0x80010002,
 HVMSG_X64_EXCEPTION_INTERCEPT = 0x80010003,
 HVMSG_X64_APIC_EOI = 0x80010004,
 HVMSG_X64_LEGACY_FP_ERROR = 0x80010005
};


union hv_message_flags {
 __u8 asu8;
 struct {
  __u8 msg_pending:1;
  __u8 reserved:7;
 } __attribute__((__packed__));
};


union hv_port_id {
 __u32 asu32;
 struct {
  __u32 id:24;
  __u32 reserved:8;
 } __attribute__((__packed__)) u;
};


struct hv_message_header {
 __u32 message_type;
 __u8 payload_size;
 union hv_message_flags message_flags;
 __u8 reserved[2];
 union {
  __u64 sender;
  union hv_port_id port;
 };
} __attribute__((__packed__));


struct hv_message {
 struct hv_message_header header;
 union {
  __u64 payload[(30)];
 } u;
} __attribute__((__packed__));


struct hv_message_page {
 struct hv_message sint_message[(16)];
} __attribute__((__packed__));


struct hv_timer_message_payload {
 __u32 timer_index;
 __u32 reserved;
 __u64 expiration_time;
 __u64 delivery_time;
} __attribute__((__packed__));
# 326 "./include/asm-generic/hyperv-tlfs.h"
union hv_stimer_config {
 u64 as_uint64;
 struct {
  u64 enable:1;
  u64 periodic:1;
  u64 lazy:1;
  u64 auto_enable:1;
  u64 apic_vector:8;
  u64 direct_mode:1;
  u64 reserved_z0:3;
  u64 sintx:4;
  u64 reserved_z1:44;
 } __attribute__((__packed__));
};



union hv_synic_event_flags {
 unsigned long flags[(256 / sizeof(unsigned long))];
};


union hv_synic_scontrol {
 u64 as_uint64;
 struct {
  u64 enable:1;
  u64 reserved:63;
 } __attribute__((__packed__));
};


union hv_synic_sint {
 u64 as_uint64;
 struct {
  u64 vector:8;
  u64 reserved1:8;
  u64 masked:1;
  u64 auto_eoi:1;
  u64 polling:1;
  u64 reserved2:45;
 } __attribute__((__packed__));
};


union hv_synic_simp {
 u64 as_uint64;
 struct {
  u64 simp_enabled:1;
  u64 preserved:11;
  u64 base_simp_gpa:52;
 } __attribute__((__packed__));
};


union hv_synic_siefp {
 u64 as_uint64;
 struct {
  u64 siefp_enabled:1;
  u64 preserved:11;
  u64 base_siefp_gpa:52;
 } __attribute__((__packed__));
};

struct hv_vpset {
 u64 format;
 u64 valid_bank_mask;
 u64 bank_contents[];
} __attribute__((__packed__));


struct hv_send_ipi {
 u32 vector;
 u32 reserved;
 u64 cpu_mask;
} __attribute__((__packed__));


struct hv_send_ipi_ex {
 u32 vector;
 u32 reserved;
 struct hv_vpset vp_set;
} __attribute__((__packed__));


struct hv_guest_mapping_flush {
 u64 address_space;
 u64 flags;
} __attribute__((__packed__));
# 424 "./include/asm-generic/hyperv-tlfs.h"
union hv_gpa_page_range {
 u64 address_space;
 struct {
  u64 additional_pages:11;
  u64 largepage:1;
  u64 basepfn:52;
 } page;
 struct {
  u64 reserved:12;
  u64 page_size:1;
  u64 reserved1:8;
  u64 base_large_pfn:43;
 };
};
# 447 "./include/asm-generic/hyperv-tlfs.h"
struct hv_guest_mapping_flush_list {
 u64 address_space;
 u64 flags;
 union hv_gpa_page_range gpa_list[((((((1UL))) << (12)) - 2 * sizeof(u64)) / sizeof(union hv_gpa_page_range))];
};


struct hv_tlb_flush {
 u64 address_space;
 u64 flags;
 u64 processor_mask;
 u64 gva_list[];
} __attribute__((__packed__));


struct hv_tlb_flush_ex {
 u64 address_space;
 u64 flags;
 struct hv_vpset hv_vp_set;
 u64 gva_list[];
} __attribute__((__packed__));


struct hv_get_partition_id {
 u64 partition_id;
} __attribute__((__packed__));


struct hv_deposit_memory {
 u64 partition_id;
 u64 gpa_page_list[];
} __attribute__((__packed__));

struct hv_proximity_domain_flags {
 u32 proximity_preferred : 1;
 u32 reserved : 30;
 u32 proximity_info_valid : 1;
} __attribute__((__packed__));


union hv_proximity_domain_info {
 struct {
  u32 domain_id;
  struct hv_proximity_domain_flags flags;
 };
 u64 as_uint64;
} __attribute__((__packed__));

struct hv_lp_startup_status {
 u64 hv_status;
 u64 substatus1;
 u64 substatus2;
 u64 substatus3;
 u64 substatus4;
 u64 substatus5;
 u64 substatus6;
} __attribute__((__packed__));


struct hv_add_logical_processor_in {
 u32 lp_index;
 u32 apic_id;
 union hv_proximity_domain_info proximity_domain_info;
 u64 flags;
} __attribute__((__packed__));

struct hv_add_logical_processor_out {
 struct hv_lp_startup_status startup_status;
} __attribute__((__packed__));

enum HV_SUBNODE_TYPE
{
    HvSubnodeAny = 0,
    HvSubnodeSocket = 1,
    HvSubnodeAmdNode = 2,
    HvSubnodeL3 = 3,
    HvSubnodeCount = 4,
    HvSubnodeInvalid = -1
};


struct hv_create_vp {
 u64 partition_id;
 u32 vp_index;
 u8 padding[3];
 u8 subnode_type;
 u64 subnode_id;
 union hv_proximity_domain_info proximity_domain_info;
 u64 flags;
} __attribute__((__packed__));

enum hv_interrupt_source {
 HV_INTERRUPT_SOURCE_MSI = 1,
 HV_INTERRUPT_SOURCE_IOAPIC,
};

union hv_msi_address_register {
 u32 as_uint32;
 struct {
  u32 reserved1:2;
  u32 destination_mode:1;
  u32 redirection_hint:1;
  u32 reserved2:8;
  u32 destination_id:8;
  u32 msi_base:12;
 };
} __attribute__((__packed__));

union hv_msi_data_register {
 u32 as_uint32;
 struct {
  u32 vector:8;
  u32 delivery_mode:3;
  u32 reserved1:3;
  u32 level_assert:1;
  u32 trigger_mode:1;
  u32 reserved2:16;
 };
} __attribute__((__packed__));


union hv_msi_entry {
 u64 as_uint64;
 struct {
  union hv_msi_address_register address;
  union hv_msi_data_register data;
 } __attribute__((__packed__));
};

union hv_ioapic_rte {
 u64 as_uint64;

 struct {
  u32 vector:8;
  u32 delivery_mode:3;
  u32 destination_mode:1;
  u32 delivery_status:1;
  u32 interrupt_polarity:1;
  u32 remote_irr:1;
  u32 trigger_mode:1;
  u32 interrupt_mask:1;
  u32 reserved1:15;

  u32 reserved2:24;
  u32 destination_id:8;
 };

 struct {
  u32 low_uint32;
  u32 high_uint32;
 };
} __attribute__((__packed__));

struct hv_interrupt_entry {
 u32 source;
 u32 reserved1;
 union {
  union hv_msi_entry msi_entry;
  union hv_ioapic_rte ioapic_rte;
 };
} __attribute__((__packed__));







struct hv_device_interrupt_target {
 u32 vector;
 u32 flags;
 union {
  u64 vp_mask;
  struct hv_vpset vp_set;
 };
} __attribute__((__packed__));

struct hv_retarget_device_interrupt {
 u64 partition_id;
 u64 device_id;
 struct hv_interrupt_entry int_entry;
 u64 reserved2;
 struct hv_device_interrupt_target int_target;
} __attribute__((__packed__)) __attribute__((__aligned__(8)));



struct hv_get_vp_registers_input {
 struct {
  u64 partitionid;
  u32 vpindex;
  u8 inputvtl;
  u8 padding[3];
 } header;
 struct input {
  u32 name0;
  u32 name1;
 } element[];
} __attribute__((__packed__));



struct hv_get_vp_registers_output {
 union {
  struct {
   u32 a;
   u32 b;
   u32 c;
   u32 d;
  } as32 __attribute__((__packed__));
  struct {
   u64 low;
   u64 high;
  } as64 __attribute__((__packed__));
 };
};


struct hv_set_vp_registers_input {
 struct {
  u64 partitionid;
  u32 vpindex;
  u8 inputvtl;
  u8 padding[3];
 } header;
 struct {
  u32 name;
  u32 padding1;
  u64 padding2;
  u64 valuelow;
  u64 valuehigh;
 } element[];
} __attribute__((__packed__));

enum hv_device_type {
 HV_DEVICE_TYPE_LOGICAL = 0,
 HV_DEVICE_TYPE_PCI = 1,
 HV_DEVICE_TYPE_IOAPIC = 2,
 HV_DEVICE_TYPE_ACPI = 3,
};

typedef u16 hv_pci_rid;
typedef u16 hv_pci_segment;
typedef u64 hv_logical_device_id;
union hv_pci_bdf {
 u16 as_uint16;

 struct {
  u8 function:3;
  u8 device:5;
  u8 bus;
 };
} __attribute__((__packed__));

union hv_pci_bus_range {
 u16 as_uint16;

 struct {
  u8 subordinate_bus;
  u8 secondary_bus;
 };
} __attribute__((__packed__));

union hv_device_id {
 u64 as_uint64;

 struct {
  u64 reserved0:62;
  u64 device_type:2;
 };


 struct {
  u64 id:62;
  u64 device_type:2;
 } logical;


 struct {
  union {
   hv_pci_rid rid;
   union hv_pci_bdf bdf;
  };

  hv_pci_segment segment;
  union hv_pci_bus_range shadow_bus_range;

  u16 phantom_function_bits:2;
  u16 source_shadow:1;

  u16 rsvdz0:11;
  u16 device_type:2;
 } pci;


 struct {
  u8 ioapic_id;
  u8 rsvdz0;
  u16 rsvdz1;
  u16 rsvdz2;

  u16 rsvdz3:14;
  u16 device_type:2;
 } ioapic;


 struct {
  u32 input_mapping_base;
  u32 input_mapping_count:30;
  u32 device_type:2;
 } acpi;
} __attribute__((__packed__));

enum hv_interrupt_trigger_mode {
 HV_INTERRUPT_TRIGGER_MODE_EDGE = 0,
 HV_INTERRUPT_TRIGGER_MODE_LEVEL = 1,
};

struct hv_device_interrupt_descriptor {
 u32 interrupt_type;
 u32 trigger_mode;
 u32 vector_count;
 u32 reserved;
 struct hv_device_interrupt_target target;
} __attribute__((__packed__));

struct hv_input_map_device_interrupt {
 u64 partition_id;
 u64 device_id;
 u64 flags;
 struct hv_interrupt_entry logical_interrupt_entry;
 struct hv_device_interrupt_descriptor interrupt_descriptor;
} __attribute__((__packed__));

struct hv_output_map_device_interrupt {
 struct hv_interrupt_entry interrupt_entry;
} __attribute__((__packed__));

struct hv_input_unmap_device_interrupt {
 u64 partition_id;
 u64 device_id;
 struct hv_interrupt_entry interrupt_entry;
} __attribute__((__packed__));
# 804 "./include/asm-generic/hyperv-tlfs.h"
struct hv_memory_hint {
 u64 type:2;
 u64 reserved:62;
 union hv_gpa_page_range ranges[];
} __attribute__((__packed__));
# 606 "./arch/x86/include/asm/hyperv-tlfs.h" 2
# 28 "./include/linux/hyperv.h" 2




#pragma pack(push, 1)
# 71 "./include/linux/hyperv.h"
enum hv_gpadl_type {
 HV_GPADL_BUFFER,
 HV_GPADL_RING
};


struct hv_page_buffer {
 u32 len;
 u32 offset;
 u64 pfn;
};


struct hv_multipage_buffer {

 u32 len;
 u32 offset;
 u64 pfn_array[32];
};






struct hv_mpb_array {

 u32 len;
 u32 offset;
 u64 pfn_array[];
};
# 111 "./include/linux/hyperv.h"
#pragma pack(pop)

struct hv_ring_buffer {

 u32 write_index;


 u32 read_index;

 u32 interrupt_mask;
# 148 "./include/linux/hyperv.h"
 u32 pending_send_sz;
 u32 reserved1[12];
 union {
  struct {
   u32 feat_pending_send_sz:1;
  };
  u32 value;
 } feature_bits;


 u8 reserved2[((1UL) << 12) - 68];





 u8 buffer[];
} __attribute__((__packed__));





struct hv_ring_buffer_info {
 struct hv_ring_buffer *ring_buffer;
 u32 ring_size;
 struct reciprocal_value ring_size_div10_reciprocal;
 spinlock_t ring_lock;

 u32 ring_datasize;
 u32 priv_read_index;




 struct mutex ring_buffer_mutex;


 void *pkt_buffer;
 u32 pkt_buffer_size;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hv_get_bytes_to_read(const struct hv_ring_buffer_info *rbi)
{
 u32 read_loc, write_loc, dsize, read;

 dsize = rbi->ring_datasize;
 read_loc = rbi->ring_buffer->read_index;
 write_loc = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_342(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rbi->ring_buffer->write_index) == sizeof(char) || sizeof(rbi->ring_buffer->write_index) == sizeof(short) || sizeof(rbi->ring_buffer->write_index) == sizeof(int) || sizeof(rbi->ring_buffer->write_index) == sizeof(long)) || sizeof(rbi->ring_buffer->write_index) == sizeof(long long))) __compiletime_assert_342(); } while (0); (*(const volatile typeof( _Generic((rbi->ring_buffer->write_index), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rbi->ring_buffer->write_index))) *)&(rbi->ring_buffer->write_index)); });

 read = write_loc >= read_loc ? (write_loc - read_loc) :
  (dsize - read_loc) + write_loc;

 return read;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hv_get_bytes_to_write(const struct hv_ring_buffer_info *rbi)
{
 u32 read_loc, write_loc, dsize, write;

 dsize = rbi->ring_datasize;
 read_loc = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_343(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rbi->ring_buffer->read_index) == sizeof(char) || sizeof(rbi->ring_buffer->read_index) == sizeof(short) || sizeof(rbi->ring_buffer->read_index) == sizeof(int) || sizeof(rbi->ring_buffer->read_index) == sizeof(long)) || sizeof(rbi->ring_buffer->read_index) == sizeof(long long))) __compiletime_assert_343(); } while (0); (*(const volatile typeof( _Generic((rbi->ring_buffer->read_index), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rbi->ring_buffer->read_index))) *)&(rbi->ring_buffer->read_index)); });
 write_loc = rbi->ring_buffer->write_index;

 write = write_loc >= read_loc ? dsize - (write_loc - read_loc) :
  read_loc - write_loc;
 return write;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hv_get_avail_to_write_percent(
  const struct hv_ring_buffer_info *rbi)
{
 u32 avail_write = hv_get_bytes_to_write(rbi);

 return reciprocal_divide(
   (avail_write << 3) + (avail_write << 1),
   rbi->ring_size_div10_reciprocal);
}
# 272 "./include/linux/hyperv.h"
struct vmbus_channel_offer {
 guid_t if_type;
 guid_t if_instance;




 u64 reserved1;
 u64 reserved2;

 u16 chn_flags;
 u16 mmio_megabytes;

 union {

  struct {
   unsigned char user_def[120];
  } std;
# 298 "./include/linux/hyperv.h"
  struct {
   u32 pipe_mode;
   unsigned char user_def[116];
  } pipe;
 } u;






 u16 sub_channel_index;
 u16 reserved3;
} __attribute__((__packed__));
# 323 "./include/linux/hyperv.h"
struct vmpacket_descriptor {
 u16 type;
 u16 offset8;
 u16 len8;
 u16 flags;
 u64 trans_id;
} __attribute__((__packed__));

struct vmpacket_header {
 u32 prev_pkt_start_offset;
 struct vmpacket_descriptor descriptor;
} __attribute__((__packed__));

struct vmtransfer_page_range {
 u32 byte_count;
 u32 byte_offset;
} __attribute__((__packed__));

struct vmtransfer_page_packet_header {
 struct vmpacket_descriptor d;
 u16 xfer_pageset_id;
 u8 sender_owns_set;
 u8 reserved;
 u32 range_cnt;
 struct vmtransfer_page_range ranges[1];
} __attribute__((__packed__));

struct vmgpadl_packet_header {
 struct vmpacket_descriptor d;
 u32 gpadl;
 u32 reserved;
} __attribute__((__packed__));

struct vmadd_remove_transfer_page_set {
 struct vmpacket_descriptor d;
 u32 gpadl;
 u16 xfer_pageset_id;
 u16 reserved;
} __attribute__((__packed__));





struct gpa_range {
 u32 byte_count;
 u32 byte_offset;
 u64 pfn_array[];
};
# 380 "./include/linux/hyperv.h"
struct vmestablish_gpadl {
 struct vmpacket_descriptor d;
 u32 gpadl;
 u32 range_cnt;
 struct gpa_range range[1];
} __attribute__((__packed__));





struct vmteardown_gpadl {
 struct vmpacket_descriptor d;
 u32 gpadl;
 u32 reserved;
} __attribute__((__packed__));





struct vmdata_gpa_direct {
 struct vmpacket_descriptor d;
 u32 reserved;
 u32 range_cnt;
 struct gpa_range range[1];
} __attribute__((__packed__));


struct vmadditional_data {
 struct vmpacket_descriptor d;
 u64 total_bytes;
 u32 offset;
 u32 byte_cnt;
 unsigned char data[1];
} __attribute__((__packed__));

union vmpacket_largest_possible_header {
 struct vmpacket_descriptor simple_hdr;
 struct vmtransfer_page_packet_header xfer_page_hdr;
 struct vmgpadl_packet_header gpadl_hdr;
 struct vmadd_remove_transfer_page_set add_rm_xfer_page_hdr;
 struct vmestablish_gpadl establish_gpadl_hdr;
 struct vmteardown_gpadl teardown_gpadl_hdr;
 struct vmdata_gpa_direct data_gpa_direct_hdr;
};
# 438 "./include/linux/hyperv.h"
enum vmbus_packet_type {
 VM_PKT_INVALID = 0x0,
 VM_PKT_SYNCH = 0x1,
 VM_PKT_ADD_XFER_PAGESET = 0x2,
 VM_PKT_RM_XFER_PAGESET = 0x3,
 VM_PKT_ESTABLISH_GPADL = 0x4,
 VM_PKT_TEARDOWN_GPADL = 0x5,
 VM_PKT_DATA_INBAND = 0x6,
 VM_PKT_DATA_USING_XFER_PAGES = 0x7,
 VM_PKT_DATA_USING_GPADL = 0x8,
 VM_PKT_DATA_USING_GPA_DIRECT = 0x9,
 VM_PKT_CANCEL_REQUEST = 0xa,
 VM_PKT_COMP = 0xb,
 VM_PKT_DATA_USING_ADDITIONAL_PKT = 0xc,
 VM_PKT_ADDITIONAL_DATA = 0xd
};





enum vmbus_channel_message_type {
 CHANNELMSG_INVALID = 0,
 CHANNELMSG_OFFERCHANNEL = 1,
 CHANNELMSG_RESCIND_CHANNELOFFER = 2,
 CHANNELMSG_REQUESTOFFERS = 3,
 CHANNELMSG_ALLOFFERS_DELIVERED = 4,
 CHANNELMSG_OPENCHANNEL = 5,
 CHANNELMSG_OPENCHANNEL_RESULT = 6,
 CHANNELMSG_CLOSECHANNEL = 7,
 CHANNELMSG_GPADL_HEADER = 8,
 CHANNELMSG_GPADL_BODY = 9,
 CHANNELMSG_GPADL_CREATED = 10,
 CHANNELMSG_GPADL_TEARDOWN = 11,
 CHANNELMSG_GPADL_TORNDOWN = 12,
 CHANNELMSG_RELID_RELEASED = 13,
 CHANNELMSG_INITIATE_CONTACT = 14,
 CHANNELMSG_VERSION_RESPONSE = 15,
 CHANNELMSG_UNLOAD = 16,
 CHANNELMSG_UNLOAD_RESPONSE = 17,
 CHANNELMSG_18 = 18,
 CHANNELMSG_19 = 19,
 CHANNELMSG_20 = 20,
 CHANNELMSG_TL_CONNECT_REQUEST = 21,
 CHANNELMSG_MODIFYCHANNEL = 22,
 CHANNELMSG_TL_CONNECT_RESULT = 23,
 CHANNELMSG_MODIFYCHANNEL_RESPONSE = 24,
 CHANNELMSG_COUNT
};




struct vmbus_channel_message_header {
 enum vmbus_channel_message_type msgtype;
 u32 padding;
} __attribute__((__packed__));


struct vmbus_channel_query_vmbus_version {
 struct vmbus_channel_message_header header;
 u32 version;
} __attribute__((__packed__));


struct vmbus_channel_version_supported {
 struct vmbus_channel_message_header header;
 u8 version_supported;
} __attribute__((__packed__));


struct vmbus_channel_offer_channel {
 struct vmbus_channel_message_header header;
 struct vmbus_channel_offer offer;
 u32 child_relid;
 u8 monitorid;



 u8 monitor_allocated:1;
 u8 reserved:7;
# 530 "./include/linux/hyperv.h"
 u16 is_dedicated_interrupt:1;
 u16 reserved1:15;
 u32 connection_id;
} __attribute__((__packed__));


struct vmbus_channel_rescind_offer {
 struct vmbus_channel_message_header header;
 u32 child_relid;
} __attribute__((__packed__));
# 551 "./include/linux/hyperv.h"
struct vmbus_channel_open_channel {
 struct vmbus_channel_message_header header;


 u32 child_relid;


 u32 openid;


 u32 ringbuffer_gpadlhandle;
# 571 "./include/linux/hyperv.h"
 u32 target_vp;






 u32 downstream_ringbuffer_pageoffset;


 unsigned char userdata[120];
} __attribute__((__packed__));


struct vmbus_channel_open_result {
 struct vmbus_channel_message_header header;
 u32 child_relid;
 u32 openid;
 u32 status;
} __attribute__((__packed__));


struct vmbus_channel_modifychannel_response {
 struct vmbus_channel_message_header header;
 u32 child_relid;
 u32 status;
} __attribute__((__packed__));


struct vmbus_channel_close_channel {
 struct vmbus_channel_message_header header;
 u32 child_relid;
} __attribute__((__packed__));
# 616 "./include/linux/hyperv.h"
struct vmbus_channel_gpadl_header {
 struct vmbus_channel_message_header header;
 u32 child_relid;
 u32 gpadl;
 u16 range_buflen;
 u16 rangecount;
 struct gpa_range range[];
} __attribute__((__packed__));


struct vmbus_channel_gpadl_body {
 struct vmbus_channel_message_header header;
 u32 msgnumber;
 u32 gpadl;
 u64 pfn[];
} __attribute__((__packed__));

struct vmbus_channel_gpadl_created {
 struct vmbus_channel_message_header header;
 u32 child_relid;
 u32 gpadl;
 u32 creation_status;
} __attribute__((__packed__));

struct vmbus_channel_gpadl_teardown {
 struct vmbus_channel_message_header header;
 u32 child_relid;
 u32 gpadl;
} __attribute__((__packed__));

struct vmbus_channel_gpadl_torndown {
 struct vmbus_channel_message_header header;
 u32 gpadl;
} __attribute__((__packed__));

struct vmbus_channel_relid_released {
 struct vmbus_channel_message_header header;
 u32 child_relid;
} __attribute__((__packed__));

struct vmbus_channel_initiate_contact {
 struct vmbus_channel_message_header header;
 u32 vmbus_version_requested;
 u32 target_vcpu;
 union {
  u64 interrupt_page;
  struct {
   u8 msg_sint;
   u8 padding1[3];
   u32 padding2;
  };
 };
 u64 monitor_page1;
 u64 monitor_page2;
} __attribute__((__packed__));


struct vmbus_channel_tl_connect_request {
 struct vmbus_channel_message_header header;
 guid_t guest_endpoint_id;
 guid_t host_service_id;
} __attribute__((__packed__));


struct vmbus_channel_modifychannel {
 struct vmbus_channel_message_header header;
 u32 child_relid;
 u32 target_vp;
} __attribute__((__packed__));

struct vmbus_channel_version_response {
 struct vmbus_channel_message_header header;
 u8 version_supported;

 u8 connection_state;
 u16 padding;
# 701 "./include/linux/hyperv.h"
 u32 msg_conn_id;
} __attribute__((__packed__));

enum vmbus_channel_state {
 CHANNEL_OFFER_STATE,
 CHANNEL_OPENING_STATE,
 CHANNEL_OPEN_STATE,
 CHANNEL_OPENED_STATE,
};





struct vmbus_channel_msginfo {

 struct list_head msglistentry;


 struct list_head submsglist;


 struct completion waitevent;
 struct vmbus_channel *waiting_channel;
 union {
  struct vmbus_channel_version_supported version_supported;
  struct vmbus_channel_open_result open_result;
  struct vmbus_channel_gpadl_torndown gpadl_torndown;
  struct vmbus_channel_gpadl_created gpadl_created;
  struct vmbus_channel_version_response version_response;
  struct vmbus_channel_modifychannel_response modify_response;
 } response;

 u32 msgsize;




 unsigned char msg[];
};

struct vmbus_close_msg {
 struct vmbus_channel_msginfo info;
 struct vmbus_channel_close_channel msg;
};


union hv_connection_id {
 u32 asu32;
 struct {
  u32 id:24;
  u32 reserved:8;
 } u;
};

enum vmbus_device_type {
 HV_IDE = 0,
 HV_SCSI,
 HV_FC,
 HV_NIC,
 HV_ND,
 HV_PCIE,
 HV_FB,
 HV_KBD,
 HV_MOUSE,
 HV_KVP,
 HV_TS,
 HV_HB,
 HV_SHUTDOWN,
 HV_FCOPY,
 HV_BACKUP,
 HV_DM,
 HV_UNKNOWN,
};






struct vmbus_requestor {
 u64 *req_arr;
 unsigned long *req_bitmap;
 u32 size;
 u64 next_request_id;
 spinlock_t req_lock;
};
# 797 "./include/linux/hyperv.h"
struct vmbus_device {
 u16 dev_type;
 guid_t guid;
 bool perf_device;
 bool allowed_in_isolated;
};



struct vmbus_gpadl {
 u32 gpadl_handle;
 u32 size;
 void *buffer;
};

struct vmbus_channel {
 struct list_head listentry;

 struct hv_device *device_obj;

 enum vmbus_channel_state state;

 struct vmbus_channel_offer_channel offermsg;




 u8 monitor_grp;
 u8 monitor_bit;

 bool rescind;
 bool rescind_ref;
 struct completion rescind_event;

 struct vmbus_gpadl ringbuffer_gpadlhandle;


 struct page *ringbuffer_page;
 u32 ringbuffer_pagecount;
 u32 ringbuffer_send_offset;
 struct hv_ring_buffer_info outbound;
 struct hv_ring_buffer_info inbound;

 struct vmbus_close_msg close_msg;


 u64 interrupts;
 u64 sig_events;





 u64 intr_out_empty;






 bool out_full_flag;


 struct tasklet_struct callback_event;
 void (*onchannel_callback)(void *context);
 void *channel_callback_context;

 void (*change_target_cpu_callback)(struct vmbus_channel *channel,
   u32 old, u32 new);





 spinlock_t sched_lock;
# 884 "./include/linux/hyperv.h"
 enum hv_callback_mode {
  HV_CALL_BATCHED,
  HV_CALL_DIRECT,
  HV_CALL_ISR
 } callback_mode;

 bool is_dedicated_interrupt;
 u64 sig_event;
# 902 "./include/linux/hyperv.h"
 u32 target_cpu;
# 923 "./include/linux/hyperv.h"
 void (*sc_creation_callback)(struct vmbus_channel *new_sc);





 void (*chn_rescind_callback)(struct vmbus_channel *channel);




 struct list_head sc_list;




 struct vmbus_channel *primary_channel;



 void *per_channel_state;





 struct callback_head rcu;




 struct kobject kobj;
# 980 "./include/linux/hyperv.h"
 bool low_latency;

 bool probe_done;






 u16 device_id;







 struct work_struct add_channel_work;





 u64 intr_in_full;





 u64 out_full_total;





 u64 out_full_first;


 bool fuzz_testing_state;
# 1028 "./include/linux/hyperv.h"
 u32 fuzz_testing_interrupt_delay;
 u32 fuzz_testing_message_delay;


 u64 (*next_request_id_callback)(struct vmbus_channel *channel, u64 rqst_addr);

 u64 (*request_addr_callback)(struct vmbus_channel *channel, u64 rqst_id);


 struct vmbus_requestor requestor;
 u32 rqstor_size;


 u32 max_pkt_size;
};

u64 vmbus_next_request_id(struct vmbus_channel *channel, u64 rqst_addr);
u64 vmbus_request_addr(struct vmbus_channel *channel, u64 trans_id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_hvsock_channel(const struct vmbus_channel *c)
{
 return !!(c->offermsg.offer.chn_flags &
    0x2000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_sub_channel(const struct vmbus_channel *c)
{
 return c->offermsg.offer.sub_channel_index != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_channel_read_mode(struct vmbus_channel *c,
     enum hv_callback_mode mode)
{
 c->callback_mode = mode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_per_channel_state(struct vmbus_channel *c, void *s)
{
 c->per_channel_state = s;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *get_per_channel_state(struct vmbus_channel *c)
{
 return c->per_channel_state;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_channel_pending_send_size(struct vmbus_channel *c,
       u32 size)
{
 unsigned long flags;

 if (size) {
  do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&c->outbound.ring_lock)); } while (0); } while (0);
  ++c->out_full_total;

  if (!c->out_full_flag) {
   ++c->out_full_first;
   c->out_full_flag = true;
  }
  spin_unlock_irqrestore(&c->outbound.ring_lock, flags);
 } else {
  c->out_full_flag = false;
 }

 c->outbound.ring_buffer->pending_send_sz = size;
}

void vmbus_onmessage(struct vmbus_channel_message_header *hdr);

int vmbus_request_offers(void);





void vmbus_set_sc_create_callback(struct vmbus_channel *primary_channel,
   void (*sc_cr_cb)(struct vmbus_channel *new_sc));

void vmbus_set_chn_rescind_callback(struct vmbus_channel *channel,
  void (*chn_rescind_cb)(struct vmbus_channel *));


struct vmbus_channel_packet_page_buffer {
 u16 type;
 u16 dataoffset8;
 u16 length8;
 u16 flags;
 u64 transactionid;
 u32 reserved;
 u32 rangecount;
 struct hv_page_buffer range[32];
} __attribute__((__packed__));


struct vmbus_channel_packet_multipage_buffer {
 u16 type;
 u16 dataoffset8;
 u16 length8;
 u16 flags;
 u64 transactionid;
 u32 reserved;
 u32 rangecount;
 struct hv_multipage_buffer range;
} __attribute__((__packed__));


struct vmbus_packet_mpb_array {
 u16 type;
 u16 dataoffset8;
 u16 length8;
 u16 flags;
 u64 transactionid;
 u32 reserved;
 u32 rangecount;
 struct hv_mpb_array range;
} __attribute__((__packed__));

int vmbus_alloc_ring(struct vmbus_channel *channel,
       u32 send_size, u32 recv_size);
void vmbus_free_ring(struct vmbus_channel *channel);

int vmbus_connect_ring(struct vmbus_channel *channel,
         void (*onchannel_callback)(void *context),
         void *context);
int vmbus_disconnect_ring(struct vmbus_channel *channel);

extern int vmbus_open(struct vmbus_channel *channel,
       u32 send_ringbuffersize,
       u32 recv_ringbuffersize,
       void *userdata,
       u32 userdatalen,
       void (*onchannel_callback)(void *context),
       void *context);

extern void vmbus_close(struct vmbus_channel *channel);

extern int vmbus_sendpacket(struct vmbus_channel *channel,
      void *buffer,
      u32 bufferLen,
      u64 requestid,
      enum vmbus_packet_type type,
      u32 flags);

extern int vmbus_sendpacket_pagebuffer(struct vmbus_channel *channel,
         struct hv_page_buffer pagebuffers[],
         u32 pagecount,
         void *buffer,
         u32 bufferlen,
         u64 requestid);

extern int vmbus_sendpacket_mpb_desc(struct vmbus_channel *channel,
         struct vmbus_packet_mpb_array *mpb,
         u32 desc_size,
         void *buffer,
         u32 bufferlen,
         u64 requestid);

extern int vmbus_establish_gpadl(struct vmbus_channel *channel,
          void *kbuffer,
          u32 size,
          struct vmbus_gpadl *gpadl);

extern int vmbus_teardown_gpadl(struct vmbus_channel *channel,
         struct vmbus_gpadl *gpadl);

void vmbus_reset_channel_cb(struct vmbus_channel *channel);

extern int vmbus_recvpacket(struct vmbus_channel *channel,
      void *buffer,
      u32 bufferlen,
      u32 *buffer_actual_len,
      u64 *requestid);

extern int vmbus_recvpacket_raw(struct vmbus_channel *channel,
         void *buffer,
         u32 bufferlen,
         u32 *buffer_actual_len,
         u64 *requestid);


extern void vmbus_ontimer(unsigned long data);


struct hv_driver {
 const char *name;
# 1226 "./include/linux/hyperv.h"
 bool hvsock;


 guid_t dev_type;
 const struct hv_vmbus_device_id *id_table;

 struct device_driver driver;


 struct {
  spinlock_t lock;
  struct list_head list;
 } dynids;

 int (*probe)(struct hv_device *, const struct hv_vmbus_device_id *);
 int (*remove)(struct hv_device *);
 void (*shutdown)(struct hv_device *);

 int (*suspend)(struct hv_device *);
 int (*resume)(struct hv_device *);

};


struct hv_device {

 guid_t dev_type;


 guid_t dev_instance;
 u16 vendor_id;
 u16 device_id;

 struct device device;
 char *driver_override;

 struct vmbus_channel *channel;
 struct kset *channels_kset;


 struct dentry *debug_dir;

};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct hv_device *device_to_hv_device(struct device *d)
{
 return ({ void *__mptr = (void *)(d); _Static_assert(__builtin_types_compatible_p(typeof(*(d)), typeof(((struct hv_device *)0)->device)) || __builtin_types_compatible_p(typeof(*(d)), typeof(void)), "pointer type mismatch in container_of()"); ((struct hv_device *)(__mptr - __builtin_offsetof(struct hv_device, device))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct hv_driver *drv_to_hv_drv(struct device_driver *d)
{
 return ({ void *__mptr = (void *)(d); _Static_assert(__builtin_types_compatible_p(typeof(*(d)), typeof(((struct hv_driver *)0)->driver)) || __builtin_types_compatible_p(typeof(*(d)), typeof(void)), "pointer type mismatch in container_of()"); ((struct hv_driver *)(__mptr - __builtin_offsetof(struct hv_driver, driver))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hv_set_drvdata(struct hv_device *dev, void *data)
{
 dev_set_drvdata(&dev->device, data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *hv_get_drvdata(struct hv_device *dev)
{
 return dev_get_drvdata(&dev->device);
}

struct hv_ring_buffer_debug_info {
 u32 current_interrupt_mask;
 u32 current_read_index;
 u32 current_write_index;
 u32 bytes_avail_toread;
 u32 bytes_avail_towrite;
};


int hv_ringbuffer_get_debuginfo(struct hv_ring_buffer_info *ring_info,
    struct hv_ring_buffer_debug_info *debug_info);




int __attribute__((__warn_unused_result__)) __vmbus_driver_register(struct hv_driver *hv_driver,
      struct module *owner,
      const char *mod_name);
void vmbus_driver_unregister(struct hv_driver *hv_driver);

void vmbus_hvsock_device_unregister(struct vmbus_channel *channel);

int vmbus_allocate_mmio(struct resource **new, struct hv_device *device_obj,
   resource_size_t min, resource_size_t max,
   resource_size_t size, resource_size_t align,
   bool fb_overlap_ok);
void vmbus_free_mmio(resource_size_t start, resource_size_t size);
# 1495 "./include/linux/hyperv.h"
struct hv_util_service {
 u8 *recv_buffer;
 void *channel;
 void (*util_cb)(void *);
 int (*util_init)(struct hv_util_service *);
 void (*util_deinit)(void);
 int (*util_pre_suspend)(void);
 int (*util_pre_resume)(void);
};

struct vmbuspipe_hdr {
 u32 flags;
 u32 msgsize;
} __attribute__((__packed__));

struct ic_version {
 u16 major;
 u16 minor;
} __attribute__((__packed__));

struct icmsg_hdr {
 struct ic_version icverframe;
 u16 icmsgtype;
 struct ic_version icvermsg;
 u16 icmsgsize;
 u32 status;
 u8 ictransaction_id;
 u8 icflags;
 u8 reserved[2];
} __attribute__((__packed__));







struct icmsg_negotiate {
 u16 icframe_vercnt;
 u16 icmsg_vercnt;
 u32 reserved;
 struct ic_version icversion_data[];
} __attribute__((__packed__));

struct shutdown_msg_data {
 u32 reason_code;
 u32 timeout_seconds;
 u32 flags;
 u8 display_message[2048];
} __attribute__((__packed__));

struct heartbeat_msg_data {
 u64 seq_num;
 u32 reserved[8];
} __attribute__((__packed__));
# 1562 "./include/linux/hyperv.h"
struct ictimesync_data {
 u64 parenttime;
 u64 childtime;
 u64 roundtriptime;
 u8 flags;
} __attribute__((__packed__));

struct ictimesync_ref_data {
 u64 parenttime;
 u64 vmreferencetime;
 u8 flags;
 char leapflags;
 char stratum;
 u8 reserved[3];
} __attribute__((__packed__));

struct hyperv_service_callback {
 u8 msg_type;
 char *log_msg;
 guid_t data;
 struct vmbus_channel *channel;
 void (*callback)(void *context);
};


extern bool vmbus_prep_negotiate_resp(struct icmsg_hdr *icmsghdrp, u8 *buf, u32 buflen,
    const int *fw_version, int fw_vercnt,
    const int *srv_version, int srv_vercnt,
    int *nego_fw_version, int *nego_srv_version);

void hv_process_channel_removal(struct vmbus_channel *channel);

void vmbus_setevent(struct vmbus_channel *channel);




extern __u32 vmbus_proto_version;

int vmbus_send_tl_connect_request(const guid_t *shv_guest_servie_id,
      const guid_t *shv_host_servie_id);
int vmbus_send_modifychannel(struct vmbus_channel *channel, u32 target_vp);
void vmbus_set_event(struct vmbus_channel *channel);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *
hv_get_ring_buffer(const struct hv_ring_buffer_info *ring_info)
{
 return ring_info->ring_buffer->buffer;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hv_begin_read(struct hv_ring_buffer_info *rbi)
{
 rbi->ring_buffer->interrupt_mask = 1;


 asm volatile("lock; addl $0,-4(%%" "rsp" ")" ::: "memory", "cc");
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hv_end_read(struct hv_ring_buffer_info *rbi)
{

 rbi->ring_buffer->interrupt_mask = 0;


 asm volatile("lock; addl $0,-4(%%" "rsp" ")" ::: "memory", "cc");






 return hv_get_bytes_to_read(rbi);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *hv_pkt_data(const struct vmpacket_descriptor *desc)
{
 return (void *)((unsigned long)desc + (desc->offset8 << 3));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hv_pkt_datalen(const struct vmpacket_descriptor *desc)
{
 return (desc->len8 << 3) - (desc->offset8 << 3);
}


struct vmpacket_descriptor *
hv_pkt_iter_first_raw(struct vmbus_channel *channel);

struct vmpacket_descriptor *
hv_pkt_iter_first(struct vmbus_channel *channel);

struct vmpacket_descriptor *
__hv_pkt_iter_next(struct vmbus_channel *channel,
     const struct vmpacket_descriptor *pkt,
     bool copy);

void hv_pkt_iter_close(struct vmbus_channel *channel);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vmpacket_descriptor *
hv_pkt_iter_next_pkt(struct vmbus_channel *channel,
       const struct vmpacket_descriptor *pkt,
       bool copy)
{
 struct vmpacket_descriptor *nxt;

 nxt = __hv_pkt_iter_next(channel, pkt, copy);
 if (!nxt)
  hv_pkt_iter_close(channel);

 return nxt;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vmpacket_descriptor *
hv_pkt_iter_next_raw(struct vmbus_channel *channel,
       const struct vmpacket_descriptor *pkt)
{
 return hv_pkt_iter_next_pkt(channel, pkt, false);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vmpacket_descriptor *
hv_pkt_iter_next(struct vmbus_channel *channel,
   const struct vmpacket_descriptor *pkt)
{
 return hv_pkt_iter_next_pkt(channel, pkt, true);
}
# 1722 "./include/linux/hyperv.h"
int hyperv_read_cfg_blk(struct pci_dev *dev, void *buf, unsigned int buf_len,
   unsigned int block_id, unsigned int *bytes_returned);
int hyperv_write_cfg_blk(struct pci_dev *dev, void *buf, unsigned int len,
    unsigned int block_id);
int hyperv_reg_block_invalidate(struct pci_dev *dev, void *context,
    void (*block_invalidate)(void *context,
        u64 block_mask));

struct hyperv_pci_block_ops {
 int (*read_block)(struct pci_dev *dev, void *buf, unsigned int buf_len,
     unsigned int block_id, unsigned int *bytes_returned);
 int (*write_block)(struct pci_dev *dev, void *buf, unsigned int len,
      unsigned int block_id);
 int (*reg_blk_invalidate)(struct pci_dev *dev, void *context,
      void (*block_invalidate)(void *context,
          u64 block_mask));
};

extern struct hyperv_pci_block_ops hvpci_block_ops;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long virt_to_hvpfn(void *addr)
{
 phys_addr_t paddr;

 if (is_vmalloc_addr(addr))
  paddr = ((dma_addr_t)(unsigned long)((vmalloc_to_page(addr)) - ((struct page *)vmemmap_base)) << 12) +
         ((unsigned long)(addr) & ~(~(((1UL) << 12)-1)));
 else
  paddr = __phys_addr_nodebug((unsigned long)(addr));

 return paddr >> 12;
}
# 27 "./arch/x86/include/asm/kvm_host.h" 2

# 1 "./arch/x86/include/asm/apic.h" 1
# 12 "./arch/x86/include/asm/apic.h"
# 1 "./arch/x86/include/asm/mpspec.h" 1





# 1 "./arch/x86/include/asm/mpspec_def.h" 1
# 22 "./arch/x86/include/asm/mpspec_def.h"
struct mpf_intel {
 char signature[4];
 unsigned int physptr;
 unsigned char length;
 unsigned char specification;
 unsigned char checksum;
 unsigned char feature1;
 unsigned char feature2;
 unsigned char feature3;
 unsigned char feature4;
 unsigned char feature5;
};



struct mpc_table {
 char signature[4];
 unsigned short length;
 char spec;
 char checksum;
 char oem[8];
 char productid[12];
 unsigned int oemptr;
 unsigned short oemsize;
 unsigned short oemcount;
 unsigned int lapic;
 unsigned int reserved;
};
# 68 "./arch/x86/include/asm/mpspec_def.h"
struct mpc_cpu {
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char cpuflag;
 unsigned int cpufeature;
 unsigned int featureflag;
 unsigned int reserved[2];
};

struct mpc_bus {
 unsigned char type;
 unsigned char busid;
 unsigned char bustype[6];
};
# 106 "./arch/x86/include/asm/mpspec_def.h"
struct mpc_ioapic {
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char flags;
 unsigned int apicaddr;
};

struct mpc_intsrc {
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbus;
 unsigned char srcbusirq;
 unsigned char dstapic;
 unsigned char dstirq;
};

enum mp_irq_source_types {
 mp_INT = 0,
 mp_NMI = 1,
 mp_SMI = 2,
 mp_ExtINT = 3
};
# 145 "./arch/x86/include/asm/mpspec_def.h"
struct mpc_lintsrc {
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbusid;
 unsigned char srcbusirq;
 unsigned char destapic;
 unsigned char destapiclint;
};



struct mpc_oemtable {
 char signature[4];
 unsigned short length;
 char rev;
 char checksum;
 char mpc[8];
};
# 177 "./arch/x86/include/asm/mpspec_def.h"
enum mp_bustype {
 MP_BUS_ISA = 1,
 MP_BUS_EISA,
 MP_BUS_PCI,
};
# 7 "./arch/x86/include/asm/mpspec.h" 2



extern int pic_mode;
# 40 "./arch/x86/include/asm/mpspec.h"
extern unsigned long mp_bus_not_pci[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

extern unsigned int boot_cpu_physical_apicid;
extern u8 boot_cpu_apic_version;
extern unsigned long mp_lapic_addr;


extern int smp_found_config;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void early_get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void find_smp_config(void)
{
 x86_init.mpparse.find_smp_config();
}


extern void e820__memblock_alloc_reserved_mpc_new(void);
extern int enable_update_mptable;
extern void default_find_smp_config(void);
extern void default_get_smp_config(unsigned int early);







int generic_processor_info(int apicid, int version);



struct physid_mask {
 unsigned long mask[(((32768) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};

typedef struct physid_mask physid_mask_t;
# 122 "./arch/x86/include/asm/mpspec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long physids_coerce(physid_mask_t *map)
{
 return map->mask[0];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void physids_promote(unsigned long physids, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 map->mask[0] = physids;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void physid_set_mask_of_physid(int physid, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 set_bit(physid, (*map).mask);
}




extern physid_mask_t phys_cpu_present_map;
# 13 "./arch/x86/include/asm/apic.h" 2
# 45 "./arch/x86/include/asm/apic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void generic_apic_probe(void)
{
}




extern int apic_verbosity;
extern int local_apic_timer_c2_ok;

extern int disable_apic;
extern unsigned int lapic_timer_period;

extern enum apic_intr_mode_id apic_intr_mode;
enum apic_intr_mode_id {
 APIC_PIC,
 APIC_VIRTUAL_WIRE,
 APIC_VIRTUAL_WIRE_NO_CONFIG,
 APIC_SYMMETRIC_IO,
 APIC_SYMMETRIC_IO_NO_ROUTING
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __inquire_remote_apic(int apicid)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void default_inquire_remote_apic(int apicid)
{
 if (apic_verbosity >= 2)
  __inquire_remote_apic(apicid);
}
# 89 "./arch/x86/include/asm/apic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool apic_from_smp_config(void)
{
 return smp_found_config && !disable_apic;
}
# 101 "./arch/x86/include/asm/apic.h"
extern int setup_profiling_timer(unsigned int);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_apic_mem_write(u32 reg, u32 v)
{
 volatile u32 *addr = (volatile u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg);

 asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "movl %0, %P1" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(20*32 + (5))" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "xchgl %0, %P1" "\n" "665""1" ":\n" ".popsection\n" : "=r" (v), "=m" (*addr) : "i" (0), "0" (v), "m" (*addr));


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 native_apic_mem_read(u32 reg)
{
 return *((volatile u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg));
}

extern void native_apic_wait_icr_idle(void);
extern u32 native_safe_apic_wait_icr_idle(void);
extern void native_apic_icr_write(u32 low, u32 id);
extern u64 native_apic_icr_read(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool apic_is_x2apic_enabled(void)
{
 u64 msr;

 if (rdmsrl_safe(0x0000001b, &msr))
  return false;
 return msr & (1UL << 10);
}

extern void enable_IR_x2apic(void);

extern int get_physical_broadcast(void);

extern int lapic_get_maxlvt(void);
extern void clear_local_APIC(void);
extern void disconnect_bsp_APIC(int virt_wire_setup);
extern void disable_local_APIC(void);
extern void apic_soft_disable(void);
extern void lapic_shutdown(void);
extern void sync_Arb_IDs(void);
extern void init_bsp_APIC(void);
extern void apic_intr_mode_select(void);
extern void apic_intr_mode_init(void);
extern void init_apic_mappings(void);
void register_lapic_address(unsigned long address);
extern void setup_boot_APIC_clock(void);
extern void setup_secondary_APIC_clock(void);
extern void lapic_update_tsc_freq(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int apic_force_enable(unsigned long addr)
{
 return -1;
}




extern void apic_ap_setup(void);





extern int apic_is_clustered_box(void);







extern int setup_APIC_eilvt(u8 lvt_off, u8 vector, u8 msg_type, u8 mask);
extern void lapic_assign_system_vectors(void);
extern void lapic_assign_legacy_vector(unsigned int isairq, bool replace);
extern void lapic_update_legacy_vectors(void);
extern void lapic_online(void);
extern void lapic_offline(void);
extern bool apic_needs_pit(void);

extern void apic_send_IPI_allbutself(unsigned int vector);
# 263 "./arch/x86/include/asm/apic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_x2apic(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void x2apic_setup(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int x2apic_enabled(void) { return 0; }





struct irq_data;
# 282 "./arch/x86/include/asm/apic.h"
struct apic {

 void (*eoi_write)(u32 reg, u32 v);
 void (*native_eoi_write)(u32 reg, u32 v);
 void (*write)(u32 reg, u32 v);
 u32 (*read)(u32 reg);


 void (*wait_icr_idle)(void);
 u32 (*safe_wait_icr_idle)(void);

 void (*send_IPI)(int cpu, int vector);
 void (*send_IPI_mask)(const struct cpumask *mask, int vector);
 void (*send_IPI_mask_allbutself)(const struct cpumask *msk, int vec);
 void (*send_IPI_allbutself)(int vector);
 void (*send_IPI_all)(int vector);
 void (*send_IPI_self)(int vector);

 u32 disable_esr;

 enum apic_delivery_modes delivery_mode;
 bool dest_mode_logical;

 u32 (*calc_dest_apicid)(unsigned int cpu);


 u64 (*icr_read)(void);
 void (*icr_write)(u32 low, u32 high);


 int (*probe)(void);
 int (*acpi_madt_oem_check)(char *oem_id, char *oem_table_id);
 int (*apic_id_valid)(u32 apicid);
 int (*apic_id_registered)(void);

 bool (*check_apicid_used)(physid_mask_t *map, int apicid);
 void (*init_apic_ldr)(void);
 void (*ioapic_phys_id_map)(physid_mask_t *phys_map, physid_mask_t *retmap);
 void (*setup_apic_routing)(void);
 int (*cpu_present_to_apicid)(int mps_cpu);
 void (*apicid_to_cpu_present)(int phys_apicid, physid_mask_t *retmap);
 int (*check_phys_apicid_present)(int phys_apicid);
 int (*phys_pkg_id)(int cpuid_apic, int index_msb);

 u32 (*get_apic_id)(unsigned long x);
 u32 (*set_apic_id)(unsigned int id);


 int (*wakeup_secondary_cpu)(int apicid, unsigned long start_eip);

 void (*inquire_remote_apic)(int apicid);
# 347 "./arch/x86/include/asm/apic.h"
 char *name;
};






extern struct apic *apic;
# 375 "./arch/x86/include/asm/apic.h"
extern struct apic *__apicdrivers[], *__apicdrivers_end[];
# 387 "./arch/x86/include/asm/apic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 apic_read(u32 reg)
{
 return apic->read(reg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void apic_write(u32 reg, u32 val)
{
 apic->write(reg, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void apic_eoi(void)
{
 apic->eoi_write(0xB0, 0x0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 apic_icr_read(void)
{
 return apic->icr_read();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void apic_icr_write(u32 low, u32 high)
{
 apic->icr_write(low, high);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void apic_wait_icr_idle(void)
{
 apic->wait_icr_idle();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 safe_apic_wait_icr_idle(void)
{
 return apic->safe_wait_icr_idle();
}

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) apic_set_eoi_write(void (*eoi_write)(u32 reg, u32 v));
# 437 "./arch/x86/include/asm/apic.h"
extern void apic_ack_irq(struct irq_data *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ack_APIC_irq(void)
{




 apic_eoi();
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool lapic_vector_set_in_irr(unsigned int vector)
{
 u32 irr = apic_read(0x200 + (vector / 32 * 0x10));

 return !!(irr & (1U << (vector % 32)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned default_get_apic_id(unsigned long x)
{
 unsigned int ver = ((apic_read(0x30)) & 0xFFu);

 if (((ver) >= 0x14) || (__builtin_constant_p(( 3*32+26)) && ( (((( 3*32+26))>>5)==(0) && (1UL<<((( 3*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 3*32+26))>>5)==(1) && (1UL<<((( 3*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 3*32+26))>>5)==(2) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(3) && (1UL<<((( 3*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 3*32+26))>>5)==(4) && (1UL<<((( 3*32+26))&31) & (0) )) || (((( 3*32+26))>>5)==(5) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(6) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(7) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(8) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(9) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(10) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(11) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(12) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(13) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(14) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(15) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(16) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(17) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(18) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(19) && (1UL<<((( 3*32+26))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 3*32+26), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  return (x >> 24) & 0xFF;
 else
  return (x >> 24) & 0x0F;
}







extern void generic_bigsmp_probe(void);



# 1 "./arch/x86/include/asm/smp.h" 1
# 11 "./arch/x86/include/asm/smp.h"
extern int smp_num_siblings;
extern unsigned int num_processors;

extern __attribute__((section(".data" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_sibling_map;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_core_map;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_die_map;

extern __attribute__((section(".data" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_llc_shared_map;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_l2c_shared_map;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(u16) cpu_llc_id;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(u16) cpu_l2c_id;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(int) cpu_number;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cpumask *cpu_llc_shared_mask(int cpu)
{
 return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(cpu_llc_shared_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(cpu_llc_shared_map))) *)(&(cpu_llc_shared_map)); }); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cpumask *cpu_l2c_shared_mask(int cpu)
{
 return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(cpu_l2c_shared_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(cpu_l2c_shared_map))) *)(&(cpu_l2c_shared_map)); }); }));
}

extern __attribute__((section(".data" "..read_mostly"))) __typeof__(u16) x86_cpu_to_apicid;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(u32) x86_cpu_to_acpiid;
extern __attribute__((section(".data" "..read_mostly"))) __typeof__(u16) x86_bios_cpu_apicid;




struct task_struct;

struct smp_ops {
 void (*smp_prepare_boot_cpu)(void);
 void (*smp_prepare_cpus)(unsigned max_cpus);
 void (*smp_cpus_done)(unsigned max_cpus);

 void (*stop_other_cpus)(int wait);
 void (*crash_stop_other_cpus)(void);
 void (*smp_send_reschedule)(int cpu);

 int (*cpu_up)(unsigned cpu, struct task_struct *tidle);
 int (*cpu_disable)(void);
 void (*cpu_die)(unsigned int cpu);
 void (*play_dead)(void);

 void (*send_call_func_ipi)(const struct cpumask *mask);
 void (*send_call_func_single_ipi)(int cpu);
};


extern void set_cpu_sibling_map(int cpu);
# 177 "./arch/x86/include/asm/smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wbinvd_on_all_cpus(void)
{
 wbinvd();
 return 0;
}


extern unsigned disabled_cpus;


extern int hard_smp_processor_id(void);
# 477 "./arch/x86/include/asm/apic.h" 2



extern __attribute__((section(".data" "..read_mostly"))) __typeof__(u16) x86_bios_cpu_apicid;

extern struct apic apic_noop;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int read_apic_id(void)
{
 unsigned int reg = apic_read(0x20);

 return apic->get_apic_id(reg);
}

extern int default_apic_id_valid(u32 apicid);
extern int default_acpi_madt_oem_check(char *, char *);
extern void default_setup_apic_routing(void);

extern u32 apic_default_calc_apicid(unsigned int cpu);
extern u32 apic_flat_calc_apicid(unsigned int cpu);

extern bool default_check_apicid_used(physid_mask_t *map, int apicid);
extern void default_ioapic_phys_id_map(physid_mask_t *phys_map, physid_mask_t *retmap);
extern int default_cpu_present_to_apicid(int mps_cpu);
extern int default_check_phys_apicid_present(int phys_apicid);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool apic_id_is_primary_thread(unsigned int id) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void apic_smt_update(void) { }


struct msi_msg;
struct irq_cfg;

extern void __irq_msi_compose_msg(struct irq_cfg *cfg, struct msi_msg *msg,
      bool dmar);

extern void ioapic_zap_locks(void);
# 29 "./arch/x86/include/asm/kvm_host.h" 2
# 1 "./arch/x86/include/asm/pvclock-abi.h" 1
# 26 "./arch/x86/include/asm/pvclock-abi.h"
struct pvclock_vcpu_time_info {
 u32 version;
 u32 pad0;
 u64 tsc_timestamp;
 u64 system_time;
 u32 tsc_to_system_mul;
 s8 tsc_shift;
 u8 flags;
 u8 pad[2];
} __attribute__((__packed__));

struct pvclock_wall_clock {
 u32 version;
 u32 sec;
 u32 nsec;
} __attribute__((__packed__));
# 30 "./arch/x86/include/asm/kvm_host.h" 2
# 1 "./arch/x86/include/asm/desc.h" 1
# 16 "./arch/x86/include/asm/desc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fill_ldt(struct desc_struct *desc, const struct user_desc *info)
{
 desc->limit0 = info->limit & 0x0ffff;

 desc->base0 = (info->base_addr & 0x0000ffff);
 desc->base1 = (info->base_addr & 0x00ff0000) >> 16;

 desc->type = (info->read_exec_only ^ 1) << 1;
 desc->type |= info->contents << 2;

 desc->type |= 1;

 desc->s = 1;
 desc->dpl = 0x3;
 desc->p = info->seg_not_present ^ 1;
 desc->limit1 = (info->limit & 0xf0000) >> 16;
 desc->avl = info->useable;
 desc->d = info->seg_32bit;
 desc->g = info->limit_in_pages;

 desc->base2 = (info->base_addr & 0xff000000) >> 24;




 desc->l = 0;
}

struct gdt_page {
 struct desc_struct gdt[16];
} __attribute__((aligned(((1UL) << 12))));

extern __attribute__((section(".data" "..page_aligned"))) __typeof__(struct gdt_page) gdt_page __attribute__((__aligned__(((1UL) << 12))));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct desc_struct *get_cpu_gdt_rw(unsigned int cpu)
{
 return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(gdt_page)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(gdt_page))) *)(&(gdt_page)); }); })).gdt;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct desc_struct *get_current_gdt_rw(void)
{
 return ({ (void)(0); ({ do { const void *__vpp_verify = (typeof((&gdt_page) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&gdt_page)) *)(&gdt_page); }); })->gdt;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct desc_struct *get_cpu_gdt_ro(int cpu)
{
 return (struct desc_struct *)&get_cpu_entry_area(cpu)->gdt;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct desc_struct *get_current_gdt_ro(void)
{
 return get_cpu_gdt_ro(debug_smp_processor_id());
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) phys_addr_t get_cpu_gdt_paddr(unsigned int cpu)
{
 return per_cpu_ptr_to_phys(get_cpu_gdt_rw(cpu));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pack_gate(gate_desc *gate, unsigned type, unsigned long func,
        unsigned dpl, unsigned ist, unsigned seg)
{
 gate->offset_low = (u16) func;
 gate->bits.p = 1;
 gate->bits.dpl = dpl;
 gate->bits.zero = 0;
 gate->bits.type = type;
 gate->offset_middle = (u16) (func >> 16);

 gate->segment = (2*8);
 gate->bits.ist = ist;
 gate->reserved = 0;
 gate->offset_high = (u32) (func >> 32);




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int desc_empty(const void *ptr)
{
 const u32 *desc = ptr;

 return !(desc[0] | desc[1]);
}
# 126 "./arch/x86/include/asm/desc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void paravirt_alloc_ldt(struct desc_struct *ldt, unsigned entries)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void paravirt_free_ldt(struct desc_struct *ldt, unsigned entries)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_write_idt_entry(gate_desc *idt, int entry, const gate_desc *gate)
{
 memcpy(&idt[entry], gate, sizeof(*gate));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_write_ldt_entry(struct desc_struct *ldt, int entry, const void *desc)
{
 memcpy(&ldt[entry], desc, 8);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
native_write_gdt_entry(struct desc_struct *gdt, int entry, const void *desc, int type)
{
 unsigned int size;

 switch (type) {
 case DESC_TSS: size = sizeof(tss_desc); break;
 case DESC_LDT: size = sizeof(ldt_desc); break;
 default: size = sizeof(*gdt); break;
 }

 memcpy(&gdt[entry], desc, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_tssldt_descriptor(void *d, unsigned long addr,
      unsigned type, unsigned size)
{
 struct ldttss_desc *desc = d;

 memset(desc, 0, sizeof(*desc));

 desc->limit0 = (u16) size;
 desc->base0 = (u16) addr;
 desc->base1 = (addr >> 16) & 0xFF;
 desc->type = type;
 desc->p = 1;
 desc->limit1 = (size >> 16) & 0xF;
 desc->base2 = (addr >> 24) & 0xFF;

 desc->base3 = (u32) (addr >> 32);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __set_tss_desc(unsigned cpu, unsigned int entry, struct x86_hw_tss *addr)
{
 struct desc_struct *d = get_cpu_gdt_rw(cpu);
 tss_desc tss;

 set_tssldt_descriptor(&tss, (unsigned long)addr, DESC_TSS,
         (__builtin_offsetof(struct tss_struct, x86_tss) + sizeof(struct x86_hw_tss) - 1));
 native_write_gdt_entry(d, entry, &tss, DESC_TSS);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_ldt(const void *addr, unsigned int entries)
{
 if (__builtin_expect(!!(entries == 0), 1))
  asm volatile("lldt %w0"::"q" (0));
 else {
  unsigned cpu = debug_smp_processor_id();
  ldt_desc ldt;

  set_tssldt_descriptor(&ldt, (unsigned long)addr, DESC_LDT,
          entries * 8 - 1);
  native_write_gdt_entry(get_cpu_gdt_rw(cpu), 10, &ldt, DESC_LDT);

  asm volatile("lldt %w0"::"q" (10*8));
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_load_gdt(const struct desc_ptr *dtr)
{
 asm volatile("lgdt %0"::"m" (*dtr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_load_idt(const struct desc_ptr *dtr)
{
 asm volatile("lidt %0"::"m" (*dtr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_store_gdt(struct desc_ptr *dtr)
{
 asm volatile("sgdt %0":"=m" (*dtr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void store_idt(struct desc_ptr *dtr)
{
 asm volatile("sidt %0":"=m" (*dtr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_gdt_invalidate(void)
{
 const struct desc_ptr invalid_gdt = {
  .address = 0,
  .size = 0
 };

 native_load_gdt(&invalid_gdt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_idt_invalidate(void)
{
 const struct desc_ptr invalid_idt = {
  .address = 0,
  .size = 0
 };

 native_load_idt(&invalid_idt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_load_tr_desc(void)
{
 struct desc_ptr gdt;
 int cpu = 0;
 bool restore = 0;
 struct desc_struct *fixmap_gdt;

 native_store_gdt(&gdt);
 fixmap_gdt = get_cpu_gdt_ro(cpu);





 if (gdt.address == (unsigned long)fixmap_gdt) {
  load_direct_gdt(cpu);
  restore = 1;
 }
 asm volatile("ltr %w0"::"q" (8*8));
 if (restore)
  load_fixmap_gdt(cpu);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_store_tr(void)
{
 unsigned long tr;

 asm volatile("str %0":"=r" (tr));

 return tr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_load_tls(struct thread_struct *t, unsigned int cpu)
{
 struct desc_struct *gdt = get_cpu_gdt_rw(cpu);
 unsigned int i;

 for (i = 0; i < 3; i++)
  gdt[12 + i] = t->tls_array[i];
}

extern __attribute__((section(".data" ""))) __typeof__(bool) __tss_limit_invalid;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void force_reload_TR(void)
{
 struct desc_struct *d = get_current_gdt_rw();
 tss_desc tss;

 memcpy(&tss, &d[8], sizeof(tss_desc));





 tss.type = DESC_TSS;
 native_write_gdt_entry(d, 8, &tss, DESC_TSS);

 native_load_tr_desc();
 do { do { const void *__vpp_verify = (typeof((&(__tss_limit_invalid)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__tss_limit_invalid)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) false) & 0xff)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (false); (void)pto_tmp__; } asm volatile("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) false) & 0xffff)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (false); (void)pto_tmp__; } asm volatile("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) false) & 0xffffffff)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (false); (void)pto_tmp__; } asm volatile("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(false)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (false); (void)pto_tmp__; } asm volatile("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refresh_tss_limit(void)
{
 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!((preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }))), 0)) { ({ asm volatile("344" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "344" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "preemptible()"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("345" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "345" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });

 if (__builtin_expect(!!(({ typeof(__tss_limit_invalid) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__tss_limit_invalid)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__tss_limit_invalid)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (__tss_limit_invalid)); (typeof(__tss_limit_invalid))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__tss_limit_invalid)); (typeof(__tss_limit_invalid))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__tss_limit_invalid)); (typeof(__tss_limit_invalid))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__tss_limit_invalid)); (typeof(__tss_limit_invalid))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; })), 0))
  force_reload_TR();
}
# 343 "./arch/x86/include/asm/desc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invalidate_tss_limit(void)
{
 ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!((preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }))), 0)) { ({ asm volatile("346" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "346" "b - .\n\t" ".popsection\n\t"); }); if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("DEBUG_LOCKS_WARN_ON(%s)", "preemptible()"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ asm volatile("347" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "347" "b - .\n\t" ".popsection\n\t"); }); __ret = 1; } __ret; });

 if (__builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 22)), 0))
  force_reload_TR();
 else
  do { do { const void *__vpp_verify = (typeof((&(__tss_limit_invalid)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__tss_limit_invalid)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) true) & 0xff)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (true); (void)pto_tmp__; } asm volatile("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) true) & 0xffff)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (true); (void)pto_tmp__; } asm volatile("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) true) & 0xffffffff)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (true); (void)pto_tmp__; } asm volatile("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(true)); if (0) { typeof((__tss_limit_invalid)) pto_tmp__; pto_tmp__ = (true); (void)pto_tmp__; } asm volatile("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__tss_limit_invalid)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}
# 365 "./arch/x86/include/asm/desc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool LDT_zero(const struct user_desc *info)
{
 return (info->base_addr == 0 &&
  info->limit == 0 &&
  info->contents == 0 &&
  info->read_exec_only == 0 &&
  info->seg_32bit == 0 &&
  info->limit_in_pages == 0 &&
  info->seg_not_present == 0 &&
  info->useable == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_LDT(void)
{
 native_set_ldt(((void *)0), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_desc_base(const struct desc_struct *desc)
{
 return (unsigned)(desc->base0 | ((desc->base1) << 16) | ((desc->base2) << 24));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_desc_base(struct desc_struct *desc, unsigned long base)
{
 desc->base0 = base & 0xffff;
 desc->base1 = (base >> 16) & 0xff;
 desc->base2 = (base >> 24) & 0xff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_desc_limit(const struct desc_struct *desc)
{
 return desc->limit0 | (desc->limit1 << 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_desc_limit(struct desc_struct *desc, unsigned long limit)
{
 desc->limit0 = limit & 0xffff;
 desc->limit1 = (limit >> 16) & 0xf;
}

void alloc_intr_gate(unsigned int n, const void *addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_idt_data(struct idt_data *data, unsigned int n,
     const void *addr)
{
 do { if (__builtin_expect(!!(n > 0xFF), 0)) do { ({ asm volatile("348" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "348" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("349" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "349" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);

 memset(data, 0, sizeof(*data));
 data->vector = n;
 data->addr = addr;
 data->segment = (2*8);
 data->bits.type = GATE_INTERRUPT;
 data->bits.p = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idt_init_desc(gate_desc *gate, const struct idt_data *d)
{
 unsigned long addr = (unsigned long) d->addr;

 gate->offset_low = (u16) addr;
 gate->segment = (u16) d->segment;
 gate->bits = d->bits;
 gate->offset_middle = (u16) (addr >> 16);

 gate->offset_high = (u32) (addr >> 32);
 gate->reserved = 0;

}

extern unsigned long system_vectors[];

extern void load_current_idt(void);
extern void idt_setup_early_handler(void);
extern void idt_setup_early_traps(void);
extern void idt_setup_traps(void);
extern void idt_setup_apic_and_irq_gates(void);
extern bool idt_is_f00f_address(unsigned long address);


extern void idt_setup_early_pf(void);




extern void idt_invalidate(void);
# 31 "./arch/x86/include/asm/kvm_host.h" 2
# 1 "./arch/x86/include/asm/mtrr.h" 1
# 26 "./arch/x86/include/asm/mtrr.h"
# 1 "./arch/x86/include/uapi/asm/mtrr.h" 1
# 54 "./arch/x86/include/uapi/asm/mtrr.h"
struct mtrr_sentry {
 __u64 base;
 __u32 size;
 __u32 type;
};

struct mtrr_gentry {
 __u64 base;
 __u32 size;
 __u32 regnum;
 __u32 type;
 __u32 _pad;
};



struct mtrr_var_range {
 __u32 base_lo;
 __u32 base_hi;
 __u32 mask_lo;
 __u32 mask_hi;
};



typedef __u8 mtrr_type;




struct mtrr_state_type {
 struct mtrr_var_range var_ranges[256];
 mtrr_type fixed_ranges[88];
 unsigned char enabled;
 unsigned char have_fixed;
 mtrr_type def_type;
};
# 27 "./arch/x86/include/asm/mtrr.h" 2
# 1 "./arch/x86/include/asm/memtype.h" 1







extern bool pat_enabled(void);
extern void pat_disable(const char *reason);
extern void pat_init(void);
extern void init_cache_modes(void);

extern int memtype_reserve(u64 start, u64 end,
  enum page_cache_mode req_pcm, enum page_cache_mode *ret_pcm);
extern int memtype_free(u64 start, u64 end);

extern int memtype_kernel_map_sync(u64 base, unsigned long size,
  enum page_cache_mode pcm);

extern int memtype_reserve_io(resource_size_t start, resource_size_t end,
   enum page_cache_mode *pcm);

extern void memtype_free_io(resource_size_t start, resource_size_t end);

extern bool pat_pfn_immune_to_uc_mtrr(unsigned long pfn);

bool x86_has_pat_wp(void);
enum page_cache_mode pgprot2cachemode(pgprot_t pgprot);
# 28 "./arch/x86/include/asm/mtrr.h" 2







extern u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform);
extern void mtrr_save_fixed_ranges(void *);
extern void mtrr_save_state(void);
extern int mtrr_add(unsigned long base, unsigned long size,
      unsigned int type, bool increment);
extern int mtrr_add_page(unsigned long base, unsigned long size,
    unsigned int type, bool increment);
extern int mtrr_del(int reg, unsigned long base, unsigned long size);
extern int mtrr_del_page(int reg, unsigned long base, unsigned long size);
extern void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi);
extern void mtrr_ap_init(void);
extern void mtrr_bp_init(void);
extern void set_mtrr_aps_delayed_init(void);
extern void mtrr_aps_init(void);
extern void mtrr_bp_restore(void);
extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
extern int amd_special_default_mtrr(void);
# 32 "./arch/x86/include/asm/kvm_host.h" 2


# 1 "./arch/x86/include/asm/kvm_page_track.h" 1




enum kvm_page_track_mode {
 KVM_PAGE_TRACK_WRITE,
 KVM_PAGE_TRACK_MAX,
};
# 17 "./arch/x86/include/asm/kvm_page_track.h"
struct kvm_page_track_notifier_head {
 struct srcu_struct track_srcu;
 struct hlist_head track_notifier_list;
};

struct kvm_page_track_notifier_node {
 struct hlist_node node;
# 35 "./arch/x86/include/asm/kvm_page_track.h"
 void (*track_write)(struct kvm_vcpu *vcpu, gpa_t gpa, const u8 *new,
       int bytes, struct kvm_page_track_notifier_node *node);
# 45 "./arch/x86/include/asm/kvm_page_track.h"
 void (*track_flush_slot)(struct kvm *kvm, struct kvm_memory_slot *slot,
       struct kvm_page_track_notifier_node *node);
};

int kvm_page_track_init(struct kvm *kvm);
void kvm_page_track_cleanup(struct kvm *kvm);

bool kvm_page_track_write_tracking_enabled(struct kvm *kvm);
int kvm_page_track_write_tracking_alloc(struct kvm_memory_slot *slot);

void kvm_page_track_free_memslot(struct kvm_memory_slot *slot);
int kvm_page_track_create_memslot(struct kvm *kvm,
      struct kvm_memory_slot *slot,
      unsigned long npages);

void kvm_slot_page_track_add_page(struct kvm *kvm,
      struct kvm_memory_slot *slot, gfn_t gfn,
      enum kvm_page_track_mode mode);
void kvm_slot_page_track_remove_page(struct kvm *kvm,
         struct kvm_memory_slot *slot, gfn_t gfn,
         enum kvm_page_track_mode mode);
bool kvm_slot_page_track_is_active(struct kvm_vcpu *vcpu,
       struct kvm_memory_slot *slot, gfn_t gfn,
       enum kvm_page_track_mode mode);

void
kvm_page_track_register_notifier(struct kvm *kvm,
     struct kvm_page_track_notifier_node *n);
void
kvm_page_track_unregister_notifier(struct kvm *kvm,
       struct kvm_page_track_notifier_node *n);
void kvm_page_track_write(struct kvm_vcpu *vcpu, gpa_t gpa, const u8 *new,
     int bytes);
void kvm_page_track_flush_slot(struct kvm *kvm, struct kvm_memory_slot *slot);
# 35 "./arch/x86/include/asm/kvm_host.h" 2
# 1 "./arch/x86/include/asm/kvm_vcpu_regs.h" 1
# 36 "./arch/x86/include/asm/kvm_host.h" 2
# 150 "./arch/x86/include/asm/kvm_host.h"
enum kvm_reg {
 VCPU_REGS_RAX = 0,
 VCPU_REGS_RCX = 1,
 VCPU_REGS_RDX = 2,
 VCPU_REGS_RBX = 3,
 VCPU_REGS_RSP = 4,
 VCPU_REGS_RBP = 5,
 VCPU_REGS_RSI = 6,
 VCPU_REGS_RDI = 7,

 VCPU_REGS_R8 = 8,
 VCPU_REGS_R9 = 9,
 VCPU_REGS_R10 = 10,
 VCPU_REGS_R11 = 11,
 VCPU_REGS_R12 = 12,
 VCPU_REGS_R13 = 13,
 VCPU_REGS_R14 = 14,
 VCPU_REGS_R15 = 15,

 VCPU_REGS_RIP,
 NR_VCPU_REGS,

 VCPU_EXREG_PDPTR = NR_VCPU_REGS,
 VCPU_EXREG_CR0,
 VCPU_EXREG_CR3,
 VCPU_EXREG_CR4,
 VCPU_EXREG_RFLAGS,
 VCPU_EXREG_SEGMENTS,
 VCPU_EXREG_EXIT_INFO_1,
 VCPU_EXREG_EXIT_INFO_2,
};

enum {
 VCPU_SREG_ES,
 VCPU_SREG_CS,
 VCPU_SREG_SS,
 VCPU_SREG_DS,
 VCPU_SREG_FS,
 VCPU_SREG_GS,
 VCPU_SREG_TR,
 VCPU_SREG_LDTR,
};

enum exit_fastpath_completion {
 EXIT_FASTPATH_NONE,
 EXIT_FASTPATH_REENTER_GUEST,
 EXIT_FASTPATH_EXIT_HANDLED,
};
typedef enum exit_fastpath_completion fastpath_t;

struct x86_emulate_ctxt;
struct x86_exception;
enum x86_intercept;
enum x86_intercept_stage;
# 274 "./arch/x86/include/asm/kvm_host.h"
struct kvm_kernel_irq_routing_entry;
# 308 "./arch/x86/include/asm/kvm_host.h"
union kvm_mmu_page_role {
 u32 word;
 struct {
  unsigned level:4;
  unsigned gpte_is_8_bytes:1;
  unsigned quadrant:2;
  unsigned direct:1;
  unsigned access:3;
  unsigned invalid:1;
  unsigned efer_nx:1;
  unsigned cr0_wp:1;
  unsigned smep_andnot_wp:1;
  unsigned smap_andnot_wp:1;
  unsigned ad_disabled:1;
  unsigned guest_mode:1;
  unsigned :6;







  unsigned smm:8;
 };
};
# 354 "./arch/x86/include/asm/kvm_host.h"
union kvm_mmu_extended_role {
 u32 word;
 struct {
  unsigned int valid:1;
  unsigned int execonly:1;
  unsigned int cr0_pg:1;
  unsigned int cr4_pae:1;
  unsigned int cr4_pse:1;
  unsigned int cr4_pke:1;
  unsigned int cr4_smap:1;
  unsigned int cr4_smep:1;
  unsigned int cr4_la57:1;
 };
};

union kvm_mmu_role {
 u64 as_u64;
 struct {
  union kvm_mmu_page_role base;
  union kvm_mmu_extended_role ext;
 };
};

struct kvm_rmap_head {
 unsigned long val;
};

struct kvm_pio_request {
 unsigned long linear_rip;
 unsigned long count;
 int in;
 int port;
 int size;
};



struct rsvd_bits_validate {
 u64 rsvd_bits_mask[2][5];
 u64 bad_mt_xwr;
};

struct kvm_mmu_root_info {
 gpa_t pgd;
 hpa_t hpa;
};
# 408 "./arch/x86/include/asm/kvm_host.h"
struct kvm_mmu_page;
struct kvm_page_fault;






struct kvm_mmu {
 unsigned long (*get_guest_pgd)(struct kvm_vcpu *vcpu);
 u64 (*get_pdptr)(struct kvm_vcpu *vcpu, int index);
 int (*page_fault)(struct kvm_vcpu *vcpu, struct kvm_page_fault *fault);
 void (*inject_page_fault)(struct kvm_vcpu *vcpu,
      struct x86_exception *fault);
 gpa_t (*gva_to_gpa)(struct kvm_vcpu *vcpu, gpa_t gva_or_gpa,
       u32 access, struct x86_exception *exception);
 gpa_t (*translate_gpa)(struct kvm_vcpu *vcpu, gpa_t gpa, u32 access,
          struct x86_exception *exception);
 int (*sync_page)(struct kvm_vcpu *vcpu,
    struct kvm_mmu_page *sp);
 void (*invlpg)(struct kvm_vcpu *vcpu, gva_t gva, hpa_t root_hpa);
 hpa_t root_hpa;
 gpa_t root_pgd;
 union kvm_mmu_role mmu_role;
 u8 root_level;
 u8 shadow_root_level;
 u8 ept_ad;
 bool direct_map;
 struct kvm_mmu_root_info prev_roots[3];






 u8 permissions[16];







 u32 pkru_mask;

 u64 *pae_root;
 u64 *pml4_root;
 u64 *pml5_root;






 struct rsvd_bits_validate shadow_zero_check;

 struct rsvd_bits_validate guest_rsvd_check;

 u64 pdptrs[4];
};

struct kvm_tlb_range {
 u64 start_gfn;
 u64 pages;
};

enum pmc_type {
 KVM_PMC_GP = 0,
 KVM_PMC_FIXED,
};

struct kvm_pmc {
 enum pmc_type type;
 u8 idx;
 u64 counter;
 u64 eventsel;
 struct perf_event *perf_event;
 struct kvm_vcpu *vcpu;




 u64 current_config;
 bool is_paused;
};

struct kvm_pmu {
 unsigned nr_arch_gp_counters;
 unsigned nr_arch_fixed_counters;
 unsigned available_event_types;
 u64 fixed_ctr_ctrl;
 u64 global_ctrl;
 u64 global_status;
 u64 counter_bitmask[2];
 u64 global_ctrl_mask;
 u64 global_ovf_ctrl_mask;
 u64 reserved_bits;
 u8 version;
 struct kvm_pmc gp_counters[32];
 struct kvm_pmc fixed_counters[4];
 struct irq_work irq_work;
 unsigned long reprogram_pmi[(((64) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 unsigned long all_valid_pmc_idx[(((64) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 unsigned long pmc_in_use[(((64) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];





 bool need_cleanup;





 u8 event_count;
};

struct kvm_pmu_ops;

enum {
 KVM_DEBUGREG_BP_ENABLED = 1,
 KVM_DEBUGREG_WONT_EXIT = 2,
};

struct kvm_mtrr_range {
 u64 base;
 u64 mask;
 struct list_head node;
};

struct kvm_mtrr {
 struct kvm_mtrr_range var_ranges[8];
 mtrr_type fixed_ranges[88];
 u64 deftype;

 struct list_head head;
};


struct kvm_vcpu_hv_stimer {
 struct hrtimer timer;
 int index;
 union hv_stimer_config config;
 u64 count;
 u64 exp_time;
 struct hv_message msg;
 bool msg_pending;
};


struct kvm_vcpu_hv_synic {
 u64 version;
 u64 control;
 u64 msg_page;
 u64 evt_page;
 atomic64_t sint[(16)];
 atomic_t sint_to_gsi[(16)];
 unsigned long auto_eoi_bitmap[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 unsigned long vec_bitmap[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 bool active;
 bool dont_zero_synic_pages;
};


struct kvm_vcpu_hv {
 struct kvm_vcpu *vcpu;
 u32 vp_index;
 u64 hv_vapic;
 s64 runtime_offset;
 struct kvm_vcpu_hv_synic synic;
 struct kvm_hyperv_exit exit;
 struct kvm_vcpu_hv_stimer stimer[(4)];
 unsigned long stimer_pending_bitmap[((((4)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 bool enforce_cpuid;
 struct {
  u32 features_eax;
  u32 features_ebx;
  u32 features_edx;
  u32 enlightenments_eax;
  u32 enlightenments_ebx;
  u32 syndbg_cap_eax;
 } cpuid_cache;
};


struct kvm_vcpu_xen {
 u64 hypercall_rip;
 u32 current_runstate;
 bool vcpu_info_set;
 bool vcpu_time_info_set;
 bool runstate_set;
 struct gfn_to_hva_cache vcpu_info_cache;
 struct gfn_to_hva_cache vcpu_time_info_cache;
 struct gfn_to_hva_cache runstate_cache;
 u64 last_steal;
 u64 runstate_entry_time;
 u64 runstate_times[4];
};

struct kvm_vcpu_arch {




 unsigned long regs[NR_VCPU_REGS];
 u32 regs_avail;
 u32 regs_dirty;

 unsigned long cr0;
 unsigned long cr0_guest_owned_bits;
 unsigned long cr2;
 unsigned long cr3;
 unsigned long cr4;
 unsigned long cr4_guest_owned_bits;
 unsigned long cr4_guest_rsvd_bits;
 unsigned long cr8;
 u32 host_pkru;
 u32 pkru;
 u32 hflags;
 u64 efer;
 u64 apic_base;
 struct kvm_lapic *apic;
 bool apicv_active;
 bool load_eoi_exitmap_pending;
 unsigned long ioapic_handled_vectors[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 unsigned long apic_attention;
 int32_t apic_arb_prio;
 int mp_state;
 u64 ia32_misc_enable_msr;
 u64 smbase;
 u64 smi_count;
 bool tpr_access_reporting;
 bool xsaves_enabled;
 u64 ia32_xss;
 u64 microcode_version;
 u64 arch_capabilities;
 u64 perf_capabilities;
# 654 "./arch/x86/include/asm/kvm_host.h"
 struct kvm_mmu *mmu;


 struct kvm_mmu root_mmu;


 struct kvm_mmu guest_mmu;
# 670 "./arch/x86/include/asm/kvm_host.h"
 struct kvm_mmu nested_mmu;





 struct kvm_mmu *walk_mmu;

 struct kvm_mmu_memory_cache mmu_pte_list_desc_cache;
 struct kvm_mmu_memory_cache mmu_shadow_page_cache;
 struct kvm_mmu_memory_cache mmu_gfn_array_cache;
 struct kvm_mmu_memory_cache mmu_page_header_cache;
# 694 "./arch/x86/include/asm/kvm_host.h"
 struct fpu_guest guest_fpu;

 u64 xcr0;
 u64 guest_supported_xcr0;

 struct kvm_pio_request pio;
 void *pio_data;
 void *sev_pio_data;
 unsigned sev_pio_count;

 u8 event_exit_inst_len;

 struct kvm_queued_exception {
  bool pending;
  bool injected;
  bool has_error_code;
  u8 nr;
  u32 error_code;
  unsigned long payload;
  bool has_payload;
  u8 nested_apf;
 } exception;

 struct kvm_queued_interrupt {
  bool injected;
  bool soft;
  u8 nr;
 } interrupt;

 int halt_request;

 int cpuid_nent;
 struct kvm_cpuid_entry2 *cpuid_entries;
 u32 kvm_cpuid_base;

 u64 reserved_gpa_bits;
 int maxphyaddr;



 struct x86_emulate_ctxt *emulate_ctxt;
 bool emulate_regs_need_sync_to_vcpu;
 bool emulate_regs_need_sync_from_vcpu;
 int (*complete_userspace_io)(struct kvm_vcpu *vcpu);

 gpa_t time;
 struct pvclock_vcpu_time_info hv_clock;
 unsigned int hw_tsc_khz;
 struct gfn_to_hva_cache pv_time;
 bool pv_time_enabled;

 bool pvclock_set_guest_stopped_request;

 struct {
  u8 preempted;
  u64 msr_val;
  u64 last_steal;
  struct gfn_to_hva_cache cache;
 } st;

 u64 l1_tsc_offset;
 u64 tsc_offset;
 u64 last_guest_tsc;
 u64 last_host_tsc;
 u64 tsc_offset_adjustment;
 u64 this_tsc_nsec;
 u64 this_tsc_write;
 u64 this_tsc_generation;
 bool tsc_catchup;
 bool tsc_always_catchup;
 s8 virtual_tsc_shift;
 u32 virtual_tsc_mult;
 u32 virtual_tsc_khz;
 s64 ia32_tsc_adjust_msr;
 u64 msr_ia32_power_ctl;
 u64 l1_tsc_scaling_ratio;
 u64 tsc_scaling_ratio;

 atomic_t nmi_queued;
 unsigned nmi_pending;
 bool nmi_injected;
 bool smi_pending;

 struct kvm_mtrr mtrr_state;
 u64 pat;

 unsigned switch_db_regs;
 unsigned long db[4];
 unsigned long dr6;
 unsigned long dr7;
 unsigned long eff_db[4];
 unsigned long guest_debug_dr7;
 u64 msr_platform_info;
 u64 msr_misc_features_enables;

 u64 mcg_cap;
 u64 mcg_status;
 u64 mcg_ctl;
 u64 mcg_ext_ctl;
 u64 *mce_banks;


 u64 mmio_gva;
 unsigned mmio_access;
 gfn_t mmio_gfn;
 u64 mmio_gen;

 struct kvm_pmu pmu;


 unsigned long singlestep_rip;

 bool hyperv_enabled;
 struct kvm_vcpu_hv *hyperv;
 struct kvm_vcpu_xen xen;

 cpumask_var_t wbinvd_dirty_mask;

 unsigned long last_retry_eip;
 unsigned long last_retry_addr;

 struct {
  bool halted;
  gfn_t gfns[64];
  struct gfn_to_hva_cache data;
  u64 msr_en_val;
  u64 msr_int_val;
  u16 vec;
  u32 id;
  bool send_user_only;
  u32 host_apf_flags;
  unsigned long nested_apf_token;
  bool delivery_as_pf_vmexit;
  bool pageready_pending;
 } apf;


 struct {
  u64 length;
  u64 status;
 } osvw;

 struct {
  u64 msr_val;
  struct gfn_to_hva_cache data;
 } pv_eoi;

 u64 msr_kvm_poll_control;
# 858 "./arch/x86/include/asm/kvm_host.h"
 bool write_fault_to_shadow_pgtable;


 unsigned long exit_qualification;


 struct {
  bool pv_unhalted;
 } pv;

 int pending_ioapic_eoi;
 int pending_external_vector;


 bool preempted_in_kernel;


 bool l1tf_flush_l1d;


 int last_vmentry_cpu;


 u64 msr_hwcr;


 struct {




  u32 features;





  bool enforce;
 } pv_cpuid;


 bool guest_state_protected;





 bool pdptrs_from_userspace;




};

struct kvm_lpage_info {
 int disallow_lpage;
};

struct kvm_arch_memory_slot {
 struct kvm_rmap_head *rmap[(PG_LEVEL_1G - PG_LEVEL_4K + 1)];
 struct kvm_lpage_info *lpage_info[(PG_LEVEL_1G - PG_LEVEL_4K + 1) - 1];
 unsigned short *gfn_track[KVM_PAGE_TRACK_MAX];
};
# 933 "./arch/x86/include/asm/kvm_host.h"
struct kvm_apic_map {
 struct callback_head rcu;
 u8 mode;
 u32 max_apic_id;
 union {
  struct kvm_lapic *xapic_flat_map[8];
  struct kvm_lapic *xapic_cluster_map[16][4];
 };
 struct kvm_lapic *phys_map[];
};


struct kvm_hv_syndbg {
 struct {
  u64 control;
  u64 status;
  u64 send_page;
  u64 recv_page;
  u64 pending_page;
 } control;
 u64 options;
};


enum hv_tsc_page_status {

 HV_TSC_PAGE_UNSET = 0,

 HV_TSC_PAGE_GUEST_CHANGED,

 HV_TSC_PAGE_HOST_CHANGED,

 HV_TSC_PAGE_SET,

 HV_TSC_PAGE_UPDATING,

 HV_TSC_PAGE_BROKEN,
};


struct kvm_hv {
 struct mutex hv_lock;
 u64 hv_guest_os_id;
 u64 hv_hypercall;
 u64 hv_tsc_page;
 enum hv_tsc_page_status hv_tsc_page_status;


 u64 hv_crash_param[(1 + (0x40000104 - 0x40000100))];
 u64 hv_crash_ctl;

 struct ms_hyperv_tsc_page tsc_ref;

 struct idr conn_to_evt;

 u64 hv_reenlightenment_control;
 u64 hv_tsc_emulation_control;
 u64 hv_tsc_emulation_status;


 atomic_t num_mismatched_vp_indexes;





 unsigned int synic_auto_eoi_used;

 struct hv_partition_assist_pg *hv_pa_pg;
 struct kvm_hv_syndbg hv_syndbg;
};

struct msr_bitmap_range {
 u32 flags;
 u32 nmsrs;
 u32 base;
 unsigned long *bitmap;
};


struct kvm_xen {
 bool long_mode;
 u8 upcall_vector;
 gfn_t shinfo_gfn;
};

enum kvm_irqchip_mode {
 KVM_IRQCHIP_NONE,
 KVM_IRQCHIP_KERNEL,
 KVM_IRQCHIP_SPLIT,
};

struct kvm_x86_msr_filter {
 u8 count;
 bool default_allow:1;
 struct msr_bitmap_range ranges[16];
};
# 1039 "./arch/x86/include/asm/kvm_host.h"
struct kvm_arch {
 unsigned long n_used_mmu_pages;
 unsigned long n_requested_mmu_pages;
 unsigned long n_max_mmu_pages;
 unsigned int indirect_shadow_pages;
 u8 mmu_valid_gen;
 struct hlist_head mmu_page_hash[(1 << 12)];
 struct list_head active_mmu_pages;
 struct list_head zapped_obsolete_pages;
 struct list_head lpage_disallowed_mmu_pages;
 struct kvm_page_track_notifier_node mmu_sp_tracker;
 struct kvm_page_track_notifier_head track_notifier_head;






 spinlock_t mmu_unsync_pages_lock;

 struct list_head assigned_dev_head;
 struct iommu_domain *iommu_domain;
 bool iommu_noncoherent;

 atomic_t noncoherent_dma_count;

 atomic_t assigned_device_count;
 struct kvm_pic *vpic;
 struct kvm_ioapic *vioapic;
 struct kvm_pit *vpit;
 atomic_t vapics_in_nmi_mode;
 struct mutex apic_map_lock;
 struct kvm_apic_map *apic_map;
 atomic_t apic_map_dirty;


 struct rw_semaphore apicv_update_lock;

 bool apic_access_memslot_enabled;
 unsigned long apicv_inhibit_reasons;

 gpa_t wall_clock;

 bool mwait_in_guest;
 bool hlt_in_guest;
 bool pause_in_guest;
 bool cstate_in_guest;

 unsigned long irq_sources_bitmap;
 s64 kvmclock_offset;





 raw_spinlock_t tsc_write_lock;
 u64 last_tsc_nsec;
 u64 last_tsc_write;
 u32 last_tsc_khz;
 u64 last_tsc_offset;
 u64 cur_tsc_nsec;
 u64 cur_tsc_write;
 u64 cur_tsc_offset;
 u64 cur_tsc_generation;
 int nr_vcpus_matched_tsc;

 seqcount_raw_spinlock_t pvclock_sc;
 bool use_master_clock;
 u64 master_kernel_ns;
 u64 master_cycle_now;
 struct delayed_work kvmclock_update_work;
 struct delayed_work kvmclock_sync_work;

 struct kvm_xen_hvm_config xen_hvm_config;


 struct hlist_head mask_notifier_list;

 struct kvm_hv hyperv;
 struct kvm_xen xen;





 bool backwards_tsc_observed;
 bool boot_vcpu_runs_old_kvmclock;
 u32 bsp_vcpu_id;

 u64 disabled_quirks;
 int cpu_dirty_logging_count;

 enum kvm_irqchip_mode irqchip_mode;
 u8 nr_reserved_ioapic_pins;

 bool disabled_lapic_found;

 bool x2apic_format;
 bool x2apic_broadcast_quirk_disabled;

 bool guest_can_read_msr_platform_info;
 bool exception_payload_enabled;

 bool bus_lock_detection_enabled;





 bool exit_on_emulation_error;


 u32 user_space_msr_mask;
 struct kvm_x86_msr_filter *msr_filter;

 u32 hypercall_exit_enabled;


 bool sgx_provisioning_allowed;

 struct kvm_pmu_event_filter *pmu_event_filter;
 struct task_struct *nx_lpage_recovery_thread;
# 1170 "./arch/x86/include/asm/kvm_host.h"
 bool tdp_mmu_enabled;
# 1190 "./arch/x86/include/asm/kvm_host.h"
 struct list_head tdp_mmu_roots;






 struct list_head tdp_mmu_pages;
# 1211 "./arch/x86/include/asm/kvm_host.h"
 spinlock_t tdp_mmu_pages_lock;







 bool shadow_root_allocated;





};

struct kvm_vm_stat {
 struct kvm_vm_stat_generic generic;
 u64 mmu_shadow_zapped;
 u64 mmu_pte_write;
 u64 mmu_pde_zapped;
 u64 mmu_flooded;
 u64 mmu_recycled;
 u64 mmu_cache_miss;
 u64 mmu_unsync;
 union {
  struct {
   atomic64_t pages_4k;
   atomic64_t pages_2m;
   atomic64_t pages_1g;
  };
  atomic64_t pages[(PG_LEVEL_1G - PG_LEVEL_4K + 1)];
 };
 u64 nx_lpage_splits;
 u64 max_mmu_page_hash_collisions;
 u64 max_mmu_rmap_size;
};

struct kvm_vcpu_stat {
 struct kvm_vcpu_stat_generic generic;
 u64 pf_fixed;
 u64 pf_guest;
 u64 tlb_flush;
 u64 invlpg;

 u64 exits;
 u64 io_exits;
 u64 mmio_exits;
 u64 signal_exits;
 u64 irq_window_exits;
 u64 nmi_window_exits;
 u64 l1d_flush;
 u64 halt_exits;
 u64 request_irq_exits;
 u64 irq_exits;
 u64 host_state_reload;
 u64 fpu_reload;
 u64 insn_emulation;
 u64 insn_emulation_fail;
 u64 hypercalls;
 u64 irq_injections;
 u64 nmi_injections;
 u64 req_event;
 u64 nested_run;
 u64 directed_yield_attempted;
 u64 directed_yield_successful;
 u64 guest_mode;
};

struct x86_instruction_info;

struct msr_data {
 bool host_initiated;
 u32 index;
 u64 data;
};

struct kvm_lapic_irq {
 u32 vector;
 u16 delivery_mode;
 u16 dest_mode;
 bool level;
 u16 trig_mode;
 u32 shorthand;
 u32 dest_id;
 bool msi_redir_hint;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 kvm_lapic_irq_dest_mode(bool dest_mode_logical)
{
 return dest_mode_logical ? 0x00800 : 0x00000;
}

struct kvm_x86_ops {
 const char *name;

 int (*hardware_enable)(void);
 void (*hardware_disable)(void);
 void (*hardware_unsetup)(void);
 bool (*cpu_has_accelerated_tpr)(void);
 bool (*has_emulated_msr)(struct kvm *kvm, u32 index);
 void (*vcpu_after_set_cpuid)(struct kvm_vcpu *vcpu);

 unsigned int vm_size;
 int (*vm_init)(struct kvm *kvm);
 void (*vm_destroy)(struct kvm *kvm);


 int (*vcpu_create)(struct kvm_vcpu *vcpu);
 void (*vcpu_free)(struct kvm_vcpu *vcpu);
 void (*vcpu_reset)(struct kvm_vcpu *vcpu, bool init_event);

 void (*prepare_guest_switch)(struct kvm_vcpu *vcpu);
 void (*vcpu_load)(struct kvm_vcpu *vcpu, int cpu);
 void (*vcpu_put)(struct kvm_vcpu *vcpu);

 void (*update_exception_bitmap)(struct kvm_vcpu *vcpu);
 int (*get_msr)(struct kvm_vcpu *vcpu, struct msr_data *msr);
 int (*set_msr)(struct kvm_vcpu *vcpu, struct msr_data *msr);
 u64 (*get_segment_base)(struct kvm_vcpu *vcpu, int seg);
 void (*get_segment)(struct kvm_vcpu *vcpu,
       struct kvm_segment *var, int seg);
 int (*get_cpl)(struct kvm_vcpu *vcpu);
 void (*set_segment)(struct kvm_vcpu *vcpu,
       struct kvm_segment *var, int seg);
 void (*get_cs_db_l_bits)(struct kvm_vcpu *vcpu, int *db, int *l);
 void (*set_cr0)(struct kvm_vcpu *vcpu, unsigned long cr0);
 bool (*is_valid_cr4)(struct kvm_vcpu *vcpu, unsigned long cr0);
 void (*set_cr4)(struct kvm_vcpu *vcpu, unsigned long cr4);
 int (*set_efer)(struct kvm_vcpu *vcpu, u64 efer);
 void (*get_idt)(struct kvm_vcpu *vcpu, struct desc_ptr *dt);
 void (*set_idt)(struct kvm_vcpu *vcpu, struct desc_ptr *dt);
 void (*get_gdt)(struct kvm_vcpu *vcpu, struct desc_ptr *dt);
 void (*set_gdt)(struct kvm_vcpu *vcpu, struct desc_ptr *dt);
 void (*sync_dirty_debug_regs)(struct kvm_vcpu *vcpu);
 void (*set_dr7)(struct kvm_vcpu *vcpu, unsigned long value);
 void (*cache_reg)(struct kvm_vcpu *vcpu, enum kvm_reg reg);
 unsigned long (*get_rflags)(struct kvm_vcpu *vcpu);
 void (*set_rflags)(struct kvm_vcpu *vcpu, unsigned long rflags);

 void (*tlb_flush_all)(struct kvm_vcpu *vcpu);
 void (*tlb_flush_current)(struct kvm_vcpu *vcpu);
 int (*tlb_remote_flush)(struct kvm *kvm);
 int (*tlb_remote_flush_with_range)(struct kvm *kvm,
   struct kvm_tlb_range *range);







 void (*tlb_flush_gva)(struct kvm_vcpu *vcpu, gva_t addr);





 void (*tlb_flush_guest)(struct kvm_vcpu *vcpu);

 enum exit_fastpath_completion (*run)(struct kvm_vcpu *vcpu);
 int (*handle_exit)(struct kvm_vcpu *vcpu,
  enum exit_fastpath_completion exit_fastpath);
 int (*skip_emulated_instruction)(struct kvm_vcpu *vcpu);
 void (*update_emulated_instruction)(struct kvm_vcpu *vcpu);
 void (*set_interrupt_shadow)(struct kvm_vcpu *vcpu, int mask);
 u32 (*get_interrupt_shadow)(struct kvm_vcpu *vcpu);
 void (*patch_hypercall)(struct kvm_vcpu *vcpu,
    unsigned char *hypercall_addr);
 void (*set_irq)(struct kvm_vcpu *vcpu);
 void (*set_nmi)(struct kvm_vcpu *vcpu);
 void (*queue_exception)(struct kvm_vcpu *vcpu);
 void (*cancel_injection)(struct kvm_vcpu *vcpu);
 int (*interrupt_allowed)(struct kvm_vcpu *vcpu, bool for_injection);
 int (*nmi_allowed)(struct kvm_vcpu *vcpu, bool for_injection);
 bool (*get_nmi_mask)(struct kvm_vcpu *vcpu);
 void (*set_nmi_mask)(struct kvm_vcpu *vcpu, bool masked);
 void (*enable_nmi_window)(struct kvm_vcpu *vcpu);
 void (*enable_irq_window)(struct kvm_vcpu *vcpu);
 void (*update_cr8_intercept)(struct kvm_vcpu *vcpu, int tpr, int irr);
 bool (*check_apicv_inhibit_reasons)(ulong bit);
 void (*refresh_apicv_exec_ctrl)(struct kvm_vcpu *vcpu);
 void (*hwapic_irr_update)(struct kvm_vcpu *vcpu, int max_irr);
 void (*hwapic_isr_update)(struct kvm_vcpu *vcpu, int isr);
 bool (*guest_apic_has_interrupt)(struct kvm_vcpu *vcpu);
 void (*load_eoi_exitmap)(struct kvm_vcpu *vcpu, u64 *eoi_exit_bitmap);
 void (*set_virtual_apic_mode)(struct kvm_vcpu *vcpu);
 void (*set_apic_access_page_addr)(struct kvm_vcpu *vcpu);
 int (*deliver_posted_interrupt)(struct kvm_vcpu *vcpu, int vector);
 int (*sync_pir_to_irr)(struct kvm_vcpu *vcpu);
 int (*set_tss_addr)(struct kvm *kvm, unsigned int addr);
 int (*set_identity_map_addr)(struct kvm *kvm, u64 ident_addr);
 u64 (*get_mt_mask)(struct kvm_vcpu *vcpu, gfn_t gfn, bool is_mmio);

 void (*load_mmu_pgd)(struct kvm_vcpu *vcpu, hpa_t root_hpa,
        int root_level);

 bool (*has_wbinvd_exit)(void);

 u64 (*get_l2_tsc_offset)(struct kvm_vcpu *vcpu);
 u64 (*get_l2_tsc_multiplier)(struct kvm_vcpu *vcpu);
 void (*write_tsc_offset)(struct kvm_vcpu *vcpu, u64 offset);
 void (*write_tsc_multiplier)(struct kvm_vcpu *vcpu, u64 multiplier);





 void (*get_exit_info)(struct kvm_vcpu *vcpu, u32 *reason,
         u64 *info1, u64 *info2,
         u32 *exit_int_info, u32 *exit_int_info_err_code);

 int (*check_intercept)(struct kvm_vcpu *vcpu,
          struct x86_instruction_info *info,
          enum x86_intercept_stage stage,
          struct x86_exception *exception);
 void (*handle_exit_irqoff)(struct kvm_vcpu *vcpu);

 void (*request_immediate_exit)(struct kvm_vcpu *vcpu);

 void (*sched_in)(struct kvm_vcpu *kvm, int cpu);





 int cpu_dirty_log_size;
 void (*update_cpu_dirty_logging)(struct kvm_vcpu *vcpu);


 const struct kvm_pmu_ops *pmu_ops;
 const struct kvm_x86_nested_ops *nested_ops;
# 1453 "./arch/x86/include/asm/kvm_host.h"
 int (*pre_block)(struct kvm_vcpu *vcpu);
 void (*post_block)(struct kvm_vcpu *vcpu);

 void (*vcpu_blocking)(struct kvm_vcpu *vcpu);
 void (*vcpu_unblocking)(struct kvm_vcpu *vcpu);

 int (*update_pi_irte)(struct kvm *kvm, unsigned int host_irq,
         uint32_t guest_irq, bool set);
 void (*start_assignment)(struct kvm *kvm);
 void (*apicv_post_state_restore)(struct kvm_vcpu *vcpu);
 bool (*dy_apicv_has_pending_interrupt)(struct kvm_vcpu *vcpu);

 int (*set_hv_timer)(struct kvm_vcpu *vcpu, u64 guest_deadline_tsc,
       bool *expired);
 void (*cancel_hv_timer)(struct kvm_vcpu *vcpu);

 void (*setup_mce)(struct kvm_vcpu *vcpu);

 int (*smi_allowed)(struct kvm_vcpu *vcpu, bool for_injection);
 int (*enter_smm)(struct kvm_vcpu *vcpu, char *smstate);
 int (*leave_smm)(struct kvm_vcpu *vcpu, const char *smstate);
 void (*enable_smi_window)(struct kvm_vcpu *vcpu);

 int (*mem_enc_op)(struct kvm *kvm, void *argp);
 int (*mem_enc_reg_region)(struct kvm *kvm, struct kvm_enc_region *argp);
 int (*mem_enc_unreg_region)(struct kvm *kvm, struct kvm_enc_region *argp);
 int (*vm_copy_enc_context_from)(struct kvm *kvm, unsigned int source_fd);
 int (*vm_move_enc_context_from)(struct kvm *kvm, unsigned int source_fd);

 int (*get_msr_feature)(struct kvm_msr_entry *entry);

 bool (*can_emulate_instruction)(struct kvm_vcpu *vcpu, void *insn, int insn_len);

 bool (*apic_init_signal_blocked)(struct kvm_vcpu *vcpu);
 int (*enable_direct_tlbflush)(struct kvm_vcpu *vcpu);

 void (*migrate_timers)(struct kvm_vcpu *vcpu);
 void (*msr_filter_changed)(struct kvm_vcpu *vcpu);
 int (*complete_emulated_msr)(struct kvm_vcpu *vcpu, int err);

 void (*vcpu_deliver_sipi_vector)(struct kvm_vcpu *vcpu, u8 vector);
};

struct kvm_x86_nested_ops {
 int (*check_events)(struct kvm_vcpu *vcpu);
 bool (*hv_timer_pending)(struct kvm_vcpu *vcpu);
 void (*triple_fault)(struct kvm_vcpu *vcpu);
 int (*get_state)(struct kvm_vcpu *vcpu,
    struct kvm_nested_state *user_kvm_nested_state,
    unsigned user_data_size);
 int (*set_state)(struct kvm_vcpu *vcpu,
    struct kvm_nested_state *user_kvm_nested_state,
    struct kvm_nested_state *kvm_state);
 bool (*get_nested_state_pages)(struct kvm_vcpu *vcpu);
 int (*write_log_dirty)(struct kvm_vcpu *vcpu, gpa_t l2_gpa);

 int (*enable_evmcs)(struct kvm_vcpu *vcpu,
       uint16_t *vmcs_version);
 uint16_t (*get_evmcs_version)(struct kvm_vcpu *vcpu);
};

struct kvm_x86_init_ops {
 int (*cpu_has_kvm_support)(void);
 int (*disabled_by_bios)(void);
 int (*check_processor_compatibility)(void);
 int (*hardware_setup)(void);

 struct kvm_x86_ops *runtime_ops;
};

struct kvm_arch_async_pf {
 u32 token;
 gfn_t gfn;
 unsigned long cr3;
 bool direct_map;
};

extern u32 __attribute__((__section__(".data..read_mostly"))) kvm_nr_uret_msrs;
extern u64 __attribute__((__section__(".data..read_mostly"))) host_efer;
extern bool __attribute__((__section__(".data..read_mostly"))) allow_smaller_maxphyaddr;
extern bool __attribute__((__section__(".data..read_mostly"))) enable_apicv;
extern struct kvm_x86_ops kvm_x86_ops;




# 1 "./arch/x86/include/asm/kvm-x86-ops.h" 1
# 15 "./arch/x86/include/asm/kvm-x86-ops.h"
extern struct static_call_key __SCK__kvm_x86_hardware_enable; extern typeof(*(((struct kvm_x86_ops *)0)->hardware_enable)) __SCT__kvm_x86_hardware_enable;;
extern struct static_call_key __SCK__kvm_x86_hardware_disable; extern typeof(*(((struct kvm_x86_ops *)0)->hardware_disable)) __SCT__kvm_x86_hardware_disable;;
extern struct static_call_key __SCK__kvm_x86_hardware_unsetup; extern typeof(*(((struct kvm_x86_ops *)0)->hardware_unsetup)) __SCT__kvm_x86_hardware_unsetup;;
extern struct static_call_key __SCK__kvm_x86_cpu_has_accelerated_tpr; extern typeof(*(((struct kvm_x86_ops *)0)->cpu_has_accelerated_tpr)) __SCT__kvm_x86_cpu_has_accelerated_tpr;;
extern struct static_call_key __SCK__kvm_x86_has_emulated_msr; extern typeof(*(((struct kvm_x86_ops *)0)->has_emulated_msr)) __SCT__kvm_x86_has_emulated_msr;;
extern struct static_call_key __SCK__kvm_x86_vcpu_after_set_cpuid; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_after_set_cpuid)) __SCT__kvm_x86_vcpu_after_set_cpuid;;
extern struct static_call_key __SCK__kvm_x86_vm_init; extern typeof(*(((struct kvm_x86_ops *)0)->vm_init)) __SCT__kvm_x86_vm_init;;
extern struct static_call_key __SCK__kvm_x86_vm_destroy; extern typeof(*(((struct kvm_x86_ops *)0)->vm_destroy)) __SCT__kvm_x86_vm_destroy;;
extern struct static_call_key __SCK__kvm_x86_vcpu_create; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_create)) __SCT__kvm_x86_vcpu_create;;
extern struct static_call_key __SCK__kvm_x86_vcpu_free; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_free)) __SCT__kvm_x86_vcpu_free;;
extern struct static_call_key __SCK__kvm_x86_vcpu_reset; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_reset)) __SCT__kvm_x86_vcpu_reset;;
extern struct static_call_key __SCK__kvm_x86_prepare_guest_switch; extern typeof(*(((struct kvm_x86_ops *)0)->prepare_guest_switch)) __SCT__kvm_x86_prepare_guest_switch;;
extern struct static_call_key __SCK__kvm_x86_vcpu_load; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_load)) __SCT__kvm_x86_vcpu_load;;
extern struct static_call_key __SCK__kvm_x86_vcpu_put; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_put)) __SCT__kvm_x86_vcpu_put;;
extern struct static_call_key __SCK__kvm_x86_update_exception_bitmap; extern typeof(*(((struct kvm_x86_ops *)0)->update_exception_bitmap)) __SCT__kvm_x86_update_exception_bitmap;;
extern struct static_call_key __SCK__kvm_x86_get_msr; extern typeof(*(((struct kvm_x86_ops *)0)->get_msr)) __SCT__kvm_x86_get_msr;;
extern struct static_call_key __SCK__kvm_x86_set_msr; extern typeof(*(((struct kvm_x86_ops *)0)->set_msr)) __SCT__kvm_x86_set_msr;;
extern struct static_call_key __SCK__kvm_x86_get_segment_base; extern typeof(*(((struct kvm_x86_ops *)0)->get_segment_base)) __SCT__kvm_x86_get_segment_base;;
extern struct static_call_key __SCK__kvm_x86_get_segment; extern typeof(*(((struct kvm_x86_ops *)0)->get_segment)) __SCT__kvm_x86_get_segment;;
extern struct static_call_key __SCK__kvm_x86_get_cpl; extern typeof(*(((struct kvm_x86_ops *)0)->get_cpl)) __SCT__kvm_x86_get_cpl;;
extern struct static_call_key __SCK__kvm_x86_set_segment; extern typeof(*(((struct kvm_x86_ops *)0)->set_segment)) __SCT__kvm_x86_set_segment;;
extern struct static_call_key __SCK__kvm_x86_get_cs_db_l_bits; extern typeof(*(((struct kvm_x86_ops *)0)->get_cs_db_l_bits)) __SCT__kvm_x86_get_cs_db_l_bits;;
extern struct static_call_key __SCK__kvm_x86_set_cr0; extern typeof(*(((struct kvm_x86_ops *)0)->set_cr0)) __SCT__kvm_x86_set_cr0;;
extern struct static_call_key __SCK__kvm_x86_is_valid_cr4; extern typeof(*(((struct kvm_x86_ops *)0)->is_valid_cr4)) __SCT__kvm_x86_is_valid_cr4;;
extern struct static_call_key __SCK__kvm_x86_set_cr4; extern typeof(*(((struct kvm_x86_ops *)0)->set_cr4)) __SCT__kvm_x86_set_cr4;;
extern struct static_call_key __SCK__kvm_x86_set_efer; extern typeof(*(((struct kvm_x86_ops *)0)->set_efer)) __SCT__kvm_x86_set_efer;;
extern struct static_call_key __SCK__kvm_x86_get_idt; extern typeof(*(((struct kvm_x86_ops *)0)->get_idt)) __SCT__kvm_x86_get_idt;;
extern struct static_call_key __SCK__kvm_x86_set_idt; extern typeof(*(((struct kvm_x86_ops *)0)->set_idt)) __SCT__kvm_x86_set_idt;;
extern struct static_call_key __SCK__kvm_x86_get_gdt; extern typeof(*(((struct kvm_x86_ops *)0)->get_gdt)) __SCT__kvm_x86_get_gdt;;
extern struct static_call_key __SCK__kvm_x86_set_gdt; extern typeof(*(((struct kvm_x86_ops *)0)->set_gdt)) __SCT__kvm_x86_set_gdt;;
extern struct static_call_key __SCK__kvm_x86_sync_dirty_debug_regs; extern typeof(*(((struct kvm_x86_ops *)0)->sync_dirty_debug_regs)) __SCT__kvm_x86_sync_dirty_debug_regs;;
extern struct static_call_key __SCK__kvm_x86_set_dr7; extern typeof(*(((struct kvm_x86_ops *)0)->set_dr7)) __SCT__kvm_x86_set_dr7;;
extern struct static_call_key __SCK__kvm_x86_cache_reg; extern typeof(*(((struct kvm_x86_ops *)0)->cache_reg)) __SCT__kvm_x86_cache_reg;;
extern struct static_call_key __SCK__kvm_x86_get_rflags; extern typeof(*(((struct kvm_x86_ops *)0)->get_rflags)) __SCT__kvm_x86_get_rflags;;
extern struct static_call_key __SCK__kvm_x86_set_rflags; extern typeof(*(((struct kvm_x86_ops *)0)->set_rflags)) __SCT__kvm_x86_set_rflags;;
extern struct static_call_key __SCK__kvm_x86_tlb_flush_all; extern typeof(*(((struct kvm_x86_ops *)0)->tlb_flush_all)) __SCT__kvm_x86_tlb_flush_all;;
extern struct static_call_key __SCK__kvm_x86_tlb_flush_current; extern typeof(*(((struct kvm_x86_ops *)0)->tlb_flush_current)) __SCT__kvm_x86_tlb_flush_current;;
extern struct static_call_key __SCK__kvm_x86_tlb_remote_flush; extern typeof(*(((struct kvm_x86_ops *)0)->tlb_remote_flush)) __SCT__kvm_x86_tlb_remote_flush;;
extern struct static_call_key __SCK__kvm_x86_tlb_remote_flush_with_range; extern typeof(*(((struct kvm_x86_ops *)0)->tlb_remote_flush_with_range)) __SCT__kvm_x86_tlb_remote_flush_with_range;;
extern struct static_call_key __SCK__kvm_x86_tlb_flush_gva; extern typeof(*(((struct kvm_x86_ops *)0)->tlb_flush_gva)) __SCT__kvm_x86_tlb_flush_gva;;
extern struct static_call_key __SCK__kvm_x86_tlb_flush_guest; extern typeof(*(((struct kvm_x86_ops *)0)->tlb_flush_guest)) __SCT__kvm_x86_tlb_flush_guest;;
extern struct static_call_key __SCK__kvm_x86_run; extern typeof(*(((struct kvm_x86_ops *)0)->run)) __SCT__kvm_x86_run;;
extern struct static_call_key __SCK__kvm_x86_handle_exit; extern typeof(*(((struct kvm_x86_ops *)0)->handle_exit)) __SCT__kvm_x86_handle_exit;;
extern struct static_call_key __SCK__kvm_x86_skip_emulated_instruction; extern typeof(*(((struct kvm_x86_ops *)0)->skip_emulated_instruction)) __SCT__kvm_x86_skip_emulated_instruction;;
extern struct static_call_key __SCK__kvm_x86_update_emulated_instruction; extern typeof(*(((struct kvm_x86_ops *)0)->update_emulated_instruction)) __SCT__kvm_x86_update_emulated_instruction;;
extern struct static_call_key __SCK__kvm_x86_set_interrupt_shadow; extern typeof(*(((struct kvm_x86_ops *)0)->set_interrupt_shadow)) __SCT__kvm_x86_set_interrupt_shadow;;
extern struct static_call_key __SCK__kvm_x86_get_interrupt_shadow; extern typeof(*(((struct kvm_x86_ops *)0)->get_interrupt_shadow)) __SCT__kvm_x86_get_interrupt_shadow;;
extern struct static_call_key __SCK__kvm_x86_patch_hypercall; extern typeof(*(((struct kvm_x86_ops *)0)->patch_hypercall)) __SCT__kvm_x86_patch_hypercall;;
extern struct static_call_key __SCK__kvm_x86_set_irq; extern typeof(*(((struct kvm_x86_ops *)0)->set_irq)) __SCT__kvm_x86_set_irq;;
extern struct static_call_key __SCK__kvm_x86_set_nmi; extern typeof(*(((struct kvm_x86_ops *)0)->set_nmi)) __SCT__kvm_x86_set_nmi;;
extern struct static_call_key __SCK__kvm_x86_queue_exception; extern typeof(*(((struct kvm_x86_ops *)0)->queue_exception)) __SCT__kvm_x86_queue_exception;;
extern struct static_call_key __SCK__kvm_x86_cancel_injection; extern typeof(*(((struct kvm_x86_ops *)0)->cancel_injection)) __SCT__kvm_x86_cancel_injection;;
extern struct static_call_key __SCK__kvm_x86_interrupt_allowed; extern typeof(*(((struct kvm_x86_ops *)0)->interrupt_allowed)) __SCT__kvm_x86_interrupt_allowed;;
extern struct static_call_key __SCK__kvm_x86_nmi_allowed; extern typeof(*(((struct kvm_x86_ops *)0)->nmi_allowed)) __SCT__kvm_x86_nmi_allowed;;
extern struct static_call_key __SCK__kvm_x86_get_nmi_mask; extern typeof(*(((struct kvm_x86_ops *)0)->get_nmi_mask)) __SCT__kvm_x86_get_nmi_mask;;
extern struct static_call_key __SCK__kvm_x86_set_nmi_mask; extern typeof(*(((struct kvm_x86_ops *)0)->set_nmi_mask)) __SCT__kvm_x86_set_nmi_mask;;
extern struct static_call_key __SCK__kvm_x86_enable_nmi_window; extern typeof(*(((struct kvm_x86_ops *)0)->enable_nmi_window)) __SCT__kvm_x86_enable_nmi_window;;
extern struct static_call_key __SCK__kvm_x86_enable_irq_window; extern typeof(*(((struct kvm_x86_ops *)0)->enable_irq_window)) __SCT__kvm_x86_enable_irq_window;;
extern struct static_call_key __SCK__kvm_x86_update_cr8_intercept; extern typeof(*(((struct kvm_x86_ops *)0)->update_cr8_intercept)) __SCT__kvm_x86_update_cr8_intercept;;
extern struct static_call_key __SCK__kvm_x86_check_apicv_inhibit_reasons; extern typeof(*(((struct kvm_x86_ops *)0)->check_apicv_inhibit_reasons)) __SCT__kvm_x86_check_apicv_inhibit_reasons;;
extern struct static_call_key __SCK__kvm_x86_refresh_apicv_exec_ctrl; extern typeof(*(((struct kvm_x86_ops *)0)->refresh_apicv_exec_ctrl)) __SCT__kvm_x86_refresh_apicv_exec_ctrl;;
extern struct static_call_key __SCK__kvm_x86_hwapic_irr_update; extern typeof(*(((struct kvm_x86_ops *)0)->hwapic_irr_update)) __SCT__kvm_x86_hwapic_irr_update;;
extern struct static_call_key __SCK__kvm_x86_hwapic_isr_update; extern typeof(*(((struct kvm_x86_ops *)0)->hwapic_isr_update)) __SCT__kvm_x86_hwapic_isr_update;;
extern struct static_call_key __SCK__kvm_x86_guest_apic_has_interrupt; extern typeof(*(((struct kvm_x86_ops *)0)->guest_apic_has_interrupt)) __SCT__kvm_x86_guest_apic_has_interrupt;;
extern struct static_call_key __SCK__kvm_x86_load_eoi_exitmap; extern typeof(*(((struct kvm_x86_ops *)0)->load_eoi_exitmap)) __SCT__kvm_x86_load_eoi_exitmap;;
extern struct static_call_key __SCK__kvm_x86_set_virtual_apic_mode; extern typeof(*(((struct kvm_x86_ops *)0)->set_virtual_apic_mode)) __SCT__kvm_x86_set_virtual_apic_mode;;
extern struct static_call_key __SCK__kvm_x86_set_apic_access_page_addr; extern typeof(*(((struct kvm_x86_ops *)0)->set_apic_access_page_addr)) __SCT__kvm_x86_set_apic_access_page_addr;;
extern struct static_call_key __SCK__kvm_x86_deliver_posted_interrupt; extern typeof(*(((struct kvm_x86_ops *)0)->deliver_posted_interrupt)) __SCT__kvm_x86_deliver_posted_interrupt;;
extern struct static_call_key __SCK__kvm_x86_sync_pir_to_irr; extern typeof(*(((struct kvm_x86_ops *)0)->sync_pir_to_irr)) __SCT__kvm_x86_sync_pir_to_irr;;
extern struct static_call_key __SCK__kvm_x86_set_tss_addr; extern typeof(*(((struct kvm_x86_ops *)0)->set_tss_addr)) __SCT__kvm_x86_set_tss_addr;;
extern struct static_call_key __SCK__kvm_x86_set_identity_map_addr; extern typeof(*(((struct kvm_x86_ops *)0)->set_identity_map_addr)) __SCT__kvm_x86_set_identity_map_addr;;
extern struct static_call_key __SCK__kvm_x86_get_mt_mask; extern typeof(*(((struct kvm_x86_ops *)0)->get_mt_mask)) __SCT__kvm_x86_get_mt_mask;;
extern struct static_call_key __SCK__kvm_x86_load_mmu_pgd; extern typeof(*(((struct kvm_x86_ops *)0)->load_mmu_pgd)) __SCT__kvm_x86_load_mmu_pgd;;
extern struct static_call_key __SCK__kvm_x86_has_wbinvd_exit; extern typeof(*(((struct kvm_x86_ops *)0)->has_wbinvd_exit)) __SCT__kvm_x86_has_wbinvd_exit;;
extern struct static_call_key __SCK__kvm_x86_get_l2_tsc_offset; extern typeof(*(((struct kvm_x86_ops *)0)->get_l2_tsc_offset)) __SCT__kvm_x86_get_l2_tsc_offset;;
extern struct static_call_key __SCK__kvm_x86_get_l2_tsc_multiplier; extern typeof(*(((struct kvm_x86_ops *)0)->get_l2_tsc_multiplier)) __SCT__kvm_x86_get_l2_tsc_multiplier;;
extern struct static_call_key __SCK__kvm_x86_write_tsc_offset; extern typeof(*(((struct kvm_x86_ops *)0)->write_tsc_offset)) __SCT__kvm_x86_write_tsc_offset;;
extern struct static_call_key __SCK__kvm_x86_write_tsc_multiplier; extern typeof(*(((struct kvm_x86_ops *)0)->write_tsc_multiplier)) __SCT__kvm_x86_write_tsc_multiplier;;
extern struct static_call_key __SCK__kvm_x86_get_exit_info; extern typeof(*(((struct kvm_x86_ops *)0)->get_exit_info)) __SCT__kvm_x86_get_exit_info;;
extern struct static_call_key __SCK__kvm_x86_check_intercept; extern typeof(*(((struct kvm_x86_ops *)0)->check_intercept)) __SCT__kvm_x86_check_intercept;;
extern struct static_call_key __SCK__kvm_x86_handle_exit_irqoff; extern typeof(*(((struct kvm_x86_ops *)0)->handle_exit_irqoff)) __SCT__kvm_x86_handle_exit_irqoff;;
extern struct static_call_key __SCK__kvm_x86_request_immediate_exit; extern typeof(*(((struct kvm_x86_ops *)0)->request_immediate_exit)) __SCT__kvm_x86_request_immediate_exit;;
extern struct static_call_key __SCK__kvm_x86_sched_in; extern typeof(*(((struct kvm_x86_ops *)0)->sched_in)) __SCT__kvm_x86_sched_in;;
extern struct static_call_key __SCK__kvm_x86_update_cpu_dirty_logging; extern typeof(*(((struct kvm_x86_ops *)0)->update_cpu_dirty_logging)) __SCT__kvm_x86_update_cpu_dirty_logging;;
extern struct static_call_key __SCK__kvm_x86_pre_block; extern typeof(*(((struct kvm_x86_ops *)0)->pre_block)) __SCT__kvm_x86_pre_block;;
extern struct static_call_key __SCK__kvm_x86_post_block; extern typeof(*(((struct kvm_x86_ops *)0)->post_block)) __SCT__kvm_x86_post_block;;
extern struct static_call_key __SCK__kvm_x86_vcpu_blocking; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_blocking)) __SCT__kvm_x86_vcpu_blocking;;
extern struct static_call_key __SCK__kvm_x86_vcpu_unblocking; extern typeof(*(((struct kvm_x86_ops *)0)->vcpu_unblocking)) __SCT__kvm_x86_vcpu_unblocking;;
extern struct static_call_key __SCK__kvm_x86_update_pi_irte; extern typeof(*(((struct kvm_x86_ops *)0)->update_pi_irte)) __SCT__kvm_x86_update_pi_irte;;
extern struct static_call_key __SCK__kvm_x86_start_assignment; extern typeof(*(((struct kvm_x86_ops *)0)->start_assignment)) __SCT__kvm_x86_start_assignment;;
extern struct static_call_key __SCK__kvm_x86_apicv_post_state_restore; extern typeof(*(((struct kvm_x86_ops *)0)->apicv_post_state_restore)) __SCT__kvm_x86_apicv_post_state_restore;;
extern struct static_call_key __SCK__kvm_x86_dy_apicv_has_pending_interrupt; extern typeof(*(((struct kvm_x86_ops *)0)->dy_apicv_has_pending_interrupt)) __SCT__kvm_x86_dy_apicv_has_pending_interrupt;;
extern struct static_call_key __SCK__kvm_x86_set_hv_timer; extern typeof(*(((struct kvm_x86_ops *)0)->set_hv_timer)) __SCT__kvm_x86_set_hv_timer;;
extern struct static_call_key __SCK__kvm_x86_cancel_hv_timer; extern typeof(*(((struct kvm_x86_ops *)0)->cancel_hv_timer)) __SCT__kvm_x86_cancel_hv_timer;;
extern struct static_call_key __SCK__kvm_x86_setup_mce; extern typeof(*(((struct kvm_x86_ops *)0)->setup_mce)) __SCT__kvm_x86_setup_mce;;
extern struct static_call_key __SCK__kvm_x86_smi_allowed; extern typeof(*(((struct kvm_x86_ops *)0)->smi_allowed)) __SCT__kvm_x86_smi_allowed;;
extern struct static_call_key __SCK__kvm_x86_enter_smm; extern typeof(*(((struct kvm_x86_ops *)0)->enter_smm)) __SCT__kvm_x86_enter_smm;;
extern struct static_call_key __SCK__kvm_x86_leave_smm; extern typeof(*(((struct kvm_x86_ops *)0)->leave_smm)) __SCT__kvm_x86_leave_smm;;
extern struct static_call_key __SCK__kvm_x86_enable_smi_window; extern typeof(*(((struct kvm_x86_ops *)0)->enable_smi_window)) __SCT__kvm_x86_enable_smi_window;;
extern struct static_call_key __SCK__kvm_x86_mem_enc_op; extern typeof(*(((struct kvm_x86_ops *)0)->mem_enc_op)) __SCT__kvm_x86_mem_enc_op;;
extern struct static_call_key __SCK__kvm_x86_mem_enc_reg_region; extern typeof(*(((struct kvm_x86_ops *)0)->mem_enc_reg_region)) __SCT__kvm_x86_mem_enc_reg_region;;
extern struct static_call_key __SCK__kvm_x86_mem_enc_unreg_region; extern typeof(*(((struct kvm_x86_ops *)0)->mem_enc_unreg_region)) __SCT__kvm_x86_mem_enc_unreg_region;;
extern struct static_call_key __SCK__kvm_x86_get_msr_feature; extern typeof(*(((struct kvm_x86_ops *)0)->get_msr_feature)) __SCT__kvm_x86_get_msr_feature;;
extern struct static_call_key __SCK__kvm_x86_can_emulate_instruction; extern typeof(*(((struct kvm_x86_ops *)0)->can_emulate_instruction)) __SCT__kvm_x86_can_emulate_instruction;;
extern struct static_call_key __SCK__kvm_x86_apic_init_signal_blocked; extern typeof(*(((struct kvm_x86_ops *)0)->apic_init_signal_blocked)) __SCT__kvm_x86_apic_init_signal_blocked;;
extern struct static_call_key __SCK__kvm_x86_enable_direct_tlbflush; extern typeof(*(((struct kvm_x86_ops *)0)->enable_direct_tlbflush)) __SCT__kvm_x86_enable_direct_tlbflush;;
extern struct static_call_key __SCK__kvm_x86_migrate_timers; extern typeof(*(((struct kvm_x86_ops *)0)->migrate_timers)) __SCT__kvm_x86_migrate_timers;;
extern struct static_call_key __SCK__kvm_x86_msr_filter_changed; extern typeof(*(((struct kvm_x86_ops *)0)->msr_filter_changed)) __SCT__kvm_x86_msr_filter_changed;;
extern struct static_call_key __SCK__kvm_x86_complete_emulated_msr; extern typeof(*(((struct kvm_x86_ops *)0)->complete_emulated_msr)) __SCT__kvm_x86_complete_emulated_msr;;
# 1540 "./arch/x86/include/asm/kvm_host.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_ops_static_call_update(void)
{



# 1 "./arch/x86/include/asm/kvm-x86-ops.h" 1
# 15 "./arch/x86/include/asm/kvm-x86-ops.h"
({ typeof(&__SCT__kvm_x86_hardware_enable) __F = (kvm_x86_ops.hardware_enable); __static_call_update(&__SCK__kvm_x86_hardware_enable, &__SCT__kvm_x86_hardware_enable, __F); });
({ typeof(&__SCT__kvm_x86_hardware_disable) __F = (kvm_x86_ops.hardware_disable); __static_call_update(&__SCK__kvm_x86_hardware_disable, &__SCT__kvm_x86_hardware_disable, __F); });
({ typeof(&__SCT__kvm_x86_hardware_unsetup) __F = (kvm_x86_ops.hardware_unsetup); __static_call_update(&__SCK__kvm_x86_hardware_unsetup, &__SCT__kvm_x86_hardware_unsetup, __F); });
({ typeof(&__SCT__kvm_x86_cpu_has_accelerated_tpr) __F = (kvm_x86_ops.cpu_has_accelerated_tpr); __static_call_update(&__SCK__kvm_x86_cpu_has_accelerated_tpr, &__SCT__kvm_x86_cpu_has_accelerated_tpr, __F); });
({ typeof(&__SCT__kvm_x86_has_emulated_msr) __F = (kvm_x86_ops.has_emulated_msr); __static_call_update(&__SCK__kvm_x86_has_emulated_msr, &__SCT__kvm_x86_has_emulated_msr, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_after_set_cpuid) __F = (kvm_x86_ops.vcpu_after_set_cpuid); __static_call_update(&__SCK__kvm_x86_vcpu_after_set_cpuid, &__SCT__kvm_x86_vcpu_after_set_cpuid, __F); });
({ typeof(&__SCT__kvm_x86_vm_init) __F = (kvm_x86_ops.vm_init); __static_call_update(&__SCK__kvm_x86_vm_init, &__SCT__kvm_x86_vm_init, __F); });
({ typeof(&__SCT__kvm_x86_vm_destroy) __F = (kvm_x86_ops.vm_destroy); __static_call_update(&__SCK__kvm_x86_vm_destroy, &__SCT__kvm_x86_vm_destroy, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_create) __F = (kvm_x86_ops.vcpu_create); __static_call_update(&__SCK__kvm_x86_vcpu_create, &__SCT__kvm_x86_vcpu_create, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_free) __F = (kvm_x86_ops.vcpu_free); __static_call_update(&__SCK__kvm_x86_vcpu_free, &__SCT__kvm_x86_vcpu_free, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_reset) __F = (kvm_x86_ops.vcpu_reset); __static_call_update(&__SCK__kvm_x86_vcpu_reset, &__SCT__kvm_x86_vcpu_reset, __F); });
({ typeof(&__SCT__kvm_x86_prepare_guest_switch) __F = (kvm_x86_ops.prepare_guest_switch); __static_call_update(&__SCK__kvm_x86_prepare_guest_switch, &__SCT__kvm_x86_prepare_guest_switch, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_load) __F = (kvm_x86_ops.vcpu_load); __static_call_update(&__SCK__kvm_x86_vcpu_load, &__SCT__kvm_x86_vcpu_load, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_put) __F = (kvm_x86_ops.vcpu_put); __static_call_update(&__SCK__kvm_x86_vcpu_put, &__SCT__kvm_x86_vcpu_put, __F); });
({ typeof(&__SCT__kvm_x86_update_exception_bitmap) __F = (kvm_x86_ops.update_exception_bitmap); __static_call_update(&__SCK__kvm_x86_update_exception_bitmap, &__SCT__kvm_x86_update_exception_bitmap, __F); });
({ typeof(&__SCT__kvm_x86_get_msr) __F = (kvm_x86_ops.get_msr); __static_call_update(&__SCK__kvm_x86_get_msr, &__SCT__kvm_x86_get_msr, __F); });
({ typeof(&__SCT__kvm_x86_set_msr) __F = (kvm_x86_ops.set_msr); __static_call_update(&__SCK__kvm_x86_set_msr, &__SCT__kvm_x86_set_msr, __F); });
({ typeof(&__SCT__kvm_x86_get_segment_base) __F = (kvm_x86_ops.get_segment_base); __static_call_update(&__SCK__kvm_x86_get_segment_base, &__SCT__kvm_x86_get_segment_base, __F); });
({ typeof(&__SCT__kvm_x86_get_segment) __F = (kvm_x86_ops.get_segment); __static_call_update(&__SCK__kvm_x86_get_segment, &__SCT__kvm_x86_get_segment, __F); });
({ typeof(&__SCT__kvm_x86_get_cpl) __F = (kvm_x86_ops.get_cpl); __static_call_update(&__SCK__kvm_x86_get_cpl, &__SCT__kvm_x86_get_cpl, __F); });
({ typeof(&__SCT__kvm_x86_set_segment) __F = (kvm_x86_ops.set_segment); __static_call_update(&__SCK__kvm_x86_set_segment, &__SCT__kvm_x86_set_segment, __F); });
({ typeof(&__SCT__kvm_x86_get_cs_db_l_bits) __F = (kvm_x86_ops.get_cs_db_l_bits); __static_call_update(&__SCK__kvm_x86_get_cs_db_l_bits, &__SCT__kvm_x86_get_cs_db_l_bits, __F); });
({ typeof(&__SCT__kvm_x86_set_cr0) __F = (kvm_x86_ops.set_cr0); __static_call_update(&__SCK__kvm_x86_set_cr0, &__SCT__kvm_x86_set_cr0, __F); });
({ typeof(&__SCT__kvm_x86_is_valid_cr4) __F = (kvm_x86_ops.is_valid_cr4); __static_call_update(&__SCK__kvm_x86_is_valid_cr4, &__SCT__kvm_x86_is_valid_cr4, __F); });
({ typeof(&__SCT__kvm_x86_set_cr4) __F = (kvm_x86_ops.set_cr4); __static_call_update(&__SCK__kvm_x86_set_cr4, &__SCT__kvm_x86_set_cr4, __F); });
({ typeof(&__SCT__kvm_x86_set_efer) __F = (kvm_x86_ops.set_efer); __static_call_update(&__SCK__kvm_x86_set_efer, &__SCT__kvm_x86_set_efer, __F); });
({ typeof(&__SCT__kvm_x86_get_idt) __F = (kvm_x86_ops.get_idt); __static_call_update(&__SCK__kvm_x86_get_idt, &__SCT__kvm_x86_get_idt, __F); });
({ typeof(&__SCT__kvm_x86_set_idt) __F = (kvm_x86_ops.set_idt); __static_call_update(&__SCK__kvm_x86_set_idt, &__SCT__kvm_x86_set_idt, __F); });
({ typeof(&__SCT__kvm_x86_get_gdt) __F = (kvm_x86_ops.get_gdt); __static_call_update(&__SCK__kvm_x86_get_gdt, &__SCT__kvm_x86_get_gdt, __F); });
({ typeof(&__SCT__kvm_x86_set_gdt) __F = (kvm_x86_ops.set_gdt); __static_call_update(&__SCK__kvm_x86_set_gdt, &__SCT__kvm_x86_set_gdt, __F); });
({ typeof(&__SCT__kvm_x86_sync_dirty_debug_regs) __F = (kvm_x86_ops.sync_dirty_debug_regs); __static_call_update(&__SCK__kvm_x86_sync_dirty_debug_regs, &__SCT__kvm_x86_sync_dirty_debug_regs, __F); });
({ typeof(&__SCT__kvm_x86_set_dr7) __F = (kvm_x86_ops.set_dr7); __static_call_update(&__SCK__kvm_x86_set_dr7, &__SCT__kvm_x86_set_dr7, __F); });
({ typeof(&__SCT__kvm_x86_cache_reg) __F = (kvm_x86_ops.cache_reg); __static_call_update(&__SCK__kvm_x86_cache_reg, &__SCT__kvm_x86_cache_reg, __F); });
({ typeof(&__SCT__kvm_x86_get_rflags) __F = (kvm_x86_ops.get_rflags); __static_call_update(&__SCK__kvm_x86_get_rflags, &__SCT__kvm_x86_get_rflags, __F); });
({ typeof(&__SCT__kvm_x86_set_rflags) __F = (kvm_x86_ops.set_rflags); __static_call_update(&__SCK__kvm_x86_set_rflags, &__SCT__kvm_x86_set_rflags, __F); });
({ typeof(&__SCT__kvm_x86_tlb_flush_all) __F = (kvm_x86_ops.tlb_flush_all); __static_call_update(&__SCK__kvm_x86_tlb_flush_all, &__SCT__kvm_x86_tlb_flush_all, __F); });
({ typeof(&__SCT__kvm_x86_tlb_flush_current) __F = (kvm_x86_ops.tlb_flush_current); __static_call_update(&__SCK__kvm_x86_tlb_flush_current, &__SCT__kvm_x86_tlb_flush_current, __F); });
({ typeof(&__SCT__kvm_x86_tlb_remote_flush) __F = (kvm_x86_ops.tlb_remote_flush); __static_call_update(&__SCK__kvm_x86_tlb_remote_flush, &__SCT__kvm_x86_tlb_remote_flush, __F); });
({ typeof(&__SCT__kvm_x86_tlb_remote_flush_with_range) __F = (kvm_x86_ops.tlb_remote_flush_with_range); __static_call_update(&__SCK__kvm_x86_tlb_remote_flush_with_range, &__SCT__kvm_x86_tlb_remote_flush_with_range, __F); });
({ typeof(&__SCT__kvm_x86_tlb_flush_gva) __F = (kvm_x86_ops.tlb_flush_gva); __static_call_update(&__SCK__kvm_x86_tlb_flush_gva, &__SCT__kvm_x86_tlb_flush_gva, __F); });
({ typeof(&__SCT__kvm_x86_tlb_flush_guest) __F = (kvm_x86_ops.tlb_flush_guest); __static_call_update(&__SCK__kvm_x86_tlb_flush_guest, &__SCT__kvm_x86_tlb_flush_guest, __F); });
({ typeof(&__SCT__kvm_x86_run) __F = (kvm_x86_ops.run); __static_call_update(&__SCK__kvm_x86_run, &__SCT__kvm_x86_run, __F); });
({ typeof(&__SCT__kvm_x86_handle_exit) __F = (kvm_x86_ops.handle_exit); __static_call_update(&__SCK__kvm_x86_handle_exit, &__SCT__kvm_x86_handle_exit, __F); });
({ typeof(&__SCT__kvm_x86_skip_emulated_instruction) __F = (kvm_x86_ops.skip_emulated_instruction); __static_call_update(&__SCK__kvm_x86_skip_emulated_instruction, &__SCT__kvm_x86_skip_emulated_instruction, __F); });
({ typeof(&__SCT__kvm_x86_update_emulated_instruction) __F = (kvm_x86_ops.update_emulated_instruction); __static_call_update(&__SCK__kvm_x86_update_emulated_instruction, &__SCT__kvm_x86_update_emulated_instruction, __F); });
({ typeof(&__SCT__kvm_x86_set_interrupt_shadow) __F = (kvm_x86_ops.set_interrupt_shadow); __static_call_update(&__SCK__kvm_x86_set_interrupt_shadow, &__SCT__kvm_x86_set_interrupt_shadow, __F); });
({ typeof(&__SCT__kvm_x86_get_interrupt_shadow) __F = (kvm_x86_ops.get_interrupt_shadow); __static_call_update(&__SCK__kvm_x86_get_interrupt_shadow, &__SCT__kvm_x86_get_interrupt_shadow, __F); });
({ typeof(&__SCT__kvm_x86_patch_hypercall) __F = (kvm_x86_ops.patch_hypercall); __static_call_update(&__SCK__kvm_x86_patch_hypercall, &__SCT__kvm_x86_patch_hypercall, __F); });
({ typeof(&__SCT__kvm_x86_set_irq) __F = (kvm_x86_ops.set_irq); __static_call_update(&__SCK__kvm_x86_set_irq, &__SCT__kvm_x86_set_irq, __F); });
({ typeof(&__SCT__kvm_x86_set_nmi) __F = (kvm_x86_ops.set_nmi); __static_call_update(&__SCK__kvm_x86_set_nmi, &__SCT__kvm_x86_set_nmi, __F); });
({ typeof(&__SCT__kvm_x86_queue_exception) __F = (kvm_x86_ops.queue_exception); __static_call_update(&__SCK__kvm_x86_queue_exception, &__SCT__kvm_x86_queue_exception, __F); });
({ typeof(&__SCT__kvm_x86_cancel_injection) __F = (kvm_x86_ops.cancel_injection); __static_call_update(&__SCK__kvm_x86_cancel_injection, &__SCT__kvm_x86_cancel_injection, __F); });
({ typeof(&__SCT__kvm_x86_interrupt_allowed) __F = (kvm_x86_ops.interrupt_allowed); __static_call_update(&__SCK__kvm_x86_interrupt_allowed, &__SCT__kvm_x86_interrupt_allowed, __F); });
({ typeof(&__SCT__kvm_x86_nmi_allowed) __F = (kvm_x86_ops.nmi_allowed); __static_call_update(&__SCK__kvm_x86_nmi_allowed, &__SCT__kvm_x86_nmi_allowed, __F); });
({ typeof(&__SCT__kvm_x86_get_nmi_mask) __F = (kvm_x86_ops.get_nmi_mask); __static_call_update(&__SCK__kvm_x86_get_nmi_mask, &__SCT__kvm_x86_get_nmi_mask, __F); });
({ typeof(&__SCT__kvm_x86_set_nmi_mask) __F = (kvm_x86_ops.set_nmi_mask); __static_call_update(&__SCK__kvm_x86_set_nmi_mask, &__SCT__kvm_x86_set_nmi_mask, __F); });
({ typeof(&__SCT__kvm_x86_enable_nmi_window) __F = (kvm_x86_ops.enable_nmi_window); __static_call_update(&__SCK__kvm_x86_enable_nmi_window, &__SCT__kvm_x86_enable_nmi_window, __F); });
({ typeof(&__SCT__kvm_x86_enable_irq_window) __F = (kvm_x86_ops.enable_irq_window); __static_call_update(&__SCK__kvm_x86_enable_irq_window, &__SCT__kvm_x86_enable_irq_window, __F); });
({ typeof(&__SCT__kvm_x86_update_cr8_intercept) __F = (kvm_x86_ops.update_cr8_intercept); __static_call_update(&__SCK__kvm_x86_update_cr8_intercept, &__SCT__kvm_x86_update_cr8_intercept, __F); });
({ typeof(&__SCT__kvm_x86_check_apicv_inhibit_reasons) __F = (kvm_x86_ops.check_apicv_inhibit_reasons); __static_call_update(&__SCK__kvm_x86_check_apicv_inhibit_reasons, &__SCT__kvm_x86_check_apicv_inhibit_reasons, __F); });
({ typeof(&__SCT__kvm_x86_refresh_apicv_exec_ctrl) __F = (kvm_x86_ops.refresh_apicv_exec_ctrl); __static_call_update(&__SCK__kvm_x86_refresh_apicv_exec_ctrl, &__SCT__kvm_x86_refresh_apicv_exec_ctrl, __F); });
({ typeof(&__SCT__kvm_x86_hwapic_irr_update) __F = (kvm_x86_ops.hwapic_irr_update); __static_call_update(&__SCK__kvm_x86_hwapic_irr_update, &__SCT__kvm_x86_hwapic_irr_update, __F); });
({ typeof(&__SCT__kvm_x86_hwapic_isr_update) __F = (kvm_x86_ops.hwapic_isr_update); __static_call_update(&__SCK__kvm_x86_hwapic_isr_update, &__SCT__kvm_x86_hwapic_isr_update, __F); });
({ typeof(&__SCT__kvm_x86_guest_apic_has_interrupt) __F = (kvm_x86_ops.guest_apic_has_interrupt); __static_call_update(&__SCK__kvm_x86_guest_apic_has_interrupt, &__SCT__kvm_x86_guest_apic_has_interrupt, __F); });
({ typeof(&__SCT__kvm_x86_load_eoi_exitmap) __F = (kvm_x86_ops.load_eoi_exitmap); __static_call_update(&__SCK__kvm_x86_load_eoi_exitmap, &__SCT__kvm_x86_load_eoi_exitmap, __F); });
({ typeof(&__SCT__kvm_x86_set_virtual_apic_mode) __F = (kvm_x86_ops.set_virtual_apic_mode); __static_call_update(&__SCK__kvm_x86_set_virtual_apic_mode, &__SCT__kvm_x86_set_virtual_apic_mode, __F); });
({ typeof(&__SCT__kvm_x86_set_apic_access_page_addr) __F = (kvm_x86_ops.set_apic_access_page_addr); __static_call_update(&__SCK__kvm_x86_set_apic_access_page_addr, &__SCT__kvm_x86_set_apic_access_page_addr, __F); });
({ typeof(&__SCT__kvm_x86_deliver_posted_interrupt) __F = (kvm_x86_ops.deliver_posted_interrupt); __static_call_update(&__SCK__kvm_x86_deliver_posted_interrupt, &__SCT__kvm_x86_deliver_posted_interrupt, __F); });
({ typeof(&__SCT__kvm_x86_sync_pir_to_irr) __F = (kvm_x86_ops.sync_pir_to_irr); __static_call_update(&__SCK__kvm_x86_sync_pir_to_irr, &__SCT__kvm_x86_sync_pir_to_irr, __F); });
({ typeof(&__SCT__kvm_x86_set_tss_addr) __F = (kvm_x86_ops.set_tss_addr); __static_call_update(&__SCK__kvm_x86_set_tss_addr, &__SCT__kvm_x86_set_tss_addr, __F); });
({ typeof(&__SCT__kvm_x86_set_identity_map_addr) __F = (kvm_x86_ops.set_identity_map_addr); __static_call_update(&__SCK__kvm_x86_set_identity_map_addr, &__SCT__kvm_x86_set_identity_map_addr, __F); });
({ typeof(&__SCT__kvm_x86_get_mt_mask) __F = (kvm_x86_ops.get_mt_mask); __static_call_update(&__SCK__kvm_x86_get_mt_mask, &__SCT__kvm_x86_get_mt_mask, __F); });
({ typeof(&__SCT__kvm_x86_load_mmu_pgd) __F = (kvm_x86_ops.load_mmu_pgd); __static_call_update(&__SCK__kvm_x86_load_mmu_pgd, &__SCT__kvm_x86_load_mmu_pgd, __F); });
({ typeof(&__SCT__kvm_x86_has_wbinvd_exit) __F = (kvm_x86_ops.has_wbinvd_exit); __static_call_update(&__SCK__kvm_x86_has_wbinvd_exit, &__SCT__kvm_x86_has_wbinvd_exit, __F); });
({ typeof(&__SCT__kvm_x86_get_l2_tsc_offset) __F = (kvm_x86_ops.get_l2_tsc_offset); __static_call_update(&__SCK__kvm_x86_get_l2_tsc_offset, &__SCT__kvm_x86_get_l2_tsc_offset, __F); });
({ typeof(&__SCT__kvm_x86_get_l2_tsc_multiplier) __F = (kvm_x86_ops.get_l2_tsc_multiplier); __static_call_update(&__SCK__kvm_x86_get_l2_tsc_multiplier, &__SCT__kvm_x86_get_l2_tsc_multiplier, __F); });
({ typeof(&__SCT__kvm_x86_write_tsc_offset) __F = (kvm_x86_ops.write_tsc_offset); __static_call_update(&__SCK__kvm_x86_write_tsc_offset, &__SCT__kvm_x86_write_tsc_offset, __F); });
({ typeof(&__SCT__kvm_x86_write_tsc_multiplier) __F = (kvm_x86_ops.write_tsc_multiplier); __static_call_update(&__SCK__kvm_x86_write_tsc_multiplier, &__SCT__kvm_x86_write_tsc_multiplier, __F); });
({ typeof(&__SCT__kvm_x86_get_exit_info) __F = (kvm_x86_ops.get_exit_info); __static_call_update(&__SCK__kvm_x86_get_exit_info, &__SCT__kvm_x86_get_exit_info, __F); });
({ typeof(&__SCT__kvm_x86_check_intercept) __F = (kvm_x86_ops.check_intercept); __static_call_update(&__SCK__kvm_x86_check_intercept, &__SCT__kvm_x86_check_intercept, __F); });
({ typeof(&__SCT__kvm_x86_handle_exit_irqoff) __F = (kvm_x86_ops.handle_exit_irqoff); __static_call_update(&__SCK__kvm_x86_handle_exit_irqoff, &__SCT__kvm_x86_handle_exit_irqoff, __F); });
({ typeof(&__SCT__kvm_x86_request_immediate_exit) __F = (kvm_x86_ops.request_immediate_exit); __static_call_update(&__SCK__kvm_x86_request_immediate_exit, &__SCT__kvm_x86_request_immediate_exit, __F); });
({ typeof(&__SCT__kvm_x86_sched_in) __F = (kvm_x86_ops.sched_in); __static_call_update(&__SCK__kvm_x86_sched_in, &__SCT__kvm_x86_sched_in, __F); });
({ typeof(&__SCT__kvm_x86_update_cpu_dirty_logging) __F = (kvm_x86_ops.update_cpu_dirty_logging); __static_call_update(&__SCK__kvm_x86_update_cpu_dirty_logging, &__SCT__kvm_x86_update_cpu_dirty_logging, __F); });
({ typeof(&__SCT__kvm_x86_pre_block) __F = (kvm_x86_ops.pre_block); __static_call_update(&__SCK__kvm_x86_pre_block, &__SCT__kvm_x86_pre_block, __F); });
({ typeof(&__SCT__kvm_x86_post_block) __F = (kvm_x86_ops.post_block); __static_call_update(&__SCK__kvm_x86_post_block, &__SCT__kvm_x86_post_block, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_blocking) __F = (kvm_x86_ops.vcpu_blocking); __static_call_update(&__SCK__kvm_x86_vcpu_blocking, &__SCT__kvm_x86_vcpu_blocking, __F); });
({ typeof(&__SCT__kvm_x86_vcpu_unblocking) __F = (kvm_x86_ops.vcpu_unblocking); __static_call_update(&__SCK__kvm_x86_vcpu_unblocking, &__SCT__kvm_x86_vcpu_unblocking, __F); });
({ typeof(&__SCT__kvm_x86_update_pi_irte) __F = (kvm_x86_ops.update_pi_irte); __static_call_update(&__SCK__kvm_x86_update_pi_irte, &__SCT__kvm_x86_update_pi_irte, __F); });
({ typeof(&__SCT__kvm_x86_start_assignment) __F = (kvm_x86_ops.start_assignment); __static_call_update(&__SCK__kvm_x86_start_assignment, &__SCT__kvm_x86_start_assignment, __F); });
({ typeof(&__SCT__kvm_x86_apicv_post_state_restore) __F = (kvm_x86_ops.apicv_post_state_restore); __static_call_update(&__SCK__kvm_x86_apicv_post_state_restore, &__SCT__kvm_x86_apicv_post_state_restore, __F); });
({ typeof(&__SCT__kvm_x86_dy_apicv_has_pending_interrupt) __F = (kvm_x86_ops.dy_apicv_has_pending_interrupt); __static_call_update(&__SCK__kvm_x86_dy_apicv_has_pending_interrupt, &__SCT__kvm_x86_dy_apicv_has_pending_interrupt, __F); });
({ typeof(&__SCT__kvm_x86_set_hv_timer) __F = (kvm_x86_ops.set_hv_timer); __static_call_update(&__SCK__kvm_x86_set_hv_timer, &__SCT__kvm_x86_set_hv_timer, __F); });
({ typeof(&__SCT__kvm_x86_cancel_hv_timer) __F = (kvm_x86_ops.cancel_hv_timer); __static_call_update(&__SCK__kvm_x86_cancel_hv_timer, &__SCT__kvm_x86_cancel_hv_timer, __F); });
({ typeof(&__SCT__kvm_x86_setup_mce) __F = (kvm_x86_ops.setup_mce); __static_call_update(&__SCK__kvm_x86_setup_mce, &__SCT__kvm_x86_setup_mce, __F); });
({ typeof(&__SCT__kvm_x86_smi_allowed) __F = (kvm_x86_ops.smi_allowed); __static_call_update(&__SCK__kvm_x86_smi_allowed, &__SCT__kvm_x86_smi_allowed, __F); });
({ typeof(&__SCT__kvm_x86_enter_smm) __F = (kvm_x86_ops.enter_smm); __static_call_update(&__SCK__kvm_x86_enter_smm, &__SCT__kvm_x86_enter_smm, __F); });
({ typeof(&__SCT__kvm_x86_leave_smm) __F = (kvm_x86_ops.leave_smm); __static_call_update(&__SCK__kvm_x86_leave_smm, &__SCT__kvm_x86_leave_smm, __F); });
({ typeof(&__SCT__kvm_x86_enable_smi_window) __F = (kvm_x86_ops.enable_smi_window); __static_call_update(&__SCK__kvm_x86_enable_smi_window, &__SCT__kvm_x86_enable_smi_window, __F); });
({ typeof(&__SCT__kvm_x86_mem_enc_op) __F = (kvm_x86_ops.mem_enc_op); __static_call_update(&__SCK__kvm_x86_mem_enc_op, &__SCT__kvm_x86_mem_enc_op, __F); });
({ typeof(&__SCT__kvm_x86_mem_enc_reg_region) __F = (kvm_x86_ops.mem_enc_reg_region); __static_call_update(&__SCK__kvm_x86_mem_enc_reg_region, &__SCT__kvm_x86_mem_enc_reg_region, __F); });
({ typeof(&__SCT__kvm_x86_mem_enc_unreg_region) __F = (kvm_x86_ops.mem_enc_unreg_region); __static_call_update(&__SCK__kvm_x86_mem_enc_unreg_region, &__SCT__kvm_x86_mem_enc_unreg_region, __F); });
({ typeof(&__SCT__kvm_x86_get_msr_feature) __F = (kvm_x86_ops.get_msr_feature); __static_call_update(&__SCK__kvm_x86_get_msr_feature, &__SCT__kvm_x86_get_msr_feature, __F); });
({ typeof(&__SCT__kvm_x86_can_emulate_instruction) __F = (kvm_x86_ops.can_emulate_instruction); __static_call_update(&__SCK__kvm_x86_can_emulate_instruction, &__SCT__kvm_x86_can_emulate_instruction, __F); });
({ typeof(&__SCT__kvm_x86_apic_init_signal_blocked) __F = (kvm_x86_ops.apic_init_signal_blocked); __static_call_update(&__SCK__kvm_x86_apic_init_signal_blocked, &__SCT__kvm_x86_apic_init_signal_blocked, __F); });
({ typeof(&__SCT__kvm_x86_enable_direct_tlbflush) __F = (kvm_x86_ops.enable_direct_tlbflush); __static_call_update(&__SCK__kvm_x86_enable_direct_tlbflush, &__SCT__kvm_x86_enable_direct_tlbflush, __F); });
({ typeof(&__SCT__kvm_x86_migrate_timers) __F = (kvm_x86_ops.migrate_timers); __static_call_update(&__SCK__kvm_x86_migrate_timers, &__SCT__kvm_x86_migrate_timers, __F); });
({ typeof(&__SCT__kvm_x86_msr_filter_changed) __F = (kvm_x86_ops.msr_filter_changed); __static_call_update(&__SCK__kvm_x86_msr_filter_changed, &__SCT__kvm_x86_msr_filter_changed, __F); });
({ typeof(&__SCT__kvm_x86_complete_emulated_msr) __F = (kvm_x86_ops.complete_emulated_msr); __static_call_update(&__SCK__kvm_x86_complete_emulated_msr, &__SCT__kvm_x86_complete_emulated_msr, __F); });
# 1547 "./arch/x86/include/asm/kvm_host.h" 2
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm *kvm_arch_alloc_vm(void)
{
 return __vmalloc(kvm_x86_ops.vm_size, (((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)) | (( gfp_t)0x400000u)) | (( gfp_t)0x100u));
}


void kvm_arch_free_vm(struct kvm *kvm);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_arch_flush_remote_tlb(struct kvm *kvm)
{
 if (kvm_x86_ops.tlb_remote_flush &&
     !({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_tlb_remote_flush350 = (void *)&__SCK__kvm_x86_tlb_remote_flush;; (&__SCT__kvm_x86_tlb_remote_flush); })(kvm))
  return 0;
 else
  return -524;
}

int kvm_mmu_module_init(void);
void kvm_mmu_module_exit(void);

void kvm_mmu_destroy(struct kvm_vcpu *vcpu);
int kvm_mmu_create(struct kvm_vcpu *vcpu);
void kvm_mmu_init_vm(struct kvm *kvm);
void kvm_mmu_uninit_vm(struct kvm *kvm);

void kvm_mmu_after_set_cpuid(struct kvm_vcpu *vcpu);
void kvm_mmu_reset_context(struct kvm_vcpu *vcpu);
void kvm_mmu_slot_remove_write_access(struct kvm *kvm,
          const struct kvm_memory_slot *memslot,
          int start_level);
void kvm_mmu_zap_collapsible_sptes(struct kvm *kvm,
       const struct kvm_memory_slot *memslot);
void kvm_mmu_slot_leaf_clear_dirty(struct kvm *kvm,
       const struct kvm_memory_slot *memslot);
void kvm_mmu_zap_all(struct kvm *kvm);
void kvm_mmu_invalidate_mmio_sptes(struct kvm *kvm, u64 gen);
unsigned long kvm_mmu_calculate_default_mmu_pages(struct kvm *kvm);
void kvm_mmu_change_mmu_pages(struct kvm *kvm, unsigned long kvm_nr_mmu_pages);

int load_pdptrs(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu, unsigned long cr3);

int emulator_write_phys(struct kvm_vcpu *vcpu, gpa_t gpa,
     const void *val, int bytes);

struct kvm_irq_mask_notifier {
 void (*func)(struct kvm_irq_mask_notifier *kimn, bool masked);
 int irq;
 struct hlist_node link;
};

void kvm_register_irq_mask_notifier(struct kvm *kvm, int irq,
        struct kvm_irq_mask_notifier *kimn);
void kvm_unregister_irq_mask_notifier(struct kvm *kvm, int irq,
          struct kvm_irq_mask_notifier *kimn);
void kvm_fire_mask_notifiers(struct kvm *kvm, unsigned irqchip, unsigned pin,
        bool mask);

extern bool tdp_enabled;

u64 vcpu_tsc_khz(struct kvm_vcpu *vcpu);


extern bool kvm_has_tsc_control;

extern u32 kvm_max_guest_tsc_khz;

extern u8 kvm_tsc_scaling_ratio_frac_bits;

extern u64 kvm_max_tsc_scaling_ratio;

extern u64 kvm_default_tsc_scaling_ratio;

extern bool kvm_has_bus_lock_exit;

extern u64 kvm_mce_cap_supported;
# 1669 "./arch/x86/include/asm/kvm_host.h"
int kvm_emulate_instruction(struct kvm_vcpu *vcpu, int emulation_type);
int kvm_emulate_instruction_from_buffer(struct kvm_vcpu *vcpu,
     void *insn, int insn_len);
void __kvm_prepare_emulation_failure_exit(struct kvm_vcpu *vcpu,
       u64 *data, u8 ndata);
void kvm_prepare_emulation_failure_exit(struct kvm_vcpu *vcpu);

void kvm_enable_efer_bits(u64);
bool kvm_valid_efer(struct kvm_vcpu *vcpu, u64 efer);
int __kvm_get_msr(struct kvm_vcpu *vcpu, u32 index, u64 *data, bool host_initiated);
int kvm_get_msr(struct kvm_vcpu *vcpu, u32 index, u64 *data);
int kvm_set_msr(struct kvm_vcpu *vcpu, u32 index, u64 data);
int kvm_emulate_rdmsr(struct kvm_vcpu *vcpu);
int kvm_emulate_wrmsr(struct kvm_vcpu *vcpu);
int kvm_emulate_as_nop(struct kvm_vcpu *vcpu);
int kvm_emulate_invd(struct kvm_vcpu *vcpu);
int kvm_emulate_mwait(struct kvm_vcpu *vcpu);
int kvm_handle_invalid_op(struct kvm_vcpu *vcpu);
int kvm_emulate_monitor(struct kvm_vcpu *vcpu);

int kvm_fast_pio(struct kvm_vcpu *vcpu, int size, unsigned short port, int in);
int kvm_emulate_cpuid(struct kvm_vcpu *vcpu);
int kvm_emulate_halt(struct kvm_vcpu *vcpu);
int kvm_vcpu_halt(struct kvm_vcpu *vcpu);
int kvm_emulate_ap_reset_hold(struct kvm_vcpu *vcpu);
int kvm_emulate_wbinvd(struct kvm_vcpu *vcpu);

void kvm_get_segment(struct kvm_vcpu *vcpu, struct kvm_segment *var, int seg);
int kvm_load_segment_descriptor(struct kvm_vcpu *vcpu, u16 selector, int seg);
void kvm_vcpu_deliver_sipi_vector(struct kvm_vcpu *vcpu, u8 vector);

int kvm_task_switch(struct kvm_vcpu *vcpu, u16 tss_selector, int idt_index,
      int reason, bool has_error_code, u32 error_code);

void kvm_post_set_cr0(struct kvm_vcpu *vcpu, unsigned long old_cr0, unsigned long cr0);
void kvm_post_set_cr4(struct kvm_vcpu *vcpu, unsigned long old_cr4, unsigned long cr4);
int kvm_set_cr0(struct kvm_vcpu *vcpu, unsigned long cr0);
int kvm_set_cr3(struct kvm_vcpu *vcpu, unsigned long cr3);
int kvm_set_cr4(struct kvm_vcpu *vcpu, unsigned long cr4);
int kvm_set_cr8(struct kvm_vcpu *vcpu, unsigned long cr8);
int kvm_set_dr(struct kvm_vcpu *vcpu, int dr, unsigned long val);
void kvm_get_dr(struct kvm_vcpu *vcpu, int dr, unsigned long *val);
unsigned long kvm_get_cr8(struct kvm_vcpu *vcpu);
void kvm_lmsw(struct kvm_vcpu *vcpu, unsigned long msw);
void kvm_get_cs_db_l_bits(struct kvm_vcpu *vcpu, int *db, int *l);
int kvm_emulate_xsetbv(struct kvm_vcpu *vcpu);

int kvm_get_msr_common(struct kvm_vcpu *vcpu, struct msr_data *msr);
int kvm_set_msr_common(struct kvm_vcpu *vcpu, struct msr_data *msr);

unsigned long kvm_get_rflags(struct kvm_vcpu *vcpu);
void kvm_set_rflags(struct kvm_vcpu *vcpu, unsigned long rflags);
int kvm_emulate_rdpmc(struct kvm_vcpu *vcpu);

void kvm_queue_exception(struct kvm_vcpu *vcpu, unsigned nr);
void kvm_queue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code);
void kvm_queue_exception_p(struct kvm_vcpu *vcpu, unsigned nr, unsigned long payload);
void kvm_requeue_exception(struct kvm_vcpu *vcpu, unsigned nr);
void kvm_requeue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code);
void kvm_inject_page_fault(struct kvm_vcpu *vcpu, struct x86_exception *fault);
bool kvm_inject_emulated_page_fault(struct kvm_vcpu *vcpu,
        struct x86_exception *fault);
bool kvm_require_cpl(struct kvm_vcpu *vcpu, int required_cpl);
bool kvm_require_dr(struct kvm_vcpu *vcpu, int dr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __kvm_irq_line_state(unsigned long *irq_state,
           int irq_source_id, int level)
{

 if (level)
  __set_bit(irq_source_id, irq_state);
 else
  __clear_bit(irq_source_id, irq_state);

 return !!(*irq_state);
}





int kvm_pic_set_irq(struct kvm_pic *pic, int irq, int irq_source_id, int level);
void kvm_pic_clear_all(struct kvm_pic *pic, int irq_source_id);

void kvm_inject_nmi(struct kvm_vcpu *vcpu);

void kvm_update_dr7(struct kvm_vcpu *vcpu);

int kvm_mmu_unprotect_page(struct kvm *kvm, gfn_t gfn);
void __kvm_mmu_free_some_pages(struct kvm_vcpu *vcpu);
void kvm_mmu_free_roots(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu,
   ulong roots_to_free);
void kvm_mmu_free_guest_mode_roots(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu);
gpa_t translate_nested_gpa(struct kvm_vcpu *vcpu, gpa_t gpa, u32 access,
      struct x86_exception *exception);
gpa_t kvm_mmu_gva_to_gpa_read(struct kvm_vcpu *vcpu, gva_t gva,
         struct x86_exception *exception);
gpa_t kvm_mmu_gva_to_gpa_fetch(struct kvm_vcpu *vcpu, gva_t gva,
          struct x86_exception *exception);
gpa_t kvm_mmu_gva_to_gpa_write(struct kvm_vcpu *vcpu, gva_t gva,
          struct x86_exception *exception);
gpa_t kvm_mmu_gva_to_gpa_system(struct kvm_vcpu *vcpu, gva_t gva,
    struct x86_exception *exception);

bool kvm_apicv_activated(struct kvm *kvm);
void kvm_vcpu_update_apicv(struct kvm_vcpu *vcpu);
void kvm_request_apicv_update(struct kvm *kvm, bool activate,
         unsigned long bit);

void __kvm_request_apicv_update(struct kvm *kvm, bool activate,
    unsigned long bit);

int kvm_emulate_hypercall(struct kvm_vcpu *vcpu);

int kvm_mmu_page_fault(struct kvm_vcpu *vcpu, gpa_t cr2_or_gpa, u64 error_code,
         void *insn, int insn_len);
void kvm_mmu_invlpg(struct kvm_vcpu *vcpu, gva_t gva);
void kvm_mmu_invalidate_gva(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu,
       gva_t gva, hpa_t root_hpa);
void kvm_mmu_invpcid_gva(struct kvm_vcpu *vcpu, gva_t gva, unsigned long pcid);
void kvm_mmu_new_pgd(struct kvm_vcpu *vcpu, gpa_t new_pgd);

void kvm_configure_mmu(bool enable_tdp, int tdp_forced_root_level,
         int tdp_max_root_level, int tdp_huge_page_level);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 kvm_read_ldt(void)
{
 u16 ldt;
 asm("sldt %0" : "=g"(ldt));
 return ldt;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_load_ldt(u16 sel)
{
 asm("lldt %0" : : "rm"(sel));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long read_msr(unsigned long msr)
{
 u64 value;

 ((value) = native_read_msr((msr)));
 return value;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_inject_gp(struct kvm_vcpu *vcpu, u32 error_code)
{
 kvm_queue_exception_e(vcpu, 13, error_code);
}
# 1828 "./arch/x86/include/asm/kvm_host.h"
enum {
 TASK_SWITCH_CALL = 0,
 TASK_SWITCH_IRET = 1,
 TASK_SWITCH_JMP = 2,
 TASK_SWITCH_GATE = 3,
};
# 1850 "./arch/x86/include/asm/kvm_host.h"
int kvm_cpu_has_injectable_intr(struct kvm_vcpu *v);
int kvm_cpu_has_interrupt(struct kvm_vcpu *vcpu);
int kvm_cpu_has_extint(struct kvm_vcpu *v);
int kvm_arch_interrupt_allowed(struct kvm_vcpu *vcpu);
int kvm_cpu_get_interrupt(struct kvm_vcpu *v);
void kvm_vcpu_reset(struct kvm_vcpu *vcpu, bool init_event);
void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu);

int kvm_pv_send_ipi(struct kvm *kvm, unsigned long ipi_bitmap_low,
      unsigned long ipi_bitmap_high, u32 min,
      unsigned long icr, int op_64_bit);

int kvm_add_user_return_msr(u32 msr);
int kvm_find_user_return_msr(u32 msr);
int kvm_set_user_return_msr(unsigned index, u64 val, u64 mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_is_supported_user_return_msr(u32 msr)
{
 return kvm_find_user_return_msr(msr) >= 0;
}

u64 kvm_scale_tsc(struct kvm_vcpu *vcpu, u64 tsc, u64 ratio);
u64 kvm_read_l1_tsc(struct kvm_vcpu *vcpu, u64 host_tsc);
u64 kvm_calc_nested_tsc_offset(u64 l1_offset, u64 l2_offset, u64 l2_multiplier);
u64 kvm_calc_nested_tsc_multiplier(u64 l1_multiplier, u64 l2_multiplier);

unsigned long kvm_get_linear_rip(struct kvm_vcpu *vcpu);
bool kvm_is_linear_rip(struct kvm_vcpu *vcpu, unsigned long linear_rip);

void kvm_make_scan_ioapic_request(struct kvm *kvm);
void kvm_make_scan_ioapic_request_mask(struct kvm *kvm,
           unsigned long *vcpu_bitmap);

bool kvm_arch_async_page_not_present(struct kvm_vcpu *vcpu,
         struct kvm_async_pf *work);
void kvm_arch_async_page_present(struct kvm_vcpu *vcpu,
     struct kvm_async_pf *work);
void kvm_arch_async_page_ready(struct kvm_vcpu *vcpu,
          struct kvm_async_pf *work);
void kvm_arch_async_page_present_queued(struct kvm_vcpu *vcpu);
bool kvm_arch_can_dequeue_async_page_present(struct kvm_vcpu *vcpu);
extern bool kvm_find_async_pf_gfn(struct kvm_vcpu *vcpu, gfn_t gfn);

int kvm_skip_emulated_instruction(struct kvm_vcpu *vcpu);
int kvm_complete_insn_gp(struct kvm_vcpu *vcpu, int err);
void __kvm_request_immediate_exit(struct kvm_vcpu *vcpu);

int kvm_is_in_guest(void);

void *__x86_set_memory_region(struct kvm *kvm, int id, gpa_t gpa,
         u32 size);
bool kvm_vcpu_is_reset_bsp(struct kvm_vcpu *vcpu);
bool kvm_vcpu_is_bsp(struct kvm_vcpu *vcpu);

bool kvm_intr_is_single_vcpu(struct kvm *kvm, struct kvm_lapic_irq *irq,
        struct kvm_vcpu **dest_vcpu);

void kvm_set_msi_irq(struct kvm *kvm, struct kvm_kernel_irq_routing_entry *e,
       struct kvm_lapic_irq *irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_irq_is_postable(struct kvm_lapic_irq *irq)
{

 return (irq->delivery_mode == 0x00000 ||
  irq->delivery_mode == 0x00100);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu)
{
 (void)({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_vcpu_blocking351 = (void *)&__SCK__kvm_x86_vcpu_blocking;; (&__SCT__kvm_x86_vcpu_blocking); })(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu)
{
 (void)({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_vcpu_unblocking352 = (void *)&__SCK__kvm_x86_vcpu_unblocking;; (&__SCT__kvm_x86_vcpu_unblocking); })(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_arch_vcpu_block_finish(struct kvm_vcpu *vcpu) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_cpu_get_apicid(int mps_cpu)
{

 return default_cpu_present_to_apicid(mps_cpu);




}







int kvm_cpu_dirty_log_size(void);

int memslot_rmap_alloc(struct kvm_memory_slot *slot, unsigned long npages);
# 40 "./include/linux/kvm_host.h" 2
# 1 "./include/linux/kvm_dirty_ring.h" 1
# 21 "./include/linux/kvm_dirty_ring.h"
struct kvm_dirty_ring {
 u32 dirty_index;
 u32 reset_index;
 u32 size;
 u32 soft_limit;
 struct kvm_dirty_gfn *dirty_gfns;
 int index;
};
# 79 "./include/linux/kvm_dirty_ring.h"
u32 kvm_dirty_ring_get_rsvd_entries(void);
int kvm_dirty_ring_alloc(struct kvm_dirty_ring *ring, int index, u32 size);
struct kvm_dirty_ring *kvm_dirty_ring_get(struct kvm *kvm);





int kvm_dirty_ring_reset(struct kvm *kvm, struct kvm_dirty_ring *ring);





void kvm_dirty_ring_push(struct kvm_dirty_ring *ring, u32 slot, u64 offset);


struct page *kvm_dirty_ring_get_page(struct kvm_dirty_ring *ring, u32 offset);

void kvm_dirty_ring_free(struct kvm_dirty_ring *ring);
bool kvm_dirty_ring_soft_full(struct kvm_dirty_ring *ring);
# 41 "./include/linux/kvm_host.h" 2
# 98 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_error_pfn(kvm_pfn_t pfn)
{
 return !!(pfn & (0x7ffULL << 52));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_error_noslot_pfn(kvm_pfn_t pfn)
{
 return !!(pfn & (0xfffULL << 52));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_noslot_pfn(kvm_pfn_t pfn)
{
 return pfn == (0x1ULL << 63);
}
# 128 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_is_error_hva(unsigned long addr)
{
 return addr >= ((unsigned long)page_offset_base);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_error_page(struct page *page)
{
 return IS_ERR(page);
}
# 162 "./include/linux/kvm_host.h"
bool kvm_make_vcpus_request_mask(struct kvm *kvm, unsigned int req,
     unsigned long *vcpu_bitmap);
bool kvm_make_all_cpus_request(struct kvm *kvm, unsigned int req);
bool kvm_make_all_cpus_request_except(struct kvm *kvm, unsigned int req,
          struct kvm_vcpu *except);
bool kvm_make_cpus_request_mask(struct kvm *kvm, unsigned int req,
    unsigned long *vcpu_bitmap);




extern struct mutex kvm_lock;
extern struct list_head vm_list;

struct kvm_io_range {
 gpa_t addr;
 int len;
 struct kvm_io_device *dev;
};



struct kvm_io_bus {
 int dev_count;
 int ioeventfd_count;
 struct kvm_io_range range[];
};

enum kvm_bus {
 KVM_MMIO_BUS,
 KVM_PIO_BUS,
 KVM_VIRTIO_CCW_NOTIFY_BUS,
 KVM_FAST_MMIO_BUS,
 KVM_NR_BUSES
};

int kvm_io_bus_write(struct kvm_vcpu *vcpu, enum kvm_bus bus_idx, gpa_t addr,
       int len, const void *val);
int kvm_io_bus_write_cookie(struct kvm_vcpu *vcpu, enum kvm_bus bus_idx,
       gpa_t addr, int len, const void *val, long cookie);
int kvm_io_bus_read(struct kvm_vcpu *vcpu, enum kvm_bus bus_idx, gpa_t addr,
      int len, void *val);
int kvm_io_bus_register_dev(struct kvm *kvm, enum kvm_bus bus_idx, gpa_t addr,
       int len, struct kvm_io_device *dev);
int kvm_io_bus_unregister_dev(struct kvm *kvm, enum kvm_bus bus_idx,
         struct kvm_io_device *dev);
struct kvm_io_device *kvm_io_bus_get_dev(struct kvm *kvm, enum kvm_bus bus_idx,
      gpa_t addr);


struct kvm_async_pf {
 struct work_struct work;
 struct list_head link;
 struct list_head queue;
 struct kvm_vcpu *vcpu;
 struct mm_struct *mm;
 gpa_t cr2_or_gpa;
 unsigned long addr;
 struct kvm_arch_async_pf arch;
 bool wakeup_all;
 bool notpresent_injected;
};

void kvm_clear_async_pf_completion_queue(struct kvm_vcpu *vcpu);
void kvm_check_async_pf_completion(struct kvm_vcpu *vcpu);
bool kvm_setup_async_pf(struct kvm_vcpu *vcpu, gpa_t cr2_or_gpa,
   unsigned long hva, struct kvm_arch_async_pf *arch);
int kvm_async_pf_wakeup_all(struct kvm_vcpu *vcpu);



struct kvm_gfn_range {
 struct kvm_memory_slot *slot;
 gfn_t start;
 gfn_t end;
 pte_t pte;
 bool may_block;
};
bool kvm_unmap_gfn_range(struct kvm *kvm, struct kvm_gfn_range *range);
bool kvm_age_gfn(struct kvm *kvm, struct kvm_gfn_range *range);
bool kvm_test_age_gfn(struct kvm *kvm, struct kvm_gfn_range *range);
bool kvm_set_spte_gfn(struct kvm *kvm, struct kvm_gfn_range *range);


enum {
 OUTSIDE_GUEST_MODE,
 IN_GUEST_MODE,
 EXITING_GUEST_MODE,
 READING_SHADOW_PAGE_TABLES,
};



struct kvm_host_map {
# 264 "./include/linux/kvm_host.h"
 struct page *page;
 void *hva;
 kvm_pfn_t pfn;
 kvm_pfn_t gfn;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_mapped(struct kvm_host_map *map)
{
 return !!map->hva;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_can_poll(ktime_t cur, ktime_t stop)
{
 return single_task_running() && !need_resched() && ktime_before(cur, stop);
}





struct kvm_mmio_fragment {
 gpa_t gpa;
 void *data;
 unsigned len;
};

struct kvm_vcpu {
 struct kvm *kvm;

 struct preempt_notifier preempt_notifier;

 int cpu;
 int vcpu_id;
 int vcpu_idx;
 int srcu_idx;
 int mode;
 u64 requests;
 unsigned long guest_debug;

 int pre_pcpu;
 struct list_head blocked_vcpu_list;

 struct mutex mutex;
 struct kvm_run *run;

 struct rcuwait wait;
 struct pid *pid;
 int sigset_active;
 sigset_t sigset;
 unsigned int halt_poll_ns;
 bool valid_wakeup;


 int mmio_needed;
 int mmio_read_completed;
 int mmio_is_write;
 int mmio_cur_fragment;
 int mmio_nr_fragments;
 struct kvm_mmio_fragment mmio_fragments[2];



 struct {
  u32 queued;
  struct list_head queue;
  struct list_head done;
  spinlock_t lock;
 } async_pf;
# 345 "./include/linux/kvm_host.h"
 struct {
  bool in_spin_loop;
  bool dy_eligible;
 } spin_loop;

 bool preempted;
 bool ready;
 struct kvm_vcpu_arch arch;
 struct kvm_vcpu_stat stat;
 char stats_id[48];
 struct kvm_dirty_ring dirty_ring;






 int last_used_slot;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void guest_enter_irqoff(void)
{




 ({ asm volatile("353" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "353" "b - .\n\t" ".popsection\n\t"); });
 vtime_account_guest_enter();
 ({ asm volatile("354" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "354" "b - .\n\t" ".popsection\n\t"); });
# 384 "./include/linux/kvm_host.h"
 if (!context_tracking_guest_enter()) {
  ({ asm volatile("355" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "355" "b - .\n\t" ".popsection\n\t"); });
  rcu_virt_note_context_switch(debug_smp_processor_id());
  ({ asm volatile("356" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "356" "b - .\n\t" ".popsection\n\t"); });
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void guest_exit_irqoff(void)
{
 context_tracking_guest_exit();

 ({ asm volatile("357" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "357" "b - .\n\t" ".popsection\n\t"); });

 vtime_account_guest_exit();
 ({ asm volatile("358" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "358" "b - .\n\t" ".popsection\n\t"); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void guest_exit(void)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 guest_exit_irqoff();
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_vcpu_exiting_guest_mode(struct kvm_vcpu *vcpu)
{





 __asm__ __volatile__("": : :"memory");
 return ({ typeof(&vcpu->mode) __ai_ptr = (&vcpu->mode); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*((__ai_ptr))) __ret; __typeof__(*((__ai_ptr))) __old = ((IN_GUEST_MODE)); __typeof__(*((__ai_ptr))) __new = ((EXITING_GUEST_MODE)); switch ((sizeof(*(__ai_ptr)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((__ai_ptr)); asm volatile("" "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((__ai_ptr)); asm volatile("" "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((__ai_ptr)); asm volatile("" "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((__ai_ptr)); asm volatile("" "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; }); });
}







struct kvm_memory_slot {
 gfn_t base_gfn;
 unsigned long npages;
 unsigned long *dirty_bitmap;
 struct kvm_arch_memory_slot arch;
 unsigned long userspace_addr;
 u32 flags;
 short id;
 u16 as_id;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_slot_dirty_track_enabled(struct kvm_memory_slot *slot)
{
 return slot->flags & (1UL << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kvm_dirty_bitmap_bytes(struct kvm_memory_slot *memslot)
{
 return ((((memslot->npages)) + ((typeof((memslot->npages)))((64)) - 1)) & ~((typeof((memslot->npages)))((64)) - 1)) / 8;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *kvm_second_dirty_bitmap(struct kvm_memory_slot *memslot)
{
 unsigned long len = kvm_dirty_bitmap_bytes(memslot);

 return memslot->dirty_bitmap + len / sizeof(*memslot->dirty_bitmap);
}





struct kvm_s390_adapter_int {
 u64 ind_addr;
 u64 summary_addr;
 u64 ind_offset;
 u32 summary_offset;
 u32 adapter_id;
};

struct kvm_hv_sint {
 u32 vcpu;
 u32 sint;
};

struct kvm_kernel_irq_routing_entry {
 u32 gsi;
 u32 type;
 int (*set)(struct kvm_kernel_irq_routing_entry *e,
     struct kvm *kvm, int irq_source_id, int level,
     bool line_status);
 union {
  struct {
   unsigned irqchip;
   unsigned pin;
  } irqchip;
  struct {
   u32 address_lo;
   u32 address_hi;
   u32 data;
   u32 flags;
   u32 devid;
  } msi;
  struct kvm_s390_adapter_int adapter;
  struct kvm_hv_sint hv_sint;
 };
 struct hlist_node link;
};


struct kvm_irq_routing_table {
 int chip[3][24];
 u32 nr_rt_entries;




 struct hlist_head map[];
};
# 527 "./include/linux/kvm_host.h"
struct kvm_memslots {
 u64 generation;

 short id_to_index[((short)(((unsigned short)~0U) >> 1))];
 atomic_t last_used_slot;
 int used_slots;
 struct kvm_memory_slot memslots[];
};

struct kvm {

 rwlock_t mmu_lock;




 struct mutex slots_lock;
# 552 "./include/linux/kvm_host.h"
 struct mutex slots_arch_lock;
 struct mm_struct *mm;
 struct kvm_memslots *memslots[2];
 struct kvm_vcpu *vcpus[1024];


 spinlock_t mn_invalidate_lock;
 unsigned long mn_active_invalidate_count;
 struct rcuwait mn_memslots_update_rcuwait;







 atomic_t online_vcpus;
 int created_vcpus;
 int last_boosted_vcpu;
 struct list_head vm_list;
 struct mutex lock;
 struct kvm_io_bus *buses[KVM_NR_BUSES];

 struct {
  spinlock_t lock;
  struct list_head items;
  struct list_head resampler_list;
  struct mutex resampler_lock;
 } irqfds;
 struct list_head ioeventfds;

 struct kvm_vm_stat stat;
 struct kvm_arch arch;
 refcount_t users_count;

 struct kvm_coalesced_mmio_ring *coalesced_mmio_ring;
 spinlock_t ring_lock;
 struct list_head coalesced_zones;


 struct mutex irq_lock;




 struct kvm_irq_routing_table *irq_routing;


 struct hlist_head irq_ack_notifier_list;



 struct mmu_notifier mmu_notifier;
 unsigned long mmu_notifier_seq;
 long mmu_notifier_count;
 unsigned long mmu_notifier_range_start;
 unsigned long mmu_notifier_range_end;

 struct list_head devices;
 u64 manual_dirty_log_protect;
 struct dentry *debugfs_dentry;
 struct kvm_stat_data **debugfs_stat_data;
 struct srcu_struct srcu;
 struct srcu_struct irq_srcu;
 pid_t userspace_pid;
 unsigned int max_halt_poll_ns;
 u32 dirty_ring_size;
 bool vm_bugged;
 bool vm_dead;




 char stats_id[48];
};
# 654 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_vm_dead(struct kvm *kvm)
{
 kvm->vm_dead = true;
 kvm_make_all_cpus_request(kvm, (4 | ((((1UL))) << (9)) | ((((1UL))) << (8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_vm_bugged(struct kvm *kvm)
{
 kvm->vm_bugged = true;
 kvm_vm_dead(kvm);
}
# 685 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_dirty_log_manual_protect_and_init_set(struct kvm *kvm)
{
 return !!(kvm->manual_dirty_log_protect & (1 << 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_io_bus *kvm_get_bus(struct kvm *kvm, enum kvm_bus idx)
{
 return ({ typeof(*(kvm->buses[idx])) *________p1 = (typeof(*(kvm->buses[idx])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_359(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((kvm->buses[idx])) == sizeof(char) || sizeof((kvm->buses[idx])) == sizeof(short) || sizeof((kvm->buses[idx])) == sizeof(int) || sizeof((kvm->buses[idx])) == sizeof(long)) || sizeof((kvm->buses[idx])) == sizeof(long long))) __compiletime_assert_359(); } while (0); (*(const volatile typeof( _Generic(((kvm->buses[idx])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((kvm->buses[idx])))) *)&((kvm->buses[idx]))); }); do { } while (0 && (!((lock_is_held(&(&kvm->slots_lock)->dep_map) || !refcount_read(&kvm->users_count)) || srcu_read_lock_held(&kvm->srcu)))); ; ((typeof(*(kvm->buses[idx])) *)(________p1)); });


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vcpu *kvm_get_vcpu(struct kvm *kvm, int i)
{
 int num_vcpus = atomic_read(&kvm->online_vcpus);
 i = ({ typeof(i) _i = (i); typeof(num_vcpus) _s = (num_vcpus); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_360(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_360(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_361(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_361(); } while (0); (typeof(_i)) (_i & _mask); });


 __asm__ __volatile__("": : :"memory");
 return kvm->vcpus[i];
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vcpu *kvm_get_vcpu_by_id(struct kvm *kvm, int id)
{
 struct kvm_vcpu *vcpu = ((void *)0);
 int i;

 if (id < 0)
  return ((void *)0);
 if (id < 1024)
  vcpu = kvm_get_vcpu(kvm, id);
 if (vcpu && vcpu->vcpu_id == id)
  return vcpu;
 for (i = 0; i < atomic_read(&kvm->online_vcpus) && (vcpu = kvm_get_vcpu(kvm, i)) != ((void *)0); i++)
  if (vcpu->vcpu_id == id)
   return vcpu;
 return ((void *)0);
}







void kvm_vcpu_destroy(struct kvm_vcpu *vcpu);

void vcpu_load(struct kvm_vcpu *vcpu);
void vcpu_put(struct kvm_vcpu *vcpu);


void kvm_arch_post_irq_ack_notifier_list_update(struct kvm *kvm);
void kvm_arch_post_irq_routing_update(struct kvm *kvm);
# 754 "./include/linux/kvm_host.h"
int kvm_irqfd_init(void);
void kvm_irqfd_exit(void);
# 766 "./include/linux/kvm_host.h"
int kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
    struct module *module);
void kvm_exit(void);

void kvm_get_kvm(struct kvm *kvm);
bool kvm_get_kvm_safe(struct kvm *kvm);
void kvm_put_kvm(struct kvm *kvm);
bool file_is_kvm(struct file *file);
void kvm_put_kvm_no_destroy(struct kvm *kvm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_memslots *__kvm_memslots(struct kvm *kvm, int as_id)
{
 as_id = ({ typeof(as_id) _i = (as_id); typeof(2) _s = (2); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_362(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_362(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_363(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_363(); } while (0); (typeof(_i)) (_i & _mask); });
 return ({ typeof(*(kvm->memslots[as_id])) *________p1 = (typeof(*(kvm->memslots[as_id])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_364(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((kvm->memslots[as_id])) == sizeof(char) || sizeof((kvm->memslots[as_id])) == sizeof(short) || sizeof((kvm->memslots[as_id])) == sizeof(int) || sizeof((kvm->memslots[as_id])) == sizeof(long)) || sizeof((kvm->memslots[as_id])) == sizeof(long long))) __compiletime_assert_364(); } while (0); (*(const volatile typeof( _Generic(((kvm->memslots[as_id])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((kvm->memslots[as_id])))) *)&((kvm->memslots[as_id]))); }); do { } while (0 && (!((lock_is_held(&(&kvm->slots_lock)->dep_map) || !refcount_read(&kvm->users_count)) || srcu_read_lock_held(&kvm->srcu)))); ; ((typeof(*(kvm->memslots[as_id])) *)(________p1)); });


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_memslots *kvm_memslots(struct kvm *kvm)
{
 return __kvm_memslots(kvm, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_memslots *kvm_vcpu_memslots(struct kvm_vcpu *vcpu)
{
 int as_id = ((vcpu)->arch.hflags & (1 << 6) ? 1 : 0);

 return __kvm_memslots(vcpu->kvm, as_id);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct kvm_memory_slot *id_to_memslot(struct kvm_memslots *slots, int id)
{
 int index = slots->id_to_index[id];
 struct kvm_memory_slot *slot;

 if (index < 0)
  return ((void *)0);

 slot = &slots->memslots[index];

 ({ int __ret_warn_on = !!(slot->id != id); __builtin_expect(!!(__ret_warn_on), 0); });
 return slot;
}
# 822 "./include/linux/kvm_host.h"
enum kvm_mr_change {
 KVM_MR_CREATE,
 KVM_MR_DELETE,
 KVM_MR_MOVE,
 KVM_MR_FLAGS_ONLY,
};

int kvm_set_memory_region(struct kvm *kvm,
     const struct kvm_userspace_memory_region *mem);
int __kvm_set_memory_region(struct kvm *kvm,
       const struct kvm_userspace_memory_region *mem);
void kvm_arch_free_memslot(struct kvm *kvm, struct kvm_memory_slot *slot);
void kvm_arch_memslots_updated(struct kvm *kvm, u64 gen);
int kvm_arch_prepare_memory_region(struct kvm *kvm,
    struct kvm_memory_slot *memslot,
    const struct kvm_userspace_memory_region *mem,
    enum kvm_mr_change change);
void kvm_arch_commit_memory_region(struct kvm *kvm,
    const struct kvm_userspace_memory_region *mem,
    struct kvm_memory_slot *old,
    const struct kvm_memory_slot *new,
    enum kvm_mr_change change);

void kvm_arch_flush_shadow_all(struct kvm *kvm);

void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
       struct kvm_memory_slot *slot);

int gfn_to_page_many_atomic(struct kvm_memory_slot *slot, gfn_t gfn,
       struct page **pages, int nr_pages);

struct page *gfn_to_page(struct kvm *kvm, gfn_t gfn);
unsigned long gfn_to_hva(struct kvm *kvm, gfn_t gfn);
unsigned long gfn_to_hva_prot(struct kvm *kvm, gfn_t gfn, bool *writable);
unsigned long gfn_to_hva_memslot(struct kvm_memory_slot *slot, gfn_t gfn);
unsigned long gfn_to_hva_memslot_prot(struct kvm_memory_slot *slot, gfn_t gfn,
          bool *writable);
void kvm_release_page_clean(struct page *page);
void kvm_release_page_dirty(struct page *page);
void kvm_set_page_accessed(struct page *page);

kvm_pfn_t gfn_to_pfn(struct kvm *kvm, gfn_t gfn);
kvm_pfn_t gfn_to_pfn_prot(struct kvm *kvm, gfn_t gfn, bool write_fault,
        bool *writable);
kvm_pfn_t gfn_to_pfn_memslot(struct kvm_memory_slot *slot, gfn_t gfn);
kvm_pfn_t gfn_to_pfn_memslot_atomic(struct kvm_memory_slot *slot, gfn_t gfn);
kvm_pfn_t __gfn_to_pfn_memslot(struct kvm_memory_slot *slot, gfn_t gfn,
          bool atomic, bool *async, bool write_fault,
          bool *writable, hva_t *hva);

void kvm_release_pfn_clean(kvm_pfn_t pfn);
void kvm_release_pfn_dirty(kvm_pfn_t pfn);
void kvm_set_pfn_dirty(kvm_pfn_t pfn);
void kvm_set_pfn_accessed(kvm_pfn_t pfn);

void kvm_release_pfn(kvm_pfn_t pfn, bool dirty, struct gfn_to_pfn_cache *cache);
int kvm_read_guest_page(struct kvm *kvm, gfn_t gfn, void *data, int offset,
   int len);
int kvm_read_guest(struct kvm *kvm, gpa_t gpa, void *data, unsigned long len);
int kvm_read_guest_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
      void *data, unsigned long len);
int kvm_read_guest_offset_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
     void *data, unsigned int offset,
     unsigned long len);
int kvm_write_guest_page(struct kvm *kvm, gfn_t gfn, const void *data,
    int offset, int len);
int kvm_write_guest(struct kvm *kvm, gpa_t gpa, const void *data,
      unsigned long len);
int kvm_write_guest_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
      void *data, unsigned long len);
int kvm_write_guest_offset_cached(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
      void *data, unsigned int offset,
      unsigned long len);
int kvm_gfn_to_hva_cache_init(struct kvm *kvm, struct gfn_to_hva_cache *ghc,
         gpa_t gpa, unsigned long len);
# 940 "./include/linux/kvm_host.h"
int kvm_clear_guest(struct kvm *kvm, gpa_t gpa, unsigned long len);
struct kvm_memory_slot *gfn_to_memslot(struct kvm *kvm, gfn_t gfn);
bool kvm_is_visible_gfn(struct kvm *kvm, gfn_t gfn);
bool kvm_vcpu_is_visible_gfn(struct kvm_vcpu *vcpu, gfn_t gfn);
unsigned long kvm_host_page_size(struct kvm_vcpu *vcpu, gfn_t gfn);
void mark_page_dirty_in_slot(struct kvm *kvm, struct kvm_memory_slot *memslot, gfn_t gfn);
void mark_page_dirty(struct kvm *kvm, gfn_t gfn);

struct kvm_memslots *kvm_vcpu_memslots(struct kvm_vcpu *vcpu);
struct kvm_memory_slot *kvm_vcpu_gfn_to_memslot(struct kvm_vcpu *vcpu, gfn_t gfn);
kvm_pfn_t kvm_vcpu_gfn_to_pfn_atomic(struct kvm_vcpu *vcpu, gfn_t gfn);
kvm_pfn_t kvm_vcpu_gfn_to_pfn(struct kvm_vcpu *vcpu, gfn_t gfn);
int kvm_vcpu_map(struct kvm_vcpu *vcpu, gpa_t gpa, struct kvm_host_map *map);
int kvm_map_gfn(struct kvm_vcpu *vcpu, gfn_t gfn, struct kvm_host_map *map,
  struct gfn_to_pfn_cache *cache, bool atomic);
struct page *kvm_vcpu_gfn_to_page(struct kvm_vcpu *vcpu, gfn_t gfn);
void kvm_vcpu_unmap(struct kvm_vcpu *vcpu, struct kvm_host_map *map, bool dirty);
int kvm_unmap_gfn(struct kvm_vcpu *vcpu, struct kvm_host_map *map,
    struct gfn_to_pfn_cache *cache, bool dirty, bool atomic);
unsigned long kvm_vcpu_gfn_to_hva(struct kvm_vcpu *vcpu, gfn_t gfn);
unsigned long kvm_vcpu_gfn_to_hva_prot(struct kvm_vcpu *vcpu, gfn_t gfn, bool *writable);
int kvm_vcpu_read_guest_page(struct kvm_vcpu *vcpu, gfn_t gfn, void *data, int offset,
        int len);
int kvm_vcpu_read_guest_atomic(struct kvm_vcpu *vcpu, gpa_t gpa, void *data,
          unsigned long len);
int kvm_vcpu_read_guest(struct kvm_vcpu *vcpu, gpa_t gpa, void *data,
   unsigned long len);
int kvm_vcpu_write_guest_page(struct kvm_vcpu *vcpu, gfn_t gfn, const void *data,
         int offset, int len);
int kvm_vcpu_write_guest(struct kvm_vcpu *vcpu, gpa_t gpa, const void *data,
    unsigned long len);
void kvm_vcpu_mark_page_dirty(struct kvm_vcpu *vcpu, gfn_t gfn);

void kvm_sigset_activate(struct kvm_vcpu *vcpu);
void kvm_sigset_deactivate(struct kvm_vcpu *vcpu);

void kvm_vcpu_block(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu);
bool kvm_vcpu_wake_up(struct kvm_vcpu *vcpu);
void kvm_vcpu_kick(struct kvm_vcpu *vcpu);
int kvm_vcpu_yield_to(struct kvm_vcpu *target);
void kvm_vcpu_on_spin(struct kvm_vcpu *vcpu, bool usermode_vcpu_not_eligible);

void kvm_flush_remote_tlbs(struct kvm *kvm);
void kvm_reload_remote_mmus(struct kvm *kvm);


int kvm_mmu_topup_memory_cache(struct kvm_mmu_memory_cache *mc, int min);
int kvm_mmu_memory_cache_nr_free_objects(struct kvm_mmu_memory_cache *mc);
void kvm_mmu_free_memory_cache(struct kvm_mmu_memory_cache *mc);
void *kvm_mmu_memory_cache_alloc(struct kvm_mmu_memory_cache *mc);


void kvm_inc_notifier_count(struct kvm *kvm, unsigned long start,
       unsigned long end);
void kvm_dec_notifier_count(struct kvm *kvm, unsigned long start,
       unsigned long end);

long kvm_arch_dev_ioctl(struct file *filp,
   unsigned int ioctl, unsigned long arg);
long kvm_arch_vcpu_ioctl(struct file *filp,
    unsigned int ioctl, unsigned long arg);
vm_fault_t kvm_arch_vcpu_fault(struct kvm_vcpu *vcpu, struct vm_fault *vmf);

int kvm_vm_ioctl_check_extension(struct kvm *kvm, long ext);

void kvm_arch_mmu_enable_log_dirty_pt_masked(struct kvm *kvm,
     struct kvm_memory_slot *slot,
     gfn_t gfn_offset,
     unsigned long mask);
void kvm_arch_sync_dirty_log(struct kvm *kvm, struct kvm_memory_slot *memslot);


void kvm_arch_flush_remote_tlbs_memslot(struct kvm *kvm,
     const struct kvm_memory_slot *memslot);






int kvm_vm_ioctl_irq_line(struct kvm *kvm, struct kvm_irq_level *irq_level,
   bool line_status);
int kvm_vm_ioctl_enable_cap(struct kvm *kvm,
       struct kvm_enable_cap *cap);
long kvm_arch_vm_ioctl(struct file *filp,
         unsigned int ioctl, unsigned long arg);

int kvm_arch_vcpu_ioctl_get_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu);
int kvm_arch_vcpu_ioctl_set_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu);

int kvm_arch_vcpu_ioctl_translate(struct kvm_vcpu *vcpu,
        struct kvm_translation *tr);

int kvm_arch_vcpu_ioctl_get_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs);
int kvm_arch_vcpu_ioctl_set_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs);
int kvm_arch_vcpu_ioctl_get_sregs(struct kvm_vcpu *vcpu,
      struct kvm_sregs *sregs);
int kvm_arch_vcpu_ioctl_set_sregs(struct kvm_vcpu *vcpu,
      struct kvm_sregs *sregs);
int kvm_arch_vcpu_ioctl_get_mpstate(struct kvm_vcpu *vcpu,
        struct kvm_mp_state *mp_state);
int kvm_arch_vcpu_ioctl_set_mpstate(struct kvm_vcpu *vcpu,
        struct kvm_mp_state *mp_state);
int kvm_arch_vcpu_ioctl_set_guest_debug(struct kvm_vcpu *vcpu,
     struct kvm_guest_debug *dbg);
int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu);

int kvm_arch_init(void *opaque);
void kvm_arch_exit(void);

void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu);

void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu);
void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu);
int kvm_arch_vcpu_precreate(struct kvm *kvm, unsigned int id);
int kvm_arch_vcpu_create(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_postcreate(struct kvm_vcpu *vcpu);
void kvm_arch_vcpu_destroy(struct kvm_vcpu *vcpu);






void kvm_arch_create_vcpu_debugfs(struct kvm_vcpu *vcpu, struct dentry *debugfs_dentry);


int kvm_arch_hardware_enable(void);
void kvm_arch_hardware_disable(void);
int kvm_arch_hardware_setup(void *opaque);
void kvm_arch_hardware_unsetup(void);
int kvm_arch_check_processor_compat(void *opaque);
int kvm_arch_vcpu_runnable(struct kvm_vcpu *vcpu);
bool kvm_arch_vcpu_in_kernel(struct kvm_vcpu *vcpu);
int kvm_arch_vcpu_should_kick(struct kvm_vcpu *vcpu);
bool kvm_arch_dy_runnable(struct kvm_vcpu *vcpu);
bool kvm_arch_dy_has_pending_interrupt(struct kvm_vcpu *vcpu);
int kvm_arch_post_init_vm(struct kvm *kvm);
void kvm_arch_pre_destroy_vm(struct kvm *kvm);
int kvm_arch_create_vm_debugfs(struct kvm *kvm);
# 1094 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __kvm_arch_free_vm(struct kvm *kvm)
{
 kvfree(kvm);
}
# 1114 "./include/linux/kvm_host.h"
void kvm_arch_register_noncoherent_dma(struct kvm *kvm);
void kvm_arch_unregister_noncoherent_dma(struct kvm *kvm);
bool kvm_arch_has_noncoherent_dma(struct kvm *kvm);
# 1132 "./include/linux/kvm_host.h"
void kvm_arch_start_assignment(struct kvm *kvm);
void kvm_arch_end_assignment(struct kvm *kvm);
bool kvm_arch_has_assigned_device(struct kvm *kvm);
# 1150 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct rcuwait *kvm_arch_vcpu_get_wait(struct kvm_vcpu *vcpu)
{



 return &vcpu->wait;

}
# 1167 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_arch_intc_initialized(struct kvm *kvm)
{
 return true;
}


int kvm_arch_init_vm(struct kvm *kvm, unsigned long type);
void kvm_arch_destroy_vm(struct kvm *kvm);
void kvm_arch_sync_events(struct kvm *kvm);

int kvm_cpu_has_pending_timer(struct kvm_vcpu *vcpu);

bool kvm_is_reserved_pfn(kvm_pfn_t pfn);
bool kvm_is_zone_device_pfn(kvm_pfn_t pfn);
bool kvm_is_transparent_hugepage(kvm_pfn_t pfn);

struct kvm_irq_ack_notifier {
 struct hlist_node link;
 unsigned gsi;
 void (*irq_acked)(struct kvm_irq_ack_notifier *kian);
};

int kvm_irq_map_gsi(struct kvm *kvm,
      struct kvm_kernel_irq_routing_entry *entries, int gsi);
int kvm_irq_map_chip_pin(struct kvm *kvm, unsigned irqchip, unsigned pin);

int kvm_set_irq(struct kvm *kvm, int irq_source_id, u32 irq, int level,
  bool line_status);
int kvm_set_msi(struct kvm_kernel_irq_routing_entry *irq_entry, struct kvm *kvm,
  int irq_source_id, int level, bool line_status);
int kvm_arch_set_irq_inatomic(struct kvm_kernel_irq_routing_entry *e,
          struct kvm *kvm, int irq_source_id,
          int level, bool line_status);
bool kvm_irq_has_notifier(struct kvm *kvm, unsigned irqchip, unsigned pin);
void kvm_notify_acked_gsi(struct kvm *kvm, int gsi);
void kvm_notify_acked_irq(struct kvm *kvm, unsigned irqchip, unsigned pin);
void kvm_register_irq_ack_notifier(struct kvm *kvm,
       struct kvm_irq_ack_notifier *kian);
void kvm_unregister_irq_ack_notifier(struct kvm *kvm,
       struct kvm_irq_ack_notifier *kian);
int kvm_request_irq_source_id(struct kvm *kvm);
void kvm_free_irq_source_id(struct kvm *kvm, int irq_source_id);
bool kvm_arch_irqfd_allowed(struct kvm *kvm, struct kvm_irqfd *args);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_memory_slot *
try_get_memslot(struct kvm_memslots *slots, int slot_index, gfn_t gfn)
{
 struct kvm_memory_slot *slot;

 if (slot_index < 0 || slot_index >= slots->used_slots)
  return ((void *)0);






 slot_index = ({ typeof(slot_index) _i = (slot_index); typeof(slots->used_slots) _s = (slots->used_slots); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_365(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_365(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_366(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_366(); } while (0); (typeof(_i)) (_i & _mask); });
 slot = &slots->memslots[slot_index];

 if (gfn >= slot->base_gfn && gfn < slot->base_gfn + slot->npages)
  return slot;
 else
  return ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_memory_slot *
search_memslots(struct kvm_memslots *slots, gfn_t gfn, int *index)
{
 int start = 0, end = slots->used_slots;
 struct kvm_memory_slot *memslots = slots->memslots;
 struct kvm_memory_slot *slot;

 if (__builtin_expect(!!(!slots->used_slots), 0))
  return ((void *)0);

 while (start < end) {
  int slot = start + (end - start) / 2;

  if (gfn >= memslots[slot].base_gfn)
   end = slot;
  else
   start = slot + 1;
 }

 slot = try_get_memslot(slots, start, gfn);
 if (slot) {
  *index = start;
  return slot;
 }

 return ((void *)0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_memory_slot *
__gfn_to_memslot(struct kvm_memslots *slots, gfn_t gfn)
{
 struct kvm_memory_slot *slot;
 int slot_index = atomic_read(&slots->last_used_slot);

 slot = try_get_memslot(slots, slot_index, gfn);
 if (slot)
  return slot;

 slot = search_memslots(slots, gfn, &slot_index);
 if (slot) {
  atomic_set(&slots->last_used_slot, slot_index);
  return slot;
 }

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
__gfn_to_hva_memslot(const struct kvm_memory_slot *slot, gfn_t gfn)
{






 unsigned long offset = gfn - slot->base_gfn;
 offset = ({ typeof(offset) _i = (offset); typeof(slot->npages) _s = (slot->npages); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_367(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_367(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_368(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_368(); } while (0); (typeof(_i)) (_i & _mask); });
 return slot->userspace_addr + offset * ((1UL) << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int memslot_id(struct kvm *kvm, gfn_t gfn)
{
 return gfn_to_memslot(kvm, gfn)->id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gfn_t
hva_to_gfn_memslot(unsigned long hva, struct kvm_memory_slot *slot)
{
 gfn_t gfn_offset = (hva - slot->userspace_addr) >> 12;

 return slot->base_gfn + gfn_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gpa_t gfn_to_gpa(gfn_t gfn)
{
 return (gpa_t)gfn << 12;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gfn_t gpa_to_gfn(gpa_t gpa)
{
 return (gfn_t)(gpa >> 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) hpa_t pfn_to_hpa(kvm_pfn_t pfn)
{
 return (hpa_t)pfn << 12;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *kvm_vcpu_gpa_to_page(struct kvm_vcpu *vcpu,
      gpa_t gpa)
{
 return kvm_vcpu_gfn_to_page(vcpu, gpa_to_gfn(gpa));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_is_error_gpa(struct kvm *kvm, gpa_t gpa)
{
 unsigned long hva = gfn_to_hva(kvm, gpa_to_gfn(gpa));

 return kvm_is_error_hva(hva);
}

enum kvm_stat_kind {
 KVM_STAT_VM,
 KVM_STAT_VCPU,
};

struct kvm_stat_data {
 struct kvm *kvm;
 const struct _kvm_stats_desc *desc;
 enum kvm_stat_kind kind;
};

struct _kvm_stats_desc {
 struct kvm_stats_desc desc;
 char name[48];
};
# 1472 "./include/linux/kvm_host.h"
extern struct dentry *kvm_debugfs_dir;

ssize_t kvm_stats_read(char *id, const struct kvm_stats_header *header,
         const struct _kvm_stats_desc *desc,
         void *stats, size_t size_stats,
         char *user_buffer, size_t size, loff_t *offset);
# 1488 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_stats_linear_hist_update(u64 *data, size_t size,
      u64 value, size_t bucket_size)
{
 size_t index = div64_u64(value, bucket_size);

 index = __builtin_choose_expr(((!!(sizeof((typeof(index) *)1 == (typeof(size - 1) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(index) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(size - 1) * 0l)) : (int *)8))))), ((index) < (size - 1) ? (index) : (size - 1)), ({ typeof(index) __UNIQUE_ID___x369 = (index); typeof(size - 1) __UNIQUE_ID___y370 = (size - 1); ((__UNIQUE_ID___x369) < (__UNIQUE_ID___y370) ? (__UNIQUE_ID___x369) : (__UNIQUE_ID___y370)); }));
 ++data[index];
}
# 1505 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_stats_log_hist_update(u64 *data, size_t size, u64 value)
{
 size_t index = fls64(value);

 index = __builtin_choose_expr(((!!(sizeof((typeof(index) *)1 == (typeof(size - 1) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(index) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(size - 1) * 0l)) : (int *)8))))), ((index) < (size - 1) ? (index) : (size - 1)), ({ typeof(index) __UNIQUE_ID___x371 = (index); typeof(size - 1) __UNIQUE_ID___y372 = (size - 1); ((__UNIQUE_ID___x371) < (__UNIQUE_ID___y372) ? (__UNIQUE_ID___x371) : (__UNIQUE_ID___y372)); }));
 ++data[index];
}







extern const struct kvm_stats_header kvm_vm_stats_header;
extern const struct _kvm_stats_desc kvm_vm_stats_desc[];
extern const struct kvm_stats_header kvm_vcpu_stats_header;
extern const struct _kvm_stats_desc kvm_vcpu_stats_desc[];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmu_notifier_retry(struct kvm *kvm, unsigned long mmu_seq)
{
 if (__builtin_expect(!!(kvm->mmu_notifier_count), 0))
  return 1;
# 1539 "./include/linux/kvm_host.h"
 __asm__ __volatile__("": : :"memory");
 if (kvm->mmu_notifier_seq != mmu_seq)
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmu_notifier_retry_hva(struct kvm *kvm,
      unsigned long mmu_seq,
      unsigned long hva)
{
 do { ({ int __ret_warn_on = !!(debug_locks && !(lock_is_held(&(&kvm->mmu_lock)->dep_map) != 0)); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);






 if (__builtin_expect(!!(kvm->mmu_notifier_count), 0) &&
     hva >= kvm->mmu_notifier_range_start &&
     hva < kvm->mmu_notifier_range_end)
  return 1;
 if (kvm->mmu_notifier_seq != mmu_seq)
  return 1;
 return 0;
}






bool kvm_arch_can_set_irq_routing(struct kvm *kvm);
int kvm_set_irq_routing(struct kvm *kvm,
   const struct kvm_irq_routing_entry *entries,
   unsigned nr,
   unsigned flags);
int kvm_set_routing_entry(struct kvm *kvm,
     struct kvm_kernel_irq_routing_entry *e,
     const struct kvm_irq_routing_entry *ue);
void kvm_free_irq_routing(struct kvm *kvm);







int kvm_send_userspace_msi(struct kvm *kvm, struct kvm_msi *msi);



void kvm_eventfd_init(struct kvm *kvm);
int kvm_ioeventfd(struct kvm *kvm, struct kvm_ioeventfd *args);


int kvm_irqfd(struct kvm *kvm, struct kvm_irqfd *args);
void kvm_irqfd_release(struct kvm *kvm);
void kvm_irq_routing_update(struct kvm *);
# 1630 "./include/linux/kvm_host.h"
void kvm_arch_irq_routing_update(struct kvm *kvm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_make_request(int req, struct kvm_vcpu *vcpu)
{




 __asm__ __volatile__("": : :"memory");
 set_bit(req & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))), (void *)&vcpu->requests);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_request_pending(struct kvm_vcpu *vcpu)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_373(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(vcpu->requests) == sizeof(char) || sizeof(vcpu->requests) == sizeof(short) || sizeof(vcpu->requests) == sizeof(int) || sizeof(vcpu->requests) == sizeof(long)) || sizeof(vcpu->requests) == sizeof(long long))) __compiletime_assert_373(); } while (0); (*(const volatile typeof( _Generic((vcpu->requests), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (vcpu->requests))) *)&(vcpu->requests)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_test_request(int req, struct kvm_vcpu *vcpu)
{
 return test_bit(req & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))), (void *)&vcpu->requests);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_clear_request(int req, struct kvm_vcpu *vcpu)
{
 clear_bit(req & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (7)) * 0l)) : (int *)8))), (0) > (7), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (7))))), (void *)&vcpu->requests);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_check_request(int req, struct kvm_vcpu *vcpu)
{
 if (kvm_test_request(req, vcpu)) {
  kvm_clear_request(req, vcpu);





  __asm__ __volatile__("": : :"memory");
  return true;
 } else {
  return false;
 }
}

extern bool kvm_rebooting;

extern unsigned int halt_poll_ns;
extern unsigned int halt_poll_ns_grow;
extern unsigned int halt_poll_ns_grow_start;
extern unsigned int halt_poll_ns_shrink;

struct kvm_device {
 const struct kvm_device_ops *ops;
 struct kvm *kvm;
 void *private;
 struct list_head vm_node;
};


struct kvm_device_ops {
 const char *name;






 int (*create)(struct kvm_device *dev, u32 type);





 void (*init)(struct kvm_device *dev);
# 1712 "./include/linux/kvm_host.h"
 void (*destroy)(struct kvm_device *dev);
# 1721 "./include/linux/kvm_host.h"
 void (*release)(struct kvm_device *dev);

 int (*set_attr)(struct kvm_device *dev, struct kvm_device_attr *attr);
 int (*get_attr)(struct kvm_device *dev, struct kvm_device_attr *attr);
 int (*has_attr)(struct kvm_device *dev, struct kvm_device_attr *attr);
 long (*ioctl)(struct kvm_device *dev, unsigned int ioctl,
        unsigned long arg);
 int (*mmap)(struct kvm_device *dev, struct vm_area_struct *vma);
};

void kvm_device_get(struct kvm_device *dev);
void kvm_device_put(struct kvm_device *dev);
struct kvm_device *kvm_device_from_filp(struct file *filp);
int kvm_register_device_ops(const struct kvm_device_ops *ops, u32 type);
void kvm_unregister_device_ops(u32 type);

extern struct kvm_device_ops kvm_mpic_ops;
extern struct kvm_device_ops kvm_arm_vgic_v2_ops;
extern struct kvm_device_ops kvm_arm_vgic_v3_ops;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_vcpu_set_in_spin_loop(struct kvm_vcpu *vcpu, bool val)
{
 vcpu->spin_loop.in_spin_loop = val;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_vcpu_set_dy_eligible(struct kvm_vcpu *vcpu, bool val)
{
 vcpu->spin_loop.dy_eligible = val;
}
# 1763 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_is_visible_memslot(struct kvm_memory_slot *memslot)
{
 return (memslot && memslot->id < (((short)(((unsigned short)~0U) >> 1)) - 3) &&
  !(memslot->flags & (1UL << 16)));
}

struct kvm_vcpu *kvm_get_running_vcpu(void);
struct kvm_vcpu * *kvm_get_running_vcpus(void);


bool kvm_arch_has_irq_bypass(void);
int kvm_arch_irq_bypass_add_producer(struct irq_bypass_consumer *,
      struct irq_bypass_producer *);
void kvm_arch_irq_bypass_del_producer(struct irq_bypass_consumer *,
      struct irq_bypass_producer *);
void kvm_arch_irq_bypass_stop(struct irq_bypass_consumer *);
void kvm_arch_irq_bypass_start(struct irq_bypass_consumer *);
int kvm_arch_update_irqfd_routing(struct kvm *kvm, unsigned int host_irq,
      uint32_t guest_irq, bool set);
bool kvm_arch_irqfd_route_changed(struct kvm_kernel_irq_routing_entry *,
      struct kvm_kernel_irq_routing_entry *);
# 1794 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vcpu_valid_wakeup(struct kvm_vcpu *vcpu)
{
 return true;
}




bool kvm_arch_no_poll(struct kvm_vcpu *vcpu);
# 1814 "./include/linux/kvm_host.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long kvm_arch_vcpu_async_ioctl(struct file *filp,
          unsigned int ioctl,
          unsigned long arg)
{
 return -515;
}


void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,
         unsigned long start, unsigned long end);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_arch_vcpu_run_pid_change(struct kvm_vcpu *vcpu)
{
 return 0;
}


typedef int (*kvm_vm_thread_fn_t)(struct kvm *kvm, uintptr_t data);

int kvm_vm_create_worker_thread(struct kvm *kvm, kvm_vm_thread_fn_t thread_fn,
    uintptr_t data, const char *name,
    struct task_struct **thread_ptr);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_handle_signal_exit(struct kvm_vcpu *vcpu)
{
 vcpu->run->exit_reason = 10;
 vcpu->stat.signal_exits++;
}
# 20 "arch/x86/kvm/vmx/vmx.c" 2






# 1 "./include/linux/sched/smt.h" 1




# 1 "./include/linux/static_key.h" 1
# 6 "./include/linux/sched/smt.h" 2
# 15 "./include/linux/sched/smt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sched_smt_active(void) { return false; }


void arch_smt_update(void);
# 27 "arch/x86/kvm/vmx/vmx.c" 2

# 1 "./include/linux/tboot.h" 1
# 14 "./include/linux/tboot.h"
enum {
 TB_SHUTDOWN_REBOOT = 0,
 TB_SHUTDOWN_S5,
 TB_SHUTDOWN_S4,
 TB_SHUTDOWN_S3,
 TB_SHUTDOWN_HALT,
 TB_SHUTDOWN_WFS
};
# 29 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./include/linux/trace_events.h" 1





# 1 "./include/linux/ring_buffer.h" 1






# 1 "./include/linux/poll.h" 1
# 13 "./include/linux/poll.h"
# 1 "./include/uapi/linux/poll.h" 1
# 1 "./arch/x86/include/generated/uapi/asm/poll.h" 1
# 1 "./include/uapi/asm-generic/poll.h" 1
# 36 "./include/uapi/asm-generic/poll.h"
struct pollfd {
 int fd;
 short events;
 short revents;
};
# 2 "./arch/x86/include/generated/uapi/asm/poll.h" 2
# 2 "./include/uapi/linux/poll.h" 2
# 14 "./include/linux/poll.h" 2
# 1 "./include/uapi/linux/eventpoll.h" 1
# 77 "./include/uapi/linux/eventpoll.h"
struct epoll_event {
 __poll_t events;
 __u64 data;
} __attribute__((packed));
# 89 "./include/uapi/linux/eventpoll.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ep_take_care_of_epollwakeup(struct epoll_event *epev)
{
 epev->events &= ~(( __poll_t)(1U << 29));
}
# 15 "./include/linux/poll.h" 2

extern struct ctl_table epoll_table[];
# 32 "./include/linux/poll.h"
struct poll_table_struct;




typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);





typedef struct poll_table_struct {
 poll_queue_proc _qproc;
 __poll_t _key;
} poll_table;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
 if (p && p->_qproc && wait_address)
  p->_qproc(filp, wait_address, p);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool poll_does_not_wait(const poll_table *p)
{
 return p == ((void *)0) || p->_qproc == ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __poll_t poll_requested_events(const poll_table *p)
{
 return p ? p->_key : ~(__poll_t)0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_poll_funcptr(poll_table *pt, poll_queue_proc qproc)
{
 pt->_qproc = qproc;
 pt->_key = ~(__poll_t)0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool file_can_poll(struct file *file)
{
 return file->f_op->poll;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __poll_t vfs_poll(struct file *file, struct poll_table_struct *pt)
{
 if (__builtin_expect(!!(!file->f_op->poll), 0))
  return (( __poll_t)0x00000001 | ( __poll_t)0x00000004 | ( __poll_t)0x00000040 | ( __poll_t)0x00000100);
 return file->f_op->poll(file, pt);
}

struct poll_table_entry {
 struct file *filp;
 __poll_t key;
 wait_queue_entry_t wait;
 wait_queue_head_t *wait_address;
};




struct poll_wqueues {
 poll_table pt;
 struct poll_table_page *table;
 struct task_struct *polling_task;
 int triggered;
 int error;
 int inline_index;
 struct poll_table_entry inline_entries[((768 - 256) / sizeof(struct poll_table_entry))];
};

extern void poll_initwait(struct poll_wqueues *pwq);
extern void poll_freewait(struct poll_wqueues *pwq);
extern u64 select_estimate_accuracy(struct timespec64 *tv);



extern int core_sys_select(int n, fd_set *inp, fd_set *outp,
      fd_set *exp, struct timespec64 *end_time);

extern int poll_select_set_timeout(struct timespec64 *to, time64_t sec,
       long nsec);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u16 mangle_poll(__poll_t val)
{
 __u16 v = ( __u16)val;

 return (( __u16)( __poll_t)0x00000001 < 0x0001 ? (v & ( __u16)( __poll_t)0x00000001) * (0x0001/( __u16)( __poll_t)0x00000001) : (v & ( __u16)( __poll_t)0x00000001) / (( __u16)( __poll_t)0x00000001/0x0001)) | (( __u16)( __poll_t)0x00000004 < 0x0004 ? (v & ( __u16)( __poll_t)0x00000004) * (0x0004/( __u16)( __poll_t)0x00000004) : (v & ( __u16)( __poll_t)0x00000004) / (( __u16)( __poll_t)0x00000004/0x0004)) | (( __u16)( __poll_t)0x00000002 < 0x0002 ? (v & ( __u16)( __poll_t)0x00000002) * (0x0002/( __u16)( __poll_t)0x00000002) : (v & ( __u16)( __poll_t)0x00000002) / (( __u16)( __poll_t)0x00000002/0x0002)) | (( __u16)( __poll_t)0x00000008 < 0x0008 ? (v & ( __u16)( __poll_t)0x00000008) * (0x0008/( __u16)( __poll_t)0x00000008) : (v & ( __u16)( __poll_t)0x00000008) / (( __u16)( __poll_t)0x00000008/0x0008)) | (( __u16)( __poll_t)0x00000020 < 0x0020 ? (v & ( __u16)( __poll_t)0x00000020) * (0x0020/( __u16)( __poll_t)0x00000020) : (v & ( __u16)( __poll_t)0x00000020) / (( __u16)( __poll_t)0x00000020/0x0020)) |
  (( __u16)( __poll_t)0x00000040 < 0x0040 ? (v & ( __u16)( __poll_t)0x00000040) * (0x0040/( __u16)( __poll_t)0x00000040) : (v & ( __u16)( __poll_t)0x00000040) / (( __u16)( __poll_t)0x00000040/0x0040)) | (( __u16)( __poll_t)0x00000080 < 0x0080 ? (v & ( __u16)( __poll_t)0x00000080) * (0x0080/( __u16)( __poll_t)0x00000080) : (v & ( __u16)( __poll_t)0x00000080) / (( __u16)( __poll_t)0x00000080/0x0080)) | (( __u16)( __poll_t)0x00000100 < 0x0100 ? (v & ( __u16)( __poll_t)0x00000100) * (0x0100/( __u16)( __poll_t)0x00000100) : (v & ( __u16)( __poll_t)0x00000100) / (( __u16)( __poll_t)0x00000100/0x0100)) | (( __u16)( __poll_t)0x00000200 < 0x0200 ? (v & ( __u16)( __poll_t)0x00000200) * (0x0200/( __u16)( __poll_t)0x00000200) : (v & ( __u16)( __poll_t)0x00000200) / (( __u16)( __poll_t)0x00000200/0x0200)) |
  (( __u16)( __poll_t)0x00000010 < 0x0010 ? (v & ( __u16)( __poll_t)0x00000010) * (0x0010/( __u16)( __poll_t)0x00000010) : (v & ( __u16)( __poll_t)0x00000010) / (( __u16)( __poll_t)0x00000010/0x0010)) | (( __u16)( __poll_t)0x00002000 < 0x2000 ? (v & ( __u16)( __poll_t)0x00002000) * (0x2000/( __u16)( __poll_t)0x00002000) : (v & ( __u16)( __poll_t)0x00002000) / (( __u16)( __poll_t)0x00002000/0x2000)) | (( __u16)( __poll_t)0x00000400 < 0x0400 ? (v & ( __u16)( __poll_t)0x00000400) * (0x0400/( __u16)( __poll_t)0x00000400) : (v & ( __u16)( __poll_t)0x00000400) / (( __u16)( __poll_t)0x00000400/0x0400));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __poll_t demangle_poll(u16 val)
{

 return ( __poll_t)(0x0001 < ( __u16)( __poll_t)0x00000001 ? (val & 0x0001) * (( __u16)( __poll_t)0x00000001/0x0001) : (val & 0x0001) / (0x0001/( __u16)( __poll_t)0x00000001)) | ( __poll_t)(0x0004 < ( __u16)( __poll_t)0x00000004 ? (val & 0x0004) * (( __u16)( __poll_t)0x00000004/0x0004) : (val & 0x0004) / (0x0004/( __u16)( __poll_t)0x00000004)) | ( __poll_t)(0x0002 < ( __u16)( __poll_t)0x00000002 ? (val & 0x0002) * (( __u16)( __poll_t)0x00000002/0x0002) : (val & 0x0002) / (0x0002/( __u16)( __poll_t)0x00000002)) | ( __poll_t)(0x0008 < ( __u16)( __poll_t)0x00000008 ? (val & 0x0008) * (( __u16)( __poll_t)0x00000008/0x0008) : (val & 0x0008) / (0x0008/( __u16)( __poll_t)0x00000008)) | ( __poll_t)(0x0020 < ( __u16)( __poll_t)0x00000020 ? (val & 0x0020) * (( __u16)( __poll_t)0x00000020/0x0020) : (val & 0x0020) / (0x0020/( __u16)( __poll_t)0x00000020)) |
  ( __poll_t)(0x0040 < ( __u16)( __poll_t)0x00000040 ? (val & 0x0040) * (( __u16)( __poll_t)0x00000040/0x0040) : (val & 0x0040) / (0x0040/( __u16)( __poll_t)0x00000040)) | ( __poll_t)(0x0080 < ( __u16)( __poll_t)0x00000080 ? (val & 0x0080) * (( __u16)( __poll_t)0x00000080/0x0080) : (val & 0x0080) / (0x0080/( __u16)( __poll_t)0x00000080)) | ( __poll_t)(0x0100 < ( __u16)( __poll_t)0x00000100 ? (val & 0x0100) * (( __u16)( __poll_t)0x00000100/0x0100) : (val & 0x0100) / (0x0100/( __u16)( __poll_t)0x00000100)) | ( __poll_t)(0x0200 < ( __u16)( __poll_t)0x00000200 ? (val & 0x0200) * (( __u16)( __poll_t)0x00000200/0x0200) : (val & 0x0200) / (0x0200/( __u16)( __poll_t)0x00000200)) |
  ( __poll_t)(0x0010 < ( __u16)( __poll_t)0x00000010 ? (val & 0x0010) * (( __u16)( __poll_t)0x00000010/0x0010) : (val & 0x0010) / (0x0010/( __u16)( __poll_t)0x00000010)) | ( __poll_t)(0x2000 < ( __u16)( __poll_t)0x00002000 ? (val & 0x2000) * (( __u16)( __poll_t)0x00002000/0x2000) : (val & 0x2000) / (0x2000/( __u16)( __poll_t)0x00002000)) | ( __poll_t)(0x0400 < ( __u16)( __poll_t)0x00000400 ? (val & 0x0400) * (( __u16)( __poll_t)0x00000400/0x0400) : (val & 0x0400) / (0x0400/( __u16)( __poll_t)0x00000400));

}
# 8 "./include/linux/ring_buffer.h" 2

struct trace_buffer;
struct ring_buffer_iter;




struct ring_buffer_event {
 u32 type_len:5, time_delta:27;

 u32 array[];
};
# 55 "./include/linux/ring_buffer.h"
enum ring_buffer_type {
 RINGBUF_TYPE_DATA_TYPE_LEN_MAX = 28,
 RINGBUF_TYPE_PADDING,
 RINGBUF_TYPE_TIME_EXTEND,
 RINGBUF_TYPE_TIME_STAMP,
};

unsigned ring_buffer_event_length(struct ring_buffer_event *event);
void *ring_buffer_event_data(struct ring_buffer_event *event);
u64 ring_buffer_event_time_stamp(struct trace_buffer *buffer,
     struct ring_buffer_event *event);
# 81 "./include/linux/ring_buffer.h"
void ring_buffer_discard_commit(struct trace_buffer *buffer,
    struct ring_buffer_event *event);




struct trace_buffer *
__ring_buffer_alloc(unsigned long size, unsigned flags, struct lock_class_key *key);
# 101 "./include/linux/ring_buffer.h"
int ring_buffer_wait(struct trace_buffer *buffer, int cpu, int full);
__poll_t ring_buffer_poll_wait(struct trace_buffer *buffer, int cpu,
     struct file *filp, poll_table *poll_table);




void ring_buffer_free(struct trace_buffer *buffer);

int ring_buffer_resize(struct trace_buffer *buffer, unsigned long size, int cpu);

void ring_buffer_change_overwrite(struct trace_buffer *buffer, int val);

struct ring_buffer_event *ring_buffer_lock_reserve(struct trace_buffer *buffer,
         unsigned long length);
int ring_buffer_unlock_commit(struct trace_buffer *buffer,
         struct ring_buffer_event *event);
int ring_buffer_write(struct trace_buffer *buffer,
        unsigned long length, void *data);

void ring_buffer_nest_start(struct trace_buffer *buffer);
void ring_buffer_nest_end(struct trace_buffer *buffer);

struct ring_buffer_event *
ring_buffer_peek(struct trace_buffer *buffer, int cpu, u64 *ts,
   unsigned long *lost_events);
struct ring_buffer_event *
ring_buffer_consume(struct trace_buffer *buffer, int cpu, u64 *ts,
      unsigned long *lost_events);

struct ring_buffer_iter *
ring_buffer_read_prepare(struct trace_buffer *buffer, int cpu, gfp_t flags);
void ring_buffer_read_prepare_sync(void);
void ring_buffer_read_start(struct ring_buffer_iter *iter);
void ring_buffer_read_finish(struct ring_buffer_iter *iter);

struct ring_buffer_event *
ring_buffer_iter_peek(struct ring_buffer_iter *iter, u64 *ts);
void ring_buffer_iter_advance(struct ring_buffer_iter *iter);
void ring_buffer_iter_reset(struct ring_buffer_iter *iter);
int ring_buffer_iter_empty(struct ring_buffer_iter *iter);
bool ring_buffer_iter_dropped(struct ring_buffer_iter *iter);

unsigned long ring_buffer_size(struct trace_buffer *buffer, int cpu);

void ring_buffer_reset_cpu(struct trace_buffer *buffer, int cpu);
void ring_buffer_reset_online_cpus(struct trace_buffer *buffer);
void ring_buffer_reset(struct trace_buffer *buffer);


int ring_buffer_swap_cpu(struct trace_buffer *buffer_a,
    struct trace_buffer *buffer_b, int cpu);
# 162 "./include/linux/ring_buffer.h"
bool ring_buffer_empty(struct trace_buffer *buffer);
bool ring_buffer_empty_cpu(struct trace_buffer *buffer, int cpu);

void ring_buffer_record_disable(struct trace_buffer *buffer);
void ring_buffer_record_enable(struct trace_buffer *buffer);
void ring_buffer_record_off(struct trace_buffer *buffer);
void ring_buffer_record_on(struct trace_buffer *buffer);
bool ring_buffer_record_is_on(struct trace_buffer *buffer);
bool ring_buffer_record_is_set_on(struct trace_buffer *buffer);
void ring_buffer_record_disable_cpu(struct trace_buffer *buffer, int cpu);
void ring_buffer_record_enable_cpu(struct trace_buffer *buffer, int cpu);

u64 ring_buffer_oldest_event_ts(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_bytes_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_entries(struct trace_buffer *buffer);
unsigned long ring_buffer_overruns(struct trace_buffer *buffer);
unsigned long ring_buffer_entries_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_overrun_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_commit_overrun_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_dropped_events_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_read_events_cpu(struct trace_buffer *buffer, int cpu);

u64 ring_buffer_time_stamp(struct trace_buffer *buffer);
void ring_buffer_normalize_time_stamp(struct trace_buffer *buffer,
          int cpu, u64 *ts);
void ring_buffer_set_clock(struct trace_buffer *buffer,
      u64 (*clock)(void));
void ring_buffer_set_time_stamp_abs(struct trace_buffer *buffer, bool abs);
bool ring_buffer_time_stamp_abs(struct trace_buffer *buffer);

size_t ring_buffer_nr_pages(struct trace_buffer *buffer, int cpu);
size_t ring_buffer_nr_dirty_pages(struct trace_buffer *buffer, int cpu);

void *ring_buffer_alloc_read_page(struct trace_buffer *buffer, int cpu);
void ring_buffer_free_read_page(struct trace_buffer *buffer, int cpu, void *data);
int ring_buffer_read_page(struct trace_buffer *buffer, void **data_page,
     size_t len, int cpu, int full);

struct trace_seq;

int ring_buffer_print_entry_header(struct trace_seq *s);
int ring_buffer_print_page_header(struct trace_seq *s);

enum ring_buffer_flags {
 RB_FL_OVERWRITE = 1 << 0,
};


int trace_rb_cpu_prepare(unsigned int cpu, struct hlist_node *node);
# 7 "./include/linux/trace_events.h" 2
# 1 "./include/linux/trace_seq.h" 1




# 1 "./include/linux/seq_buf.h" 1
# 19 "./include/linux/seq_buf.h"
struct seq_buf {
 char *buffer;
 size_t size;
 size_t len;
 loff_t readpos;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_buf_clear(struct seq_buf *s)
{
 s->len = 0;
 s->readpos = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
seq_buf_init(struct seq_buf *s, char *buf, unsigned int size)
{
 s->buffer = buf;
 s->size = size;
 seq_buf_clear(s);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
seq_buf_has_overflowed(struct seq_buf *s)
{
 return s->len > s->size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
seq_buf_set_overflow(struct seq_buf *s)
{
 s->len = s->size + 1;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int
seq_buf_buffer_left(struct seq_buf *s)
{
 if (seq_buf_has_overflowed(s))
  return 0;

 return s->size - s->len;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int seq_buf_used(struct seq_buf *s)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(s->len) *)1 == (typeof(s->size) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(s->len) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(s->size) * 0l)) : (int *)8))))), ((s->len) < (s->size) ? (s->len) : (s->size)), ({ typeof(s->len) __UNIQUE_ID___x374 = (s->len); typeof(s->size) __UNIQUE_ID___y375 = (s->size); ((__UNIQUE_ID___x374) < (__UNIQUE_ID___y375) ? (__UNIQUE_ID___x374) : (__UNIQUE_ID___y375)); }));
}
# 88 "./include/linux/seq_buf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_buf_terminate(struct seq_buf *s)
{
 if (({ int __ret_warn_on = !!(s->size == 0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return;

 if (seq_buf_buffer_left(s))
  s->buffer[s->len] = 0;
 else
  s->buffer[s->size - 1] = 0;
}
# 107 "./include/linux/seq_buf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) size_t seq_buf_get_buf(struct seq_buf *s, char **bufp)
{
 ({ int __ret_warn_on = !!(s->len > s->size + 1); __builtin_expect(!!(__ret_warn_on), 0); });

 if (s->len < s->size) {
  *bufp = s->buffer + s->len;
  return s->size - s->len;
 }

 *bufp = ((void *)0);
 return 0;
}
# 129 "./include/linux/seq_buf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seq_buf_commit(struct seq_buf *s, int num)
{
 if (num < 0) {
  seq_buf_set_overflow(s);
 } else {

  do { if (__builtin_expect(!!(s->len + num > s->size), 0)) do { ({ asm volatile("376" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "376" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("377" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "377" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } while (0);
  s->len += num;
 }
}

extern __attribute__((__format__(printf, 2, 3)))
int seq_buf_printf(struct seq_buf *s, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0)))
int seq_buf_vprintf(struct seq_buf *s, const char *fmt, va_list args);
extern int seq_buf_print_seq(struct seq_file *m, struct seq_buf *s);
extern int seq_buf_to_user(struct seq_buf *s, char *ubuf,
      int cnt);
extern int seq_buf_puts(struct seq_buf *s, const char *str);
extern int seq_buf_putc(struct seq_buf *s, unsigned char c);
extern int seq_buf_putmem(struct seq_buf *s, const void *mem, unsigned int len);
extern int seq_buf_putmem_hex(struct seq_buf *s, const void *mem,
         unsigned int len);
extern int seq_buf_path(struct seq_buf *s, const struct path *path, const char *esc);
extern int seq_buf_hex_dump(struct seq_buf *s, const char *prefix_str,
       int prefix_type, int rowsize, int groupsize,
       const void *buf, size_t len, bool ascii);


extern int
seq_buf_bprintf(struct seq_buf *s, const char *fmt, const u32 *binary);
# 6 "./include/linux/trace_seq.h" 2








struct trace_seq {
 char buffer[((1UL) << 12)];
 struct seq_buf seq;
 int full;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
trace_seq_init(struct trace_seq *s)
{
 seq_buf_init(&s->seq, s->buffer, ((1UL) << 12));
 s->full = 0;
}
# 40 "./include/linux/trace_seq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int trace_seq_used(struct trace_seq *s)
{
 return seq_buf_used(&s->seq);
}
# 54 "./include/linux/trace_seq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char *
trace_seq_buffer_ptr(struct trace_seq *s)
{
 return s->buffer + seq_buf_used(&s->seq);
}
# 67 "./include/linux/trace_seq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_seq_has_overflowed(struct trace_seq *s)
{
 return s->full || seq_buf_has_overflowed(&s->seq);
}





extern __attribute__((__format__(printf, 2, 3)))
void trace_seq_printf(struct trace_seq *s, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0)))
void trace_seq_vprintf(struct trace_seq *s, const char *fmt, va_list args);
extern void
trace_seq_bprintf(struct trace_seq *s, const char *fmt, const u32 *binary);
extern int trace_print_seq(struct seq_file *m, struct trace_seq *s);
extern int trace_seq_to_user(struct trace_seq *s, char *ubuf,
        int cnt);
extern void trace_seq_puts(struct trace_seq *s, const char *str);
extern void trace_seq_putc(struct trace_seq *s, unsigned char c);
extern void trace_seq_putmem(struct trace_seq *s, const void *mem, unsigned int len);
extern void trace_seq_putmem_hex(struct trace_seq *s, const void *mem,
    unsigned int len);
extern int trace_seq_path(struct trace_seq *s, const struct path *path);

extern void trace_seq_bitmask(struct trace_seq *s, const unsigned long *maskp,
        int nmaskbits);

extern int trace_seq_hex_dump(struct trace_seq *s, const char *prefix_str,
         int prefix_type, int rowsize, int groupsize,
         const void *buf, size_t len, bool ascii);
# 8 "./include/linux/trace_events.h" 2



# 1 "./include/linux/tracepoint.h" 1
# 12 "./include/linux/trace_events.h" 2

struct trace_array;
struct array_buffer;
struct tracer;
struct dentry;
struct bpf_prog;

const char *trace_print_flags_seq(struct trace_seq *p, const char *delim,
      unsigned long flags,
      const struct trace_print_flags *flag_array);

const char *trace_print_symbols_seq(struct trace_seq *p, unsigned long val,
        const struct trace_print_flags *symbol_array);
# 37 "./include/linux/trace_events.h"
const char *trace_print_bitmask_seq(struct trace_seq *p, void *bitmask_ptr,
        unsigned int bitmask_size);

const char *trace_print_hex_seq(struct trace_seq *p,
    const unsigned char *buf, int len,
    bool concatenate);

const char *trace_print_array_seq(struct trace_seq *p,
       const void *buf, int count,
       size_t el_size);

const char *
trace_print_hex_dump_seq(struct trace_seq *p, const char *prefix_str,
    int prefix_type, int rowsize, int groupsize,
    const void *buf, size_t len, bool ascii);

struct trace_iterator;
struct trace_event;

int trace_raw_output_prep(struct trace_iterator *iter,
     struct trace_event *event);
extern __attribute__((__format__(printf, 2, 3)))
void trace_event_printf(struct trace_iterator *iter, const char *fmt, ...);







struct trace_entry {
 unsigned short type;
 unsigned char flags;
 unsigned char preempt_count;
 int pid;
};
# 81 "./include/linux/trace_events.h"
struct trace_iterator {
 struct trace_array *tr;
 struct tracer *trace;
 struct array_buffer *array_buffer;
 void *private;
 int cpu_file;
 struct mutex mutex;
 struct ring_buffer_iter **buffer_iter;
 unsigned long iter_flags;
 void *temp;
 unsigned int temp_size;
 char *fmt;
 unsigned int fmt_size;


 struct trace_seq tmp_seq;

 cpumask_var_t started;


 bool snapshot;


 struct trace_seq seq;
 struct trace_entry *ent;
 unsigned long lost_events;
 int leftover;
 int ent_size;
 int cpu;
 u64 ts;

 loff_t pos;
 long idx;


};

enum trace_iter_flags {
 TRACE_FILE_LAT_FMT = 1,
 TRACE_FILE_ANNOTATE = 2,
 TRACE_FILE_TIME_IN_NS = 4,
};


typedef enum print_line_t (*trace_print_func)(struct trace_iterator *iter,
          int flags, struct trace_event *event);

struct trace_event_functions {
 trace_print_func trace;
 trace_print_func raw;
 trace_print_func hex;
 trace_print_func binary;
};

struct trace_event {
 struct hlist_node node;
 struct list_head list;
 int type;
 struct trace_event_functions *funcs;
};

extern int register_trace_event(struct trace_event *event);
extern int unregister_trace_event(struct trace_event *event);


enum print_line_t {
 TRACE_TYPE_PARTIAL_LINE = 0,
 TRACE_TYPE_HANDLED = 1,
 TRACE_TYPE_UNHANDLED = 2,
 TRACE_TYPE_NO_CONSUME = 3
};

enum print_line_t trace_handle_return(struct trace_seq *s);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tracing_generic_entry_update(struct trace_entry *entry,
      unsigned short type,
      unsigned int trace_ctx)
{
 entry->preempt_count = trace_ctx & 0xff;
 entry->pid = get_current()->pid;
 entry->type = type;
 entry->flags = trace_ctx >> 16;
}

unsigned int tracing_gen_ctx_irq_test(unsigned int irqs_status);

enum trace_flag_type {
 TRACE_FLAG_IRQS_OFF = 0x01,
 TRACE_FLAG_IRQS_NOSUPPORT = 0x02,
 TRACE_FLAG_NEED_RESCHED = 0x04,
 TRACE_FLAG_HARDIRQ = 0x08,
 TRACE_FLAG_SOFTIRQ = 0x10,
 TRACE_FLAG_PREEMPT_RESCHED = 0x20,
 TRACE_FLAG_NMI = 0x40,
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int tracing_gen_ctx_flags(unsigned long irqflags)
{
 unsigned int irq_status = ({ ({ unsigned long __dummy; typeof(irqflags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(irqflags); }) ?
  TRACE_FLAG_IRQS_OFF : 0;
 return tracing_gen_ctx_irq_test(irq_status);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int tracing_gen_ctx(void)
{
 unsigned long irqflags;

 do { ({ unsigned long __dummy; typeof(irqflags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); irqflags = arch_local_save_flags(); } while (0);
 return tracing_gen_ctx_flags(irqflags);
}
# 203 "./include/linux/trace_events.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int tracing_gen_ctx_dec(void)
{
 unsigned int trace_ctx;

 trace_ctx = tracing_gen_ctx();




 if (1)
  trace_ctx--;
 return trace_ctx;
}

struct trace_event_file;

struct ring_buffer_event *
trace_event_buffer_lock_reserve(struct trace_buffer **current_buffer,
    struct trace_event_file *trace_file,
    int type, unsigned long len,
    unsigned int trace_ctx);




void tracing_record_taskinfo(struct task_struct *task, int flags);
void tracing_record_taskinfo_sched_switch(struct task_struct *prev,
       struct task_struct *next, int flags);

void tracing_record_cmdline(struct task_struct *task);
void tracing_record_tgid(struct task_struct *task);

int trace_output_call(struct trace_iterator *iter, char *name, char *fmt, ...);

struct event_filter;

enum trace_reg {
 TRACE_REG_REGISTER,
 TRACE_REG_UNREGISTER,

 TRACE_REG_PERF_REGISTER,
 TRACE_REG_PERF_UNREGISTER,
 TRACE_REG_PERF_OPEN,
 TRACE_REG_PERF_CLOSE,





 TRACE_REG_PERF_ADD,
 TRACE_REG_PERF_DEL,

};

struct trace_event_call;



struct trace_event_fields {
 const char *type;
 union {
  struct {
   const char *name;
   const int size;
   const int align;
   const int is_signed;
   const int filter_type;
  };
  int (*define_fields)(struct trace_event_call *);
 };
};

struct trace_event_class {
 const char *system;
 void *probe;

 void *perf_probe;

 int (*reg)(struct trace_event_call *event,
           enum trace_reg type, void *data);
 struct trace_event_fields *fields_array;
 struct list_head *(*get_fields)(struct trace_event_call *);
 struct list_head fields;
 int (*raw_init)(struct trace_event_call *);
};

extern int trace_event_reg(struct trace_event_call *event,
       enum trace_reg type, void *data);

struct trace_event_buffer {
 struct trace_buffer *buffer;
 struct ring_buffer_event *event;
 struct trace_event_file *trace_file;
 void *entry;
 unsigned int trace_ctx;
 struct pt_regs *regs;
};

void *trace_event_buffer_reserve(struct trace_event_buffer *fbuffer,
      struct trace_event_file *trace_file,
      unsigned long len);

void trace_event_buffer_commit(struct trace_event_buffer *fbuffer);

enum {
 TRACE_EVENT_FL_FILTERED_BIT,
 TRACE_EVENT_FL_CAP_ANY_BIT,
 TRACE_EVENT_FL_NO_SET_FILTER_BIT,
 TRACE_EVENT_FL_IGNORE_ENABLE_BIT,
 TRACE_EVENT_FL_TRACEPOINT_BIT,
 TRACE_EVENT_FL_DYNAMIC_BIT,
 TRACE_EVENT_FL_KPROBE_BIT,
 TRACE_EVENT_FL_UPROBE_BIT,
 TRACE_EVENT_FL_EPROBE_BIT,
};
# 331 "./include/linux/trace_events.h"
enum {
 TRACE_EVENT_FL_FILTERED = (1 << TRACE_EVENT_FL_FILTERED_BIT),
 TRACE_EVENT_FL_CAP_ANY = (1 << TRACE_EVENT_FL_CAP_ANY_BIT),
 TRACE_EVENT_FL_NO_SET_FILTER = (1 << TRACE_EVENT_FL_NO_SET_FILTER_BIT),
 TRACE_EVENT_FL_IGNORE_ENABLE = (1 << TRACE_EVENT_FL_IGNORE_ENABLE_BIT),
 TRACE_EVENT_FL_TRACEPOINT = (1 << TRACE_EVENT_FL_TRACEPOINT_BIT),
 TRACE_EVENT_FL_DYNAMIC = (1 << TRACE_EVENT_FL_DYNAMIC_BIT),
 TRACE_EVENT_FL_KPROBE = (1 << TRACE_EVENT_FL_KPROBE_BIT),
 TRACE_EVENT_FL_UPROBE = (1 << TRACE_EVENT_FL_UPROBE_BIT),
 TRACE_EVENT_FL_EPROBE = (1 << TRACE_EVENT_FL_EPROBE_BIT),
};



struct trace_event_call {
 struct list_head list;
 struct trace_event_class *class;
 union {
  char *name;

  struct tracepoint *tp;
 };
 struct trace_event event;
 char *print_fmt;
 struct event_filter *filter;




 union {
  void *module;
  atomic_t refcnt;
 };
 void *data;


 int flags;


 int perf_refcount;
 struct hlist_head *perf_events;
 struct bpf_prog_array *prog_array;

 int (*perf_perm)(struct trace_event_call *,
        struct perf_event *);

};


bool trace_event_dyn_try_get_ref(struct trace_event_call *call);
void trace_event_dyn_put_ref(struct trace_event_call *call);
bool trace_event_dyn_busy(struct trace_event_call *call);
# 399 "./include/linux/trace_events.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_event_try_get_ref(struct trace_event_call *call)
{
 if (call->flags & TRACE_EVENT_FL_DYNAMIC)
  return trace_event_dyn_try_get_ref(call);
 else
  return try_module_get(call->module);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_event_put_ref(struct trace_event_call *call)
{
 if (call->flags & TRACE_EVENT_FL_DYNAMIC)
  trace_event_dyn_put_ref(call);
 else
  module_put(call->module);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_prog_array_valid(struct trace_event_call *call)
{
# 435 "./include/linux/trace_events.h"
 return !!({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_378(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(call->prog_array) == sizeof(char) || sizeof(call->prog_array) == sizeof(short) || sizeof(call->prog_array) == sizeof(int) || sizeof(call->prog_array) == sizeof(long)) || sizeof(call->prog_array) == sizeof(long long))) __compiletime_assert_378(); } while (0); (*(const volatile typeof( _Generic((call->prog_array), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (call->prog_array))) *)&(call->prog_array)); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *
trace_event_name(struct trace_event_call *call)
{
 if (call->flags & TRACE_EVENT_FL_TRACEPOINT)
  return call->tp ? call->tp->name : ((void *)0);
 else
  return call->name;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct list_head *
trace_get_fields(struct trace_event_call *event_call)
{
 if (!event_call->class->get_fields)
  return &event_call->class->fields;
 return event_call->class->get_fields(event_call);
}

struct trace_subsystem_dir;

enum {
 EVENT_FILE_FL_ENABLED_BIT,
 EVENT_FILE_FL_RECORDED_CMD_BIT,
 EVENT_FILE_FL_RECORDED_TGID_BIT,
 EVENT_FILE_FL_FILTERED_BIT,
 EVENT_FILE_FL_NO_SET_FILTER_BIT,
 EVENT_FILE_FL_SOFT_MODE_BIT,
 EVENT_FILE_FL_SOFT_DISABLED_BIT,
 EVENT_FILE_FL_TRIGGER_MODE_BIT,
 EVENT_FILE_FL_TRIGGER_COND_BIT,
 EVENT_FILE_FL_PID_FILTER_BIT,
 EVENT_FILE_FL_WAS_ENABLED_BIT,
};

extern struct trace_event_file *trace_get_event_file(const char *instance,
           const char *system,
           const char *event);
extern void trace_put_event_file(struct trace_event_file *file);



enum dynevent_type {
 DYNEVENT_TYPE_SYNTH = 1,
 DYNEVENT_TYPE_KPROBE,
 DYNEVENT_TYPE_NONE,
};

struct dynevent_cmd;

typedef int (*dynevent_create_fn_t)(struct dynevent_cmd *cmd);

struct dynevent_cmd {
 struct seq_buf seq;
 const char *event_name;
 unsigned int n_fields;
 enum dynevent_type type;
 dynevent_create_fn_t run_command;
 void *private_data;
};

extern int dynevent_create(struct dynevent_cmd *cmd);

extern int synth_event_delete(const char *name);

extern void synth_event_cmd_init(struct dynevent_cmd *cmd,
     char *buf, int maxlen);

extern int __synth_event_gen_cmd_start(struct dynevent_cmd *cmd,
           const char *name,
           struct module *mod, ...);




struct synth_field_desc {
 const char *type;
 const char *name;
};

extern int synth_event_gen_cmd_array_start(struct dynevent_cmd *cmd,
        const char *name,
        struct module *mod,
        struct synth_field_desc *fields,
        unsigned int n_fields);
extern int synth_event_create(const char *name,
         struct synth_field_desc *fields,
         unsigned int n_fields, struct module *mod);

extern int synth_event_add_field(struct dynevent_cmd *cmd,
     const char *type,
     const char *name);
extern int synth_event_add_field_str(struct dynevent_cmd *cmd,
         const char *type_name);
extern int synth_event_add_fields(struct dynevent_cmd *cmd,
      struct synth_field_desc *fields,
      unsigned int n_fields);




struct synth_event;

struct synth_event_trace_state {
 struct trace_event_buffer fbuffer;
 struct synth_trace_event *entry;
 struct trace_buffer *buffer;
 struct synth_event *event;
 unsigned int cur_field;
 unsigned int n_u64;
 bool disabled;
 bool add_next;
 bool add_name;
};

extern int synth_event_trace(struct trace_event_file *file,
        unsigned int n_vals, ...);
extern int synth_event_trace_array(struct trace_event_file *file, u64 *vals,
       unsigned int n_vals);
extern int synth_event_trace_start(struct trace_event_file *file,
       struct synth_event_trace_state *trace_state);
extern int synth_event_add_next_val(u64 val,
        struct synth_event_trace_state *trace_state);
extern int synth_event_add_val(const char *field_name, u64 val,
          struct synth_event_trace_state *trace_state);
extern int synth_event_trace_end(struct synth_event_trace_state *trace_state);

extern int kprobe_event_delete(const char *name);

extern void kprobe_event_cmd_init(struct dynevent_cmd *cmd,
      char *buf, int maxlen);







extern int __kprobe_event_gen_cmd_start(struct dynevent_cmd *cmd,
     bool kretprobe,
     const char *name,
     const char *loc, ...);







extern int __kprobe_event_add_fields(struct dynevent_cmd *cmd, ...);
# 609 "./include/linux/trace_events.h"
enum {
 EVENT_FILE_FL_ENABLED = (1 << EVENT_FILE_FL_ENABLED_BIT),
 EVENT_FILE_FL_RECORDED_CMD = (1 << EVENT_FILE_FL_RECORDED_CMD_BIT),
 EVENT_FILE_FL_RECORDED_TGID = (1 << EVENT_FILE_FL_RECORDED_TGID_BIT),
 EVENT_FILE_FL_FILTERED = (1 << EVENT_FILE_FL_FILTERED_BIT),
 EVENT_FILE_FL_NO_SET_FILTER = (1 << EVENT_FILE_FL_NO_SET_FILTER_BIT),
 EVENT_FILE_FL_SOFT_MODE = (1 << EVENT_FILE_FL_SOFT_MODE_BIT),
 EVENT_FILE_FL_SOFT_DISABLED = (1 << EVENT_FILE_FL_SOFT_DISABLED_BIT),
 EVENT_FILE_FL_TRIGGER_MODE = (1 << EVENT_FILE_FL_TRIGGER_MODE_BIT),
 EVENT_FILE_FL_TRIGGER_COND = (1 << EVENT_FILE_FL_TRIGGER_COND_BIT),
 EVENT_FILE_FL_PID_FILTER = (1 << EVENT_FILE_FL_PID_FILTER_BIT),
 EVENT_FILE_FL_WAS_ENABLED = (1 << EVENT_FILE_FL_WAS_ENABLED_BIT),
};

struct trace_event_file {
 struct list_head list;
 struct trace_event_call *event_call;
 struct event_filter *filter;
 struct dentry *dir;
 struct trace_array *tr;
 struct trace_subsystem_dir *system;
 struct list_head triggers;
# 648 "./include/linux/trace_events.h"
 unsigned long flags;
 atomic_t sm_ref;
 atomic_t tm_ref;
};
# 678 "./include/linux/trace_events.h"
enum event_trigger_type {
 ETT_NONE = (0),
 ETT_TRACE_ONOFF = (1 << 0),
 ETT_SNAPSHOT = (1 << 1),
 ETT_STACKTRACE = (1 << 2),
 ETT_EVENT_ENABLE = (1 << 3),
 ETT_EVENT_HIST = (1 << 4),
 ETT_HIST_ENABLE = (1 << 5),
 ETT_EVENT_EPROBE = (1 << 6),
};

extern int filter_match_preds(struct event_filter *filter, void *rec);

extern enum event_trigger_type
event_triggers_call(struct trace_event_file *file,
      struct trace_buffer *buffer, void *rec,
      struct ring_buffer_event *event);
extern void
event_triggers_post_call(struct trace_event_file *file,
    enum event_trigger_type tt);

bool trace_event_ignore_this_pid(struct trace_event_file *trace_file);
# 710 "./include/linux/trace_events.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
trace_trigger_soft_disabled(struct trace_event_file *file)
{
 unsigned long eflags = file->flags;

 if (!(eflags & EVENT_FILE_FL_TRIGGER_COND)) {
  if (eflags & EVENT_FILE_FL_TRIGGER_MODE)
   event_triggers_call(file, ((void *)0), ((void *)0), ((void *)0));
  if (eflags & EVENT_FILE_FL_SOFT_DISABLED)
   return true;
  if (eflags & EVENT_FILE_FL_PID_FILTER)
   return trace_event_ignore_this_pid(file);
 }
 return false;
}
# 739 "./include/linux/trace_events.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int trace_call_bpf(struct trace_event_call *call, void *ctx)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
perf_event_attach_bpf_prog(struct perf_event *event, struct bpf_prog *prog, u64 bpf_cookie)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void perf_event_detach_bpf_prog(struct perf_event *event) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
perf_event_query_prog_array(struct perf_event *event, void *info)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_probe_register(struct bpf_raw_event_map *btp, struct bpf_prog *p)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_probe_unregister(struct bpf_raw_event_map *btp, struct bpf_prog *p)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bpf_raw_event_map *bpf_get_raw_tracepoint(const char *name)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bpf_put_raw_tracepoint(struct bpf_raw_event_map *btp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bpf_get_perf_event_info(const struct perf_event *event,
       u32 *prog_id, u32 *fd_type,
       const char **buf, u64 *probe_offset,
       u64 *probe_addr)
{
 return -95;
}


enum {
 FILTER_OTHER = 0,
 FILTER_STATIC_STRING,
 FILTER_DYN_STRING,
 FILTER_PTR_STRING,
 FILTER_TRACE_FN,
 FILTER_COMM,
 FILTER_CPU,
};

extern int trace_event_raw_init(struct trace_event_call *call);
extern int trace_define_field(struct trace_event_call *call, const char *type,
         const char *name, int offset, int size,
         int is_signed, int filter_type);
extern int trace_add_event_call(struct trace_event_call *call);
extern int trace_remove_event_call(struct trace_event_call *call);
extern int trace_event_get_offsets(struct trace_event_call *call);



int ftrace_set_clr_event(struct trace_array *tr, char *buf, int set);
int trace_set_clr_event(const char *system, const char *event, int set);
int trace_array_set_clr_event(struct trace_array *tr, const char *system,
  const char *event, bool enable);
# 825 "./include/linux/trace_events.h"
struct perf_event;

extern __attribute__((section(".data" ""))) __typeof__(struct pt_regs) perf_trace_regs;
extern __attribute__((section(".data" ""))) __typeof__(int) bpf_kprobe_override;

extern int perf_trace_init(struct perf_event *event);
extern void perf_trace_destroy(struct perf_event *event);
extern int perf_trace_add(struct perf_event *event, int flags);
extern void perf_trace_del(struct perf_event *event, int flags);
# 850 "./include/linux/trace_events.h"
extern int ftrace_profile_set_filter(struct perf_event *event, int event_id,
         char *filter_str);
extern void ftrace_profile_free_filter(struct perf_event *event);
void perf_trace_buf_update(void *record, u16 type);
void *perf_trace_buf_alloc(int size, struct pt_regs **regs, int *rctxp);

int perf_event_set_bpf_prog(struct perf_event *event, struct bpf_prog *prog, u64 bpf_cookie);
void perf_event_free_bpf_prog(struct perf_event *event);

void bpf_trace_run1(struct bpf_prog *prog, u64 arg1);
void bpf_trace_run2(struct bpf_prog *prog, u64 arg1, u64 arg2);
void bpf_trace_run3(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3);
void bpf_trace_run4(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4);
void bpf_trace_run5(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5);
void bpf_trace_run6(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6);
void bpf_trace_run7(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7);
void bpf_trace_run8(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
      u64 arg8);
void bpf_trace_run9(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
      u64 arg8, u64 arg9);
void bpf_trace_run10(struct bpf_prog *prog, u64 arg1, u64 arg2,
       u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
       u64 arg8, u64 arg9, u64 arg10);
void bpf_trace_run11(struct bpf_prog *prog, u64 arg1, u64 arg2,
       u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
       u64 arg8, u64 arg9, u64 arg10, u64 arg11);
void bpf_trace_run12(struct bpf_prog *prog, u64 arg1, u64 arg2,
       u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
       u64 arg8, u64 arg9, u64 arg10, u64 arg11, u64 arg12);
void perf_trace_run_bpf_submit(void *raw_data, int size, int rctx,
          struct trace_event_call *call, u64 count,
          struct pt_regs *regs, struct hlist_head *head,
          struct task_struct *task);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
perf_trace_buf_submit(void *raw_data, int size, int rctx, u16 type,
         u64 count, struct pt_regs *regs, void *head,
         struct task_struct *task)
{
 perf_tp_event(type, count, raw_data, size, regs, head, rctx, task);
}
# 30 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./include/linux/entry-kvm.h" 1





# 1 "./include/linux/tracehook.h" 1
# 50 "./include/linux/tracehook.h"
# 1 "./include/linux/memcontrol.h" 1
# 17 "./include/linux/memcontrol.h"
# 1 "./include/linux/page_counter.h" 1








struct page_counter {
 atomic_long_t usage;
 unsigned long min;
 unsigned long low;
 unsigned long high;
 unsigned long max;


 unsigned long emin;
 atomic_long_t min_usage;
 atomic_long_t children_min_usage;


 unsigned long elow;
 atomic_long_t low_usage;
 atomic_long_t children_low_usage;


 unsigned long watermark;
 unsigned long failcnt;







 struct page_counter *parent;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_counter_init(struct page_counter *counter,
         struct page_counter *parent)
{
 atomic_long_set(&counter->usage, 0);
 counter->max = (((long)(~0UL >> 1)) / ((1UL) << 12));
 counter->parent = parent;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long page_counter_read(struct page_counter *counter)
{
 return atomic_long_read(&counter->usage);
}

void page_counter_cancel(struct page_counter *counter, unsigned long nr_pages);
void page_counter_charge(struct page_counter *counter, unsigned long nr_pages);
bool page_counter_try_charge(struct page_counter *counter,
        unsigned long nr_pages,
        struct page_counter **fail);
void page_counter_uncharge(struct page_counter *counter, unsigned long nr_pages);
void page_counter_set_min(struct page_counter *counter, unsigned long nr_pages);
void page_counter_set_low(struct page_counter *counter, unsigned long nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_counter_set_high(struct page_counter *counter,
      unsigned long nr_pages)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_379(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(counter->high) == sizeof(char) || sizeof(counter->high) == sizeof(short) || sizeof(counter->high) == sizeof(int) || sizeof(counter->high) == sizeof(long)) || sizeof(counter->high) == sizeof(long long))) __compiletime_assert_379(); } while (0); do { *(volatile typeof(counter->high) *)&(counter->high) = (nr_pages); } while (0); } while (0);
}

int page_counter_set_max(struct page_counter *counter, unsigned long nr_pages);
int page_counter_memparse(const char *buf, const char *max,
     unsigned long *nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_counter_reset_watermark(struct page_counter *counter)
{
 counter->watermark = page_counter_read(counter);
}
# 18 "./include/linux/memcontrol.h" 2
# 1 "./include/linux/vmpressure.h" 1
# 11 "./include/linux/vmpressure.h"
# 1 "./include/linux/eventfd.h" 1
# 33 "./include/linux/eventfd.h"
struct eventfd_ctx;
struct file;



void eventfd_ctx_put(struct eventfd_ctx *ctx);
struct file *eventfd_fget(int fd);
struct eventfd_ctx *eventfd_ctx_fdget(int fd);
struct eventfd_ctx *eventfd_ctx_fileget(struct file *file);
__u64 eventfd_signal(struct eventfd_ctx *ctx, __u64 n);
int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *ctx, wait_queue_entry_t *wait,
      __u64 *cnt);
void eventfd_ctx_do_read(struct eventfd_ctx *ctx, __u64 *cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool eventfd_signal_allowed(void)
{
 return !get_current()->in_eventfd_signal;
}
# 12 "./include/linux/vmpressure.h" 2

struct vmpressure {
 unsigned long scanned;
 unsigned long reclaimed;

 unsigned long tree_scanned;
 unsigned long tree_reclaimed;

 spinlock_t sr_lock;


 struct list_head events;

 struct mutex events_lock;

 struct work_struct work;
};

struct mem_cgroup;


extern void vmpressure(gfp_t gfp, struct mem_cgroup *memcg, bool tree,
         unsigned long scanned, unsigned long reclaimed);
extern void vmpressure_prio(gfp_t gfp, struct mem_cgroup *memcg, int prio);

extern void vmpressure_init(struct vmpressure *vmpr);
extern void vmpressure_cleanup(struct vmpressure *vmpr);
extern struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *memcg);
extern struct mem_cgroup *vmpressure_to_memcg(struct vmpressure *vmpr);
extern int vmpressure_register_event(struct mem_cgroup *memcg,
         struct eventfd_ctx *eventfd,
         const char *args);
extern void vmpressure_unregister_event(struct mem_cgroup *memcg,
     struct eventfd_ctx *eventfd);
# 19 "./include/linux/memcontrol.h" 2



# 1 "./include/linux/writeback.h" 1
# 11 "./include/linux/writeback.h"
# 1 "./include/linux/flex_proportions.h" 1
# 28 "./include/linux/flex_proportions.h"
struct fprop_global {

 struct percpu_counter events;

 unsigned int period;

 seqcount_t sequence;
};

int fprop_global_init(struct fprop_global *p, gfp_t gfp);
void fprop_global_destroy(struct fprop_global *p);
bool fprop_new_period(struct fprop_global *p, int periods);




struct fprop_local_single {

 unsigned long events;

 unsigned int period;
 raw_spinlock_t lock;
};





int fprop_local_init_single(struct fprop_local_single *pl);
void fprop_local_destroy_single(struct fprop_local_single *pl);
void __fprop_inc_single(struct fprop_global *p, struct fprop_local_single *pl);
void fprop_fraction_single(struct fprop_global *p,
 struct fprop_local_single *pl, unsigned long *numerator,
 unsigned long *denominator);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
void fprop_inc_single(struct fprop_global *p, struct fprop_local_single *pl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __fprop_inc_single(p, pl);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}




struct fprop_local_percpu {

 struct percpu_counter events;

 unsigned int period;
 raw_spinlock_t lock;
};

int fprop_local_init_percpu(struct fprop_local_percpu *pl, gfp_t gfp);
void fprop_local_destroy_percpu(struct fprop_local_percpu *pl);
void __fprop_add_percpu(struct fprop_global *p, struct fprop_local_percpu *pl,
  long nr);
void __fprop_add_percpu_max(struct fprop_global *p,
  struct fprop_local_percpu *pl, int max_frac, long nr);
void fprop_fraction_percpu(struct fprop_global *p,
 struct fprop_local_percpu *pl, unsigned long *numerator,
 unsigned long *denominator);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
void fprop_inc_percpu(struct fprop_global *p, struct fprop_local_percpu *pl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __fprop_add_percpu(p, pl, 1);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 12 "./include/linux/writeback.h" 2
# 1 "./include/linux/backing-dev-defs.h" 1
# 17 "./include/linux/backing-dev-defs.h"
struct page;
struct device;
struct dentry;




enum wb_state {
 WB_registered,
 WB_writeback_running,
 WB_has_dirty_io,
 WB_start_all,
};

enum wb_congested_state {
 WB_async_congested,
 WB_sync_congested,
};

enum wb_stat_item {
 WB_RECLAIMABLE,
 WB_WRITEBACK,
 WB_DIRTIED,
 WB_WRITTEN,
 NR_WB_STAT_ITEMS
};






enum wb_reason {
 WB_REASON_BACKGROUND,
 WB_REASON_VMSCAN,
 WB_REASON_SYNC,
 WB_REASON_PERIODIC,
 WB_REASON_LAPTOP_TIMER,
 WB_REASON_FS_FREE_SPACE,






 WB_REASON_FORKER_THREAD,
 WB_REASON_FOREIGN_FLUSH,

 WB_REASON_MAX,
};

struct wb_completion {
 atomic_t cnt;
 wait_queue_head_t *waitq;
};
# 110 "./include/linux/backing-dev-defs.h"
struct bdi_writeback {
 struct backing_dev_info *bdi;

 unsigned long state;
 unsigned long last_old_flush;

 struct list_head b_dirty;
 struct list_head b_io;
 struct list_head b_more_io;
 struct list_head b_dirty_time;
 spinlock_t list_lock;

 atomic_t writeback_inodes;
 struct percpu_counter stat[NR_WB_STAT_ITEMS];

 unsigned long congested;

 unsigned long bw_time_stamp;
 unsigned long dirtied_stamp;
 unsigned long written_stamp;
 unsigned long write_bandwidth;
 unsigned long avg_write_bandwidth;







 unsigned long dirty_ratelimit;
 unsigned long balanced_dirty_ratelimit;

 struct fprop_local_percpu completions;
 int dirty_exceeded;
 enum wb_reason start_all_reason;

 spinlock_t work_lock;
 struct list_head work_list;
 struct delayed_work dwork;
 struct delayed_work bw_dwork;

 unsigned long dirty_sleep;

 struct list_head bdi_node;
# 170 "./include/linux/backing-dev-defs.h"
};

struct backing_dev_info {
 u64 id;
 struct rb_node rb_node;
 struct list_head bdi_list;
 unsigned long ra_pages;
 unsigned long io_pages;

 struct kref refcnt;
 unsigned int capabilities;
 unsigned int min_ratio;
 unsigned int max_ratio, max_prop_frac;





 atomic_long_t tot_write_bandwidth;

 struct bdi_writeback wb;
 struct list_head wb_list;





 wait_queue_head_t wb_waitq;

 struct device *dev;
 char dev_name[64];
 struct device *owner;

 struct timer_list laptop_mode_wb_timer;


 struct dentry *debug_dir;

};

enum {
 BLK_RW_ASYNC = 0,
 BLK_RW_SYNC = 1,
};

void clear_bdi_congested(struct backing_dev_info *bdi, int sync);
void set_bdi_congested(struct backing_dev_info *bdi, int sync);

struct wb_lock_cookie {
 bool locked;
 unsigned long flags;
};
# 287 "./include/linux/backing-dev-defs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool wb_tryget(struct bdi_writeback *wb)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wb_get(struct bdi_writeback *wb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wb_put(struct bdi_writeback *wb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wb_put_many(struct bdi_writeback *wb, unsigned long nr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool wb_dying(struct bdi_writeback *wb)
{
 return false;
}
# 13 "./include/linux/writeback.h" 2
# 1 "./include/linux/blk_types.h" 1
# 10 "./include/linux/blk_types.h"
# 1 "./include/linux/bvec.h" 1
# 18 "./include/linux/bvec.h"
struct page;
# 32 "./include/linux/bvec.h"
struct bio_vec {
 struct page *bv_page;
 unsigned int bv_len;
 unsigned int bv_offset;
};

struct bvec_iter {
 sector_t bi_sector;

 unsigned int bi_size;

 unsigned int bi_idx;

 unsigned int bi_bvec_done;

} __attribute__((__packed__));

struct bvec_iter_all {
 struct bio_vec bv;
 int idx;
 unsigned done;
};
# 101 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bvec_iter_advance(const struct bio_vec *bv,
  struct bvec_iter *iter, unsigned bytes)
{
 unsigned int idx = iter->bi_idx;

 if (({ int __ret_warn_on = !!(bytes > iter->bi_size); ({ if (0) ({ do {} while (0); _printk("Attempted to advance past end of bvec iter\n"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); })) {

  iter->bi_size = 0;
  return false;
 }

 iter->bi_size -= bytes;
 bytes += iter->bi_bvec_done;

 while (bytes && bytes >= bv[idx].bv_len) {
  bytes -= bv[idx].bv_len;
  idx++;
 }

 iter->bi_idx = idx;
 iter->bi_bvec_done = bytes;
 return true;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bvec_iter_advance_single(const struct bio_vec *bv,
    struct bvec_iter *iter, unsigned int bytes)
{
 unsigned int done = iter->bi_bvec_done + bytes;

 if (done == bv[iter->bi_idx].bv_len) {
  done = 0;
  iter->bi_idx++;
 }
 iter->bi_bvec_done = done;
 iter->bi_size -= bytes;
}
# 157 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio_vec *bvec_init_iter_all(struct bvec_iter_all *iter_all)
{
 iter_all->done = 0;
 iter_all->idx = 0;

 return &iter_all->bv;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bvec_advance(const struct bio_vec *bvec,
    struct bvec_iter_all *iter_all)
{
 struct bio_vec *bv = &iter_all->bv;

 if (iter_all->done) {
  bv->bv_page++;
  bv->bv_offset = 0;
 } else {
  bv->bv_page = bvec->bv_page + (bvec->bv_offset >> 12);
  bv->bv_offset = bvec->bv_offset & ~(~(((1UL) << 12)-1));
 }
 bv->bv_len = __builtin_choose_expr(((!!(sizeof((typeof((unsigned int)(((1UL) << 12) - bv->bv_offset)) *)1 == (typeof((unsigned int)(bvec->bv_len - iter_all->done)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(((1UL) << 12) - bv->bv_offset)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(bvec->bv_len - iter_all->done)) * 0l)) : (int *)8))))), (((unsigned int)(((1UL) << 12) - bv->bv_offset)) < ((unsigned int)(bvec->bv_len - iter_all->done)) ? ((unsigned int)(((1UL) << 12) - bv->bv_offset)) : ((unsigned int)(bvec->bv_len - iter_all->done))), ({ typeof((unsigned int)(((1UL) << 12) - bv->bv_offset)) __UNIQUE_ID___x380 = ((unsigned int)(((1UL) << 12) - bv->bv_offset)); typeof((unsigned int)(bvec->bv_len - iter_all->done)) __UNIQUE_ID___y381 = ((unsigned int)(bvec->bv_len - iter_all->done)); ((__UNIQUE_ID___x380) < (__UNIQUE_ID___y381) ? (__UNIQUE_ID___x380) : (__UNIQUE_ID___y381)); }));

 iter_all->done += bv->bv_len;

 if (iter_all->done == bvec->bv_len) {
  iter_all->idx++;
  iter_all->done = 0;
 }
}
# 194 "./include/linux/bvec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *bvec_kmap_local(struct bio_vec *bvec)
{
 return kmap_local_page(bvec->bv_page) + bvec->bv_offset;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcpy_from_bvec(char *to, struct bio_vec *bvec)
{
 memcpy_from_page(to, bvec->bv_page, bvec->bv_offset, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcpy_to_bvec(struct bio_vec *bvec, const char *from)
{
 memcpy_to_page(bvec->bv_page, bvec->bv_offset, from, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memzero_bvec(struct bio_vec *bvec)
{
 memzero_page(bvec->bv_page, bvec->bv_offset, bvec->bv_len);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *bvec_virt(struct bio_vec *bvec)
{
 ({ int __ret_warn_on = !!(PageHighMem(bvec->bv_page)); __builtin_expect(!!(__ret_warn_on), 0); });
 return lowmem_page_address(bvec->bv_page) + bvec->bv_offset;
}
# 11 "./include/linux/blk_types.h" 2



struct bio_set;
struct bio;
struct bio_integrity_payload;
struct page;
struct io_context;
struct cgroup_subsys_state;
typedef void (bio_end_io_t) (struct bio *);
struct bio_crypt_ctx;
# 40 "./include/linux/blk_types.h"
struct block_device {
 sector_t bd_start_sect;
 sector_t bd_nr_sectors;
 struct disk_stats *bd_stats;
 unsigned long bd_stamp;
 bool bd_read_only;
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 void * bd_claiming;
 struct device bd_device;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;
 struct kobject *bd_holder_dir;
 u8 bd_partno;
 spinlock_t bd_size_lock;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
 struct super_block *bd_fsfreeze_sb;

 struct partition_meta_info *bd_meta_info;



} ;
# 89 "./include/linux/blk_types.h"
typedef u8 blk_status_t;
# 168 "./include/linux/blk_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool blk_path_error(blk_status_t error)
{
 switch (error) {
 case (( blk_status_t)1):
 case (( blk_status_t)3):
 case (( blk_status_t)5):
 case (( blk_status_t)6):
 case (( blk_status_t)7):
 case (( blk_status_t)8):
  return false;
 }


 return true;
}
# 202 "./include/linux/blk_types.h"
struct bio_issue {
 u64 value;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 __bio_issue_time(u64 time)
{
 return time & ((1ULL << ((64 - 1) - 12)) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 bio_issue_time(struct bio_issue *issue)
{
 return __bio_issue_time(issue->value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sector_t bio_issue_size(struct bio_issue *issue)
{
 return ((issue->value & (((1ULL << 12) - 1) << ((64 - 1) - 12))) >> ((64 - 1) - 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_issue_init(struct bio_issue *issue,
           sector_t size)
{
 size &= (1ULL << 12) - 1;
 issue->value = ((issue->value & (~((1ULL << (64 - 1)) - 1))) |
   (ktime_get_ns() & ((1ULL << ((64 - 1) - 12)) - 1)) |
   ((u64)size << ((64 - 1) - 12)));
}

typedef unsigned int blk_qc_t;






struct bio {
 struct bio *bi_next;
 struct block_device *bi_bdev;
 unsigned int bi_opf;



 unsigned short bi_flags;
 unsigned short bi_ioprio;
 unsigned short bi_write_hint;
 blk_status_t bi_status;
 atomic_t __bi_remaining;

 struct bvec_iter bi_iter;

 blk_qc_t bi_cookie;
 bio_end_io_t *bi_end_io;
 void *bi_private;
# 273 "./include/linux/blk_types.h"
 union {



 };

 unsigned short bi_vcnt;





 unsigned short bi_max_vecs;

 atomic_t __bi_cnt;

 struct bio_vec *bi_io_vec;

 struct bio_set *bi_pool;






 struct bio_vec bi_inline_vecs[];
};







enum {
 BIO_NO_PAGE_REF,
 BIO_CLONED,
 BIO_BOUNCED,
 BIO_WORKINGSET,
 BIO_QUIET,
 BIO_CHAIN,
 BIO_REFFED,
 BIO_THROTTLED,

 BIO_TRACE_COMPLETION,

 BIO_CGROUP_ACCT,
 BIO_TRACKED,
 BIO_REMAPPED,
 BIO_ZONE_WRITE_LOCKED,
 BIO_PERCPU_CACHE,
 BIO_FLAG_LAST
};

typedef __u32 blk_mq_req_flags_t;
# 346 "./include/linux/blk_types.h"
enum req_opf {

 REQ_OP_READ = 0,

 REQ_OP_WRITE = 1,

 REQ_OP_FLUSH = 2,

 REQ_OP_DISCARD = 3,

 REQ_OP_SECURE_ERASE = 5,

 REQ_OP_WRITE_SAME = 7,

 REQ_OP_WRITE_ZEROES = 9,

 REQ_OP_ZONE_OPEN = 10,

 REQ_OP_ZONE_CLOSE = 11,

 REQ_OP_ZONE_FINISH = 12,

 REQ_OP_ZONE_APPEND = 13,

 REQ_OP_ZONE_RESET = 15,

 REQ_OP_ZONE_RESET_ALL = 17,


 REQ_OP_DRV_IN = 34,
 REQ_OP_DRV_OUT = 35,

 REQ_OP_LAST,
};

enum req_flag_bits {
 __REQ_FAILFAST_DEV =
  8,
 __REQ_FAILFAST_TRANSPORT,
 __REQ_FAILFAST_DRIVER,
 __REQ_SYNC,
 __REQ_META,
 __REQ_PRIO,
 __REQ_NOMERGE,
 __REQ_IDLE,
 __REQ_INTEGRITY,
 __REQ_FUA,
 __REQ_PREFLUSH,
 __REQ_RAHEAD,
 __REQ_BACKGROUND,
 __REQ_NOWAIT,







 __REQ_CGROUP_PUNT,


 __REQ_NOUNMAP,

 __REQ_POLLED,


 __REQ_DRV,
 __REQ_SWAP,
 __REQ_NR_BITS,
};
# 445 "./include/linux/blk_types.h"
enum stat_group {
 STAT_READ,
 STAT_WRITE,
 STAT_DISCARD,
 STAT_FLUSH,

 NR_STAT_GROUPS
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_set_op_attrs(struct bio *bio, unsigned op,
  unsigned op_flags)
{
 bio->bi_opf = op | op_flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool op_is_write(unsigned int op)
{
 return (op & 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool op_is_flush(unsigned int op)
{
 return op & ((1ULL << __REQ_FUA) | (1ULL << __REQ_PREFLUSH));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool op_is_sync(unsigned int op)
{
 return (op & ((1 << 8) - 1)) == REQ_OP_READ ||
  (op & ((1ULL << __REQ_SYNC) | (1ULL << __REQ_FUA) | (1ULL << __REQ_PREFLUSH)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool op_is_discard(unsigned int op)
{
 return (op & ((1 << 8) - 1)) == REQ_OP_DISCARD;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool op_is_zone_mgmt(enum req_opf op)
{
 switch (op & ((1 << 8) - 1)) {
 case REQ_OP_ZONE_RESET:
 case REQ_OP_ZONE_OPEN:
 case REQ_OP_ZONE_CLOSE:
 case REQ_OP_ZONE_FINISH:
  return true;
 default:
  return false;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int op_stat_group(unsigned int op)
{
 if (op_is_discard(op))
  return STAT_DISCARD;
 return op_is_write(op);
}

struct blk_rq_stat {
 u64 mean;
 u64 min;
 u64 max;
 u32 nr_samples;
 u64 batch;
};
# 14 "./include/linux/writeback.h" 2

struct bio;

extern __attribute__((section(".data" ""))) __typeof__(int) dirty_throttle_leaks;
# 35 "./include/linux/writeback.h"
struct backing_dev_info;




enum writeback_sync_modes {
 WB_SYNC_NONE,
 WB_SYNC_ALL,
};






struct writeback_control {
 long nr_to_write;

 long pages_skipped;






 loff_t range_start;
 loff_t range_end;

 enum writeback_sync_modes sync_mode;

 unsigned for_kupdate:1;
 unsigned for_background:1;
 unsigned tagged_writepages:1;
 unsigned for_reclaim:1;
 unsigned range_cyclic:1;
 unsigned for_sync:1;







 unsigned no_cgroup_owner:1;

 unsigned punt_to_cgroup:1;
# 94 "./include/linux/writeback.h"
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wbc_to_write_flags(struct writeback_control *wbc)
{
 int flags = 0;

 if (wbc->punt_to_cgroup)
  flags = (1ULL << __REQ_CGROUP_PUNT);

 if (wbc->sync_mode == WB_SYNC_ALL)
  flags |= (1ULL << __REQ_SYNC);
 else if (wbc->for_kupdate || wbc->for_background)
  flags |= (1ULL << __REQ_BACKGROUND);

 return flags;
}
# 125 "./include/linux/writeback.h"
struct wb_domain {
 spinlock_t lock;
# 145 "./include/linux/writeback.h"
 struct fprop_global completions;
 struct timer_list period_timer;
 unsigned long period_time;
# 159 "./include/linux/writeback.h"
 unsigned long dirty_limit_tstamp;
 unsigned long dirty_limit;
};
# 175 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wb_domain_size_changed(struct wb_domain *dom)
{
 spin_lock(&dom->lock);
 dom->dirty_limit_tstamp = jiffies;
 dom->dirty_limit = 0;
 spin_unlock(&dom->lock);
}




struct bdi_writeback;
void writeback_inodes_sb(struct super_block *, enum wb_reason reason);
void writeback_inodes_sb_nr(struct super_block *, unsigned long nr,
       enum wb_reason reason);
void try_to_writeback_inodes_sb(struct super_block *sb, enum wb_reason reason);
void sync_inodes_sb(struct super_block *);
void wakeup_flusher_threads(enum wb_reason reason);
void wakeup_flusher_threads_bdi(struct backing_dev_info *bdi,
    enum wb_reason reason);
void inode_wait_for_writeback(struct inode *inode);
void inode_io_list_del(struct inode *inode);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wait_on_inode(struct inode *inode)
{
 do { __might_sleep("include/linux/writeback.h", 201); might_resched(); } while (0);
 wait_on_bit(&inode->i_state, 3, 0x0002);
}
# 293 "./include/linux/writeback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_attach_wb(struct inode *inode, struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_detach_wb(struct inode *inode)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wbc_attach_and_unlock_inode(struct writeback_control *wbc,
            struct inode *inode)

{
 spin_unlock(&inode->i_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wbc_attach_fdatawrite_inode(struct writeback_control *wbc,
            struct inode *inode)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wbc_detach_inode(struct writeback_control *wbc)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wbc_init_bio(struct writeback_control *wbc, struct bio *bio)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wbc_account_cgroup_owner(struct writeback_control *wbc,
         struct page *page, size_t bytes)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cgroup_writeback_umount(void)
{
}






void laptop_io_completion(struct backing_dev_info *info);
void laptop_sync_completion(void);
void laptop_mode_timer_fn(struct timer_list *t);
bool node_dirty_ok(struct pglist_data *pgdat);
int wb_domain_init(struct wb_domain *dom, gfp_t gfp);




extern struct wb_domain global_wb_domain;


extern int dirty_background_ratio;
extern unsigned long dirty_background_bytes;
extern int vm_dirty_ratio;
extern unsigned long vm_dirty_bytes;
extern unsigned int dirty_writeback_interval;
extern unsigned int dirty_expire_interval;
extern unsigned int dirtytime_expire_interval;
extern int vm_highmem_is_dirtyable;
extern int laptop_mode;

int dirty_background_ratio_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_background_bytes_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_ratio_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_bytes_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirtytime_interval_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int dirty_writeback_centisecs_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);

void global_dirty_limits(unsigned long *pbackground, unsigned long *pdirty);
unsigned long wb_calc_thresh(struct bdi_writeback *wb, unsigned long thresh);

void wb_update_bandwidth(struct bdi_writeback *wb);
void balance_dirty_pages_ratelimited(struct address_space *mapping);
bool wb_over_bg_thresh(struct bdi_writeback *wb);

typedef int (*writepage_t)(struct page *page, struct writeback_control *wbc,
    void *data);

int generic_writepages(struct address_space *mapping,
         struct writeback_control *wbc);
void tag_pages_for_writeback(struct address_space *mapping,
        unsigned long start, unsigned long end);
int write_cache_pages(struct address_space *mapping,
        struct writeback_control *wbc, writepage_t writepage,
        void *data);
int do_writepages(struct address_space *mapping, struct writeback_control *wbc);
void writeback_set_ratelimit(void);
void tag_pages_for_writeback(struct address_space *mapping,
        unsigned long start, unsigned long end);

bool filemap_dirty_folio(struct address_space *mapping, struct folio *folio);
void folio_account_redirty(struct folio *folio);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_page_redirty(struct page *page)
{
 folio_account_redirty((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
bool folio_redirty_for_writepage(struct writeback_control *, struct folio *);
bool redirty_page_for_writepage(struct writeback_control *, struct page *);

void sb_mark_inode_writeback(struct inode *inode);
void sb_clear_inode_writeback(struct inode *inode);
# 23 "./include/linux/memcontrol.h" 2


struct mem_cgroup;
struct obj_cgroup;
struct page;
struct mm_struct;
struct kmem_cache;


enum memcg_stat_item {
 MEMCG_SWAP = NR_VM_NODE_STAT_ITEMS,
 MEMCG_SOCK,
 MEMCG_PERCPU_B,
 MEMCG_NR_STAT,
};

enum memcg_memory_event {
 MEMCG_LOW,
 MEMCG_HIGH,
 MEMCG_MAX,
 MEMCG_OOM,
 MEMCG_OOM_KILL,
 MEMCG_SWAP_HIGH,
 MEMCG_SWAP_MAX,
 MEMCG_SWAP_FAIL,
 MEMCG_NR_MEMORY_EVENTS,
};

struct mem_cgroup_reclaim_cookie {
 pg_data_t *pgdat;
 unsigned int generation;
};






struct mem_cgroup_id {
 int id;
 refcount_t ref;
};







enum mem_cgroup_events_target {
 MEM_CGROUP_TARGET_THRESH,
 MEM_CGROUP_TARGET_SOFTLIMIT,
 MEM_CGROUP_NTARGETS,
};

struct memcg_vmstats_percpu {

 long state[MEMCG_NR_STAT];
 unsigned long events[NR_VM_EVENT_ITEMS];


 long state_prev[MEMCG_NR_STAT];
 unsigned long events_prev[NR_VM_EVENT_ITEMS];


 unsigned long nr_page_events;
 unsigned long targets[MEM_CGROUP_NTARGETS];
};

struct memcg_vmstats {

 long state[MEMCG_NR_STAT];
 unsigned long events[NR_VM_EVENT_ITEMS];


 long state_pending[MEMCG_NR_STAT];
 unsigned long events_pending[NR_VM_EVENT_ITEMS];
};

struct mem_cgroup_reclaim_iter {
 struct mem_cgroup *position;

 unsigned int generation;
};





struct shrinker_info {
 struct callback_head rcu;
 atomic_long_t *nr_deferred;
 unsigned long *map;
};

struct lruvec_stats_percpu {

 long state[NR_VM_NODE_STAT_ITEMS];


 long state_prev[NR_VM_NODE_STAT_ITEMS];
};

struct lruvec_stats {

 long state[NR_VM_NODE_STAT_ITEMS];


 long state_pending[NR_VM_NODE_STAT_ITEMS];
};




struct mem_cgroup_per_node {
 struct lruvec lruvec;

 struct lruvec_stats_percpu *lruvec_stats_percpu;
 struct lruvec_stats lruvec_stats;

 unsigned long lru_zone_size[3][NR_LRU_LISTS];

 struct mem_cgroup_reclaim_iter iter;

 struct shrinker_info *shrinker_info;

 struct rb_node tree_node;
 unsigned long usage_in_excess;

 bool on_tree;
 struct mem_cgroup *memcg;

};

struct mem_cgroup_threshold {
 struct eventfd_ctx *eventfd;
 unsigned long threshold;
};


struct mem_cgroup_threshold_ary {

 int current_threshold;

 unsigned int size;

 struct mem_cgroup_threshold entries[];
};

struct mem_cgroup_thresholds {

 struct mem_cgroup_threshold_ary *primary;





 struct mem_cgroup_threshold_ary *spare;
};
# 202 "./include/linux/memcontrol.h"
struct memcg_cgwb_frn {
 u64 bdi_id;
 int memcg_id;
 u64 at;
 struct wb_completion done;
};







struct obj_cgroup {
 struct percpu_ref refcnt;
 struct mem_cgroup *memcg;
 atomic_t nr_charged_bytes;
 union {
  struct list_head list;
  struct callback_head rcu;
 };
};







struct mem_cgroup {
 struct cgroup_subsys_state css;


 struct mem_cgroup_id id;


 struct page_counter memory;

 union {
  struct page_counter swap;
  struct page_counter memsw;
 };


 struct page_counter kmem;
 struct page_counter tcpmem;


 struct work_struct high_work;

 unsigned long soft_limit;


 struct vmpressure vmpressure;




 bool oom_group;


 bool oom_lock;
 int under_oom;

 int swappiness;

 int oom_kill_disable;


 struct cgroup_file events_file;
 struct cgroup_file events_local_file;


 struct cgroup_file swap_events_file;


 struct mutex thresholds_lock;


 struct mem_cgroup_thresholds thresholds;


 struct mem_cgroup_thresholds memsw_thresholds;


 struct list_head oom_notify;





 unsigned long move_charge_at_immigrate;

 spinlock_t move_lock;
 unsigned long move_lock_flags;

                      ;


 struct memcg_vmstats vmstats;


 atomic_long_t memory_events[MEMCG_NR_MEMORY_EVENTS];
 atomic_long_t memory_events_local[MEMCG_NR_MEMORY_EVENTS];

 unsigned long socket_pressure;


 bool tcpmem_active;
 int tcpmem_pressure;







                      ;




 atomic_t moving_account;
 struct task_struct *move_lock_task;

 struct memcg_vmstats_percpu *vmstats_percpu;
# 336 "./include/linux/memcontrol.h"
 struct list_head event_list;
 spinlock_t event_list_lock;





 struct mem_cgroup_per_node *nodeinfo[];
};







extern struct mem_cgroup *root_mem_cgroup;

enum page_memcg_data_flags {

 MEMCG_DATA_OBJCGS = (1UL << 0),

 MEMCG_DATA_KMEM = (1UL << 1),

 __NR_MEMCG_DATA_FLAGS = (1UL << 2),
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_memcg_kmem(struct folio *folio);
# 374 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *obj_cgroup_memcg(struct obj_cgroup *objcg)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_382(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(objcg->memcg) == sizeof(char) || sizeof(objcg->memcg) == sizeof(short) || sizeof(objcg->memcg) == sizeof(int) || sizeof(objcg->memcg) == sizeof(long)) || sizeof(objcg->memcg) == sizeof(long long))) __compiletime_assert_382(); } while (0); (*(const volatile typeof( _Generic((objcg->memcg), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (objcg->memcg))) *)&(objcg->memcg)); });
}
# 389 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *__folio_memcg(struct folio *folio)
{
 unsigned long memcg_data = folio->memcg_data;

 do { if (__builtin_expect(!!(folio_test_slab(folio)), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "folio_test_slab(folio)"")"); do { ({ asm volatile("383" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "383" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("384" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "384" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 do { if (__builtin_expect(!!(memcg_data & MEMCG_DATA_OBJCGS), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "memcg_data & MEMCG_DATA_OBJCGS"")"); do { ({ asm volatile("385" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "385" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("386" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "386" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 do { if (__builtin_expect(!!(memcg_data & MEMCG_DATA_KMEM), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "memcg_data & MEMCG_DATA_KMEM"")"); do { ({ asm volatile("387" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "387" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("388" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "388" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);

 return (struct mem_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 410 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct obj_cgroup *__folio_objcg(struct folio *folio)
{
 unsigned long memcg_data = folio->memcg_data;

 do { if (__builtin_expect(!!(folio_test_slab(folio)), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "folio_test_slab(folio)"")"); do { ({ asm volatile("389" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "389" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("390" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "390" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 do { if (__builtin_expect(!!(memcg_data & MEMCG_DATA_OBJCGS), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "memcg_data & MEMCG_DATA_OBJCGS"")"); do { ({ asm volatile("391" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "391" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("392" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "392" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 do { if (__builtin_expect(!!(!(memcg_data & MEMCG_DATA_KMEM)), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "!(memcg_data & MEMCG_DATA_KMEM)"")"); do { ({ asm volatile("393" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "393" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("394" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "394" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);

 return (struct obj_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 441 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *folio_memcg(struct folio *folio)
{
 if (folio_memcg_kmem(folio))
  return obj_cgroup_memcg(__folio_objcg(folio));
 return __folio_memcg(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *page_memcg(struct page *page)
{
 return folio_memcg((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
# 464 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *folio_memcg_rcu(struct folio *folio)
{
 unsigned long memcg_data = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_395(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(folio->memcg_data) == sizeof(char) || sizeof(folio->memcg_data) == sizeof(short) || sizeof(folio->memcg_data) == sizeof(int) || sizeof(folio->memcg_data) == sizeof(long)) || sizeof(folio->memcg_data) == sizeof(long long))) __compiletime_assert_395(); } while (0); (*(const volatile typeof( _Generic((folio->memcg_data), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (folio->memcg_data))) *)&(folio->memcg_data)); });

 do { if (__builtin_expect(!!(folio_test_slab(folio)), 0)) { dump_page(&folio->page, "VM_BUG_ON_FOLIO(" "folio_test_slab(folio)"")"); do { ({ asm volatile("396" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "396" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("397" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "397" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } } while (0);
 ({ int __ret_warn_on = !!(!rcu_read_lock_held()); __builtin_expect(!!(__ret_warn_on), 0); });

 if (memcg_data & MEMCG_DATA_KMEM) {
  struct obj_cgroup *objcg;

  objcg = (void *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
  return obj_cgroup_memcg(objcg);
 }

 return (struct mem_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 502 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *page_memcg_check(struct page *page)
{




 unsigned long memcg_data = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_398(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->memcg_data) == sizeof(char) || sizeof(page->memcg_data) == sizeof(short) || sizeof(page->memcg_data) == sizeof(int) || sizeof(page->memcg_data) == sizeof(long)) || sizeof(page->memcg_data) == sizeof(long long))) __compiletime_assert_398(); } while (0); (*(const volatile typeof( _Generic((page->memcg_data), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->memcg_data))) *)&(page->memcg_data)); });

 if (memcg_data & MEMCG_DATA_OBJCGS)
  return ((void *)0);

 if (memcg_data & MEMCG_DATA_KMEM) {
  struct obj_cgroup *objcg;

  objcg = (void *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
  return obj_cgroup_memcg(objcg);
 }

 return (struct mem_cgroup *)(memcg_data & ~(__NR_MEMCG_DATA_FLAGS - 1));
}
# 580 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_memcg_kmem(struct folio *folio)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct obj_cgroup **page_objcgs(struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct obj_cgroup **page_objcgs_check(struct page *page)
{
 return ((void *)0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool PageMemcgKmem(struct page *page)
{
 return folio_memcg_kmem((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_is_root(struct mem_cgroup *memcg)
{
 return (memcg == root_mem_cgroup);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_disabled(void)
{
 return !__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_enabled_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_enabled_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_enabled_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memory_cgrp_subsys_enabled_key)->key) > 0; })), 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_protection(struct mem_cgroup *root,
      struct mem_cgroup *memcg,
      unsigned long *min,
      unsigned long *low)
{
 *min = *low = 0;

 if (mem_cgroup_disabled())
  return;
# 654 "./include/linux/memcontrol.h"
 if (root == memcg)
  return;

 *min = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_399(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.emin) == sizeof(char) || sizeof(memcg->memory.emin) == sizeof(short) || sizeof(memcg->memory.emin) == sizeof(int) || sizeof(memcg->memory.emin) == sizeof(long)) || sizeof(memcg->memory.emin) == sizeof(long long))) __compiletime_assert_399(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.emin), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.emin))) *)&(memcg->memory.emin)); });
 *low = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_400(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.elow) == sizeof(char) || sizeof(memcg->memory.elow) == sizeof(short) || sizeof(memcg->memory.elow) == sizeof(int) || sizeof(memcg->memory.elow) == sizeof(long)) || sizeof(memcg->memory.elow) == sizeof(long long))) __compiletime_assert_400(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.elow), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.elow))) *)&(memcg->memory.elow)); });
}

void mem_cgroup_calculate_protection(struct mem_cgroup *root,
         struct mem_cgroup *memcg);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_supports_protection(struct mem_cgroup *memcg)
{




 return !mem_cgroup_disabled() && !mem_cgroup_is_root(memcg);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_below_low(struct mem_cgroup *memcg)
{
 if (!mem_cgroup_supports_protection(memcg))
  return false;

 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_401(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.elow) == sizeof(char) || sizeof(memcg->memory.elow) == sizeof(short) || sizeof(memcg->memory.elow) == sizeof(int) || sizeof(memcg->memory.elow) == sizeof(long)) || sizeof(memcg->memory.elow) == sizeof(long long))) __compiletime_assert_401(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.elow), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.elow))) *)&(memcg->memory.elow)); }) >=
  page_counter_read(&memcg->memory);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_below_min(struct mem_cgroup *memcg)
{
 if (!mem_cgroup_supports_protection(memcg))
  return false;

 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_402(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->memory.emin) == sizeof(char) || sizeof(memcg->memory.emin) == sizeof(short) || sizeof(memcg->memory.emin) == sizeof(int) || sizeof(memcg->memory.emin) == sizeof(long)) || sizeof(memcg->memory.emin) == sizeof(long long))) __compiletime_assert_402(); } while (0); (*(const volatile typeof( _Generic((memcg->memory.emin), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->memory.emin))) *)&(memcg->memory.emin)); }) >=
  page_counter_read(&memcg->memory);
}

int __mem_cgroup_charge(struct folio *folio, struct mm_struct *mm, gfp_t gfp);
# 708 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mem_cgroup_charge(struct folio *folio, struct mm_struct *mm,
        gfp_t gfp)
{
 if (mem_cgroup_disabled())
  return 0;
 return __mem_cgroup_charge(folio, mm, gfp);
}

int mem_cgroup_swapin_charge_page(struct page *page, struct mm_struct *mm,
      gfp_t gfp, swp_entry_t entry);
void mem_cgroup_swapin_uncharge_swap(swp_entry_t entry);

void __mem_cgroup_uncharge(struct folio *folio);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_uncharge(struct folio *folio)
{
 if (mem_cgroup_disabled())
  return;
 __mem_cgroup_uncharge(folio);
}

void __mem_cgroup_uncharge_list(struct list_head *page_list);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_uncharge_list(struct list_head *page_list)
{
 if (mem_cgroup_disabled())
  return;
 __mem_cgroup_uncharge_list(page_list);
}

void mem_cgroup_migrate(struct folio *old, struct folio *new);
# 754 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct lruvec *mem_cgroup_lruvec(struct mem_cgroup *memcg,
            struct pglist_data *pgdat)
{
 struct mem_cgroup_per_node *mz;
 struct lruvec *lruvec;

 if (mem_cgroup_disabled()) {
  lruvec = &pgdat->__lruvec;
  goto out;
 }

 if (!memcg)
  memcg = root_mem_cgroup;

 mz = memcg->nodeinfo[pgdat->node_id];
 lruvec = &mz->lruvec;
out:





 if (__builtin_expect(!!(lruvec->pgdat != pgdat), 0))
  lruvec->pgdat = pgdat;
 return lruvec;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct lruvec *folio_lruvec(struct folio *folio)
{
 struct mem_cgroup *memcg = folio_memcg(folio);

 ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(!memcg && !mem_cgroup_disabled()); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { dump_page(&folio->page, "VM_WARN_ON_ONCE_FOLIO(" "!memcg && !mem_cgroup_disabled()"")"); __warned = true; ({ int __ret_warn_on = !!(1); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 return mem_cgroup_lruvec(memcg, folio_pgdat(folio));
}

struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p);

struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *mm);

struct lruvec *folio_lruvec_lock(struct folio *folio);
struct lruvec *folio_lruvec_lock_irq(struct folio *folio);
struct lruvec *folio_lruvec_lock_irqsave(struct folio *folio,
      unsigned long *flags);


void lruvec_memcg_debug(struct lruvec *lruvec, struct folio *folio);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
struct mem_cgroup *mem_cgroup_from_css(struct cgroup_subsys_state *css){
 return css ? ({ void *__mptr = (void *)(css); _Static_assert(__builtin_types_compatible_p(typeof(*(css)), typeof(((struct mem_cgroup *)0)->css)) || __builtin_types_compatible_p(typeof(*(css)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup *)(__mptr - __builtin_offsetof(struct mem_cgroup, css))); }) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool obj_cgroup_tryget(struct obj_cgroup *objcg)
{
 return percpu_ref_tryget(&objcg->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void obj_cgroup_get(struct obj_cgroup *objcg)
{
 percpu_ref_get(&objcg->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void obj_cgroup_get_many(struct obj_cgroup *objcg,
           unsigned long nr)
{
 percpu_ref_get_many(&objcg->refcnt, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void obj_cgroup_put(struct obj_cgroup *objcg)
{
 percpu_ref_put(&objcg->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_put(struct mem_cgroup *memcg)
{
 if (memcg)
  css_put(&memcg->css);
}




struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *,
       struct mem_cgroup *,
       struct mem_cgroup_reclaim_cookie *);
void mem_cgroup_iter_break(struct mem_cgroup *, struct mem_cgroup *);
int mem_cgroup_scan_tasks(struct mem_cgroup *,
     int (*)(struct task_struct *, void *), void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned short mem_cgroup_id(struct mem_cgroup *memcg)
{
 if (mem_cgroup_disabled())
  return 0;

 return memcg->id.id;
}
struct mem_cgroup *mem_cgroup_from_id(unsigned short id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *mem_cgroup_from_seq(struct seq_file *m)
{
 return mem_cgroup_from_css(seq_css(m));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *lruvec_memcg(struct lruvec *lruvec)
{
 struct mem_cgroup_per_node *mz;

 if (mem_cgroup_disabled())
  return ((void *)0);

 mz = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 return mz->memcg;
}
# 887 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg)
{
 if (!memcg->memory.parent)
  return ((void *)0);
 return ({ void *__mptr = (void *)(memcg->memory.parent); _Static_assert(__builtin_types_compatible_p(typeof(*(memcg->memory.parent)), typeof(((struct mem_cgroup *)0)->memory)) || __builtin_types_compatible_p(typeof(*(memcg->memory.parent)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup *)(__mptr - __builtin_offsetof(struct mem_cgroup, memory))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_is_descendant(struct mem_cgroup *memcg,
         struct mem_cgroup *root)
{
 if (root == memcg)
  return true;
 return cgroup_is_descendant(memcg->css.cgroup, root->css.cgroup);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mm_match_cgroup(struct mm_struct *mm,
       struct mem_cgroup *memcg)
{
 struct mem_cgroup *task_memcg;
 bool match = false;

 rcu_read_lock();
 task_memcg = mem_cgroup_from_task(({ typeof(*(mm->owner)) *________p1 = (typeof(*(mm->owner)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_403(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((mm->owner)) == sizeof(char) || sizeof((mm->owner)) == sizeof(short) || sizeof((mm->owner)) == sizeof(int) || sizeof((mm->owner)) == sizeof(long)) || sizeof((mm->owner)) == sizeof(long long))) __compiletime_assert_403(); } while (0); (*(const volatile typeof( _Generic(((mm->owner)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mm->owner)))) *)&((mm->owner))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(mm->owner)) *)(________p1)); }));
 if (task_memcg)
  match = mem_cgroup_is_descendant(task_memcg, memcg);
 rcu_read_unlock();
 return match;
}

struct cgroup_subsys_state *mem_cgroup_css_from_page(struct page *page);
ino_t page_cgroup_ino(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_online(struct mem_cgroup *memcg)
{
 if (mem_cgroup_disabled())
  return true;
 return !!(memcg->css.flags & CSS_ONLINE);
}

void mem_cgroup_update_lru_size(struct lruvec *lruvec, enum lru_list lru,
  int zid, int nr_pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
unsigned long mem_cgroup_get_zone_lru_size(struct lruvec *lruvec,
  enum lru_list lru, int zone_idx)
{
 struct mem_cgroup_per_node *mz;

 mz = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_404(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(char) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(short) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(int) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(long)) || sizeof(mz->lru_zone_size[zone_idx][lru]) == sizeof(long long))) __compiletime_assert_404(); } while (0); (*(const volatile typeof( _Generic((mz->lru_zone_size[zone_idx][lru]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (mz->lru_zone_size[zone_idx][lru]))) *)&(mz->lru_zone_size[zone_idx][lru])); });
}

void mem_cgroup_handle_over_high(void);

unsigned long mem_cgroup_get_max(struct mem_cgroup *memcg);

unsigned long mem_cgroup_size(struct mem_cgroup *memcg);

void mem_cgroup_print_oom_context(struct mem_cgroup *memcg,
    struct task_struct *p);

void mem_cgroup_print_oom_meminfo(struct mem_cgroup *memcg);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_enter_user_fault(void)
{
 ({ int __ret_warn_on = !!(get_current()->in_user_fault); __builtin_expect(!!(__ret_warn_on), 0); });
 get_current()->in_user_fault = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_exit_user_fault(void)
{
 ({ int __ret_warn_on = !!(!get_current()->in_user_fault); __builtin_expect(!!(__ret_warn_on), 0); });
 get_current()->in_user_fault = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_in_memcg_oom(struct task_struct *p)
{
 return p->memcg_in_oom;
}

bool mem_cgroup_oom_synchronize(bool wait);
struct mem_cgroup *mem_cgroup_get_oom_group(struct task_struct *victim,
         struct mem_cgroup *oom_domain);
void mem_cgroup_print_oom_group(struct mem_cgroup *memcg);





void folio_memcg_lock(struct folio *folio);
void folio_memcg_unlock(struct folio *folio);
void lock_page_memcg(struct page *page);
void unlock_page_memcg(struct page *page);

void __mod_memcg_state(struct mem_cgroup *memcg, int idx, int val);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mod_memcg_state(struct mem_cgroup *memcg,
       int idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_memcg_state(memcg, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long memcg_page_state(struct mem_cgroup *memcg, int idx)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_405(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->vmstats.state[idx]) == sizeof(char) || sizeof(memcg->vmstats.state[idx]) == sizeof(short) || sizeof(memcg->vmstats.state[idx]) == sizeof(int) || sizeof(memcg->vmstats.state[idx]) == sizeof(long)) || sizeof(memcg->vmstats.state[idx]) == sizeof(long long))) __compiletime_assert_405(); } while (0); (*(const volatile typeof( _Generic((memcg->vmstats.state[idx]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->vmstats.state[idx]))) *)&(memcg->vmstats.state[idx])); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long lruvec_page_state(struct lruvec *lruvec,
           enum node_stat_item idx)
{
 struct mem_cgroup_per_node *pn;

 if (mem_cgroup_disabled())
  return global_node_page_state(idx);

 pn = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_406(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(pn->lruvec_stats.state[idx]) == sizeof(char) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(short) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(int) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(long)) || sizeof(pn->lruvec_stats.state[idx]) == sizeof(long long))) __compiletime_assert_406(); } while (0); (*(const volatile typeof( _Generic((pn->lruvec_stats.state[idx]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (pn->lruvec_stats.state[idx]))) *)&(pn->lruvec_stats.state[idx])); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long lruvec_page_state_local(struct lruvec *lruvec,
          enum node_stat_item idx)
{
 struct mem_cgroup_per_node *pn;
 long x = 0;
 int cpu;

 if (mem_cgroup_disabled())
  return global_node_page_state(idx);

 pn = ({ void *__mptr = (void *)(lruvec); _Static_assert(__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct mem_cgroup_per_node *)0)->lruvec)) || __builtin_types_compatible_p(typeof(*(lruvec)), typeof(void)), "pointer type mismatch in container_of()"); ((struct mem_cgroup_per_node *)(__mptr - __builtin_offsetof(struct mem_cgroup_per_node, lruvec))); });
 for (((cpu)) = 0; ((cpu)) < 1; ((cpu))++, (void)((const struct cpumask *)&__cpu_possible_mask))
  x += (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(pn->lruvec_stats_percpu->state[idx])) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(pn->lruvec_stats_percpu->state[idx]))) *)(&(pn->lruvec_stats_percpu->state[idx])); }); }));




 return x;
}

void mem_cgroup_flush_stats(void);

void __mod_memcg_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
         int val);
void __mod_lruvec_kmem_state(void *p, enum node_stat_item idx, int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mod_lruvec_kmem_state(void *p, enum node_stat_item idx,
      int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_kmem_state(p, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mod_memcg_lruvec_state(struct lruvec *lruvec,
       enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_memcg_lruvec_state(lruvec, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

void __count_memcg_events(struct mem_cgroup *memcg, enum vm_event_item idx,
     unsigned long count);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void count_memcg_events(struct mem_cgroup *memcg,
          enum vm_event_item idx,
          unsigned long count)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __count_memcg_events(memcg, idx, count);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void count_memcg_page_event(struct page *page,
       enum vm_event_item idx)
{
 struct mem_cgroup *memcg = page_memcg(page);

 if (memcg)
  count_memcg_events(memcg, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void count_memcg_event_mm(struct mm_struct *mm,
     enum vm_event_item idx)
{
 struct mem_cgroup *memcg;

 if (mem_cgroup_disabled())
  return;

 rcu_read_lock();
 memcg = mem_cgroup_from_task(({ typeof(*(mm->owner)) *________p1 = (typeof(*(mm->owner)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_407(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((mm->owner)) == sizeof(char) || sizeof((mm->owner)) == sizeof(short) || sizeof((mm->owner)) == sizeof(int) || sizeof((mm->owner)) == sizeof(long)) || sizeof((mm->owner)) == sizeof(long long))) __compiletime_assert_407(); } while (0); (*(const volatile typeof( _Generic(((mm->owner)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mm->owner)))) *)&((mm->owner))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(mm->owner)) *)(________p1)); }));
 if (__builtin_expect(!!(memcg), 1))
  count_memcg_events(memcg, idx, 1);
 rcu_read_unlock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcg_memory_event(struct mem_cgroup *memcg,
          enum memcg_memory_event event)
{
 bool swap_event = event == MEMCG_SWAP_HIGH || event == MEMCG_SWAP_MAX ||
     event == MEMCG_SWAP_FAIL;

 atomic_long_inc(&memcg->memory_events_local[event]);
 if (!swap_event)
  cgroup_file_notify(&memcg->events_local_file);

 do {
  atomic_long_inc(&memcg->memory_events[event]);
  if (swap_event)
   cgroup_file_notify(&memcg->swap_events_file);
  else
   cgroup_file_notify(&memcg->events_file);

  if (!__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memory_cgrp_subsys_on_dfl_key)->key) > 0; })), 1))
   break;
  if (cgrp_dfl_root.flags & CGRP_ROOT_MEMORY_LOCAL_EVENTS)
   break;
 } while ((memcg = parent_mem_cgroup(memcg)) &&
   !mem_cgroup_is_root(memcg));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcg_memory_event_mm(struct mm_struct *mm,
      enum memcg_memory_event event)
{
 struct mem_cgroup *memcg;

 if (mem_cgroup_disabled())
  return;

 rcu_read_lock();
 memcg = mem_cgroup_from_task(({ typeof(*(mm->owner)) *________p1 = (typeof(*(mm->owner)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_408(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((mm->owner)) == sizeof(char) || sizeof((mm->owner)) == sizeof(short) || sizeof((mm->owner)) == sizeof(int) || sizeof((mm->owner)) == sizeof(long)) || sizeof((mm->owner)) == sizeof(long long))) __compiletime_assert_408(); } while (0); (*(const volatile typeof( _Generic(((mm->owner)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mm->owner)))) *)&((mm->owner))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(mm->owner)) *)(________p1)); }));
 if (__builtin_expect(!!(memcg), 1))
  memcg_memory_event(memcg, event);
 rcu_read_unlock();
}

void split_page_memcg(struct page *head, unsigned int nr);

unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *pgdat, int order,
      gfp_t gfp_mask,
      unsigned long *total_scanned);
# 1526 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __inc_lruvec_kmem_state(void *p, enum node_stat_item idx)
{
 __mod_lruvec_kmem_state(p, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __dec_lruvec_kmem_state(void *p, enum node_stat_item idx)
{
 __mod_lruvec_kmem_state(p, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct lruvec *parent_lruvec(struct lruvec *lruvec)
{
 struct mem_cgroup *memcg;

 memcg = lruvec_memcg(lruvec);
 if (!memcg)
  return ((void *)0);
 memcg = parent_mem_cgroup(memcg);
 if (!memcg)
  return ((void *)0);
 return mem_cgroup_lruvec(memcg, lruvec_pgdat(lruvec));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unlock_page_lruvec(struct lruvec *lruvec)
{
 spin_unlock(&lruvec->lru_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unlock_page_lruvec_irq(struct lruvec *lruvec)
{
 spin_unlock_irq(&lruvec->lru_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unlock_page_lruvec_irqrestore(struct lruvec *lruvec,
  unsigned long flags)
{
 spin_unlock_irqrestore(&lruvec->lru_lock, flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool folio_matches_lruvec(struct folio *folio,
  struct lruvec *lruvec)
{
 return lruvec_pgdat(lruvec) == folio_pgdat(folio) &&
        lruvec_memcg(lruvec) == folio_memcg(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct lruvec *folio_lruvec_relock_irq(struct folio *folio,
  struct lruvec *locked_lruvec)
{
 if (locked_lruvec) {
  if (folio_matches_lruvec(folio, locked_lruvec))
   return locked_lruvec;

  unlock_page_lruvec_irq(locked_lruvec);
 }

 return folio_lruvec_lock_irq(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct lruvec *folio_lruvec_relock_irqsave(struct folio *folio,
  struct lruvec *locked_lruvec, unsigned long *flags)
{
 if (locked_lruvec) {
  if (folio_matches_lruvec(folio, locked_lruvec))
   return locked_lruvec;

  unlock_page_lruvec_irqrestore(locked_lruvec, *flags);
 }

 return folio_lruvec_lock_irqsave(folio, flags);
}
# 1625 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *wb)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_wb_stats(struct bdi_writeback *wb,
           unsigned long *pfilepages,
           unsigned long *pheadroom,
           unsigned long *pdirty,
           unsigned long *pwriteback)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_track_foreign_dirty(struct folio *folio,
        struct bdi_writeback *wb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_cgroup_flush_foreign(struct bdi_writeback *wb)
{
}



struct sock;
bool mem_cgroup_charge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages,
        gfp_t gfp_mask);
void mem_cgroup_uncharge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages);

extern struct static_key_false memcg_sockets_enabled_key;

void mem_cgroup_sk_alloc(struct sock *sk);
void mem_cgroup_sk_free(struct sock *sk);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_under_socket_pressure(struct mem_cgroup *memcg)
{
 if (!__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&memory_cgrp_subsys_on_dfl_key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&memory_cgrp_subsys_on_dfl_key)->key) > 0; })), 1) && memcg->tcpmem_pressure)
  return true;
 do {
  if ((({ unsigned long __dummy; typeof(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_409(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->socket_pressure) == sizeof(char) || sizeof(memcg->socket_pressure) == sizeof(short) || sizeof(memcg->socket_pressure) == sizeof(int) || sizeof(memcg->socket_pressure) == sizeof(long)) || sizeof(memcg->socket_pressure) == sizeof(long long))) __compiletime_assert_409(); } while (0); (*(const volatile typeof( _Generic((memcg->socket_pressure), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->socket_pressure))) *)&(memcg->socket_pressure)); })) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(jiffies) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((jiffies) - (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_409(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(memcg->socket_pressure) == sizeof(char) || sizeof(memcg->socket_pressure) == sizeof(short) || sizeof(memcg->socket_pressure) == sizeof(int) || sizeof(memcg->socket_pressure) == sizeof(long)) || sizeof(memcg->socket_pressure) == sizeof(long long))) __compiletime_assert_409(); } while (0); (*(const volatile typeof( _Generic((memcg->socket_pressure), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (memcg->socket_pressure))) *)&(memcg->socket_pressure)); }))) < 0)))
   return true;
 } while ((memcg = parent_mem_cgroup(memcg)));
 return false;
}

int alloc_shrinker_info(struct mem_cgroup *memcg);
void free_shrinker_info(struct mem_cgroup *memcg);
void set_shrinker_bit(struct mem_cgroup *memcg, int nid, int shrinker_id);
void reparent_shrinker_deferred(struct mem_cgroup *memcg);
# 1743 "./include/linux/memcontrol.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_cgroup_kmem_disabled(void)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int memcg_kmem_charge_page(struct page *page, gfp_t gfp,
      int order)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcg_kmem_uncharge_page(struct page *page, int order)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __memcg_kmem_charge_page(struct page *page, gfp_t gfp,
        int order)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __memcg_kmem_uncharge_page(struct page *page, int order)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool memcg_kmem_enabled(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int memcg_cache_id(struct mem_cgroup *memcg)
{
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcg_get_cache_ids(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcg_put_cache_ids(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_cgroup *mem_cgroup_from_obj(void *p)
{
       return ((void *)0);
}
# 51 "./include/linux/tracehook.h" 2
# 1 "./include/linux/blk-cgroup.h" 1
# 23 "./include/linux/blk-cgroup.h"
# 1 "./include/linux/blkdev.h" 1





# 1 "./include/linux/genhd.h" 1
# 20 "./include/linux/genhd.h"
extern const struct device_type disk_type;
extern struct device_type part_type;
extern struct class block_class;
# 34 "./include/linux/genhd.h"
struct partition_meta_info {
 char uuid[(36 + 1)];
 u8 volname[64];
};
# 94 "./include/linux/genhd.h"
enum {
 DISK_EVENT_MEDIA_CHANGE = 1 << 0,
 DISK_EVENT_EJECT_REQUEST = 1 << 1,
};

enum {

 DISK_EVENT_FLAG_POLL = 1 << 0,

 DISK_EVENT_FLAG_UEVENT = 1 << 1,
};

struct disk_events;
struct badblocks;

struct blk_integrity {
 const struct blk_integrity_profile *profile;
 unsigned char flags;
 unsigned char tuple_size;
 unsigned char interval_exp;
 unsigned char tag_size;
};

struct gendisk {



 int major;
 int first_minor;
 int minors;


 char disk_name[32];

 unsigned short events;
 unsigned short event_flags;

 struct xarray part_tbl;
 struct block_device *part0;

 const struct block_device_operations *fops;
 struct request_queue *queue;
 void *private_data;

 int flags;
 unsigned long state;




 struct mutex open_mutex;
 unsigned open_partitions;

 struct backing_dev_info *bdi;
 struct kobject *slave_dir;



 struct timer_rand_state *random;
 atomic_t sync_io;
 struct disk_events *ev;






 int node_id;
 struct badblocks *bb;
 struct lockdep_map lockdep_map;
 u64 diskseq;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool disk_live(struct gendisk *disk)
{
 return !inode_unhashed(disk->part0->bd_inode);
}
# 187 "./include/linux/genhd.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int disk_max_parts(struct gendisk *disk)
{
 if (disk->flags & 0x0040)
  return 256;
 return disk->minors;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool disk_part_scan_enabled(struct gendisk *disk)
{
 return disk_max_parts(disk) > 1 &&
  !(disk->flags & 0x0200);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) dev_t disk_devt(struct gendisk *disk)
{
 return (((disk->major) << 20) | (disk->first_minor));
}

void disk_uevent(struct gendisk *disk, enum kobject_action action);


int __attribute__((__warn_unused_result__)) device_add_disk(struct device *parent, struct gendisk *disk,
     const struct attribute_group **groups);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) add_disk(struct gendisk *disk)
{
 return device_add_disk(((void *)0), disk, ((void *)0));
}
extern void del_gendisk(struct gendisk *gp);

void invalidate_disk(struct gendisk *disk);

void set_disk_ro(struct gendisk *disk, bool read_only);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_disk_ro(struct gendisk *disk)
{
 return disk->part0->bd_read_only ||
  test_bit(1, &disk->state);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bdev_read_only(struct block_device *bdev)
{
 return bdev->bd_read_only || get_disk_ro(bdev->bd_disk);
}

extern void disk_block_events(struct gendisk *disk);
extern void disk_unblock_events(struct gendisk *disk);
extern void disk_flush_events(struct gendisk *disk, unsigned int mask);
bool set_capacity_and_notify(struct gendisk *disk, sector_t size);
bool disk_force_media_change(struct gendisk *disk, unsigned int events);


extern void add_disk_randomness(struct gendisk *disk) ;
extern void rand_initialize_disk(struct gendisk *disk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sector_t get_start_sect(struct block_device *bdev)
{
 return bdev->bd_start_sect;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sector_t bdev_nr_sectors(struct block_device *bdev)
{
 return bdev->bd_nr_sectors;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) loff_t bdev_nr_bytes(struct block_device *bdev)
{
 return (loff_t)bdev_nr_sectors(bdev) << 9;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sector_t get_capacity(struct gendisk *disk)
{
 return bdev_nr_sectors(disk->part0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 sb_bdev_nr_blocks(struct super_block *sb)
{
 return bdev_nr_sectors(sb->s_bdev) >>
  (sb->s_blocksize_bits - 9);
}

int bdev_disk_changed(struct gendisk *disk, bool invalidate);
void blk_drop_partitions(struct gendisk *disk);

struct gendisk *__alloc_disk_node(struct request_queue *q, int node_id,
  struct lock_class_key *lkclass);
extern void put_disk(struct gendisk *disk);
struct gendisk *__blk_alloc_disk(int node, struct lock_class_key *lkclass);
# 290 "./include/linux/genhd.h"
void blk_cleanup_disk(struct gendisk *disk);

int __register_blkdev(unsigned int major, const char *name,
  void (*probe)(dev_t devt));


void unregister_blkdev(unsigned int major, const char *name);

bool bdev_check_media_change(struct block_device *bdev);
int __invalidate_device(struct block_device *bdev, bool kill_dirty);
void set_capacity(struct gendisk *disk, sector_t size);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bd_link_disk_holder(struct block_device *bdev,
          struct gendisk *disk)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bd_register_pending_holders(struct gendisk *disk)
{
 return 0;
}


dev_t part_devt(struct gendisk *disk, u8 partno);
void inc_diskseq(struct gendisk *disk);
dev_t blk_lookup_devt(const char *name, int partno);
void blk_request_module(dev_t devt);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void printk_all_partitions(void)
{
}
# 7 "./include/linux/blkdev.h" 2






# 1 "./include/linux/bio.h" 1







# 1 "./include/linux/mempool.h" 1
# 11 "./include/linux/mempool.h"
struct kmem_cache;

typedef void * (mempool_alloc_t)(gfp_t gfp_mask, void *pool_data);
typedef void (mempool_free_t)(void *element, void *pool_data);

typedef struct mempool_s {
 spinlock_t lock;
 int min_nr;
 int curr_nr;
 void **elements;

 void *pool_data;
 mempool_alloc_t *alloc;
 mempool_free_t *free;
 wait_queue_head_t wait;
} mempool_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mempool_initialized(mempool_t *pool)
{
 return pool->elements != ((void *)0);
}

void mempool_exit(mempool_t *pool);
int mempool_init_node(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
        mempool_free_t *free_fn, void *pool_data,
        gfp_t gfp_mask, int node_id);
int mempool_init(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data);

extern mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data);
extern mempool_t *mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,
   mempool_free_t *free_fn, void *pool_data,
   gfp_t gfp_mask, int nid);

extern int mempool_resize(mempool_t *pool, int new_min_nr);
extern void mempool_destroy(mempool_t *pool);
extern void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask) __attribute__((__malloc__));
extern void mempool_free(void *element, mempool_t *pool);






void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data);
void mempool_free_slab(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
mempool_init_slab_pool(mempool_t *pool, int min_nr, struct kmem_cache *kc)
{
 return mempool_init(pool, min_nr, mempool_alloc_slab,
       mempool_free_slab, (void *) kc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) mempool_t *
mempool_create_slab_pool(int min_nr, struct kmem_cache *kc)
{
 return mempool_create(min_nr, mempool_alloc_slab, mempool_free_slab,
         (void *) kc);
}





void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data);
void mempool_kfree(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mempool_init_kmalloc_pool(mempool_t *pool, int min_nr, size_t size)
{
 return mempool_init(pool, min_nr, mempool_kmalloc,
       mempool_kfree, (void *) size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) mempool_t *mempool_create_kmalloc_pool(int min_nr, size_t size)
{
 return mempool_create(min_nr, mempool_kmalloc, mempool_kfree,
         (void *) size);
}





void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data);
void mempool_free_pages(void *element, void *pool_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mempool_init_page_pool(mempool_t *pool, int min_nr, int order)
{
 return mempool_init(pool, min_nr, mempool_alloc_pages,
       mempool_free_pages, (void *)(long)order);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) mempool_t *mempool_create_page_pool(int min_nr, int order)
{
 return mempool_create(min_nr, mempool_alloc_pages, mempool_free_pages,
         (void *)(long)order);
}
# 9 "./include/linux/bio.h" 2


# 1 "./include/linux/uio.h" 1
# 10 "./include/linux/uio.h"
# 1 "./include/uapi/linux/uio.h" 1
# 17 "./include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 11 "./include/linux/uio.h" 2

struct page;
struct pipe_inode_info;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum iter_type {

 ITER_IOVEC,
 ITER_KVEC,
 ITER_BVEC,
 ITER_PIPE,
 ITER_XARRAY,
 ITER_DISCARD,
};

struct iov_iter_state {
 size_t iov_offset;
 size_t count;
 unsigned long nr_segs;
};

struct iov_iter {
 u8 iter_type;
 bool nofault;
 bool data_source;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
  struct xarray *xarray;
  struct pipe_inode_info *pipe;
 };
 union {
  unsigned long nr_segs;
  struct {
   unsigned int head;
   unsigned int start_head;
  };
  loff_t xarray_start;
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum iter_type iov_iter_type(const struct iov_iter *i)
{
 return i->iter_type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void iov_iter_save_state(struct iov_iter *iter,
           struct iov_iter_state *state)
{
 state->iov_offset = iter->iov_offset;
 state->count = iter->count;
 state->nr_segs = iter->nr_segs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool iter_is_iovec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_IOVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool iov_iter_is_kvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_KVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool iov_iter_is_bvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_BVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool iov_iter_is_pipe(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_PIPE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool iov_iter_is_discard(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_DISCARD;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool iov_iter_is_xarray(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_XARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned char iov_iter_rw(const struct iov_iter *i)
{
 return i->data_source ? 1 : 0;
}
# 114 "./include/linux/uio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = __builtin_choose_expr(((!!(sizeof((typeof(iter->count) *)1 == (typeof(iter->iov->iov_len - iter->iov_offset) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->count) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->iov->iov_len - iter->iov_offset) * 0l)) : (int *)8))))), ((iter->count) < (iter->iov->iov_len - iter->iov_offset) ? (iter->count) : (iter->iov->iov_len - iter->iov_offset)), ({ typeof(iter->count) __UNIQUE_ID___x410 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) __UNIQUE_ID___y411 = (iter->iov->iov_len - iter->iov_offset); ((__UNIQUE_ID___x410) < (__UNIQUE_ID___y411) ? (__UNIQUE_ID___x410) : (__UNIQUE_ID___y411)); })),

 };
}

size_t copy_page_from_iter_atomic(struct page *page, unsigned offset,
      size_t bytes, struct iov_iter *i);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
void iov_iter_revert(struct iov_iter *i, size_t bytes);
size_t fault_in_iov_iter_readable(const struct iov_iter *i, size_t bytes);
size_t fault_in_iov_iter_writeable(const struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);

size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter_nocache(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
# 203 "./include/linux/uio.h"
size_t _copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i);





size_t _copy_mc_to_iter(const void *addr, size_t bytes, struct iov_iter *i);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_flushcache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_mc_to_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_mc_to_iter(addr, bytes, i);
}

size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, unsigned int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, unsigned int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, unsigned int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
void iov_iter_pipe(struct iov_iter *i, unsigned int direction, struct pipe_inode_info *pipe,
   size_t count);
void iov_iter_discard(struct iov_iter *i, unsigned int direction, size_t count);
void iov_iter_xarray(struct iov_iter *i, unsigned int direction, struct xarray *xarray,
       loff_t start, size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);
void iov_iter_restore(struct iov_iter *i, struct iov_iter_state *state);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) size_t iov_iter_count(const struct iov_iter *i)
{
 return i->count;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}

struct csum_state {
 __wsum csum;
 size_t off;
};

size_t csum_and_copy_to_iter(const void *addr, size_t bytes, void *csstate, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool csum_and_copy_from_iter_full(void *addr, size_t bytes,
      __wsum *csum, struct iov_iter *i)
{
 size_t copied = csum_and_copy_from_iter(addr, bytes, csum, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
size_t hash_and_copy_to_iter(const void *addr, size_t bytes, void *hashp,
  struct iov_iter *i);

struct iovec *iovec_from_user(const struct iovec *uvector,
  unsigned long nr_segs, unsigned long fast_segs,
  struct iovec *fast_iov, bool compat);
ssize_t import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i);
ssize_t __import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i, bool compat);
int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 12 "./include/linux/bio.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int bio_max_segs(unsigned int nr_segs)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(nr_segs) *)1 == (typeof(256U) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(nr_segs) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(256U) * 0l)) : (int *)8))))), ((nr_segs) < (256U) ? (nr_segs) : (256U)), ({ typeof(nr_segs) __UNIQUE_ID___x412 = (nr_segs); typeof(256U) __UNIQUE_ID___y413 = (256U); ((__UNIQUE_ID___x412) < (__UNIQUE_ID___y413) ? (__UNIQUE_ID___x412) : (__UNIQUE_ID___y413)); }));
}
# 52 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bio_has_data(struct bio *bio)
{
 if (bio &&
     bio->bi_iter.bi_size &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_DISCARD &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_SECURE_ERASE &&
     ((bio)->bi_opf & ((1 << 8) - 1)) != REQ_OP_WRITE_ZEROES)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bio_no_advance_iter(const struct bio *bio)
{
 return ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_DISCARD ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_SECURE_ERASE ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_WRITE_SAME ||
        ((bio)->bi_opf & ((1 << 8) - 1)) == REQ_OP_WRITE_ZEROES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *bio_data(struct bio *bio)
{
 if (bio_has_data(bio))
  return lowmem_page_address((((&(((((bio))->bi_io_vec)))[(((((bio)->bi_iter)))).bi_idx])->bv_page) + (((&((((((bio))->bi_io_vec))))[((((((bio)->bi_iter))))).bi_idx])->bv_offset + (((((bio)->bi_iter)))).bi_bvec_done) / ((1UL) << 12)))) + (((&(((((bio))->bi_io_vec)))[(((((bio)->bi_iter)))).bi_idx])->bv_offset + ((((bio)->bi_iter))).bi_bvec_done) % ((1UL) << 12));

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bio_next_segment(const struct bio *bio,
        struct bvec_iter_all *iter)
{
 if (iter->idx >= bio->bi_vcnt)
  return false;

 bvec_advance(&bio->bi_io_vec[iter->idx], iter);
 return true;
}
# 97 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_advance_iter(const struct bio *bio,
        struct bvec_iter *iter, unsigned int bytes)
{
 iter->bi_sector += bytes >> 9;

 if (bio_no_advance_iter(bio))
  iter->bi_size -= bytes;
 else
  bvec_iter_advance(bio->bi_io_vec, iter, bytes);

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_advance_iter_single(const struct bio *bio,
        struct bvec_iter *iter,
        unsigned int bytes)
{
 iter->bi_sector += bytes >> 9;

 if (bio_no_advance_iter(bio))
  iter->bi_size -= bytes;
 else
  bvec_iter_advance_single(bio->bi_io_vec, iter, bytes);
}

void __bio_advance(struct bio *, unsigned bytes);
# 135 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_advance(struct bio *bio, unsigned int nbytes)
{
 if (nbytes == bio->bi_iter.bi_size) {
  bio->bi_iter.bi_size = 0;
  return;
 }
 __bio_advance(bio, nbytes);
}
# 173 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned bio_segments(struct bio *bio)
{
 unsigned segs = 0;
 struct bio_vec bv;
 struct bvec_iter iter;






 switch (((bio)->bi_opf & ((1 << 8) - 1))) {
 case REQ_OP_DISCARD:
 case REQ_OP_SECURE_ERASE:
 case REQ_OP_WRITE_ZEROES:
  return 0;
 case REQ_OP_WRITE_SAME:
  return 1;
 default:
  break;
 }

 for (iter = ((bio)->bi_iter); (iter).bi_size && ((bv = ((struct bio_vec) { .bv_page = (((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_page) + (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) / ((1UL) << 12))), .bv_len = __builtin_choose_expr(((!!(sizeof((typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x414 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y415 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x414) < (__UNIQUE_ID___y415) ? (__UNIQUE_ID___x414) : (__UNIQUE_ID___y415)); })))) *)1 == (typeof((unsigned)(((1UL) << 12) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 12)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x414 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y415 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x414) < (__UNIQUE_ID___y415) ? (__UNIQUE_ID___x414) : (__UNIQUE_ID___y415)); })))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned)(((1UL) << 12) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 12)))) * 0l)) : (int *)8))))), (((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x414 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y415 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x414) < (__UNIQUE_ID___y415) ? (__UNIQUE_ID___x414) : (__UNIQUE_ID___y415)); })))) < ((unsigned)(((1UL) << 12) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 12)))) ? ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x414 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y415 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x414) < (__UNIQUE_ID___y415) ? (__UNIQUE_ID___x414) : (__UNIQUE_ID___y415)); })))) : ((unsigned)(((1UL) << 12) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 12))))), ({ typeof((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x414 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y415 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x414) < (__UNIQUE_ID___y415) ? (__UNIQUE_ID___x414) : (__UNIQUE_ID___y415)); })))) __UNIQUE_ID___x416 = ((unsigned)(__builtin_choose_expr(((!!(sizeof((typeof((((((iter))))).bi_size) *)1 == (typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((((((iter))))).bi_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) * 0l)) : (int *)8))))), (((((((iter))))).bi_size) < ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) ? ((((((iter))))).bi_size) : ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done)), ({ typeof((((((iter))))).bi_size) __UNIQUE_ID___x414 = ((((((iter))))).bi_size); typeof((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done) __UNIQUE_ID___y415 = ((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_len - (((((iter))))).bi_bvec_done); ((__UNIQUE_ID___x414) < (__UNIQUE_ID___y415) ? (__UNIQUE_ID___x414) : (__UNIQUE_ID___y415)); })))); typeof((unsigned)(((1UL) << 12) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 12)))) __UNIQUE_ID___y417 = ((unsigned)(((1UL) << 12) - (((&(((((((bio))->bi_io_vec)))))[(((((((iter))))))).bi_idx])->bv_offset + ((((((iter)))))).bi_bvec_done) % ((1UL) << 12)))); ((__UNIQUE_ID___x416) < (__UNIQUE_ID___y417) ? (__UNIQUE_ID___x416) : (__UNIQUE_ID___y417)); })), .bv_offset = (((&((((((bio))->bi_io_vec))))[((((((iter)))))).bi_idx])->bv_offset + (((((iter))))).bi_bvec_done) % ((1UL) << 12)), })), 1); bio_advance_iter_single((bio), &(iter), (bv).bv_len))
  segs++;

 return segs;
}
# 215 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_get(struct bio *bio)
{
 bio->bi_flags |= (1 << BIO_REFFED);
 __asm__ __volatile__("": : :"memory");
 atomic_inc(&bio->__bi_cnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_cnt_set(struct bio *bio, unsigned int count)
{
 if (count != 1) {
  bio->bi_flags |= (1 << BIO_REFFED);
  __asm__ __volatile__("": : :"memory");
 }
 atomic_set(&bio->__bi_cnt, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bio_flagged(struct bio *bio, unsigned int bit)
{
 return (bio->bi_flags & (1U << bit)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_set_flag(struct bio *bio, unsigned int bit)
{
 bio->bi_flags |= (1U << bit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_clear_flag(struct bio *bio, unsigned int bit)
{
 bio->bi_flags &= ~(1U << bit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio_vec *bio_first_bvec_all(struct bio *bio)
{
 ({ int __ret_warn_on = !!(bio_flagged(bio, BIO_CLONED)); __builtin_expect(!!(__ret_warn_on), 0); });
 return bio->bi_io_vec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *bio_first_page_all(struct bio *bio)
{
 return bio_first_bvec_all(bio)->bv_page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio_vec *bio_last_bvec_all(struct bio *bio)
{
 ({ int __ret_warn_on = !!(bio_flagged(bio, BIO_CLONED)); __builtin_expect(!!(__ret_warn_on), 0); });
 return &bio->bi_io_vec[bio->bi_vcnt - 1];
}

enum bip_flags {
 BIP_BLOCK_INTEGRITY = 1 << 0,
 BIP_MAPPED_INTEGRITY = 1 << 1,
 BIP_CTRL_NOCHECK = 1 << 2,
 BIP_DISK_NOCHECK = 1 << 3,
 BIP_IP_CHECKSUM = 1 << 4,
};




struct bio_integrity_payload {
 struct bio *bip_bio;

 struct bvec_iter bip_iter;

 unsigned short bip_vcnt;
 unsigned short bip_max_vcnt;
 unsigned short bip_flags;

 struct bvec_iter bio_iter;

 struct work_struct bip_work;

 struct bio_vec *bip_vec;
 struct bio_vec bip_inline_vecs[];
};
# 324 "./include/linux/bio.h"
void bio_trim(struct bio *bio, sector_t offset, sector_t size);
extern struct bio *bio_split(struct bio *bio, int sectors,
        gfp_t gfp, struct bio_set *bs);
# 338 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio *bio_next_split(struct bio *bio, int sectors,
      gfp_t gfp, struct bio_set *bs)
{
 if (sectors >= (((bio)->bi_iter).bi_size >> 9))
  return bio;

 return bio_split(bio, sectors, gfp, bs);
}

enum {
 BIOSET_NEED_BVECS = ((((1UL))) << (0)),
 BIOSET_NEED_RESCUER = ((((1UL))) << (1)),
 BIOSET_PERCPU_CACHE = ((((1UL))) << (2)),
};
extern int bioset_init(struct bio_set *, unsigned int, unsigned int, int flags);
extern void bioset_exit(struct bio_set *);
extern int biovec_init_pool(mempool_t *pool, int pool_entries);
extern int bioset_init_from_src(struct bio_set *bs, struct bio_set *src);

struct bio *bio_alloc_bioset(gfp_t gfp, unsigned short nr_iovecs,
  struct bio_set *bs);
struct bio *bio_alloc_kiocb(struct kiocb *kiocb, unsigned short nr_vecs,
  struct bio_set *bs);
struct bio *bio_kmalloc(gfp_t gfp_mask, unsigned short nr_iovecs);
extern void bio_put(struct bio *);

extern void __bio_clone_fast(struct bio *, struct bio *);
extern struct bio *bio_clone_fast(struct bio *, gfp_t, struct bio_set *);

extern struct bio_set fs_bio_set;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio *bio_alloc(gfp_t gfp_mask, unsigned short nr_iovecs)
{
 return bio_alloc_bioset(gfp_mask, nr_iovecs, &fs_bio_set);
}

void submit_bio(struct bio *bio);

extern void bio_endio(struct bio *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_io_error(struct bio *bio)
{
 bio->bi_status = (( blk_status_t)10);
 bio_endio(bio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_wouldblock_error(struct bio *bio)
{
 bio_set_flag(bio, BIO_QUIET);
 bio->bi_status = (( blk_status_t)12);
 bio_endio(bio);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bio_iov_vecs_to_alloc(struct iov_iter *iter, int max_segs)
{
 if (iov_iter_is_bvec(iter))
  return 0;
 return iov_iter_npages(iter, max_segs);
}

struct request_queue;

extern int submit_bio_wait(struct bio *bio);
extern void bio_init(struct bio *bio, struct bio_vec *table,
       unsigned short max_vecs);
extern void bio_uninit(struct bio *);
extern void bio_reset(struct bio *);
void bio_chain(struct bio *, struct bio *);

extern int bio_add_page(struct bio *, struct page *, unsigned int,unsigned int);
extern int bio_add_pc_page(struct request_queue *, struct bio *, struct page *,
      unsigned int, unsigned int);
int bio_add_zone_append_page(struct bio *bio, struct page *page,
        unsigned int len, unsigned int offset);
void __bio_add_page(struct bio *bio, struct page *page,
  unsigned int len, unsigned int off);
int bio_iov_iter_get_pages(struct bio *bio, struct iov_iter *iter);
void bio_iov_bvec_set(struct bio *bio, struct iov_iter *iter);
void __bio_release_pages(struct bio *bio, bool mark_dirty);
extern void bio_set_pages_dirty(struct bio *bio);
extern void bio_check_pages_dirty(struct bio *bio);

extern void bio_copy_data_iter(struct bio *dst, struct bvec_iter *dst_iter,
          struct bio *src, struct bvec_iter *src_iter);
extern void bio_copy_data(struct bio *dst, struct bio *src);
extern void bio_free_pages(struct bio *bio);
void guard_bio_eod(struct bio *bio);
void zero_fill_bio(struct bio *bio);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_release_pages(struct bio *bio, bool mark_dirty)
{
 if (!bio_flagged(bio, BIO_NO_PAGE_REF))
  __bio_release_pages(bio, mark_dirty);
}

extern const char *bio_devname(struct bio *bio, char *buffer);
# 449 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_associate_blkg(struct bio *bio) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_associate_blkg_from_css(struct bio *bio,
            struct cgroup_subsys_state *css)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_clone_blkg_association(struct bio *dst,
           struct bio *src) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_set_dev(struct bio *bio, struct block_device *bdev)
{
 bio_clear_flag(bio, BIO_REMAPPED);
 if (bio->bi_bdev != bdev)
  bio_clear_flag(bio, BIO_THROTTLED);
 bio->bi_bdev = bdev;
 bio_associate_blkg(bio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_copy_dev(struct bio *dst, struct bio *src)
{
 bio_clear_flag(dst, BIO_REMAPPED);
 dst->bi_bdev = src->bi_bdev;
 bio_clone_blkg_association(dst, src);
}
# 480 "./include/linux/bio.h"
struct bio_list {
 struct bio *head;
 struct bio *tail;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bio_list_empty(const struct bio_list *bl)
{
 return bl->head == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_list_init(struct bio_list *bl)
{
 bl->head = bl->tail = ((void *)0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned bio_list_size(const struct bio_list *bl)
{
 unsigned sz = 0;
 struct bio *bio;

 for (bio = (bl)->head; bio; bio = bio->bi_next)
  sz++;

 return sz;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_list_add(struct bio_list *bl, struct bio *bio)
{
 bio->bi_next = ((void *)0);

 if (bl->tail)
  bl->tail->bi_next = bio;
 else
  bl->head = bio;

 bl->tail = bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_list_add_head(struct bio_list *bl, struct bio *bio)
{
 bio->bi_next = bl->head;

 bl->head = bio;

 if (!bl->tail)
  bl->tail = bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_list_merge(struct bio_list *bl, struct bio_list *bl2)
{
 if (!bl2->head)
  return;

 if (bl->tail)
  bl->tail->bi_next = bl2->head;
 else
  bl->head = bl2->head;

 bl->tail = bl2->tail;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_list_merge_head(struct bio_list *bl,
           struct bio_list *bl2)
{
 if (!bl2->head)
  return;

 if (bl->head)
  bl2->tail->bi_next = bl->head;
 else
  bl->tail = bl2->tail;

 bl->head = bl2->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio *bio_list_peek(struct bio_list *bl)
{
 return bl->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio *bio_list_pop(struct bio_list *bl)
{
 struct bio *bio = bl->head;

 if (bio) {
  bl->head = bl->head->bi_next;
  if (!bl->head)
   bl->tail = ((void *)0);

  bio->bi_next = ((void *)0);
 }

 return bio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct bio *bio_list_get(struct bio_list *bl)
{
 struct bio *bio = bl->head;

 bl->head = bl->tail = ((void *)0);

 return bio;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_inc_remaining(struct bio *bio)
{
 bio_set_flag(bio, BIO_CHAIN);
 __asm__ __volatile__("": : :"memory");
 atomic_inc(&bio->__bi_remaining);
}
# 608 "./include/linux/bio.h"
struct bio_set {
 struct kmem_cache *bio_slab;
 unsigned int front_pad;




 struct bio_alloc_cache *cache;

 mempool_t bio_pool;
 mempool_t bvec_pool;





 unsigned int back_pad;




 spinlock_t rescue_lock;
 struct bio_list rescue_list;
 struct work_struct rescue_work;
 struct workqueue_struct *rescue_workqueue;




 struct hlist_node cpuhp_dead;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bioset_initialized(struct bio_set *bs)
{
 return bs->bio_slab != ((void *)0);
}
# 666 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *bio_integrity(struct bio *bio)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bioset_integrity_create(struct bio_set *bs, int pool_size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bioset_integrity_free (struct bio_set *bs)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bio_integrity_prep(struct bio *bio)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bio_integrity_clone(struct bio *bio, struct bio *bio_src,
          gfp_t gfp_mask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_integrity_advance(struct bio *bio,
      unsigned int bytes_done)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_integrity_trim(struct bio *bio)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_integrity_init(void)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bio_integrity_flagged(struct bio *bio, enum bip_flags flag)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *bio_integrity_alloc(struct bio * bio, gfp_t gfp,
        unsigned int nr)
{
 return ERR_PTR(-22);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bio_integrity_add_page(struct bio *bio, struct page *page,
     unsigned int len, unsigned int offset)
{
 return 0;
}
# 734 "./include/linux/bio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_set_polled(struct bio *bio, struct kiocb *kiocb)
{
 bio->bi_opf |= (1ULL << __REQ_POLLED);
 if (!is_sync_kiocb(kiocb))
  bio->bi_opf |= (1ULL << __REQ_NOWAIT);
}

struct bio *blk_next_bio(struct bio *bio, unsigned int nr_pages, gfp_t gfp);
# 14 "./include/linux/blkdev.h" 2



# 1 "./include/uapi/linux/blkzoned.h" 1
# 32 "./include/uapi/linux/blkzoned.h"
enum blk_zone_type {
 BLK_ZONE_TYPE_CONVENTIONAL = 0x1,
 BLK_ZONE_TYPE_SEQWRITE_REQ = 0x2,
 BLK_ZONE_TYPE_SEQWRITE_PREF = 0x3,
};
# 65 "./include/uapi/linux/blkzoned.h"
enum blk_zone_cond {
 BLK_ZONE_COND_NOT_WP = 0x0,
 BLK_ZONE_COND_EMPTY = 0x1,
 BLK_ZONE_COND_IMP_OPEN = 0x2,
 BLK_ZONE_COND_EXP_OPEN = 0x3,
 BLK_ZONE_COND_CLOSED = 0x4,
 BLK_ZONE_COND_READONLY = 0xD,
 BLK_ZONE_COND_FULL = 0xE,
 BLK_ZONE_COND_OFFLINE = 0xF,
};






enum blk_zone_report_flags {
 BLK_ZONE_REP_CAPACITY = (1 << 0),
};
# 106 "./include/uapi/linux/blkzoned.h"
struct blk_zone {
 __u64 start;
 __u64 len;
 __u64 wp;
 __u8 type;
 __u8 cond;
 __u8 non_seq;
 __u8 reset;
 __u8 resv[4];
 __u64 capacity;
 __u8 reserved[24];
};
# 129 "./include/uapi/linux/blkzoned.h"
struct blk_zone_report {
 __u64 sector;
 __u32 nr_zones;
 __u32 flags;
 struct blk_zone zones[0];
};
# 143 "./include/uapi/linux/blkzoned.h"
struct blk_zone_range {
 __u64 sector;
 __u64 nr_sectors;
};
# 18 "./include/linux/blkdev.h" 2
# 1 "./include/linux/sbitmap.h" 1
# 24 "./include/linux/sbitmap.h"
struct seq_file;




struct sbitmap_word {



 unsigned long depth;




 unsigned long word ;




 unsigned long cleared ;
} ;







struct sbitmap {



 unsigned int depth;




 unsigned int shift;




 unsigned int map_nr;




 bool round_robin;




 struct sbitmap_word *map;







 unsigned int *alloc_hint;
};







struct sbq_wait_state {



 atomic_t wait_cnt;




 wait_queue_head_t wait;
} ;
# 114 "./include/linux/sbitmap.h"
struct sbitmap_queue {



 struct sbitmap sb;





 unsigned int wake_batch;




 atomic_t wake_index;




 struct sbq_wait_state *ws;




 atomic_t ws_active;





 unsigned int min_shallow_depth;
};
# 164 "./include/linux/sbitmap.h"
int sbitmap_init_node(struct sbitmap *sb, unsigned int depth, int shift,
        gfp_t flags, int node, bool round_robin, bool alloc_hint);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbitmap_free(struct sbitmap *sb)
{
 free_percpu(sb->alloc_hint);
 kfree(sb->map);
 sb->map = ((void *)0);
}
# 186 "./include/linux/sbitmap.h"
void sbitmap_resize(struct sbitmap *sb, unsigned int depth);
# 196 "./include/linux/sbitmap.h"
int sbitmap_get(struct sbitmap *sb);
# 213 "./include/linux/sbitmap.h"
int sbitmap_get_shallow(struct sbitmap *sb, unsigned long shallow_depth);







bool sbitmap_any_bit_set(const struct sbitmap *sb);




typedef bool (*sb_for_each_fn)(struct sbitmap *, unsigned int, void *);
# 238 "./include/linux/sbitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __sbitmap_for_each_set(struct sbitmap *sb,
       unsigned int start,
       sb_for_each_fn fn, void *data)
{
 unsigned int index;
 unsigned int nr;
 unsigned int scanned = 0;

 if (start >= sb->depth)
  start = 0;
 index = ((start) >> (sb)->shift);
 nr = ((start) & ((1U << (sb)->shift) - 1U));

 while (scanned < sb->depth) {
  unsigned long word;
  unsigned int depth = __builtin_choose_expr(((!!(sizeof((typeof((unsigned int)(sb->map[index].depth - nr)) *)1 == (typeof((unsigned int)(sb->depth - scanned)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(sb->map[index].depth - nr)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(sb->depth - scanned)) * 0l)) : (int *)8))))), (((unsigned int)(sb->map[index].depth - nr)) < ((unsigned int)(sb->depth - scanned)) ? ((unsigned int)(sb->map[index].depth - nr)) : ((unsigned int)(sb->depth - scanned))), ({ typeof((unsigned int)(sb->map[index].depth - nr)) __UNIQUE_ID___x418 = ((unsigned int)(sb->map[index].depth - nr)); typeof((unsigned int)(sb->depth - scanned)) __UNIQUE_ID___y419 = ((unsigned int)(sb->depth - scanned)); ((__UNIQUE_ID___x418) < (__UNIQUE_ID___y419) ? (__UNIQUE_ID___x418) : (__UNIQUE_ID___y419)); }));



  scanned += depth;
  word = sb->map[index].word & ~sb->map[index].cleared;
  if (!word)
   goto next;






  depth += nr;
  while (1) {
   nr = find_next_bit(&word, depth, nr);
   if (nr >= depth)
    break;
   if (!fn(sb, (index << sb->shift) + nr, data))
    return;

   nr++;
  }
next:
  nr = 0;
  if (++index >= sb->map_nr)
   index = 0;
 }
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbitmap_for_each_set(struct sbitmap *sb, sb_for_each_fn fn,
     void *data)
{
 __sbitmap_for_each_set(sb, 0, fn, data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *__sbitmap_word(struct sbitmap *sb,
         unsigned int bitnr)
{
 return &sb->map[((bitnr) >> (sb)->shift)].word;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbitmap_set_bit(struct sbitmap *sb, unsigned int bitnr)
{
 set_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), __sbitmap_word(sb, bitnr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbitmap_clear_bit(struct sbitmap *sb, unsigned int bitnr)
{
 clear_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), __sbitmap_word(sb, bitnr));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbitmap_deferred_clear_bit(struct sbitmap *sb, unsigned int bitnr)
{
 unsigned long *addr = &sb->map[((bitnr) >> (sb)->shift)].cleared;

 set_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), addr);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbitmap_put(struct sbitmap *sb, unsigned int bitnr)
{
 sbitmap_deferred_clear_bit(sb, bitnr);

 if (__builtin_expect(!!(sb->alloc_hint && !sb->round_robin && bitnr < sb->depth), 1))
  *({ (void)(0); ({ do { const void *__vpp_verify = (typeof((sb->alloc_hint) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(sb->alloc_hint)) *)(sb->alloc_hint); }); }) = bitnr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sbitmap_test_bit(struct sbitmap *sb, unsigned int bitnr)
{
 return test_bit(((bitnr) & ((1U << (sb)->shift) - 1U)), __sbitmap_word(sb, bitnr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sbitmap_calculate_shift(unsigned int depth)
{
 int shift = ( __builtin_constant_p(64) ? ((64) < 2 ? 0 : 63 - __builtin_clzll(64)) : (sizeof(64) <= 4) ? __ilog2_u32(64) : __ilog2_u64(64) );







 if (depth >= 4) {
  while ((4U << shift) > depth)
   shift--;
 }

 return shift;
}
# 369 "./include/linux/sbitmap.h"
void sbitmap_show(struct sbitmap *sb, struct seq_file *m);
# 379 "./include/linux/sbitmap.h"
unsigned int sbitmap_weight(const struct sbitmap *sb);
# 390 "./include/linux/sbitmap.h"
void sbitmap_bitmap_show(struct sbitmap *sb, struct seq_file *m);
# 404 "./include/linux/sbitmap.h"
int sbitmap_queue_init_node(struct sbitmap_queue *sbq, unsigned int depth,
       int shift, bool round_robin, gfp_t flags, int node);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbitmap_queue_free(struct sbitmap_queue *sbq)
{
 kfree(sbq->ws);
 sbitmap_free(&sbq->sb);
}
# 427 "./include/linux/sbitmap.h"
void sbitmap_queue_resize(struct sbitmap_queue *sbq, unsigned int depth);
# 436 "./include/linux/sbitmap.h"
int __sbitmap_queue_get(struct sbitmap_queue *sbq);
# 448 "./include/linux/sbitmap.h"
unsigned long __sbitmap_queue_get_batch(struct sbitmap_queue *sbq, int nr_tags,
     unsigned int *offset);
# 464 "./include/linux/sbitmap.h"
int __sbitmap_queue_get_shallow(struct sbitmap_queue *sbq,
    unsigned int shallow_depth);
# 476 "./include/linux/sbitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sbitmap_queue_get(struct sbitmap_queue *sbq,
        unsigned int *cpu)
{
 int nr;

 *cpu = ({ do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); 0; });
 nr = __sbitmap_queue_get(sbq);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 return nr;
}
# 501 "./include/linux/sbitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sbitmap_queue_get_shallow(struct sbitmap_queue *sbq,
         unsigned int *cpu,
         unsigned int shallow_depth)
{
 int nr;

 *cpu = ({ do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); 0; });
 nr = __sbitmap_queue_get_shallow(sbq, shallow_depth);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 return nr;
}
# 527 "./include/linux/sbitmap.h"
void sbitmap_queue_min_shallow_depth(struct sbitmap_queue *sbq,
         unsigned int min_shallow_depth);
# 537 "./include/linux/sbitmap.h"
void sbitmap_queue_clear(struct sbitmap_queue *sbq, unsigned int nr,
    unsigned int cpu);
# 548 "./include/linux/sbitmap.h"
void sbitmap_queue_clear_batch(struct sbitmap_queue *sbq, int offset,
    int *tags, int nr_tags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sbq_index_inc(int index)
{
 return (index + 1) & (8 - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sbq_index_atomic_inc(atomic_t *index)
{
 int old = atomic_read(index);
 int new = sbq_index_inc(old);
 atomic_cmpxchg(index, old, new);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct sbq_wait_state *sbq_wait_ptr(struct sbitmap_queue *sbq,
        atomic_t *wait_index)
{
 struct sbq_wait_state *ws;

 ws = &sbq->ws[atomic_read(wait_index)];
 sbq_index_atomic_inc(wait_index);
 return ws;
}






void sbitmap_queue_wake_all(struct sbitmap_queue *sbq);






void sbitmap_queue_wake_up(struct sbitmap_queue *sbq);
# 601 "./include/linux/sbitmap.h"
void sbitmap_queue_show(struct sbitmap_queue *sbq, struct seq_file *m);

struct sbq_wait {
 struct sbitmap_queue *sbq;
 struct wait_queue_entry wait;
};
# 622 "./include/linux/sbitmap.h"
void sbitmap_prepare_to_wait(struct sbitmap_queue *sbq,
    struct sbq_wait_state *ws,
    struct sbq_wait *sbq_wait, int state);




void sbitmap_finish_wait(struct sbitmap_queue *sbq, struct sbq_wait_state *ws,
    struct sbq_wait *sbq_wait);




void sbitmap_add_wait_queue(struct sbitmap_queue *sbq,
       struct sbq_wait_state *ws,
       struct sbq_wait *sbq_wait);




void sbitmap_del_wait_queue(struct sbq_wait *sbq_wait);
# 19 "./include/linux/blkdev.h" 2

struct module;
struct request_queue;
struct elevator_queue;
struct blk_trace;
struct request;
struct sg_io_hdr;
struct blkcg_gq;
struct blk_flush_queue;
struct kiocb;
struct pr_ops;
struct rq_qos;
struct blk_queue_stats;
struct blk_stat_callback;
struct blk_crypto_profile;
# 47 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int blk_validate_block_size(unsigned int bsize)
{
 if (bsize < 512 || bsize > ((1UL) << 12) || !is_power_of_2(bsize))
  return -22;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool blk_op_is_passthrough(unsigned int op)
{
 op &= ((1 << 8) - 1);
 return op == REQ_OP_DRV_IN || op == REQ_OP_DRV_OUT;
}







enum blk_zoned_model {
 BLK_ZONED_NONE = 0,
 BLK_ZONED_HA,
 BLK_ZONED_HM,
};





enum blk_bounce {
 BLK_BOUNCE_NONE,
 BLK_BOUNCE_HIGH,
};

struct queue_limits {
 enum blk_bounce bounce;
 unsigned long seg_boundary_mask;
 unsigned long virt_boundary_mask;

 unsigned int max_hw_sectors;
 unsigned int max_dev_sectors;
 unsigned int chunk_sectors;
 unsigned int max_sectors;
 unsigned int max_segment_size;
 unsigned int physical_block_size;
 unsigned int logical_block_size;
 unsigned int alignment_offset;
 unsigned int io_min;
 unsigned int io_opt;
 unsigned int max_discard_sectors;
 unsigned int max_hw_discard_sectors;
 unsigned int max_write_same_sectors;
 unsigned int max_write_zeroes_sectors;
 unsigned int max_zone_append_sectors;
 unsigned int discard_granularity;
 unsigned int discard_alignment;
 unsigned int zone_write_granularity;

 unsigned short max_segments;
 unsigned short max_integrity_segments;
 unsigned short max_discard_segments;

 unsigned char misaligned;
 unsigned char discard_misaligned;
 unsigned char raid_partial_stripes_expensive;
 enum blk_zoned_model zoned;
};

typedef int (*report_zones_cb)(struct blk_zone *zone, unsigned int idx,
          void *data);

void blk_queue_set_zoned(struct gendisk *disk, enum blk_zoned_model model);
# 140 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int blkdev_nr_zones(struct gendisk *disk)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int blkdev_report_zones_ioctl(struct block_device *bdev,
         fmode_t mode, unsigned int cmd,
         unsigned long arg)
{
 return -25;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int blkdev_zone_mgmt_ioctl(struct block_device *bdev,
      fmode_t mode, unsigned int cmd,
      unsigned long arg)
{
 return -25;
}
# 175 "./include/linux/blkdev.h"
struct blk_independent_access_range {
 struct kobject kobj;
 struct request_queue *queue;
 sector_t sector;
 sector_t nr_sectors;
};

struct blk_independent_access_ranges {
 struct kobject kobj;
 bool sysfs_registered;
 unsigned int nr_ia_ranges;
 struct blk_independent_access_range ia_range[];
};

struct request_queue {
 struct request *last_merge;
 struct elevator_queue *elevator;

 struct percpu_ref q_usage_counter;

 struct blk_queue_stats *stats;
 struct rq_qos *rq_qos;

 const struct blk_mq_ops *mq_ops;


 struct blk_mq_ctx *queue_ctx;

 unsigned int queue_depth;


 struct blk_mq_hw_ctx **queue_hw_ctx;
 unsigned int nr_hw_queues;





 void *queuedata;




 unsigned long queue_flags;




 atomic_t pm_only;





 int id;

 spinlock_t queue_lock;

 struct gendisk *disk;




 struct kobject kobj;




 struct kobject *mq_kobj;
# 257 "./include/linux/blkdev.h"
 unsigned long nr_requests;

 unsigned int dma_pad_mask;
 unsigned int dma_alignment;





 unsigned int rq_timeout;
 int poll_nsec;

 struct blk_stat_callback *poll_cb;
 struct blk_rq_stat poll_stat[16];

 struct timer_list timeout;
 struct work_struct timeout_work;

 atomic_t nr_active_requests_shared_tags;

 struct blk_mq_tags *sched_shared_tags;

 struct list_head icq_list;






 struct queue_limits limits;

 unsigned int required_elevator_features;
# 315 "./include/linux/blkdev.h"
 int node;
 struct mutex debugfs_mutex;






 struct blk_flush_queue *fq;

 struct list_head requeue_list;
 spinlock_t requeue_lock;
 struct delayed_work requeue_work;

 struct mutex sysfs_lock;
 struct mutex sysfs_dir_lock;





 struct list_head unused_hctx_list;
 spinlock_t unused_hctx_lock;

 int mq_freeze_depth;





 struct callback_head callback_head;
 wait_queue_head_t mq_freeze_wq;




 struct mutex mq_freeze_lock;

 int quiesce_depth;

 struct blk_mq_tag_set *tag_set;
 struct list_head tag_set_list;
 struct bio_set bio_split;

 struct dentry *debugfs_dir;






 bool mq_sysfs_init_done;


 u64 write_hints[5];





 struct blk_independent_access_ranges *ia_ranges;
};
# 413 "./include/linux/blkdev.h"
void blk_queue_flag_set(unsigned int flag, struct request_queue *q);
void blk_queue_flag_clear(unsigned int flag, struct request_queue *q);
bool blk_queue_flag_test_and_set(unsigned int flag, struct request_queue *q);
# 453 "./include/linux/blkdev.h"
extern void blk_set_pm_only(struct request_queue *q);
extern void blk_clear_pm_only(struct request_queue *q);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool queue_is_mq(struct request_queue *q)
{
 return q->mq_ops;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum rpm_status queue_rpm_status(struct request_queue *q)
{
 return RPM_ACTIVE;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum blk_zoned_model
blk_queue_zoned_model(struct request_queue *q)
{
 if (0)
  return q->limits.zoned;
 return BLK_ZONED_NONE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool blk_queue_is_zoned(struct request_queue *q)
{
 switch (blk_queue_zoned_model(q)) {
 case BLK_ZONED_HA:
 case BLK_ZONED_HM:
  return true;
 default:
  return false;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sector_t blk_queue_zone_sectors(struct request_queue *q)
{
 return blk_queue_is_zoned(q) ? q->limits.chunk_sectors : 0;
}
# 549 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int blk_queue_nr_zones(struct request_queue *q)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool blk_queue_zone_is_seq(struct request_queue *q,
      sector_t sector)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int blk_queue_zone_no(struct request_queue *q,
          sector_t sector)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_max_open_zones(const struct request_queue *q)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_max_active_zones(const struct request_queue *q)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int blk_queue_depth(struct request_queue *q)
{
 if (q->queue_depth)
  return q->queue_depth;

 return q->nr_requests;
}
# 592 "./include/linux/blkdev.h"
extern int blk_register_queue(struct gendisk *disk);
extern void blk_unregister_queue(struct gendisk *disk);
void submit_bio_noacct(struct bio *bio);

extern int blk_lld_busy(struct request_queue *q);
extern void blk_queue_split(struct bio **);
extern int blk_queue_enter(struct request_queue *q, blk_mq_req_flags_t flags);
extern void blk_queue_exit(struct request_queue *q);
extern void blk_sync_queue(struct request_queue *q);


extern const char *blk_op_str(unsigned int op);

int blk_status_to_errno(blk_status_t status);
blk_status_t errno_to_blk_status(int errno);





int bio_poll(struct bio *bio, struct io_comp_batch *iob, unsigned int flags);
int iocb_bio_iopoll(struct kiocb *kiocb, struct io_comp_batch *iob,
   unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct request_queue *bdev_get_queue(struct block_device *bdev)
{
 return bdev->bd_queue;
}
# 639 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int blk_queue_get_max_sectors(struct request_queue *q,
           int op)
{
 if (__builtin_expect(!!(op == REQ_OP_DISCARD || op == REQ_OP_SECURE_ERASE), 0))
  return __builtin_choose_expr(((!!(sizeof((typeof(q->limits.max_discard_sectors) *)1 == (typeof((~0U) >> 9) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(q->limits.max_discard_sectors) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((~0U) >> 9) * 0l)) : (int *)8))))), ((q->limits.max_discard_sectors) < ((~0U) >> 9) ? (q->limits.max_discard_sectors) : ((~0U) >> 9)), ({ typeof(q->limits.max_discard_sectors) __UNIQUE_ID___x420 = (q->limits.max_discard_sectors); typeof((~0U) >> 9) __UNIQUE_ID___y421 = ((~0U) >> 9); ((__UNIQUE_ID___x420) < (__UNIQUE_ID___y421) ? (__UNIQUE_ID___x420) : (__UNIQUE_ID___y421)); }));


 if (__builtin_expect(!!(op == REQ_OP_WRITE_SAME), 0))
  return q->limits.max_write_same_sectors;

 if (__builtin_expect(!!(op == REQ_OP_WRITE_ZEROES), 0))
  return q->limits.max_write_zeroes_sectors;

 return q->limits.max_sectors;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int blk_max_size_offset(struct request_queue *q,
            sector_t offset,
            unsigned int chunk_sectors)
{
 if (!chunk_sectors) {
  if (q->limits.chunk_sectors)
   chunk_sectors = q->limits.chunk_sectors;
  else
   return q->limits.max_sectors;
 }

 if (__builtin_expect(!!(is_power_of_2(chunk_sectors)), 1))
  chunk_sectors -= offset & (chunk_sectors - 1);
 else
  chunk_sectors -= ({ uint32_t __base = (chunk_sectors); uint32_t __rem; __rem = ((uint64_t)(offset)) % __base; (offset) = ((uint64_t)(offset)) / __base; __rem; });

 return __builtin_choose_expr(((!!(sizeof((typeof(q->limits.max_sectors) *)1 == (typeof(chunk_sectors) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(q->limits.max_sectors) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(chunk_sectors) * 0l)) : (int *)8))))), ((q->limits.max_sectors) < (chunk_sectors) ? (q->limits.max_sectors) : (chunk_sectors)), ({ typeof(q->limits.max_sectors) __UNIQUE_ID___x422 = (q->limits.max_sectors); typeof(chunk_sectors) __UNIQUE_ID___y423 = (chunk_sectors); ((__UNIQUE_ID___x422) < (__UNIQUE_ID___y423) ? (__UNIQUE_ID___x422) : (__UNIQUE_ID___y423)); }));
}




extern void blk_cleanup_queue(struct request_queue *);
void blk_queue_bounce_limit(struct request_queue *q, enum blk_bounce limit);
extern void blk_queue_max_hw_sectors(struct request_queue *, unsigned int);
extern void blk_queue_chunk_sectors(struct request_queue *, unsigned int);
extern void blk_queue_max_segments(struct request_queue *, unsigned short);
extern void blk_queue_max_discard_segments(struct request_queue *,
  unsigned short);
extern void blk_queue_max_segment_size(struct request_queue *, unsigned int);
extern void blk_queue_max_discard_sectors(struct request_queue *q,
  unsigned int max_discard_sectors);
extern void blk_queue_max_write_same_sectors(struct request_queue *q,
  unsigned int max_write_same_sectors);
extern void blk_queue_max_write_zeroes_sectors(struct request_queue *q,
  unsigned int max_write_same_sectors);
extern void blk_queue_logical_block_size(struct request_queue *, unsigned int);
extern void blk_queue_max_zone_append_sectors(struct request_queue *q,
  unsigned int max_zone_append_sectors);
extern void blk_queue_physical_block_size(struct request_queue *, unsigned int);
void blk_queue_zone_write_granularity(struct request_queue *q,
          unsigned int size);
extern void blk_queue_alignment_offset(struct request_queue *q,
           unsigned int alignment);
void disk_update_readahead(struct gendisk *disk);
extern void blk_limits_io_min(struct queue_limits *limits, unsigned int min);
extern void blk_queue_io_min(struct request_queue *q, unsigned int min);
extern void blk_limits_io_opt(struct queue_limits *limits, unsigned int opt);
extern void blk_queue_io_opt(struct request_queue *q, unsigned int opt);
extern void blk_set_queue_depth(struct request_queue *q, unsigned int depth);
extern void blk_set_default_limits(struct queue_limits *lim);
extern void blk_set_stacking_limits(struct queue_limits *lim);
extern int blk_stack_limits(struct queue_limits *t, struct queue_limits *b,
       sector_t offset);
extern void disk_stack_limits(struct gendisk *disk, struct block_device *bdev,
         sector_t offset);
extern void blk_queue_update_dma_pad(struct request_queue *, unsigned int);
extern void blk_queue_segment_boundary(struct request_queue *, unsigned long);
extern void blk_queue_virt_boundary(struct request_queue *, unsigned long);
extern void blk_queue_dma_alignment(struct request_queue *, int);
extern void blk_queue_update_dma_alignment(struct request_queue *, int);
extern void blk_queue_rq_timeout(struct request_queue *, unsigned int);
extern void blk_queue_write_cache(struct request_queue *q, bool enabled, bool fua);

struct blk_independent_access_ranges *
disk_alloc_independent_access_ranges(struct gendisk *disk, int nr_ia_ranges);
void disk_set_independent_access_ranges(struct gendisk *disk,
    struct blk_independent_access_ranges *iars);
# 736 "./include/linux/blkdev.h"
extern void blk_queue_required_elevator_features(struct request_queue *q,
       unsigned int features);
extern bool blk_queue_can_use_dma_map_merging(struct request_queue *q,
           struct device *dev);

bool __attribute__((__warn_unused_result__)) blk_get_queue(struct request_queue *);
extern void blk_put_queue(struct request_queue *);
extern void blk_set_queue_dying(struct request_queue *);
# 799 "./include/linux/blkdev.h"
struct blk_plug {
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void blk_start_plug_nr_ios(struct blk_plug *plug,
      unsigned short nr_ios)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void blk_start_plug(struct blk_plug *plug)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void blk_finish_plug(struct blk_plug *plug)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void blk_flush_plug(struct blk_plug *plug, bool async)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool blk_needs_flush_plug(struct task_struct *tsk)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int blkdev_issue_flush(struct block_device *bdev)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long nr_blockdev_pages(void)
{
 return 0;
}


extern void blk_io_schedule(void);

extern int blkdev_issue_write_same(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, struct page *page);



extern int blkdev_issue_discard(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, unsigned long flags);
extern int __blkdev_issue_discard(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, int flags,
  struct bio **biop);




extern int __blkdev_issue_zeroout(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, struct bio **biop,
  unsigned flags);
extern int blkdev_issue_zeroout(struct block_device *bdev, sector_t sector,
  sector_t nr_sects, gfp_t gfp_mask, unsigned flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sb_issue_discard(struct super_block *sb, sector_t block,
  sector_t nr_blocks, gfp_t gfp_mask, unsigned long flags)
{
 return blkdev_issue_discard(sb->s_bdev,
        block << (sb->s_blocksize_bits -
           9),
        nr_blocks << (sb->s_blocksize_bits -
        9),
        gfp_mask, flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sb_issue_zeroout(struct super_block *sb, sector_t block,
  sector_t nr_blocks, gfp_t gfp_mask)
{
 return blkdev_issue_zeroout(sb->s_bdev,
        block << (sb->s_blocksize_bits -
           9),
        nr_blocks << (sb->s_blocksize_bits -
        9),
        gfp_mask, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bdev_is_partition(struct block_device *bdev)
{
 return bdev->bd_partno;
}

enum blk_default_limits {
 BLK_MAX_SEGMENTS = 128,
 BLK_SAFE_MAX_SECTORS = 255,
 BLK_DEF_MAX_SECTORS = 2560,
 BLK_MAX_SEGMENT_SIZE = 65536,
 BLK_SEG_BOUNDARY_MASK = 0xFFFFFFFFUL,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long queue_segment_boundary(const struct request_queue *q)
{
 return q->limits.seg_boundary_mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long queue_virt_boundary(const struct request_queue *q)
{
 return q->limits.virt_boundary_mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_max_sectors(const struct request_queue *q)
{
 return q->limits.max_sectors;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_max_bytes(struct request_queue *q)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((unsigned int)(queue_max_sectors(q))) *)1 == (typeof((unsigned int)(((int)(~0U >> 1)) >> 9)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(queue_max_sectors(q))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((unsigned int)(((int)(~0U >> 1)) >> 9)) * 0l)) : (int *)8))))), (((unsigned int)(queue_max_sectors(q))) < ((unsigned int)(((int)(~0U >> 1)) >> 9)) ? ((unsigned int)(queue_max_sectors(q))) : ((unsigned int)(((int)(~0U >> 1)) >> 9))), ({ typeof((unsigned int)(queue_max_sectors(q))) __UNIQUE_ID___x424 = ((unsigned int)(queue_max_sectors(q))); typeof((unsigned int)(((int)(~0U >> 1)) >> 9)) __UNIQUE_ID___y425 = ((unsigned int)(((int)(~0U >> 1)) >> 9)); ((__UNIQUE_ID___x424) < (__UNIQUE_ID___y425) ? (__UNIQUE_ID___x424) : (__UNIQUE_ID___y425)); })) << 9;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_max_hw_sectors(const struct request_queue *q)
{
 return q->limits.max_hw_sectors;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned short queue_max_segments(const struct request_queue *q)
{
 return q->limits.max_segments;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned short queue_max_discard_segments(const struct request_queue *q)
{
 return q->limits.max_discard_segments;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_max_segment_size(const struct request_queue *q)
{
 return q->limits.max_segment_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_max_zone_append_sectors(const struct request_queue *q)
{

 const struct queue_limits *l = &q->limits;

 return __builtin_choose_expr(((!!(sizeof((typeof(l->max_zone_append_sectors) *)1 == (typeof(l->max_sectors) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(l->max_zone_append_sectors) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(l->max_sectors) * 0l)) : (int *)8))))), ((l->max_zone_append_sectors) < (l->max_sectors) ? (l->max_zone_append_sectors) : (l->max_sectors)), ({ typeof(l->max_zone_append_sectors) __UNIQUE_ID___x426 = (l->max_zone_append_sectors); typeof(l->max_sectors) __UNIQUE_ID___y427 = (l->max_sectors); ((__UNIQUE_ID___x426) < (__UNIQUE_ID___y427) ? (__UNIQUE_ID___x426) : (__UNIQUE_ID___y427)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned queue_logical_block_size(const struct request_queue *q)
{
 int retval = 512;

 if (q && q->limits.logical_block_size)
  retval = q->limits.logical_block_size;

 return retval;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int bdev_logical_block_size(struct block_device *bdev)
{
 return queue_logical_block_size(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_physical_block_size(const struct request_queue *q)
{
 return q->limits.physical_block_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int bdev_physical_block_size(struct block_device *bdev)
{
 return queue_physical_block_size(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_io_min(const struct request_queue *q)
{
 return q->limits.io_min;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bdev_io_min(struct block_device *bdev)
{
 return queue_io_min(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int queue_io_opt(const struct request_queue *q)
{
 return q->limits.io_opt;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bdev_io_opt(struct block_device *bdev)
{
 return queue_io_opt(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int
queue_zone_write_granularity(const struct request_queue *q)
{
 return q->limits.zone_write_granularity;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int
bdev_zone_write_granularity(struct block_device *bdev)
{
 return queue_zone_write_granularity(bdev_get_queue(bdev));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int queue_alignment_offset(const struct request_queue *q)
{
 if (q->limits.misaligned)
  return -1;

 return q->limits.alignment_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int queue_limit_alignment_offset(struct queue_limits *lim, sector_t sector)
{
 unsigned int granularity = __builtin_choose_expr(((!!(sizeof((typeof(lim->physical_block_size) *)1 == (typeof(lim->io_min) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(lim->physical_block_size) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(lim->io_min) * 0l)) : (int *)8))))), ((lim->physical_block_size) > (lim->io_min) ? (lim->physical_block_size) : (lim->io_min)), ({ typeof(lim->physical_block_size) __UNIQUE_ID___x428 = (lim->physical_block_size); typeof(lim->io_min) __UNIQUE_ID___y429 = (lim->io_min); ((__UNIQUE_ID___x428) > (__UNIQUE_ID___y429) ? (__UNIQUE_ID___x428) : (__UNIQUE_ID___y429)); }));
 unsigned int alignment = ({ uint32_t __base = (granularity >> 9); uint32_t __rem; __rem = ((uint64_t)(sector)) % __base; (sector) = ((uint64_t)(sector)) / __base; __rem; })
  << 9;

 return (granularity + lim->alignment_offset - alignment) % granularity;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bdev_alignment_offset(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q->limits.misaligned)
  return -1;
 if (bdev_is_partition(bdev))
  return queue_limit_alignment_offset(&q->limits,
    bdev->bd_start_sect);
 return q->limits.alignment_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int queue_discard_alignment(const struct request_queue *q)
{
 if (q->limits.discard_misaligned)
  return -1;

 return q->limits.discard_alignment;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int queue_limit_discard_alignment(struct queue_limits *lim, sector_t sector)
{
 unsigned int alignment, granularity, offset;

 if (!lim->max_discard_sectors)
  return 0;


 alignment = lim->discard_alignment >> 9;
 granularity = lim->discard_granularity >> 9;
 if (!granularity)
  return 0;


 offset = ({ uint32_t __base = (granularity); uint32_t __rem; __rem = ((uint64_t)(sector)) % __base; (sector) = ((uint64_t)(sector)) / __base; __rem; });


 offset = (granularity + alignment - offset) % granularity;


 return offset << 9;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bdev_discard_alignment(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (bdev_is_partition(bdev))
  return queue_limit_discard_alignment(&q->limits,
    bdev->bd_start_sect);
 return q->limits.discard_alignment;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int bdev_write_same(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return q->limits.max_write_same_sectors;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int bdev_write_zeroes_sectors(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return q->limits.max_write_zeroes_sectors;

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum blk_zoned_model bdev_zoned_model(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return blk_queue_zoned_model(q);

 return BLK_ZONED_NONE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bdev_is_zoned(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return blk_queue_is_zoned(q);

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sector_t bdev_zone_sectors(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return blk_queue_zone_sectors(q);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int bdev_max_open_zones(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return queue_max_open_zones(q);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int bdev_max_active_zones(struct block_device *bdev)
{
 struct request_queue *q = bdev_get_queue(bdev);

 if (q)
  return queue_max_active_zones(q);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int queue_dma_alignment(const struct request_queue *q)
{
 return q ? q->dma_alignment : 511;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int blk_rq_aligned(struct request_queue *q, unsigned long addr,
     unsigned int len)
{
 unsigned int alignment = queue_dma_alignment(q) | q->dma_pad_mask;
 return !(addr & alignment) && !(len & alignment);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int blksize_bits(unsigned int size)
{
 unsigned int bits = 8;
 do {
  bits++;
  size >>= 1;
 } while (size > 256);
 return bits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int block_size(struct block_device *bdev)
{
 return 1 << bdev->bd_inode->i_blkbits;
}

int kblockd_schedule_work(struct work_struct *work);
int kblockd_mod_delayed_work_on(int cpu, struct delayed_work *dwork, unsigned long delay);
# 1178 "./include/linux/blkdev.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool blk_crypto_register(struct blk_crypto_profile *profile,
           struct request_queue *q)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void blk_crypto_unregister(struct request_queue *q) { }



enum blk_unique_id {

 BLK_UID_T10 = 1,
 BLK_UID_EUI64 = 2,
 BLK_UID_NAA = 3,
};



struct block_device_operations {
 void (*submit_bio)(struct bio *bio);
 int (*open) (struct block_device *, fmode_t);
 void (*release) (struct gendisk *, fmode_t);
 int (*rw_page)(struct block_device *, sector_t, struct page *, unsigned int);
 int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
 int (*compat_ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
 unsigned int (*check_events) (struct gendisk *disk,
          unsigned int clearing);
 void (*unlock_native_capacity) (struct gendisk *);
 int (*getgeo)(struct block_device *, struct hd_geometry *);
 int (*set_read_only)(struct block_device *bdev, bool ro);

 void (*swap_slot_free_notify) (struct block_device *, unsigned long);
 int (*report_zones)(struct gendisk *, sector_t sector,
   unsigned int nr_zones, report_zones_cb cb, void *data);
 char *(*devnode)(struct gendisk *disk, umode_t *mode);

 int (*get_unique_id)(struct gendisk *disk, u8 id[16],
   enum blk_unique_id id_type);
 struct module *owner;
 const struct pr_ops *pr_ops;






 int (*alternative_gpt_sector)(struct gendisk *disk, sector_t *sector);
};
# 1235 "./include/linux/blkdev.h"
extern int bdev_read_page(struct block_device *, sector_t, struct page *);
extern int bdev_write_page(struct block_device *, sector_t, struct page *,
      struct writeback_control *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void blk_wake_io_task(struct task_struct *waiter)
{





 if (waiter == get_current())
  do { do { ({ int __ret_warn_on = !!((((0x0000)) & (0x0004 | 0x0008 | 0x0040 | 0x0080))); __builtin_expect(!!(__ret_warn_on), 0); }); get_current()->task_state_change = ({ __label__ __here; __here: (unsigned long)&&__here; }); } while (0); do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_430(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_430(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = ((0x0000)); } while (0); } while (0); } while (0);
 else
  wake_up_process(waiter);
}

unsigned long disk_start_io_acct(struct gendisk *disk, unsigned int sectors,
  unsigned int op);
void disk_end_io_acct(struct gendisk *disk, unsigned int op,
  unsigned long start_time);

unsigned long bio_start_io_acct(struct bio *bio);
void bio_end_io_acct_remapped(struct bio *bio, unsigned long start_time,
  struct block_device *orig_bdev);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bio_end_io_acct(struct bio *bio, unsigned long start_time)
{
 return bio_end_io_acct_remapped(bio, start_time, bio->bi_bdev);
}

int bdev_read_only(struct block_device *bdev);
int set_blocksize(struct block_device *bdev, int size);

const char *bdevname(struct block_device *bdev, char *buffer);
int lookup_bdev(const char *pathname, dev_t *dev);

void blkdev_show(struct seq_file *seqf, off_t offset);
# 1287 "./include/linux/blkdev.h"
struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
  void *holder);
struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode, void *holder);
int bd_prepare_to_claim(struct block_device *bdev, void *holder);
void bd_abort_claiming(struct block_device *bdev, void *holder);
void blkdev_put(struct block_device *bdev, fmode_t mode);


struct block_device *blkdev_get_no_open(dev_t dev);
void blkdev_put_no_open(struct block_device *bdev);

struct block_device *bdev_alloc(struct gendisk *disk, u8 partno);
void bdev_add(struct block_device *bdev, dev_t dev);
struct block_device *I_BDEV(struct inode *inode);
int truncate_bdev_range(struct block_device *bdev, fmode_t mode, loff_t lstart,
  loff_t lend);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invalidate_bdev(struct block_device *bdev)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sync_blockdev(struct block_device *bdev)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sync_blockdev_nowait(struct block_device *bdev)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sync_bdevs(bool wait)
{
}

int fsync_bdev(struct block_device *bdev);

int freeze_bdev(struct block_device *bdev);
int thaw_bdev(struct block_device *bdev);

struct io_comp_batch {
 struct request *req_list;
 bool need_ts;
 void (*complete)(struct io_comp_batch *);
};
# 24 "./include/linux/blk-cgroup.h" 2
# 613 "./include/linux/blk-cgroup.h"
struct blkcg {
};

struct blkg_policy_data {
};

struct blkcg_policy_data {
};

struct blkcg_gq {
};

struct blkcg_policy {
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void blkcg_maybe_throttle_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool blk_cgroup_congested(void) { return false; }
# 723 "./include/linux/blk-cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int blkcg_set_fc_appid(char *buf, u64 id, size_t len) { return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char *blkcg_get_fc_appid(struct bio *bio) { return ((void *)0); }
# 52 "./include/linux/tracehook.h" 2
struct linux_binprm;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ptrace_report_syscall(struct pt_regs *regs,
     unsigned long message)
{
 int ptrace = get_current()->ptrace;

 if (!(ptrace & 0x00000001))
  return 0;

 get_current()->ptrace_message = message;
 ptrace_notify(5 | ((ptrace & (1 << (3 + (0)))) ? 0x80 : 0));






 if (get_current()->exit_code) {
  send_sig(get_current()->exit_code, get_current(), 1);
  get_current()->exit_code = 0;
 }

 get_current()->ptrace_message = 0;
 return fatal_signal_pending(get_current());
}
# 102 "./include/linux/tracehook.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) int tracehook_report_syscall_entry(
 struct pt_regs *regs)
{
 return ptrace_report_syscall(regs, 1);
}
# 125 "./include/linux/tracehook.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tracehook_report_syscall_exit(struct pt_regs *regs, int step)
{
 if (step)
  user_single_step_report(regs);
 else
  ptrace_report_syscall(regs, 2);
}
# 144 "./include/linux/tracehook.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tracehook_signal_handler(int stepping)
{
 if (stepping)
  ptrace_notify(5);
}
# 159 "./include/linux/tracehook.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_notify_resume(struct task_struct *task)
{

 if (!test_and_set_tsk_thread_flag(task, 1))
  kick_process(task);

}
# 180 "./include/linux/tracehook.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tracehook_notify_resume(struct pt_regs *regs)
{
 clear_ti_thread_flag(((struct thread_info *)get_current()), 1);




 __asm__ __volatile__("": : :"memory");
 if (__builtin_expect(!!(get_current()->task_works), 0))
  task_work_run();


 if (__builtin_expect(!!(get_current()->cached_requested_key), 0)) {
  key_put(get_current()->cached_requested_key);
  get_current()->cached_requested_key = ((void *)0);
 }


 mem_cgroup_handle_over_high();
 blkcg_maybe_throttle_current();

 rseq_handle_notify_resume(((void *)0), regs);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tracehook_notify_signal(void)
{
 clear_ti_thread_flag(((struct thread_info *)get_current()), 17);
 __asm__ __volatile__("": : :"memory");
 if (get_current()->task_works)
  task_work_run();
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_notify_signal(struct task_struct *task)
{
 if (!test_and_set_tsk_thread_flag(task, 17) &&
     !wake_up_state(task, 0x0001))
  kick_process(task);
}
# 7 "./include/linux/entry-kvm.h" 2
# 1 "./include/linux/syscalls.h" 1
# 12 "./include/linux/syscalls.h"
struct __aio_sigset;
struct epoll_event;
struct iattr;
struct inode;
struct iocb;
struct io_event;
struct iovec;
struct __kernel_old_itimerval;
struct kexec_segment;
struct linux_dirent;
struct linux_dirent64;
struct list_head;
struct mmap_arg_struct;
struct msgbuf;
struct user_msghdr;
struct mmsghdr;
struct msqid_ds;
struct new_utsname;
struct nfsctl_arg;
struct __old_kernel_stat;
struct oldold_utsname;
struct old_utsname;
struct pollfd;
struct rlimit;
struct rlimit64;
struct rusage;
struct sched_param;
struct sched_attr;
struct sel_arg_struct;
struct semaphore;
struct sembuf;
struct shmid_ds;
struct sockaddr;
struct stat;
struct stat64;
struct statfs;
struct statfs64;
struct statx;
struct sysinfo;
struct timespec;
struct __kernel_old_timeval;
struct __kernel_timex;
struct timezone;
struct tms;
struct utimbuf;
struct mq_attr;
struct compat_stat;
struct old_timeval32;
struct robust_list_head;
struct futex_waitv;
struct getcpu_cache;
struct old_linux_dirent;
struct perf_event_attr;
struct file_handle;
struct sigaltstack;
struct rseq;
union bpf_attr;
struct io_uring_params;
struct clone_args;
struct open_how;
struct mount_attr;
struct landlock_ruleset_attr;
enum landlock_rule_type;


# 1 "./include/uapi/linux/aio_abi.h" 1
# 34 "./include/uapi/linux/aio_abi.h"
typedef __kernel_ulong_t aio_context_t;

enum {
 IOCB_CMD_PREAD = 0,
 IOCB_CMD_PWRITE = 1,
 IOCB_CMD_FSYNC = 2,
 IOCB_CMD_FDSYNC = 3,

 IOCB_CMD_POLL = 5,
 IOCB_CMD_NOOP = 6,
 IOCB_CMD_PREADV = 7,
 IOCB_CMD_PWRITEV = 8,
};
# 60 "./include/uapi/linux/aio_abi.h"
struct io_event {
 __u64 data;
 __u64 obj;
 __s64 res;
 __s64 res2;
};







struct iocb {

 __u64 aio_data;


 __u32 aio_key;
 __kernel_rwf_t aio_rw_flags;
# 88 "./include/uapi/linux/aio_abi.h"
 __u16 aio_lio_opcode;
 __s16 aio_reqprio;
 __u32 aio_fildes;

 __u64 aio_buf;
 __u64 aio_nbytes;
 __s64 aio_offset;


 __u64 aio_reserved2;


 __u32 aio_flags;





 __u32 aio_resfd;
};
# 78 "./include/linux/syscalls.h" 2
# 88 "./include/linux/syscalls.h"
# 1 "./include/trace/syscall.h" 1




# 1 "./include/linux/tracepoint.h" 1
# 6 "./include/trace/syscall.h" 2
# 25 "./include/trace/syscall.h"
struct syscall_metadata {
 const char *name;
 int syscall_nr;
 int nb_args;
 const char **types;
 const char **args;
 struct list_head enter_fields;

 struct trace_event_call *enter_event;
 struct trace_event_call *exit_event;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void syscall_tracepoint_update(struct task_struct *p)
{
 if (test_bit(SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT, &((struct thread_info *)get_current())->syscall_work))
  set_bit(SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT, &(&(p)->thread_info)->syscall_work);
 else
  clear_bit(SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT, &(&(p)->thread_info)->syscall_work);
}
# 89 "./include/linux/syscalls.h" 2
# 98 "./include/linux/syscalls.h"
# 1 "./arch/x86/include/asm/syscall_wrapper.h" 1








struct pt_regs;

extern long __x64_sys_ni_syscall(const struct pt_regs *regs);
extern long __ia32_sys_ni_syscall(const struct pt_regs *regs);
# 269 "./arch/x86/include/asm/syscall_wrapper.h"
long __x64_sys_getcpu(const struct pt_regs *regs);
long __x64_sys_gettimeofday(const struct pt_regs *regs);
long __x64_sys_time(const struct pt_regs *regs);
# 99 "./include/linux/syscalls.h" 2
# 133 "./include/linux/syscalls.h"
extern struct trace_event_class event_class_syscall_enter;
extern struct trace_event_class event_class_syscall_exit;
extern struct trace_event_functions enter_syscall_print_funcs;
extern struct trace_event_functions exit_syscall_print_funcs;
# 194 "./include/linux/syscalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_syscall_trace_event(struct trace_event_call *tp_event)
{
 return tp_event->class == &event_class_syscall_enter ||
        tp_event->class == &event_class_syscall_exit;
}
# 286 "./include/linux/syscalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void addr_limit_user_check(void)
{





 if (check_data_corruption(({ bool corruption = __builtin_expect(!!((false)), 0); if (corruption) { if (0) { ({ do {} while (0); _printk("\001" "3" "Invalid address limit on user-mode return"); }); do { ({ asm volatile("431" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "431" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("432" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "432" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0); } else ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("Invalid address limit on user-mode return"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); } corruption; })))

  force_sig(9);




}
# 1288 "./include/linux/syscalls.h"
ssize_t ksys_write(unsigned int fd, const char *buf, size_t count);
int ksys_fchown(unsigned int fd, uid_t user, gid_t group);
ssize_t ksys_read(unsigned int fd, char *buf, size_t count);
void ksys_sync(void);
int ksys_unshare(unsigned long unshare_flags);
int ksys_setsid(void);
int ksys_sync_file_range(int fd, loff_t offset, loff_t nbytes,
    unsigned int flags);
ssize_t ksys_pread64(unsigned int fd, char *buf, size_t count,
       loff_t pos);
ssize_t ksys_pwrite64(unsigned int fd, const char *buf,
        size_t count, loff_t pos);
int ksys_fallocate(int fd, int mode, loff_t offset, loff_t len);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ksys_fadvise64_64(int fd, loff_t offset, loff_t len,
        int advice)
{
 return -22;
}

unsigned long ksys_mmap_pgoff(unsigned long addr, unsigned long len,
         unsigned long prot, unsigned long flags,
         unsigned long fd, unsigned long pgoff);
ssize_t ksys_readahead(int fd, loff_t offset, size_t count);
int ksys_ipc(unsigned int call, int first, unsigned long second,
 unsigned long third, void * ptr, long fifth);
int compat_ksys_ipc(u32 call, int first, int second,
 u32 third, u32 ptr, u32 fifth);





extern int do_fchownat(int dfd, const char *filename, uid_t user,
         gid_t group, int flag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long ksys_chown(const char *filename, uid_t user,
         gid_t group)
{
 return do_fchownat(-100, filename, user, group, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long ksys_lchown(const char *filename, uid_t user,
          gid_t group)
{
 return do_fchownat(-100, filename, user, group,
        0x100);
}

extern long do_sys_ftruncate(unsigned int fd, loff_t length, int small);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long ksys_ftruncate(unsigned int fd, loff_t length)
{
 return do_sys_ftruncate(fd, length, 1);
}

extern long do_sys_truncate(const char *pathname, loff_t length);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long ksys_truncate(const char *pathname, loff_t length)
{
 return do_sys_truncate(pathname, length);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int ksys_personality(unsigned int personality)
{
 unsigned int old = get_current()->personality;

 if (personality != 0xffffffff)
  (get_current()->personality = (personality));

 return old;
}


long ksys_semtimedop(int semid, struct sembuf *tsops,
       unsigned int nsops,
       const struct __kernel_timespec *timeout);
long ksys_semget(key_t key, int nsems, int semflg);
long ksys_old_semctl(int semid, int semnum, int cmd, unsigned long arg);
long ksys_msgget(key_t key, int msgflg);
long ksys_old_msgctl(int msqid, int cmd, struct msqid_ds *buf);
long ksys_msgrcv(int msqid, struct msgbuf *msgp, size_t msgsz,
   long msgtyp, int msgflg);
long ksys_msgsnd(int msqid, struct msgbuf *msgp, size_t msgsz,
   int msgflg);
long ksys_shmget(key_t key, size_t size, int shmflg);
long ksys_shmdt(char *shmaddr);
long ksys_old_shmctl(int shmid, int cmd, struct shmid_ds *buf);
long compat_ksys_semtimedop(int semid, struct sembuf *tsems,
       unsigned int nsops,
       const struct old_timespec32 *timeout);
long __do_semtimedop(int semid, struct sembuf *tsems, unsigned int nsops,
       const struct timespec64 *timeout,
       struct ipc_namespace *ns);

int __sys_getsockopt(int fd, int level, int optname, char *optval,
  int *optlen);
int __sys_setsockopt(int fd, int level, int optname, char *optval,
  int optlen);
# 8 "./include/linux/entry-kvm.h" 2


# 1 "./include/linux/tick.h" 1







# 1 "./include/linux/clockchips.h" 1
# 19 "./include/linux/clockchips.h"
struct clock_event_device;
struct module;
# 35 "./include/linux/clockchips.h"
enum clock_event_state {
 CLOCK_EVT_STATE_DETACHED,
 CLOCK_EVT_STATE_SHUTDOWN,
 CLOCK_EVT_STATE_PERIODIC,
 CLOCK_EVT_STATE_ONESHOT,
 CLOCK_EVT_STATE_ONESHOT_STOPPED,
};
# 100 "./include/linux/clockchips.h"
struct clock_event_device {
 void (*event_handler)(struct clock_event_device *);
 int (*set_next_event)(unsigned long evt, struct clock_event_device *);
 int (*set_next_ktime)(ktime_t expires, struct clock_event_device *);
 ktime_t next_event;
 u64 max_delta_ns;
 u64 min_delta_ns;
 u32 mult;
 u32 shift;
 enum clock_event_state state_use_accessors;
 unsigned int features;
 unsigned long retries;

 int (*set_state_periodic)(struct clock_event_device *);
 int (*set_state_oneshot)(struct clock_event_device *);
 int (*set_state_oneshot_stopped)(struct clock_event_device *);
 int (*set_state_shutdown)(struct clock_event_device *);
 int (*tick_resume)(struct clock_event_device *);

 void (*broadcast)(const struct cpumask *mask);
 void (*suspend)(struct clock_event_device *);
 void (*resume)(struct clock_event_device *);
 unsigned long min_delta_ticks;
 unsigned long max_delta_ticks;

 const char *name;
 int rating;
 int irq;
 int bound_on;
 const struct cpumask *cpumask;
 struct list_head list;
 struct module *owner;
} __attribute__((__aligned__((1 << (6)))));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool clockevent_state_detached(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_DETACHED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool clockevent_state_shutdown(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_SHUTDOWN;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool clockevent_state_periodic(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_PERIODIC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool clockevent_state_oneshot(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_ONESHOT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool clockevent_state_oneshot_stopped(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_ONESHOT_STOPPED;
}
# 171 "./include/linux/clockchips.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
div_sc(unsigned long ticks, unsigned long nsec, int shift)
{
 u64 tmp = ((u64)ticks) << shift;

 ({ uint32_t __base = (nsec); uint32_t __rem; __rem = ((uint64_t)(tmp)) % __base; (tmp) = ((uint64_t)(tmp)) / __base; __rem; });

 return (unsigned long) tmp;
}


extern u64 clockevent_delta2ns(unsigned long latch, struct clock_event_device *evt);
extern void clockevents_register_device(struct clock_event_device *dev);
extern int clockevents_unbind_device(struct clock_event_device *ced, int cpu);

extern void clockevents_config_and_register(struct clock_event_device *dev,
         u32 freq, unsigned long min_delta,
         unsigned long max_delta);

extern int clockevents_update_freq(struct clock_event_device *ce, u32 freq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
clockevents_calc_mult_shift(struct clock_event_device *ce, u32 freq, u32 maxsec)
{
 return clocks_calc_mult_shift(&ce->mult, &ce->shift, 1000000000L, freq, maxsec);
}

extern void clockevents_suspend(void);
extern void clockevents_resume(void);







extern int tick_receive_broadcast(void);



extern void tick_setup_hrtimer_broadcast(void);
extern int tick_check_broadcast_expired(void);
# 9 "./include/linux/tick.h" 2








extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) tick_init(void);

extern void tick_suspend_local(void);

extern void tick_resume_local(void);
extern void tick_handover_do_timer(void);
extern void tick_cleanup_dead_cpu(int cpu);
# 36 "./include/linux/tick.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_freeze(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_unfreeze(void) { }



extern void tick_irq_enter(void);
# 50 "./include/linux/tick.h"
extern void hotplug_cpu__broadcast_tick_pull(int dead_cpu);




enum tick_broadcast_mode {
 TICK_BROADCAST_OFF,
 TICK_BROADCAST_ON,
 TICK_BROADCAST_FORCE,
};

enum tick_broadcast_state {
 TICK_BROADCAST_EXIT,
 TICK_BROADCAST_ENTER,
};


extern void tick_broadcast_control(enum tick_broadcast_mode mode);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_offline_cpu(unsigned int cpu) { }



extern int tick_broadcast_oneshot_control(enum tick_broadcast_state state);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_broadcast_enable(void)
{
 tick_broadcast_control(TICK_BROADCAST_ON);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_broadcast_disable(void)
{
 tick_broadcast_control(TICK_BROADCAST_OFF);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_broadcast_force(void)
{
 tick_broadcast_control(TICK_BROADCAST_FORCE);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int tick_broadcast_enter(void)
{
 return tick_broadcast_oneshot_control(TICK_BROADCAST_ENTER);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_broadcast_exit(void)
{
 tick_broadcast_oneshot_control(TICK_BROADCAST_EXIT);
}

enum tick_dep_bits {
 TICK_DEP_BIT_POSIX_TIMER = 0,
 TICK_DEP_BIT_PERF_EVENTS = 1,
 TICK_DEP_BIT_SCHED = 2,
 TICK_DEP_BIT_CLOCK_UNSTABLE = 3,
 TICK_DEP_BIT_RCU = 4,
 TICK_DEP_BIT_RCU_EXP = 5
};
# 153 "./include/linux/tick.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int tick_nohz_tick_stopped(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int tick_nohz_tick_stopped_cpu(int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_idle_stop_tick(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_idle_retain_tick(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_idle_restart_tick(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_idle_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_idle_exit(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool tick_nohz_idle_got_tick(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t tick_nohz_get_next_hrtimer(void)
{

 return ((ktime_get()) + (((1000000000L +250/2)/250)));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t tick_nohz_get_sleep_length(ktime_t *delta_next)
{
 *delta_next = ((1000000000L +250/2)/250);
 return *delta_next;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 get_cpu_idle_time_us(int cpu, u64 *unused) { return -1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 get_cpu_iowait_time_us(int cpu, u64 *unused) { return -1; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_idle_stop_tick_protected(void) { }
# 277 "./include/linux/tick.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool tick_nohz_full_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool tick_nohz_full_cpu(int cpu) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_full_add_cpus_to(struct cpumask *mask) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_dep_set_cpu(int cpu, enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_dep_clear_cpu(int cpu, enum tick_dep_bits bit) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_set(enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_clear(enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_set_cpu(int cpu, enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_clear_cpu(int cpu, enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_set_task(struct task_struct *tsk,
         enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_clear_task(struct task_struct *tsk,
           enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_set_signal(struct task_struct *tsk,
           enum tick_dep_bits bit) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_dep_clear_signal(struct signal_struct *signal,
      enum tick_dep_bits bit) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_full_kick_cpu(int cpu) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __tick_nohz_task_switch(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_full_setup(cpumask_var_t cpumask) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_task_switch(void)
{
 if (tick_nohz_full_enabled())
  __tick_nohz_task_switch();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tick_nohz_user_enter_prepare(void)
{
 if (tick_nohz_full_cpu(debug_smp_processor_id()))
  rcu_nocb_flush_deferred_wakeup();
}
# 11 "./include/linux/entry-kvm.h" 2
# 23 "./include/linux/entry-kvm.h"
struct kvm_vcpu;
# 34 "./include/linux/entry-kvm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_xfer_to_guest_mode_handle_work(struct kvm_vcpu *vcpu,
            unsigned long ti_work);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_xfer_to_guest_mode_handle_work(struct kvm_vcpu *vcpu,
            unsigned long ti_work)
{
 return 0;
}
# 52 "./include/linux/entry-kvm.h"
int xfer_to_guest_mode_handle_work(struct kvm_vcpu *vcpu);
# 62 "./include/linux/entry-kvm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xfer_to_guest_mode_prepare(void)
{
 do { } while (0);
 tick_nohz_user_enter_prepare();
}
# 76 "./include/linux/entry-kvm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __xfer_to_guest_mode_work_pending(void)
{
 unsigned long ti_work = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_433(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((struct thread_info *)get_current())->flags) == sizeof(char) || sizeof(((struct thread_info *)get_current())->flags) == sizeof(short) || sizeof(((struct thread_info *)get_current())->flags) == sizeof(int) || sizeof(((struct thread_info *)get_current())->flags) == sizeof(long)) || sizeof(((struct thread_info *)get_current())->flags) == sizeof(long long))) __compiletime_assert_433(); } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)get_current())->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)get_current())->flags))) *)&(((struct thread_info *)get_current())->flags)); });

 return !!(ti_work & ((1 << 3) | (1 << 2) | (1 << 17) | (1 << 1) | (0)));
}
# 92 "./include/linux/entry-kvm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xfer_to_guest_mode_work_pending(void)
{
 do { } while (0);
 return __xfer_to_guest_mode_work_pending();
}
# 31 "arch/x86/kvm/vmx/vmx.c" 2



# 1 "./arch/x86/include/asm/cpu.h" 1
# 17 "./arch/x86/include/asm/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prefill_possible_map(void) {}







struct x86_cpu {
 struct cpu cpu;
};
# 38 "./arch/x86/include/asm/cpu.h"
int mwait_usable(const struct cpuinfo_x86 *);

unsigned int x86_family(unsigned int sig);
unsigned int x86_model(unsigned int sig);
unsigned int x86_stepping(unsigned int sig);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sld_setup(struct cpuinfo_x86 *c);
extern void switch_to_sld(unsigned long tifn);
extern bool handle_user_split_lock(struct pt_regs *regs, long error_code);
extern bool handle_guest_split_lock(unsigned long ip);
extern void handle_bus_lock(struct pt_regs *regs);
u8 get_this_hybrid_cpu_type(void);
# 71 "./arch/x86/include/asm/cpu.h"
void init_ia32_feat_ctl(struct cpuinfo_x86 *c);
# 35 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/include/asm/cpu_device_id.h" 1
# 14 "./arch/x86/include/asm/cpu_device_id.h"
# 1 "./arch/x86/include/asm/intel-family.h" 1
# 15 "./arch/x86/include/asm/cpu_device_id.h" 2
# 177 "./arch/x86/include/asm/cpu_device_id.h"
struct x86_cpu_desc {
 u8 x86_family;
 u8 x86_vendor;
 u8 x86_model;
 u8 x86_stepping;
 u32 x86_microcode_rev;
};
# 193 "./arch/x86/include/asm/cpu_device_id.h"
extern const struct x86_cpu_id *x86_match_cpu(const struct x86_cpu_id *match);
extern bool x86_cpu_has_min_microcode_rev(const struct x86_cpu_desc *table);
# 36 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/include/asm/debugreg.h" 1






# 1 "./arch/x86/include/uapi/asm/debugreg.h" 1
# 8 "./arch/x86/include/asm/debugreg.h" 2

extern __attribute__((section(".data" ""))) __typeof__(unsigned long) cpu_dr7;
# 21 "./arch/x86/include/asm/debugreg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long native_get_debugreg(int regno)
{
 unsigned long val = 0;

 switch (regno) {
 case 0:
  asm("mov %%db0, %0" :"=r" (val));
  break;
 case 1:
  asm("mov %%db1, %0" :"=r" (val));
  break;
 case 2:
  asm("mov %%db2, %0" :"=r" (val));
  break;
 case 3:
  asm("mov %%db3, %0" :"=r" (val));
  break;
 case 6:
  asm("mov %%db6, %0" :"=r" (val));
  break;
 case 7:
  asm("mov %%db7, %0" :"=r" (val));
  break;
 default:
  do { ({ asm volatile("434" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "434" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("435" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "435" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_set_debugreg(int regno, unsigned long value)
{
 switch (regno) {
 case 0:
  asm("mov %0, %%db0" ::"r" (value));
  break;
 case 1:
  asm("mov %0, %%db1" ::"r" (value));
  break;
 case 2:
  asm("mov %0, %%db2" ::"r" (value));
  break;
 case 3:
  asm("mov %0, %%db3" ::"r" (value));
  break;
 case 6:
  asm("mov %0, %%db6" ::"r" (value));
  break;
 case 7:
  asm("mov %0, %%db7" ::"r" (value));
  break;
 default:
  do { ({ asm volatile("436" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "436" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("437" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "437" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hw_breakpoint_disable(void)
{

 native_set_debugreg(7, 0UL);


 native_set_debugreg(0, 0UL);
 native_set_debugreg(1, 0UL);
 native_set_debugreg(2, 0UL);
 native_set_debugreg(3, 0UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool hw_breakpoint_active(void)
{
 return ({ __this_cpu_preempt_check("read"); ({ typeof(cpu_dr7) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_dr7)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_dr7)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (cpu_dr7)); (typeof(cpu_dr7))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (cpu_dr7)); (typeof(cpu_dr7))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (cpu_dr7)); (typeof(cpu_dr7))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (cpu_dr7)); (typeof(cpu_dr7))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }) & (0xAA);
}

extern void hw_breakpoint_restore(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long local_db_save(void)
{
 unsigned long dr7;

 if (( __builtin_constant_p((__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(19) && (1UL<<((( 4*32+31))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 4*32+31), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(19) && (1UL<<((( 4*32+31))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 4*32+31), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(( 4*32+31)) ) && !hw_breakpoint_active())
  return 0;

 (dr7) = native_get_debugreg(7);
 dr7 &= ~0x400;
 if (dr7)
  native_set_debugreg(7, 0);





 __asm__ __volatile__("": : :"memory");

 return dr7;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void local_db_restore(unsigned long dr7)
{





 __asm__ __volatile__("": : :"memory");
 if (dr7)
  native_set_debugreg(7, dr7);
}


extern void set_dr_addr_mask(unsigned long mask, int dr);
# 37 "arch/x86/kvm/vmx/vmx.c" 2


# 1 "./arch/x86/include/asm/idtentry.h" 1





# 1 "./arch/x86/include/asm/trapnr.h" 1
# 7 "./arch/x86/include/asm/idtentry.h" 2


# 1 "./include/linux/entry-common.h" 1
# 11 "./include/linux/entry-common.h"
# 1 "./arch/x86/include/asm/entry-common.h" 1




# 1 "./include/linux/randomize_kstack.h" 1








extern struct static_key_false randomize_kstack_offset;

extern __attribute__((section(".data" ""))) __typeof__(u32) kstack_offset;
# 20 "./include/linux/randomize_kstack.h"
void *__builtin_alloca(size_t size);
# 6 "./arch/x86/include/asm/entry-common.h" 2
# 1 "./include/linux/user-return-notifier.h" 1
# 10 "./include/linux/user-return-notifier.h"
struct user_return_notifier {
 void (*on_user_return)(struct user_return_notifier *urn);
 struct hlist_node link;
};


void user_return_notifier_register(struct user_return_notifier *urn);
void user_return_notifier_unregister(struct user_return_notifier *urn);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void propagate_user_return_notify(struct task_struct *prev,
      struct task_struct *next)
{
 if (test_tsk_thread_flag(prev, 11)) {
  clear_tsk_thread_flag(prev, 11);
  set_tsk_thread_flag(next, 11);
 }
}

void fire_user_return_notifiers(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_user_return_notifier(struct task_struct *p)
{
 clear_tsk_thread_flag(p, 11);
}
# 7 "./arch/x86/include/asm/entry-common.h" 2


# 1 "./arch/x86/include/asm/io_bitmap.h" 1







struct io_bitmap {
 u64 sequence;
 refcount_t refcnt;

 unsigned int max;
 unsigned long bitmap[((65536 / 8) / sizeof(long))];
};

struct task_struct;
# 47 "./arch/x86/include/asm/io_bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void io_bitmap_share(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void io_bitmap_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tss_update_io_bitmap(void) { }
# 10 "./arch/x86/include/asm/entry-common.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_check_user_regs(struct pt_regs *regs)
{
 if (1) {





  unsigned long flags = native_save_fl();
  unsigned long mask = (((1UL)) << (10)) | (((1UL)) << (14));




  if ((__builtin_constant_p(( 9*32+20)) && ( (((( 9*32+20))>>5)==(0) && (1UL<<((( 9*32+20))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+20))>>5)==(1) && (1UL<<((( 9*32+20))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+20))>>5)==(2) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(3) && (1UL<<((( 9*32+20))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+20))>>5)==(4) && (1UL<<((( 9*32+20))&31) & (0) )) || (((( 9*32+20))>>5)==(5) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(6) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(7) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(8) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(9) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(10) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(11) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(12) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(13) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(14) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(15) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(16) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(17) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(18) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(19) && (1UL<<((( 9*32+20))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+20), (unsigned long *)((&boot_cpu_data)->x86_capability))) ||
      (1 && (__builtin_constant_p(( 8*32+16)) && ( (((( 8*32+16))>>5)==(0) && (1UL<<((( 8*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 8*32+16))>>5)==(1) && (1UL<<((( 8*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 8*32+16))>>5)==(2) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(3) && (1UL<<((( 8*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 8*32+16))>>5)==(4) && (1UL<<((( 8*32+16))&31) & (0) )) || (((( 8*32+16))>>5)==(5) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(6) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(7) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(8) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(9) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(10) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(11) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(12) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(13) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(14) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(15) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(16) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(17) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(18) && (1UL<<((( 8*32+16))&31) & 0 )) || (((( 8*32+16))>>5)==(19) && (1UL<<((( 8*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 8*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))))
   mask |= (((1UL)) << (18));

  ({ int __ret_warn_on = !!(flags & mask); __builtin_expect(!!(__ret_warn_on), 0); });


  ({ int __ret_warn_on = !!(!user_mode(regs)); __builtin_expect(!!(__ret_warn_on), 0); });






  ({ int __ret_warn_on = !!(!on_thread_stack()); __builtin_expect(!!(__ret_warn_on), 0); });
  ({ int __ret_warn_on = !!(regs != ({ unsigned long __ptr = (unsigned long)task_stack_page(get_current()); __ptr += (((1UL) << 12) << (2 + 0)) - 0; ((struct pt_regs *)__ptr) - 1; })); __builtin_expect(!!(__ret_warn_on), 0); });
 }
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_exit_to_user_mode_prepare(struct pt_regs *regs,
        unsigned long ti_work)
{
 if (ti_work & (1 << 11))
  fire_user_return_notifiers();

 if (__builtin_expect(!!(ti_work & (1 << 22)), 0))
  tss_update_io_bitmap();

 fpregs_assert_state_consistent();
 if (__builtin_expect(!!(ti_work & (1 << 14)), 0))
  switch_fpu_return();
# 88 "./arch/x86/include/asm/entry-common.h"
 do { if ((0 ? __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&randomize_kstack_offset)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&randomize_kstack_offset)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&randomize_kstack_offset)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&randomize_kstack_offset)->key) > 0; })), 1) : __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&randomize_kstack_offset)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&randomize_kstack_offset)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&randomize_kstack_offset)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&randomize_kstack_offset)->key) > 0; })), 0))) { u32 offset = ({ typeof(kstack_offset) pscr_ret__; do { const void *__vpp_verify = (typeof((&(kstack_offset)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(kstack_offset)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (kstack_offset)); (typeof(kstack_offset))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (kstack_offset)); (typeof(kstack_offset))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (kstack_offset)); (typeof(kstack_offset))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (kstack_offset)); (typeof(kstack_offset))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); offset ^= (rdtsc() & 0xFF); do { do { const void *__vpp_verify = (typeof((&(kstack_offset)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(kstack_offset)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) offset) & 0xff)); if (0) { typeof((kstack_offset)) pto_tmp__; pto_tmp__ = (offset); (void)pto_tmp__; } asm ("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstack_offset)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) offset) & 0xffff)); if (0) { typeof((kstack_offset)) pto_tmp__; pto_tmp__ = (offset); (void)pto_tmp__; } asm ("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstack_offset)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) offset) & 0xffffffff)); if (0) { typeof((kstack_offset)) pto_tmp__; pto_tmp__ = (offset); (void)pto_tmp__; } asm ("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstack_offset)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(offset)); if (0) { typeof((kstack_offset)) pto_tmp__; pto_tmp__ = (offset); (void)pto_tmp__; } asm ("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((kstack_offset)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); } } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_exit_to_user_mode(void)
{
 mds_user_clear_cpu_buffers();
}
# 12 "./include/linux/entry-common.h" 2
# 76 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_check_user_regs(struct pt_regs *regs);
# 93 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) int arch_syscall_enter_tracehook(struct pt_regs *regs);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) int arch_syscall_enter_tracehook(struct pt_regs *regs)
{
 return tracehook_report_syscall_entry(regs);
}
# 121 "./include/linux/entry-common.h"
void enter_from_user_mode(struct pt_regs *regs);
# 138 "./include/linux/entry-common.h"
void syscall_enter_from_user_mode_prepare(struct pt_regs *regs);
# 163 "./include/linux/entry-common.h"
long syscall_enter_from_user_mode_work(struct pt_regs *regs, long syscall);
# 182 "./include/linux/entry-common.h"
long syscall_enter_from_user_mode(struct pt_regs *regs, long syscall);
# 191 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_irq_enable_exit_to_user(unsigned long ti_work);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_irq_enable_exit_to_user(unsigned long ti_work)
{
 do { arch_local_irq_enable(); } while (0);
}
# 206 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_irq_disable_exit_to_user(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_irq_disable_exit_to_user(void)
{
 do { arch_local_irq_disable(); } while (0);
}
# 225 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_exit_to_user_mode_work(struct pt_regs *regs,
            unsigned long ti_work);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_exit_to_user_mode_work(struct pt_regs *regs,
            unsigned long ti_work)
{
}
# 244 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_exit_to_user_mode_prepare(struct pt_regs *regs,
        unsigned long ti_work);
# 267 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_exit_to_user_mode(void);
# 280 "./include/linux/entry-common.h"
void arch_do_signal_or_restart(struct pt_regs *regs, bool has_signal);
# 292 "./include/linux/entry-common.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_syscall_exit_tracehook(struct pt_regs *regs, bool step);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_syscall_exit_tracehook(struct pt_regs *regs, bool step)
{
 tracehook_report_syscall_exit(regs, step);
}
# 319 "./include/linux/entry-common.h"
void exit_to_user_mode(void);
# 334 "./include/linux/entry-common.h"
void syscall_exit_to_user_mode_work(struct pt_regs *regs);
# 365 "./include/linux/entry-common.h"
void syscall_exit_to_user_mode(struct pt_regs *regs);
# 378 "./include/linux/entry-common.h"
void irqentry_enter_from_user_mode(struct pt_regs *regs);
# 393 "./include/linux/entry-common.h"
void irqentry_exit_to_user_mode(struct pt_regs *regs);
# 411 "./include/linux/entry-common.h"
typedef struct irqentry_state {
 union {
  bool exit_rcu;
  bool lockdep;
 };
} irqentry_state_t;
# 450 "./include/linux/entry-common.h"
irqentry_state_t __attribute__((__noinline__)) __attribute__((no_instrument_function)) __attribute((__section__(".noinstr.text"))) __attribute__((__no_profile_instrument_function__)) irqentry_enter(struct pt_regs *regs);






void irqentry_exit_cond_resched(void);

extern struct static_call_key __SCK__irqentry_exit_cond_resched; extern typeof(irqentry_exit_cond_resched) __SCT__irqentry_exit_cond_resched;;
# 476 "./include/linux/entry-common.h"
void __attribute__((__noinline__)) __attribute__((no_instrument_function)) __attribute((__section__(".noinstr.text"))) __attribute__((__no_profile_instrument_function__)) irqentry_exit(struct pt_regs *regs, irqentry_state_t state);







irqentry_state_t __attribute__((__noinline__)) __attribute__((no_instrument_function)) __attribute((__section__(".noinstr.text"))) __attribute__((__no_profile_instrument_function__)) irqentry_nmi_enter(struct pt_regs *regs);
# 495 "./include/linux/entry-common.h"
void __attribute__((__noinline__)) __attribute__((no_instrument_function)) __attribute((__section__(".noinstr.text"))) __attribute__((__no_profile_instrument_function__)) irqentry_nmi_exit(struct pt_regs *regs, irqentry_state_t irq_state);
# 10 "./arch/x86/include/asm/idtentry.h" 2


# 1 "./arch/x86/include/asm/irq_stack.h" 1
# 13 "./arch/x86/include/asm/idtentry.h" 2
# 546 "./arch/x86/include/asm/idtentry.h"
 void asm_exc_divide_error(void); void xen_asm_exc_divide_error(void); void exc_divide_error(struct pt_regs *regs);
 void asm_exc_overflow(void); void xen_asm_exc_overflow(void); void exc_overflow(struct pt_regs *regs);
 void asm_exc_bounds(void); void xen_asm_exc_bounds(void); void exc_bounds(struct pt_regs *regs);
 void asm_exc_device_not_available(void); void xen_asm_exc_device_not_available(void); void exc_device_not_available(struct pt_regs *regs);
 void asm_exc_coproc_segment_overrun(void); void xen_asm_exc_coproc_segment_overrun(void); void exc_coproc_segment_overrun(struct pt_regs *regs);
 void asm_exc_spurious_interrupt_bug(void); void xen_asm_exc_spurious_interrupt_bug(void); void exc_spurious_interrupt_bug(struct pt_regs *regs);
 void asm_exc_coprocessor_error(void); void xen_asm_exc_coprocessor_error(void); void exc_coprocessor_error(struct pt_regs *regs);
 void asm_exc_simd_coprocessor_error(void); void xen_asm_exc_simd_coprocessor_error(void); void exc_simd_coprocessor_error(struct pt_regs *regs);


 void asm_iret_error(void); void xen_asm_iret_error(void); void iret_error(struct pt_regs *regs);


 void asm_exc_invalid_tss(void); void xen_asm_exc_invalid_tss(void); void exc_invalid_tss(struct pt_regs *regs, unsigned long error_code);
 void asm_exc_segment_not_present(void); void xen_asm_exc_segment_not_present(void); void exc_segment_not_present(struct pt_regs *regs, unsigned long error_code);
 void asm_exc_stack_segment(void); void xen_asm_exc_stack_segment(void); void exc_stack_segment(struct pt_regs *regs, unsigned long error_code);
 void asm_exc_general_protection(void); void xen_asm_exc_general_protection(void); void exc_general_protection(struct pt_regs *regs, unsigned long error_code);
 void asm_exc_alignment_check(void); void xen_asm_exc_alignment_check(void); void exc_alignment_check(struct pt_regs *regs, unsigned long error_code);


 void asm_exc_invalid_op(void); void xen_asm_exc_invalid_op(void); void exc_invalid_op(struct pt_regs *regs);
 void asm_exc_int3(void); void xen_asm_exc_int3(void); void exc_int3(struct pt_regs *regs);
 void asm_exc_page_fault(void); void xen_asm_exc_page_fault(void); void exc_page_fault(struct pt_regs *regs, unsigned long error_code);
# 592 "./arch/x86/include/asm/idtentry.h"
 void asm_exc_nmi_noist(void); void xen_asm_exc_nmi_noist(void); void exc_nmi_noist(struct pt_regs *regs);




 void asm_exc_nmi(void); void xen_asm_exc_nmi(void); void exc_nmi(struct pt_regs *regs);






 void asm_exc_debug(void); void xen_asm_exc_debug(void); void exc_debug(struct pt_regs *regs); void noist_exc_debug(struct pt_regs *regs);
# 613 "./arch/x86/include/asm/idtentry.h"
 void asm_exc_double_fault(void); void xen_asm_exc_double_fault(void); void exc_double_fault(struct pt_regs *regs, unsigned long error_code);
# 629 "./arch/x86/include/asm/idtentry.h"
 void asm_common_interrupt(void); void xen_asm_common_interrupt(void); void common_interrupt(struct pt_regs *regs, unsigned long error_code);

 void asm_spurious_interrupt(void); void xen_asm_spurious_interrupt(void); void spurious_interrupt(struct pt_regs *regs, unsigned long error_code);




 void asm_sysvec_error_interrupt(void); void xen_asm_sysvec_error_interrupt(void); void sysvec_error_interrupt(struct pt_regs *regs);
 void asm_sysvec_spurious_apic_interrupt(void); void xen_asm_sysvec_spurious_apic_interrupt(void); void sysvec_spurious_apic_interrupt(struct pt_regs *regs);
 void asm_sysvec_apic_timer_interrupt(void); void xen_asm_sysvec_apic_timer_interrupt(void); void sysvec_apic_timer_interrupt(struct pt_regs *regs);
 void asm_sysvec_x86_platform_ipi(void); void xen_asm_sysvec_x86_platform_ipi(void); void sysvec_x86_platform_ipi(struct pt_regs *regs);
# 660 "./arch/x86/include/asm/idtentry.h"
 void asm_sysvec_thermal(void); void xen_asm_sysvec_thermal(void); void sysvec_thermal(struct pt_regs *regs);



 void asm_sysvec_irq_work(void); void xen_asm_sysvec_irq_work(void); void sysvec_irq_work(struct pt_regs *regs);




 void asm_sysvec_kvm_posted_intr_ipi(void); void xen_asm_sysvec_kvm_posted_intr_ipi(void); void sysvec_kvm_posted_intr_ipi(struct pt_regs *regs);
 void asm_sysvec_kvm_posted_intr_wakeup_ipi(void); void xen_asm_sysvec_kvm_posted_intr_wakeup_ipi(void); void sysvec_kvm_posted_intr_wakeup_ipi(struct pt_regs *regs);
 void asm_sysvec_kvm_posted_intr_nested_ipi(void); void xen_asm_sysvec_kvm_posted_intr_nested_ipi(void); void sysvec_kvm_posted_intr_nested_ipi(struct pt_regs *regs);
# 40 "arch/x86/kvm/vmx/vmx.c" 2

# 1 "./arch/x86/include/asm/irq_remapping.h" 1
# 15 "./arch/x86/include/asm/irq_remapping.h"
# 1 "./arch/x86/include/asm/io_apic.h" 1
# 19 "./arch/x86/include/asm/io_apic.h"
union IO_APIC_reg_00 {
 u32 raw;
 struct {
  u32 __reserved_2 : 14,
   LTS : 1,
   delivery_type : 1,
   __reserved_1 : 8,
   ID : 8;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_01 {
 u32 raw;
 struct {
  u32 version : 8,
   __reserved_2 : 7,
   PRQ : 1,
   entries : 8,
   __reserved_1 : 8;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_02 {
 u32 raw;
 struct {
  u32 __reserved_2 : 24,
   arbitration : 4,
   __reserved_1 : 4;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_03 {
 u32 raw;
 struct {
  u32 boot_DT : 1,
   __reserved_1 : 31;
 } __attribute__ ((packed)) bits;
};

struct IO_APIC_route_entry {
 union {
  struct {
   u64 vector : 8,
    delivery_mode : 3,
    dest_mode_logical : 1,
    delivery_status : 1,
    active_low : 1,
    irr : 1,
    is_level : 1,
    masked : 1,
    reserved_0 : 15,
    reserved_1 : 17,
    virt_destid_8_14 : 7,
    destid_0_7 : 8;
  };
  struct {
   u64 ir_shared_0 : 8,
    ir_zero : 3,
    ir_index_15 : 1,
    ir_shared_1 : 5,
    ir_reserved_0 : 31,
    ir_format : 1,
    ir_index_0_14 : 15;
  };
  struct {
   u64 w1 : 32,
    w2 : 32;
  };
 };
} __attribute__ ((packed));

struct irq_alloc_info;
struct ioapic_domain_cfg;
# 101 "./arch/x86/include/asm/io_apic.h"
extern int nr_ioapics;

extern int mpc_ioapic_id(int ioapic);
extern unsigned int mpc_ioapic_addr(int ioapic);


extern int mp_irq_entries;


extern struct mpc_intsrc mp_irqs[(256 * 4)];


extern int skip_ioapic_setup;


extern int noioapicquirk;


extern int noioapicreroute;

extern u32 gsi_top;

extern unsigned long io_apic_irqs;
# 134 "./arch/x86/include/asm/io_apic.h"
struct irq_cfg;
extern void ioapic_insert_resources(void);
extern int arch_early_ioapic_init(void);

extern int save_ioapic_entries(void);
extern void mask_ioapic_entries(void);
extern int restore_ioapic_entries(void);

extern void setup_ioapic_ids_from_mpc(void);
extern void setup_ioapic_ids_from_mpc_nocheck(void);

extern int mp_find_ioapic(u32 gsi);
extern int mp_find_ioapic_pin(int ioapic, u32 gsi);
extern int mp_map_gsi_to_irq(u32 gsi, unsigned int flags,
        struct irq_alloc_info *info);
extern void mp_unmap_irq(int irq);
extern int mp_register_ioapic(int id, u32 address, u32 gsi_base,
         struct ioapic_domain_cfg *cfg);
extern int mp_unregister_ioapic(u32 gsi_base);
extern int mp_ioapic_registered(u32 gsi_base);

extern void ioapic_set_alloc_attr(struct irq_alloc_info *info,
      int node, int trigger, int polarity);

extern void mp_save_irq(struct mpc_intsrc *m);

extern void disable_ioapic_support(void);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) io_apic_init_mappings(void);
extern unsigned int native_io_apic_read(unsigned int apic, unsigned int reg);
extern void native_restore_boot_irq_mode(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int io_apic_read(unsigned int apic, unsigned int reg)
{
 return x86_apic_ops.io_apic_read(apic, reg);
}

extern void setup_IO_APIC(void);
extern void enable_IO_APIC(void);
extern void clear_IO_APIC(void);
extern void restore_boot_irq_mode(void);
extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin);
extern void print_IO_APICs(void);
# 16 "./arch/x86/include/asm/irq_remapping.h" 2

struct msi_msg;
struct irq_alloc_info;

enum irq_remap_cap {
 IRQ_POSTING_CAP = 0,
};

enum {
 IRQ_REMAP_XAPIC_MODE,
 IRQ_REMAP_X2APIC_MODE,
};

struct vcpu_data {
 u64 pi_desc_addr;
 u32 vector;
};
# 59 "./arch/x86/include/asm/irq_remapping.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool irq_remapping_cap(enum irq_remap_cap cap) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_irq_remapping_broken(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_remapping_prepare(void) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_remapping_enable(void) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irq_remapping_disable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_remapping_reenable(int eim) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_remap_enable_fault_handling(void) { return -19; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void panic_if_irq_remap(const char *msg)
{
}
# 42 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/include/asm/kexec.h" 1
# 30 "./arch/x86/include/asm/kexec.h"
struct kimage;
# 74 "./arch/x86/include/asm/kexec.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void crash_setup_regs(struct pt_regs *newregs,
        struct pt_regs *oldregs)
{
 if (oldregs) {
  memcpy(newregs, oldregs, sizeof(*newregs));
 } else {
# 95 "./arch/x86/include/asm/kexec.h"
  asm volatile("movq %%rbx,%0" : "=m"(newregs->bx));
  asm volatile("movq %%rcx,%0" : "=m"(newregs->cx));
  asm volatile("movq %%rdx,%0" : "=m"(newregs->dx));
  asm volatile("movq %%rsi,%0" : "=m"(newregs->si));
  asm volatile("movq %%rdi,%0" : "=m"(newregs->di));
  asm volatile("movq %%rbp,%0" : "=m"(newregs->bp));
  asm volatile("movq %%rax,%0" : "=m"(newregs->ax));
  asm volatile("movq %%rsp,%0" : "=m"(newregs->sp));
  asm volatile("movq %%r8,%0" : "=m"(newregs->r8));
  asm volatile("movq %%r9,%0" : "=m"(newregs->r9));
  asm volatile("movq %%r10,%0" : "=m"(newregs->r10));
  asm volatile("movq %%r11,%0" : "=m"(newregs->r11));
  asm volatile("movq %%r12,%0" : "=m"(newregs->r12));
  asm volatile("movq %%r13,%0" : "=m"(newregs->r13));
  asm volatile("movq %%r14,%0" : "=m"(newregs->r14));
  asm volatile("movq %%r15,%0" : "=m"(newregs->r15));
  asm volatile("movl %%ss, %%eax;" :"=a"(newregs->ss));
  asm volatile("movl %%cs, %%eax;" :"=a"(newregs->cs));
  asm volatile("pushfq; popq %0" :"=m"(newregs->flags));

  newregs->ip = ({ __label__ __here; __here: (unsigned long)&&__here; });
 }
}
# 127 "./arch/x86/include/asm/kexec.h"
unsigned long
relocate_kernel(unsigned long indirection_page,
  unsigned long page_list,
  unsigned long start_address,
  unsigned int preserve_context,
  unsigned int host_mem_enc_active);
# 148 "./arch/x86/include/asm/kexec.h"
struct kimage_arch {
 p4d_t *p4d;
 pud_t *pud;
 pmd_t *pmd;
 pte_t *pte;
};
# 162 "./arch/x86/include/asm/kexec.h"
struct kexec_entry64_regs {
 uint64_t rax;
 uint64_t rcx;
 uint64_t rdx;
 uint64_t rbx;
 uint64_t rsp;
 uint64_t rbp;
 uint64_t rsi;
 uint64_t rdi;
 uint64_t r8;
 uint64_t r9;
 uint64_t r10;
 uint64_t r11;
 uint64_t r12;
 uint64_t r13;
 uint64_t r14;
 uint64_t r15;
 uint64_t rip;
};

extern int arch_kexec_post_alloc_pages(void *vaddr, unsigned int pages,
           gfp_t gfp);


extern void arch_kexec_pre_free_pages(void *vaddr, unsigned int pages);




typedef void crash_vmclear_fn(void);
extern crash_vmclear_fn *crash_vmclear_loaded_vmcss;
extern void kdump_nmi_shootdown_cpus(void);
# 43 "arch/x86/kvm/vmx/vmx.c" 2

# 1 "./arch/x86/include/asm/mmu_context.h" 1







# 1 "./include/linux/pkeys.h" 1
# 10 "./include/linux/pkeys.h"
# 1 "./arch/x86/include/asm/pkeys.h" 1
# 12 "./arch/x86/include/asm/pkeys.h"
extern int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,
  unsigned long init_val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_pkeys_enabled(void)
{
 return (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) ));
}





extern int __execute_only_pkey(struct mm_struct *mm);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int execute_only_pkey(struct mm_struct *mm)
{
 if (!(__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )))
  return 0;

 return __execute_only_pkey(mm);
}

extern int __arch_override_mprotect_pkey(struct vm_area_struct *vma,
  int prot, int pkey);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_override_mprotect_pkey(struct vm_area_struct *vma,
  int prot, int pkey)
{
 if (!(__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )))
  return 0;

 return __arch_override_mprotect_pkey(vma, prot, pkey);
}

extern int __arch_set_user_pkey_access(struct task_struct *tsk, int pkey,
  unsigned long init_val);
# 57 "./arch/x86/include/asm/pkeys.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
bool mm_pkey_is_allocated(struct mm_struct *mm, int pkey)
{





 if (pkey < 0)
  return false;
 if (pkey >= ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )) ? 16 : 1))
  return false;





 if (pkey == mm->context.execute_only_pkey)
  return false;

 return (mm->context.pkey_allocation_map) & (1U << pkey);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
int mm_pkey_alloc(struct mm_struct *mm)
{






 u16 all_pkeys_mask = ((1U << ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )) ? 16 : 1)) - 1);
 int ret;






 if ((mm->context.pkey_allocation_map) == all_pkeys_mask)
  return -1;

 ret = ffz((mm->context.pkey_allocation_map));

 do { (mm->context.pkey_allocation_map) |= (1U << ret); } while (0);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
int mm_pkey_free(struct mm_struct *mm, int pkey)
{
 if (!mm_pkey_is_allocated(mm, pkey))
  return -22;

 do { (mm->context.pkey_allocation_map) &= ~(1U << pkey); } while (0);

 return 0;
}

extern int arch_set_user_pkey_access(struct task_struct *tsk, int pkey,
  unsigned long init_val);
extern int __arch_set_user_pkey_access(struct task_struct *tsk, int pkey,
  unsigned long init_val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vma_pkey(struct vm_area_struct *vma)
{
 unsigned long vma_pkey_mask = ((((1UL))) << (32)) | ((((1UL))) << (33)) |
          ((((1UL))) << (34)) | ((((1UL))) << (35));

 return (vma->vm_flags & vma_pkey_mask) >> 32;
}
# 11 "./include/linux/pkeys.h" 2
# 9 "./arch/x86/include/asm/mmu_context.h" 2

# 1 "./include/trace/events/tlb.h" 1








# 1 "./include/linux/tracepoint.h" 1
# 10 "./include/trace/events/tlb.h" 2
# 27 "./include/trace/events/tlb.h"
; ; ; ; ;
# 38 "./include/trace/events/tlb.h"
extern int __traceiter_tlb_flush(void *__data, int reason, unsigned long pages); extern struct static_call_key __SCK__tp_func_tlb_flush; extern typeof(__traceiter_tlb_flush) __SCT__tp_func_tlb_flush;; extern struct tracepoint __tracepoint_tlb_flush; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_tlb_flush(int reason, unsigned long pages) { if (static_key_false(&__tracepoint_tlb_flush.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_tlb_flush)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_438(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_tlb_flush)->funcs) == sizeof(char) || sizeof((&__tracepoint_tlb_flush)->funcs) == sizeof(short) || sizeof((&__tracepoint_tlb_flush)->funcs) == sizeof(int) || sizeof((&__tracepoint_tlb_flush)->funcs) == sizeof(long)) || sizeof((&__tracepoint_tlb_flush)->funcs) == sizeof(long long))) __compiletime_assert_438(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_tlb_flush)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_tlb_flush)->funcs))) *)&((&__tracepoint_tlb_flush)->funcs)); }); ((typeof(*(&__tracepoint_tlb_flush)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_tlb_flush439 = (void *)&__SCK__tp_func_tlb_flush;; (&__SCT__tp_func_tlb_flush); })(__data, reason, pages); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_tlb_flush.funcs)) *________p1 = (typeof(*(__tracepoint_tlb_flush.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_440(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_tlb_flush.funcs)) == sizeof(char) || sizeof((__tracepoint_tlb_flush.funcs)) == sizeof(short) || sizeof((__tracepoint_tlb_flush.funcs)) == sizeof(int) || sizeof((__tracepoint_tlb_flush.funcs)) == sizeof(long)) || sizeof((__tracepoint_tlb_flush.funcs)) == sizeof(long long))) __compiletime_assert_440(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_tlb_flush.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_tlb_flush.funcs)))) *)&((__tracepoint_tlb_flush.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_tlb_flush.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_tlb_flush(void (*probe)(void *__data, int reason, unsigned long pages), void *data) { return tracepoint_probe_register(&__tracepoint_tlb_flush, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_tlb_flush(void (*probe)(void *__data, int reason, unsigned long pages), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_tlb_flush, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_tlb_flush(void (*probe)(void *__data, int reason, unsigned long pages), void *data) { return tracepoint_probe_unregister(&__tracepoint_tlb_flush, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_tlb_flush(void (*cb)(void *__data, int reason, unsigned long pages)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_tlb_flush_enabled(void) { return static_key_false(&__tracepoint_tlb_flush.key); };
# 62 "./include/trace/events/tlb.h"
# 1 "./include/trace/define_trace.h" 1
# 63 "./include/trace/events/tlb.h" 2
# 11 "./arch/x86/include/asm/mmu_context.h" 2

# 1 "./arch/x86/include/asm/tlbflush.h" 1
# 12 "./arch/x86/include/asm/tlbflush.h"
# 1 "./arch/x86/include/asm/invpcid.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __invpcid(unsigned long pcid, unsigned long addr,
        unsigned long type)
{
 struct { u64 d[2]; } desc = { { pcid, addr } };







 asm volatile("invpcid %[desc], %[type]"
       :: [desc] "m" (desc), [type] "r" (type) : "memory");
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invpcid_flush_one(unsigned long pcid,
         unsigned long addr)
{
 __invpcid(pcid, addr, 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invpcid_flush_single_context(unsigned long pcid)
{
 __invpcid(pcid, 0, 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invpcid_flush_all(void)
{
 __invpcid(0, 0, 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invpcid_flush_all_nonglobals(void)
{
 __invpcid(0, 0, 3);
}
# 13 "./arch/x86/include/asm/tlbflush.h" 2
# 1 "./arch/x86/include/asm/pti.h" 1
# 11 "./arch/x86/include/asm/pti.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pti_check_boottime_disable(void) { }
# 14 "./arch/x86/include/asm/tlbflush.h" 2


void __flush_tlb_all(void);



void cr4_update_irqsoff(unsigned long set, unsigned long clear);
unsigned long cr4_read_shadow(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cr4_set_bits_irqsoff(unsigned long mask)
{
 cr4_update_irqsoff(mask, 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cr4_clear_bits_irqsoff(unsigned long mask)
{
 cr4_update_irqsoff(0, mask);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cr4_set_bits(unsigned long mask)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 cr4_set_bits_irqsoff(mask);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cr4_clear_bits(unsigned long mask)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 cr4_clear_bits_irqsoff(mask);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 13 "./arch/x86/include/asm/mmu_context.h" 2
# 1 "./arch/x86/include/asm/paravirt.h" 1
# 780 "./arch/x86/include/asm/paravirt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void paravirt_arch_dup_mmap(struct mm_struct *oldmm,
       struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void paravirt_arch_exit_mmap(struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void paravirt_set_cap(void)
{
}
# 14 "./arch/x86/include/asm/mmu_context.h" 2


extern atomic64_t last_mm_ctx_id;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void paravirt_activate_mm(struct mm_struct *prev,
     struct mm_struct *next)
{
}



extern struct static_key_false rdpmc_never_available_key;
extern struct static_key_false rdpmc_always_available_key;
void cr4_update_pce(void *ignored);







struct ldt_struct {






 struct desc_struct *entries;
 unsigned int nr_entries;
# 55 "./arch/x86/include/asm/mmu_context.h"
 int slot;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_new_context_ldt(struct mm_struct *mm)
{
 mm->context.ldt = ((void *)0);
 do { static struct lock_class_key __key; __init_rwsem((&mm->context.ldt_usr_sem), "&mm->context.ldt_usr_sem", &__key); } while (0);
}
int ldt_dup_context(struct mm_struct *oldmm, struct mm_struct *mm);
void destroy_context_ldt(struct mm_struct *mm);
void ldt_arch_exit_mmap(struct mm_struct *mm);
# 81 "./arch/x86/include/asm/mmu_context.h"
extern void load_mm_ldt(struct mm_struct *mm);
extern void switch_ldt(struct mm_struct *prev, struct mm_struct *next);
# 95 "./arch/x86/include/asm/mmu_context.h"
extern void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int init_new_context(struct task_struct *tsk,
       struct mm_struct *mm)
{
 do { static struct lock_class_key __key; __mutex_init((&mm->context.lock), "&mm->context.lock", &__key); } while (0);

 mm->context.ctx_id = atomic64_inc_return(&last_mm_ctx_id);
 atomic64_set(&mm->context.tlb_gen, 0);


 if ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) ))) {

  mm->context.pkey_allocation_map = 0x1;

  mm->context.execute_only_pkey = -1;
 }

 init_new_context_ldt(mm);
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void destroy_context(struct mm_struct *mm)
{
 destroy_context_ldt(mm);
}

extern void switch_mm(struct mm_struct *prev, struct mm_struct *next,
        struct task_struct *tsk);

extern void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,
          struct task_struct *tsk);
# 154 "./arch/x86/include/asm/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_dup_pkeys(struct mm_struct *oldmm,
      struct mm_struct *mm)
{

 if (!(__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & ((1 << (( 7*32+11) & 31))) )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+ 4)) )))
  return;


 mm->context.pkey_allocation_map = oldmm->context.pkey_allocation_map;
 mm->context.execute_only_pkey = oldmm->context.execute_only_pkey;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_dup_mmap(struct mm_struct *oldmm, struct mm_struct *mm)
{
 arch_dup_pkeys(oldmm, mm);
 paravirt_arch_dup_mmap(oldmm, mm);
 return ldt_dup_context(oldmm, mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_exit_mmap(struct mm_struct *mm)
{
 paravirt_arch_exit_mmap(mm);
 ldt_arch_exit_mmap(mm);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_64bit_mm(struct mm_struct *mm)
{
 return !0 ||
  !(mm->context.flags & ((((1UL))) << (0)));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_unmap(struct mm_struct *mm, unsigned long start,
         unsigned long end)
{
}
# 207 "./arch/x86/include/asm/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_vma_access_permitted(struct vm_area_struct *vma,
  bool write, bool execute, bool foreign)
{

 if (execute)
  return true;

 if (foreign || vma_is_foreign(vma))
  return true;
 return __pkru_allows_pkey(vma_pkey(vma), write);
}

unsigned long __get_current_cr3_fast(void);

# 1 "./include/asm-generic/mmu_context.h" 1








struct task_struct;
struct mm_struct;
# 222 "./arch/x86/include/asm/mmu_context.h" 2
# 45 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/include/asm/mshyperv.h" 1





# 1 "./include/linux/nmi.h" 1
# 37 "./include/linux/nmi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockup_detector_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockup_detector_soft_poweroff(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockup_detector_cleanup(void) { }
# 52 "./include/linux/nmi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void touch_softlockup_watchdog_sched(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void touch_softlockup_watchdog(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void touch_softlockup_watchdog_sync(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void touch_all_softlockup_watchdogs(void) { }






void reset_hung_task_detector(void);
# 88 "./include/linux/nmi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hardlockup_detector_disable(void) {}
# 106 "./include/linux/nmi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hardlockup_detector_perf_stop(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hardlockup_detector_perf_restart(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hardlockup_detector_perf_disable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hardlockup_detector_perf_enable(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hardlockup_detector_perf_cleanup(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hardlockup_detector_perf_init(void) { return -19; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_touch_nmi_watchdog(void) {}





void watchdog_nmi_stop(void);
void watchdog_nmi_start(void);
int watchdog_nmi_probe(void);
int watchdog_nmi_enable(unsigned int cpu);
void watchdog_nmi_disable(unsigned int cpu);
# 132 "./include/linux/nmi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void touch_nmi_watchdog(void)
{
 arch_touch_nmi_watchdog();
 touch_softlockup_watchdog();
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trigger_all_cpu_backtrace(void)
{
 arch_trigger_cpumask_backtrace(((const struct cpumask *)&__cpu_online_mask), false);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trigger_allbutself_cpu_backtrace(void)
{
 arch_trigger_cpumask_backtrace(((const struct cpumask *)&__cpu_online_mask), true);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trigger_cpumask_backtrace(struct cpumask *mask)
{
 arch_trigger_cpumask_backtrace(mask, false);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trigger_single_cpu_backtrace(int cpu)
{
 arch_trigger_cpumask_backtrace((get_cpu_mask(cpu)), false);
 return true;
}


void nmi_trigger_cpumask_backtrace(const cpumask_t *mask,
       bool exclude_self,
       void (*raise)(cpumask_t *mask));
bool nmi_cpu_backtrace(struct pt_regs *regs);
# 201 "./include/linux/nmi.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void watchdog_update_hrtimer_threshold(u64 period) { }


struct ctl_table;
int proc_watchdog(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_nmi_watchdog(struct ctl_table *, int , void *, size_t *, loff_t *);
int proc_soft_watchdog(struct ctl_table *, int , void *, size_t *, loff_t *);
int proc_watchdog_thresh(struct ctl_table *, int , void *, size_t *, loff_t *);
int proc_watchdog_cpumask(struct ctl_table *, int, void *, size_t *, loff_t *);
# 7 "./arch/x86/include/asm/mshyperv.h" 2





# 1 "./arch/x86/include/asm/mshyperv.h" 1
# 13 "./arch/x86/include/asm/mshyperv.h" 2

union hv_ghcb;

extern struct static_key_false isolation_type_snp;

typedef int (*hyperv_fill_flush_list_func)(
  struct hv_guest_mapping_flush_list *flush,
  void *data);



void hyperv_vector_handler(struct pt_regs *regs);
# 230 "./arch/x86/include/asm/mshyperv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hyperv_init(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hyperv_setup_mmu_ops(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_hv_tscchange_cb(void (*cb)(void)) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_hv_tscchange_cb(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hyperv_stop_tsc_emulation(void) {};
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct hv_vp_assist_page *hv_get_vp_assist_page(unsigned int cpu)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hyperv_flush_guest_mapping(u64 as) { return -1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hyperv_flush_guest_mapping_range(u64 as,
  hyperv_fill_flush_list_func fill_func, void *data)
{
 return -1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hv_set_register(unsigned int reg, u64 value) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 hv_get_register(unsigned int reg) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hv_set_mem_host_visibility(unsigned long addr, int numpages,
          bool visible)
{
 return -1;
}



# 1 "./include/asm-generic/mshyperv.h" 1
# 29 "./include/asm-generic/mshyperv.h"
struct ms_hyperv_info {
 u32 features;
 u32 priv_high;
 u32 misc_features;
 u32 hints;
 u32 nested_features;
 u32 max_vp_index;
 u32 max_lp_index;
 u32 isolation_config_a;
 union {
  u32 isolation_config_b;
  struct {
   u32 cvm_type : 4;
   u32 reserved1 : 1;
   u32 shared_gpa_boundary_active : 1;
   u32 shared_gpa_boundary_bits : 6;
   u32 reserved2 : 20;
  };
 };
 u64 shared_gpa_boundary;
};
extern struct ms_hyperv_info ms_hyperv;

extern void **hyperv_pcpu_input_arg;
extern void **hyperv_pcpu_output_arg;

extern u64 hv_do_hypercall(u64 control, void *inputaddr, void *outputaddr);
extern u64 hv_do_fast_hypercall8(u16 control, u64 input8);
extern bool hv_isolation_type_snp(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hv_result(u64 status)
{
 return status & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (15)) * 0l)) : (int *)8))), (0) > (15), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (15)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hv_result_success(u64 status)
{
 return hv_result(status) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int hv_repcomp(u64 status)
{

 return (status & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((32) > (43)) * 0l)) : (int *)8))), (32) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (32)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))))) >>
    32;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 hv_do_rep_hypercall(u16 code, u16 rep_count, u16 varhead_size,
          void *input, void *output)
{
 u64 control = code;
 u64 status;
 u16 rep_comp;

 control |= (u64)varhead_size << 17;
 control |= (u64)rep_count << 32;

 do {
  status = hv_do_hypercall(control, input, output);
  if (!hv_result_success(status))
   return status;

  rep_comp = hv_repcomp(status);

  control &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((48) > (59)) * 0l)) : (int *)8))), (48) > (59), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (48)) + 1) & (~(((0ULL))) >> (64 - 1 - (59)))));
  control |= (u64)rep_comp << 48;

  touch_nmi_watchdog();
 } while (rep_comp < rep_count);

 return status;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u64 generate_guest_id(__u64 d_info1, __u64 kernel_version,
           __u64 d_info2)
{
 __u64 guest_id = 0;

 guest_id = (((__u64)0x8100) << 48);
 guest_id |= (d_info1 << 48);
 guest_id |= (kernel_version << 16);
 guest_id |= d_info2;

 return guest_id;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmbus_signal_eom(struct hv_message *msg, u32 old_msg_type)
{
# 134 "./include/asm-generic/mshyperv.h"
 if (({ typeof(&msg->header.message_type) __ai_ptr = (&msg->header.message_type); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*((__ai_ptr))) __ret; __typeof__(*((__ai_ptr))) __old = ((old_msg_type)); __typeof__(*((__ai_ptr))) __new = ((HVMSG_NONE)); switch ((sizeof(*(__ai_ptr)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((__ai_ptr)); asm volatile("" "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((__ai_ptr)); asm volatile("" "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((__ai_ptr)); asm volatile("" "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((__ai_ptr)); asm volatile("" "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; }); }) != old_msg_type)

  return;
# 146 "./include/asm-generic/mshyperv.h"
 if (msg->header.message_flags.msg_pending) {





  hv_set_register(0x40000084, 0);
 }
}

void hv_setup_vmbus_handler(void (*handler)(void));
void hv_remove_vmbus_handler(void);
void hv_setup_stimer0_handler(void (*handler)(void));
void hv_remove_stimer0_handler(void);

void hv_setup_kexec_handler(void (*handler)(void));
void hv_remove_kexec_handler(void);
void hv_setup_crash_handler(void (*handler)(struct pt_regs *regs));
void hv_remove_crash_handler(void);

extern int vmbus_interrupt;
extern int vmbus_irq;

extern bool hv_root_partition;
# 273 "./include/asm-generic/mshyperv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hv_is_hyperv_initialized(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hv_is_hibernation_supported(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hyperv_cleanup(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hv_is_isolation_supported(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum hv_isolation_type hv_get_isolation_type(void)
{
 return HV_ISOLATION_TYPE_NONE;
}
# 256 "./arch/x86/include/asm/mshyperv.h" 2
# 46 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/include/asm/mwait.h" 1
# 28 "./arch/x86/include/asm/mwait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __monitor(const void *eax, unsigned long ecx,
        unsigned long edx)
{

 asm volatile(".byte 0x0f, 0x01, 0xc8;"
       :: "a" (eax), "c" (ecx), "d"(edx));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __monitorx(const void *eax, unsigned long ecx,
         unsigned long edx)
{

 asm volatile(".byte 0x0f, 0x01, 0xfa;"
       :: "a" (eax), "c" (ecx), "d"(edx));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mwait(unsigned long eax, unsigned long ecx)
{
 mds_idle_clear_cpu_buffers();


 asm volatile(".byte 0x0f, 0x01, 0xc9;"
       :: "a" (eax), "c" (ecx));
}
# 79 "./arch/x86/include/asm/mwait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __mwaitx(unsigned long eax, unsigned long ebx,
       unsigned long ecx)
{



 asm volatile(".byte 0x0f, 0x01, 0xfb;"
       :: "a" (eax), "b" (ebx), "c" (ecx));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __sti_mwait(unsigned long eax, unsigned long ecx)
{
 mds_idle_clear_cpu_buffers();

 asm volatile("sti; .byte 0x0f, 0x01, 0xc9;"
       :: "a" (eax), "c" (ecx));
}
# 107 "./arch/x86/include/asm/mwait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mwait_idle_with_hints(unsigned long eax, unsigned long ecx)
{
 if (( __builtin_constant_p((__builtin_constant_p(((20*32 + (12)))) && ( (((((20*32 + (12))))>>5)==(0) && (1UL<<((((20*32 + (12))))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((((20*32 + (12))))>>5)==(1) && (1UL<<((((20*32 + (12))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((((20*32 + (12))))>>5)==(2) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(3) && (1UL<<((((20*32 + (12))))&31) & ((1<<(( 3*32+20) & 31))) )) || (((((20*32 + (12))))>>5)==(4) && (1UL<<((((20*32 + (12))))&31) & (0) )) || (((((20*32 + (12))))>>5)==(5) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(6) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(7) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(8) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(9) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(10) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(11) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(12) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(13) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(14) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(15) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(16) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(17) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(18) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(19) && (1UL<<((((20*32 + (12))))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(((20*32 + (12))), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(((20*32 + (12)))) && ( (((((20*32 + (12))))>>5)==(0) && (1UL<<((((20*32 + (12))))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((((20*32 + (12))))>>5)==(1) && (1UL<<((((20*32 + (12))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((((20*32 + (12))))>>5)==(2) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(3) && (1UL<<((((20*32 + (12))))&31) & ((1<<(( 3*32+20) & 31))) )) || (((((20*32 + (12))))>>5)==(4) && (1UL<<((((20*32 + (12))))&31) & (0) )) || (((((20*32 + (12))))>>5)==(5) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(6) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(7) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(8) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(9) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(10) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(11) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(12) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(13) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(14) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(15) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(16) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(17) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(18) && (1UL<<((((20*32 + (12))))&31) & 0 )) || (((((20*32 + (12))))>>5)==(19) && (1UL<<((((20*32 + (12))))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(((20*32 + (12))), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(((20*32 + (12)))) ) || !current_set_polling_and_test()) {
  if (( __builtin_constant_p((__builtin_constant_p(((20*32 + (7)))) && ( (((((20*32 + (7))))>>5)==(0) && (1UL<<((((20*32 + (7))))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((((20*32 + (7))))>>5)==(1) && (1UL<<((((20*32 + (7))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((((20*32 + (7))))>>5)==(2) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(3) && (1UL<<((((20*32 + (7))))&31) & ((1<<(( 3*32+20) & 31))) )) || (((((20*32 + (7))))>>5)==(4) && (1UL<<((((20*32 + (7))))&31) & (0) )) || (((((20*32 + (7))))>>5)==(5) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(6) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(7) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(8) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(9) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(10) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(11) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(12) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(13) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(14) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(15) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(16) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(17) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(18) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(19) && (1UL<<((((20*32 + (7))))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(((20*32 + (7))), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(((20*32 + (7)))) && ( (((((20*32 + (7))))>>5)==(0) && (1UL<<((((20*32 + (7))))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((((20*32 + (7))))>>5)==(1) && (1UL<<((((20*32 + (7))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((((20*32 + (7))))>>5)==(2) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(3) && (1UL<<((((20*32 + (7))))&31) & ((1<<(( 3*32+20) & 31))) )) || (((((20*32 + (7))))>>5)==(4) && (1UL<<((((20*32 + (7))))&31) & (0) )) || (((((20*32 + (7))))>>5)==(5) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(6) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(7) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(8) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(9) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(10) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(11) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(12) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(13) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(14) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(15) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(16) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(17) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(18) && (1UL<<((((20*32 + (7))))&31) & 0 )) || (((((20*32 + (7))))>>5)==(19) && (1UL<<((((20*32 + (7))))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(((20*32 + (7))), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(((20*32 + (7)))) )) {
   asm volatile("mfence":::"memory");
   clflush((void *)&((struct thread_info *)get_current())->flags);
   asm volatile("mfence":::"memory");
  }

  __monitor((void *)&((struct thread_info *)get_current())->flags, 0, 0);
  if (!need_resched())
   __mwait(eax, ecx);
 }
 current_clr_polling();
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __tpause(u32 ecx, u32 edx, u32 eax)
{


 asm volatile("tpause %%ecx\n"
       :
       : "c"(ecx), "d"(edx), "a"(eax));





}
# 47 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/include/asm/spec-ctrl.h" 1
# 16 "./arch/x86/include/asm/spec-ctrl.h"
extern void x86_virt_spec_ctrl(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl, bool guest);
# 26 "./arch/x86/include/asm/spec-ctrl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
void x86_spec_ctrl_set_guest(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl)
{
 x86_virt_spec_ctrl(guest_spec_ctrl, guest_virt_spec_ctrl, true);
}
# 40 "./arch/x86/include/asm/spec-ctrl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
void x86_spec_ctrl_restore_host(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl)
{
 x86_virt_spec_ctrl(guest_spec_ctrl, guest_virt_spec_ctrl, false);
}


extern u64 x86_amd_ls_cfg_base;
extern u64 x86_amd_ls_cfg_ssbd_mask;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ssbd_tif_to_spec_ctrl(u64 tifn)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_441(void) __attribute__((__error__("BUILD_BUG_ON failed: " "TIF_SSBD < SPEC_CTRL_SSBD_SHIFT"))); if (!(!(5 < 2))) __compiletime_assert_441(); } while (0);
 return (tifn & (1 << 5)) >> (5 - 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 stibp_tif_to_spec_ctrl(u64 tifn)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_442(void) __attribute__((__error__("BUILD_BUG_ON failed: " "TIF_SPEC_IB < SPEC_CTRL_STIBP_SHIFT"))); if (!(!(9 < 1))) __compiletime_assert_442(); } while (0);
 return (tifn & (1 << 9)) >> (9 - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long ssbd_spec_ctrl_to_tif(u64 spec_ctrl)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_443(void) __attribute__((__error__("BUILD_BUG_ON failed: " "TIF_SSBD < SPEC_CTRL_SSBD_SHIFT"))); if (!(!(5 < 2))) __compiletime_assert_443(); } while (0);
 return (spec_ctrl & ((((1UL))) << (2))) << (5 - 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long stibp_spec_ctrl_to_tif(u64 spec_ctrl)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_444(void) __attribute__((__error__("BUILD_BUG_ON failed: " "TIF_SPEC_IB < SPEC_CTRL_STIBP_SHIFT"))); if (!(!(9 < 1))) __compiletime_assert_444(); } while (0);
 return (spec_ctrl & ((((1UL))) << (1))) << (9 - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ssbd_tif_to_amd_ls_cfg(u64 tifn)
{
 return (tifn & (1 << 5)) ? x86_amd_ls_cfg_ssbd_mask : 0ULL;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void speculative_store_bypass_ht_init(void) { }


extern void speculation_ctrl_update(unsigned long tif);
extern void speculation_ctrl_update_current(void);
# 48 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/include/asm/virtext.h" 1
# 18 "./arch/x86/include/asm/virtext.h"
# 1 "./arch/x86/include/asm/vmx.h" 1
# 17 "./arch/x86/include/asm/vmx.h"
# 1 "./arch/x86/include/uapi/asm/vmx.h" 1
# 18 "./arch/x86/include/asm/vmx.h" 2
# 127 "./arch/x86/include/asm/vmx.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 vmx_basic_vmcs_revision_id(u64 vmx_basic)
{
 return vmx_basic & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (30)) * 0l)) : (int *)8))), (0) > (30), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (30)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 vmx_basic_vmcs_size(u64 vmx_basic)
{
 return (vmx_basic & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((32) > (44)) * 0l)) : (int *)8))), (32) > (44), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (32)) + 1) & (~(((0ULL))) >> (64 - 1 - (44)))))) >> 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmx_misc_preemption_timer_rate(u64 vmx_misc)
{
 return vmx_misc & 0x0000001f;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmx_misc_cr3_count(u64 vmx_misc)
{
 return (vmx_misc & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((16) > (24)) * 0l)) : (int *)8))), (16) > (24), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (16)) + 1) & (~(((0ULL))) >> (64 - 1 - (24)))))) >> 16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmx_misc_max_msr(u64 vmx_misc)
{
 return (vmx_misc & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((25) > (27)) * 0l)) : (int *)8))), (25) > (27), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (25)) + 1) & (~(((0ULL))) >> (64 - 1 - (27)))))) >> 25;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmx_misc_mseg_revid(u64 vmx_misc)
{
 return (vmx_misc & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((32) > (63)) * 0l)) : (int *)8))), (32) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (32)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) >> 32;
}


enum vmcs_field {
 VIRTUAL_PROCESSOR_ID = 0x00000000,
 POSTED_INTR_NV = 0x00000002,
 GUEST_ES_SELECTOR = 0x00000800,
 GUEST_CS_SELECTOR = 0x00000802,
 GUEST_SS_SELECTOR = 0x00000804,
 GUEST_DS_SELECTOR = 0x00000806,
 GUEST_FS_SELECTOR = 0x00000808,
 GUEST_GS_SELECTOR = 0x0000080a,
 GUEST_LDTR_SELECTOR = 0x0000080c,
 GUEST_TR_SELECTOR = 0x0000080e,
 GUEST_INTR_STATUS = 0x00000810,
 GUEST_PML_INDEX = 0x00000812,
 HOST_ES_SELECTOR = 0x00000c00,
 HOST_CS_SELECTOR = 0x00000c02,
 HOST_SS_SELECTOR = 0x00000c04,
 HOST_DS_SELECTOR = 0x00000c06,
 HOST_FS_SELECTOR = 0x00000c08,
 HOST_GS_SELECTOR = 0x00000c0a,
 HOST_TR_SELECTOR = 0x00000c0c,
 IO_BITMAP_A = 0x00002000,
 IO_BITMAP_A_HIGH = 0x00002001,
 IO_BITMAP_B = 0x00002002,
 IO_BITMAP_B_HIGH = 0x00002003,
 MSR_BITMAP = 0x00002004,
 MSR_BITMAP_HIGH = 0x00002005,
 VM_EXIT_MSR_STORE_ADDR = 0x00002006,
 VM_EXIT_MSR_STORE_ADDR_HIGH = 0x00002007,
 VM_EXIT_MSR_LOAD_ADDR = 0x00002008,
 VM_EXIT_MSR_LOAD_ADDR_HIGH = 0x00002009,
 VM_ENTRY_MSR_LOAD_ADDR = 0x0000200a,
 VM_ENTRY_MSR_LOAD_ADDR_HIGH = 0x0000200b,
 PML_ADDRESS = 0x0000200e,
 PML_ADDRESS_HIGH = 0x0000200f,
 TSC_OFFSET = 0x00002010,
 TSC_OFFSET_HIGH = 0x00002011,
 VIRTUAL_APIC_PAGE_ADDR = 0x00002012,
 VIRTUAL_APIC_PAGE_ADDR_HIGH = 0x00002013,
 APIC_ACCESS_ADDR = 0x00002014,
 APIC_ACCESS_ADDR_HIGH = 0x00002015,
 POSTED_INTR_DESC_ADDR = 0x00002016,
 POSTED_INTR_DESC_ADDR_HIGH = 0x00002017,
 VM_FUNCTION_CONTROL = 0x00002018,
 VM_FUNCTION_CONTROL_HIGH = 0x00002019,
 EPT_POINTER = 0x0000201a,
 EPT_POINTER_HIGH = 0x0000201b,
 EOI_EXIT_BITMAP0 = 0x0000201c,
 EOI_EXIT_BITMAP0_HIGH = 0x0000201d,
 EOI_EXIT_BITMAP1 = 0x0000201e,
 EOI_EXIT_BITMAP1_HIGH = 0x0000201f,
 EOI_EXIT_BITMAP2 = 0x00002020,
 EOI_EXIT_BITMAP2_HIGH = 0x00002021,
 EOI_EXIT_BITMAP3 = 0x00002022,
 EOI_EXIT_BITMAP3_HIGH = 0x00002023,
 EPTP_LIST_ADDRESS = 0x00002024,
 EPTP_LIST_ADDRESS_HIGH = 0x00002025,
 VMREAD_BITMAP = 0x00002026,
 VMREAD_BITMAP_HIGH = 0x00002027,
 VMWRITE_BITMAP = 0x00002028,
 VMWRITE_BITMAP_HIGH = 0x00002029,
 XSS_EXIT_BITMAP = 0x0000202C,
 XSS_EXIT_BITMAP_HIGH = 0x0000202D,
 ENCLS_EXITING_BITMAP = 0x0000202E,
 ENCLS_EXITING_BITMAP_HIGH = 0x0000202F,
 TSC_MULTIPLIER = 0x00002032,
 TSC_MULTIPLIER_HIGH = 0x00002033,
 GUEST_PHYSICAL_ADDRESS = 0x00002400,
 GUEST_PHYSICAL_ADDRESS_HIGH = 0x00002401,
 VMCS_LINK_POINTER = 0x00002800,
 VMCS_LINK_POINTER_HIGH = 0x00002801,
 GUEST_IA32_DEBUGCTL = 0x00002802,
 GUEST_IA32_DEBUGCTL_HIGH = 0x00002803,
 GUEST_IA32_PAT = 0x00002804,
 GUEST_IA32_PAT_HIGH = 0x00002805,
 GUEST_IA32_EFER = 0x00002806,
 GUEST_IA32_EFER_HIGH = 0x00002807,
 GUEST_IA32_PERF_GLOBAL_CTRL = 0x00002808,
 GUEST_IA32_PERF_GLOBAL_CTRL_HIGH= 0x00002809,
 GUEST_PDPTR0 = 0x0000280a,
 GUEST_PDPTR0_HIGH = 0x0000280b,
 GUEST_PDPTR1 = 0x0000280c,
 GUEST_PDPTR1_HIGH = 0x0000280d,
 GUEST_PDPTR2 = 0x0000280e,
 GUEST_PDPTR2_HIGH = 0x0000280f,
 GUEST_PDPTR3 = 0x00002810,
 GUEST_PDPTR3_HIGH = 0x00002811,
 GUEST_BNDCFGS = 0x00002812,
 GUEST_BNDCFGS_HIGH = 0x00002813,
 GUEST_IA32_RTIT_CTL = 0x00002814,
 GUEST_IA32_RTIT_CTL_HIGH = 0x00002815,
 HOST_IA32_PAT = 0x00002c00,
 HOST_IA32_PAT_HIGH = 0x00002c01,
 HOST_IA32_EFER = 0x00002c02,
 HOST_IA32_EFER_HIGH = 0x00002c03,
 HOST_IA32_PERF_GLOBAL_CTRL = 0x00002c04,
 HOST_IA32_PERF_GLOBAL_CTRL_HIGH = 0x00002c05,
 PIN_BASED_VM_EXEC_CONTROL = 0x00004000,
 CPU_BASED_VM_EXEC_CONTROL = 0x00004002,
 EXCEPTION_BITMAP = 0x00004004,
 PAGE_FAULT_ERROR_CODE_MASK = 0x00004006,
 PAGE_FAULT_ERROR_CODE_MATCH = 0x00004008,
 CR3_TARGET_COUNT = 0x0000400a,
 VM_EXIT_CONTROLS = 0x0000400c,
 VM_EXIT_MSR_STORE_COUNT = 0x0000400e,
 VM_EXIT_MSR_LOAD_COUNT = 0x00004010,
 VM_ENTRY_CONTROLS = 0x00004012,
 VM_ENTRY_MSR_LOAD_COUNT = 0x00004014,
 VM_ENTRY_INTR_INFO_FIELD = 0x00004016,
 VM_ENTRY_EXCEPTION_ERROR_CODE = 0x00004018,
 VM_ENTRY_INSTRUCTION_LEN = 0x0000401a,
 TPR_THRESHOLD = 0x0000401c,
 SECONDARY_VM_EXEC_CONTROL = 0x0000401e,
 PLE_GAP = 0x00004020,
 PLE_WINDOW = 0x00004022,
 VM_INSTRUCTION_ERROR = 0x00004400,
 VM_EXIT_REASON = 0x00004402,
 VM_EXIT_INTR_INFO = 0x00004404,
 VM_EXIT_INTR_ERROR_CODE = 0x00004406,
 IDT_VECTORING_INFO_FIELD = 0x00004408,
 IDT_VECTORING_ERROR_CODE = 0x0000440a,
 VM_EXIT_INSTRUCTION_LEN = 0x0000440c,
 VMX_INSTRUCTION_INFO = 0x0000440e,
 GUEST_ES_LIMIT = 0x00004800,
 GUEST_CS_LIMIT = 0x00004802,
 GUEST_SS_LIMIT = 0x00004804,
 GUEST_DS_LIMIT = 0x00004806,
 GUEST_FS_LIMIT = 0x00004808,
 GUEST_GS_LIMIT = 0x0000480a,
 GUEST_LDTR_LIMIT = 0x0000480c,
 GUEST_TR_LIMIT = 0x0000480e,
 GUEST_GDTR_LIMIT = 0x00004810,
 GUEST_IDTR_LIMIT = 0x00004812,
 GUEST_ES_AR_BYTES = 0x00004814,
 GUEST_CS_AR_BYTES = 0x00004816,
 GUEST_SS_AR_BYTES = 0x00004818,
 GUEST_DS_AR_BYTES = 0x0000481a,
 GUEST_FS_AR_BYTES = 0x0000481c,
 GUEST_GS_AR_BYTES = 0x0000481e,
 GUEST_LDTR_AR_BYTES = 0x00004820,
 GUEST_TR_AR_BYTES = 0x00004822,
 GUEST_INTERRUPTIBILITY_INFO = 0x00004824,
 GUEST_ACTIVITY_STATE = 0X00004826,
 GUEST_SYSENTER_CS = 0x0000482A,
 VMX_PREEMPTION_TIMER_VALUE = 0x0000482E,
 HOST_IA32_SYSENTER_CS = 0x00004c00,
 CR0_GUEST_HOST_MASK = 0x00006000,
 CR4_GUEST_HOST_MASK = 0x00006002,
 CR0_READ_SHADOW = 0x00006004,
 CR4_READ_SHADOW = 0x00006006,
 CR3_TARGET_VALUE0 = 0x00006008,
 CR3_TARGET_VALUE1 = 0x0000600a,
 CR3_TARGET_VALUE2 = 0x0000600c,
 CR3_TARGET_VALUE3 = 0x0000600e,
 EXIT_QUALIFICATION = 0x00006400,
 GUEST_LINEAR_ADDRESS = 0x0000640a,
 GUEST_CR0 = 0x00006800,
 GUEST_CR3 = 0x00006802,
 GUEST_CR4 = 0x00006804,
 GUEST_ES_BASE = 0x00006806,
 GUEST_CS_BASE = 0x00006808,
 GUEST_SS_BASE = 0x0000680a,
 GUEST_DS_BASE = 0x0000680c,
 GUEST_FS_BASE = 0x0000680e,
 GUEST_GS_BASE = 0x00006810,
 GUEST_LDTR_BASE = 0x00006812,
 GUEST_TR_BASE = 0x00006814,
 GUEST_GDTR_BASE = 0x00006816,
 GUEST_IDTR_BASE = 0x00006818,
 GUEST_DR7 = 0x0000681a,
 GUEST_RSP = 0x0000681c,
 GUEST_RIP = 0x0000681e,
 GUEST_RFLAGS = 0x00006820,
 GUEST_PENDING_DBG_EXCEPTIONS = 0x00006822,
 GUEST_SYSENTER_ESP = 0x00006824,
 GUEST_SYSENTER_EIP = 0x00006826,
 HOST_CR0 = 0x00006c00,
 HOST_CR3 = 0x00006c02,
 HOST_CR4 = 0x00006c04,
 HOST_FS_BASE = 0x00006c06,
 HOST_GS_BASE = 0x00006c08,
 HOST_TR_BASE = 0x00006c0a,
 HOST_GDTR_BASE = 0x00006c0c,
 HOST_IDTR_BASE = 0x00006c0e,
 HOST_IA32_SYSENTER_ESP = 0x00006c10,
 HOST_IA32_SYSENTER_EIP = 0x00006c12,
 HOST_RSP = 0x00006c14,
 HOST_RIP = 0x00006c16,
};
# 506 "./arch/x86/include/asm/vmx.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u8 vmx_eptp_page_walk_level(u64 eptp)
{
 u64 encoded_level = eptp & 0x38ull;

 if (encoded_level == 0x20ull)
  return 5;


 ({ int __ret_warn_on = !!(encoded_level != 0x18ull); __builtin_expect(!!(__ret_warn_on), 0); });
 return 4;
}







struct vmx_msr_entry {
 u32 index;
 u32 reserved;
 u64 value;
} __attribute__((__aligned__(16)));




enum vm_entry_failure_code {
 ENTRY_FAIL_DEFAULT = 0,
 ENTRY_FAIL_PDPTE = 2,
 ENTRY_FAIL_NMI = 3,
 ENTRY_FAIL_VMCS_LINK_PTR = 4,
};
# 561 "./arch/x86/include/asm/vmx.h"
enum vm_instruction_error_number {
 VMXERR_VMCALL_IN_VMX_ROOT_OPERATION = 1,
 VMXERR_VMCLEAR_INVALID_ADDRESS = 2,
 VMXERR_VMCLEAR_VMXON_POINTER = 3,
 VMXERR_VMLAUNCH_NONCLEAR_VMCS = 4,
 VMXERR_VMRESUME_NONLAUNCHED_VMCS = 5,
 VMXERR_VMRESUME_AFTER_VMXOFF = 6,
 VMXERR_ENTRY_INVALID_CONTROL_FIELD = 7,
 VMXERR_ENTRY_INVALID_HOST_STATE_FIELD = 8,
 VMXERR_VMPTRLD_INVALID_ADDRESS = 9,
 VMXERR_VMPTRLD_VMXON_POINTER = 10,
 VMXERR_VMPTRLD_INCORRECT_VMCS_REVISION_ID = 11,
 VMXERR_UNSUPPORTED_VMCS_COMPONENT = 12,
 VMXERR_VMWRITE_READ_ONLY_VMCS_COMPONENT = 13,
 VMXERR_VMXON_IN_VMX_ROOT_OPERATION = 15,
 VMXERR_ENTRY_INVALID_EXECUTIVE_VMCS_POINTER = 16,
 VMXERR_ENTRY_NONLAUNCHED_EXECUTIVE_VMCS = 17,
 VMXERR_ENTRY_EXECUTIVE_VMCS_POINTER_NOT_VMXON_POINTER = 18,
 VMXERR_VMCALL_NONCLEAR_VMCS = 19,
 VMXERR_VMCALL_INVALID_VM_EXIT_CONTROL_FIELDS = 20,
 VMXERR_VMCALL_INCORRECT_MSEG_REVISION_ID = 22,
 VMXERR_VMXOFF_UNDER_DUAL_MONITOR_TREATMENT_OF_SMIS_AND_SMM = 23,
 VMXERR_VMCALL_INVALID_SMM_MONITOR_FEATURES = 24,
 VMXERR_ENTRY_INVALID_VM_EXECUTION_CONTROL_FIELDS_IN_EXECUTIVE_VMCS = 25,
 VMXERR_ENTRY_EVENTS_BLOCKED_BY_MOV_SS = 26,
 VMXERR_INVALID_OPERAND_TO_INVEPT_INVVPID = 28,
};
# 603 "./arch/x86/include/asm/vmx.h"
enum vmx_l1d_flush_state {
 VMENTER_L1D_FLUSH_AUTO,
 VMENTER_L1D_FLUSH_NEVER,
 VMENTER_L1D_FLUSH_COND,
 VMENTER_L1D_FLUSH_ALWAYS,
 VMENTER_L1D_FLUSH_EPT_DISABLED,
 VMENTER_L1D_FLUSH_NOT_REQUIRED,
};

extern enum vmx_l1d_flush_state l1tf_vmx_mitigation;
# 19 "./arch/x86/include/asm/virtext.h" 2
# 1 "./arch/x86/include/asm/svm.h" 1




# 1 "./arch/x86/include/uapi/asm/svm.h" 1
# 6 "./arch/x86/include/asm/svm.h" 2







enum intercept_words {
 INTERCEPT_CR = 0,
 INTERCEPT_DR,
 INTERCEPT_EXCEPTION,
 INTERCEPT_WORD3,
 INTERCEPT_WORD4,
 INTERCEPT_WORD5,
 MAX_INTERCEPT,
};

enum {

 INTERCEPT_CR0_READ = 0,
 INTERCEPT_CR3_READ = 3,
 INTERCEPT_CR4_READ = 4,
 INTERCEPT_CR8_READ = 8,
 INTERCEPT_CR0_WRITE = 16,
 INTERCEPT_CR3_WRITE = 16 + 3,
 INTERCEPT_CR4_WRITE = 16 + 4,
 INTERCEPT_CR8_WRITE = 16 + 8,

 INTERCEPT_DR0_READ = 32,
 INTERCEPT_DR1_READ,
 INTERCEPT_DR2_READ,
 INTERCEPT_DR3_READ,
 INTERCEPT_DR4_READ,
 INTERCEPT_DR5_READ,
 INTERCEPT_DR6_READ,
 INTERCEPT_DR7_READ,
 INTERCEPT_DR0_WRITE = 48,
 INTERCEPT_DR1_WRITE,
 INTERCEPT_DR2_WRITE,
 INTERCEPT_DR3_WRITE,
 INTERCEPT_DR4_WRITE,
 INTERCEPT_DR5_WRITE,
 INTERCEPT_DR6_WRITE,
 INTERCEPT_DR7_WRITE,

 INTERCEPT_EXCEPTION_OFFSET = 64,

 INTERCEPT_INTR = 96,
 INTERCEPT_NMI,
 INTERCEPT_SMI,
 INTERCEPT_INIT,
 INTERCEPT_VINTR,
 INTERCEPT_SELECTIVE_CR0,
 INTERCEPT_STORE_IDTR,
 INTERCEPT_STORE_GDTR,
 INTERCEPT_STORE_LDTR,
 INTERCEPT_STORE_TR,
 INTERCEPT_LOAD_IDTR,
 INTERCEPT_LOAD_GDTR,
 INTERCEPT_LOAD_LDTR,
 INTERCEPT_LOAD_TR,
 INTERCEPT_RDTSC,
 INTERCEPT_RDPMC,
 INTERCEPT_PUSHF,
 INTERCEPT_POPF,
 INTERCEPT_CPUID,
 INTERCEPT_RSM,
 INTERCEPT_IRET,
 INTERCEPT_INTn,
 INTERCEPT_INVD,
 INTERCEPT_PAUSE,
 INTERCEPT_HLT,
 INTERCEPT_INVLPG,
 INTERCEPT_INVLPGA,
 INTERCEPT_IOIO_PROT,
 INTERCEPT_MSR_PROT,
 INTERCEPT_TASK_SWITCH,
 INTERCEPT_FERR_FREEZE,
 INTERCEPT_SHUTDOWN,

 INTERCEPT_VMRUN = 128,
 INTERCEPT_VMMCALL,
 INTERCEPT_VMLOAD,
 INTERCEPT_VMSAVE,
 INTERCEPT_STGI,
 INTERCEPT_CLGI,
 INTERCEPT_SKINIT,
 INTERCEPT_RDTSCP,
 INTERCEPT_ICEBP,
 INTERCEPT_WBINVD,
 INTERCEPT_MONITOR,
 INTERCEPT_MWAIT,
 INTERCEPT_MWAIT_COND,
 INTERCEPT_XSETBV,
 INTERCEPT_RDPRU,
 TRAP_EFER_WRITE,
 TRAP_CR0_WRITE,
 TRAP_CR1_WRITE,
 TRAP_CR2_WRITE,
 TRAP_CR3_WRITE,
 TRAP_CR4_WRITE,
 TRAP_CR5_WRITE,
 TRAP_CR6_WRITE,
 TRAP_CR7_WRITE,
 TRAP_CR8_WRITE,

 INTERCEPT_INVLPGB = 160,
 INTERCEPT_INVLPGB_ILLEGAL,
 INTERCEPT_INVPCID,
 INTERCEPT_MCOMMIT,
 INTERCEPT_TLBSYNC,
};


struct __attribute__ ((__packed__)) vmcb_control_area {
 u32 intercepts[MAX_INTERCEPT];
 u32 reserved_1[15 - MAX_INTERCEPT];
 u16 pause_filter_thresh;
 u16 pause_filter_count;
 u64 iopm_base_pa;
 u64 msrpm_base_pa;
 u64 tsc_offset;
 u32 asid;
 u8 tlb_ctl;
 u8 reserved_2[3];
 u32 int_ctl;
 u32 int_vector;
 u32 int_state;
 u8 reserved_3[4];
 u32 exit_code;
 u32 exit_code_hi;
 u64 exit_info_1;
 u64 exit_info_2;
 u32 exit_int_info;
 u32 exit_int_info_err;
 u64 nested_ctl;
 u64 avic_vapic_bar;
 u64 ghcb_gpa;
 u32 event_inj;
 u32 event_inj_err;
 u64 nested_cr3;
 u64 virt_ext;
 u32 clean;
 u32 reserved_5;
 u64 next_rip;
 u8 insn_len;
 u8 insn_bytes[15];
 u64 avic_backing_page;
 u8 reserved_6[8];
 u64 avic_logical_id;
 u64 avic_physical_id;
 u8 reserved_7[8];
 u64 vmsa_pa;
 u8 reserved_8[720];




 u8 reserved_sw[32];
};
# 223 "./arch/x86/include/asm/svm.h"
struct vmcb_seg {
 u16 selector;
 u16 attrib;
 u32 limit;
 u64 base;
} __attribute__((__packed__));

struct vmcb_save_area {
 struct vmcb_seg es;
 struct vmcb_seg cs;
 struct vmcb_seg ss;
 struct vmcb_seg ds;
 struct vmcb_seg fs;
 struct vmcb_seg gs;
 struct vmcb_seg gdtr;
 struct vmcb_seg ldtr;
 struct vmcb_seg idtr;
 struct vmcb_seg tr;
 u8 reserved_1[43];
 u8 cpl;
 u8 reserved_2[4];
 u64 efer;
 u8 reserved_3[104];
 u64 xss;
 u64 cr4;
 u64 cr3;
 u64 cr0;
 u64 dr7;
 u64 dr6;
 u64 rflags;
 u64 rip;
 u8 reserved_4[88];
 u64 rsp;
 u8 reserved_5[24];
 u64 rax;
 u64 star;
 u64 lstar;
 u64 cstar;
 u64 sfmask;
 u64 kernel_gs_base;
 u64 sysenter_cs;
 u64 sysenter_esp;
 u64 sysenter_eip;
 u64 cr2;
 u8 reserved_6[32];
 u64 g_pat;
 u64 dbgctl;
 u64 br_from;
 u64 br_to;
 u64 last_excp_from;
 u64 last_excp_to;






 u8 reserved_7[72];
 u32 spec_ctrl;
 u8 reserved_7b[4];
 u32 pkru;
 u8 reserved_7a[20];
 u64 reserved_8;
 u64 rcx;
 u64 rdx;
 u64 rbx;
 u64 reserved_9;
 u64 rbp;
 u64 rsi;
 u64 rdi;
 u64 r8;
 u64 r9;
 u64 r10;
 u64 r11;
 u64 r12;
 u64 r13;
 u64 r14;
 u64 r15;
 u8 reserved_10[16];
 u64 sw_exit_code;
 u64 sw_exit_info_1;
 u64 sw_exit_info_2;
 u64 sw_scratch;
 u8 reserved_11[56];
 u64 xcr0;
 u8 valid_bitmap[16];
 u64 x87_state_gpa;
} __attribute__((__packed__));

struct ghcb {
 struct vmcb_save_area save;
 u8 reserved_save[2048 - sizeof(struct vmcb_save_area)];

 u8 shared_buffer[2032];

 u8 reserved_1[10];
 u16 protocol_version;
 u32 ghcb_usage;
} __attribute__((__packed__));






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __unused_size_checks(void)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_445(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct vmcb_save_area) != EXPECTED_VMCB_SAVE_AREA_SIZE"))); if (!(!(sizeof(struct vmcb_save_area) != 1032))) __compiletime_assert_445(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_446(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct vmcb_control_area) != EXPECTED_VMCB_CONTROL_AREA_SIZE"))); if (!(!(sizeof(struct vmcb_control_area) != 1024))) __compiletime_assert_446(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_447(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct ghcb) != EXPECTED_GHCB_SIZE"))); if (!(!(sizeof(struct ghcb) != ((1UL) << 12)))) __compiletime_assert_447(); } while (0);
}

struct vmcb {
 struct vmcb_control_area control;
 struct vmcb_save_area save;
} __attribute__((__packed__));
# 426 "./arch/x86/include/asm/svm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_cpl_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, cpl) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_cpl(struct ghcb *ghcb) { return ghcb->save.cpl; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_cpl_if_valid(struct ghcb *ghcb) { return ghcb_cpl_is_valid(ghcb) ? ghcb->save.cpl : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_cpl(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, cpl) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.cpl = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rip_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rip) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rip(struct ghcb *ghcb) { return ghcb->save.rip; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rip_if_valid(struct ghcb *ghcb) { return ghcb_rip_is_valid(ghcb) ? ghcb->save.rip : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rip(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rip) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rip = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rsp_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rsp) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rsp(struct ghcb *ghcb) { return ghcb->save.rsp; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rsp_if_valid(struct ghcb *ghcb) { return ghcb_rsp_is_valid(ghcb) ? ghcb->save.rsp : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rsp(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rsp) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rsp = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rax_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rax) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rax(struct ghcb *ghcb) { return ghcb->save.rax; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rax_if_valid(struct ghcb *ghcb) { return ghcb_rax_is_valid(ghcb) ? ghcb->save.rax : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rax(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rax) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rax = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rcx_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rcx) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rcx(struct ghcb *ghcb) { return ghcb->save.rcx; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rcx_if_valid(struct ghcb *ghcb) { return ghcb_rcx_is_valid(ghcb) ? ghcb->save.rcx : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rcx(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rcx) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rcx = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rdx_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rdx) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rdx(struct ghcb *ghcb) { return ghcb->save.rdx; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rdx_if_valid(struct ghcb *ghcb) { return ghcb_rdx_is_valid(ghcb) ? ghcb->save.rdx : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rdx(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rdx) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rdx = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rbx_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rbx) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rbx(struct ghcb *ghcb) { return ghcb->save.rbx; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rbx_if_valid(struct ghcb *ghcb) { return ghcb_rbx_is_valid(ghcb) ? ghcb->save.rbx : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rbx(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rbx) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rbx = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rbp_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rbp) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rbp(struct ghcb *ghcb) { return ghcb->save.rbp; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rbp_if_valid(struct ghcb *ghcb) { return ghcb_rbp_is_valid(ghcb) ? ghcb->save.rbp : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rbp(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rbp) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rbp = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rsi_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rsi) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rsi(struct ghcb *ghcb) { return ghcb->save.rsi; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rsi_if_valid(struct ghcb *ghcb) { return ghcb_rsi_is_valid(ghcb) ? ghcb->save.rsi : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rsi(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rsi) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rsi = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_rdi_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, rdi) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rdi(struct ghcb *ghcb) { return ghcb->save.rdi; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_rdi_if_valid(struct ghcb *ghcb) { return ghcb_rdi_is_valid(ghcb) ? ghcb->save.rdi : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_rdi(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, rdi) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.rdi = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r8_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r8) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r8(struct ghcb *ghcb) { return ghcb->save.r8; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r8_if_valid(struct ghcb *ghcb) { return ghcb_r8_is_valid(ghcb) ? ghcb->save.r8 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r8(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r8) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r8 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r9_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r9) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r9(struct ghcb *ghcb) { return ghcb->save.r9; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r9_if_valid(struct ghcb *ghcb) { return ghcb_r9_is_valid(ghcb) ? ghcb->save.r9 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r9(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r9) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r9 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r10_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r10) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r10(struct ghcb *ghcb) { return ghcb->save.r10; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r10_if_valid(struct ghcb *ghcb) { return ghcb_r10_is_valid(ghcb) ? ghcb->save.r10 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r10(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r10) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r10 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r11_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r11) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r11(struct ghcb *ghcb) { return ghcb->save.r11; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r11_if_valid(struct ghcb *ghcb) { return ghcb_r11_is_valid(ghcb) ? ghcb->save.r11 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r11(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r11) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r11 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r12_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r12) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r12(struct ghcb *ghcb) { return ghcb->save.r12; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r12_if_valid(struct ghcb *ghcb) { return ghcb_r12_is_valid(ghcb) ? ghcb->save.r12 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r12(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r12) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r12 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r13_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r13) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r13(struct ghcb *ghcb) { return ghcb->save.r13; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r13_if_valid(struct ghcb *ghcb) { return ghcb_r13_is_valid(ghcb) ? ghcb->save.r13 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r13(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r13) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r13 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r14_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r14) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r14(struct ghcb *ghcb) { return ghcb->save.r14; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r14_if_valid(struct ghcb *ghcb) { return ghcb_r14_is_valid(ghcb) ? ghcb->save.r14 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r14(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r14) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r14 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_r15_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, r15) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r15(struct ghcb *ghcb) { return ghcb->save.r15; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_r15_if_valid(struct ghcb *ghcb) { return ghcb_r15_is_valid(ghcb) ? ghcb->save.r15 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_r15(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, r15) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.r15 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_sw_exit_code_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, sw_exit_code) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_exit_code(struct ghcb *ghcb) { return ghcb->save.sw_exit_code; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_exit_code_if_valid(struct ghcb *ghcb) { return ghcb_sw_exit_code_is_valid(ghcb) ? ghcb->save.sw_exit_code : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_sw_exit_code(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, sw_exit_code) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.sw_exit_code = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_sw_exit_info_1_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, sw_exit_info_1) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_exit_info_1(struct ghcb *ghcb) { return ghcb->save.sw_exit_info_1; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_exit_info_1_if_valid(struct ghcb *ghcb) { return ghcb_sw_exit_info_1_is_valid(ghcb) ? ghcb->save.sw_exit_info_1 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_sw_exit_info_1(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, sw_exit_info_1) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.sw_exit_info_1 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_sw_exit_info_2_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, sw_exit_info_2) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_exit_info_2(struct ghcb *ghcb) { return ghcb->save.sw_exit_info_2; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_exit_info_2_if_valid(struct ghcb *ghcb) { return ghcb_sw_exit_info_2_is_valid(ghcb) ? ghcb->save.sw_exit_info_2 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_sw_exit_info_2(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, sw_exit_info_2) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.sw_exit_info_2 = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_sw_scratch_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, sw_scratch) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_scratch(struct ghcb *ghcb) { return ghcb->save.sw_scratch; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_sw_scratch_if_valid(struct ghcb *ghcb) { return ghcb_sw_scratch_is_valid(ghcb) ? ghcb->save.sw_scratch : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_sw_scratch(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, sw_scratch) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.sw_scratch = value; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ghcb_xcr0_is_valid(const struct ghcb *ghcb) { return test_bit((__builtin_offsetof(struct vmcb_save_area, xcr0) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_xcr0(struct ghcb *ghcb) { return ghcb->save.xcr0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ghcb_get_xcr0_if_valid(struct ghcb *ghcb) { return ghcb_xcr0_is_valid(ghcb) ? ghcb->save.xcr0 : 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ghcb_set_xcr0(struct ghcb *ghcb, u64 value) { __set_bit((__builtin_offsetof(struct vmcb_save_area, xcr0) / sizeof(u64)), (unsigned long *)&ghcb->save.valid_bitmap); ghcb->save.xcr0 = value; }
# 20 "./arch/x86/include/asm/virtext.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpu_has_vmx(void)
{
 unsigned long ecx = cpuid_ecx(1);
 return test_bit(5, &ecx);
}
# 44 "./arch/x86/include/asm/virtext.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpu_vmxoff(void)
{
 asm goto("1: vmxoff\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[fault]" ") - .\n" " .long " "1" " \n" " .popsection\n" ::: "cc", "memory" : fault);



 cr4_clear_bits((((1UL)) << (13)));
 return 0;

fault:
 cr4_clear_bits((((1UL)) << (13)));
 return -5;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpu_vmx_enabled(void)
{
 return __read_cr4() & (((1UL)) << (13));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __cpu_emergency_vmxoff(void)
{
 if (cpu_vmx_enabled())
  cpu_vmxoff();
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_emergency_vmxoff(void)
{
 if (cpu_has_vmx())
  __cpu_emergency_vmxoff();
}
# 95 "./arch/x86/include/asm/virtext.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpu_has_svm(const char **msg)
{
 if (boot_cpu_data.x86_vendor != 2 &&
     boot_cpu_data.x86_vendor != 9) {
  if (msg)
   *msg = "not amd or hygon";
  return 0;
 }

 if (boot_cpu_data.extended_cpuid_level < 0x8000000a) {
  if (msg)
   *msg = "can't execute cpuid_8000000a";
  return 0;
 }

 if (!(__builtin_constant_p(( 6*32+ 2)) && ( (((( 6*32+ 2))>>5)==(0) && (1UL<<((( 6*32+ 2))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 6*32+ 2))>>5)==(1) && (1UL<<((( 6*32+ 2))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 6*32+ 2))>>5)==(2) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(3) && (1UL<<((( 6*32+ 2))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 6*32+ 2))>>5)==(4) && (1UL<<((( 6*32+ 2))&31) & (0) )) || (((( 6*32+ 2))>>5)==(5) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(6) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(7) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(8) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(9) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(10) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(11) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(12) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(13) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(14) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(15) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(16) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(17) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(18) && (1UL<<((( 6*32+ 2))&31) & 0 )) || (((( 6*32+ 2))>>5)==(19) && (1UL<<((( 6*32+ 2))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 6*32+ 2), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {
  if (msg)
   *msg = "svm not available";
  return 0;
 }
 return 1;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_svm_disable(void)
{
 uint64_t efer;

 wrmsrl(0xc0010117, 0);
 ((efer) = native_read_msr((0xc0000080)));
 wrmsrl(0xc0000080, efer & ~(1<<12));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_emergency_svm_disable(void)
{
 if (cpu_has_svm(((void *)0)))
  cpu_svm_disable();
}
# 49 "arch/x86/kvm/vmx/vmx.c" 2


# 1 "arch/x86/kvm/vmx/capabilities.h" 1






# 1 "./arch/x86/kvm/lapic.h" 1




# 1 "./include/kvm/iodev.h" 1








struct kvm_io_device;
struct kvm_vcpu;






struct kvm_io_device_ops {
 int (*read)(struct kvm_vcpu *vcpu,
      struct kvm_io_device *this,
      gpa_t addr,
      int len,
      void *val);
 int (*write)(struct kvm_vcpu *vcpu,
       struct kvm_io_device *this,
       gpa_t addr,
       int len,
       const void *val);
 void (*destructor)(struct kvm_io_device *this);
};


struct kvm_io_device {
 const struct kvm_io_device_ops *ops;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_iodevice_init(struct kvm_io_device *dev,
         const struct kvm_io_device_ops *ops)
{
 dev->ops = ops;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_iodevice_read(struct kvm_vcpu *vcpu,
        struct kvm_io_device *dev, gpa_t addr,
        int l, void *v)
{
 return dev->ops->read ? dev->ops->read(vcpu, dev, addr, l, v)
    : -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_iodevice_write(struct kvm_vcpu *vcpu,
         struct kvm_io_device *dev, gpa_t addr,
         int l, const void *v)
{
 return dev->ops->write ? dev->ops->write(vcpu, dev, addr, l, v)
     : -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_iodevice_destructor(struct kvm_io_device *dev)
{
 if (dev->ops->destructor)
  dev->ops->destructor(dev);
}
# 6 "./arch/x86/kvm/lapic.h" 2



# 1 "./arch/x86/kvm/hyperv.h" 1
# 53 "./arch/x86/kvm/hyperv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_hv *to_kvm_hv(struct kvm *kvm)
{
 return &kvm->arch.hyperv;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vcpu_hv *to_hv_vcpu(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.hyperv;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vcpu_hv_synic *to_hv_synic(struct kvm_vcpu *vcpu)
{
 struct kvm_vcpu_hv *hv_vcpu = to_hv_vcpu(vcpu);

 return &hv_vcpu->synic;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vcpu *hv_synic_to_vcpu(struct kvm_vcpu_hv_synic *synic)
{
 struct kvm_vcpu_hv *hv_vcpu = ({ void *__mptr = (void *)(synic); _Static_assert(__builtin_types_compatible_p(typeof(*(synic)), typeof(((struct kvm_vcpu_hv *)0)->synic)) || __builtin_types_compatible_p(typeof(*(synic)), typeof(void)), "pointer type mismatch in container_of()"); ((struct kvm_vcpu_hv *)(__mptr - __builtin_offsetof(struct kvm_vcpu_hv, synic))); });

 return hv_vcpu->vcpu;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_hv_syndbg *to_hv_syndbg(struct kvm_vcpu *vcpu)
{
 return &vcpu->kvm->arch.hyperv.hv_syndbg;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 kvm_hv_get_vpindex(struct kvm_vcpu *vcpu)
{
 struct kvm_vcpu_hv *hv_vcpu = to_hv_vcpu(vcpu);

 return hv_vcpu ? hv_vcpu->vp_index : vcpu->vcpu_idx;
}

int kvm_hv_set_msr_common(struct kvm_vcpu *vcpu, u32 msr, u64 data, bool host);
int kvm_hv_get_msr_common(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata, bool host);

bool kvm_hv_hypercall_enabled(struct kvm_vcpu *vcpu);
int kvm_hv_hypercall(struct kvm_vcpu *vcpu);

void kvm_hv_irq_routing_update(struct kvm *kvm);
int kvm_hv_synic_set_irq(struct kvm *kvm, u32 vcpu_id, u32 sint);
void kvm_hv_synic_send_eoi(struct kvm_vcpu *vcpu, int vector);
int kvm_hv_activate_synic(struct kvm_vcpu *vcpu, bool dont_zero_synic_pages);

void kvm_hv_vcpu_uninit(struct kvm_vcpu *vcpu);

bool kvm_hv_assist_page_enabled(struct kvm_vcpu *vcpu);
bool kvm_hv_get_assist_page(struct kvm_vcpu *vcpu,
       struct hv_vp_assist_page *assist_page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vcpu_hv_stimer *to_hv_stimer(struct kvm_vcpu *vcpu,
            int timer_index)
{
 return &to_hv_vcpu(vcpu)->stimer[timer_index];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vcpu *hv_stimer_to_vcpu(struct kvm_vcpu_hv_stimer *stimer)
{
 struct kvm_vcpu_hv *hv_vcpu;

 hv_vcpu = ({ void *__mptr = (void *)(stimer - stimer->index); _Static_assert(__builtin_types_compatible_p(typeof(*(stimer - stimer->index)), typeof(((struct kvm_vcpu_hv *)0)->stimer[0])) || __builtin_types_compatible_p(typeof(*(stimer - stimer->index)), typeof(void)), "pointer type mismatch in container_of()"); ((struct kvm_vcpu_hv *)(__mptr - __builtin_offsetof(struct kvm_vcpu_hv, stimer[0]))); });

 return hv_vcpu->vcpu;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_hv_has_stimer_pending(struct kvm_vcpu *vcpu)
{
 struct kvm_vcpu_hv *hv_vcpu = to_hv_vcpu(vcpu);

 if (!hv_vcpu)
  return false;

 return !bitmap_empty(hv_vcpu->stimer_pending_bitmap,
        (4));
}

void kvm_hv_process_stimers(struct kvm_vcpu *vcpu);

void kvm_hv_setup_tsc_page(struct kvm *kvm,
      struct pvclock_vcpu_time_info *hv_clock);
void kvm_hv_invalidate_tsc_page(struct kvm *kvm);

void kvm_hv_init_vm(struct kvm *kvm);
void kvm_hv_destroy_vm(struct kvm *kvm);
void kvm_hv_set_cpuid(struct kvm_vcpu *vcpu);
int kvm_hv_set_enforce_cpuid(struct kvm_vcpu *vcpu, bool enforce);
int kvm_vm_ioctl_hv_eventfd(struct kvm *kvm, struct kvm_hyperv_eventfd *args);
int kvm_get_hv_cpuid(struct kvm_vcpu *vcpu, struct kvm_cpuid2 *cpuid,
       struct kvm_cpuid_entry2 *entries);
# 10 "./arch/x86/kvm/lapic.h" 2
# 25 "./arch/x86/kvm/lapic.h"
enum lapic_mode {
 LAPIC_MODE_DISABLED = 0,
 LAPIC_MODE_INVALID = (1UL << 10),
 LAPIC_MODE_XAPIC = (1<<11),
 LAPIC_MODE_X2APIC = (1<<11) | (1UL << 10),
};

struct kvm_timer {
 struct hrtimer timer;
 s64 period;
 ktime_t target_expiration;
 u32 timer_mode;
 u32 timer_mode_mask;
 u64 tscdeadline;
 u64 expired_tscdeadline;
 u32 timer_advance_ns;
 s64 advance_expire_delta;
 atomic_t pending;
 bool hv_timer_in_use;
};

struct kvm_lapic {
 unsigned long base_address;
 struct kvm_io_device dev;
 struct kvm_timer lapic_timer;
 u32 divide_count;
 struct kvm_vcpu *vcpu;
 bool sw_enabled;
 bool irr_pending;
 bool lvt0_in_nmi_mode;

 s16 isr_count;

 int highest_isr_cache;





 void *regs;
 gpa_t vapic_addr;
 struct gfn_to_hva_cache vapic_cache;
 unsigned long pending_events;
 unsigned int sipi_vector;
};

struct dest_map;

int kvm_create_lapic(struct kvm_vcpu *vcpu, int timer_advance_ns);
void kvm_free_lapic(struct kvm_vcpu *vcpu);

int kvm_apic_has_interrupt(struct kvm_vcpu *vcpu);
int kvm_apic_accept_pic_intr(struct kvm_vcpu *vcpu);
int kvm_get_apic_interrupt(struct kvm_vcpu *vcpu);
int kvm_apic_accept_events(struct kvm_vcpu *vcpu);
void kvm_lapic_reset(struct kvm_vcpu *vcpu, bool init_event);
u64 kvm_lapic_get_cr8(struct kvm_vcpu *vcpu);
void kvm_lapic_set_tpr(struct kvm_vcpu *vcpu, unsigned long cr8);
void kvm_lapic_set_eoi(struct kvm_vcpu *vcpu);
void kvm_lapic_set_base(struct kvm_vcpu *vcpu, u64 value);
u64 kvm_lapic_get_base(struct kvm_vcpu *vcpu);
void kvm_recalculate_apic_map(struct kvm *kvm);
void kvm_apic_set_version(struct kvm_vcpu *vcpu);
int kvm_lapic_reg_write(struct kvm_lapic *apic, u32 reg, u32 val);
int kvm_lapic_reg_read(struct kvm_lapic *apic, u32 offset, int len,
         void *data);
bool kvm_apic_match_dest(struct kvm_vcpu *vcpu, struct kvm_lapic *source,
      int shorthand, unsigned int dest, int dest_mode);
int kvm_apic_compare_prio(struct kvm_vcpu *vcpu1, struct kvm_vcpu *vcpu2);
void kvm_apic_clear_irr(struct kvm_vcpu *vcpu, int vec);
bool __kvm_apic_update_irr(u32 *pir, void *regs, int *max_irr);
bool kvm_apic_update_irr(struct kvm_vcpu *vcpu, u32 *pir, int *max_irr);
void kvm_apic_update_ppr(struct kvm_vcpu *vcpu);
int kvm_apic_set_irq(struct kvm_vcpu *vcpu, struct kvm_lapic_irq *irq,
       struct dest_map *dest_map);
int kvm_apic_local_deliver(struct kvm_lapic *apic, int lvt_type);
void kvm_apic_update_apicv(struct kvm_vcpu *vcpu);

bool kvm_irq_delivery_to_apic_fast(struct kvm *kvm, struct kvm_lapic *src,
  struct kvm_lapic_irq *irq, int *r, struct dest_map *dest_map);
void kvm_apic_send_ipi(struct kvm_lapic *apic, u32 icr_low, u32 icr_high);

u64 kvm_get_apic_base(struct kvm_vcpu *vcpu);
int kvm_set_apic_base(struct kvm_vcpu *vcpu, struct msr_data *msr_info);
int kvm_apic_get_state(struct kvm_vcpu *vcpu, struct kvm_lapic_state *s);
int kvm_apic_set_state(struct kvm_vcpu *vcpu, struct kvm_lapic_state *s);
enum lapic_mode kvm_get_apic_mode(struct kvm_vcpu *vcpu);
int kvm_lapic_find_highest_irr(struct kvm_vcpu *vcpu);

u64 kvm_get_lapic_tscdeadline_msr(struct kvm_vcpu *vcpu);
void kvm_set_lapic_tscdeadline_msr(struct kvm_vcpu *vcpu, u64 data);

void kvm_apic_write_nodecode(struct kvm_vcpu *vcpu, u32 offset);
void kvm_apic_set_eoi_accelerated(struct kvm_vcpu *vcpu, int vector);

int kvm_lapic_set_vapic_addr(struct kvm_vcpu *vcpu, gpa_t vapic_addr);
void kvm_lapic_sync_from_vapic(struct kvm_vcpu *vcpu);
void kvm_lapic_sync_to_vapic(struct kvm_vcpu *vcpu);

int kvm_x2apic_msr_write(struct kvm_vcpu *vcpu, u32 msr, u64 data);
int kvm_x2apic_msr_read(struct kvm_vcpu *vcpu, u32 msr, u64 *data);

int kvm_hv_vapic_msr_write(struct kvm_vcpu *vcpu, u32 msr, u64 data);
int kvm_hv_vapic_msr_read(struct kvm_vcpu *vcpu, u32 msr, u64 *data);

int kvm_lapic_set_pv_eoi(struct kvm_vcpu *vcpu, u64 data, unsigned long len);
void kvm_lapic_exit(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_lapic_clear_vector(int vec, void *bitmap)
{
 clear_bit(((vec) & (32 - 1)), (bitmap) + (((vec) >> 5) << 4));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_lapic_set_vector(int vec, void *bitmap)
{
 set_bit(((vec) & (32 - 1)), (bitmap) + (((vec) >> 5) << 4));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_lapic_set_irr(int vec, struct kvm_lapic *apic)
{
 kvm_lapic_set_vector(vec, apic->regs + 0x200);




 apic->irr_pending = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 kvm_lapic_get_reg(struct kvm_lapic *apic, int reg_off)
{
 return *((u32 *) (apic->regs + reg_off));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __kvm_lapic_set_reg(char *regs, int reg_off, u32 val)
{
 *((u32 *) (regs + reg_off)) = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_lapic_set_reg(struct kvm_lapic *apic, int reg_off, u32 val)
{
 __kvm_lapic_set_reg(apic->regs, reg_off, val);
}

extern struct static_key_false kvm_has_noapic_vcpu;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool lapic_in_kernel(struct kvm_vcpu *vcpu)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&kvm_has_noapic_vcpu)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&kvm_has_noapic_vcpu)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&kvm_has_noapic_vcpu)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&kvm_has_noapic_vcpu)->key) > 0; })), 0))
  return vcpu->arch.apic;
 return true;
}

extern struct static_key_false_deferred apic_hw_disabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_apic_hw_enabled(struct kvm_lapic *apic)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&apic_hw_disabled.key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&apic_hw_disabled.key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&apic_hw_disabled.key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&apic_hw_disabled.key)->key) > 0; })), 0))
  return apic->vcpu->arch.apic_base & (1<<11);
 return (1<<11);
}

extern struct static_key_false_deferred apic_sw_disabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_apic_sw_enabled(struct kvm_lapic *apic)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&apic_sw_disabled.key)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&apic_sw_disabled.key)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&apic_sw_disabled.key)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&apic_sw_disabled.key)->key) > 0; })), 0))
  return apic->sw_enabled;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_apic_present(struct kvm_vcpu *vcpu)
{
 return lapic_in_kernel(vcpu) && kvm_apic_hw_enabled(vcpu->arch.apic);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_lapic_enabled(struct kvm_vcpu *vcpu)
{
 return kvm_apic_present(vcpu) && kvm_apic_sw_enabled(vcpu->arch.apic);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int apic_x2apic_mode(struct kvm_lapic *apic)
{
 return apic->vcpu->arch.apic_base & (1UL << 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_apicv_active(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.apic && vcpu->arch.apicv_active;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_apic_has_events(struct kvm_vcpu *vcpu)
{
 return lapic_in_kernel(vcpu) && vcpu->arch.apic->pending_events;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_lowest_prio_delivery(struct kvm_lapic_irq *irq)
{
 return (irq->delivery_mode == 0x00100 ||
   irq->msi_redir_hint);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_lapic_latched_init(struct kvm_vcpu *vcpu)
{
 return lapic_in_kernel(vcpu) && test_bit(0, &vcpu->arch.apic->pending_events);
}

bool kvm_apic_pending_eoi(struct kvm_vcpu *vcpu, int vector);

void kvm_wait_lapic_expire(struct kvm_vcpu *vcpu);

void kvm_bitmap_or_dest_vcpus(struct kvm *kvm, struct kvm_lapic_irq *irq,
         unsigned long *vcpu_bitmap);

bool kvm_intr_is_single_vcpu_fast(struct kvm *kvm, struct kvm_lapic_irq *irq,
   struct kvm_vcpu **dest_vcpu);
int kvm_vector_to_index(u32 vector, u32 dest_vcpus,
   const unsigned long *bitmap, u32 bitmap_size);
void kvm_lapic_switch_to_sw_timer(struct kvm_vcpu *vcpu);
void kvm_lapic_switch_to_hv_timer(struct kvm_vcpu *vcpu);
void kvm_lapic_expired_hv_timer(struct kvm_vcpu *vcpu);
bool kvm_lapic_hv_timer_in_use(struct kvm_vcpu *vcpu);
void kvm_lapic_restart_hv_timer(struct kvm_vcpu *vcpu);
bool kvm_can_use_hv_timer(struct kvm_vcpu *vcpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum lapic_mode kvm_apic_mode(u64 apic_base)
{
 return apic_base & ((1<<11) | (1UL << 10));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u8 kvm_xapic_id(struct kvm_lapic *apic)
{
 return kvm_lapic_get_reg(apic, 0x20) >> 24;
}
# 8 "arch/x86/kvm/vmx/capabilities.h" 2

extern bool __attribute__((__section__(".data..read_mostly"))) enable_vpid;
extern bool __attribute__((__section__(".data..read_mostly"))) flexpriority_enabled;
extern bool __attribute__((__section__(".data..read_mostly"))) enable_ept;
extern bool __attribute__((__section__(".data..read_mostly"))) enable_unrestricted_guest;
extern bool __attribute__((__section__(".data..read_mostly"))) enable_ept_ad_bits;
extern bool __attribute__((__section__(".data..read_mostly"))) enable_pml;
extern int __attribute__((__section__(".data..read_mostly"))) pt_mode;
# 25 "arch/x86/kvm/vmx/capabilities.h"
struct nested_vmx_msrs {





 u32 procbased_ctls_low;
 u32 procbased_ctls_high;
 u32 secondary_ctls_low;
 u32 secondary_ctls_high;
 u32 pinbased_ctls_low;
 u32 pinbased_ctls_high;
 u32 exit_ctls_low;
 u32 exit_ctls_high;
 u32 entry_ctls_low;
 u32 entry_ctls_high;
 u32 misc_low;
 u32 misc_high;
 u32 ept_caps;
 u32 vpid_caps;
 u64 basic;
 u64 cr0_fixed0;
 u64 cr0_fixed1;
 u64 cr4_fixed0;
 u64 cr4_fixed1;
 u64 vmcs_enum;
 u64 vmfunc_controls;
};

struct vmcs_config {
 int size;
 int order;
 u32 basic_cap;
 u32 revision_id;
 u32 pin_based_exec_ctrl;
 u32 cpu_based_exec_ctrl;
 u32 cpu_based_2nd_exec_ctrl;
 u32 vmexit_ctrl;
 u32 vmentry_ctrl;
 struct nested_vmx_msrs nested;
};
extern struct vmcs_config vmcs_config;

struct vmx_capability {
 u32 ept;
 u32 vpid;
};
extern struct vmx_capability vmx_capability;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_basic_inout(void)
{
 return (((u64)vmcs_config.basic_cap << 32) & 0x0040000000000000LLU);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_virtual_nmis(void)
{
 return vmcs_config.pin_based_exec_ctrl & ((((1UL))) << (( 0*32+ 5) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_preemption_timer(void)
{
 return vmcs_config.pin_based_exec_ctrl &
  ((((1UL))) << (( 0*32+ 6) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_posted_intr(void)
{
 return vmcs_config.pin_based_exec_ctrl & ((((1UL))) << (( 0*32+ 7) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_load_ia32_efer(void)
{
 return (vmcs_config.vmentry_ctrl & 0x00008000) &&
        (vmcs_config.vmexit_ctrl & 0x00200000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_load_perf_global_ctrl(void)
{
 return (vmcs_config.vmentry_ctrl & 0x00002000) &&
        (vmcs_config.vmexit_ctrl & 0x00001000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_mpx(void)
{
 return (vmcs_config.vmexit_ctrl & 0x00800000) &&
  (vmcs_config.vmentry_ctrl & 0x00010000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_tpr_shadow(void)
{
 return vmcs_config.cpu_based_exec_ctrl & ((((1UL))) << (( 1*32+ 21) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_need_tpr_shadow(struct kvm_vcpu *vcpu)
{
 return cpu_has_vmx_tpr_shadow() && lapic_in_kernel(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_msr_bitmap(void)
{
 return vmcs_config.cpu_based_exec_ctrl & ((((1UL))) << (( 1*32+ 28) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_secondary_exec_ctrls(void)
{
 return vmcs_config.cpu_based_exec_ctrl &
  ((((1UL))) << (( 1*32+ 31) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_virtualize_apic_accesses(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 0) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 1) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_umip_emulated(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 2) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_rdtscp(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 3) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_virtualize_x2apic_mode(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 4) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_vpid(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 5) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_wbinvd_exit(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 6) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_unrestricted_guest(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 7) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_apic_register_virt(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 8) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_virtual_intr_delivery(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 9) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ple(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 10) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_rdrand(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 11) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_invpcid(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 12) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_vmfunc(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 13) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_shadow_vmcs(void)
{
 u64 vmx_msr;


 ((vmx_msr) = native_read_msr((0x00000485)));
 if (!(vmx_msr & (1ULL << 29)))
  return false;

 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 14) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_encls_vmexit(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 15) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_rdseed(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 16) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_pml(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl & ((((1UL))) << (( 2*32+ 17) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_xsaves(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 20) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_waitpkg(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 26) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_tsc_scaling(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
  ((((1UL))) << (( 2*32+ 25) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_bus_lock_detection(void)
{
 return vmcs_config.cpu_based_2nd_exec_ctrl &
     ((((1UL))) << (( 2*32+ 30) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_apicv(void)
{
 return cpu_has_vmx_apic_register_virt() &&
  cpu_has_vmx_virtual_intr_delivery() &&
  cpu_has_vmx_posted_intr();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_flexpriority(void)
{
 return cpu_has_vmx_tpr_shadow() &&
  cpu_has_vmx_virtualize_apic_accesses();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept_execute_only(void)
{
 return vmx_capability.ept & (1ull);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept_4levels(void)
{
 return vmx_capability.ept & (1ull << 6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept_5levels(void)
{
 return vmx_capability.ept & (1ull << 7);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept_mt_wb(void)
{
 return vmx_capability.ept & (1ull << 14);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept_2m_page(void)
{
 return vmx_capability.ept & (1ull << 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept_1g_page(void)
{
 return vmx_capability.ept & (1ull << 17);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_ept_ad_bits(void)
{
 return vmx_capability.ept & (1ull << 21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_invept_context(void)
{
 return vmx_capability.ept & (1ull << 25);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_invept_global(void)
{
 return vmx_capability.ept & (1ull << 26);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_invvpid(void)
{
 return vmx_capability.vpid & (1ull << 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_invvpid_individual_addr(void)
{
 return vmx_capability.vpid & (1ull << 8);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_invvpid_single(void)
{
 return vmx_capability.vpid & (1ull << 9);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_invvpid_global(void)
{
 return vmx_capability.vpid & (1ull << 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_vmx_intel_pt(void)
{
 u64 vmx_msr;

 ((vmx_msr) = native_read_msr((0x00000485)));
 return (vmx_msr & (1ULL << 14)) &&
  (vmcs_config.cpu_based_2nd_exec_ctrl & ((((1UL))) << (( 2*32+ 24) & 0x1f))) &&
  (vmcs_config.vmexit_ctrl & 0x02000000) &&
  (vmcs_config.vmentry_ctrl & 0x00040000);
}
# 370 "arch/x86/kvm/vmx/capabilities.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_pt_mode_is_system(void)
{
 return pt_mode == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_pt_mode_is_host_guest(void)
{
 return pt_mode == 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 vmx_get_perf_capabilities(void)
{
 u64 perf_cap = 0;

 if ((__builtin_constant_p(( 4*32+15)) && ( (((( 4*32+15))>>5)==(0) && (1UL<<((( 4*32+15))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+15))>>5)==(1) && (1UL<<((( 4*32+15))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+15))>>5)==(2) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(3) && (1UL<<((( 4*32+15))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+15))>>5)==(4) && (1UL<<((( 4*32+15))&31) & (0) )) || (((( 4*32+15))>>5)==(5) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(6) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(7) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(8) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(9) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(10) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(11) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(12) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(13) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(14) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(15) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(16) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(17) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(18) && (1UL<<((( 4*32+15))&31) & 0 )) || (((( 4*32+15))>>5)==(19) && (1UL<<((( 4*32+15))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 4*32+15), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  ((perf_cap) = native_read_msr((0x00000345)));

 perf_cap &= 0x3f;





 return (1ULL << 13) | perf_cap;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 vmx_supported_debugctl(void)
{
 u64 debugctl = 0;

 if ((__builtin_constant_p((16*32+24)) && ( ((((16*32+24))>>5)==(0) && (1UL<<(((16*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+24))>>5)==(1) && (1UL<<(((16*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+24))>>5)==(2) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(3) && (1UL<<(((16*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+24))>>5)==(4) && (1UL<<(((16*32+24))&31) & (0) )) || ((((16*32+24))>>5)==(5) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(6) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(7) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(8) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(9) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(10) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(11) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(12) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(13) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(14) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(15) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(16) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(17) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(18) && (1UL<<(((16*32+24))&31) & 0 )) || ((((16*32+24))>>5)==(19) && (1UL<<(((16*32+24))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+24), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  debugctl |= (1UL << 2);

 if (vmx_get_perf_capabilities() & 0x3f)
  debugctl |= ((1UL << 0) | (1UL << 11));

 return debugctl;
}
# 52 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/kvm/cpuid.h" 1




# 1 "./arch/x86/kvm/x86.h" 1





# 1 "./arch/x86/include/asm/mce.h" 1




# 1 "./arch/x86/include/uapi/asm/mce.h" 1
# 13 "./arch/x86/include/uapi/asm/mce.h"
struct mce {
 __u64 status;
 __u64 misc;
 __u64 addr;
 __u64 mcgstatus;
 __u64 ip;
 __u64 tsc;
 __u64 time;
 __u8 cpuvendor;
 __u8 inject_flags;
 __u8 severity;
 __u8 pad;
 __u32 cpuid;
 __u8 cs;
 __u8 bank;
 __u8 cpu;
 __u8 finished;
 __u32 extcpu;
 __u32 socketid;
 __u32 apicid;
 __u64 mcgcap;
 __u64 synd;
 __u64 ipid;
 __u64 ppin;
 __u32 microcode;
 __u64 kflags;
};
# 6 "./arch/x86/include/asm/mce.h" 2
# 162 "./arch/x86/include/asm/mce.h"
struct mce_log_buffer {
 char signature[12];
 unsigned len;
 unsigned next;
 unsigned flags;
 unsigned recordlen;
 struct mce entry[];
};


enum mce_notifier_prios {
 MCE_PRIO_LOWEST,
 MCE_PRIO_MCELOG,
 MCE_PRIO_EDAC,
 MCE_PRIO_NFIT,
 MCE_PRIO_EXTLOG,
 MCE_PRIO_UC,
 MCE_PRIO_EARLY,
 MCE_PRIO_CEC,
 MCE_PRIO_HIGHEST = MCE_PRIO_CEC
};

struct notifier_block;
extern void mce_register_decode_chain(struct notifier_block *nb);
extern void mce_unregister_decode_chain(struct notifier_block *nb);




extern int mce_p5_enabled;


extern void enable_copy_mc_fragile(void);
unsigned long __attribute__((__warn_unused_result__)) copy_mc_fragile(void *dst, const void *src, unsigned cnt);






struct cper_ia_proc_ctx;
# 211 "./arch/x86/include/asm/mce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mcheck_init(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mcheck_cpu_init(struct cpuinfo_x86 *c) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mcheck_cpu_clear(struct cpuinfo_x86 *c) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int apei_smca_report_x86_error(struct cper_ia_proc_ctx *ctx_info,
          u64 lapic_id) { return -22; }


void mce_setup(struct mce *m);
void mce_log(struct mce *m);
extern __attribute__((section(".data" ""))) __typeof__(struct device *) mce_device;
# 233 "./arch/x86/include/asm/mce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mce_intel_feature_init(struct cpuinfo_x86 *c) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mce_intel_feature_clear(struct cpuinfo_x86 *c) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cmci_clear(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cmci_reenable(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cmci_rediscover(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cmci_recheck(void) {}


int mce_available(struct cpuinfo_x86 *c);
bool mce_is_memory_error(struct mce *m);
bool mce_is_correctable(struct mce *m);
int mce_usable_address(struct mce *m);

extern __attribute__((section(".data" ""))) __typeof__(unsigned) mce_exception_count;
extern __attribute__((section(".data" ""))) __typeof__(unsigned) mce_poll_count;

typedef unsigned long mce_banks_t[(((64) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
extern __attribute__((section(".data" ""))) __typeof__(mce_banks_t) mce_poll_banks;

enum mcp_flags {
 MCP_TIMESTAMP = ((((1UL))) << (0)),
 MCP_UC = ((((1UL))) << (1)),
 MCP_DONTLOG = ((((1UL))) << (2)),
 MCP_QUEUE_LOG = ((((1UL))) << (3)),
};
bool machine_check_poll(enum mcp_flags flags, mce_banks_t *b);

int mce_notify_irq(void);

extern __attribute__((section(".data" ""))) __typeof__(struct mce) injectm;


extern void mce_disable_bank(int bank);




void do_machine_check(struct pt_regs *pt_regs);




extern void (*mce_threshold_vector)(void);


extern void (*deferred_error_int_vector)(void);





struct cper_sec_mem_err;
extern void apei_mce_report_mem_error(int corrected,
          struct cper_sec_mem_err *mem_err);
# 351 "./arch/x86/include/asm/mce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mce_threshold_create_device(unsigned int cpu) { return 0; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mce_threshold_remove_device(unsigned int cpu) { return 0; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool amd_mce_is_memory_error(struct mce *m) { return false; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mce_amd_feature_init(struct cpuinfo_x86 *c) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mce_hygon_feature_init(struct cpuinfo_x86 *c) { return mce_amd_feature_init(c); }
# 7 "./arch/x86/kvm/x86.h" 2
# 1 "./arch/x86/include/asm/pvclock.h" 1








u64 pvclock_clocksource_read(struct pvclock_vcpu_time_info *src);
u8 pvclock_read_flags(struct pvclock_vcpu_time_info *src);
void pvclock_set_flags(u8 flags);
unsigned long pvclock_tsc_khz(struct pvclock_vcpu_time_info *src);
void pvclock_read_wallclock(struct pvclock_wall_clock *wall,
       struct pvclock_vcpu_time_info *vcpu,
       struct timespec64 *ts);
void pvclock_resume(void);

void pvclock_touch_watchdogs(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
unsigned pvclock_read_begin(const struct pvclock_vcpu_time_info *src)
{
 unsigned version = src->version & ~1;

 __asm__ __volatile__("": : :"memory");
 return version;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
bool pvclock_read_retry(const struct pvclock_vcpu_time_info *src,
   unsigned version)
{

 __asm__ __volatile__("": : :"memory");
 return __builtin_expect(!!(version != src->version), 0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 pvclock_scale_delta(u64 delta, u32 mul_frac, int shift)
{
 u64 product;



 ulong tmp;


 if (shift < 0)
  delta >>= -shift;
 else
  delta <<= shift;
# 68 "./arch/x86/include/asm/pvclock.h"
 __asm__ (
  "mulq %[mul_frac] ; shrd $32, %[hi], %[lo]"
  : [lo]"=a"(product),
    [hi]"=d"(tmp)
  : "0"(delta),
    [mul_frac]"rm"((u64)mul_frac));




 return product;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
u64 __pvclock_read_cycles(const struct pvclock_vcpu_time_info *src, u64 tsc)
{
 u64 delta = tsc - src->tsc_timestamp;
 u64 offset = pvclock_scale_delta(delta, src->tsc_to_system_mul,
          src->tsc_shift);
 return src->system_time + offset;
}

struct pvclock_vsyscall_time_info {
 struct pvclock_vcpu_time_info pvti;
} __attribute__((__aligned__((1 << (6)))));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pvclock_vsyscall_time_info *pvclock_get_pvti_cpu0_va(void)
{
 return ((void *)0);
}
# 8 "./arch/x86/kvm/x86.h" 2
# 1 "./arch/x86/kvm/kvm_cache_regs.h" 1
# 22 "./arch/x86/kvm/kvm_cache_regs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_rax_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_RAX]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_rax_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_RAX] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_rbx_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_RBX]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_rbx_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_RBX] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_rcx_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_RCX]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_rcx_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_RCX] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_rdx_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_RDX]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_rdx_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_RDX] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_rbp_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_RBP]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_rbp_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_RBP] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_rsi_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_RSI]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_rsi_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_RSI] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_rdi_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_RDI]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_rdi_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_RDI] = val; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r8_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R8]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r8_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R8] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r9_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R9]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r9_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R9] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r10_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R10]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r10_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R10] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r11_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R11]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r11_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R11] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r12_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R12]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r12_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R12] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r13_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R13]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r13_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R13] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r14_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R14]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r14_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R14] = val; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long kvm_r15_read(struct kvm_vcpu *vcpu){ return vcpu->arch.regs[VCPU_REGS_R15]; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_r15_write(struct kvm_vcpu *vcpu, unsigned long val) { vcpu->arch.regs[VCPU_REGS_R15] = val; }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_register_is_available(struct kvm_vcpu *vcpu,
          enum kvm_reg reg)
{
 return test_bit(reg, (unsigned long *)&vcpu->arch.regs_avail);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_register_is_dirty(struct kvm_vcpu *vcpu,
      enum kvm_reg reg)
{
 return test_bit(reg, (unsigned long *)&vcpu->arch.regs_dirty);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_register_mark_available(struct kvm_vcpu *vcpu,
            enum kvm_reg reg)
{
 __set_bit(reg, (unsigned long *)&vcpu->arch.regs_avail);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_register_clear_available(struct kvm_vcpu *vcpu,
            enum kvm_reg reg)
{
 __clear_bit(reg, (unsigned long *)&vcpu->arch.regs_avail);
 __clear_bit(reg, (unsigned long *)&vcpu->arch.regs_dirty);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_register_mark_dirty(struct kvm_vcpu *vcpu,
        enum kvm_reg reg)
{
 __set_bit(reg, (unsigned long *)&vcpu->arch.regs_avail);
 __set_bit(reg, (unsigned long *)&vcpu->arch.regs_dirty);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kvm_register_read_raw(struct kvm_vcpu *vcpu, int reg)
{
 if (({ int __ret_warn_on = !!((unsigned int)reg >= NR_VCPU_REGS); __builtin_expect(!!(__ret_warn_on), 0); }))
  return 0;

 if (!kvm_register_is_available(vcpu, reg))
  ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_cache_reg448 = (void *)&__SCK__kvm_x86_cache_reg;; (&__SCT__kvm_x86_cache_reg); })(vcpu, reg);

 return vcpu->arch.regs[reg];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_register_write_raw(struct kvm_vcpu *vcpu, int reg,
       unsigned long val)
{
 if (({ int __ret_warn_on = !!((unsigned int)reg >= NR_VCPU_REGS); __builtin_expect(!!(__ret_warn_on), 0); }))
  return;

 vcpu->arch.regs[reg] = val;
 kvm_register_mark_dirty(vcpu, reg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kvm_rip_read(struct kvm_vcpu *vcpu)
{
 return kvm_register_read_raw(vcpu, VCPU_REGS_RIP);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_rip_write(struct kvm_vcpu *vcpu, unsigned long val)
{
 kvm_register_write_raw(vcpu, VCPU_REGS_RIP, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kvm_rsp_read(struct kvm_vcpu *vcpu)
{
 return kvm_register_read_raw(vcpu, VCPU_REGS_RSP);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_rsp_write(struct kvm_vcpu *vcpu, unsigned long val)
{
 kvm_register_write_raw(vcpu, VCPU_REGS_RSP, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 kvm_pdptr_read(struct kvm_vcpu *vcpu, int index)
{
 do { __might_sleep("arch/x86/kvm/kvm_cache_regs.h", 120); might_resched(); } while (0);

 if (!kvm_register_is_available(vcpu, VCPU_EXREG_PDPTR))
  ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_cache_reg449 = (void *)&__SCK__kvm_x86_cache_reg;; (&__SCT__kvm_x86_cache_reg); })(vcpu, VCPU_EXREG_PDPTR);

 return vcpu->arch.walk_mmu->pdptrs[index];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_pdptr_write(struct kvm_vcpu *vcpu, int index, u64 value)
{
 vcpu->arch.walk_mmu->pdptrs[index] = value;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ulong kvm_read_cr0_bits(struct kvm_vcpu *vcpu, ulong mask)
{
 ulong tmask = mask & (((1UL)) << (3));
 if ((tmask & vcpu->arch.cr0_guest_owned_bits) &&
     !kvm_register_is_available(vcpu, VCPU_EXREG_CR0))
  ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_cache_reg450 = (void *)&__SCK__kvm_x86_cache_reg;; (&__SCT__kvm_x86_cache_reg); })(vcpu, VCPU_EXREG_CR0);
 return vcpu->arch.cr0 & mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ulong kvm_read_cr0(struct kvm_vcpu *vcpu)
{
 return kvm_read_cr0_bits(vcpu, ~0UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ulong kvm_read_cr4_bits(struct kvm_vcpu *vcpu, ulong mask)
{
 ulong tmask = mask & ((((1UL)) << (1)) | (((1UL)) << (3)) | (((1UL)) << (8)) | (((1UL)) << (9)) | (((1UL)) << (10)) | (((1UL)) << (7)) | (((1UL)) << (2)) | (((1UL)) << (16)));
 if ((tmask & vcpu->arch.cr4_guest_owned_bits) &&
     !kvm_register_is_available(vcpu, VCPU_EXREG_CR4))
  ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_cache_reg451 = (void *)&__SCK__kvm_x86_cache_reg;; (&__SCT__kvm_x86_cache_reg); })(vcpu, VCPU_EXREG_CR4);
 return vcpu->arch.cr4 & mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ulong kvm_read_cr3(struct kvm_vcpu *vcpu)
{
 if (!kvm_register_is_available(vcpu, VCPU_EXREG_CR3))
  ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_cache_reg452 = (void *)&__SCK__kvm_x86_cache_reg;; (&__SCT__kvm_x86_cache_reg); })(vcpu, VCPU_EXREG_CR3);
 return vcpu->arch.cr3;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ulong kvm_read_cr4(struct kvm_vcpu *vcpu)
{
 return kvm_read_cr4_bits(vcpu, ~0UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 kvm_read_edx_eax(struct kvm_vcpu *vcpu)
{
 return (kvm_rax_read(vcpu) & -1u)
  | ((u64)(kvm_rdx_read(vcpu) & -1u) << 32);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void enter_guest_mode(struct kvm_vcpu *vcpu)
{
 vcpu->arch.hflags |= (1 << 5);
 vcpu->stat.guest_mode = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void leave_guest_mode(struct kvm_vcpu *vcpu)
{
 vcpu->arch.hflags &= ~(1 << 5);

 if (vcpu->arch.load_eoi_exitmap_pending) {
  vcpu->arch.load_eoi_exitmap_pending = false;
  kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_453(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(23) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(23) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_453(); } while (0); (unsigned)(((23) + 8) | (0)); }), vcpu);
 }

 vcpu->stat.guest_mode = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_guest_mode(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.hflags & (1 << 5);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_smm(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.hflags & (1 << 6);
}
# 9 "./arch/x86/kvm/x86.h" 2
# 1 "./arch/x86/kvm/kvm_emulate.h" 1
# 16 "./arch/x86/kvm/kvm_emulate.h"
# 1 "./arch/x86/kvm/fpu.h" 1







typedef u32 __attribute__((vector_size(16))) sse128_t;
# 18 "./arch/x86/kvm/fpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void _kvm_read_sse_reg(int reg, sse128_t *data)
{
 switch (reg) {
 case 0: asm("movdqa %%xmm0, %0" : "=m"(*data)); break;
 case 1: asm("movdqa %%xmm1, %0" : "=m"(*data)); break;
 case 2: asm("movdqa %%xmm2, %0" : "=m"(*data)); break;
 case 3: asm("movdqa %%xmm3, %0" : "=m"(*data)); break;
 case 4: asm("movdqa %%xmm4, %0" : "=m"(*data)); break;
 case 5: asm("movdqa %%xmm5, %0" : "=m"(*data)); break;
 case 6: asm("movdqa %%xmm6, %0" : "=m"(*data)); break;
 case 7: asm("movdqa %%xmm7, %0" : "=m"(*data)); break;

 case 8: asm("movdqa %%xmm8, %0" : "=m"(*data)); break;
 case 9: asm("movdqa %%xmm9, %0" : "=m"(*data)); break;
 case 10: asm("movdqa %%xmm10, %0" : "=m"(*data)); break;
 case 11: asm("movdqa %%xmm11, %0" : "=m"(*data)); break;
 case 12: asm("movdqa %%xmm12, %0" : "=m"(*data)); break;
 case 13: asm("movdqa %%xmm13, %0" : "=m"(*data)); break;
 case 14: asm("movdqa %%xmm14, %0" : "=m"(*data)); break;
 case 15: asm("movdqa %%xmm15, %0" : "=m"(*data)); break;

 default: do { ({ asm volatile("454" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "454" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("455" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "455" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void _kvm_write_sse_reg(int reg, const sse128_t *data)
{
 switch (reg) {
 case 0: asm("movdqa %0, %%xmm0" : : "m"(*data)); break;
 case 1: asm("movdqa %0, %%xmm1" : : "m"(*data)); break;
 case 2: asm("movdqa %0, %%xmm2" : : "m"(*data)); break;
 case 3: asm("movdqa %0, %%xmm3" : : "m"(*data)); break;
 case 4: asm("movdqa %0, %%xmm4" : : "m"(*data)); break;
 case 5: asm("movdqa %0, %%xmm5" : : "m"(*data)); break;
 case 6: asm("movdqa %0, %%xmm6" : : "m"(*data)); break;
 case 7: asm("movdqa %0, %%xmm7" : : "m"(*data)); break;

 case 8: asm("movdqa %0, %%xmm8" : : "m"(*data)); break;
 case 9: asm("movdqa %0, %%xmm9" : : "m"(*data)); break;
 case 10: asm("movdqa %0, %%xmm10" : : "m"(*data)); break;
 case 11: asm("movdqa %0, %%xmm11" : : "m"(*data)); break;
 case 12: asm("movdqa %0, %%xmm12" : : "m"(*data)); break;
 case 13: asm("movdqa %0, %%xmm13" : : "m"(*data)); break;
 case 14: asm("movdqa %0, %%xmm14" : : "m"(*data)); break;
 case 15: asm("movdqa %0, %%xmm15" : : "m"(*data)); break;

 default: do { ({ asm volatile("456" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "456" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("457" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "457" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void _kvm_read_mmx_reg(int reg, u64 *data)
{
 switch (reg) {
 case 0: asm("movq %%mm0, %0" : "=m"(*data)); break;
 case 1: asm("movq %%mm1, %0" : "=m"(*data)); break;
 case 2: asm("movq %%mm2, %0" : "=m"(*data)); break;
 case 3: asm("movq %%mm3, %0" : "=m"(*data)); break;
 case 4: asm("movq %%mm4, %0" : "=m"(*data)); break;
 case 5: asm("movq %%mm5, %0" : "=m"(*data)); break;
 case 6: asm("movq %%mm6, %0" : "=m"(*data)); break;
 case 7: asm("movq %%mm7, %0" : "=m"(*data)); break;
 default: do { ({ asm volatile("458" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "458" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("459" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "459" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void _kvm_write_mmx_reg(int reg, const u64 *data)
{
 switch (reg) {
 case 0: asm("movq %0, %%mm0" : : "m"(*data)); break;
 case 1: asm("movq %0, %%mm1" : : "m"(*data)); break;
 case 2: asm("movq %0, %%mm2" : : "m"(*data)); break;
 case 3: asm("movq %0, %%mm3" : : "m"(*data)); break;
 case 4: asm("movq %0, %%mm4" : : "m"(*data)); break;
 case 5: asm("movq %0, %%mm5" : : "m"(*data)); break;
 case 6: asm("movq %0, %%mm6" : : "m"(*data)); break;
 case 7: asm("movq %0, %%mm7" : : "m"(*data)); break;
 default: do { ({ asm volatile("460" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "460" "b - .\n\t" ".popsection\n\t"); }); asm volatile(".byte 0x0f, 0x0b"); do { ({ asm volatile("461" ":\n\t" ".pushsection .discard.unreachable\n\t" ".long " "461" "b - .\n\t" ".popsection\n\t"); }); __builtin_unreachable(); } while (0); } while (0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_fpu_get(void)
{
 fpregs_lock();

 fpregs_assert_state_consistent();
 if (test_ti_thread_flag(((struct thread_info *)get_current()), 14))
  switch_fpu_return();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_fpu_put(void)
{
 fpregs_unlock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_read_sse_reg(int reg, sse128_t *data)
{
 kvm_fpu_get();
 _kvm_read_sse_reg(reg, data);
 kvm_fpu_put();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_write_sse_reg(int reg, const sse128_t *data)
{
 kvm_fpu_get();
 _kvm_write_sse_reg(reg, data);
 kvm_fpu_put();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_read_mmx_reg(int reg, u64 *data)
{
 kvm_fpu_get();
 _kvm_read_mmx_reg(reg, data);
 kvm_fpu_put();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_write_mmx_reg(int reg, const u64 *data)
{
 kvm_fpu_get();
 _kvm_write_mmx_reg(reg, data);
 kvm_fpu_put();
}
# 17 "./arch/x86/kvm/kvm_emulate.h" 2

struct x86_emulate_ctxt;
enum x86_intercept;
enum x86_intercept_stage;

struct x86_exception {
 u8 vector;
 bool error_code_valid;
 u16 error_code;
 bool nested_page_fault;
 u64 address;
 u8 async_page_fault;
};






struct x86_instruction_info {
 u8 intercept;
 u8 rep_prefix;
 u8 modrm_mod;
 u8 modrm_reg;
 u8 modrm_rm;
 u64 src_val;
 u64 dst_val;
 u8 src_bytes;
 u8 dst_bytes;
 u8 ad_bytes;
 u64 next_rip;
};
# 91 "./arch/x86/kvm/kvm_emulate.h"
struct x86_emulate_ops {





 ulong (*read_gpr)(struct x86_emulate_ctxt *ctxt, unsigned reg);






 void (*write_gpr)(struct x86_emulate_ctxt *ctxt, unsigned reg, ulong val);
# 113 "./arch/x86/kvm/kvm_emulate.h"
 int (*read_std)(struct x86_emulate_ctxt *ctxt,
   unsigned long addr, void *val,
   unsigned int bytes,
   struct x86_exception *fault, bool system);
# 125 "./arch/x86/kvm/kvm_emulate.h"
 int (*read_phys)(struct x86_emulate_ctxt *ctxt, unsigned long addr,
   void *val, unsigned int bytes);
# 136 "./arch/x86/kvm/kvm_emulate.h"
 int (*write_std)(struct x86_emulate_ctxt *ctxt,
    unsigned long addr, void *val, unsigned int bytes,
    struct x86_exception *fault, bool system);







 int (*fetch)(struct x86_emulate_ctxt *ctxt,
       unsigned long addr, void *val, unsigned int bytes,
       struct x86_exception *fault);







 int (*read_emulated)(struct x86_emulate_ctxt *ctxt,
        unsigned long addr, void *val, unsigned int bytes,
        struct x86_exception *fault);
# 167 "./arch/x86/kvm/kvm_emulate.h"
 int (*write_emulated)(struct x86_emulate_ctxt *ctxt,
         unsigned long addr, const void *val,
         unsigned int bytes,
         struct x86_exception *fault);
# 180 "./arch/x86/kvm/kvm_emulate.h"
 int (*cmpxchg_emulated)(struct x86_emulate_ctxt *ctxt,
    unsigned long addr,
    const void *old,
    const void *new,
    unsigned int bytes,
    struct x86_exception *fault);
 void (*invlpg)(struct x86_emulate_ctxt *ctxt, ulong addr);

 int (*pio_in_emulated)(struct x86_emulate_ctxt *ctxt,
          int size, unsigned short port, void *val,
          unsigned int count);

 int (*pio_out_emulated)(struct x86_emulate_ctxt *ctxt,
    int size, unsigned short port, const void *val,
    unsigned int count);

 bool (*get_segment)(struct x86_emulate_ctxt *ctxt, u16 *selector,
       struct desc_struct *desc, u32 *base3, int seg);
 void (*set_segment)(struct x86_emulate_ctxt *ctxt, u16 selector,
       struct desc_struct *desc, u32 base3, int seg);
 unsigned long (*get_cached_segment_base)(struct x86_emulate_ctxt *ctxt,
       int seg);
 void (*get_gdt)(struct x86_emulate_ctxt *ctxt, struct desc_ptr *dt);
 void (*get_idt)(struct x86_emulate_ctxt *ctxt, struct desc_ptr *dt);
 void (*set_gdt)(struct x86_emulate_ctxt *ctxt, struct desc_ptr *dt);
 void (*set_idt)(struct x86_emulate_ctxt *ctxt, struct desc_ptr *dt);
 ulong (*get_cr)(struct x86_emulate_ctxt *ctxt, int cr);
 int (*set_cr)(struct x86_emulate_ctxt *ctxt, int cr, ulong val);
 int (*cpl)(struct x86_emulate_ctxt *ctxt);
 void (*get_dr)(struct x86_emulate_ctxt *ctxt, int dr, ulong *dest);
 int (*set_dr)(struct x86_emulate_ctxt *ctxt, int dr, ulong value);
 u64 (*get_smbase)(struct x86_emulate_ctxt *ctxt);
 void (*set_smbase)(struct x86_emulate_ctxt *ctxt, u64 smbase);
 int (*set_msr)(struct x86_emulate_ctxt *ctxt, u32 msr_index, u64 data);
 int (*get_msr)(struct x86_emulate_ctxt *ctxt, u32 msr_index, u64 *pdata);
 int (*check_pmc)(struct x86_emulate_ctxt *ctxt, u32 pmc);
 int (*read_pmc)(struct x86_emulate_ctxt *ctxt, u32 pmc, u64 *pdata);
 void (*halt)(struct x86_emulate_ctxt *ctxt);
 void (*wbinvd)(struct x86_emulate_ctxt *ctxt);
 int (*fix_hypercall)(struct x86_emulate_ctxt *ctxt);
 int (*intercept)(struct x86_emulate_ctxt *ctxt,
    struct x86_instruction_info *info,
    enum x86_intercept_stage stage);

 bool (*get_cpuid)(struct x86_emulate_ctxt *ctxt, u32 *eax, u32 *ebx,
     u32 *ecx, u32 *edx, bool exact_only);
 bool (*guest_has_long_mode)(struct x86_emulate_ctxt *ctxt);
 bool (*guest_has_movbe)(struct x86_emulate_ctxt *ctxt);
 bool (*guest_has_fxsr)(struct x86_emulate_ctxt *ctxt);

 void (*set_nmi_mask)(struct x86_emulate_ctxt *ctxt, bool masked);

 unsigned (*get_hflags)(struct x86_emulate_ctxt *ctxt);
 void (*exiting_smm)(struct x86_emulate_ctxt *ctxt);
 int (*leave_smm)(struct x86_emulate_ctxt *ctxt, const char *smstate);
 void (*triple_fault)(struct x86_emulate_ctxt *ctxt);
 int (*set_xcr)(struct x86_emulate_ctxt *ctxt, u32 index, u64 xcr);
};


struct operand {
 enum { OP_REG, OP_MEM, OP_MEM_STR, OP_IMM, OP_XMM, OP_MM, OP_NONE } type;
 unsigned int bytes;
 unsigned int count;
 union {
  unsigned long orig_val;
  u64 orig_val64;
 };
 union {
  unsigned long *reg;
  struct segmented_address {
   ulong ea;
   unsigned seg;
  } mem;
  unsigned xmm;
  unsigned mm;
 } addr;
 union {
  unsigned long val;
  u64 val64;
  char valptr[sizeof(sse128_t)];
  sse128_t vec_val;
  u64 mm_val;
  void *data;
 };
};

struct fetch_cache {
 u8 data[15];
 u8 *ptr;
 u8 *end;
};

struct read_cache {
 u8 data[1024];
 unsigned long pos;
 unsigned long end;
};


enum x86emul_mode {
 X86EMUL_MODE_REAL,
 X86EMUL_MODE_VM86,
 X86EMUL_MODE_PROT16,
 X86EMUL_MODE_PROT32,
 X86EMUL_MODE_PROT64,
};
# 297 "./arch/x86/kvm/kvm_emulate.h"
struct fastop;

typedef void (*fastop_t)(struct fastop *);

struct x86_emulate_ctxt {
 void *vcpu;
 const struct x86_emulate_ops *ops;


 unsigned long eflags;
 unsigned long eip;

 enum x86emul_mode mode;


 int interruptibility;

 bool perm_ok;
 bool tf;

 bool have_exception;
 struct x86_exception exception;


 bool gpa_available;
 gpa_t gpa_val;






 u8 opcode_len;
 u8 b;
 u8 intercept;
 u8 op_bytes;
 u8 ad_bytes;
 union {
  int (*execute)(struct x86_emulate_ctxt *ctxt);
  fastop_t fop;
 };
 int (*check_perm)(struct x86_emulate_ctxt *ctxt);





 bool rip_relative;
 u8 rex_prefix;
 u8 lock_prefix;
 u8 rep_prefix;

 u32 regs_valid;

 u32 regs_dirty;

 u8 modrm;
 u8 modrm_mod;
 u8 modrm_reg;
 u8 modrm_rm;
 u8 modrm_seg;
 u8 seg_override;
 u64 d;
 unsigned long _eip;


 struct operand src;
 struct operand src2;
 struct operand dst;
 struct operand memop;
 unsigned long _regs[NR_VCPU_REGS];
 struct operand *memopp;
 struct fetch_cache fetch;
 struct read_cache io_read;
 struct read_cache mem_read;
};
# 399 "./arch/x86/kvm/kvm_emulate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_guest_vendor_intel(u32 ebx, u32 ecx, u32 edx)
{
 return ebx == 0x756e6547 &&
        ecx == 0x6c65746e &&
        edx == 0x49656e69;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_guest_vendor_amd(u32 ebx, u32 ecx, u32 edx)
{
 return (ebx == 0x68747541 &&
  ecx == 0x444d4163 &&
  edx == 0x69746e65) ||
        (ebx == 0x69444d41 &&
  ecx == 0x21726574 &&
  edx == 0x74656273);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_guest_vendor_hygon(u32 ebx, u32 ecx, u32 edx)
{
 return ebx == 0x6f677948 &&
        ecx == 0x656e6975 &&
        edx == 0x6e65476e;
}

enum x86_intercept_stage {
 X86_ICTP_NONE = 0,
 X86_ICPT_PRE_EXCEPT,
 X86_ICPT_POST_EXCEPT,
 X86_ICPT_POST_MEMACCESS,
};

enum x86_intercept {
 x86_intercept_none,
 x86_intercept_cr_read,
 x86_intercept_cr_write,
 x86_intercept_clts,
 x86_intercept_lmsw,
 x86_intercept_smsw,
 x86_intercept_dr_read,
 x86_intercept_dr_write,
 x86_intercept_lidt,
 x86_intercept_sidt,
 x86_intercept_lgdt,
 x86_intercept_sgdt,
 x86_intercept_lldt,
 x86_intercept_sldt,
 x86_intercept_ltr,
 x86_intercept_str,
 x86_intercept_rdtsc,
 x86_intercept_rdpmc,
 x86_intercept_pushf,
 x86_intercept_popf,
 x86_intercept_cpuid,
 x86_intercept_rsm,
 x86_intercept_iret,
 x86_intercept_intn,
 x86_intercept_invd,
 x86_intercept_pause,
 x86_intercept_hlt,
 x86_intercept_invlpg,
 x86_intercept_invlpga,
 x86_intercept_vmrun,
 x86_intercept_vmload,
 x86_intercept_vmsave,
 x86_intercept_vmmcall,
 x86_intercept_stgi,
 x86_intercept_clgi,
 x86_intercept_skinit,
 x86_intercept_rdtscp,
 x86_intercept_rdpid,
 x86_intercept_icebp,
 x86_intercept_wbinvd,
 x86_intercept_monitor,
 x86_intercept_mwait,
 x86_intercept_rdmsr,
 x86_intercept_wrmsr,
 x86_intercept_in,
 x86_intercept_ins,
 x86_intercept_out,
 x86_intercept_outs,
 x86_intercept_xsetbv,

 nr_x86_intercepts
};
# 491 "./arch/x86/kvm/kvm_emulate.h"
int x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len, int emulation_type);
bool x86_page_table_writing_insn(struct x86_emulate_ctxt *ctxt);




void init_decode_cache(struct x86_emulate_ctxt *ctxt);
int x86_emulate_insn(struct x86_emulate_ctxt *ctxt);
int emulator_task_switch(struct x86_emulate_ctxt *ctxt,
    u16 tss_selector, int idt_index, int reason,
    bool has_error_code, u32 error_code);
int emulate_int_real(struct x86_emulate_ctxt *ctxt, int irq);
void emulator_invalidate_register_cache(struct x86_emulate_ctxt *ctxt);
void emulator_writeback_register_cache(struct x86_emulate_ctxt *ctxt);
bool emulator_can_use_gpa(struct x86_emulate_ctxt *ctxt);
# 10 "./arch/x86/kvm/x86.h" 2

void kvm_spurious_fault(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_guest_enter_irqoff(void)
{
# 27 "./arch/x86/kvm/x86.h"
 ({ asm volatile("462" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "462" "b - .\n\t" ".popsection\n\t"); });
 do { } while (0);
 lockdep_hardirqs_on_prepare(((unsigned long)__builtin_return_address(0)));
 ({ asm volatile("463" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "463" "b - .\n\t" ".popsection\n\t"); });

 guest_enter_irqoff();
 lockdep_hardirqs_on(((unsigned long)__builtin_return_address(0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_guest_exit_irqoff(void)
{
# 50 "./arch/x86/kvm/x86.h"
 lockdep_hardirqs_off(((unsigned long)__builtin_return_address(0)));
 context_tracking_guest_exit();

 ({ asm volatile("464" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "464" "b - .\n\t" ".popsection\n\t"); });
 do { } while (0);
 ({ asm volatile("465" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "465" "b - .\n\t" ".popsection\n\t"); });
}
# 74 "./arch/x86/kvm/x86.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __grow_ple_window(unsigned int val,
  unsigned int base, unsigned int modifier, unsigned int max)
{
 u64 ret = val;

 if (modifier < 1)
  return base;

 if (modifier < base)
  ret *= modifier;
 else
  ret += modifier;

 return __builtin_choose_expr(((!!(sizeof((typeof(ret) *)1 == (typeof((u64)max) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ret) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((u64)max) * 0l)) : (int *)8))))), ((ret) < ((u64)max) ? (ret) : ((u64)max)), ({ typeof(ret) __UNIQUE_ID___x466 = (ret); typeof((u64)max) __UNIQUE_ID___y467 = ((u64)max); ((__UNIQUE_ID___x466) < (__UNIQUE_ID___y467) ? (__UNIQUE_ID___x466) : (__UNIQUE_ID___y467)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __shrink_ple_window(unsigned int val,
  unsigned int base, unsigned int modifier, unsigned int min)
{
 if (modifier < 1)
  return base;

 if (modifier < base)
  val /= modifier;
 else
  val -= modifier;

 return __builtin_choose_expr(((!!(sizeof((typeof(val) *)1 == (typeof(min) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(val) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(min) * 0l)) : (int *)8))))), ((val) > (min) ? (val) : (min)), ({ typeof(val) __UNIQUE_ID___x468 = (val); typeof(min) __UNIQUE_ID___y469 = (min); ((__UNIQUE_ID___x468) > (__UNIQUE_ID___y469) ? (__UNIQUE_ID___x468) : (__UNIQUE_ID___y469)); }));
}



int kvm_check_nested_events(struct kvm_vcpu *vcpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_clear_exception_queue(struct kvm_vcpu *vcpu)
{
 vcpu->arch.exception.pending = false;
 vcpu->arch.exception.injected = false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_queue_interrupt(struct kvm_vcpu *vcpu, u8 vector,
 bool soft)
{
 vcpu->arch.interrupt.injected = true;
 vcpu->arch.interrupt.soft = soft;
 vcpu->arch.interrupt.nr = vector;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_clear_interrupt_queue(struct kvm_vcpu *vcpu)
{
 vcpu->arch.interrupt.injected = false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_event_needs_reinjection(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.exception.injected || vcpu->arch.interrupt.injected ||
  vcpu->arch.nmi_injected;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_exception_is_soft(unsigned int nr)
{
 return (nr == 3) || (nr == 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_protmode(struct kvm_vcpu *vcpu)
{
 return kvm_read_cr0_bits(vcpu, (((1UL)) << (0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_long_mode(struct kvm_vcpu *vcpu)
{

 return vcpu->arch.efer & (1<<10);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_64_bit_mode(struct kvm_vcpu *vcpu)
{
 int cs_db, cs_l;

 if (!is_long_mode(vcpu))
  return false;
 ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_get_cs_db_l_bits470 = (void *)&__SCK__kvm_x86_get_cs_db_l_bits;; (&__SCT__kvm_x86_get_cs_db_l_bits); })(vcpu, &cs_db, &cs_l);
 return cs_l;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool x86_exception_has_error_code(unsigned int vector)
{
 static u32 exception_has_error_code = ((((1UL))) << (8)) | ((((1UL))) << (10)) |
   ((((1UL))) << (11)) | ((((1UL))) << (12)) | ((((1UL))) << (13)) |
   ((((1UL))) << (14)) | ((((1UL))) << (17));

 return (1U << vector) & exception_has_error_code;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mmu_is_nested(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.walk_mmu == &vcpu->arch.nested_mmu;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_vcpu_flush_tlb_current(struct kvm_vcpu *vcpu)
{
 ++vcpu->stat.tlb_flush;
 ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_tlb_flush_current471 = (void *)&__SCK__kvm_x86_tlb_flush_current;; (&__SCT__kvm_x86_tlb_flush_current); })(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_pae(struct kvm_vcpu *vcpu)
{
 return kvm_read_cr4_bits(vcpu, (((1UL)) << (5)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_pse(struct kvm_vcpu *vcpu)
{
 return kvm_read_cr4_bits(vcpu, (((1UL)) << (4)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_paging(struct kvm_vcpu *vcpu)
{
 return __builtin_expect(!!(kvm_read_cr0_bits(vcpu, (((1UL)) << (31)))), 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_pae_paging(struct kvm_vcpu *vcpu)
{
 return !is_long_mode(vcpu) && is_pae(vcpu) && is_paging(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u8 vcpu_virt_addr_bits(struct kvm_vcpu *vcpu)
{
 return kvm_read_cr4_bits(vcpu, (((1UL)) << (12))) ? 57 : 48;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 get_canonical(u64 la, u8 vaddr_bits)
{
 return ((int64_t)la << (64 - vaddr_bits)) >> (64 - vaddr_bits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_noncanonical_address(u64 la, struct kvm_vcpu *vcpu)
{
 return get_canonical(la, vcpu_virt_addr_bits(vcpu)) != la;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vcpu_cache_mmio_info(struct kvm_vcpu *vcpu,
     gva_t gva, gfn_t gfn, unsigned access)
{
 u64 gen = kvm_memslots(vcpu->kvm)->generation;

 if (__builtin_expect(!!(gen & ((((1ULL))) << (63))), 0))
  return;





 vcpu->arch.mmio_gva = mmu_is_nested(vcpu) ? 0 : gva & (~(((1UL) << 12)-1));
 vcpu->arch.mmio_access = access;
 vcpu->arch.mmio_gfn = gfn;
 vcpu->arch.mmio_gen = gen;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vcpu_match_mmio_gen(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.mmio_gen == kvm_memslots(vcpu->kvm)->generation;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vcpu_clear_mmio_info(struct kvm_vcpu *vcpu, gva_t gva)
{
 if (gva != (~(gva_t)0) && vcpu->arch.mmio_gva != (gva & (~(((1UL) << 12)-1))))
  return;

 vcpu->arch.mmio_gva = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vcpu_match_mmio_gva(struct kvm_vcpu *vcpu, unsigned long gva)
{
 if (vcpu_match_mmio_gen(vcpu) && vcpu->arch.mmio_gva &&
       vcpu->arch.mmio_gva == (gva & (~(((1UL) << 12)-1))))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vcpu_match_mmio_gpa(struct kvm_vcpu *vcpu, gpa_t gpa)
{
 if (vcpu_match_mmio_gen(vcpu) && vcpu->arch.mmio_gfn &&
       vcpu->arch.mmio_gfn == gpa >> 12)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kvm_register_read(struct kvm_vcpu *vcpu, int reg)
{
 unsigned long val = kvm_register_read_raw(vcpu, reg);

 return is_64_bit_mode(vcpu) ? val : (u32)val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_register_write(struct kvm_vcpu *vcpu,
           int reg, unsigned long val)
{
 if (!is_64_bit_mode(vcpu))
  val = (u32)val;
 return kvm_register_write_raw(vcpu, reg, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_check_has_quirk(struct kvm *kvm, u64 quirk)
{
 return !(kvm->arch.disabled_quirks & quirk);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_latch_init(struct kvm_vcpu *vcpu)
{
 return is_smm(vcpu) || ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_apic_init_signal_blocked472 = (void *)&__SCK__kvm_x86_apic_init_signal_blocked;; (&__SCT__kvm_x86_apic_init_signal_blocked); })(vcpu);
}

void kvm_write_wall_clock(struct kvm *kvm, gpa_t wall_clock, int sec_hi_ofs);
void kvm_inject_realmode_interrupt(struct kvm_vcpu *vcpu, int irq, int inc_eip);

u64 get_kvmclock_ns(struct kvm *kvm);

int kvm_read_guest_virt(struct kvm_vcpu *vcpu,
 gva_t addr, void *val, unsigned int bytes,
 struct x86_exception *exception);

int kvm_write_guest_virt_system(struct kvm_vcpu *vcpu,
 gva_t addr, void *val, unsigned int bytes,
 struct x86_exception *exception);

int handle_ud(struct kvm_vcpu *vcpu);

void kvm_deliver_exception_payload(struct kvm_vcpu *vcpu);

void kvm_vcpu_mtrr_init(struct kvm_vcpu *vcpu);
u8 kvm_mtrr_get_guest_memory_type(struct kvm_vcpu *vcpu, gfn_t gfn);
bool kvm_mtrr_valid(struct kvm_vcpu *vcpu, u32 msr, u64 data);
int kvm_mtrr_set_msr(struct kvm_vcpu *vcpu, u32 msr, u64 data);
int kvm_mtrr_get_msr(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata);
bool kvm_mtrr_check_gfn_range_consistency(struct kvm_vcpu *vcpu, gfn_t gfn,
       int page_num);
bool kvm_vector_hashing_enabled(void);
void kvm_fixup_and_inject_pf_error(struct kvm_vcpu *vcpu, gva_t gva, u16 error_code);
int x86_decode_emulated_instruction(struct kvm_vcpu *vcpu, int emulation_type,
        void *insn, int insn_len);
int x86_emulate_instruction(struct kvm_vcpu *vcpu, gpa_t cr2_or_gpa,
       int emulation_type, void *insn, int insn_len);
fastpath_t handle_fastpath_set_msr_irqoff(struct kvm_vcpu *vcpu);

extern u64 host_xcr0;
extern u64 supported_xcr0;
extern u64 host_xss;
extern u64 supported_xss;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_mpx_supported(void)
{
 return (supported_xcr0 & ((1 << XFEATURE_BNDREGS) | (1 << XFEATURE_BNDCSR)))
  == ((1 << XFEATURE_BNDREGS) | (1 << XFEATURE_BNDCSR));
}

extern unsigned int min_timer_period_us;

extern bool enable_vmware_backdoor;

extern int pi_inject_timer;

extern bool report_ignored_msrs;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 nsec_to_cycles(struct kvm_vcpu *vcpu, u64 nsec)
{
 return pvclock_scale_delta(nsec, vcpu->arch.virtual_tsc_mult,
       vcpu->arch.virtual_tsc_shift);
}
# 368 "./arch/x86/kvm/x86.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_mwait_in_guest(struct kvm *kvm)
{
 return kvm->arch.mwait_in_guest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_hlt_in_guest(struct kvm *kvm)
{
 return kvm->arch.hlt_in_guest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_pause_in_guest(struct kvm *kvm)
{
 return kvm->arch.pause_in_guest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_cstate_in_guest(struct kvm *kvm)
{
 return kvm->arch.cstate_in_guest;
}

extern __attribute__((section(".data" ""))) __typeof__(struct kvm_vcpu *) current_vcpu;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_before_interrupt(struct kvm_vcpu *vcpu)
{
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(current_vcpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(current_vcpu)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) vcpu) & 0xff)); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (vcpu); (void)pto_tmp__; } asm ("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) vcpu) & 0xffff)); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (vcpu); (void)pto_tmp__; } asm ("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) vcpu) & 0xffffffff)); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (vcpu); (void)pto_tmp__; } asm ("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(vcpu)); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (vcpu); (void)pto_tmp__; } asm ("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_after_interrupt(struct kvm_vcpu *vcpu)
{
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(current_vcpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(current_vcpu)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) ((void *)0)) & 0xff)); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } asm ("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) ((void *)0)) & 0xffff)); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } asm ("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) ((void *)0)) & 0xffffffff)); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } asm ("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(((void *)0))); if (0) { typeof((current_vcpu)) pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } asm ("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((current_vcpu)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_pat_valid(u64 data)
{
 if (data & 0xF8F8F8F8F8F8F8F8ull)
  return false;

 return (data | ((data & 0x0202020202020202ull) << 1)) == data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_dr7_valid(u64 data)
{

 return !(data >> 32);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_dr6_valid(u64 data)
{

 return !(data >> 32);
}
# 427 "./arch/x86/kvm/x86.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_machine_check(void)
{
# 437 "./arch/x86/kvm/x86.h"
}

void kvm_load_guest_xsave_state(struct kvm_vcpu *vcpu);
void kvm_load_host_xsave_state(struct kvm_vcpu *vcpu);
int kvm_spec_ctrl_test_value(u64 value);
bool kvm_is_valid_cr4(struct kvm_vcpu *vcpu, unsigned long cr4);
int kvm_handle_memory_failure(struct kvm_vcpu *vcpu, int r,
         struct x86_exception *e);
int kvm_handle_invpcid(struct kvm_vcpu *vcpu, unsigned long type, gva_t gva);
bool kvm_msr_allowed(struct kvm_vcpu *vcpu, u32 index, u32 type);
# 481 "./arch/x86/kvm/x86.h"
int kvm_sev_es_mmio_write(struct kvm_vcpu *vcpu, gpa_t src, unsigned int bytes,
     void *dst);
int kvm_sev_es_mmio_read(struct kvm_vcpu *vcpu, gpa_t src, unsigned int bytes,
    void *dst);
int kvm_sev_es_string_io(struct kvm_vcpu *vcpu, unsigned int size,
    unsigned int port, void *data, unsigned int count,
    int in);
# 6 "./arch/x86/kvm/cpuid.h" 2
# 1 "./arch/x86/kvm/reverse_cpuid.h" 1
# 14 "./arch/x86/kvm/reverse_cpuid.h"
enum kvm_only_cpuid_leafs {
 CPUID_12_EAX = 20,
 NR_KVM_CPU_CAPS,

 NKVMCAPINTS = NR_KVM_CPU_CAPS - 20,
};







struct cpuid_reg {
 u32 function;
 u32 index;
 int reg;
};

static const struct cpuid_reg reverse_cpuid[] = {
 [CPUID_1_EDX] = { 1, 0, CPUID_EDX},
 [CPUID_8000_0001_EDX] = {0x80000001, 0, CPUID_EDX},
 [CPUID_8086_0001_EDX] = {0x80860001, 0, CPUID_EDX},
 [CPUID_1_ECX] = { 1, 0, CPUID_ECX},
 [CPUID_C000_0001_EDX] = {0xc0000001, 0, CPUID_EDX},
 [CPUID_8000_0001_ECX] = {0x80000001, 0, CPUID_ECX},
 [CPUID_7_0_EBX] = { 7, 0, CPUID_EBX},
 [CPUID_D_1_EAX] = { 0xd, 1, CPUID_EAX},
 [CPUID_8000_0008_EBX] = {0x80000008, 0, CPUID_EBX},
 [CPUID_6_EAX] = { 6, 0, CPUID_EAX},
 [CPUID_8000_000A_EDX] = {0x8000000a, 0, CPUID_EDX},
 [CPUID_7_ECX] = { 7, 0, CPUID_ECX},
 [CPUID_8000_0007_EBX] = {0x80000007, 0, CPUID_EBX},
 [CPUID_7_EDX] = { 7, 0, CPUID_EDX},
 [CPUID_7_1_EAX] = { 7, 1, CPUID_EAX},
 [CPUID_12_EAX] = {0x00000012, 0, CPUID_EAX},
 [CPUID_8000_001F_EAX] = {0x8000001f, 0, CPUID_EAX},
};
# 61 "./arch/x86/kvm/reverse_cpuid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void reverse_cpuid_check(unsigned int x86_leaf)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_473(void) __attribute__((__error__("BUILD_BUG_ON failed: " "x86_leaf == CPUID_LNX_1"))); if (!(!(x86_leaf == CPUID_LNX_1))) __compiletime_assert_473(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_474(void) __attribute__((__error__("BUILD_BUG_ON failed: " "x86_leaf == CPUID_LNX_2"))); if (!(!(x86_leaf == CPUID_LNX_2))) __compiletime_assert_474(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_475(void) __attribute__((__error__("BUILD_BUG_ON failed: " "x86_leaf == CPUID_LNX_3"))); if (!(!(x86_leaf == CPUID_LNX_3))) __compiletime_assert_475(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_476(void) __attribute__((__error__("BUILD_BUG_ON failed: " "x86_leaf == CPUID_LNX_4"))); if (!(!(x86_leaf == CPUID_LNX_4))) __compiletime_assert_476(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_477(void) __attribute__((__error__("BUILD_BUG_ON failed: " "x86_leaf >= ARRAY_SIZE(reverse_cpuid)"))); if (!(!(x86_leaf >= (sizeof(reverse_cpuid) / sizeof((reverse_cpuid)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((reverse_cpuid)), typeof(&(reverse_cpuid)[0])))); }))))))) __compiletime_assert_477(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_478(void) __attribute__((__error__("BUILD_BUG_ON failed: " "reverse_cpuid[x86_leaf].function == 0"))); if (!(!(reverse_cpuid[x86_leaf].function == 0))) __compiletime_assert_478(); } while (0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 __feature_translate(int x86_feature)
{
 if (x86_feature == (11*32+ 8))
  return ((CPUID_12_EAX)*32 + (0));
 else if (x86_feature == (11*32+ 9))
  return ((CPUID_12_EAX)*32 + (1));

 return x86_feature;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 __feature_leaf(int x86_feature)
{
 return __feature_translate(x86_feature) / 32;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 __feature_bit(int x86_feature)
{
 x86_feature = __feature_translate(x86_feature);

 reverse_cpuid_check(x86_feature / 32);
 return 1 << (x86_feature & 31);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct cpuid_reg x86_feature_cpuid(unsigned int x86_feature)
{
 unsigned int x86_leaf = __feature_leaf(x86_feature);

 reverse_cpuid_check(x86_leaf);
 return reverse_cpuid[x86_leaf];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 *__cpuid_entry_get_reg(struct kvm_cpuid_entry2 *entry,
        u32 reg)
{
 switch (reg) {
 case CPUID_EAX:
  return &entry->eax;
 case CPUID_EBX:
  return &entry->ebx;
 case CPUID_ECX:
  return &entry->ecx;
 case CPUID_EDX:
  return &entry->edx;
 default:
  do { __attribute__((__noreturn__)) extern void __compiletime_assert_479(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_479(); } while (0);
  return ((void *)0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 *cpuid_entry_get_reg(struct kvm_cpuid_entry2 *entry,
      unsigned int x86_feature)
{
 const struct cpuid_reg cpuid = x86_feature_cpuid(x86_feature);

 return __cpuid_entry_get_reg(entry, cpuid.reg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 cpuid_entry_get(struct kvm_cpuid_entry2 *entry,
        unsigned int x86_feature)
{
 u32 *reg = cpuid_entry_get_reg(entry, x86_feature);

 return *reg & __feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool cpuid_entry_has(struct kvm_cpuid_entry2 *entry,
         unsigned int x86_feature)
{
 return cpuid_entry_get(entry, x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void cpuid_entry_clear(struct kvm_cpuid_entry2 *entry,
           unsigned int x86_feature)
{
 u32 *reg = cpuid_entry_get_reg(entry, x86_feature);

 *reg &= ~__feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void cpuid_entry_set(struct kvm_cpuid_entry2 *entry,
         unsigned int x86_feature)
{
 u32 *reg = cpuid_entry_get_reg(entry, x86_feature);

 *reg |= __feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void cpuid_entry_change(struct kvm_cpuid_entry2 *entry,
            unsigned int x86_feature,
            bool set)
{
 u32 *reg = cpuid_entry_get_reg(entry, x86_feature);





 if (set)
  *reg |= __feature_bit(x86_feature);
 else
  *reg &= ~__feature_bit(x86_feature);
}
# 7 "./arch/x86/kvm/cpuid.h" 2




extern u32 kvm_cpu_caps[NR_KVM_CPU_CAPS] __attribute__((__section__(".data..read_mostly")));
void kvm_set_cpu_caps(void);

void kvm_update_cpuid_runtime(struct kvm_vcpu *vcpu);
void kvm_update_pv_runtime(struct kvm_vcpu *vcpu);
struct kvm_cpuid_entry2 *kvm_find_cpuid_entry(struct kvm_vcpu *vcpu,
           u32 function, u32 index);
int kvm_dev_ioctl_get_cpuid(struct kvm_cpuid2 *cpuid,
       struct kvm_cpuid_entry2 *entries,
       unsigned int type);
int kvm_vcpu_ioctl_set_cpuid(struct kvm_vcpu *vcpu,
        struct kvm_cpuid *cpuid,
        struct kvm_cpuid_entry *entries);
int kvm_vcpu_ioctl_set_cpuid2(struct kvm_vcpu *vcpu,
         struct kvm_cpuid2 *cpuid,
         struct kvm_cpuid_entry2 *entries);
int kvm_vcpu_ioctl_get_cpuid2(struct kvm_vcpu *vcpu,
         struct kvm_cpuid2 *cpuid,
         struct kvm_cpuid_entry2 *entries);
bool kvm_cpuid(struct kvm_vcpu *vcpu, u32 *eax, u32 *ebx,
        u32 *ecx, u32 *edx, bool exact_only);

int cpuid_query_maxphyaddr(struct kvm_vcpu *vcpu);
u64 kvm_vcpu_reserved_gpa_bits_raw(struct kvm_vcpu *vcpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpuid_maxphyaddr(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.maxphyaddr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_is_legal_gpa(struct kvm_vcpu *vcpu, gpa_t gpa)
{
 return !(gpa & vcpu->arch.reserved_gpa_bits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_is_illegal_gpa(struct kvm_vcpu *vcpu, gpa_t gpa)
{
 return !kvm_vcpu_is_legal_gpa(vcpu, gpa);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_is_legal_aligned_gpa(struct kvm_vcpu *vcpu,
       gpa_t gpa, gpa_t alignment)
{
 return (((gpa) & ((typeof(gpa))(alignment) - 1)) == 0) && kvm_vcpu_is_legal_gpa(vcpu, gpa);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool page_address_valid(struct kvm_vcpu *vcpu, gpa_t gpa)
{
 return kvm_vcpu_is_legal_aligned_gpa(vcpu, gpa, ((1UL) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void cpuid_entry_override(struct kvm_cpuid_entry2 *entry,
       unsigned int leaf)
{
 u32 *reg = cpuid_entry_get_reg(entry, leaf * 32);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_480(void) __attribute__((__error__("BUILD_BUG_ON failed: " "leaf >= ARRAY_SIZE(kvm_cpu_caps)"))); if (!(!(leaf >= (sizeof(kvm_cpu_caps) / sizeof((kvm_cpu_caps)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((kvm_cpu_caps)), typeof(&(kvm_cpu_caps)[0])))); }))))))) __compiletime_assert_480(); } while (0);
 *reg = kvm_cpu_caps[leaf];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 *guest_cpuid_get_register(struct kvm_vcpu *vcpu,
           unsigned int x86_feature)
{
 const struct cpuid_reg cpuid = x86_feature_cpuid(x86_feature);
 struct kvm_cpuid_entry2 *entry;

 entry = kvm_find_cpuid_entry(vcpu, cpuid.function, cpuid.index);
 if (!entry)
  return ((void *)0);

 return __cpuid_entry_get_reg(entry, cpuid.reg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool guest_cpuid_has(struct kvm_vcpu *vcpu,
         unsigned int x86_feature)
{
 u32 *reg;

 reg = guest_cpuid_get_register(vcpu, x86_feature);
 if (!reg)
  return false;

 return *reg & __feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void guest_cpuid_clear(struct kvm_vcpu *vcpu,
           unsigned int x86_feature)
{
 u32 *reg;

 reg = guest_cpuid_get_register(vcpu, x86_feature);
 if (reg)
  *reg &= ~__feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guest_cpuid_is_amd_or_hygon(struct kvm_vcpu *vcpu)
{
 struct kvm_cpuid_entry2 *best;

 best = kvm_find_cpuid_entry(vcpu, 0, 0);
 return best &&
        (is_guest_vendor_amd(best->ebx, best->ecx, best->edx) ||
  is_guest_vendor_hygon(best->ebx, best->ecx, best->edx));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guest_cpuid_is_intel(struct kvm_vcpu *vcpu)
{
 struct kvm_cpuid_entry2 *best;

 best = kvm_find_cpuid_entry(vcpu, 0, 0);
 return best && is_guest_vendor_intel(best->ebx, best->ecx, best->edx);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int guest_cpuid_family(struct kvm_vcpu *vcpu)
{
 struct kvm_cpuid_entry2 *best;

 best = kvm_find_cpuid_entry(vcpu, 0x1, 0);
 if (!best)
  return -1;

 return x86_family(best->eax);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int guest_cpuid_model(struct kvm_vcpu *vcpu)
{
 struct kvm_cpuid_entry2 *best;

 best = kvm_find_cpuid_entry(vcpu, 0x1, 0);
 if (!best)
  return -1;

 return x86_model(best->eax);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int guest_cpuid_stepping(struct kvm_vcpu *vcpu)
{
 struct kvm_cpuid_entry2 *best;

 best = kvm_find_cpuid_entry(vcpu, 0x1, 0);
 if (!best)
  return -1;

 return x86_stepping(best->eax);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guest_has_spec_ctrl_msr(struct kvm_vcpu *vcpu)
{
 return (guest_cpuid_has(vcpu, (18*32+26)) ||
  guest_cpuid_has(vcpu, (13*32+15)) ||
  guest_cpuid_has(vcpu, (13*32+14)) ||
  guest_cpuid_has(vcpu, (13*32+24)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guest_has_pred_cmd_msr(struct kvm_vcpu *vcpu)
{
 return (guest_cpuid_has(vcpu, (18*32+26)) ||
  guest_cpuid_has(vcpu, (13*32+12)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool supports_cpuid_fault(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.msr_platform_info & ((((1ULL))) << (31));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpuid_fault_enabled(struct kvm_vcpu *vcpu)
{
 return vcpu->arch.msr_misc_features_enables &
    ((((1ULL))) << (0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_cpu_cap_clear(unsigned int x86_feature)
{
 unsigned int x86_leaf = __feature_leaf(x86_feature);

 reverse_cpuid_check(x86_leaf);
 kvm_cpu_caps[x86_leaf] &= ~__feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_cpu_cap_set(unsigned int x86_feature)
{
 unsigned int x86_leaf = __feature_leaf(x86_feature);

 reverse_cpuid_check(x86_leaf);
 kvm_cpu_caps[x86_leaf] |= __feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 kvm_cpu_cap_get(unsigned int x86_feature)
{
 unsigned int x86_leaf = __feature_leaf(x86_feature);

 reverse_cpuid_check(x86_leaf);
 return kvm_cpu_caps[x86_leaf] & __feature_bit(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool kvm_cpu_cap_has(unsigned int x86_feature)
{
 return !!kvm_cpu_cap_get(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kvm_cpu_cap_check_and_set(unsigned int x86_feature)
{
 if ((__builtin_constant_p(x86_feature) && ( (((x86_feature)>>5)==(0) && (1UL<<((x86_feature)&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((x86_feature)>>5)==(1) && (1UL<<((x86_feature)&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((x86_feature)>>5)==(2) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(3) && (1UL<<((x86_feature)&31) & ((1<<(( 3*32+20) & 31))) )) || (((x86_feature)>>5)==(4) && (1UL<<((x86_feature)&31) & (0) )) || (((x86_feature)>>5)==(5) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(6) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(7) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(8) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(9) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(10) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(11) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(12) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(13) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(14) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(15) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(16) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(17) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(18) && (1UL<<((x86_feature)&31) & 0 )) || (((x86_feature)>>5)==(19) && (1UL<<((x86_feature)&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(x86_feature, (unsigned long *)((&boot_cpu_data)->x86_capability))))
  kvm_cpu_cap_set(x86_feature);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool guest_pv_has(struct kvm_vcpu *vcpu,
      unsigned int kvm_feature)
{
 if (!vcpu->arch.pv_cpuid.enforce)
  return true;

 return vcpu->arch.pv_cpuid.features & (1u << kvm_feature);
}
# 53 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "arch/x86/kvm/vmx/evmcs.h" 1
# 12 "arch/x86/kvm/vmx/evmcs.h"
# 1 "arch/x86/kvm/vmx/vmcs.h" 1
# 16 "arch/x86/kvm/vmx/vmcs.h"
struct vmcs_hdr {
 u32 revision_id:31;
 u32 shadow_vmcs:1;
};

struct vmcs {
 struct vmcs_hdr hdr;
 u32 abort;
 char data[];
};

extern __attribute__((section(".data" ""))) __typeof__(struct vmcs *) current_vmcs;






struct vmcs_host_state {
 unsigned long cr3;
 unsigned long cr4;
 unsigned long gs_base;
 unsigned long fs_base;
 unsigned long rsp;

 u16 fs_sel, gs_sel, ldt_sel;

 u16 ds_sel, es_sel;

};

struct vmcs_controls_shadow {
 u32 vm_entry;
 u32 vm_exit;
 u32 pin;
 u32 exec;
 u32 secondary_exec;
};






struct loaded_vmcs {
 struct vmcs *vmcs;
 struct vmcs *shadow_vmcs;
 int cpu;
 bool launched;
 bool nmi_known_unmasked;
 bool hv_timer_soft_disabled;

 int soft_vnmi_blocked;
 ktime_t entry_time;
 s64 vnmi_blocked_time;
 unsigned long *msr_bitmap;
 struct list_head loaded_vmcss_on_cpu_link;
 struct vmcs_host_state host_state;
 struct vmcs_controls_shadow controls_shadow;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_intr_type(u32 intr_info, u32 type)
{
 const u32 mask = 0x80000000 | 0x700;

 return (intr_info & mask) == (0x80000000 | type);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_intr_type_n(u32 intr_info, u32 type, u8 vector)
{
 const u32 mask = 0x80000000 | 0x700 |
    0xff;

 return (intr_info & mask) == (0x80000000 | type | vector);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_exception_n(u32 intr_info, u8 vector)
{
 return is_intr_type_n(intr_info, (3 << 8), vector);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_debug(u32 intr_info)
{
 return is_exception_n(intr_info, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_breakpoint(u32 intr_info)
{
 return is_exception_n(intr_info, 3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_page_fault(u32 intr_info)
{
 return is_exception_n(intr_info, 14);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_invalid_opcode(u32 intr_info)
{
 return is_exception_n(intr_info, 6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_gp_fault(u32 intr_info)
{
 return is_exception_n(intr_info, 13);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_alignment_check(u32 intr_info)
{
 return is_exception_n(intr_info, 17);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_machine_check(u32 intr_info)
{
 return is_exception_n(intr_info, 18);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_icebp(u32 intr_info)
{
 return is_intr_type(intr_info, (5 << 8));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_nmi(u32 intr_info)
{
 return is_intr_type(intr_info, (2 << 8));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_external_intr(u32 intr_info)
{
 return is_intr_type(intr_info, (0 << 8));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_exception_with_error_code(u32 intr_info)
{
 const u32 mask = 0x80000000 | 0x800;

 return (intr_info & mask) == mask;
}

enum vmcs_field_width {
 VMCS_FIELD_WIDTH_U16 = 0,
 VMCS_FIELD_WIDTH_U64 = 1,
 VMCS_FIELD_WIDTH_U32 = 2,
 VMCS_FIELD_WIDTH_NATURAL_WIDTH = 3
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmcs_field_width(unsigned long field)
{
 if (0x1 & field)
  return VMCS_FIELD_WIDTH_U32;
 return (field >> 13) & 0x3;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmcs_field_readonly(unsigned long field)
{
 return (((field >> 10) & 0x3) == 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int vmcs_field_index(unsigned long field)
{
 return (field & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((1) > (9)) * 0l)) : (int *)8))), (1) > (9), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (1)) + 1) & (~(((0UL))) >> (64 - 1 - (9)))))) >> (1);
}
# 13 "arch/x86/kvm/vmx/evmcs.h" 2
# 1 "arch/x86/kvm/vmx/vmcs12.h" 1
# 26 "arch/x86/kvm/vmx/vmcs12.h"
typedef u64 natural_width;
struct __attribute__((__packed__)) vmcs12 {



 struct vmcs_hdr hdr;
 u32 abort;

 u32 launch_state;
 u32 padding[7];

 u64 io_bitmap_a;
 u64 io_bitmap_b;
 u64 msr_bitmap;
 u64 vm_exit_msr_store_addr;
 u64 vm_exit_msr_load_addr;
 u64 vm_entry_msr_load_addr;
 u64 tsc_offset;
 u64 virtual_apic_page_addr;
 u64 apic_access_addr;
 u64 posted_intr_desc_addr;
 u64 ept_pointer;
 u64 eoi_exit_bitmap0;
 u64 eoi_exit_bitmap1;
 u64 eoi_exit_bitmap2;
 u64 eoi_exit_bitmap3;
 u64 xss_exit_bitmap;
 u64 guest_physical_address;
 u64 vmcs_link_pointer;
 u64 guest_ia32_debugctl;
 u64 guest_ia32_pat;
 u64 guest_ia32_efer;
 u64 guest_ia32_perf_global_ctrl;
 u64 guest_pdptr0;
 u64 guest_pdptr1;
 u64 guest_pdptr2;
 u64 guest_pdptr3;
 u64 guest_bndcfgs;
 u64 host_ia32_pat;
 u64 host_ia32_efer;
 u64 host_ia32_perf_global_ctrl;
 u64 vmread_bitmap;
 u64 vmwrite_bitmap;
 u64 vm_function_control;
 u64 eptp_list_address;
 u64 pml_address;
 u64 encls_exiting_bitmap;
 u64 tsc_multiplier;
 u64 padding64[1];






 natural_width cr0_guest_host_mask;
 natural_width cr4_guest_host_mask;
 natural_width cr0_read_shadow;
 natural_width cr4_read_shadow;
 natural_width dead_space[4];
 natural_width exit_qualification;
 natural_width guest_linear_address;
 natural_width guest_cr0;
 natural_width guest_cr3;
 natural_width guest_cr4;
 natural_width guest_es_base;
 natural_width guest_cs_base;
 natural_width guest_ss_base;
 natural_width guest_ds_base;
 natural_width guest_fs_base;
 natural_width guest_gs_base;
 natural_width guest_ldtr_base;
 natural_width guest_tr_base;
 natural_width guest_gdtr_base;
 natural_width guest_idtr_base;
 natural_width guest_dr7;
 natural_width guest_rsp;
 natural_width guest_rip;
 natural_width guest_rflags;
 natural_width guest_pending_dbg_exceptions;
 natural_width guest_sysenter_esp;
 natural_width guest_sysenter_eip;
 natural_width host_cr0;
 natural_width host_cr3;
 natural_width host_cr4;
 natural_width host_fs_base;
 natural_width host_gs_base;
 natural_width host_tr_base;
 natural_width host_gdtr_base;
 natural_width host_idtr_base;
 natural_width host_ia32_sysenter_esp;
 natural_width host_ia32_sysenter_eip;
 natural_width host_rsp;
 natural_width host_rip;
 natural_width paddingl[8];
 u32 pin_based_vm_exec_control;
 u32 cpu_based_vm_exec_control;
 u32 exception_bitmap;
 u32 page_fault_error_code_mask;
 u32 page_fault_error_code_match;
 u32 cr3_target_count;
 u32 vm_exit_controls;
 u32 vm_exit_msr_store_count;
 u32 vm_exit_msr_load_count;
 u32 vm_entry_controls;
 u32 vm_entry_msr_load_count;
 u32 vm_entry_intr_info_field;
 u32 vm_entry_exception_error_code;
 u32 vm_entry_instruction_len;
 u32 tpr_threshold;
 u32 secondary_vm_exec_control;
 u32 vm_instruction_error;
 u32 vm_exit_reason;
 u32 vm_exit_intr_info;
 u32 vm_exit_intr_error_code;
 u32 idt_vectoring_info_field;
 u32 idt_vectoring_error_code;
 u32 vm_exit_instruction_len;
 u32 vmx_instruction_info;
 u32 guest_es_limit;
 u32 guest_cs_limit;
 u32 guest_ss_limit;
 u32 guest_ds_limit;
 u32 guest_fs_limit;
 u32 guest_gs_limit;
 u32 guest_ldtr_limit;
 u32 guest_tr_limit;
 u32 guest_gdtr_limit;
 u32 guest_idtr_limit;
 u32 guest_es_ar_bytes;
 u32 guest_cs_ar_bytes;
 u32 guest_ss_ar_bytes;
 u32 guest_ds_ar_bytes;
 u32 guest_fs_ar_bytes;
 u32 guest_gs_ar_bytes;
 u32 guest_ldtr_ar_bytes;
 u32 guest_tr_ar_bytes;
 u32 guest_interruptibility_info;
 u32 guest_activity_state;
 u32 guest_sysenter_cs;
 u32 host_ia32_sysenter_cs;
 u32 vmx_preemption_timer_value;
 u32 padding32[7];
 u16 virtual_processor_id;
 u16 posted_intr_nv;
 u16 guest_es_selector;
 u16 guest_cs_selector;
 u16 guest_ss_selector;
 u16 guest_ds_selector;
 u16 guest_fs_selector;
 u16 guest_gs_selector;
 u16 guest_ldtr_selector;
 u16 guest_tr_selector;
 u16 guest_intr_status;
 u16 host_es_selector;
 u16 host_cs_selector;
 u16 host_ss_selector;
 u16 host_ds_selector;
 u16 host_fs_selector;
 u16 host_gs_selector;
 u16 host_tr_selector;
 u16 guest_pml_index;
};
# 215 "arch/x86/kvm/vmx/vmcs12.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_check_vmcs12_offsets(void)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_481(void) __attribute__((__error__("Offset of " "hdr" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, hdr) != (0)))) __compiletime_assert_481(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_482(void) __attribute__((__error__("Offset of " "abort" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, abort) != (4)))) __compiletime_assert_482(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_483(void) __attribute__((__error__("Offset of " "launch_state" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, launch_state) != (8)))) __compiletime_assert_483(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_484(void) __attribute__((__error__("Offset of " "io_bitmap_a" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, io_bitmap_a) != (40)))) __compiletime_assert_484(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_485(void) __attribute__((__error__("Offset of " "io_bitmap_b" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, io_bitmap_b) != (48)))) __compiletime_assert_485(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_486(void) __attribute__((__error__("Offset of " "msr_bitmap" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, msr_bitmap) != (56)))) __compiletime_assert_486(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_487(void) __attribute__((__error__("Offset of " "vm_exit_msr_store_addr" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_msr_store_addr) != (64)))) __compiletime_assert_487(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_488(void) __attribute__((__error__("Offset of " "vm_exit_msr_load_addr" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_msr_load_addr) != (72)))) __compiletime_assert_488(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_489(void) __attribute__((__error__("Offset of " "vm_entry_msr_load_addr" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_entry_msr_load_addr) != (80)))) __compiletime_assert_489(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_490(void) __attribute__((__error__("Offset of " "tsc_offset" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, tsc_offset) != (88)))) __compiletime_assert_490(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_491(void) __attribute__((__error__("Offset of " "virtual_apic_page_addr" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, virtual_apic_page_addr) != (96)))) __compiletime_assert_491(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_492(void) __attribute__((__error__("Offset of " "apic_access_addr" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, apic_access_addr) != (104)))) __compiletime_assert_492(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_493(void) __attribute__((__error__("Offset of " "posted_intr_desc_addr" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, posted_intr_desc_addr) != (112)))) __compiletime_assert_493(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_494(void) __attribute__((__error__("Offset of " "ept_pointer" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, ept_pointer) != (120)))) __compiletime_assert_494(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_495(void) __attribute__((__error__("Offset of " "eoi_exit_bitmap0" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, eoi_exit_bitmap0) != (128)))) __compiletime_assert_495(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_496(void) __attribute__((__error__("Offset of " "eoi_exit_bitmap1" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, eoi_exit_bitmap1) != (136)))) __compiletime_assert_496(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_497(void) __attribute__((__error__("Offset of " "eoi_exit_bitmap2" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, eoi_exit_bitmap2) != (144)))) __compiletime_assert_497(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_498(void) __attribute__((__error__("Offset of " "eoi_exit_bitmap3" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, eoi_exit_bitmap3) != (152)))) __compiletime_assert_498(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_499(void) __attribute__((__error__("Offset of " "xss_exit_bitmap" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, xss_exit_bitmap) != (160)))) __compiletime_assert_499(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_500(void) __attribute__((__error__("Offset of " "guest_physical_address" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_physical_address) != (168)))) __compiletime_assert_500(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_501(void) __attribute__((__error__("Offset of " "vmcs_link_pointer" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vmcs_link_pointer) != (176)))) __compiletime_assert_501(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_502(void) __attribute__((__error__("Offset of " "guest_ia32_debugctl" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ia32_debugctl) != (184)))) __compiletime_assert_502(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_503(void) __attribute__((__error__("Offset of " "guest_ia32_pat" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ia32_pat) != (192)))) __compiletime_assert_503(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_504(void) __attribute__((__error__("Offset of " "guest_ia32_efer" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ia32_efer) != (200)))) __compiletime_assert_504(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_505(void) __attribute__((__error__("Offset of " "guest_ia32_perf_global_ctrl" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ia32_perf_global_ctrl) != (208)))) __compiletime_assert_505(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_506(void) __attribute__((__error__("Offset of " "guest_pdptr0" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_pdptr0) != (216)))) __compiletime_assert_506(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_507(void) __attribute__((__error__("Offset of " "guest_pdptr1" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_pdptr1) != (224)))) __compiletime_assert_507(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_508(void) __attribute__((__error__("Offset of " "guest_pdptr2" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_pdptr2) != (232)))) __compiletime_assert_508(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_509(void) __attribute__((__error__("Offset of " "guest_pdptr3" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_pdptr3) != (240)))) __compiletime_assert_509(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_510(void) __attribute__((__error__("Offset of " "guest_bndcfgs" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_bndcfgs) != (248)))) __compiletime_assert_510(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_511(void) __attribute__((__error__("Offset of " "host_ia32_pat" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ia32_pat) != (256)))) __compiletime_assert_511(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_512(void) __attribute__((__error__("Offset of " "host_ia32_efer" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ia32_efer) != (264)))) __compiletime_assert_512(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_513(void) __attribute__((__error__("Offset of " "host_ia32_perf_global_ctrl" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ia32_perf_global_ctrl) != (272)))) __compiletime_assert_513(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_514(void) __attribute__((__error__("Offset of " "vmread_bitmap" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vmread_bitmap) != (280)))) __compiletime_assert_514(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_515(void) __attribute__((__error__("Offset of " "vmwrite_bitmap" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vmwrite_bitmap) != (288)))) __compiletime_assert_515(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_516(void) __attribute__((__error__("Offset of " "vm_function_control" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_function_control) != (296)))) __compiletime_assert_516(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_517(void) __attribute__((__error__("Offset of " "eptp_list_address" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, eptp_list_address) != (304)))) __compiletime_assert_517(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_518(void) __attribute__((__error__("Offset of " "pml_address" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, pml_address) != (312)))) __compiletime_assert_518(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_519(void) __attribute__((__error__("Offset of " "encls_exiting_bitmap" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, encls_exiting_bitmap) != (320)))) __compiletime_assert_519(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_520(void) __attribute__((__error__("Offset of " "tsc_multiplier" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, tsc_multiplier) != (328)))) __compiletime_assert_520(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_521(void) __attribute__((__error__("Offset of " "cr0_guest_host_mask" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, cr0_guest_host_mask) != (344)))) __compiletime_assert_521(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_522(void) __attribute__((__error__("Offset of " "cr4_guest_host_mask" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, cr4_guest_host_mask) != (352)))) __compiletime_assert_522(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_523(void) __attribute__((__error__("Offset of " "cr0_read_shadow" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, cr0_read_shadow) != (360)))) __compiletime_assert_523(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_524(void) __attribute__((__error__("Offset of " "cr4_read_shadow" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, cr4_read_shadow) != (368)))) __compiletime_assert_524(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_525(void) __attribute__((__error__("Offset of " "dead_space" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, dead_space) != (376)))) __compiletime_assert_525(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_526(void) __attribute__((__error__("Offset of " "exit_qualification" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, exit_qualification) != (408)))) __compiletime_assert_526(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_527(void) __attribute__((__error__("Offset of " "guest_linear_address" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_linear_address) != (416)))) __compiletime_assert_527(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_528(void) __attribute__((__error__("Offset of " "guest_cr0" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_cr0) != (424)))) __compiletime_assert_528(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_529(void) __attribute__((__error__("Offset of " "guest_cr3" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_cr3) != (432)))) __compiletime_assert_529(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_530(void) __attribute__((__error__("Offset of " "guest_cr4" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_cr4) != (440)))) __compiletime_assert_530(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_531(void) __attribute__((__error__("Offset of " "guest_es_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_es_base) != (448)))) __compiletime_assert_531(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_532(void) __attribute__((__error__("Offset of " "guest_cs_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_cs_base) != (456)))) __compiletime_assert_532(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_533(void) __attribute__((__error__("Offset of " "guest_ss_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ss_base) != (464)))) __compiletime_assert_533(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_534(void) __attribute__((__error__("Offset of " "guest_ds_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ds_base) != (472)))) __compiletime_assert_534(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_535(void) __attribute__((__error__("Offset of " "guest_fs_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_fs_base) != (480)))) __compiletime_assert_535(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_536(void) __attribute__((__error__("Offset of " "guest_gs_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_gs_base) != (488)))) __compiletime_assert_536(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_537(void) __attribute__((__error__("Offset of " "guest_ldtr_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ldtr_base) != (496)))) __compiletime_assert_537(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_538(void) __attribute__((__error__("Offset of " "guest_tr_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_tr_base) != (504)))) __compiletime_assert_538(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_539(void) __attribute__((__error__("Offset of " "guest_gdtr_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_gdtr_base) != (512)))) __compiletime_assert_539(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_540(void) __attribute__((__error__("Offset of " "guest_idtr_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_idtr_base) != (520)))) __compiletime_assert_540(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_541(void) __attribute__((__error__("Offset of " "guest_dr7" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_dr7) != (528)))) __compiletime_assert_541(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_542(void) __attribute__((__error__("Offset of " "guest_rsp" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_rsp) != (536)))) __compiletime_assert_542(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_543(void) __attribute__((__error__("Offset of " "guest_rip" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_rip) != (544)))) __compiletime_assert_543(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_544(void) __attribute__((__error__("Offset of " "guest_rflags" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_rflags) != (552)))) __compiletime_assert_544(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_545(void) __attribute__((__error__("Offset of " "guest_pending_dbg_exceptions" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_pending_dbg_exceptions) != (560)))) __compiletime_assert_545(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_546(void) __attribute__((__error__("Offset of " "guest_sysenter_esp" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_sysenter_esp) != (568)))) __compiletime_assert_546(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_547(void) __attribute__((__error__("Offset of " "guest_sysenter_eip" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_sysenter_eip) != (576)))) __compiletime_assert_547(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_548(void) __attribute__((__error__("Offset of " "host_cr0" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_cr0) != (584)))) __compiletime_assert_548(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_549(void) __attribute__((__error__("Offset of " "host_cr3" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_cr3) != (592)))) __compiletime_assert_549(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_550(void) __attribute__((__error__("Offset of " "host_cr4" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_cr4) != (600)))) __compiletime_assert_550(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_551(void) __attribute__((__error__("Offset of " "host_fs_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_fs_base) != (608)))) __compiletime_assert_551(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_552(void) __attribute__((__error__("Offset of " "host_gs_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_gs_base) != (616)))) __compiletime_assert_552(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_553(void) __attribute__((__error__("Offset of " "host_tr_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_tr_base) != (624)))) __compiletime_assert_553(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_554(void) __attribute__((__error__("Offset of " "host_gdtr_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_gdtr_base) != (632)))) __compiletime_assert_554(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_555(void) __attribute__((__error__("Offset of " "host_idtr_base" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_idtr_base) != (640)))) __compiletime_assert_555(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_556(void) __attribute__((__error__("Offset of " "host_ia32_sysenter_esp" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ia32_sysenter_esp) != (648)))) __compiletime_assert_556(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_557(void) __attribute__((__error__("Offset of " "host_ia32_sysenter_eip" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ia32_sysenter_eip) != (656)))) __compiletime_assert_557(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_558(void) __attribute__((__error__("Offset of " "host_rsp" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_rsp) != (664)))) __compiletime_assert_558(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_559(void) __attribute__((__error__("Offset of " "host_rip" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_rip) != (672)))) __compiletime_assert_559(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_560(void) __attribute__((__error__("Offset of " "pin_based_vm_exec_control" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, pin_based_vm_exec_control) != (744)))) __compiletime_assert_560(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_561(void) __attribute__((__error__("Offset of " "cpu_based_vm_exec_control" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, cpu_based_vm_exec_control) != (748)))) __compiletime_assert_561(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_562(void) __attribute__((__error__("Offset of " "exception_bitmap" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, exception_bitmap) != (752)))) __compiletime_assert_562(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_563(void) __attribute__((__error__("Offset of " "page_fault_error_code_mask" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, page_fault_error_code_mask) != (756)))) __compiletime_assert_563(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_564(void) __attribute__((__error__("Offset of " "page_fault_error_code_match" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, page_fault_error_code_match) != (760)))) __compiletime_assert_564(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_565(void) __attribute__((__error__("Offset of " "cr3_target_count" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, cr3_target_count) != (764)))) __compiletime_assert_565(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_566(void) __attribute__((__error__("Offset of " "vm_exit_controls" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_controls) != (768)))) __compiletime_assert_566(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_567(void) __attribute__((__error__("Offset of " "vm_exit_msr_store_count" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_msr_store_count) != (772)))) __compiletime_assert_567(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_568(void) __attribute__((__error__("Offset of " "vm_exit_msr_load_count" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_msr_load_count) != (776)))) __compiletime_assert_568(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_569(void) __attribute__((__error__("Offset of " "vm_entry_controls" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_entry_controls) != (780)))) __compiletime_assert_569(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_570(void) __attribute__((__error__("Offset of " "vm_entry_msr_load_count" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_entry_msr_load_count) != (784)))) __compiletime_assert_570(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_571(void) __attribute__((__error__("Offset of " "vm_entry_intr_info_field" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_entry_intr_info_field) != (788)))) __compiletime_assert_571(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_572(void) __attribute__((__error__("Offset of " "vm_entry_exception_error_code" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_entry_exception_error_code) != (792)))) __compiletime_assert_572(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_573(void) __attribute__((__error__("Offset of " "vm_entry_instruction_len" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_entry_instruction_len) != (796)))) __compiletime_assert_573(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_574(void) __attribute__((__error__("Offset of " "tpr_threshold" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, tpr_threshold) != (800)))) __compiletime_assert_574(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_575(void) __attribute__((__error__("Offset of " "secondary_vm_exec_control" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, secondary_vm_exec_control) != (804)))) __compiletime_assert_575(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_576(void) __attribute__((__error__("Offset of " "vm_instruction_error" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_instruction_error) != (808)))) __compiletime_assert_576(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_577(void) __attribute__((__error__("Offset of " "vm_exit_reason" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_reason) != (812)))) __compiletime_assert_577(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_578(void) __attribute__((__error__("Offset of " "vm_exit_intr_info" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_intr_info) != (816)))) __compiletime_assert_578(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_579(void) __attribute__((__error__("Offset of " "vm_exit_intr_error_code" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_intr_error_code) != (820)))) __compiletime_assert_579(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_580(void) __attribute__((__error__("Offset of " "idt_vectoring_info_field" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, idt_vectoring_info_field) != (824)))) __compiletime_assert_580(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_581(void) __attribute__((__error__("Offset of " "idt_vectoring_error_code" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, idt_vectoring_error_code) != (828)))) __compiletime_assert_581(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_582(void) __attribute__((__error__("Offset of " "vm_exit_instruction_len" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vm_exit_instruction_len) != (832)))) __compiletime_assert_582(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_583(void) __attribute__((__error__("Offset of " "vmx_instruction_info" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vmx_instruction_info) != (836)))) __compiletime_assert_583(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_584(void) __attribute__((__error__("Offset of " "guest_es_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_es_limit) != (840)))) __compiletime_assert_584(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_585(void) __attribute__((__error__("Offset of " "guest_cs_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_cs_limit) != (844)))) __compiletime_assert_585(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_586(void) __attribute__((__error__("Offset of " "guest_ss_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ss_limit) != (848)))) __compiletime_assert_586(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_587(void) __attribute__((__error__("Offset of " "guest_ds_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ds_limit) != (852)))) __compiletime_assert_587(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_588(void) __attribute__((__error__("Offset of " "guest_fs_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_fs_limit) != (856)))) __compiletime_assert_588(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_589(void) __attribute__((__error__("Offset of " "guest_gs_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_gs_limit) != (860)))) __compiletime_assert_589(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_590(void) __attribute__((__error__("Offset of " "guest_ldtr_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ldtr_limit) != (864)))) __compiletime_assert_590(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_591(void) __attribute__((__error__("Offset of " "guest_tr_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_tr_limit) != (868)))) __compiletime_assert_591(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_592(void) __attribute__((__error__("Offset of " "guest_gdtr_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_gdtr_limit) != (872)))) __compiletime_assert_592(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_593(void) __attribute__((__error__("Offset of " "guest_idtr_limit" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_idtr_limit) != (876)))) __compiletime_assert_593(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_594(void) __attribute__((__error__("Offset of " "guest_es_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_es_ar_bytes) != (880)))) __compiletime_assert_594(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_595(void) __attribute__((__error__("Offset of " "guest_cs_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_cs_ar_bytes) != (884)))) __compiletime_assert_595(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_596(void) __attribute__((__error__("Offset of " "guest_ss_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ss_ar_bytes) != (888)))) __compiletime_assert_596(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_597(void) __attribute__((__error__("Offset of " "guest_ds_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ds_ar_bytes) != (892)))) __compiletime_assert_597(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_598(void) __attribute__((__error__("Offset of " "guest_fs_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_fs_ar_bytes) != (896)))) __compiletime_assert_598(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_599(void) __attribute__((__error__("Offset of " "guest_gs_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_gs_ar_bytes) != (900)))) __compiletime_assert_599(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_600(void) __attribute__((__error__("Offset of " "guest_ldtr_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ldtr_ar_bytes) != (904)))) __compiletime_assert_600(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_601(void) __attribute__((__error__("Offset of " "guest_tr_ar_bytes" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_tr_ar_bytes) != (908)))) __compiletime_assert_601(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_602(void) __attribute__((__error__("Offset of " "guest_interruptibility_info" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_interruptibility_info) != (912)))) __compiletime_assert_602(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_603(void) __attribute__((__error__("Offset of " "guest_activity_state" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_activity_state) != (916)))) __compiletime_assert_603(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_604(void) __attribute__((__error__("Offset of " "guest_sysenter_cs" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_sysenter_cs) != (920)))) __compiletime_assert_604(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_605(void) __attribute__((__error__("Offset of " "host_ia32_sysenter_cs" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ia32_sysenter_cs) != (924)))) __compiletime_assert_605(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_606(void) __attribute__((__error__("Offset of " "vmx_preemption_timer_value" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, vmx_preemption_timer_value) != (928)))) __compiletime_assert_606(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_607(void) __attribute__((__error__("Offset of " "virtual_processor_id" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, virtual_processor_id) != (960)))) __compiletime_assert_607(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_608(void) __attribute__((__error__("Offset of " "posted_intr_nv" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, posted_intr_nv) != (962)))) __compiletime_assert_608(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_609(void) __attribute__((__error__("Offset of " "guest_es_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_es_selector) != (964)))) __compiletime_assert_609(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_610(void) __attribute__((__error__("Offset of " "guest_cs_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_cs_selector) != (966)))) __compiletime_assert_610(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_611(void) __attribute__((__error__("Offset of " "guest_ss_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ss_selector) != (968)))) __compiletime_assert_611(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_612(void) __attribute__((__error__("Offset of " "guest_ds_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ds_selector) != (970)))) __compiletime_assert_612(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_613(void) __attribute__((__error__("Offset of " "guest_fs_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_fs_selector) != (972)))) __compiletime_assert_613(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_614(void) __attribute__((__error__("Offset of " "guest_gs_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_gs_selector) != (974)))) __compiletime_assert_614(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_615(void) __attribute__((__error__("Offset of " "guest_ldtr_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_ldtr_selector) != (976)))) __compiletime_assert_615(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_616(void) __attribute__((__error__("Offset of " "guest_tr_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_tr_selector) != (978)))) __compiletime_assert_616(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_617(void) __attribute__((__error__("Offset of " "guest_intr_status" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_intr_status) != (980)))) __compiletime_assert_617(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_618(void) __attribute__((__error__("Offset of " "host_es_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_es_selector) != (982)))) __compiletime_assert_618(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_619(void) __attribute__((__error__("Offset of " "host_cs_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_cs_selector) != (984)))) __compiletime_assert_619(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_620(void) __attribute__((__error__("Offset of " "host_ss_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ss_selector) != (986)))) __compiletime_assert_620(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_621(void) __attribute__((__error__("Offset of " "host_ds_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_ds_selector) != (988)))) __compiletime_assert_621(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_622(void) __attribute__((__error__("Offset of " "host_fs_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_fs_selector) != (990)))) __compiletime_assert_622(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_623(void) __attribute__((__error__("Offset of " "host_gs_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_gs_selector) != (992)))) __compiletime_assert_623(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_624(void) __attribute__((__error__("Offset of " "host_tr_selector" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, host_tr_selector) != (994)))) __compiletime_assert_624(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_625(void) __attribute__((__error__("Offset of " "guest_pml_index" " in struct vmcs12 has changed."))); if (!(!(__builtin_offsetof(struct vmcs12, guest_pml_index) != (996)))) __compiletime_assert_625(); } while (0);
}

extern const unsigned short vmcs_field_to_offset_table[];
extern const unsigned int nr_vmcs12_fields;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) short vmcs_field_to_offset(unsigned long field)
{
 unsigned short offset;
 unsigned int index;

 if (field >> 15)
  return -2;

 index = ((u16)(((u16)(field) << (6)) | ((u16)(field) >> (16 - (6)))));
 if (index >= nr_vmcs12_fields)
  return -2;

 index = ({ typeof(index) _i = (index); typeof(nr_vmcs12_fields) _s = (nr_vmcs12_fields); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_626(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_626(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_627(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_627(); } while (0); (typeof(_i)) (_i & _mask); });
 offset = vmcs_field_to_offset_table[index];
 if (offset == 0)
  return -2;
 return offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 vmcs12_read_any(struct vmcs12 *vmcs12, unsigned long field,
      u16 offset)
{
 char *p = (char *)vmcs12 + offset;

 switch (vmcs_field_width(field)) {
 case VMCS_FIELD_WIDTH_NATURAL_WIDTH:
  return *((natural_width *)p);
 case VMCS_FIELD_WIDTH_U16:
  return *((u16 *)p);
 case VMCS_FIELD_WIDTH_U32:
  return *((u32 *)p);
 case VMCS_FIELD_WIDTH_U64:
  return *((u64 *)p);
 default:
  ({ int __ret_warn_on = !!(1); __builtin_expect(!!(__ret_warn_on), 0); });
  return -1;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmcs12_write_any(struct vmcs12 *vmcs12, unsigned long field,
        u16 offset, u64 field_value)
{
 char *p = (char *)vmcs12 + offset;

 switch (vmcs_field_width(field)) {
 case VMCS_FIELD_WIDTH_U16:
  *(u16 *)p = field_value;
  break;
 case VMCS_FIELD_WIDTH_U32:
  *(u32 *)p = field_value;
  break;
 case VMCS_FIELD_WIDTH_U64:
  *(u64 *)p = field_value;
  break;
 case VMCS_FIELD_WIDTH_NATURAL_WIDTH:
  *(natural_width *)p = field_value;
  break;
 default:
  ({ int __ret_warn_on = !!(1); __builtin_expect(!!(__ret_warn_on), 0); });
  break;
 }
}
# 14 "arch/x86/kvm/vmx/evmcs.h" 2

struct vmcs_config;

extern struct static_key_false enable_evmcs;
# 186 "arch/x86/kvm/vmx/evmcs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void evmcs_write64(unsigned long field, u64 value) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void evmcs_write32(unsigned long field, u32 value) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void evmcs_write16(unsigned long field, u16 value) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 evmcs_read64(unsigned long field) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 evmcs_read32(unsigned long field) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 evmcs_read16(unsigned long field) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void evmcs_load(u64 phys_addr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void evmcs_touch_msr_bitmap(void) {}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool evmptr_is_valid(u64 evmptr)
{
 return evmptr != (-1ULL) && evmptr != (-2ULL);
}

enum nested_evmptrld_status {
 EVMPTRLD_DISABLED,
 EVMPTRLD_SUCCEEDED,
 EVMPTRLD_VMFAIL,
 EVMPTRLD_ERROR,
};

bool nested_enlightened_vmentry(struct kvm_vcpu *vcpu, u64 *evmcs_gpa);
uint16_t nested_get_evmcs_version(struct kvm_vcpu *vcpu);
int nested_enable_evmcs(struct kvm_vcpu *vcpu,
   uint16_t *vmcs_version);
void nested_evmcs_filter_control_msr(u32 msr_index, u64 *pdata);
int nested_evmcs_check_controls(struct vmcs12 *vmcs12);
# 54 "arch/x86/kvm/vmx/vmx.c" 2

# 1 "./arch/x86/kvm/kvm_onhyperv.h" 1
# 27 "./arch/x86/kvm/kvm_onhyperv.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hv_track_root_tdp(struct kvm_vcpu *vcpu, hpa_t root_tdp)
{
}
# 56 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/kvm/irq.h" 1
# 25 "./arch/x86/kvm/irq.h"
struct kvm;
struct kvm_vcpu;

struct kvm_kpic_state {
 u8 last_irr;
 u8 irr;
 u8 imr;
 u8 isr;
 u8 priority_add;
 u8 irq_base;
 u8 read_reg_select;
 u8 poll;
 u8 special_mask;
 u8 init_state;
 u8 auto_eoi;
 u8 rotate_on_auto_eoi;
 u8 special_fully_nested_mode;
 u8 init4;
 u8 elcr;
 u8 elcr_mask;
 u8 isr_ack;
 struct kvm_pic *pics_state;
};

struct kvm_pic {
 spinlock_t lock;
 bool wakeup_needed;
 unsigned pending_acks;
 struct kvm *kvm;
 struct kvm_kpic_state pics[2];
 int output;
 struct kvm_io_device dev_master;
 struct kvm_io_device dev_slave;
 struct kvm_io_device dev_elcr;
 void (*ack_notifier)(void *opaque, int irq);
 unsigned long irq_states[16];
};

int kvm_pic_init(struct kvm *kvm);
void kvm_pic_destroy(struct kvm *kvm);
int kvm_pic_read_irq(struct kvm *kvm);
void kvm_pic_update_irq(struct kvm_pic *s);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irqchip_split(struct kvm *kvm)
{
 int mode = kvm->arch.irqchip_mode;


 __asm__ __volatile__("": : :"memory");
 return mode == KVM_IRQCHIP_SPLIT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irqchip_kernel(struct kvm *kvm)
{
 int mode = kvm->arch.irqchip_mode;


 __asm__ __volatile__("": : :"memory");
 return mode == KVM_IRQCHIP_KERNEL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pic_in_kernel(struct kvm *kvm)
{
 return irqchip_kernel(kvm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irqchip_in_kernel(struct kvm *kvm)
{
 int mode = kvm->arch.irqchip_mode;


 __asm__ __volatile__("": : :"memory");
 return mode != KVM_IRQCHIP_NONE;
}

void kvm_inject_pending_timer_irqs(struct kvm_vcpu *vcpu);
void kvm_inject_apic_timer_irqs(struct kvm_vcpu *vcpu);
void kvm_apic_nmi_wd_deliver(struct kvm_vcpu *vcpu);
void __kvm_migrate_apic_timer(struct kvm_vcpu *vcpu);
void __kvm_migrate_pit_timer(struct kvm_vcpu *vcpu);
void __kvm_migrate_timers(struct kvm_vcpu *vcpu);

int apic_has_pending_timer(struct kvm_vcpu *vcpu);

int kvm_setup_default_irq_routing(struct kvm *kvm);
int kvm_setup_empty_irq_routing(struct kvm *kvm);
int kvm_irq_delivery_to_apic(struct kvm *kvm, struct kvm_lapic *src,
        struct kvm_lapic_irq *irq,
        struct dest_map *dest_map);
# 57 "arch/x86/kvm/vmx/vmx.c" 2


# 1 "./arch/x86/kvm/mmu.h" 1
# 52 "./arch/x86/kvm/mmu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u64 rsvd_bits(int s, int e)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_628(void) __attribute__((__error__("BUILD_BUG_ON failed: " "__builtin_constant_p(e) && __builtin_constant_p(s) && e < s"))); if (!(!(__builtin_constant_p(e) && __builtin_constant_p(s) && e < s))) __compiletime_assert_628(); } while (0);

 if (__builtin_constant_p(e))
  do { __attribute__((__noreturn__)) extern void __compiletime_assert_629(void) __attribute__((__error__("BUILD_BUG_ON failed: " "e > 63"))); if (!(!(e > 63))) __compiletime_assert_629(); } while (0);
 else
  e &= 63;

 if (e < s)
  return 0;

 return ((2ULL << (e - s)) - 1) << s;
}

void kvm_mmu_set_mmio_spte_mask(u64 mmio_value, u64 mmio_mask, u64 access_mask);
void kvm_mmu_set_ept_masks(bool has_ad_bits, bool has_exec_only);

void kvm_init_mmu(struct kvm_vcpu *vcpu);
void kvm_init_shadow_npt_mmu(struct kvm_vcpu *vcpu, unsigned long cr0,
        unsigned long cr4, u64 efer, gpa_t nested_cr3);
void kvm_init_shadow_ept_mmu(struct kvm_vcpu *vcpu, bool execonly,
        bool accessed_dirty, gpa_t new_eptp);
bool kvm_can_do_async_pf(struct kvm_vcpu *vcpu);
int kvm_handle_page_fault(struct kvm_vcpu *vcpu, u64 error_code,
    u64 fault_address, char *insn, int insn_len);

int kvm_mmu_load(struct kvm_vcpu *vcpu);
void kvm_mmu_unload(struct kvm_vcpu *vcpu);
void kvm_mmu_sync_roots(struct kvm_vcpu *vcpu);
void kvm_mmu_sync_prev_roots(struct kvm_vcpu *vcpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_mmu_reload(struct kvm_vcpu *vcpu)
{
 if (__builtin_expect(!!(vcpu->arch.mmu->root_hpa != (~(hpa_t)0)), 1))
  return 0;

 return kvm_mmu_load(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kvm_get_pcid(struct kvm_vcpu *vcpu, gpa_t cr3)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_630(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(X86_CR3_PCID_MASK & PAGE_MASK) != 0"))); if (!(!(((((1UL << 12) - 1UL)) & (~(((1UL) << 12)-1))) != 0))) __compiletime_assert_630(); } while (0);

 return kvm_read_cr4_bits(vcpu, (((1UL)) << (17)))
        ? cr3 & (((1UL << 12) - 1UL))
        : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kvm_get_active_pcid(struct kvm_vcpu *vcpu)
{
 return kvm_get_pcid(vcpu, kvm_read_cr3(vcpu));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_mmu_load_pgd(struct kvm_vcpu *vcpu)
{
 u64 root_hpa = vcpu->arch.mmu->root_hpa;

 if (!((root_hpa) != (~(hpa_t)0)))
  return;

 ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_load_mmu_pgd631 = (void *)&__SCK__kvm_x86_load_mmu_pgd;; (&__SCT__kvm_x86_load_mmu_pgd); })(vcpu, root_hpa,
       vcpu->arch.mmu->shadow_root_level);
}

struct kvm_page_fault {

 const gpa_t addr;
 const u32 error_code;
 const bool prefetch;


 const bool exec;
 const bool write;
 const bool present;
 const bool rsvd;
 const bool user;


 const bool is_tdp;
 const bool nx_huge_page_workaround_enabled;





 bool huge_page_disallowed;





 u8 max_level;





 u8 req_level;





 u8 goal_level;


 gfn_t gfn;


 struct kvm_memory_slot *slot;


 kvm_pfn_t pfn;
 hva_t hva;
 bool map_writable;
};

int kvm_tdp_page_fault(struct kvm_vcpu *vcpu, struct kvm_page_fault *fault);

extern int nx_huge_pages;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_nx_huge_page_enabled(void)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_632(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(nx_huge_pages) == sizeof(char) || sizeof(nx_huge_pages) == sizeof(short) || sizeof(nx_huge_pages) == sizeof(int) || sizeof(nx_huge_pages) == sizeof(long)) || sizeof(nx_huge_pages) == sizeof(long long))) __compiletime_assert_632(); } while (0); (*(const volatile typeof( _Generic((nx_huge_pages), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (nx_huge_pages))) *)&(nx_huge_pages)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kvm_mmu_do_page_fault(struct kvm_vcpu *vcpu, gpa_t cr2_or_gpa,
     u32 err, bool prefetch)
{
 struct kvm_page_fault fault = {
  .addr = cr2_or_gpa,
  .error_code = err,
  .exec = err & (1U << 4),
  .write = err & (1U << 1),
  .present = err & (1U << 0),
  .rsvd = err & (1U << 3),
  .user = err & (1U << 2),
  .prefetch = prefetch,
  .is_tdp = __builtin_expect(!!(vcpu->arch.mmu->page_fault == kvm_tdp_page_fault), 1),
  .nx_huge_page_workaround_enabled = is_nx_huge_page_enabled(),

  .max_level = PG_LEVEL_1G,
  .req_level = PG_LEVEL_4K,
  .goal_level = PG_LEVEL_4K,
 };




 return vcpu->arch.mmu->page_fault(vcpu, &fault);
}
# 237 "./arch/x86/kvm/mmu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_writable_pte(unsigned long pte)
{
 return pte & (1ULL << 1);
}
# 250 "./arch/x86/kvm/mmu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u8 permission_fault(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu,
      unsigned pte_access, unsigned pte_pkey,
      unsigned pfec)
{
 int cpl = ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_get_cpl633 = (void *)&__SCK__kvm_x86_get_cpl;; (&__SCT__kvm_x86_get_cpl); })(vcpu);
 unsigned long rflags = ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__kvm_x86_get_rflags634 = (void *)&__SCK__kvm_x86_get_rflags;; (&__SCT__kvm_x86_get_rflags); })(vcpu);
# 270 "./arch/x86/kvm/mmu.h"
 unsigned long smap = (cpl - 3) & (rflags & (((1UL)) << (18)));
 int index = (pfec >> 1) +
      (smap >> (18 - 3 + 1));
 bool fault = (mmu->permissions[index] >> pte_access) & 1;
 u32 errcode = (1U << 0);

 ({ int __ret_warn_on = !!(pfec & ((1U << 5) | (1U << 3))); __builtin_expect(!!(__ret_warn_on), 0); });
 if (__builtin_expect(!!(mmu->pkru_mask), 0)) {
  u32 pkru_bits, offset;







  pkru_bits = (vcpu->arch.pkru >> (pte_pkey * 2)) & 3;


  offset = (pfec & ~1) +
   ((pte_access & (1ULL << 2)) << (3 - 2));

  pkru_bits &= mmu->pkru_mask >> offset;
  errcode |= -pkru_bits & (1U << 5);
  fault |= (pkru_bits != 0);
 }

 return -(u32)fault & errcode;
}

void kvm_zap_gfn_range(struct kvm *kvm, gfn_t gfn_start, gfn_t gfn_end);

int kvm_arch_write_log_dirty(struct kvm_vcpu *vcpu);

int kvm_mmu_post_init_vm(struct kvm *kvm);
void kvm_mmu_pre_destroy_vm(struct kvm *kvm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_shadow_root_allocated(struct kvm *kvm)
{






 return ({ typeof( _Generic((*&kvm->arch.shadow_root_allocated), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&kvm->arch.shadow_root_allocated))) ___p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_635(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(char) || sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(short) || sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(int) || sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(long)) || sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(long long))) __compiletime_assert_635(); } while (0); (*(const volatile typeof( _Generic((*&kvm->arch.shadow_root_allocated), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&kvm->arch.shadow_root_allocated))) *)&(*&kvm->arch.shadow_root_allocated)); }); do { __attribute__((__noreturn__)) extern void __compiletime_assert_636(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(char) || sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(short) || sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(int) || sizeof(*&kvm->arch.shadow_root_allocated) == sizeof(long)))) __compiletime_assert_636(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&kvm->arch.shadow_root_allocated))___p1; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_tdp_mmu_enabled(struct kvm *kvm) { return kvm->arch.tdp_mmu_enabled; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_memslots_have_rmaps(struct kvm *kvm)
{
 return !is_tdp_mmu_enabled(kvm) || kvm_shadow_root_allocated(kvm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gfn_t gfn_to_index(gfn_t gfn, gfn_t base_gfn, int level)
{

 return (gfn >> (((level) - 1) * 9)) -
  (base_gfn >> (((level) - 1) * 9));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
__kvm_mmu_slot_lpages(struct kvm_memory_slot *slot, unsigned long npages,
        int level)
{
 return gfn_to_index(slot->base_gfn + npages - 1,
       slot->base_gfn, level) + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
kvm_mmu_slot_lpages(struct kvm_memory_slot *slot, int level)
{
 return __kvm_mmu_slot_lpages(slot, slot->npages, level);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_update_page_stats(struct kvm *kvm, int level, int count)
{
 atomic64_add(count, &kvm->stat.pages[level - 1]);
}
# 60 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "arch/x86/kvm/vmx/nested.h" 1






# 1 "arch/x86/kvm/vmx/vmx.h" 1







# 1 "./arch/x86/include/asm/intel_pt.h" 1







enum pt_capabilities {
 PT_CAP_max_subleaf = 0,
 PT_CAP_cr3_filtering,
 PT_CAP_psb_cyc,
 PT_CAP_ip_filtering,
 PT_CAP_mtc,
 PT_CAP_ptwrite,
 PT_CAP_power_event_trace,
 PT_CAP_topa_output,
 PT_CAP_topa_multiple_entries,
 PT_CAP_single_range_output,
 PT_CAP_output_subsys,
 PT_CAP_payloads_lip,
 PT_CAP_num_address_ranges,
 PT_CAP_mtc_periods,
 PT_CAP_cycle_thresholds,
 PT_CAP_psb_periods,
};


void cpu_emergency_stop_pt(void);
extern u32 intel_pt_validate_hw_cap(enum pt_capabilities cap);
extern u32 intel_pt_validate_cap(u32 *caps, enum pt_capabilities cap);
extern int is_intel_pt_event(struct perf_event *event);
# 9 "arch/x86/kvm/vmx/vmx.h" 2



# 1 "arch/x86/kvm/vmx/posted_intr.h" 1








struct pi_desc {
 u32 pir[8];
 union {
  struct {

   u16 on : 1,

    sn : 1,

    rsvd_1 : 14;

   u8 nv;

   u8 rsvd_2;

   u32 ndst;
  };
  u64 control;
 };
 u32 rsvd[6];
} __attribute__((__aligned__(64)));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pi_test_and_set_on(struct pi_desc *pi_desc)
{
 return test_and_set_bit(0,
   (unsigned long *)&pi_desc->control);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pi_test_and_clear_on(struct pi_desc *pi_desc)
{
 return test_and_clear_bit(0,
   (unsigned long *)&pi_desc->control);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pi_test_and_set_pir(int vector, struct pi_desc *pi_desc)
{
 return test_and_set_bit(vector, (unsigned long *)pi_desc->pir);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pi_is_pir_empty(struct pi_desc *pi_desc)
{
 return bitmap_empty((unsigned long *)pi_desc->pir, 256);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pi_set_sn(struct pi_desc *pi_desc)
{
 set_bit(1,
  (unsigned long *)&pi_desc->control);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pi_set_on(struct pi_desc *pi_desc)
{
 set_bit(0,
  (unsigned long *)&pi_desc->control);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pi_clear_on(struct pi_desc *pi_desc)
{
 clear_bit(0,
  (unsigned long *)&pi_desc->control);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pi_clear_sn(struct pi_desc *pi_desc)
{
 clear_bit(1,
  (unsigned long *)&pi_desc->control);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pi_test_on(struct pi_desc *pi_desc)
{
 return test_bit(0,
   (unsigned long *)&pi_desc->control);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pi_test_sn(struct pi_desc *pi_desc)
{
 return test_bit(1,
   (unsigned long *)&pi_desc->control);
}

void vmx_vcpu_pi_load(struct kvm_vcpu *vcpu, int cpu);
void vmx_vcpu_pi_put(struct kvm_vcpu *vcpu);
int pi_pre_block(struct kvm_vcpu *vcpu);
void pi_post_block(struct kvm_vcpu *vcpu);
void pi_wakeup_handler(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pi_init_cpu(int cpu);
bool pi_has_pending_interrupt(struct kvm_vcpu *vcpu);
int pi_update_irte(struct kvm *kvm, unsigned int host_irq, uint32_t guest_irq,
     bool set);
void vmx_pi_start_assignment(struct kvm *kvm);
# 13 "arch/x86/kvm/vmx/vmx.h" 2

# 1 "arch/x86/kvm/vmx/vmx_ops.h" 1
# 13 "arch/x86/kvm/vmx/vmx_ops.h"
           void vmread_error(unsigned long field, bool fault);
__attribute__((regparm(0))) void vmread_error_trampoline(unsigned long field,
        bool fault);
void vmwrite_error(unsigned long field, unsigned long value);
void vmclear_error(struct vmcs *vmcs, u64 phys_addr);
void vmptrld_error(struct vmcs *vmcs, u64 phys_addr);
void invvpid_error(unsigned long ext, u16 vpid, gva_t gva);
void invept_error(unsigned long ext, u64 eptp, gpa_t gpa);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_check16(unsigned long field)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_637(void) __attribute__((__error__("16-bit accessor invalid for 64-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6001) == 0x2000))) __compiletime_assert_637(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_638(void) __attribute__((__error__("16-bit accessor invalid for 64-bit high field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6001) == 0x2001))) __compiletime_assert_638(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_639(void) __attribute__((__error__("16-bit accessor invalid for 32-bit high field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x4000))) __compiletime_assert_639(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_640(void) __attribute__((__error__("16-bit accessor invalid for natural width field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x6000))) __compiletime_assert_640(); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_check32(unsigned long field)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_641(void) __attribute__((__error__("32-bit accessor invalid for 16-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0))) __compiletime_assert_641(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_642(void) __attribute__((__error__("32-bit accessor invalid for 64-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6001) == 0x2000))) __compiletime_assert_642(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_643(void) __attribute__((__error__("32-bit accessor invalid for 64-bit high field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6001) == 0x2001))) __compiletime_assert_643(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_644(void) __attribute__((__error__("32-bit accessor invalid for natural width field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x6000))) __compiletime_assert_644(); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_check64(unsigned long field)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_645(void) __attribute__((__error__("64-bit accessor invalid for 16-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0))) __compiletime_assert_645(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_646(void) __attribute__((__error__("64-bit accessor invalid for 64-bit high field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6001) == 0x2001))) __compiletime_assert_646(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_647(void) __attribute__((__error__("64-bit accessor invalid for 32-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x4000))) __compiletime_assert_647(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_648(void) __attribute__((__error__("64-bit accessor invalid for natural width field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x6000))) __compiletime_assert_648(); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_checkl(unsigned long field)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_649(void) __attribute__((__error__("Natural width accessor invalid for 16-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0))) __compiletime_assert_649(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_650(void) __attribute__((__error__("Natural width accessor invalid for 64-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6001) == 0x2000))) __compiletime_assert_650(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_651(void) __attribute__((__error__("Natural width accessor invalid for 64-bit high field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6001) == 0x2001))) __compiletime_assert_651(); } while (0);

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_652(void) __attribute__((__error__("Natural width accessor invalid for 32-bit field"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x4000))) __compiletime_assert_652(); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __vmcs_readl(unsigned long field)
{
 unsigned long value;



 asm goto("1: vmread %[field], %[output]\n\t" "jna %l[do_fail]\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[do_exception]" ") - .\n" " .long " "1" " \n" " .popsection\n" : "+r" (current_stack_pointer), [output] "=r" (value) : [field] "r" (field) : "cc" : do_fail, do_exception);
# 86 "arch/x86/kvm/vmx/vmx_ops.h"
 return value;

do_fail:
 ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("kvm: vmread failed: field=%lx\n", field); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: vmread failed: field=%lx\n", field); }); 0; });
 return 0;

do_exception:
 kvm_spurious_fault();
 return 0;
# 129 "arch/x86/kvm/vmx/vmx_ops.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u16 vmcs_read16(unsigned long field)
{
 vmcs_check16(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_read16(field);
 return __vmcs_readl(field);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 vmcs_read32(unsigned long field)
{
 vmcs_check32(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_read32(field);
 return __vmcs_readl(field);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u64 vmcs_read64(unsigned long field)
{
 vmcs_check64(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_read64(field);

 return __vmcs_readl(field);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long vmcs_readl(unsigned long field)
{
 vmcs_checkl(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_read64(field);
 return __vmcs_readl(field);
}
# 201 "arch/x86/kvm/vmx/vmx_ops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __vmcs_writel(unsigned long field, unsigned long value)
{
 do { asm goto("1: " "vmwrite" " %1, %0\n\t" ".byte 0x2e\n\t" "jna %l[error]\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[fault]" ") - .\n" " .long " "1" " \n" " .popsection\n" : : "r"(field), "rm"(value) : "cc" : error, fault); return; error: ({ asm volatile("653" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "653" "b - .\n\t" ".popsection\n\t"); }); vmwrite_error(field, value); ({ asm volatile("654" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "654" "b - .\n\t" ".popsection\n\t"); }); return; fault: kvm_spurious_fault(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_write16(unsigned long field, u16 value)
{
 vmcs_check16(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_write16(field, value);

 __vmcs_writel(field, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_write32(unsigned long field, u32 value)
{
 vmcs_check32(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_write32(field, value);

 __vmcs_writel(field, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_write64(unsigned long field, u64 value)
{
 vmcs_check64(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_write64(field, value);

 __vmcs_writel(field, value);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_writel(unsigned long field, unsigned long value)
{
 vmcs_checkl(field);
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_write64(field, value);

 __vmcs_writel(field, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_clear_bits(unsigned long field, u32 mask)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_655(void) __attribute__((__error__("vmcs_clear_bits does not support 64-bit fields"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x2000))) __compiletime_assert_655(); } while (0);

 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_write32(field, evmcs_read32(field) & ~mask);

 __vmcs_writel(field, __vmcs_readl(field) & ~mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void vmcs_set_bits(unsigned long field, u32 mask)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_656(void) __attribute__((__error__("vmcs_set_bits does not support 64-bit fields"))); if (!(!(__builtin_constant_p(field) && ((field) & 0x6000) == 0x2000))) __compiletime_assert_656(); } while (0);

 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_write32(field, evmcs_read32(field) | mask);

 __vmcs_writel(field, __vmcs_readl(field) | mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmcs_clear(struct vmcs *vmcs)
{
 u64 phys_addr = __phys_addr_nodebug((unsigned long)(vmcs));

 do { asm goto("1: " "vmclear" " %0\n\t" ".byte 0x2e\n\t" "jna %l[error]\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[fault]" ") - .\n" " .long " "1" " \n" " .popsection\n" : : "m"(phys_addr) : "cc" : error, fault); return; error: ({ asm volatile("657" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "657" "b - .\n\t" ".popsection\n\t"); }); vmclear_error(vmcs, phys_addr); ({ asm volatile("658" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "658" "b - .\n\t" ".popsection\n\t"); }); return; fault: kvm_spurious_fault(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmcs_load(struct vmcs *vmcs)
{
 u64 phys_addr = __phys_addr_nodebug((unsigned long)(vmcs));

 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  return evmcs_load(phys_addr);

 do { asm goto("1: " "vmptrld" " %0\n\t" ".byte 0x2e\n\t" "jna %l[error]\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[fault]" ") - .\n" " .long " "1" " \n" " .popsection\n" : : "m"(phys_addr) : "cc" : error, fault); return; error: ({ asm volatile("659" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "659" "b - .\n\t" ".popsection\n\t"); }); vmptrld_error(vmcs, phys_addr); ({ asm volatile("660" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "660" "b - .\n\t" ".popsection\n\t"); }); return; fault: kvm_spurious_fault(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __invvpid(unsigned long ext, u16 vpid, gva_t gva)
{
 struct {
  u64 vpid : 16;
  u64 rsvd : 48;
  u64 gva;
 } operand = { vpid, 0, gva };

 do { asm goto("1: " "invvpid" " %1, %0\n\t" ".byte 0x2e\n\t" "jna %l[error]\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[fault]" ") - .\n" " .long " "1" " \n" " .popsection\n" : : "r"(ext), "m"(operand) : "cc" : error, fault); return; error: ({ asm volatile("661" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "661" "b - .\n\t" ".popsection\n\t"); }); invvpid_error(ext, vpid, gva); ({ asm volatile("662" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "662" "b - .\n\t" ".popsection\n\t"); }); return; fault: kvm_spurious_fault(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __invept(unsigned long ext, u64 eptp, gpa_t gpa)
{
 struct {
  u64 eptp, gpa;
 } operand = {eptp, gpa};

 do { asm goto("1: " "invept" " %1, %0\n\t" ".byte 0x2e\n\t" "jna %l[error]\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[fault]" ") - .\n" " .long " "1" " \n" " .popsection\n" : : "r"(ext), "m"(operand) : "cc" : error, fault); return; error: ({ asm volatile("663" ": nop\n\t" ".pushsection .discard.instr_begin\n\t" ".long " "663" "b - .\n\t" ".popsection\n\t"); }); invept_error(ext, eptp, gpa); ({ asm volatile("664" ": nop\n\t" ".pushsection .discard.instr_end\n\t" ".long " "664" "b - .\n\t" ".popsection\n\t"); }); return; fault: kvm_spurious_fault(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vpid_sync_vcpu_single(int vpid)
{
 if (vpid == 0)
  return;

 __invvpid(1, vpid, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vpid_sync_vcpu_global(void)
{
 __invvpid(2, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vpid_sync_context(int vpid)
{
 if (cpu_has_vmx_invvpid_single())
  vpid_sync_vcpu_single(vpid);
 else if (vpid != 0)
  vpid_sync_vcpu_global();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vpid_sync_vcpu_addr(int vpid, gva_t addr)
{
 if (vpid == 0)
  return;

 if (cpu_has_vmx_invvpid_individual_addr())
  __invvpid(0, vpid, addr);
 else
  vpid_sync_context(vpid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ept_sync_global(void)
{
 __invept(2, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ept_sync_context(u64 eptp)
{
 if (cpu_has_vmx_invept_context())
  __invept(1, eptp, 0);
 else
  ept_sync_global();
}
# 15 "arch/x86/kvm/vmx/vmx.h" 2
# 31 "arch/x86/kvm/vmx/vmx.h"
struct vmx_msrs {
 unsigned int nr;
 struct vmx_msr_entry val[8];
};

struct vmx_uret_msr {
 bool load_into_hardware;
 u64 data;
 u64 mask;
};

enum segment_cache_field {
 SEG_FIELD_SEL = 0,
 SEG_FIELD_BASE = 1,
 SEG_FIELD_LIMIT = 2,
 SEG_FIELD_AR = 3,

 SEG_FIELD_NR = 4
};



struct pt_ctx {
 u64 ctl;
 u64 status;
 u64 output_base;
 u64 output_mask;
 u64 cr3_match;
 u64 addr_a[4];
 u64 addr_b[4];
};

struct pt_desc {
 u64 ctl_bitmask;
 u32 num_address_ranges;
 u32 caps[4 * 2];
 struct pt_ctx host;
 struct pt_ctx guest;
};

union vmx_exit_reason {
 struct {
  u32 basic : 16;
  u32 reserved16 : 1;
  u32 reserved17 : 1;
  u32 reserved18 : 1;
  u32 reserved19 : 1;
  u32 reserved20 : 1;
  u32 reserved21 : 1;
  u32 reserved22 : 1;
  u32 reserved23 : 1;
  u32 reserved24 : 1;
  u32 reserved25 : 1;
  u32 bus_lock_detected : 1;
  u32 enclave_mode : 1;
  u32 smi_pending_mtf : 1;
  u32 smi_from_vmx_root : 1;
  u32 reserved30 : 1;
  u32 failed_vmentry : 1;
 };
 u32 full;
};




bool intel_pmu_lbr_is_compatible(struct kvm_vcpu *vcpu);
bool intel_pmu_lbr_is_enabled(struct kvm_vcpu *vcpu);

int intel_pmu_create_guest_lbr_event(struct kvm_vcpu *vcpu);
void vmx_passthrough_lbr_msrs(struct kvm_vcpu *vcpu);

struct lbr_desc {

 struct x86_pmu_lbr records;







 struct perf_event *event;


 bool msr_passthrough;
};





struct nested_vmx {

 bool vmxon;
 gpa_t vmxon_ptr;
 bool pml_full;


 gpa_t current_vmptr;





 struct vmcs12 *cached_vmcs12;





 struct vmcs12 *cached_shadow_vmcs12;





 bool need_vmcs12_to_shadow_sync;
 bool dirty_vmcs12;





 bool need_sync_vmcs02_to_vmcs12_rare;






 bool vmcs02_initialized;

 bool change_vmcs01_virtual_apic_mode;
 bool reload_vmcs01_apic_access_page;
 bool update_vmcs01_cpu_dirty_logging;






 bool enlightened_vmcs_enabled;


 bool nested_run_pending;


 bool mtf_pending;

 struct loaded_vmcs vmcs02;





 struct page *apic_access_page;
 struct kvm_host_map virtual_apic_map;
 struct kvm_host_map pi_desc_map;

 struct kvm_host_map msr_bitmap_map;

 struct pi_desc *pi_desc;
 bool pi_pending;
 u16 posted_intr_nv;

 struct hrtimer preemption_timer;
 u64 preemption_timer_deadline;
 bool has_preemption_timer_deadline;
 bool preemption_timer_expired;


 u64 vmcs01_debugctl;
 u64 vmcs01_guest_bndcfgs;


 int l1_tpr_threshold;

 u16 vpid02;
 u16 last_vpid;

 struct nested_vmx_msrs msrs;


 struct {

  bool vmxon;

  bool guest_mode;
 } smm;

 gpa_t hv_evmcs_vmptr;
 struct kvm_host_map hv_evmcs_map;
 struct hv_enlightened_vmcs *hv_evmcs;
};

struct vcpu_vmx {
 struct kvm_vcpu vcpu;
 u8 fail;
 u8 x2apic_msr_bitmap_mode;
# 239 "arch/x86/kvm/vmx/vmx.h"
 bool guest_state_loaded;

 unsigned long exit_qualification;
 u32 exit_intr_info;
 u32 idt_vectoring_info;
 ulong rflags;







 struct vmx_uret_msr guest_uret_msrs[7];
 bool guest_uret_msrs_loaded;

 u64 msr_host_kernel_gs_base;
 u64 msr_guest_kernel_gs_base;


 u64 spec_ctrl;
 u32 msr_ia32_umwait_control;






 struct loaded_vmcs vmcs01;
 struct loaded_vmcs *loaded_vmcs;

 struct msr_autoload {
  struct vmx_msrs guest;
  struct vmx_msrs host;
 } msr_autoload;

 struct msr_autostore {
  struct vmx_msrs guest;
 } msr_autostore;

 struct {
  int vm86_active;
  ulong save_rflags;
  struct kvm_segment segs[8];
 } rmode;
 struct {
  u32 bitmask;
  struct kvm_save_segment {
   u16 selector;
   unsigned long base;
   u32 limit;
   u32 ar;
  } seg[8];
 } segment_cache;
 int vpid;
 bool emulation_required;

 union vmx_exit_reason exit_reason;


 struct pi_desc pi_desc;


 struct nested_vmx nested;


 unsigned int ple_window;
 bool ple_window_dirty;

 bool req_immediate_exit;



 struct page *pml_pg;


 u64 hv_deadline_tsc;

 unsigned long host_debugctlmsr;






 u64 msr_ia32_feature_control;
 u64 msr_ia32_feature_control_valid_bits;

 u64 msr_ia32_sgxlepubkeyhash[4];

 struct pt_desc pt_desc;
 struct lbr_desc lbr_desc;



 struct {
  unsigned long read[(((13) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
  unsigned long write[(((13) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 } shadow_msr_intercept;
};

struct kvm_vmx {
 struct kvm kvm;

 unsigned int tss_addr;
 bool ept_identity_pagetable_done;
 gpa_t ept_identity_map_addr;
};

bool nested_vmx_allowed(struct kvm_vcpu *vcpu);
void vmx_vcpu_load_vmcs(struct kvm_vcpu *vcpu, int cpu,
   struct loaded_vmcs *buddy);
int allocate_vpid(void);
void free_vpid(int vpid);
void vmx_set_constant_host_state(struct vcpu_vmx *vmx);
void vmx_prepare_switch_to_guest(struct kvm_vcpu *vcpu);
void vmx_set_host_fs_gs(struct vmcs_host_state *host, u16 fs_sel, u16 gs_sel,
   unsigned long fs_base, unsigned long gs_base);
int vmx_get_cpl(struct kvm_vcpu *vcpu);
bool vmx_emulation_required(struct kvm_vcpu *vcpu);
unsigned long vmx_get_rflags(struct kvm_vcpu *vcpu);
void vmx_set_rflags(struct kvm_vcpu *vcpu, unsigned long rflags);
u32 vmx_get_interrupt_shadow(struct kvm_vcpu *vcpu);
void vmx_set_interrupt_shadow(struct kvm_vcpu *vcpu, int mask);
int vmx_set_efer(struct kvm_vcpu *vcpu, u64 efer);
void vmx_set_cr0(struct kvm_vcpu *vcpu, unsigned long cr0);
void vmx_set_cr4(struct kvm_vcpu *vcpu, unsigned long cr4);
void set_cr4_guest_host_mask(struct vcpu_vmx *vmx);
void ept_save_pdptrs(struct kvm_vcpu *vcpu);
void vmx_get_segment(struct kvm_vcpu *vcpu, struct kvm_segment *var, int seg);
void __vmx_set_segment(struct kvm_vcpu *vcpu, struct kvm_segment *var, int seg);
u64 construct_eptp(struct kvm_vcpu *vcpu, hpa_t root_hpa, int root_level);

bool vmx_guest_inject_ac(struct kvm_vcpu *vcpu);
void vmx_update_exception_bitmap(struct kvm_vcpu *vcpu);
bool vmx_nmi_blocked(struct kvm_vcpu *vcpu);
bool vmx_interrupt_blocked(struct kvm_vcpu *vcpu);
bool vmx_get_nmi_mask(struct kvm_vcpu *vcpu);
void vmx_set_nmi_mask(struct kvm_vcpu *vcpu, bool masked);
void vmx_set_virtual_apic_mode(struct kvm_vcpu *vcpu);
struct vmx_uret_msr *vmx_find_uret_msr(struct vcpu_vmx *vmx, u32 msr);
void pt_update_intercept_for_msr(struct kvm_vcpu *vcpu);
void vmx_update_host_rsp(struct vcpu_vmx *vmx, unsigned long host_rsp);
bool __vmx_vcpu_run(struct vcpu_vmx *vmx, unsigned long *regs, bool launched);
int vmx_find_loadstore_msr_slot(struct vmx_msrs *m, u32 msr);
void vmx_ept_load_pdptrs(struct kvm_vcpu *vcpu);

void vmx_disable_intercept_for_msr(struct kvm_vcpu *vcpu, u32 msr, int type);
void vmx_enable_intercept_for_msr(struct kvm_vcpu *vcpu, u32 msr, int type);

u64 vmx_get_l2_tsc_offset(struct kvm_vcpu *vcpu);
u64 vmx_get_l2_tsc_multiplier(struct kvm_vcpu *vcpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_set_intercept_for_msr(struct kvm_vcpu *vcpu, u32 msr,
          int type, bool value)
{
 if (value)
  vmx_enable_intercept_for_msr(vcpu, msr, type);
 else
  vmx_disable_intercept_for_msr(vcpu, msr, type);
}

void vmx_update_cpu_dirty_logging(struct kvm_vcpu *vcpu);
# 427 "arch/x86/kvm/vmx/vmx.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_test_msr_bitmap_read(unsigned long *bitmap, u32 msr) { int f = sizeof(unsigned long); if (msr <= 0x1fff) return test_bit(msr, bitmap + 0x0 / f); else if ((msr >= 0xc0000000) && (msr <= 0xc0001fff)) return test_bit(msr & 0x1fff, bitmap + (0x0 + 0x400) / f); return (bool)true; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_test_msr_bitmap_write(unsigned long *bitmap, u32 msr) { int f = sizeof(unsigned long); if (msr <= 0x1fff) return test_bit(msr, bitmap + 0x800 / f); else if ((msr >= 0xc0000000) && (msr <= 0xc0001fff)) return test_bit(msr & 0x1fff, bitmap + (0x800 + 0x400) / f); return (bool)true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_clear_msr_bitmap_read(unsigned long *bitmap, u32 msr) { int f = sizeof(unsigned long); if (msr <= 0x1fff) return __clear_bit(msr, bitmap + 0x0 / f); else if ((msr >= 0xc0000000) && (msr <= 0xc0001fff)) return __clear_bit(msr & 0x1fff, bitmap + (0x0 + 0x400) / f); return (void)true; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_clear_msr_bitmap_write(unsigned long *bitmap, u32 msr) { int f = sizeof(unsigned long); if (msr <= 0x1fff) return __clear_bit(msr, bitmap + 0x800 / f); else if ((msr >= 0xc0000000) && (msr <= 0xc0001fff)) return __clear_bit(msr & 0x1fff, bitmap + (0x800 + 0x400) / f); return (void)true; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_set_msr_bitmap_read(unsigned long *bitmap, u32 msr) { int f = sizeof(unsigned long); if (msr <= 0x1fff) return __set_bit(msr, bitmap + 0x0 / f); else if ((msr >= 0xc0000000) && (msr <= 0xc0001fff)) return __set_bit(msr & 0x1fff, bitmap + (0x0 + 0x400) / f); return (void)true; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_set_msr_bitmap_write(unsigned long *bitmap, u32 msr) { int f = sizeof(unsigned long); if (msr <= 0x1fff) return __set_bit(msr, bitmap + 0x800 / f); else if ((msr >= 0xc0000000) && (msr <= 0xc0001fff)) return __set_bit(msr & 0x1fff, bitmap + (0x800 + 0x400) / f); return (void)true; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u8 vmx_get_rvi(void)
{
 return vmcs_read16(GUEST_INTR_STATUS) & 0xff;
}
# 460 "arch/x86/kvm/vmx/vmx.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vm_entry_controls_set(struct vcpu_vmx *vmx, u32 val) { if (vmx->loaded_vmcs->controls_shadow.vm_entry != val) { vmcs_write32(VM_ENTRY_CONTROLS, val); vmx->loaded_vmcs->controls_shadow.vm_entry = val; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __vm_entry_controls_get(struct loaded_vmcs *vmcs) { return vmcs->controls_shadow.vm_entry; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 vm_entry_controls_get(struct vcpu_vmx *vmx) { return __vm_entry_controls_get(vmx->loaded_vmcs); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vm_entry_controls_setbit(struct vcpu_vmx *vmx, u32 val) { vm_entry_controls_set(vmx, vm_entry_controls_get(vmx) | val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vm_entry_controls_clearbit(struct vcpu_vmx *vmx, u32 val) { vm_entry_controls_set(vmx, vm_entry_controls_get(vmx) & ~val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vm_exit_controls_set(struct vcpu_vmx *vmx, u32 val) { if (vmx->loaded_vmcs->controls_shadow.vm_exit != val) { vmcs_write32(VM_EXIT_CONTROLS, val); vmx->loaded_vmcs->controls_shadow.vm_exit = val; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __vm_exit_controls_get(struct loaded_vmcs *vmcs) { return vmcs->controls_shadow.vm_exit; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 vm_exit_controls_get(struct vcpu_vmx *vmx) { return __vm_exit_controls_get(vmx->loaded_vmcs); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vm_exit_controls_setbit(struct vcpu_vmx *vmx, u32 val) { vm_exit_controls_set(vmx, vm_exit_controls_get(vmx) | val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vm_exit_controls_clearbit(struct vcpu_vmx *vmx, u32 val) { vm_exit_controls_set(vmx, vm_exit_controls_get(vmx) & ~val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pin_controls_set(struct vcpu_vmx *vmx, u32 val) { if (vmx->loaded_vmcs->controls_shadow.pin != val) { vmcs_write32(PIN_BASED_VM_EXEC_CONTROL, val); vmx->loaded_vmcs->controls_shadow.pin = val; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __pin_controls_get(struct loaded_vmcs *vmcs) { return vmcs->controls_shadow.pin; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 pin_controls_get(struct vcpu_vmx *vmx) { return __pin_controls_get(vmx->loaded_vmcs); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pin_controls_setbit(struct vcpu_vmx *vmx, u32 val) { pin_controls_set(vmx, pin_controls_get(vmx) | val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pin_controls_clearbit(struct vcpu_vmx *vmx, u32 val) { pin_controls_set(vmx, pin_controls_get(vmx) & ~val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exec_controls_set(struct vcpu_vmx *vmx, u32 val) { if (vmx->loaded_vmcs->controls_shadow.exec != val) { vmcs_write32(CPU_BASED_VM_EXEC_CONTROL, val); vmx->loaded_vmcs->controls_shadow.exec = val; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __exec_controls_get(struct loaded_vmcs *vmcs) { return vmcs->controls_shadow.exec; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 exec_controls_get(struct vcpu_vmx *vmx) { return __exec_controls_get(vmx->loaded_vmcs); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exec_controls_setbit(struct vcpu_vmx *vmx, u32 val) { exec_controls_set(vmx, exec_controls_get(vmx) | val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exec_controls_clearbit(struct vcpu_vmx *vmx, u32 val) { exec_controls_set(vmx, exec_controls_get(vmx) & ~val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void secondary_exec_controls_set(struct vcpu_vmx *vmx, u32 val) { if (vmx->loaded_vmcs->controls_shadow.secondary_exec != val) { vmcs_write32(SECONDARY_VM_EXEC_CONTROL, val); vmx->loaded_vmcs->controls_shadow.secondary_exec = val; } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __secondary_exec_controls_get(struct loaded_vmcs *vmcs) { return vmcs->controls_shadow.secondary_exec; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 secondary_exec_controls_get(struct vcpu_vmx *vmx) { return __secondary_exec_controls_get(vmx->loaded_vmcs); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void secondary_exec_controls_setbit(struct vcpu_vmx *vmx, u32 val) { secondary_exec_controls_set(vmx, secondary_exec_controls_get(vmx) | val); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void secondary_exec_controls_clearbit(struct vcpu_vmx *vmx, u32 val) { secondary_exec_controls_set(vmx, secondary_exec_controls_get(vmx) & ~val); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_register_cache_reset(struct kvm_vcpu *vcpu)
{
 vcpu->arch.regs_avail = ~((1 << VCPU_REGS_RIP) | (1 << VCPU_REGS_RSP)
      | (1 << VCPU_EXREG_RFLAGS)
      | (1 << VCPU_EXREG_PDPTR)
      | (1 << VCPU_EXREG_SEGMENTS)
      | (1 << VCPU_EXREG_CR0)
      | (1 << VCPU_EXREG_CR3)
      | (1 << VCPU_EXREG_CR4)
      | (1 << VCPU_EXREG_EXIT_INFO_1)
      | (1 << VCPU_EXREG_EXIT_INFO_2));
 vcpu->arch.regs_dirty = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_vmx *to_kvm_vmx(struct kvm *kvm)
{
 return ({ void *__mptr = (void *)(kvm); _Static_assert(__builtin_types_compatible_p(typeof(*(kvm)), typeof(((struct kvm_vmx *)0)->kvm)) || __builtin_types_compatible_p(typeof(*(kvm)), typeof(void)), "pointer type mismatch in container_of()"); ((struct kvm_vmx *)(__mptr - __builtin_offsetof(struct kvm_vmx, kvm))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vcpu_vmx *to_vmx(struct kvm_vcpu *vcpu)
{
 return ({ void *__mptr = (void *)(vcpu); _Static_assert(__builtin_types_compatible_p(typeof(*(vcpu)), typeof(((struct vcpu_vmx *)0)->vcpu)) || __builtin_types_compatible_p(typeof(*(vcpu)), typeof(void)), "pointer type mismatch in container_of()"); ((struct vcpu_vmx *)(__mptr - __builtin_offsetof(struct vcpu_vmx, vcpu))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vmx_get_exit_qual(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (!kvm_register_is_available(vcpu, VCPU_EXREG_EXIT_INFO_1)) {
  kvm_register_mark_available(vcpu, VCPU_EXREG_EXIT_INFO_1);
  vmx->exit_qualification = vmcs_readl(EXIT_QUALIFICATION);
 }
 return vmx->exit_qualification;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 vmx_get_intr_info(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (!kvm_register_is_available(vcpu, VCPU_EXREG_EXIT_INFO_2)) {
  kvm_register_mark_available(vcpu, VCPU_EXREG_EXIT_INFO_2);
  vmx->exit_intr_info = vmcs_read32(VM_EXIT_INTR_INFO);
 }
 return vmx->exit_intr_info;
}

struct vmcs *alloc_vmcs_cpu(bool shadow, int cpu, gfp_t flags);
void free_vmcs(struct vmcs *vmcs);
int alloc_loaded_vmcs(struct loaded_vmcs *loaded_vmcs);
void free_loaded_vmcs(struct loaded_vmcs *loaded_vmcs);
void loaded_vmcs_clear(struct loaded_vmcs *loaded_vmcs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vmcs *alloc_vmcs(bool shadow)
{
 return alloc_vmcs_cpu(shadow, 0,
         (((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)) | (( gfp_t)0x400000u)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_has_waitpkg(struct vcpu_vmx *vmx)
{
 return secondary_exec_controls_get(vmx) &
  ((((1UL))) << (( 2*32+ 26) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_need_pf_intercept(struct kvm_vcpu *vcpu)
{
 if (!enable_ept)
  return true;

 return allow_smaller_maxphyaddr && cpuid_maxphyaddr(vcpu) < boot_cpu_data.x86_phys_bits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_unrestricted_guest(struct kvm_vcpu *vcpu)
{
 return enable_unrestricted_guest && (!is_guest_mode(vcpu) ||
     (secondary_exec_controls_get(to_vmx(vcpu)) &
     ((((1UL))) << (( 2*32+ 7) & 0x1f))));
}

bool __vmx_guest_state_valid(struct kvm_vcpu *vcpu);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_guest_state_valid(struct kvm_vcpu *vcpu)
{
 return is_unrestricted_guest(vcpu) || __vmx_guest_state_valid(vcpu);
}

void dump_vmcs(struct kvm_vcpu *vcpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmx_get_instr_info_reg2(u32 vmx_instr_info)
{
 return (vmx_instr_info >> 28) & 0xf;
}
# 8 "arch/x86/kvm/vmx/nested.h" 2




enum nvmx_vmentry_status {
 NVMX_VMENTRY_SUCCESS,
 NVMX_VMENTRY_VMFAIL,
 NVMX_VMENTRY_VMEXIT,
 NVMX_VMENTRY_KVM_INTERNAL_ERROR,
};

void vmx_leave_nested(struct kvm_vcpu *vcpu);
void nested_vmx_setup_ctls_msrs(struct nested_vmx_msrs *msrs, u32 ept_caps);
void nested_vmx_hardware_unsetup(void);
__attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) int nested_vmx_hardware_setup(int (*exit_handlers[])(struct kvm_vcpu *));
void nested_vmx_set_vmcs_shadowing_bitmap(void);
void nested_vmx_free_vcpu(struct kvm_vcpu *vcpu);
enum nvmx_vmentry_status nested_vmx_enter_non_root_mode(struct kvm_vcpu *vcpu,
           bool from_vmentry);
bool nested_vmx_reflect_vmexit(struct kvm_vcpu *vcpu);
void nested_vmx_vmexit(struct kvm_vcpu *vcpu, u32 vm_exit_reason,
         u32 exit_intr_info, unsigned long exit_qualification);
void nested_sync_vmcs12_to_shadow(struct kvm_vcpu *vcpu);
int vmx_set_vmx_msr(struct kvm_vcpu *vcpu, u32 msr_index, u64 data);
int vmx_get_vmx_msr(struct nested_vmx_msrs *msrs, u32 msr_index, u64 *pdata);
int get_vmx_mem_address(struct kvm_vcpu *vcpu, unsigned long exit_qualification,
   u32 vmx_instruction_info, bool wr, int len, gva_t *ret);
void nested_vmx_pmu_entry_exit_ctls_update(struct kvm_vcpu *vcpu);
void nested_mark_vmcs12_pages_dirty(struct kvm_vcpu *vcpu);
bool nested_vmx_check_io_bitmaps(struct kvm_vcpu *vcpu, unsigned int port,
     int size);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vmcs12 *get_vmcs12(struct kvm_vcpu *vcpu)
{
 return to_vmx(vcpu)->nested.cached_vmcs12;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vmcs12 *get_shadow_vmcs12(struct kvm_vcpu *vcpu)
{
 return to_vmx(vcpu)->nested.cached_shadow_vmcs12;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vmx_has_valid_vmcs12(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);


 return vmx->nested.current_vmptr != -1ull ||
  vmx->nested.hv_evmcs_vmptr != (-1ULL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 nested_get_vpid02(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 return vmx->nested.vpid02 ? vmx->nested.vpid02 : vmx->vpid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long nested_ept_get_eptp(struct kvm_vcpu *vcpu)
{

 return get_vmcs12(vcpu)->ept_pointer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_ept_ad_enabled(struct kvm_vcpu *vcpu)
{
 return nested_ept_get_eptp(vcpu) & (1ull << 6);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long nested_read_cr0(struct vmcs12 *fields)
{
 return (fields->guest_cr0 & ~fields->cr0_guest_host_mask) |
  (fields->cr0_read_shadow & fields->cr0_guest_host_mask);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long nested_read_cr4(struct vmcs12 *fields)
{
 return (fields->guest_cr4 & ~fields->cr4_guest_host_mask) |
  (fields->cr4_read_shadow & fields->cr4_guest_host_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned nested_cpu_vmx_misc_cr3_count(struct kvm_vcpu *vcpu)
{
 return vmx_misc_cr3_count(to_vmx(vcpu)->nested.msrs.misc_low);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_vmwrite_any_field(struct kvm_vcpu *vcpu)
{
 return to_vmx(vcpu)->nested.msrs.misc_low &
  (1ULL << 29);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_zero_length_injection(struct kvm_vcpu *vcpu)
{
 return to_vmx(vcpu)->nested.msrs.misc_low & 0x40000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_supports_monitor_trap_flag(struct kvm_vcpu *vcpu)
{
 return to_vmx(vcpu)->nested.msrs.procbased_ctls_high &
   ((((1UL))) << (( 1*32+ 27) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_vmx_shadow_vmcs(struct kvm_vcpu *vcpu)
{
 return to_vmx(vcpu)->nested.msrs.secondary_ctls_high &
  ((((1UL))) << (( 2*32+ 14) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has(struct vmcs12 *vmcs12, u32 bit)
{
 return vmcs12->cpu_based_vm_exec_control & bit;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has2(struct vmcs12 *vmcs12, u32 bit)
{
 return (vmcs12->cpu_based_vm_exec_control &
   ((((1UL))) << (( 1*32+ 31) & 0x1f))) &&
  (vmcs12->secondary_vm_exec_control & bit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_preemption_timer(struct vmcs12 *vmcs12)
{
 return vmcs12->pin_based_vm_exec_control &
  ((((1UL))) << (( 0*32+ 6) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_nmi_exiting(struct vmcs12 *vmcs12)
{
 return vmcs12->pin_based_vm_exec_control & ((((1UL))) << (( 0*32+ 3) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_virtual_nmis(struct vmcs12 *vmcs12)
{
 return vmcs12->pin_based_vm_exec_control & ((((1UL))) << (( 0*32+ 5) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int nested_cpu_has_mtf(struct vmcs12 *vmcs12)
{
 return nested_cpu_has(vmcs12, ((((1UL))) << (( 1*32+ 27) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int nested_cpu_has_ept(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 1) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_xsaves(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 20) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_pml(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 17) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_virt_x2apic_mode(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 4) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_vpid(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 5) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_apic_reg_virt(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 8) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_vid(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 9) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_posted_intr(struct vmcs12 *vmcs12)
{
 return vmcs12->pin_based_vm_exec_control & ((((1UL))) << (( 0*32+ 7) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_vmfunc(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 13) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_eptp_switching(struct vmcs12 *vmcs12)
{
 return nested_cpu_has_vmfunc(vmcs12) &&
  (vmcs12->vm_function_control &
   ((((1UL))) << ((( 0*32+ 28) & 0x1f) - 28)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_shadow_vmcs(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 14) & 0x1f)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_save_preemption_timer(struct vmcs12 *vmcs12)
{
 return vmcs12->vm_exit_controls &
     0x00400000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_exit_on_nmi(struct kvm_vcpu *vcpu)
{
 return nested_cpu_has_nmi_exiting(get_vmcs12(vcpu));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_exit_on_intr(struct kvm_vcpu *vcpu)
{
 return get_vmcs12(vcpu)->pin_based_vm_exec_control &
  ((((1UL))) << (( 0*32+ 0) & 0x1f));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cpu_has_encls_exit(struct vmcs12 *vmcs12)
{
 return nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 15) & 0x1f)));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fixed_bits_valid(u64 val, u64 fixed0, u64 fixed1)
{
 return ((val & fixed1) | fixed0) == val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_guest_cr0_valid(struct kvm_vcpu *vcpu, unsigned long val)
{
 u64 fixed0 = to_vmx(vcpu)->nested.msrs.cr0_fixed0;
 u64 fixed1 = to_vmx(vcpu)->nested.msrs.cr0_fixed1;
 struct vmcs12 *vmcs12 = get_vmcs12(vcpu);

 if (to_vmx(vcpu)->nested.msrs.secondary_ctls_high &
  ((((1UL))) << (( 2*32+ 7) & 0x1f)) &&
     nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 7) & 0x1f))))
  fixed0 &= ~((((1UL)) << (0)) | (((1UL)) << (31)));

 return fixed_bits_valid(val, fixed0, fixed1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_host_cr0_valid(struct kvm_vcpu *vcpu, unsigned long val)
{
 u64 fixed0 = to_vmx(vcpu)->nested.msrs.cr0_fixed0;
 u64 fixed1 = to_vmx(vcpu)->nested.msrs.cr0_fixed1;

 return fixed_bits_valid(val, fixed0, fixed1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool nested_cr4_valid(struct kvm_vcpu *vcpu, unsigned long val)
{
 u64 fixed0 = to_vmx(vcpu)->nested.msrs.cr4_fixed0;
 u64 fixed1 = to_vmx(vcpu)->nested.msrs.cr4_fixed1;

 return fixed_bits_valid(val, fixed0, fixed1);
}





extern struct kvm_x86_nested_ops vmx_nested_ops;
# 61 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/kvm/pmu.h" 1
# 20 "./arch/x86/kvm/pmu.h"
struct kvm_event_hw_type_mapping {
 u8 eventsel;
 u8 unit_mask;
 unsigned event_type;
};

struct kvm_pmu_ops {
 unsigned (*find_arch_event)(struct kvm_pmu *pmu, u8 event_select,
        u8 unit_mask);
 unsigned (*find_fixed_event)(int idx);
 bool (*pmc_is_enabled)(struct kvm_pmc *pmc);
 struct kvm_pmc *(*pmc_idx_to_pmc)(struct kvm_pmu *pmu, int pmc_idx);
 struct kvm_pmc *(*rdpmc_ecx_to_pmc)(struct kvm_vcpu *vcpu,
  unsigned int idx, u64 *mask);
 struct kvm_pmc *(*msr_idx_to_pmc)(struct kvm_vcpu *vcpu, u32 msr);
 bool (*is_valid_rdpmc_ecx)(struct kvm_vcpu *vcpu, unsigned int idx);
 bool (*is_valid_msr)(struct kvm_vcpu *vcpu, u32 msr);
 int (*get_msr)(struct kvm_vcpu *vcpu, struct msr_data *msr_info);
 int (*set_msr)(struct kvm_vcpu *vcpu, struct msr_data *msr_info);
 void (*refresh)(struct kvm_vcpu *vcpu);
 void (*init)(struct kvm_vcpu *vcpu);
 void (*reset)(struct kvm_vcpu *vcpu);
 void (*deliver_pmi)(struct kvm_vcpu *vcpu);
 void (*cleanup)(struct kvm_vcpu *vcpu);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 pmc_bitmask(struct kvm_pmc *pmc)
{
 struct kvm_pmu *pmu = (&(pmc)->vcpu->arch.pmu);

 return pmu->counter_bitmask[pmc->type];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 pmc_read_counter(struct kvm_pmc *pmc)
{
 u64 counter, enabled, running;

 counter = pmc->counter;
 if (pmc->perf_event && !pmc->is_paused)
  counter += perf_event_read_value(pmc->perf_event,
       &enabled, &running);

 return counter & pmc_bitmask(pmc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pmc_release_perf_event(struct kvm_pmc *pmc)
{
 if (pmc->perf_event) {
  perf_event_release_kernel(pmc->perf_event);
  pmc->perf_event = ((void *)0);
  pmc->current_config = 0;
  (&(pmc)->vcpu->arch.pmu)->event_count--;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pmc_stop_counter(struct kvm_pmc *pmc)
{
 if (pmc->perf_event) {
  pmc->counter = pmc_read_counter(pmc);
  pmc_release_perf_event(pmc);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pmc_is_gp(struct kvm_pmc *pmc)
{
 return pmc->type == KVM_PMC_GP;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pmc_is_fixed(struct kvm_pmc *pmc)
{
 return pmc->type == KVM_PMC_FIXED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pmc_is_enabled(struct kvm_pmc *pmc)
{
 return kvm_x86_ops.pmu_ops->pmc_is_enabled(pmc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_valid_perf_global_ctrl(struct kvm_pmu *pmu,
       u64 data)
{
 return !(pmu->global_ctrl_mask & data);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_pmc *get_gp_pmc(struct kvm_pmu *pmu, u32 msr,
      u32 base)
{
 if (msr >= base && msr < base + pmu->nr_arch_gp_counters) {
  u32 index = ({ typeof(msr - base) _i = (msr - base); typeof(pmu->nr_arch_gp_counters) _s = (pmu->nr_arch_gp_counters); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_665(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_665(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_666(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_666(); } while (0); (typeof(_i)) (_i & _mask); });


  return &pmu->gp_counters[index];
 }

 return ((void *)0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kvm_pmc *get_fixed_pmc(struct kvm_pmu *pmu, u32 msr)
{
 int base = 0x00000309;

 if (msr >= base && msr < base + pmu->nr_arch_fixed_counters) {
  u32 index = ({ typeof(msr - base) _i = (msr - base); typeof(pmu->nr_arch_fixed_counters) _s = (pmu->nr_arch_fixed_counters); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_667(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_667(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_668(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_668(); } while (0); (typeof(_i)) (_i & _mask); });


  return &pmu->fixed_counters[index];
 }

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 get_sample_period(struct kvm_pmc *pmc, u64 counter_value)
{
 u64 sample_period = (-counter_value) & pmc_bitmask(pmc);

 if (!sample_period)
  sample_period = pmc_bitmask(pmc) + 1;
 return sample_period;
}

void reprogram_gp_counter(struct kvm_pmc *pmc, u64 eventsel);
void reprogram_fixed_counter(struct kvm_pmc *pmc, u8 ctrl, int fixed_idx);
void reprogram_counter(struct kvm_pmu *pmu, int pmc_idx);

void kvm_pmu_deliver_pmi(struct kvm_vcpu *vcpu);
void kvm_pmu_handle_event(struct kvm_vcpu *vcpu);
int kvm_pmu_rdpmc(struct kvm_vcpu *vcpu, unsigned pmc, u64 *data);
bool kvm_pmu_is_valid_rdpmc_ecx(struct kvm_vcpu *vcpu, unsigned int idx);
bool kvm_pmu_is_valid_msr(struct kvm_vcpu *vcpu, u32 msr);
int kvm_pmu_get_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info);
int kvm_pmu_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info);
void kvm_pmu_refresh(struct kvm_vcpu *vcpu);
void kvm_pmu_reset(struct kvm_vcpu *vcpu);
void kvm_pmu_init(struct kvm_vcpu *vcpu);
void kvm_pmu_cleanup(struct kvm_vcpu *vcpu);
void kvm_pmu_destroy(struct kvm_vcpu *vcpu);
int kvm_vm_ioctl_set_pmu_event_filter(struct kvm *kvm, void *argp);

bool is_vmware_backdoor_pmc(u32 pmc_idx);

extern struct kvm_pmu_ops intel_pmu_ops;
extern struct kvm_pmu_ops amd_pmu_ops;
# 62 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "arch/x86/kvm/vmx/sgx.h" 1
# 22 "arch/x86/kvm/vmx/sgx.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void setup_default_sgx_lepubkeyhash(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vcpu_setup_sgx_lepubkeyhash(struct kvm_vcpu *vcpu) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_write_encls_bitmap(struct kvm_vcpu *vcpu,
       struct vmcs12 *vmcs12)
{

 if (cpu_has_vmx_encls_vmexit())
  vmcs_write64(ENCLS_EXITING_BITMAP, -1ull);
}
# 63 "arch/x86/kvm/vmx/vmx.c" 2
# 1 "./arch/x86/kvm/trace.h" 1




# 1 "./include/linux/tracepoint.h" 1
# 6 "./arch/x86/kvm/trace.h" 2
# 17 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_entry(void *__data, struct kvm_vcpu *vcpu); extern struct static_call_key __SCK__tp_func_kvm_entry; extern typeof(__traceiter_kvm_entry) __SCT__tp_func_kvm_entry;; extern struct tracepoint __tracepoint_kvm_entry; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_entry(struct kvm_vcpu *vcpu) { if (static_key_false(&__tracepoint_kvm_entry.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_entry)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_669(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_entry)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_entry)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_entry)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_entry)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_entry)->funcs) == sizeof(long long))) __compiletime_assert_669(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_entry)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_entry)->funcs))) *)&((&__tracepoint_kvm_entry)->funcs)); }); ((typeof(*(&__tracepoint_kvm_entry)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_entry670 = (void *)&__SCK__tp_func_kvm_entry;; (&__SCT__tp_func_kvm_entry); })(__data, vcpu); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_entry.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_entry.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_671(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_entry.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_entry.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_entry.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_entry.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_entry.funcs)) == sizeof(long long))) __compiletime_assert_671(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_entry.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_entry.funcs)))) *)&((__tracepoint_kvm_entry.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_entry.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_entry(void (*probe)(void *__data, struct kvm_vcpu *vcpu), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_entry, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_entry(void (*probe)(void *__data, struct kvm_vcpu *vcpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_entry, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_entry(void (*probe)(void *__data, struct kvm_vcpu *vcpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_entry, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_entry(void (*cb)(void *__data, struct kvm_vcpu *vcpu)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_entry_enabled(void) { return static_key_false(&__tracepoint_kvm_entry.key); };
# 37 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hypercall(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3); extern struct static_call_key __SCK__tp_func_kvm_hypercall; extern typeof(__traceiter_kvm_hypercall) __SCT__tp_func_kvm_hypercall;; extern struct tracepoint __tracepoint_kvm_hypercall; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hypercall(unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3) { if (static_key_false(&__tracepoint_kvm_hypercall.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hypercall)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_672(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hypercall)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hypercall)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hypercall)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hypercall)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hypercall)->funcs) == sizeof(long long))) __compiletime_assert_672(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hypercall)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hypercall)->funcs))) *)&((&__tracepoint_kvm_hypercall)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hypercall)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hypercall673 = (void *)&__SCK__tp_func_kvm_hypercall;; (&__SCT__tp_func_kvm_hypercall); })(__data, nr, a0, a1, a2, a3); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hypercall.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hypercall.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_674(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hypercall.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hypercall.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hypercall.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hypercall.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hypercall.funcs)) == sizeof(long long))) __compiletime_assert_674(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hypercall.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hypercall.funcs)))) *)&((__tracepoint_kvm_hypercall.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hypercall.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hypercall(void (*probe)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hypercall, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hypercall(void (*probe)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hypercall, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hypercall(void (*probe)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hypercall, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hypercall(void (*cb)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hypercall_enabled(void) { return static_key_false(&__tracepoint_kvm_hypercall.key); };
# 66 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_hypercall(void *__data, __u16 code, bool fast, __u16 rep_cnt, __u16 rep_idx, __u64 ingpa, __u64 outgpa); extern struct static_call_key __SCK__tp_func_kvm_hv_hypercall; extern typeof(__traceiter_kvm_hv_hypercall) __SCT__tp_func_kvm_hv_hypercall;; extern struct tracepoint __tracepoint_kvm_hv_hypercall; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_hypercall(__u16 code, bool fast, __u16 rep_cnt, __u16 rep_idx, __u64 ingpa, __u64 outgpa) { if (static_key_false(&__tracepoint_kvm_hv_hypercall.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_hypercall)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_675(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_hypercall)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_hypercall)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_hypercall)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_hypercall)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_hypercall)->funcs) == sizeof(long long))) __compiletime_assert_675(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_hypercall)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_hypercall)->funcs))) *)&((&__tracepoint_kvm_hv_hypercall)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_hypercall)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_hypercall676 = (void *)&__SCK__tp_func_kvm_hv_hypercall;; (&__SCT__tp_func_kvm_hv_hypercall); })(__data, code, fast, rep_cnt, rep_idx, ingpa, outgpa); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_hypercall.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_hypercall.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_677(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_hypercall.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_hypercall.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_hypercall.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_hypercall.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_hypercall.funcs)) == sizeof(long long))) __compiletime_assert_677(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_hypercall.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_hypercall.funcs)))) *)&((__tracepoint_kvm_hv_hypercall.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_hypercall.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_hypercall(void (*probe)(void *__data, __u16 code, bool fast, __u16 rep_cnt, __u16 rep_idx, __u64 ingpa, __u64 outgpa), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_hypercall, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_hypercall(void (*probe)(void *__data, __u16 code, bool fast, __u16 rep_cnt, __u16 rep_idx, __u64 ingpa, __u64 outgpa), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_hypercall, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_hypercall(void (*probe)(void *__data, __u16 code, bool fast, __u16 rep_cnt, __u16 rep_idx, __u64 ingpa, __u64 outgpa), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_hypercall, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_hypercall(void (*cb)(void *__data, __u16 code, bool fast, __u16 rep_cnt, __u16 rep_idx, __u64 ingpa, __u64 outgpa)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_hypercall_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_hypercall.key); };
# 95 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_hypercall_done(void *__data, u64 result); extern struct static_call_key __SCK__tp_func_kvm_hv_hypercall_done; extern typeof(__traceiter_kvm_hv_hypercall_done) __SCT__tp_func_kvm_hv_hypercall_done;; extern struct tracepoint __tracepoint_kvm_hv_hypercall_done; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_hypercall_done(u64 result) { if (static_key_false(&__tracepoint_kvm_hv_hypercall_done.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_hypercall_done)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_678(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_hypercall_done)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_hypercall_done)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_hypercall_done)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_hypercall_done)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_hypercall_done)->funcs) == sizeof(long long))) __compiletime_assert_678(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_hypercall_done)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_hypercall_done)->funcs))) *)&((&__tracepoint_kvm_hv_hypercall_done)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_hypercall_done)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_hypercall_done679 = (void *)&__SCK__tp_func_kvm_hv_hypercall_done;; (&__SCT__tp_func_kvm_hv_hypercall_done); })(__data, result); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_hypercall_done.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_hypercall_done.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_680(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_hypercall_done.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_hypercall_done.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_hypercall_done.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_hypercall_done.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_hypercall_done.funcs)) == sizeof(long long))) __compiletime_assert_680(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_hypercall_done.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_hypercall_done.funcs)))) *)&((__tracepoint_kvm_hv_hypercall_done.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_hypercall_done.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_hypercall_done(void (*probe)(void *__data, u64 result), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_hypercall_done, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_hypercall_done(void (*probe)(void *__data, u64 result), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_hypercall_done, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_hypercall_done(void (*probe)(void *__data, u64 result), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_hypercall_done, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_hypercall_done(void (*cb)(void *__data, u64 result)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_hypercall_done_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_hypercall_done.key); };
# 113 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_xen_hypercall(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5); extern struct static_call_key __SCK__tp_func_kvm_xen_hypercall; extern typeof(__traceiter_kvm_xen_hypercall) __SCT__tp_func_kvm_xen_hypercall;; extern struct tracepoint __tracepoint_kvm_xen_hypercall; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_xen_hypercall(unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5) { if (static_key_false(&__tracepoint_kvm_xen_hypercall.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_xen_hypercall)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_681(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_xen_hypercall)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_xen_hypercall)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_xen_hypercall)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_xen_hypercall)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_xen_hypercall)->funcs) == sizeof(long long))) __compiletime_assert_681(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_xen_hypercall)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_xen_hypercall)->funcs))) *)&((&__tracepoint_kvm_xen_hypercall)->funcs)); }); ((typeof(*(&__tracepoint_kvm_xen_hypercall)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_xen_hypercall682 = (void *)&__SCK__tp_func_kvm_xen_hypercall;; (&__SCT__tp_func_kvm_xen_hypercall); })(__data, nr, a0, a1, a2, a3, a4, a5); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_xen_hypercall.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_xen_hypercall.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_683(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_xen_hypercall.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_xen_hypercall.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_xen_hypercall.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_xen_hypercall.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_xen_hypercall.funcs)) == sizeof(long long))) __compiletime_assert_683(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_xen_hypercall.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_xen_hypercall.funcs)))) *)&((__tracepoint_kvm_xen_hypercall.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_xen_hypercall.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_xen_hypercall(void (*probe)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_xen_hypercall, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_xen_hypercall(void (*probe)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_xen_hypercall, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_xen_hypercall(void (*probe)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_xen_hypercall, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_xen_hypercall(void (*cb)(void *__data, unsigned long nr, unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_xen_hypercall_enabled(void) { return static_key_false(&__tracepoint_kvm_xen_hypercall.key); };
# 153 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_pio(void *__data, unsigned int rw, unsigned int port, unsigned int size, unsigned int count, void *data); extern struct static_call_key __SCK__tp_func_kvm_pio; extern typeof(__traceiter_kvm_pio) __SCT__tp_func_kvm_pio;; extern struct tracepoint __tracepoint_kvm_pio; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_pio(unsigned int rw, unsigned int port, unsigned int size, unsigned int count, void *data) { if (static_key_false(&__tracepoint_kvm_pio.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_pio)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_684(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_pio)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_pio)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_pio)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_pio)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_pio)->funcs) == sizeof(long long))) __compiletime_assert_684(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_pio)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_pio)->funcs))) *)&((&__tracepoint_kvm_pio)->funcs)); }); ((typeof(*(&__tracepoint_kvm_pio)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_pio685 = (void *)&__SCK__tp_func_kvm_pio;; (&__SCT__tp_func_kvm_pio); })(__data, rw, port, size, count, data); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_pio.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_pio.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_686(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_pio.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_pio.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_pio.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_pio.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_pio.funcs)) == sizeof(long long))) __compiletime_assert_686(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_pio.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_pio.funcs)))) *)&((__tracepoint_kvm_pio.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_pio.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_pio(void (*probe)(void *__data, unsigned int rw, unsigned int port, unsigned int size, unsigned int count, void *data), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_pio, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_pio(void (*probe)(void *__data, unsigned int rw, unsigned int port, unsigned int size, unsigned int count, void *data), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_pio, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_pio(void (*probe)(void *__data, unsigned int rw, unsigned int port, unsigned int size, unsigned int count, void *data), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_pio, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_pio(void (*cb)(void *__data, unsigned int rw, unsigned int port, unsigned int size, unsigned int count, void *data)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_pio_enabled(void) { return static_key_false(&__tracepoint_kvm_pio.key); };
# 188 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_fast_mmio(void *__data, u64 gpa); extern struct static_call_key __SCK__tp_func_kvm_fast_mmio; extern typeof(__traceiter_kvm_fast_mmio) __SCT__tp_func_kvm_fast_mmio;; extern struct tracepoint __tracepoint_kvm_fast_mmio; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_fast_mmio(u64 gpa) { if (static_key_false(&__tracepoint_kvm_fast_mmio.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_fast_mmio)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_687(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_fast_mmio)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_fast_mmio)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_fast_mmio)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_fast_mmio)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_fast_mmio)->funcs) == sizeof(long long))) __compiletime_assert_687(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_fast_mmio)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_fast_mmio)->funcs))) *)&((&__tracepoint_kvm_fast_mmio)->funcs)); }); ((typeof(*(&__tracepoint_kvm_fast_mmio)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_fast_mmio688 = (void *)&__SCK__tp_func_kvm_fast_mmio;; (&__SCT__tp_func_kvm_fast_mmio); })(__data, gpa); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_fast_mmio.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_fast_mmio.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_689(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_fast_mmio.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_fast_mmio.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_fast_mmio.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_fast_mmio.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_fast_mmio.funcs)) == sizeof(long long))) __compiletime_assert_689(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_fast_mmio.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_fast_mmio.funcs)))) *)&((__tracepoint_kvm_fast_mmio.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_fast_mmio.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_fast_mmio(void (*probe)(void *__data, u64 gpa), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_fast_mmio, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_fast_mmio(void (*probe)(void *__data, u64 gpa), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_fast_mmio, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_fast_mmio(void (*probe)(void *__data, u64 gpa), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_fast_mmio, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_fast_mmio(void (*cb)(void *__data, u64 gpa)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_fast_mmio_enabled(void) { return static_key_false(&__tracepoint_kvm_fast_mmio.key); };
# 206 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_cpuid(void *__data, unsigned int function, unsigned int index, unsigned long rax, unsigned long rbx, unsigned long rcx, unsigned long rdx, bool found, bool used_max_basic); extern struct static_call_key __SCK__tp_func_kvm_cpuid; extern typeof(__traceiter_kvm_cpuid) __SCT__tp_func_kvm_cpuid;; extern struct tracepoint __tracepoint_kvm_cpuid; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_cpuid(unsigned int function, unsigned int index, unsigned long rax, unsigned long rbx, unsigned long rcx, unsigned long rdx, bool found, bool used_max_basic) { if (static_key_false(&__tracepoint_kvm_cpuid.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_cpuid)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_690(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_cpuid)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_cpuid)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_cpuid)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_cpuid)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_cpuid)->funcs) == sizeof(long long))) __compiletime_assert_690(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_cpuid)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_cpuid)->funcs))) *)&((&__tracepoint_kvm_cpuid)->funcs)); }); ((typeof(*(&__tracepoint_kvm_cpuid)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_cpuid691 = (void *)&__SCK__tp_func_kvm_cpuid;; (&__SCT__tp_func_kvm_cpuid); })(__data, function, index, rax, rbx, rcx, rdx, found, used_max_basic); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_cpuid.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_cpuid.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_692(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_cpuid.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_cpuid.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_cpuid.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_cpuid.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_cpuid.funcs)) == sizeof(long long))) __compiletime_assert_692(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_cpuid.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_cpuid.funcs)))) *)&((__tracepoint_kvm_cpuid.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_cpuid.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_cpuid(void (*probe)(void *__data, unsigned int function, unsigned int index, unsigned long rax, unsigned long rbx, unsigned long rcx, unsigned long rdx, bool found, bool used_max_basic), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_cpuid, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_cpuid(void (*probe)(void *__data, unsigned int function, unsigned int index, unsigned long rax, unsigned long rbx, unsigned long rcx, unsigned long rdx, bool found, bool used_max_basic), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_cpuid, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_cpuid(void (*probe)(void *__data, unsigned int function, unsigned int index, unsigned long rax, unsigned long rbx, unsigned long rcx, unsigned long rdx, bool found, bool used_max_basic), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_cpuid, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_cpuid(void (*cb)(void *__data, unsigned int function, unsigned int index, unsigned long rax, unsigned long rbx, unsigned long rcx, unsigned long rdx, bool found, bool used_max_basic)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_cpuid_enabled(void) { return static_key_false(&__tracepoint_kvm_cpuid.key); };
# 253 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_apic(void *__data, unsigned int rw, unsigned int reg, unsigned int val); extern struct static_call_key __SCK__tp_func_kvm_apic; extern typeof(__traceiter_kvm_apic) __SCT__tp_func_kvm_apic;; extern struct tracepoint __tracepoint_kvm_apic; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_apic(unsigned int rw, unsigned int reg, unsigned int val) { if (static_key_false(&__tracepoint_kvm_apic.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_apic)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_693(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_apic)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_apic)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_apic)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_apic)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_apic)->funcs) == sizeof(long long))) __compiletime_assert_693(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_apic)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_apic)->funcs))) *)&((&__tracepoint_kvm_apic)->funcs)); }); ((typeof(*(&__tracepoint_kvm_apic)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_apic694 = (void *)&__SCK__tp_func_kvm_apic;; (&__SCT__tp_func_kvm_apic); })(__data, rw, reg, val); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_apic.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_apic.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_695(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_apic.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_apic.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_apic.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_apic.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_apic.funcs)) == sizeof(long long))) __compiletime_assert_695(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_apic.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_apic.funcs)))) *)&((__tracepoint_kvm_apic.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_apic.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_apic(void (*probe)(void *__data, unsigned int rw, unsigned int reg, unsigned int val), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_apic, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_apic(void (*probe)(void *__data, unsigned int rw, unsigned int reg, unsigned int val), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_apic, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_apic(void (*probe)(void *__data, unsigned int rw, unsigned int reg, unsigned int val), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_apic, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_apic(void (*cb)(void *__data, unsigned int rw, unsigned int reg, unsigned int val)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_apic_enabled(void) { return static_key_false(&__tracepoint_kvm_apic.key); };
# 328 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_exit(void *__data, struct kvm_vcpu *vcpu, u32 isa); extern struct static_call_key __SCK__tp_func_kvm_exit; extern typeof(__traceiter_kvm_exit) __SCT__tp_func_kvm_exit;; extern struct tracepoint __tracepoint_kvm_exit; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_exit(struct kvm_vcpu *vcpu, u32 isa) { if (static_key_false(&__tracepoint_kvm_exit.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_exit)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_696(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_exit)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_exit)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_exit)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_exit)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_exit)->funcs) == sizeof(long long))) __compiletime_assert_696(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_exit)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_exit)->funcs))) *)&((&__tracepoint_kvm_exit)->funcs)); }); ((typeof(*(&__tracepoint_kvm_exit)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_exit697 = (void *)&__SCK__tp_func_kvm_exit;; (&__SCT__tp_func_kvm_exit); })(__data, vcpu, isa); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_exit.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_exit.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_698(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_exit.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_exit.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_exit.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_exit.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_exit.funcs)) == sizeof(long long))) __compiletime_assert_698(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_exit.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_exit.funcs)))) *)&((__tracepoint_kvm_exit.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_exit.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_exit(void (*probe)(void *__data, struct kvm_vcpu *vcpu, u32 isa), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_exit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_exit(void (*probe)(void *__data, struct kvm_vcpu *vcpu, u32 isa), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_exit, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_exit(void (*probe)(void *__data, struct kvm_vcpu *vcpu, u32 isa), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_exit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_exit(void (*cb)(void *__data, struct kvm_vcpu *vcpu, u32 isa)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_exit_enabled(void) { return static_key_false(&__tracepoint_kvm_exit.key); };




extern int __traceiter_kvm_inj_virq(void *__data, unsigned int irq); extern struct static_call_key __SCK__tp_func_kvm_inj_virq; extern typeof(__traceiter_kvm_inj_virq) __SCT__tp_func_kvm_inj_virq;; extern struct tracepoint __tracepoint_kvm_inj_virq; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_inj_virq(unsigned int irq) { if (static_key_false(&__tracepoint_kvm_inj_virq.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_inj_virq)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_699(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_inj_virq)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_inj_virq)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_inj_virq)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_inj_virq)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_inj_virq)->funcs) == sizeof(long long))) __compiletime_assert_699(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_inj_virq)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_inj_virq)->funcs))) *)&((&__tracepoint_kvm_inj_virq)->funcs)); }); ((typeof(*(&__tracepoint_kvm_inj_virq)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_inj_virq700 = (void *)&__SCK__tp_func_kvm_inj_virq;; (&__SCT__tp_func_kvm_inj_virq); })(__data, irq); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_inj_virq.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_inj_virq.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_701(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_inj_virq.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_inj_virq.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_inj_virq.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_inj_virq.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_inj_virq.funcs)) == sizeof(long long))) __compiletime_assert_701(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_inj_virq.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_inj_virq.funcs)))) *)&((__tracepoint_kvm_inj_virq.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_inj_virq.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_inj_virq(void (*probe)(void *__data, unsigned int irq), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_inj_virq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_inj_virq(void (*probe)(void *__data, unsigned int irq), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_inj_virq, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_inj_virq(void (*probe)(void *__data, unsigned int irq), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_inj_virq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_inj_virq(void (*cb)(void *__data, unsigned int irq)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_inj_virq_enabled(void) { return static_key_false(&__tracepoint_kvm_inj_virq.key); };
# 358 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_inj_exception(void *__data, unsigned exception, bool has_error, unsigned error_code); extern struct static_call_key __SCK__tp_func_kvm_inj_exception; extern typeof(__traceiter_kvm_inj_exception) __SCT__tp_func_kvm_inj_exception;; extern struct tracepoint __tracepoint_kvm_inj_exception; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_inj_exception(unsigned exception, bool has_error, unsigned error_code) { if (static_key_false(&__tracepoint_kvm_inj_exception.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_inj_exception)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_702(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_inj_exception)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_inj_exception)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_inj_exception)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_inj_exception)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_inj_exception)->funcs) == sizeof(long long))) __compiletime_assert_702(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_inj_exception)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_inj_exception)->funcs))) *)&((&__tracepoint_kvm_inj_exception)->funcs)); }); ((typeof(*(&__tracepoint_kvm_inj_exception)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_inj_exception703 = (void *)&__SCK__tp_func_kvm_inj_exception;; (&__SCT__tp_func_kvm_inj_exception); })(__data, exception, has_error, error_code); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_inj_exception.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_inj_exception.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_704(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_inj_exception.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_inj_exception.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_inj_exception.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_inj_exception.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_inj_exception.funcs)) == sizeof(long long))) __compiletime_assert_704(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_inj_exception.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_inj_exception.funcs)))) *)&((__tracepoint_kvm_inj_exception.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_inj_exception.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_inj_exception(void (*probe)(void *__data, unsigned exception, bool has_error, unsigned error_code), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_inj_exception, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_inj_exception(void (*probe)(void *__data, unsigned exception, bool has_error, unsigned error_code), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_inj_exception, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_inj_exception(void (*probe)(void *__data, unsigned exception, bool has_error, unsigned error_code), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_inj_exception, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_inj_exception(void (*cb)(void *__data, unsigned exception, bool has_error, unsigned error_code)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_inj_exception_enabled(void) { return static_key_false(&__tracepoint_kvm_inj_exception.key); };
# 383 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_page_fault(void *__data, unsigned long fault_address, unsigned int error_code); extern struct static_call_key __SCK__tp_func_kvm_page_fault; extern typeof(__traceiter_kvm_page_fault) __SCT__tp_func_kvm_page_fault;; extern struct tracepoint __tracepoint_kvm_page_fault; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_page_fault(unsigned long fault_address, unsigned int error_code) { if (static_key_false(&__tracepoint_kvm_page_fault.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_page_fault)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_705(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_page_fault)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_page_fault)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_page_fault)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_page_fault)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_page_fault)->funcs) == sizeof(long long))) __compiletime_assert_705(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_page_fault)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_page_fault)->funcs))) *)&((&__tracepoint_kvm_page_fault)->funcs)); }); ((typeof(*(&__tracepoint_kvm_page_fault)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_page_fault706 = (void *)&__SCK__tp_func_kvm_page_fault;; (&__SCT__tp_func_kvm_page_fault); })(__data, fault_address, error_code); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_page_fault.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_page_fault.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_707(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_page_fault.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_page_fault.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_page_fault.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_page_fault.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_page_fault.funcs)) == sizeof(long long))) __compiletime_assert_707(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_page_fault.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_page_fault.funcs)))) *)&((__tracepoint_kvm_page_fault.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_page_fault.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_page_fault(void (*probe)(void *__data, unsigned long fault_address, unsigned int error_code), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_page_fault, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_page_fault(void (*probe)(void *__data, unsigned long fault_address, unsigned int error_code), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_page_fault, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_page_fault(void (*probe)(void *__data, unsigned long fault_address, unsigned int error_code), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_page_fault, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_page_fault(void (*cb)(void *__data, unsigned long fault_address, unsigned int error_code)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_page_fault_enabled(void) { return static_key_false(&__tracepoint_kvm_page_fault.key); };
# 404 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_msr(void *__data, unsigned write, u32 ecx, u64 data, bool exception); extern struct static_call_key __SCK__tp_func_kvm_msr; extern typeof(__traceiter_kvm_msr) __SCT__tp_func_kvm_msr;; extern struct tracepoint __tracepoint_kvm_msr; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_msr(unsigned write, u32 ecx, u64 data, bool exception) { if (static_key_false(&__tracepoint_kvm_msr.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_msr)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_708(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_msr)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_msr)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_msr)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_msr)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_msr)->funcs) == sizeof(long long))) __compiletime_assert_708(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_msr)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_msr)->funcs))) *)&((&__tracepoint_kvm_msr)->funcs)); }); ((typeof(*(&__tracepoint_kvm_msr)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_msr709 = (void *)&__SCK__tp_func_kvm_msr;; (&__SCT__tp_func_kvm_msr); })(__data, write, ecx, data, exception); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_msr.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_msr.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_710(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_msr.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_msr.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_msr.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_msr.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_msr.funcs)) == sizeof(long long))) __compiletime_assert_710(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_msr.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_msr.funcs)))) *)&((__tracepoint_kvm_msr.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_msr.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_msr(void (*probe)(void *__data, unsigned write, u32 ecx, u64 data, bool exception), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_msr(void (*probe)(void *__data, unsigned write, u32 ecx, u64 data, bool exception), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_msr, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_msr(void (*probe)(void *__data, unsigned write, u32 ecx, u64 data, bool exception), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_msr(void (*cb)(void *__data, unsigned write, u32 ecx, u64 data, bool exception)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_msr_enabled(void) { return static_key_false(&__tracepoint_kvm_msr.key); };
# 436 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_cr(void *__data, unsigned int rw, unsigned int cr, unsigned long val); extern struct static_call_key __SCK__tp_func_kvm_cr; extern typeof(__traceiter_kvm_cr) __SCT__tp_func_kvm_cr;; extern struct tracepoint __tracepoint_kvm_cr; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_cr(unsigned int rw, unsigned int cr, unsigned long val) { if (static_key_false(&__tracepoint_kvm_cr.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_cr)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_711(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_cr)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_cr)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_cr)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_cr)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_cr)->funcs) == sizeof(long long))) __compiletime_assert_711(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_cr)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_cr)->funcs))) *)&((&__tracepoint_kvm_cr)->funcs)); }); ((typeof(*(&__tracepoint_kvm_cr)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_cr712 = (void *)&__SCK__tp_func_kvm_cr;; (&__SCT__tp_func_kvm_cr); })(__data, rw, cr, val); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_cr.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_cr.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_713(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_cr.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_cr.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_cr.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_cr.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_cr.funcs)) == sizeof(long long))) __compiletime_assert_713(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_cr.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_cr.funcs)))) *)&((__tracepoint_kvm_cr.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_cr.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_cr(void (*probe)(void *__data, unsigned int rw, unsigned int cr, unsigned long val), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_cr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_cr(void (*probe)(void *__data, unsigned int rw, unsigned int cr, unsigned long val), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_cr, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_cr(void (*probe)(void *__data, unsigned int rw, unsigned int cr, unsigned long val), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_cr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_cr(void (*cb)(void *__data, unsigned int rw, unsigned int cr, unsigned long val)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_cr_enabled(void) { return static_key_false(&__tracepoint_kvm_cr.key); };
# 460 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_pic_set_irq(void *__data, __u8 chip, __u8 pin, __u8 elcr, __u8 imr, bool coalesced); extern struct static_call_key __SCK__tp_func_kvm_pic_set_irq; extern typeof(__traceiter_kvm_pic_set_irq) __SCT__tp_func_kvm_pic_set_irq;; extern struct tracepoint __tracepoint_kvm_pic_set_irq; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_pic_set_irq(__u8 chip, __u8 pin, __u8 elcr, __u8 imr, bool coalesced) { if (static_key_false(&__tracepoint_kvm_pic_set_irq.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_pic_set_irq)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_714(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_pic_set_irq)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_pic_set_irq)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_pic_set_irq)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_pic_set_irq)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_pic_set_irq)->funcs) == sizeof(long long))) __compiletime_assert_714(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_pic_set_irq)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_pic_set_irq)->funcs))) *)&((&__tracepoint_kvm_pic_set_irq)->funcs)); }); ((typeof(*(&__tracepoint_kvm_pic_set_irq)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_pic_set_irq715 = (void *)&__SCK__tp_func_kvm_pic_set_irq;; (&__SCT__tp_func_kvm_pic_set_irq); })(__data, chip, pin, elcr, imr, coalesced); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_pic_set_irq.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_pic_set_irq.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_716(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_pic_set_irq.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_pic_set_irq.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_pic_set_irq.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_pic_set_irq.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_pic_set_irq.funcs)) == sizeof(long long))) __compiletime_assert_716(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_pic_set_irq.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_pic_set_irq.funcs)))) *)&((__tracepoint_kvm_pic_set_irq.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_pic_set_irq.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_pic_set_irq(void (*probe)(void *__data, __u8 chip, __u8 pin, __u8 elcr, __u8 imr, bool coalesced), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_pic_set_irq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_pic_set_irq(void (*probe)(void *__data, __u8 chip, __u8 pin, __u8 elcr, __u8 imr, bool coalesced), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_pic_set_irq, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_pic_set_irq(void (*probe)(void *__data, __u8 chip, __u8 pin, __u8 elcr, __u8 imr, bool coalesced), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_pic_set_irq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_pic_set_irq(void (*cb)(void *__data, __u8 chip, __u8 pin, __u8 elcr, __u8 imr, bool coalesced)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_pic_set_irq_enabled(void) { return static_key_false(&__tracepoint_kvm_pic_set_irq.key); };
# 493 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_apic_ipi(void *__data, __u32 icr_low, __u32 dest_id); extern struct static_call_key __SCK__tp_func_kvm_apic_ipi; extern typeof(__traceiter_kvm_apic_ipi) __SCT__tp_func_kvm_apic_ipi;; extern struct tracepoint __tracepoint_kvm_apic_ipi; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_apic_ipi(__u32 icr_low, __u32 dest_id) { if (static_key_false(&__tracepoint_kvm_apic_ipi.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_apic_ipi)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_717(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_apic_ipi)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_apic_ipi)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_apic_ipi)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_apic_ipi)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_apic_ipi)->funcs) == sizeof(long long))) __compiletime_assert_717(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_apic_ipi)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_apic_ipi)->funcs))) *)&((&__tracepoint_kvm_apic_ipi)->funcs)); }); ((typeof(*(&__tracepoint_kvm_apic_ipi)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_apic_ipi718 = (void *)&__SCK__tp_func_kvm_apic_ipi;; (&__SCT__tp_func_kvm_apic_ipi); })(__data, icr_low, dest_id); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_apic_ipi.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_apic_ipi.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_719(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_apic_ipi.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_apic_ipi.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_apic_ipi.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_apic_ipi.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_apic_ipi.funcs)) == sizeof(long long))) __compiletime_assert_719(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_apic_ipi.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_apic_ipi.funcs)))) *)&((__tracepoint_kvm_apic_ipi.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_apic_ipi.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_apic_ipi(void (*probe)(void *__data, __u32 icr_low, __u32 dest_id), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_apic_ipi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_apic_ipi(void (*probe)(void *__data, __u32 icr_low, __u32 dest_id), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_apic_ipi, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_apic_ipi(void (*probe)(void *__data, __u32 icr_low, __u32 dest_id), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_apic_ipi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_apic_ipi(void (*cb)(void *__data, __u32 icr_low, __u32 dest_id)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_apic_ipi_enabled(void) { return static_key_false(&__tracepoint_kvm_apic_ipi.key); };
# 518 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_apic_accept_irq(void *__data, __u32 apicid, __u16 dm, __u16 tm, __u8 vec); extern struct static_call_key __SCK__tp_func_kvm_apic_accept_irq; extern typeof(__traceiter_kvm_apic_accept_irq) __SCT__tp_func_kvm_apic_accept_irq;; extern struct tracepoint __tracepoint_kvm_apic_accept_irq; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_apic_accept_irq(__u32 apicid, __u16 dm, __u16 tm, __u8 vec) { if (static_key_false(&__tracepoint_kvm_apic_accept_irq.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_apic_accept_irq)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_720(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_apic_accept_irq)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_apic_accept_irq)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_apic_accept_irq)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_apic_accept_irq)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_apic_accept_irq)->funcs) == sizeof(long long))) __compiletime_assert_720(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_apic_accept_irq)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_apic_accept_irq)->funcs))) *)&((&__tracepoint_kvm_apic_accept_irq)->funcs)); }); ((typeof(*(&__tracepoint_kvm_apic_accept_irq)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_apic_accept_irq721 = (void *)&__SCK__tp_func_kvm_apic_accept_irq;; (&__SCT__tp_func_kvm_apic_accept_irq); })(__data, apicid, dm, tm, vec); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_apic_accept_irq.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_apic_accept_irq.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_722(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_apic_accept_irq.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_apic_accept_irq.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_apic_accept_irq.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_apic_accept_irq.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_apic_accept_irq.funcs)) == sizeof(long long))) __compiletime_assert_722(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_apic_accept_irq.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_apic_accept_irq.funcs)))) *)&((__tracepoint_kvm_apic_accept_irq.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_apic_accept_irq.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_apic_accept_irq(void (*probe)(void *__data, __u32 apicid, __u16 dm, __u16 tm, __u8 vec), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_apic_accept_irq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_apic_accept_irq(void (*probe)(void *__data, __u32 apicid, __u16 dm, __u16 tm, __u8 vec), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_apic_accept_irq, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_apic_accept_irq(void (*probe)(void *__data, __u32 apicid, __u16 dm, __u16 tm, __u8 vec), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_apic_accept_irq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_apic_accept_irq(void (*cb)(void *__data, __u32 apicid, __u16 dm, __u16 tm, __u8 vec)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_apic_accept_irq_enabled(void) { return static_key_false(&__tracepoint_kvm_apic_accept_irq.key); };
# 542 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_eoi(void *__data, struct kvm_lapic *apic, int vector); extern struct static_call_key __SCK__tp_func_kvm_eoi; extern typeof(__traceiter_kvm_eoi) __SCT__tp_func_kvm_eoi;; extern struct tracepoint __tracepoint_kvm_eoi; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_eoi(struct kvm_lapic *apic, int vector) { if (static_key_false(&__tracepoint_kvm_eoi.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_eoi)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_723(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_eoi)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_eoi)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_eoi)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_eoi)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_eoi)->funcs) == sizeof(long long))) __compiletime_assert_723(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_eoi)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_eoi)->funcs))) *)&((&__tracepoint_kvm_eoi)->funcs)); }); ((typeof(*(&__tracepoint_kvm_eoi)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_eoi724 = (void *)&__SCK__tp_func_kvm_eoi;; (&__SCT__tp_func_kvm_eoi); })(__data, apic, vector); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_eoi.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_eoi.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_725(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_eoi.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_eoi.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_eoi.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_eoi.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_eoi.funcs)) == sizeof(long long))) __compiletime_assert_725(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_eoi.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_eoi.funcs)))) *)&((__tracepoint_kvm_eoi.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_eoi.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_eoi(void (*probe)(void *__data, struct kvm_lapic *apic, int vector), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_eoi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_eoi(void (*probe)(void *__data, struct kvm_lapic *apic, int vector), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_eoi, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_eoi(void (*probe)(void *__data, struct kvm_lapic *apic, int vector), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_eoi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_eoi(void (*cb)(void *__data, struct kvm_lapic *apic, int vector)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_eoi_enabled(void) { return static_key_false(&__tracepoint_kvm_eoi.key); };
# 559 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_pv_eoi(void *__data, struct kvm_lapic *apic, int vector); extern struct static_call_key __SCK__tp_func_kvm_pv_eoi; extern typeof(__traceiter_kvm_pv_eoi) __SCT__tp_func_kvm_pv_eoi;; extern struct tracepoint __tracepoint_kvm_pv_eoi; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_pv_eoi(struct kvm_lapic *apic, int vector) { if (static_key_false(&__tracepoint_kvm_pv_eoi.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_pv_eoi)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_726(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_pv_eoi)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_pv_eoi)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_pv_eoi)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_pv_eoi)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_pv_eoi)->funcs) == sizeof(long long))) __compiletime_assert_726(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_pv_eoi)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_pv_eoi)->funcs))) *)&((&__tracepoint_kvm_pv_eoi)->funcs)); }); ((typeof(*(&__tracepoint_kvm_pv_eoi)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_pv_eoi727 = (void *)&__SCK__tp_func_kvm_pv_eoi;; (&__SCT__tp_func_kvm_pv_eoi); })(__data, apic, vector); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_pv_eoi.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_pv_eoi.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_728(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_pv_eoi.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_pv_eoi.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_pv_eoi.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_pv_eoi.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_pv_eoi.funcs)) == sizeof(long long))) __compiletime_assert_728(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_pv_eoi.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_pv_eoi.funcs)))) *)&((__tracepoint_kvm_pv_eoi.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_pv_eoi.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_pv_eoi(void (*probe)(void *__data, struct kvm_lapic *apic, int vector), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_pv_eoi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_pv_eoi(void (*probe)(void *__data, struct kvm_lapic *apic, int vector), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_pv_eoi, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_pv_eoi(void (*probe)(void *__data, struct kvm_lapic *apic, int vector), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_pv_eoi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_pv_eoi(void (*cb)(void *__data, struct kvm_lapic *apic, int vector)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_pv_eoi_enabled(void) { return static_key_false(&__tracepoint_kvm_pv_eoi.key); };
# 579 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_nested_vmrun(void *__data, __u64 rip, __u64 vmcb, __u64 nested_rip, __u32 int_ctl, __u32 event_inj, bool npt); extern struct static_call_key __SCK__tp_func_kvm_nested_vmrun; extern typeof(__traceiter_kvm_nested_vmrun) __SCT__tp_func_kvm_nested_vmrun;; extern struct tracepoint __tracepoint_kvm_nested_vmrun; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_nested_vmrun(__u64 rip, __u64 vmcb, __u64 nested_rip, __u32 int_ctl, __u32 event_inj, bool npt) { if (static_key_false(&__tracepoint_kvm_nested_vmrun.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_nested_vmrun)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_729(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_nested_vmrun)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_nested_vmrun)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_nested_vmrun)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_nested_vmrun)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_nested_vmrun)->funcs) == sizeof(long long))) __compiletime_assert_729(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_nested_vmrun)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_nested_vmrun)->funcs))) *)&((&__tracepoint_kvm_nested_vmrun)->funcs)); }); ((typeof(*(&__tracepoint_kvm_nested_vmrun)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_nested_vmrun730 = (void *)&__SCK__tp_func_kvm_nested_vmrun;; (&__SCT__tp_func_kvm_nested_vmrun); })(__data, rip, vmcb, nested_rip, int_ctl, event_inj, npt); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_nested_vmrun.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_nested_vmrun.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_731(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_nested_vmrun.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_nested_vmrun.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_nested_vmrun.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_nested_vmrun.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_nested_vmrun.funcs)) == sizeof(long long))) __compiletime_assert_731(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_nested_vmrun.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_nested_vmrun.funcs)))) *)&((__tracepoint_kvm_nested_vmrun.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_nested_vmrun.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_nested_vmrun(void (*probe)(void *__data, __u64 rip, __u64 vmcb, __u64 nested_rip, __u32 int_ctl, __u32 event_inj, bool npt), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_nested_vmrun, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_nested_vmrun(void (*probe)(void *__data, __u64 rip, __u64 vmcb, __u64 nested_rip, __u32 int_ctl, __u32 event_inj, bool npt), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_nested_vmrun, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_nested_vmrun(void (*probe)(void *__data, __u64 rip, __u64 vmcb, __u64 nested_rip, __u32 int_ctl, __u32 event_inj, bool npt), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_nested_vmrun, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_nested_vmrun(void (*cb)(void *__data, __u64 rip, __u64 vmcb, __u64 nested_rip, __u32 int_ctl, __u32 event_inj, bool npt)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_nested_vmrun_enabled(void) { return static_key_false(&__tracepoint_kvm_nested_vmrun.key); };
# 609 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_nested_intercepts(void *__data, __u16 cr_read, __u16 cr_write, __u32 exceptions, __u32 intercept1, __u32 intercept2, __u32 intercept3); extern struct static_call_key __SCK__tp_func_kvm_nested_intercepts; extern typeof(__traceiter_kvm_nested_intercepts) __SCT__tp_func_kvm_nested_intercepts;; extern struct tracepoint __tracepoint_kvm_nested_intercepts; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_nested_intercepts(__u16 cr_read, __u16 cr_write, __u32 exceptions, __u32 intercept1, __u32 intercept2, __u32 intercept3) { if (static_key_false(&__tracepoint_kvm_nested_intercepts.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_nested_intercepts)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_732(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_nested_intercepts)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_nested_intercepts)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_nested_intercepts)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_nested_intercepts)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_nested_intercepts)->funcs) == sizeof(long long))) __compiletime_assert_732(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_nested_intercepts)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_nested_intercepts)->funcs))) *)&((&__tracepoint_kvm_nested_intercepts)->funcs)); }); ((typeof(*(&__tracepoint_kvm_nested_intercepts)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_nested_intercepts733 = (void *)&__SCK__tp_func_kvm_nested_intercepts;; (&__SCT__tp_func_kvm_nested_intercepts); })(__data, cr_read, cr_write, exceptions, intercept1, intercept2, intercept3); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_nested_intercepts.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_nested_intercepts.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_734(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_nested_intercepts.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_nested_intercepts.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_nested_intercepts.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_nested_intercepts.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_nested_intercepts.funcs)) == sizeof(long long))) __compiletime_assert_734(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_nested_intercepts.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_nested_intercepts.funcs)))) *)&((__tracepoint_kvm_nested_intercepts.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_nested_intercepts.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_nested_intercepts(void (*probe)(void *__data, __u16 cr_read, __u16 cr_write, __u32 exceptions, __u32 intercept1, __u32 intercept2, __u32 intercept3), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_nested_intercepts, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_nested_intercepts(void (*probe)(void *__data, __u16 cr_read, __u16 cr_write, __u32 exceptions, __u32 intercept1, __u32 intercept2, __u32 intercept3), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_nested_intercepts, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_nested_intercepts(void (*probe)(void *__data, __u16 cr_read, __u16 cr_write, __u32 exceptions, __u32 intercept1, __u32 intercept2, __u32 intercept3), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_nested_intercepts, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_nested_intercepts(void (*cb)(void *__data, __u16 cr_read, __u16 cr_write, __u32 exceptions, __u32 intercept1, __u32 intercept2, __u32 intercept3)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_nested_intercepts_enabled(void) { return static_key_false(&__tracepoint_kvm_nested_intercepts.key); };
# 641 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_nested_vmexit(void *__data, struct kvm_vcpu *vcpu, u32 isa); extern struct static_call_key __SCK__tp_func_kvm_nested_vmexit; extern typeof(__traceiter_kvm_nested_vmexit) __SCT__tp_func_kvm_nested_vmexit;; extern struct tracepoint __tracepoint_kvm_nested_vmexit; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_nested_vmexit(struct kvm_vcpu *vcpu, u32 isa) { if (static_key_false(&__tracepoint_kvm_nested_vmexit.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_nested_vmexit)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_735(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_nested_vmexit)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_nested_vmexit)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_nested_vmexit)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_nested_vmexit)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_nested_vmexit)->funcs) == sizeof(long long))) __compiletime_assert_735(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_nested_vmexit)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_nested_vmexit)->funcs))) *)&((&__tracepoint_kvm_nested_vmexit)->funcs)); }); ((typeof(*(&__tracepoint_kvm_nested_vmexit)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_nested_vmexit736 = (void *)&__SCK__tp_func_kvm_nested_vmexit;; (&__SCT__tp_func_kvm_nested_vmexit); })(__data, vcpu, isa); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_nested_vmexit.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_nested_vmexit.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_737(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_nested_vmexit.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_nested_vmexit.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_nested_vmexit.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_nested_vmexit.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_nested_vmexit.funcs)) == sizeof(long long))) __compiletime_assert_737(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_nested_vmexit.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_nested_vmexit.funcs)))) *)&((__tracepoint_kvm_nested_vmexit.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_nested_vmexit.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_nested_vmexit(void (*probe)(void *__data, struct kvm_vcpu *vcpu, u32 isa), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_nested_vmexit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_nested_vmexit(void (*probe)(void *__data, struct kvm_vcpu *vcpu, u32 isa), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_nested_vmexit, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_nested_vmexit(void (*probe)(void *__data, struct kvm_vcpu *vcpu, u32 isa), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_nested_vmexit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_nested_vmexit(void (*cb)(void *__data, struct kvm_vcpu *vcpu, u32 isa)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_nested_vmexit_enabled(void) { return static_key_false(&__tracepoint_kvm_nested_vmexit.key); };




extern int __traceiter_kvm_nested_vmexit_inject(void *__data, __u32 exit_code, __u64 exit_info1, __u64 exit_info2, __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa); extern struct static_call_key __SCK__tp_func_kvm_nested_vmexit_inject; extern typeof(__traceiter_kvm_nested_vmexit_inject) __SCT__tp_func_kvm_nested_vmexit_inject;; extern struct tracepoint __tracepoint_kvm_nested_vmexit_inject; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_nested_vmexit_inject(__u32 exit_code, __u64 exit_info1, __u64 exit_info2, __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa) { if (static_key_false(&__tracepoint_kvm_nested_vmexit_inject.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_nested_vmexit_inject)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_738(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_nested_vmexit_inject)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_nested_vmexit_inject)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_nested_vmexit_inject)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_nested_vmexit_inject)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_nested_vmexit_inject)->funcs) == sizeof(long long))) __compiletime_assert_738(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_nested_vmexit_inject)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_nested_vmexit_inject)->funcs))) *)&((&__tracepoint_kvm_nested_vmexit_inject)->funcs)); }); ((typeof(*(&__tracepoint_kvm_nested_vmexit_inject)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_nested_vmexit_inject739 = (void *)&__SCK__tp_func_kvm_nested_vmexit_inject;; (&__SCT__tp_func_kvm_nested_vmexit_inject); })(__data, exit_code, exit_info1, exit_info2, exit_int_info, exit_int_info_err, isa); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_nested_vmexit_inject.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_nested_vmexit_inject.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_740(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_nested_vmexit_inject.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_nested_vmexit_inject.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_nested_vmexit_inject.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_nested_vmexit_inject.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_nested_vmexit_inject.funcs)) == sizeof(long long))) __compiletime_assert_740(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_nested_vmexit_inject.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_nested_vmexit_inject.funcs)))) *)&((__tracepoint_kvm_nested_vmexit_inject.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_nested_vmexit_inject.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_nested_vmexit_inject(void (*probe)(void *__data, __u32 exit_code, __u64 exit_info1, __u64 exit_info2, __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_nested_vmexit_inject, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_nested_vmexit_inject(void (*probe)(void *__data, __u32 exit_code, __u64 exit_info1, __u64 exit_info2, __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_nested_vmexit_inject, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_nested_vmexit_inject(void (*probe)(void *__data, __u32 exit_code, __u64 exit_info1, __u64 exit_info2, __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_nested_vmexit_inject, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_nested_vmexit_inject(void (*cb)(void *__data, __u32 exit_code, __u64 exit_info1, __u64 exit_info2, __u32 exit_int_info, __u32 exit_int_info_err, __u32 isa)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_nested_vmexit_inject_enabled(void) { return static_key_false(&__tracepoint_kvm_nested_vmexit_inject.key); };
# 681 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_nested_intr_vmexit(void *__data, __u64 rip); extern struct static_call_key __SCK__tp_func_kvm_nested_intr_vmexit; extern typeof(__traceiter_kvm_nested_intr_vmexit) __SCT__tp_func_kvm_nested_intr_vmexit;; extern struct tracepoint __tracepoint_kvm_nested_intr_vmexit; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_nested_intr_vmexit(__u64 rip) { if (static_key_false(&__tracepoint_kvm_nested_intr_vmexit.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_nested_intr_vmexit)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_741(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_nested_intr_vmexit)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_nested_intr_vmexit)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_nested_intr_vmexit)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_nested_intr_vmexit)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_nested_intr_vmexit)->funcs) == sizeof(long long))) __compiletime_assert_741(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_nested_intr_vmexit)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_nested_intr_vmexit)->funcs))) *)&((&__tracepoint_kvm_nested_intr_vmexit)->funcs)); }); ((typeof(*(&__tracepoint_kvm_nested_intr_vmexit)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_nested_intr_vmexit742 = (void *)&__SCK__tp_func_kvm_nested_intr_vmexit;; (&__SCT__tp_func_kvm_nested_intr_vmexit); })(__data, rip); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_nested_intr_vmexit.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_nested_intr_vmexit.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_743(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_nested_intr_vmexit.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_nested_intr_vmexit.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_nested_intr_vmexit.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_nested_intr_vmexit.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_nested_intr_vmexit.funcs)) == sizeof(long long))) __compiletime_assert_743(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_nested_intr_vmexit.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_nested_intr_vmexit.funcs)))) *)&((__tracepoint_kvm_nested_intr_vmexit.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_nested_intr_vmexit.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_nested_intr_vmexit(void (*probe)(void *__data, __u64 rip), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_nested_intr_vmexit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_nested_intr_vmexit(void (*probe)(void *__data, __u64 rip), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_nested_intr_vmexit, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_nested_intr_vmexit(void (*probe)(void *__data, __u64 rip), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_nested_intr_vmexit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_nested_intr_vmexit(void (*cb)(void *__data, __u64 rip)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_nested_intr_vmexit_enabled(void) { return static_key_false(&__tracepoint_kvm_nested_intr_vmexit.key); };
# 699 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_invlpga(void *__data, __u64 rip, int asid, u64 address); extern struct static_call_key __SCK__tp_func_kvm_invlpga; extern typeof(__traceiter_kvm_invlpga) __SCT__tp_func_kvm_invlpga;; extern struct tracepoint __tracepoint_kvm_invlpga; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_invlpga(__u64 rip, int asid, u64 address) { if (static_key_false(&__tracepoint_kvm_invlpga.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_invlpga)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_744(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_invlpga)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_invlpga)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_invlpga)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_invlpga)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_invlpga)->funcs) == sizeof(long long))) __compiletime_assert_744(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_invlpga)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_invlpga)->funcs))) *)&((&__tracepoint_kvm_invlpga)->funcs)); }); ((typeof(*(&__tracepoint_kvm_invlpga)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_invlpga745 = (void *)&__SCK__tp_func_kvm_invlpga;; (&__SCT__tp_func_kvm_invlpga); })(__data, rip, asid, address); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_invlpga.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_invlpga.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_746(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_invlpga.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_invlpga.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_invlpga.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_invlpga.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_invlpga.funcs)) == sizeof(long long))) __compiletime_assert_746(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_invlpga.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_invlpga.funcs)))) *)&((__tracepoint_kvm_invlpga.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_invlpga.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_invlpga(void (*probe)(void *__data, __u64 rip, int asid, u64 address), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_invlpga, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_invlpga(void (*probe)(void *__data, __u64 rip, int asid, u64 address), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_invlpga, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_invlpga(void (*probe)(void *__data, __u64 rip, int asid, u64 address), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_invlpga, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_invlpga(void (*cb)(void *__data, __u64 rip, int asid, u64 address)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_invlpga_enabled(void) { return static_key_false(&__tracepoint_kvm_invlpga.key); };
# 722 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_skinit(void *__data, __u64 rip, __u32 slb); extern struct static_call_key __SCK__tp_func_kvm_skinit; extern typeof(__traceiter_kvm_skinit) __SCT__tp_func_kvm_skinit;; extern struct tracepoint __tracepoint_kvm_skinit; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_skinit(__u64 rip, __u32 slb) { if (static_key_false(&__tracepoint_kvm_skinit.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_skinit)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_747(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_skinit)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_skinit)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_skinit)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_skinit)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_skinit)->funcs) == sizeof(long long))) __compiletime_assert_747(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_skinit)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_skinit)->funcs))) *)&((&__tracepoint_kvm_skinit)->funcs)); }); ((typeof(*(&__tracepoint_kvm_skinit)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_skinit748 = (void *)&__SCK__tp_func_kvm_skinit;; (&__SCT__tp_func_kvm_skinit); })(__data, rip, slb); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_skinit.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_skinit.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_749(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_skinit.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_skinit.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_skinit.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_skinit.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_skinit.funcs)) == sizeof(long long))) __compiletime_assert_749(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_skinit.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_skinit.funcs)))) *)&((__tracepoint_kvm_skinit.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_skinit.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_skinit(void (*probe)(void *__data, __u64 rip, __u32 slb), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_skinit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_skinit(void (*probe)(void *__data, __u64 rip, __u32 slb), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_skinit, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_skinit(void (*probe)(void *__data, __u64 rip, __u32 slb), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_skinit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_skinit(void (*cb)(void *__data, __u64 rip, __u32 slb)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_skinit_enabled(void) { return static_key_false(&__tracepoint_kvm_skinit.key); };
# 779 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_emulate_insn(void *__data, struct kvm_vcpu *vcpu, __u8 failed); extern struct static_call_key __SCK__tp_func_kvm_emulate_insn; extern typeof(__traceiter_kvm_emulate_insn) __SCT__tp_func_kvm_emulate_insn;; extern struct tracepoint __tracepoint_kvm_emulate_insn; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_emulate_insn(struct kvm_vcpu *vcpu, __u8 failed) { if (static_key_false(&__tracepoint_kvm_emulate_insn.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_emulate_insn)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_750(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_emulate_insn)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_emulate_insn)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_emulate_insn)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_emulate_insn)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_emulate_insn)->funcs) == sizeof(long long))) __compiletime_assert_750(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_emulate_insn)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_emulate_insn)->funcs))) *)&((&__tracepoint_kvm_emulate_insn)->funcs)); }); ((typeof(*(&__tracepoint_kvm_emulate_insn)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_emulate_insn751 = (void *)&__SCK__tp_func_kvm_emulate_insn;; (&__SCT__tp_func_kvm_emulate_insn); })(__data, vcpu, failed); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_emulate_insn.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_emulate_insn.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_752(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_emulate_insn.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_emulate_insn.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_emulate_insn.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_emulate_insn.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_emulate_insn.funcs)) == sizeof(long long))) __compiletime_assert_752(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_emulate_insn.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_emulate_insn.funcs)))) *)&((__tracepoint_kvm_emulate_insn.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_emulate_insn.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_emulate_insn(void (*probe)(void *__data, struct kvm_vcpu *vcpu, __u8 failed), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_emulate_insn, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_emulate_insn(void (*probe)(void *__data, struct kvm_vcpu *vcpu, __u8 failed), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_emulate_insn, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_emulate_insn(void (*probe)(void *__data, struct kvm_vcpu *vcpu, __u8 failed), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_emulate_insn, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_emulate_insn(void (*cb)(void *__data, struct kvm_vcpu *vcpu, __u8 failed)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_emulate_insn_enabled(void) { return static_key_false(&__tracepoint_kvm_emulate_insn.key); };
# 816 "./arch/x86/kvm/trace.h"
extern int __traceiter_vcpu_match_mmio(void *__data, gva_t gva, gpa_t gpa, bool write, bool gpa_match); extern struct static_call_key __SCK__tp_func_vcpu_match_mmio; extern typeof(__traceiter_vcpu_match_mmio) __SCT__tp_func_vcpu_match_mmio;; extern struct tracepoint __tracepoint_vcpu_match_mmio; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_vcpu_match_mmio(gva_t gva, gpa_t gpa, bool write, bool gpa_match) { if (static_key_false(&__tracepoint_vcpu_match_mmio.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_vcpu_match_mmio)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_753(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_vcpu_match_mmio)->funcs) == sizeof(char) || sizeof((&__tracepoint_vcpu_match_mmio)->funcs) == sizeof(short) || sizeof((&__tracepoint_vcpu_match_mmio)->funcs) == sizeof(int) || sizeof((&__tracepoint_vcpu_match_mmio)->funcs) == sizeof(long)) || sizeof((&__tracepoint_vcpu_match_mmio)->funcs) == sizeof(long long))) __compiletime_assert_753(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_vcpu_match_mmio)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_vcpu_match_mmio)->funcs))) *)&((&__tracepoint_vcpu_match_mmio)->funcs)); }); ((typeof(*(&__tracepoint_vcpu_match_mmio)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_vcpu_match_mmio754 = (void *)&__SCK__tp_func_vcpu_match_mmio;; (&__SCT__tp_func_vcpu_match_mmio); })(__data, gva, gpa, write, gpa_match); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_vcpu_match_mmio.funcs)) *________p1 = (typeof(*(__tracepoint_vcpu_match_mmio.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_755(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_vcpu_match_mmio.funcs)) == sizeof(char) || sizeof((__tracepoint_vcpu_match_mmio.funcs)) == sizeof(short) || sizeof((__tracepoint_vcpu_match_mmio.funcs)) == sizeof(int) || sizeof((__tracepoint_vcpu_match_mmio.funcs)) == sizeof(long)) || sizeof((__tracepoint_vcpu_match_mmio.funcs)) == sizeof(long long))) __compiletime_assert_755(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_vcpu_match_mmio.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_vcpu_match_mmio.funcs)))) *)&((__tracepoint_vcpu_match_mmio.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_vcpu_match_mmio.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_vcpu_match_mmio(void (*probe)(void *__data, gva_t gva, gpa_t gpa, bool write, bool gpa_match), void *data) { return tracepoint_probe_register(&__tracepoint_vcpu_match_mmio, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_vcpu_match_mmio(void (*probe)(void *__data, gva_t gva, gpa_t gpa, bool write, bool gpa_match), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_vcpu_match_mmio, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_vcpu_match_mmio(void (*probe)(void *__data, gva_t gva, gpa_t gpa, bool write, bool gpa_match), void *data) { return tracepoint_probe_unregister(&__tracepoint_vcpu_match_mmio, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_vcpu_match_mmio(void (*cb)(void *__data, gva_t gva, gpa_t gpa, bool write, bool gpa_match)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_vcpu_match_mmio_enabled(void) { return static_key_false(&__tracepoint_vcpu_match_mmio.key); };
# 840 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_write_tsc_offset(void *__data, unsigned int vcpu_id, __u64 previous_tsc_offset, __u64 next_tsc_offset); extern struct static_call_key __SCK__tp_func_kvm_write_tsc_offset; extern typeof(__traceiter_kvm_write_tsc_offset) __SCT__tp_func_kvm_write_tsc_offset;; extern struct tracepoint __tracepoint_kvm_write_tsc_offset; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_write_tsc_offset(unsigned int vcpu_id, __u64 previous_tsc_offset, __u64 next_tsc_offset) { if (static_key_false(&__tracepoint_kvm_write_tsc_offset.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_write_tsc_offset)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_756(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_write_tsc_offset)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_write_tsc_offset)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_write_tsc_offset)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_write_tsc_offset)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_write_tsc_offset)->funcs) == sizeof(long long))) __compiletime_assert_756(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_write_tsc_offset)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_write_tsc_offset)->funcs))) *)&((&__tracepoint_kvm_write_tsc_offset)->funcs)); }); ((typeof(*(&__tracepoint_kvm_write_tsc_offset)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_write_tsc_offset757 = (void *)&__SCK__tp_func_kvm_write_tsc_offset;; (&__SCT__tp_func_kvm_write_tsc_offset); })(__data, vcpu_id, previous_tsc_offset, next_tsc_offset); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_write_tsc_offset.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_write_tsc_offset.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_758(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_write_tsc_offset.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_write_tsc_offset.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_write_tsc_offset.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_write_tsc_offset.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_write_tsc_offset.funcs)) == sizeof(long long))) __compiletime_assert_758(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_write_tsc_offset.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_write_tsc_offset.funcs)))) *)&((__tracepoint_kvm_write_tsc_offset.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_write_tsc_offset.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_write_tsc_offset(void (*probe)(void *__data, unsigned int vcpu_id, __u64 previous_tsc_offset, __u64 next_tsc_offset), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_write_tsc_offset, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_write_tsc_offset(void (*probe)(void *__data, unsigned int vcpu_id, __u64 previous_tsc_offset, __u64 next_tsc_offset), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_write_tsc_offset, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_write_tsc_offset(void (*probe)(void *__data, unsigned int vcpu_id, __u64 previous_tsc_offset, __u64 next_tsc_offset), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_write_tsc_offset, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_write_tsc_offset(void (*cb)(void *__data, unsigned int vcpu_id, __u64 previous_tsc_offset, __u64 next_tsc_offset)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_write_tsc_offset_enabled(void) { return static_key_false(&__tracepoint_kvm_write_tsc_offset.key); };
# 867 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_update_master_clock(void *__data, bool use_master_clock, unsigned int host_clock, bool offset_matched); extern struct static_call_key __SCK__tp_func_kvm_update_master_clock; extern typeof(__traceiter_kvm_update_master_clock) __SCT__tp_func_kvm_update_master_clock;; extern struct tracepoint __tracepoint_kvm_update_master_clock; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_update_master_clock(bool use_master_clock, unsigned int host_clock, bool offset_matched) { if (static_key_false(&__tracepoint_kvm_update_master_clock.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_update_master_clock)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_759(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_update_master_clock)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_update_master_clock)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_update_master_clock)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_update_master_clock)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_update_master_clock)->funcs) == sizeof(long long))) __compiletime_assert_759(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_update_master_clock)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_update_master_clock)->funcs))) *)&((&__tracepoint_kvm_update_master_clock)->funcs)); }); ((typeof(*(&__tracepoint_kvm_update_master_clock)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_update_master_clock760 = (void *)&__SCK__tp_func_kvm_update_master_clock;; (&__SCT__tp_func_kvm_update_master_clock); })(__data, use_master_clock, host_clock, offset_matched); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_update_master_clock.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_update_master_clock.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_761(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_update_master_clock.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_update_master_clock.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_update_master_clock.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_update_master_clock.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_update_master_clock.funcs)) == sizeof(long long))) __compiletime_assert_761(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_update_master_clock.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_update_master_clock.funcs)))) *)&((__tracepoint_kvm_update_master_clock.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_update_master_clock.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_update_master_clock(void (*probe)(void *__data, bool use_master_clock, unsigned int host_clock, bool offset_matched), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_update_master_clock, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_update_master_clock(void (*probe)(void *__data, bool use_master_clock, unsigned int host_clock, bool offset_matched), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_update_master_clock, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_update_master_clock(void (*probe)(void *__data, bool use_master_clock, unsigned int host_clock, bool offset_matched), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_update_master_clock, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_update_master_clock(void (*cb)(void *__data, bool use_master_clock, unsigned int host_clock, bool offset_matched)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_update_master_clock_enabled(void) { return static_key_false(&__tracepoint_kvm_update_master_clock.key); };
# 889 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_track_tsc(void *__data, unsigned int vcpu_id, unsigned int nr_matched, unsigned int online_vcpus, bool use_master_clock, unsigned int host_clock); extern struct static_call_key __SCK__tp_func_kvm_track_tsc; extern typeof(__traceiter_kvm_track_tsc) __SCT__tp_func_kvm_track_tsc;; extern struct tracepoint __tracepoint_kvm_track_tsc; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_track_tsc(unsigned int vcpu_id, unsigned int nr_matched, unsigned int online_vcpus, bool use_master_clock, unsigned int host_clock) { if (static_key_false(&__tracepoint_kvm_track_tsc.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_track_tsc)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_762(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_track_tsc)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_track_tsc)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_track_tsc)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_track_tsc)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_track_tsc)->funcs) == sizeof(long long))) __compiletime_assert_762(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_track_tsc)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_track_tsc)->funcs))) *)&((&__tracepoint_kvm_track_tsc)->funcs)); }); ((typeof(*(&__tracepoint_kvm_track_tsc)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_track_tsc763 = (void *)&__SCK__tp_func_kvm_track_tsc;; (&__SCT__tp_func_kvm_track_tsc); })(__data, vcpu_id, nr_matched, online_vcpus, use_master_clock, host_clock); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_track_tsc.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_track_tsc.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_764(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_track_tsc.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_track_tsc.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_track_tsc.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_track_tsc.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_track_tsc.funcs)) == sizeof(long long))) __compiletime_assert_764(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_track_tsc.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_track_tsc.funcs)))) *)&((__tracepoint_kvm_track_tsc.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_track_tsc.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_track_tsc(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int nr_matched, unsigned int online_vcpus, bool use_master_clock, unsigned int host_clock), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_track_tsc, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_track_tsc(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int nr_matched, unsigned int online_vcpus, bool use_master_clock, unsigned int host_clock), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_track_tsc, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_track_tsc(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int nr_matched, unsigned int online_vcpus, bool use_master_clock, unsigned int host_clock), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_track_tsc, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_track_tsc(void (*cb)(void *__data, unsigned int vcpu_id, unsigned int nr_matched, unsigned int online_vcpus, bool use_master_clock, unsigned int host_clock)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_track_tsc_enabled(void) { return static_key_false(&__tracepoint_kvm_track_tsc.key); };
# 924 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_pml_full(void *__data, unsigned int vcpu_id); extern struct static_call_key __SCK__tp_func_kvm_pml_full; extern typeof(__traceiter_kvm_pml_full) __SCT__tp_func_kvm_pml_full;; extern struct tracepoint __tracepoint_kvm_pml_full; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_pml_full(unsigned int vcpu_id) { if (static_key_false(&__tracepoint_kvm_pml_full.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_pml_full)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_765(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_pml_full)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_pml_full)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_pml_full)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_pml_full)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_pml_full)->funcs) == sizeof(long long))) __compiletime_assert_765(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_pml_full)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_pml_full)->funcs))) *)&((&__tracepoint_kvm_pml_full)->funcs)); }); ((typeof(*(&__tracepoint_kvm_pml_full)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_pml_full766 = (void *)&__SCK__tp_func_kvm_pml_full;; (&__SCT__tp_func_kvm_pml_full); })(__data, vcpu_id); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_pml_full.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_pml_full.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_767(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_pml_full.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_pml_full.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_pml_full.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_pml_full.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_pml_full.funcs)) == sizeof(long long))) __compiletime_assert_767(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_pml_full.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_pml_full.funcs)))) *)&((__tracepoint_kvm_pml_full.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_pml_full.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_pml_full(void (*probe)(void *__data, unsigned int vcpu_id), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_pml_full, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_pml_full(void (*probe)(void *__data, unsigned int vcpu_id), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_pml_full, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_pml_full(void (*probe)(void *__data, unsigned int vcpu_id), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_pml_full, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_pml_full(void (*cb)(void *__data, unsigned int vcpu_id)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_pml_full_enabled(void) { return static_key_false(&__tracepoint_kvm_pml_full.key); };
# 939 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_ple_window_update(void *__data, unsigned int vcpu_id, unsigned int new, unsigned int old); extern struct static_call_key __SCK__tp_func_kvm_ple_window_update; extern typeof(__traceiter_kvm_ple_window_update) __SCT__tp_func_kvm_ple_window_update;; extern struct tracepoint __tracepoint_kvm_ple_window_update; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_ple_window_update(unsigned int vcpu_id, unsigned int new, unsigned int old) { if (static_key_false(&__tracepoint_kvm_ple_window_update.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_ple_window_update)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_768(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_ple_window_update)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_ple_window_update)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_ple_window_update)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_ple_window_update)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_ple_window_update)->funcs) == sizeof(long long))) __compiletime_assert_768(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_ple_window_update)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_ple_window_update)->funcs))) *)&((&__tracepoint_kvm_ple_window_update)->funcs)); }); ((typeof(*(&__tracepoint_kvm_ple_window_update)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_ple_window_update769 = (void *)&__SCK__tp_func_kvm_ple_window_update;; (&__SCT__tp_func_kvm_ple_window_update); })(__data, vcpu_id, new, old); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_ple_window_update.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_ple_window_update.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_770(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_ple_window_update.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_ple_window_update.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_ple_window_update.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_ple_window_update.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_ple_window_update.funcs)) == sizeof(long long))) __compiletime_assert_770(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_ple_window_update.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_ple_window_update.funcs)))) *)&((__tracepoint_kvm_ple_window_update.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_ple_window_update.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_ple_window_update(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int new, unsigned int old), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_ple_window_update, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_ple_window_update(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int new, unsigned int old), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_ple_window_update, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_ple_window_update(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int new, unsigned int old), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_ple_window_update, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_ple_window_update(void (*cb)(void *__data, unsigned int vcpu_id, unsigned int new, unsigned int old)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_ple_window_update_enabled(void) { return static_key_false(&__tracepoint_kvm_ple_window_update.key); };
# 960 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_pvclock_update(void *__data, unsigned int vcpu_id, struct pvclock_vcpu_time_info *pvclock); extern struct static_call_key __SCK__tp_func_kvm_pvclock_update; extern typeof(__traceiter_kvm_pvclock_update) __SCT__tp_func_kvm_pvclock_update;; extern struct tracepoint __tracepoint_kvm_pvclock_update; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_pvclock_update(unsigned int vcpu_id, struct pvclock_vcpu_time_info *pvclock) { if (static_key_false(&__tracepoint_kvm_pvclock_update.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_pvclock_update)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_771(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_pvclock_update)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_pvclock_update)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_pvclock_update)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_pvclock_update)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_pvclock_update)->funcs) == sizeof(long long))) __compiletime_assert_771(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_pvclock_update)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_pvclock_update)->funcs))) *)&((&__tracepoint_kvm_pvclock_update)->funcs)); }); ((typeof(*(&__tracepoint_kvm_pvclock_update)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_pvclock_update772 = (void *)&__SCK__tp_func_kvm_pvclock_update;; (&__SCT__tp_func_kvm_pvclock_update); })(__data, vcpu_id, pvclock); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_pvclock_update.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_pvclock_update.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_773(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_pvclock_update.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_pvclock_update.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_pvclock_update.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_pvclock_update.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_pvclock_update.funcs)) == sizeof(long long))) __compiletime_assert_773(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_pvclock_update.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_pvclock_update.funcs)))) *)&((__tracepoint_kvm_pvclock_update.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_pvclock_update.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_pvclock_update(void (*probe)(void *__data, unsigned int vcpu_id, struct pvclock_vcpu_time_info *pvclock), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_pvclock_update, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_pvclock_update(void (*probe)(void *__data, unsigned int vcpu_id, struct pvclock_vcpu_time_info *pvclock), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_pvclock_update, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_pvclock_update(void (*probe)(void *__data, unsigned int vcpu_id, struct pvclock_vcpu_time_info *pvclock), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_pvclock_update, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_pvclock_update(void (*cb)(void *__data, unsigned int vcpu_id, struct pvclock_vcpu_time_info *pvclock)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_pvclock_update_enabled(void) { return static_key_false(&__tracepoint_kvm_pvclock_update.key); };
# 996 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_wait_lapic_expire(void *__data, unsigned int vcpu_id, s64 delta); extern struct static_call_key __SCK__tp_func_kvm_wait_lapic_expire; extern typeof(__traceiter_kvm_wait_lapic_expire) __SCT__tp_func_kvm_wait_lapic_expire;; extern struct tracepoint __tracepoint_kvm_wait_lapic_expire; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_wait_lapic_expire(unsigned int vcpu_id, s64 delta) { if (static_key_false(&__tracepoint_kvm_wait_lapic_expire.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_wait_lapic_expire)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_774(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_wait_lapic_expire)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_wait_lapic_expire)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_wait_lapic_expire)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_wait_lapic_expire)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_wait_lapic_expire)->funcs) == sizeof(long long))) __compiletime_assert_774(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_wait_lapic_expire)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_wait_lapic_expire)->funcs))) *)&((&__tracepoint_kvm_wait_lapic_expire)->funcs)); }); ((typeof(*(&__tracepoint_kvm_wait_lapic_expire)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_wait_lapic_expire775 = (void *)&__SCK__tp_func_kvm_wait_lapic_expire;; (&__SCT__tp_func_kvm_wait_lapic_expire); })(__data, vcpu_id, delta); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_wait_lapic_expire.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_wait_lapic_expire.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_776(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_wait_lapic_expire.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_wait_lapic_expire.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_wait_lapic_expire.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_wait_lapic_expire.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_wait_lapic_expire.funcs)) == sizeof(long long))) __compiletime_assert_776(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_wait_lapic_expire.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_wait_lapic_expire.funcs)))) *)&((__tracepoint_kvm_wait_lapic_expire.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_wait_lapic_expire.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_wait_lapic_expire(void (*probe)(void *__data, unsigned int vcpu_id, s64 delta), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_wait_lapic_expire, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_wait_lapic_expire(void (*probe)(void *__data, unsigned int vcpu_id, s64 delta), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_wait_lapic_expire, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_wait_lapic_expire(void (*probe)(void *__data, unsigned int vcpu_id, s64 delta), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_wait_lapic_expire, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_wait_lapic_expire(void (*cb)(void *__data, unsigned int vcpu_id, s64 delta)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_wait_lapic_expire_enabled(void) { return static_key_false(&__tracepoint_kvm_wait_lapic_expire.key); };
# 1016 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_smm_transition(void *__data, unsigned int vcpu_id, u64 smbase, bool entering); extern struct static_call_key __SCK__tp_func_kvm_smm_transition; extern typeof(__traceiter_kvm_smm_transition) __SCT__tp_func_kvm_smm_transition;; extern struct tracepoint __tracepoint_kvm_smm_transition; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_smm_transition(unsigned int vcpu_id, u64 smbase, bool entering) { if (static_key_false(&__tracepoint_kvm_smm_transition.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_smm_transition)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_777(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_smm_transition)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_smm_transition)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_smm_transition)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_smm_transition)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_smm_transition)->funcs) == sizeof(long long))) __compiletime_assert_777(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_smm_transition)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_smm_transition)->funcs))) *)&((&__tracepoint_kvm_smm_transition)->funcs)); }); ((typeof(*(&__tracepoint_kvm_smm_transition)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_smm_transition778 = (void *)&__SCK__tp_func_kvm_smm_transition;; (&__SCT__tp_func_kvm_smm_transition); })(__data, vcpu_id, smbase, entering); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_smm_transition.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_smm_transition.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_779(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_smm_transition.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_smm_transition.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_smm_transition.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_smm_transition.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_smm_transition.funcs)) == sizeof(long long))) __compiletime_assert_779(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_smm_transition.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_smm_transition.funcs)))) *)&((__tracepoint_kvm_smm_transition.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_smm_transition.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_smm_transition(void (*probe)(void *__data, unsigned int vcpu_id, u64 smbase, bool entering), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_smm_transition, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_smm_transition(void (*probe)(void *__data, unsigned int vcpu_id, u64 smbase, bool entering), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_smm_transition, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_smm_transition(void (*probe)(void *__data, unsigned int vcpu_id, u64 smbase, bool entering), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_smm_transition, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_smm_transition(void (*cb)(void *__data, unsigned int vcpu_id, u64 smbase, bool entering)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_smm_transition_enabled(void) { return static_key_false(&__tracepoint_kvm_smm_transition.key); };
# 1041 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_pi_irte_update(void *__data, unsigned int host_irq, unsigned int vcpu_id, unsigned int gsi, unsigned int gvec, u64 pi_desc_addr, bool set); extern struct static_call_key __SCK__tp_func_kvm_pi_irte_update; extern typeof(__traceiter_kvm_pi_irte_update) __SCT__tp_func_kvm_pi_irte_update;; extern struct tracepoint __tracepoint_kvm_pi_irte_update; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_pi_irte_update(unsigned int host_irq, unsigned int vcpu_id, unsigned int gsi, unsigned int gvec, u64 pi_desc_addr, bool set) { if (static_key_false(&__tracepoint_kvm_pi_irte_update.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_pi_irte_update)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_780(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_pi_irte_update)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_pi_irte_update)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_pi_irte_update)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_pi_irte_update)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_pi_irte_update)->funcs) == sizeof(long long))) __compiletime_assert_780(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_pi_irte_update)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_pi_irte_update)->funcs))) *)&((&__tracepoint_kvm_pi_irte_update)->funcs)); }); ((typeof(*(&__tracepoint_kvm_pi_irte_update)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_pi_irte_update781 = (void *)&__SCK__tp_func_kvm_pi_irte_update;; (&__SCT__tp_func_kvm_pi_irte_update); })(__data, host_irq, vcpu_id, gsi, gvec, pi_desc_addr, set); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_pi_irte_update.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_pi_irte_update.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_782(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_pi_irte_update.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_pi_irte_update.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_pi_irte_update.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_pi_irte_update.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_pi_irte_update.funcs)) == sizeof(long long))) __compiletime_assert_782(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_pi_irte_update.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_pi_irte_update.funcs)))) *)&((__tracepoint_kvm_pi_irte_update.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_pi_irte_update.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_pi_irte_update(void (*probe)(void *__data, unsigned int host_irq, unsigned int vcpu_id, unsigned int gsi, unsigned int gvec, u64 pi_desc_addr, bool set), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_pi_irte_update, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_pi_irte_update(void (*probe)(void *__data, unsigned int host_irq, unsigned int vcpu_id, unsigned int gsi, unsigned int gvec, u64 pi_desc_addr, bool set), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_pi_irte_update, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_pi_irte_update(void (*probe)(void *__data, unsigned int host_irq, unsigned int vcpu_id, unsigned int gsi, unsigned int gvec, u64 pi_desc_addr, bool set), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_pi_irte_update, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_pi_irte_update(void (*cb)(void *__data, unsigned int host_irq, unsigned int vcpu_id, unsigned int gsi, unsigned int gvec, u64 pi_desc_addr, bool set)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_pi_irte_update_enabled(void) { return static_key_false(&__tracepoint_kvm_pi_irte_update.key); };
# 1078 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_notify_acked_sint(void *__data, int vcpu_id, u32 sint); extern struct static_call_key __SCK__tp_func_kvm_hv_notify_acked_sint; extern typeof(__traceiter_kvm_hv_notify_acked_sint) __SCT__tp_func_kvm_hv_notify_acked_sint;; extern struct tracepoint __tracepoint_kvm_hv_notify_acked_sint; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_notify_acked_sint(int vcpu_id, u32 sint) { if (static_key_false(&__tracepoint_kvm_hv_notify_acked_sint.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_notify_acked_sint)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_783(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_notify_acked_sint)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_notify_acked_sint)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_notify_acked_sint)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_notify_acked_sint)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_notify_acked_sint)->funcs) == sizeof(long long))) __compiletime_assert_783(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_notify_acked_sint)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_notify_acked_sint)->funcs))) *)&((&__tracepoint_kvm_hv_notify_acked_sint)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_notify_acked_sint)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_notify_acked_sint784 = (void *)&__SCK__tp_func_kvm_hv_notify_acked_sint;; (&__SCT__tp_func_kvm_hv_notify_acked_sint); })(__data, vcpu_id, sint); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_notify_acked_sint.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_notify_acked_sint.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_785(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_notify_acked_sint.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_notify_acked_sint.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_notify_acked_sint.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_notify_acked_sint.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_notify_acked_sint.funcs)) == sizeof(long long))) __compiletime_assert_785(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_notify_acked_sint.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_notify_acked_sint.funcs)))) *)&((__tracepoint_kvm_hv_notify_acked_sint.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_notify_acked_sint.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_notify_acked_sint(void (*probe)(void *__data, int vcpu_id, u32 sint), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_notify_acked_sint, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_notify_acked_sint(void (*probe)(void *__data, int vcpu_id, u32 sint), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_notify_acked_sint, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_notify_acked_sint(void (*probe)(void *__data, int vcpu_id, u32 sint), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_notify_acked_sint, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_notify_acked_sint(void (*cb)(void *__data, int vcpu_id, u32 sint)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_notify_acked_sint_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_notify_acked_sint.key); };
# 1098 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_synic_set_irq(void *__data, int vcpu_id, u32 sint, int vector, int ret); extern struct static_call_key __SCK__tp_func_kvm_hv_synic_set_irq; extern typeof(__traceiter_kvm_hv_synic_set_irq) __SCT__tp_func_kvm_hv_synic_set_irq;; extern struct tracepoint __tracepoint_kvm_hv_synic_set_irq; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_synic_set_irq(int vcpu_id, u32 sint, int vector, int ret) { if (static_key_false(&__tracepoint_kvm_hv_synic_set_irq.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_synic_set_irq)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_786(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_synic_set_irq)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_synic_set_irq)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_synic_set_irq)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_synic_set_irq)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_synic_set_irq)->funcs) == sizeof(long long))) __compiletime_assert_786(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_synic_set_irq)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_synic_set_irq)->funcs))) *)&((&__tracepoint_kvm_hv_synic_set_irq)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_synic_set_irq)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_synic_set_irq787 = (void *)&__SCK__tp_func_kvm_hv_synic_set_irq;; (&__SCT__tp_func_kvm_hv_synic_set_irq); })(__data, vcpu_id, sint, vector, ret); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_synic_set_irq.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_synic_set_irq.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_788(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_synic_set_irq.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_synic_set_irq.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_synic_set_irq.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_synic_set_irq.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_synic_set_irq.funcs)) == sizeof(long long))) __compiletime_assert_788(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_synic_set_irq.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_synic_set_irq.funcs)))) *)&((__tracepoint_kvm_hv_synic_set_irq.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_synic_set_irq.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_synic_set_irq(void (*probe)(void *__data, int vcpu_id, u32 sint, int vector, int ret), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_synic_set_irq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_synic_set_irq(void (*probe)(void *__data, int vcpu_id, u32 sint, int vector, int ret), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_synic_set_irq, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_synic_set_irq(void (*probe)(void *__data, int vcpu_id, u32 sint, int vector, int ret), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_synic_set_irq, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_synic_set_irq(void (*cb)(void *__data, int vcpu_id, u32 sint, int vector, int ret)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_synic_set_irq_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_synic_set_irq.key); };
# 1124 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_synic_send_eoi(void *__data, int vcpu_id, int vector); extern struct static_call_key __SCK__tp_func_kvm_hv_synic_send_eoi; extern typeof(__traceiter_kvm_hv_synic_send_eoi) __SCT__tp_func_kvm_hv_synic_send_eoi;; extern struct tracepoint __tracepoint_kvm_hv_synic_send_eoi; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_synic_send_eoi(int vcpu_id, int vector) { if (static_key_false(&__tracepoint_kvm_hv_synic_send_eoi.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_synic_send_eoi)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_789(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_synic_send_eoi)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_synic_send_eoi)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_synic_send_eoi)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_synic_send_eoi)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_synic_send_eoi)->funcs) == sizeof(long long))) __compiletime_assert_789(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_synic_send_eoi)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_synic_send_eoi)->funcs))) *)&((&__tracepoint_kvm_hv_synic_send_eoi)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_synic_send_eoi)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_synic_send_eoi790 = (void *)&__SCK__tp_func_kvm_hv_synic_send_eoi;; (&__SCT__tp_func_kvm_hv_synic_send_eoi); })(__data, vcpu_id, vector); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_synic_send_eoi.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_synic_send_eoi.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_791(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_synic_send_eoi.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_synic_send_eoi.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_synic_send_eoi.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_synic_send_eoi.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_synic_send_eoi.funcs)) == sizeof(long long))) __compiletime_assert_791(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_synic_send_eoi.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_synic_send_eoi.funcs)))) *)&((__tracepoint_kvm_hv_synic_send_eoi.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_synic_send_eoi.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_synic_send_eoi(void (*probe)(void *__data, int vcpu_id, int vector), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_synic_send_eoi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_synic_send_eoi(void (*probe)(void *__data, int vcpu_id, int vector), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_synic_send_eoi, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_synic_send_eoi(void (*probe)(void *__data, int vcpu_id, int vector), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_synic_send_eoi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_synic_send_eoi(void (*cb)(void *__data, int vcpu_id, int vector)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_synic_send_eoi_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_synic_send_eoi.key); };
# 1146 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_synic_set_msr(void *__data, int vcpu_id, u32 msr, u64 data, bool host); extern struct static_call_key __SCK__tp_func_kvm_hv_synic_set_msr; extern typeof(__traceiter_kvm_hv_synic_set_msr) __SCT__tp_func_kvm_hv_synic_set_msr;; extern struct tracepoint __tracepoint_kvm_hv_synic_set_msr; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_synic_set_msr(int vcpu_id, u32 msr, u64 data, bool host) { if (static_key_false(&__tracepoint_kvm_hv_synic_set_msr.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_synic_set_msr)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_792(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_synic_set_msr)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_synic_set_msr)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_synic_set_msr)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_synic_set_msr)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_synic_set_msr)->funcs) == sizeof(long long))) __compiletime_assert_792(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_synic_set_msr)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_synic_set_msr)->funcs))) *)&((&__tracepoint_kvm_hv_synic_set_msr)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_synic_set_msr)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_synic_set_msr793 = (void *)&__SCK__tp_func_kvm_hv_synic_set_msr;; (&__SCT__tp_func_kvm_hv_synic_set_msr); })(__data, vcpu_id, msr, data, host); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_synic_set_msr.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_synic_set_msr.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_794(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_synic_set_msr.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_synic_set_msr.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_synic_set_msr.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_synic_set_msr.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_synic_set_msr.funcs)) == sizeof(long long))) __compiletime_assert_794(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_synic_set_msr.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_synic_set_msr.funcs)))) *)&((__tracepoint_kvm_hv_synic_set_msr.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_synic_set_msr.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_synic_set_msr(void (*probe)(void *__data, int vcpu_id, u32 msr, u64 data, bool host), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_synic_set_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_synic_set_msr(void (*probe)(void *__data, int vcpu_id, u32 msr, u64 data, bool host), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_synic_set_msr, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_synic_set_msr(void (*probe)(void *__data, int vcpu_id, u32 msr, u64 data, bool host), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_synic_set_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_synic_set_msr(void (*cb)(void *__data, int vcpu_id, u32 msr, u64 data, bool host)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_synic_set_msr_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_synic_set_msr.key); };
# 1171 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_stimer_set_config(void *__data, int vcpu_id, int timer_index, u64 config, bool host); extern struct static_call_key __SCK__tp_func_kvm_hv_stimer_set_config; extern typeof(__traceiter_kvm_hv_stimer_set_config) __SCT__tp_func_kvm_hv_stimer_set_config;; extern struct tracepoint __tracepoint_kvm_hv_stimer_set_config; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_stimer_set_config(int vcpu_id, int timer_index, u64 config, bool host) { if (static_key_false(&__tracepoint_kvm_hv_stimer_set_config.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_stimer_set_config)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_795(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_stimer_set_config)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_stimer_set_config)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_stimer_set_config)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_stimer_set_config)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_stimer_set_config)->funcs) == sizeof(long long))) __compiletime_assert_795(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_stimer_set_config)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_stimer_set_config)->funcs))) *)&((&__tracepoint_kvm_hv_stimer_set_config)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_stimer_set_config)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_stimer_set_config796 = (void *)&__SCK__tp_func_kvm_hv_stimer_set_config;; (&__SCT__tp_func_kvm_hv_stimer_set_config); })(__data, vcpu_id, timer_index, config, host); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_stimer_set_config.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_stimer_set_config.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_797(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_stimer_set_config.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_stimer_set_config.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_stimer_set_config.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_stimer_set_config.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_stimer_set_config.funcs)) == sizeof(long long))) __compiletime_assert_797(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_stimer_set_config.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_stimer_set_config.funcs)))) *)&((__tracepoint_kvm_hv_stimer_set_config.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_stimer_set_config.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_stimer_set_config(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 config, bool host), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_stimer_set_config, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_stimer_set_config(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 config, bool host), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_stimer_set_config, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_stimer_set_config(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 config, bool host), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_stimer_set_config, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_stimer_set_config(void (*cb)(void *__data, int vcpu_id, int timer_index, u64 config, bool host)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_stimer_set_config_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_stimer_set_config.key); };
# 1197 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_stimer_set_count(void *__data, int vcpu_id, int timer_index, u64 count, bool host); extern struct static_call_key __SCK__tp_func_kvm_hv_stimer_set_count; extern typeof(__traceiter_kvm_hv_stimer_set_count) __SCT__tp_func_kvm_hv_stimer_set_count;; extern struct tracepoint __tracepoint_kvm_hv_stimer_set_count; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_stimer_set_count(int vcpu_id, int timer_index, u64 count, bool host) { if (static_key_false(&__tracepoint_kvm_hv_stimer_set_count.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_stimer_set_count)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_798(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_stimer_set_count)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_stimer_set_count)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_stimer_set_count)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_stimer_set_count)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_stimer_set_count)->funcs) == sizeof(long long))) __compiletime_assert_798(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_stimer_set_count)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_stimer_set_count)->funcs))) *)&((&__tracepoint_kvm_hv_stimer_set_count)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_stimer_set_count)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_stimer_set_count799 = (void *)&__SCK__tp_func_kvm_hv_stimer_set_count;; (&__SCT__tp_func_kvm_hv_stimer_set_count); })(__data, vcpu_id, timer_index, count, host); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_stimer_set_count.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_stimer_set_count.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_800(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_stimer_set_count.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_stimer_set_count.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_stimer_set_count.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_stimer_set_count.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_stimer_set_count.funcs)) == sizeof(long long))) __compiletime_assert_800(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_stimer_set_count.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_stimer_set_count.funcs)))) *)&((__tracepoint_kvm_hv_stimer_set_count.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_stimer_set_count.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_stimer_set_count(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 count, bool host), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_stimer_set_count, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_stimer_set_count(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 count, bool host), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_stimer_set_count, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_stimer_set_count(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 count, bool host), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_stimer_set_count, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_stimer_set_count(void (*cb)(void *__data, int vcpu_id, int timer_index, u64 count, bool host)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_stimer_set_count_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_stimer_set_count.key); };
# 1223 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_stimer_start_periodic(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 exp_time); extern struct static_call_key __SCK__tp_func_kvm_hv_stimer_start_periodic; extern typeof(__traceiter_kvm_hv_stimer_start_periodic) __SCT__tp_func_kvm_hv_stimer_start_periodic;; extern struct tracepoint __tracepoint_kvm_hv_stimer_start_periodic; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_stimer_start_periodic(int vcpu_id, int timer_index, u64 time_now, u64 exp_time) { if (static_key_false(&__tracepoint_kvm_hv_stimer_start_periodic.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_801(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs) == sizeof(long long))) __compiletime_assert_801(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs))) *)&((&__tracepoint_kvm_hv_stimer_start_periodic)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_stimer_start_periodic)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_stimer_start_periodic802 = (void *)&__SCK__tp_func_kvm_hv_stimer_start_periodic;; (&__SCT__tp_func_kvm_hv_stimer_start_periodic); })(__data, vcpu_id, timer_index, time_now, exp_time); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_stimer_start_periodic.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_stimer_start_periodic.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_803(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_stimer_start_periodic.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_stimer_start_periodic.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_stimer_start_periodic.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_stimer_start_periodic.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_stimer_start_periodic.funcs)) == sizeof(long long))) __compiletime_assert_803(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_stimer_start_periodic.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_stimer_start_periodic.funcs)))) *)&((__tracepoint_kvm_hv_stimer_start_periodic.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_stimer_start_periodic.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_stimer_start_periodic(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 exp_time), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_stimer_start_periodic, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_stimer_start_periodic(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 exp_time), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_stimer_start_periodic, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_stimer_start_periodic(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 exp_time), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_stimer_start_periodic, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_stimer_start_periodic(void (*cb)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 exp_time)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_stimer_start_periodic_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_stimer_start_periodic.key); };
# 1249 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_stimer_start_one_shot(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 count); extern struct static_call_key __SCK__tp_func_kvm_hv_stimer_start_one_shot; extern typeof(__traceiter_kvm_hv_stimer_start_one_shot) __SCT__tp_func_kvm_hv_stimer_start_one_shot;; extern struct tracepoint __tracepoint_kvm_hv_stimer_start_one_shot; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_stimer_start_one_shot(int vcpu_id, int timer_index, u64 time_now, u64 count) { if (static_key_false(&__tracepoint_kvm_hv_stimer_start_one_shot.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_804(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs) == sizeof(long long))) __compiletime_assert_804(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs))) *)&((&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_stimer_start_one_shot)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_stimer_start_one_shot805 = (void *)&__SCK__tp_func_kvm_hv_stimer_start_one_shot;; (&__SCT__tp_func_kvm_hv_stimer_start_one_shot); })(__data, vcpu_id, timer_index, time_now, count); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_806(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) == sizeof(long long))) __compiletime_assert_806(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_stimer_start_one_shot.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_stimer_start_one_shot.funcs)))) *)&((__tracepoint_kvm_hv_stimer_start_one_shot.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_stimer_start_one_shot.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_stimer_start_one_shot(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 count), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_stimer_start_one_shot, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_stimer_start_one_shot(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 count), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_stimer_start_one_shot, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_stimer_start_one_shot(void (*probe)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 count), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_stimer_start_one_shot, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_stimer_start_one_shot(void (*cb)(void *__data, int vcpu_id, int timer_index, u64 time_now, u64 count)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_stimer_start_one_shot_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_stimer_start_one_shot.key); };
# 1275 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_stimer_callback(void *__data, int vcpu_id, int timer_index); extern struct static_call_key __SCK__tp_func_kvm_hv_stimer_callback; extern typeof(__traceiter_kvm_hv_stimer_callback) __SCT__tp_func_kvm_hv_stimer_callback;; extern struct tracepoint __tracepoint_kvm_hv_stimer_callback; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_stimer_callback(int vcpu_id, int timer_index) { if (static_key_false(&__tracepoint_kvm_hv_stimer_callback.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_stimer_callback)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_807(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_stimer_callback)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_stimer_callback)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_stimer_callback)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_stimer_callback)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_stimer_callback)->funcs) == sizeof(long long))) __compiletime_assert_807(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_stimer_callback)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_stimer_callback)->funcs))) *)&((&__tracepoint_kvm_hv_stimer_callback)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_stimer_callback)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_stimer_callback808 = (void *)&__SCK__tp_func_kvm_hv_stimer_callback;; (&__SCT__tp_func_kvm_hv_stimer_callback); })(__data, vcpu_id, timer_index); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_stimer_callback.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_stimer_callback.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_809(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_stimer_callback.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_stimer_callback.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_stimer_callback.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_stimer_callback.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_stimer_callback.funcs)) == sizeof(long long))) __compiletime_assert_809(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_stimer_callback.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_stimer_callback.funcs)))) *)&((__tracepoint_kvm_hv_stimer_callback.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_stimer_callback.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_stimer_callback(void (*probe)(void *__data, int vcpu_id, int timer_index), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_stimer_callback, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_stimer_callback(void (*probe)(void *__data, int vcpu_id, int timer_index), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_stimer_callback, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_stimer_callback(void (*probe)(void *__data, int vcpu_id, int timer_index), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_stimer_callback, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_stimer_callback(void (*cb)(void *__data, int vcpu_id, int timer_index)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_stimer_callback_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_stimer_callback.key); };
# 1296 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_stimer_expiration(void *__data, int vcpu_id, int timer_index, int direct, int msg_send_result); extern struct static_call_key __SCK__tp_func_kvm_hv_stimer_expiration; extern typeof(__traceiter_kvm_hv_stimer_expiration) __SCT__tp_func_kvm_hv_stimer_expiration;; extern struct tracepoint __tracepoint_kvm_hv_stimer_expiration; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_stimer_expiration(int vcpu_id, int timer_index, int direct, int msg_send_result) { if (static_key_false(&__tracepoint_kvm_hv_stimer_expiration.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_stimer_expiration)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_810(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_stimer_expiration)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_stimer_expiration)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_stimer_expiration)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_stimer_expiration)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_stimer_expiration)->funcs) == sizeof(long long))) __compiletime_assert_810(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_stimer_expiration)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_stimer_expiration)->funcs))) *)&((&__tracepoint_kvm_hv_stimer_expiration)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_stimer_expiration)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_stimer_expiration811 = (void *)&__SCK__tp_func_kvm_hv_stimer_expiration;; (&__SCT__tp_func_kvm_hv_stimer_expiration); })(__data, vcpu_id, timer_index, direct, msg_send_result); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_stimer_expiration.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_stimer_expiration.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_812(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_stimer_expiration.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_stimer_expiration.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_stimer_expiration.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_stimer_expiration.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_stimer_expiration.funcs)) == sizeof(long long))) __compiletime_assert_812(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_stimer_expiration.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_stimer_expiration.funcs)))) *)&((__tracepoint_kvm_hv_stimer_expiration.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_stimer_expiration.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_stimer_expiration(void (*probe)(void *__data, int vcpu_id, int timer_index, int direct, int msg_send_result), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_stimer_expiration, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_stimer_expiration(void (*probe)(void *__data, int vcpu_id, int timer_index, int direct, int msg_send_result), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_stimer_expiration, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_stimer_expiration(void (*probe)(void *__data, int vcpu_id, int timer_index, int direct, int msg_send_result), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_stimer_expiration, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_stimer_expiration(void (*cb)(void *__data, int vcpu_id, int timer_index, int direct, int msg_send_result)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_stimer_expiration_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_stimer_expiration.key); };
# 1322 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_stimer_cleanup(void *__data, int vcpu_id, int timer_index); extern struct static_call_key __SCK__tp_func_kvm_hv_stimer_cleanup; extern typeof(__traceiter_kvm_hv_stimer_cleanup) __SCT__tp_func_kvm_hv_stimer_cleanup;; extern struct tracepoint __tracepoint_kvm_hv_stimer_cleanup; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_stimer_cleanup(int vcpu_id, int timer_index) { if (static_key_false(&__tracepoint_kvm_hv_stimer_cleanup.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_stimer_cleanup)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_813(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_stimer_cleanup)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_stimer_cleanup)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_stimer_cleanup)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_stimer_cleanup)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_stimer_cleanup)->funcs) == sizeof(long long))) __compiletime_assert_813(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_stimer_cleanup)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_stimer_cleanup)->funcs))) *)&((&__tracepoint_kvm_hv_stimer_cleanup)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_stimer_cleanup)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_stimer_cleanup814 = (void *)&__SCK__tp_func_kvm_hv_stimer_cleanup;; (&__SCT__tp_func_kvm_hv_stimer_cleanup); })(__data, vcpu_id, timer_index); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_stimer_cleanup.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_stimer_cleanup.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_815(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_stimer_cleanup.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_stimer_cleanup.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_stimer_cleanup.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_stimer_cleanup.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_stimer_cleanup.funcs)) == sizeof(long long))) __compiletime_assert_815(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_stimer_cleanup.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_stimer_cleanup.funcs)))) *)&((__tracepoint_kvm_hv_stimer_cleanup.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_stimer_cleanup.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_stimer_cleanup(void (*probe)(void *__data, int vcpu_id, int timer_index), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_stimer_cleanup, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_stimer_cleanup(void (*probe)(void *__data, int vcpu_id, int timer_index), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_stimer_cleanup, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_stimer_cleanup(void (*probe)(void *__data, int vcpu_id, int timer_index), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_stimer_cleanup, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_stimer_cleanup(void (*cb)(void *__data, int vcpu_id, int timer_index)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_stimer_cleanup_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_stimer_cleanup.key); };
# 1340 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_apicv_update_request(void *__data, bool activate, unsigned long bit); extern struct static_call_key __SCK__tp_func_kvm_apicv_update_request; extern typeof(__traceiter_kvm_apicv_update_request) __SCT__tp_func_kvm_apicv_update_request;; extern struct tracepoint __tracepoint_kvm_apicv_update_request; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_apicv_update_request(bool activate, unsigned long bit) { if (static_key_false(&__tracepoint_kvm_apicv_update_request.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_apicv_update_request)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_816(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_apicv_update_request)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_apicv_update_request)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_apicv_update_request)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_apicv_update_request)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_apicv_update_request)->funcs) == sizeof(long long))) __compiletime_assert_816(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_apicv_update_request)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_apicv_update_request)->funcs))) *)&((&__tracepoint_kvm_apicv_update_request)->funcs)); }); ((typeof(*(&__tracepoint_kvm_apicv_update_request)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_apicv_update_request817 = (void *)&__SCK__tp_func_kvm_apicv_update_request;; (&__SCT__tp_func_kvm_apicv_update_request); })(__data, activate, bit); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_apicv_update_request.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_apicv_update_request.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_818(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_apicv_update_request.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_apicv_update_request.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_apicv_update_request.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_apicv_update_request.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_apicv_update_request.funcs)) == sizeof(long long))) __compiletime_assert_818(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_apicv_update_request.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_apicv_update_request.funcs)))) *)&((__tracepoint_kvm_apicv_update_request.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_apicv_update_request.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_apicv_update_request(void (*probe)(void *__data, bool activate, unsigned long bit), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_apicv_update_request, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_apicv_update_request(void (*probe)(void *__data, bool activate, unsigned long bit), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_apicv_update_request, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_apicv_update_request(void (*probe)(void *__data, bool activate, unsigned long bit), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_apicv_update_request, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_apicv_update_request(void (*cb)(void *__data, bool activate, unsigned long bit)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_apicv_update_request_enabled(void) { return static_key_false(&__tracepoint_kvm_apicv_update_request.key); };
# 1362 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_avic_incomplete_ipi(void *__data, u32 vcpu, u32 icrh, u32 icrl, u32 id, u32 index); extern struct static_call_key __SCK__tp_func_kvm_avic_incomplete_ipi; extern typeof(__traceiter_kvm_avic_incomplete_ipi) __SCT__tp_func_kvm_avic_incomplete_ipi;; extern struct tracepoint __tracepoint_kvm_avic_incomplete_ipi; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_avic_incomplete_ipi(u32 vcpu, u32 icrh, u32 icrl, u32 id, u32 index) { if (static_key_false(&__tracepoint_kvm_avic_incomplete_ipi.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_avic_incomplete_ipi)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_819(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_avic_incomplete_ipi)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_avic_incomplete_ipi)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_avic_incomplete_ipi)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_avic_incomplete_ipi)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_avic_incomplete_ipi)->funcs) == sizeof(long long))) __compiletime_assert_819(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_avic_incomplete_ipi)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_avic_incomplete_ipi)->funcs))) *)&((&__tracepoint_kvm_avic_incomplete_ipi)->funcs)); }); ((typeof(*(&__tracepoint_kvm_avic_incomplete_ipi)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_avic_incomplete_ipi820 = (void *)&__SCK__tp_func_kvm_avic_incomplete_ipi;; (&__SCT__tp_func_kvm_avic_incomplete_ipi); })(__data, vcpu, icrh, icrl, id, index); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_avic_incomplete_ipi.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_avic_incomplete_ipi.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_821(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_avic_incomplete_ipi.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_avic_incomplete_ipi.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_avic_incomplete_ipi.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_avic_incomplete_ipi.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_avic_incomplete_ipi.funcs)) == sizeof(long long))) __compiletime_assert_821(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_avic_incomplete_ipi.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_avic_incomplete_ipi.funcs)))) *)&((__tracepoint_kvm_avic_incomplete_ipi.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_avic_incomplete_ipi.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_avic_incomplete_ipi(void (*probe)(void *__data, u32 vcpu, u32 icrh, u32 icrl, u32 id, u32 index), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_avic_incomplete_ipi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_avic_incomplete_ipi(void (*probe)(void *__data, u32 vcpu, u32 icrh, u32 icrl, u32 id, u32 index), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_avic_incomplete_ipi, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_avic_incomplete_ipi(void (*probe)(void *__data, u32 vcpu, u32 icrh, u32 icrl, u32 id, u32 index), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_avic_incomplete_ipi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_avic_incomplete_ipi(void (*cb)(void *__data, u32 vcpu, u32 icrh, u32 icrl, u32 id, u32 index)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_avic_incomplete_ipi_enabled(void) { return static_key_false(&__tracepoint_kvm_avic_incomplete_ipi.key); };
# 1387 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_avic_unaccelerated_access(void *__data, u32 vcpu, u32 offset, bool ft, bool rw, u32 vec); extern struct static_call_key __SCK__tp_func_kvm_avic_unaccelerated_access; extern typeof(__traceiter_kvm_avic_unaccelerated_access) __SCT__tp_func_kvm_avic_unaccelerated_access;; extern struct tracepoint __tracepoint_kvm_avic_unaccelerated_access; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_avic_unaccelerated_access(u32 vcpu, u32 offset, bool ft, bool rw, u32 vec) { if (static_key_false(&__tracepoint_kvm_avic_unaccelerated_access.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_avic_unaccelerated_access)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_822(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_avic_unaccelerated_access)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_avic_unaccelerated_access)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_avic_unaccelerated_access)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_avic_unaccelerated_access)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_avic_unaccelerated_access)->funcs) == sizeof(long long))) __compiletime_assert_822(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_avic_unaccelerated_access)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_avic_unaccelerated_access)->funcs))) *)&((&__tracepoint_kvm_avic_unaccelerated_access)->funcs)); }); ((typeof(*(&__tracepoint_kvm_avic_unaccelerated_access)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_avic_unaccelerated_access823 = (void *)&__SCK__tp_func_kvm_avic_unaccelerated_access;; (&__SCT__tp_func_kvm_avic_unaccelerated_access); })(__data, vcpu, offset, ft, rw, vec); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_avic_unaccelerated_access.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_avic_unaccelerated_access.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_824(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_avic_unaccelerated_access.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_avic_unaccelerated_access.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_avic_unaccelerated_access.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_avic_unaccelerated_access.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_avic_unaccelerated_access.funcs)) == sizeof(long long))) __compiletime_assert_824(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_avic_unaccelerated_access.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_avic_unaccelerated_access.funcs)))) *)&((__tracepoint_kvm_avic_unaccelerated_access.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_avic_unaccelerated_access.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_avic_unaccelerated_access(void (*probe)(void *__data, u32 vcpu, u32 offset, bool ft, bool rw, u32 vec), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_avic_unaccelerated_access, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_avic_unaccelerated_access(void (*probe)(void *__data, u32 vcpu, u32 offset, bool ft, bool rw, u32 vec), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_avic_unaccelerated_access, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_avic_unaccelerated_access(void (*probe)(void *__data, u32 vcpu, u32 offset, bool ft, bool rw, u32 vec), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_avic_unaccelerated_access, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_avic_unaccelerated_access(void (*cb)(void *__data, u32 vcpu, u32 offset, bool ft, bool rw, u32 vec)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_avic_unaccelerated_access_enabled(void) { return static_key_false(&__tracepoint_kvm_avic_unaccelerated_access.key); };
# 1416 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_avic_ga_log(void *__data, u32 vmid, u32 vcpuid); extern struct static_call_key __SCK__tp_func_kvm_avic_ga_log; extern typeof(__traceiter_kvm_avic_ga_log) __SCT__tp_func_kvm_avic_ga_log;; extern struct tracepoint __tracepoint_kvm_avic_ga_log; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_avic_ga_log(u32 vmid, u32 vcpuid) { if (static_key_false(&__tracepoint_kvm_avic_ga_log.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_avic_ga_log)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_825(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_avic_ga_log)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_avic_ga_log)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_avic_ga_log)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_avic_ga_log)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_avic_ga_log)->funcs) == sizeof(long long))) __compiletime_assert_825(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_avic_ga_log)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_avic_ga_log)->funcs))) *)&((&__tracepoint_kvm_avic_ga_log)->funcs)); }); ((typeof(*(&__tracepoint_kvm_avic_ga_log)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_avic_ga_log826 = (void *)&__SCK__tp_func_kvm_avic_ga_log;; (&__SCT__tp_func_kvm_avic_ga_log); })(__data, vmid, vcpuid); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_avic_ga_log.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_avic_ga_log.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_827(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_avic_ga_log.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_avic_ga_log.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_avic_ga_log.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_avic_ga_log.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_avic_ga_log.funcs)) == sizeof(long long))) __compiletime_assert_827(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_avic_ga_log.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_avic_ga_log.funcs)))) *)&((__tracepoint_kvm_avic_ga_log.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_avic_ga_log.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_avic_ga_log(void (*probe)(void *__data, u32 vmid, u32 vcpuid), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_avic_ga_log, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_avic_ga_log(void (*probe)(void *__data, u32 vmid, u32 vcpuid), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_avic_ga_log, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_avic_ga_log(void (*probe)(void *__data, u32 vmid, u32 vcpuid), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_avic_ga_log, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_avic_ga_log(void (*cb)(void *__data, u32 vmid, u32 vcpuid)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_avic_ga_log_enabled(void) { return static_key_false(&__tracepoint_kvm_avic_ga_log.key); };
# 1434 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_timer_state(void *__data, unsigned int vcpu_id, unsigned int hv_timer_in_use); extern struct static_call_key __SCK__tp_func_kvm_hv_timer_state; extern typeof(__traceiter_kvm_hv_timer_state) __SCT__tp_func_kvm_hv_timer_state;; extern struct tracepoint __tracepoint_kvm_hv_timer_state; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_timer_state(unsigned int vcpu_id, unsigned int hv_timer_in_use) { if (static_key_false(&__tracepoint_kvm_hv_timer_state.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_timer_state)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_828(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_timer_state)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_timer_state)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_timer_state)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_timer_state)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_timer_state)->funcs) == sizeof(long long))) __compiletime_assert_828(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_timer_state)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_timer_state)->funcs))) *)&((&__tracepoint_kvm_hv_timer_state)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_timer_state)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_timer_state829 = (void *)&__SCK__tp_func_kvm_hv_timer_state;; (&__SCT__tp_func_kvm_hv_timer_state); })(__data, vcpu_id, hv_timer_in_use); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_timer_state.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_timer_state.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_830(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_timer_state.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_timer_state.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_timer_state.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_timer_state.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_timer_state.funcs)) == sizeof(long long))) __compiletime_assert_830(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_timer_state.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_timer_state.funcs)))) *)&((__tracepoint_kvm_hv_timer_state.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_timer_state.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_timer_state(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int hv_timer_in_use), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_timer_state, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_timer_state(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int hv_timer_in_use), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_timer_state, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_timer_state(void (*probe)(void *__data, unsigned int vcpu_id, unsigned int hv_timer_in_use), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_timer_state, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_timer_state(void (*cb)(void *__data, unsigned int vcpu_id, unsigned int hv_timer_in_use)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_timer_state_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_timer_state.key); };
# 1453 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_flush_tlb(void *__data, u64 processor_mask, u64 address_space, u64 flags); extern struct static_call_key __SCK__tp_func_kvm_hv_flush_tlb; extern typeof(__traceiter_kvm_hv_flush_tlb) __SCT__tp_func_kvm_hv_flush_tlb;; extern struct tracepoint __tracepoint_kvm_hv_flush_tlb; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_flush_tlb(u64 processor_mask, u64 address_space, u64 flags) { if (static_key_false(&__tracepoint_kvm_hv_flush_tlb.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_flush_tlb)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_831(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_flush_tlb)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_flush_tlb)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_flush_tlb)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_flush_tlb)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_flush_tlb)->funcs) == sizeof(long long))) __compiletime_assert_831(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_flush_tlb)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_flush_tlb)->funcs))) *)&((&__tracepoint_kvm_hv_flush_tlb)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_flush_tlb)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_flush_tlb832 = (void *)&__SCK__tp_func_kvm_hv_flush_tlb;; (&__SCT__tp_func_kvm_hv_flush_tlb); })(__data, processor_mask, address_space, flags); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_flush_tlb.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_flush_tlb.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_833(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_flush_tlb.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_flush_tlb.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_flush_tlb.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_flush_tlb.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_flush_tlb.funcs)) == sizeof(long long))) __compiletime_assert_833(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_flush_tlb.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_flush_tlb.funcs)))) *)&((__tracepoint_kvm_hv_flush_tlb.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_flush_tlb.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_flush_tlb(void (*probe)(void *__data, u64 processor_mask, u64 address_space, u64 flags), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_flush_tlb, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_flush_tlb(void (*probe)(void *__data, u64 processor_mask, u64 address_space, u64 flags), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_flush_tlb, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_flush_tlb(void (*probe)(void *__data, u64 processor_mask, u64 address_space, u64 flags), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_flush_tlb, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_flush_tlb(void (*cb)(void *__data, u64 processor_mask, u64 address_space, u64 flags)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_flush_tlb_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_flush_tlb.key); };
# 1477 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_flush_tlb_ex(void *__data, u64 valid_bank_mask, u64 format, u64 address_space, u64 flags); extern struct static_call_key __SCK__tp_func_kvm_hv_flush_tlb_ex; extern typeof(__traceiter_kvm_hv_flush_tlb_ex) __SCT__tp_func_kvm_hv_flush_tlb_ex;; extern struct tracepoint __tracepoint_kvm_hv_flush_tlb_ex; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_flush_tlb_ex(u64 valid_bank_mask, u64 format, u64 address_space, u64 flags) { if (static_key_false(&__tracepoint_kvm_hv_flush_tlb_ex.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_834(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs) == sizeof(long long))) __compiletime_assert_834(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs))) *)&((&__tracepoint_kvm_hv_flush_tlb_ex)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_flush_tlb_ex)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_flush_tlb_ex835 = (void *)&__SCK__tp_func_kvm_hv_flush_tlb_ex;; (&__SCT__tp_func_kvm_hv_flush_tlb_ex); })(__data, valid_bank_mask, format, address_space, flags); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_flush_tlb_ex.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_flush_tlb_ex.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_836(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_flush_tlb_ex.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_flush_tlb_ex.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_flush_tlb_ex.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_flush_tlb_ex.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_flush_tlb_ex.funcs)) == sizeof(long long))) __compiletime_assert_836(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_flush_tlb_ex.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_flush_tlb_ex.funcs)))) *)&((__tracepoint_kvm_hv_flush_tlb_ex.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_flush_tlb_ex.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_flush_tlb_ex(void (*probe)(void *__data, u64 valid_bank_mask, u64 format, u64 address_space, u64 flags), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_flush_tlb_ex, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_flush_tlb_ex(void (*probe)(void *__data, u64 valid_bank_mask, u64 format, u64 address_space, u64 flags), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_flush_tlb_ex, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_flush_tlb_ex(void (*probe)(void *__data, u64 valid_bank_mask, u64 format, u64 address_space, u64 flags), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_flush_tlb_ex, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_flush_tlb_ex(void (*cb)(void *__data, u64 valid_bank_mask, u64 format, u64 address_space, u64 flags)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_flush_tlb_ex_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_flush_tlb_ex.key); };
# 1504 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_send_ipi(void *__data, u32 vector, u64 processor_mask); extern struct static_call_key __SCK__tp_func_kvm_hv_send_ipi; extern typeof(__traceiter_kvm_hv_send_ipi) __SCT__tp_func_kvm_hv_send_ipi;; extern struct tracepoint __tracepoint_kvm_hv_send_ipi; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_send_ipi(u32 vector, u64 processor_mask) { if (static_key_false(&__tracepoint_kvm_hv_send_ipi.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_send_ipi)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_837(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_send_ipi)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_send_ipi)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_send_ipi)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_send_ipi)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_send_ipi)->funcs) == sizeof(long long))) __compiletime_assert_837(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_send_ipi)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_send_ipi)->funcs))) *)&((&__tracepoint_kvm_hv_send_ipi)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_send_ipi)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_send_ipi838 = (void *)&__SCK__tp_func_kvm_hv_send_ipi;; (&__SCT__tp_func_kvm_hv_send_ipi); })(__data, vector, processor_mask); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_send_ipi.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_send_ipi.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_839(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_send_ipi.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_send_ipi.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_send_ipi.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_send_ipi.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_send_ipi.funcs)) == sizeof(long long))) __compiletime_assert_839(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_send_ipi.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_send_ipi.funcs)))) *)&((__tracepoint_kvm_hv_send_ipi.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_send_ipi.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_send_ipi(void (*probe)(void *__data, u32 vector, u64 processor_mask), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_send_ipi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_send_ipi(void (*probe)(void *__data, u32 vector, u64 processor_mask), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_send_ipi, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_send_ipi(void (*probe)(void *__data, u32 vector, u64 processor_mask), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_send_ipi, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_send_ipi(void (*cb)(void *__data, u32 vector, u64 processor_mask)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_send_ipi_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_send_ipi.key); };
# 1522 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_send_ipi_ex(void *__data, u32 vector, u64 format, u64 valid_bank_mask); extern struct static_call_key __SCK__tp_func_kvm_hv_send_ipi_ex; extern typeof(__traceiter_kvm_hv_send_ipi_ex) __SCT__tp_func_kvm_hv_send_ipi_ex;; extern struct tracepoint __tracepoint_kvm_hv_send_ipi_ex; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_send_ipi_ex(u32 vector, u64 format, u64 valid_bank_mask) { if (static_key_false(&__tracepoint_kvm_hv_send_ipi_ex.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_send_ipi_ex)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_840(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_send_ipi_ex)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_send_ipi_ex)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_send_ipi_ex)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_send_ipi_ex)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_send_ipi_ex)->funcs) == sizeof(long long))) __compiletime_assert_840(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_send_ipi_ex)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_send_ipi_ex)->funcs))) *)&((&__tracepoint_kvm_hv_send_ipi_ex)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_send_ipi_ex)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_send_ipi_ex841 = (void *)&__SCK__tp_func_kvm_hv_send_ipi_ex;; (&__SCT__tp_func_kvm_hv_send_ipi_ex); })(__data, vector, format, valid_bank_mask); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_send_ipi_ex.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_send_ipi_ex.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_842(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_send_ipi_ex.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_send_ipi_ex.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_send_ipi_ex.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_send_ipi_ex.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_send_ipi_ex.funcs)) == sizeof(long long))) __compiletime_assert_842(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_send_ipi_ex.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_send_ipi_ex.funcs)))) *)&((__tracepoint_kvm_hv_send_ipi_ex.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_send_ipi_ex.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_send_ipi_ex(void (*probe)(void *__data, u32 vector, u64 format, u64 valid_bank_mask), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_send_ipi_ex, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_send_ipi_ex(void (*probe)(void *__data, u32 vector, u64 format, u64 valid_bank_mask), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_send_ipi_ex, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_send_ipi_ex(void (*probe)(void *__data, u32 vector, u64 format, u64 valid_bank_mask), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_send_ipi_ex, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_send_ipi_ex(void (*cb)(void *__data, u32 vector, u64 format, u64 valid_bank_mask)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_send_ipi_ex_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_send_ipi_ex.key); };
# 1543 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_pv_tlb_flush(void *__data, unsigned int vcpu_id, bool need_flush_tlb); extern struct static_call_key __SCK__tp_func_kvm_pv_tlb_flush; extern typeof(__traceiter_kvm_pv_tlb_flush) __SCT__tp_func_kvm_pv_tlb_flush;; extern struct tracepoint __tracepoint_kvm_pv_tlb_flush; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_pv_tlb_flush(unsigned int vcpu_id, bool need_flush_tlb) { if (static_key_false(&__tracepoint_kvm_pv_tlb_flush.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_pv_tlb_flush)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_843(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_pv_tlb_flush)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_pv_tlb_flush)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_pv_tlb_flush)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_pv_tlb_flush)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_pv_tlb_flush)->funcs) == sizeof(long long))) __compiletime_assert_843(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_pv_tlb_flush)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_pv_tlb_flush)->funcs))) *)&((&__tracepoint_kvm_pv_tlb_flush)->funcs)); }); ((typeof(*(&__tracepoint_kvm_pv_tlb_flush)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_pv_tlb_flush844 = (void *)&__SCK__tp_func_kvm_pv_tlb_flush;; (&__SCT__tp_func_kvm_pv_tlb_flush); })(__data, vcpu_id, need_flush_tlb); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_pv_tlb_flush.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_pv_tlb_flush.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_845(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_pv_tlb_flush.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_pv_tlb_flush.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_pv_tlb_flush.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_pv_tlb_flush.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_pv_tlb_flush.funcs)) == sizeof(long long))) __compiletime_assert_845(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_pv_tlb_flush.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_pv_tlb_flush.funcs)))) *)&((__tracepoint_kvm_pv_tlb_flush.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_pv_tlb_flush.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_pv_tlb_flush(void (*probe)(void *__data, unsigned int vcpu_id, bool need_flush_tlb), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_pv_tlb_flush, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_pv_tlb_flush(void (*probe)(void *__data, unsigned int vcpu_id, bool need_flush_tlb), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_pv_tlb_flush, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_pv_tlb_flush(void (*probe)(void *__data, unsigned int vcpu_id, bool need_flush_tlb), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_pv_tlb_flush, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_pv_tlb_flush(void (*cb)(void *__data, unsigned int vcpu_id, bool need_flush_tlb)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_pv_tlb_flush_enabled(void) { return static_key_false(&__tracepoint_kvm_pv_tlb_flush.key); };
# 1564 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_nested_vmenter_failed(void *__data, const char *msg, u32 err); extern struct static_call_key __SCK__tp_func_kvm_nested_vmenter_failed; extern typeof(__traceiter_kvm_nested_vmenter_failed) __SCT__tp_func_kvm_nested_vmenter_failed;; extern struct tracepoint __tracepoint_kvm_nested_vmenter_failed; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_nested_vmenter_failed(const char *msg, u32 err) { if (static_key_false(&__tracepoint_kvm_nested_vmenter_failed.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_nested_vmenter_failed)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_846(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_nested_vmenter_failed)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_nested_vmenter_failed)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_nested_vmenter_failed)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_nested_vmenter_failed)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_nested_vmenter_failed)->funcs) == sizeof(long long))) __compiletime_assert_846(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_nested_vmenter_failed)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_nested_vmenter_failed)->funcs))) *)&((&__tracepoint_kvm_nested_vmenter_failed)->funcs)); }); ((typeof(*(&__tracepoint_kvm_nested_vmenter_failed)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_nested_vmenter_failed847 = (void *)&__SCK__tp_func_kvm_nested_vmenter_failed;; (&__SCT__tp_func_kvm_nested_vmenter_failed); })(__data, msg, err); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_nested_vmenter_failed.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_nested_vmenter_failed.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_848(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_nested_vmenter_failed.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_nested_vmenter_failed.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_nested_vmenter_failed.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_nested_vmenter_failed.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_nested_vmenter_failed.funcs)) == sizeof(long long))) __compiletime_assert_848(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_nested_vmenter_failed.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_nested_vmenter_failed.funcs)))) *)&((__tracepoint_kvm_nested_vmenter_failed.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_nested_vmenter_failed.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_nested_vmenter_failed(void (*probe)(void *__data, const char *msg, u32 err), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_nested_vmenter_failed, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_nested_vmenter_failed(void (*probe)(void *__data, const char *msg, u32 err), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_nested_vmenter_failed, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_nested_vmenter_failed(void (*probe)(void *__data, const char *msg, u32 err), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_nested_vmenter_failed, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_nested_vmenter_failed(void (*cb)(void *__data, const char *msg, u32 err)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_nested_vmenter_failed_enabled(void) { return static_key_false(&__tracepoint_kvm_nested_vmenter_failed.key); };
# 1585 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_syndbg_set_msr(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data); extern struct static_call_key __SCK__tp_func_kvm_hv_syndbg_set_msr; extern typeof(__traceiter_kvm_hv_syndbg_set_msr) __SCT__tp_func_kvm_hv_syndbg_set_msr;; extern struct tracepoint __tracepoint_kvm_hv_syndbg_set_msr; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_syndbg_set_msr(int vcpu_id, u32 vp_index, u32 msr, u64 data) { if (static_key_false(&__tracepoint_kvm_hv_syndbg_set_msr.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_849(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs) == sizeof(long long))) __compiletime_assert_849(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs))) *)&((&__tracepoint_kvm_hv_syndbg_set_msr)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_syndbg_set_msr)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_syndbg_set_msr850 = (void *)&__SCK__tp_func_kvm_hv_syndbg_set_msr;; (&__SCT__tp_func_kvm_hv_syndbg_set_msr); })(__data, vcpu_id, vp_index, msr, data); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_syndbg_set_msr.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_syndbg_set_msr.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_851(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_syndbg_set_msr.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_syndbg_set_msr.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_syndbg_set_msr.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_syndbg_set_msr.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_syndbg_set_msr.funcs)) == sizeof(long long))) __compiletime_assert_851(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_syndbg_set_msr.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_syndbg_set_msr.funcs)))) *)&((__tracepoint_kvm_hv_syndbg_set_msr.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_syndbg_set_msr.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_syndbg_set_msr(void (*probe)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_syndbg_set_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_syndbg_set_msr(void (*probe)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_syndbg_set_msr, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_syndbg_set_msr(void (*probe)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_syndbg_set_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_syndbg_set_msr(void (*cb)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_syndbg_set_msr_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_syndbg_set_msr.key); };
# 1611 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_hv_syndbg_get_msr(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data); extern struct static_call_key __SCK__tp_func_kvm_hv_syndbg_get_msr; extern typeof(__traceiter_kvm_hv_syndbg_get_msr) __SCT__tp_func_kvm_hv_syndbg_get_msr;; extern struct tracepoint __tracepoint_kvm_hv_syndbg_get_msr; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_hv_syndbg_get_msr(int vcpu_id, u32 vp_index, u32 msr, u64 data) { if (static_key_false(&__tracepoint_kvm_hv_syndbg_get_msr.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_852(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs) == sizeof(long long))) __compiletime_assert_852(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs))) *)&((&__tracepoint_kvm_hv_syndbg_get_msr)->funcs)); }); ((typeof(*(&__tracepoint_kvm_hv_syndbg_get_msr)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_hv_syndbg_get_msr853 = (void *)&__SCK__tp_func_kvm_hv_syndbg_get_msr;; (&__SCT__tp_func_kvm_hv_syndbg_get_msr); })(__data, vcpu_id, vp_index, msr, data); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_hv_syndbg_get_msr.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_hv_syndbg_get_msr.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_854(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_hv_syndbg_get_msr.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_hv_syndbg_get_msr.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_hv_syndbg_get_msr.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_hv_syndbg_get_msr.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_hv_syndbg_get_msr.funcs)) == sizeof(long long))) __compiletime_assert_854(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_hv_syndbg_get_msr.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_hv_syndbg_get_msr.funcs)))) *)&((__tracepoint_kvm_hv_syndbg_get_msr.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_hv_syndbg_get_msr.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_hv_syndbg_get_msr(void (*probe)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_hv_syndbg_get_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_hv_syndbg_get_msr(void (*probe)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_hv_syndbg_get_msr, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_hv_syndbg_get_msr(void (*probe)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_hv_syndbg_get_msr, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_hv_syndbg_get_msr(void (*cb)(void *__data, int vcpu_id, u32 vp_index, u32 msr, u64 data)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_hv_syndbg_get_msr_enabled(void) { return static_key_false(&__tracepoint_kvm_hv_syndbg_get_msr.key); };
# 1637 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_vmgexit_enter(void *__data, unsigned int vcpu_id, struct ghcb *ghcb); extern struct static_call_key __SCK__tp_func_kvm_vmgexit_enter; extern typeof(__traceiter_kvm_vmgexit_enter) __SCT__tp_func_kvm_vmgexit_enter;; extern struct tracepoint __tracepoint_kvm_vmgexit_enter; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_vmgexit_enter(unsigned int vcpu_id, struct ghcb *ghcb) { if (static_key_false(&__tracepoint_kvm_vmgexit_enter.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_vmgexit_enter)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_855(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_vmgexit_enter)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_vmgexit_enter)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_vmgexit_enter)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_vmgexit_enter)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_vmgexit_enter)->funcs) == sizeof(long long))) __compiletime_assert_855(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_vmgexit_enter)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_vmgexit_enter)->funcs))) *)&((&__tracepoint_kvm_vmgexit_enter)->funcs)); }); ((typeof(*(&__tracepoint_kvm_vmgexit_enter)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_vmgexit_enter856 = (void *)&__SCK__tp_func_kvm_vmgexit_enter;; (&__SCT__tp_func_kvm_vmgexit_enter); })(__data, vcpu_id, ghcb); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_vmgexit_enter.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_vmgexit_enter.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_857(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_vmgexit_enter.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_vmgexit_enter.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_vmgexit_enter.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_vmgexit_enter.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_vmgexit_enter.funcs)) == sizeof(long long))) __compiletime_assert_857(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_vmgexit_enter.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_vmgexit_enter.funcs)))) *)&((__tracepoint_kvm_vmgexit_enter.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_vmgexit_enter.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_vmgexit_enter(void (*probe)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_vmgexit_enter, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_vmgexit_enter(void (*probe)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_vmgexit_enter, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_vmgexit_enter(void (*probe)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_vmgexit_enter, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_vmgexit_enter(void (*cb)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_vmgexit_enter_enabled(void) { return static_key_false(&__tracepoint_kvm_vmgexit_enter.key); };
# 1663 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_vmgexit_exit(void *__data, unsigned int vcpu_id, struct ghcb *ghcb); extern struct static_call_key __SCK__tp_func_kvm_vmgexit_exit; extern typeof(__traceiter_kvm_vmgexit_exit) __SCT__tp_func_kvm_vmgexit_exit;; extern struct tracepoint __tracepoint_kvm_vmgexit_exit; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_vmgexit_exit(unsigned int vcpu_id, struct ghcb *ghcb) { if (static_key_false(&__tracepoint_kvm_vmgexit_exit.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_vmgexit_exit)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_858(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_vmgexit_exit)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_vmgexit_exit)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_vmgexit_exit)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_vmgexit_exit)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_vmgexit_exit)->funcs) == sizeof(long long))) __compiletime_assert_858(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_vmgexit_exit)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_vmgexit_exit)->funcs))) *)&((&__tracepoint_kvm_vmgexit_exit)->funcs)); }); ((typeof(*(&__tracepoint_kvm_vmgexit_exit)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_vmgexit_exit859 = (void *)&__SCK__tp_func_kvm_vmgexit_exit;; (&__SCT__tp_func_kvm_vmgexit_exit); })(__data, vcpu_id, ghcb); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_vmgexit_exit.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_vmgexit_exit.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_860(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_vmgexit_exit.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_vmgexit_exit.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_vmgexit_exit.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_vmgexit_exit.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_vmgexit_exit.funcs)) == sizeof(long long))) __compiletime_assert_860(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_vmgexit_exit.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_vmgexit_exit.funcs)))) *)&((__tracepoint_kvm_vmgexit_exit.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_vmgexit_exit.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_vmgexit_exit(void (*probe)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_vmgexit_exit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_vmgexit_exit(void (*probe)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_vmgexit_exit, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_vmgexit_exit(void (*probe)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_vmgexit_exit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_vmgexit_exit(void (*cb)(void *__data, unsigned int vcpu_id, struct ghcb *ghcb)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_vmgexit_exit_enabled(void) { return static_key_false(&__tracepoint_kvm_vmgexit_exit.key); };
# 1689 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_vmgexit_msr_protocol_enter(void *__data, unsigned int vcpu_id, u64 ghcb_gpa); extern struct static_call_key __SCK__tp_func_kvm_vmgexit_msr_protocol_enter; extern typeof(__traceiter_kvm_vmgexit_msr_protocol_enter) __SCT__tp_func_kvm_vmgexit_msr_protocol_enter;; extern struct tracepoint __tracepoint_kvm_vmgexit_msr_protocol_enter; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_vmgexit_msr_protocol_enter(unsigned int vcpu_id, u64 ghcb_gpa) { if (static_key_false(&__tracepoint_kvm_vmgexit_msr_protocol_enter.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_861(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs) == sizeof(long long))) __compiletime_assert_861(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs))) *)&((&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs)); }); ((typeof(*(&__tracepoint_kvm_vmgexit_msr_protocol_enter)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_vmgexit_msr_protocol_enter862 = (void *)&__SCK__tp_func_kvm_vmgexit_msr_protocol_enter;; (&__SCT__tp_func_kvm_vmgexit_msr_protocol_enter); })(__data, vcpu_id, ghcb_gpa); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_863(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) == sizeof(long long))) __compiletime_assert_863(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)))) *)&((__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_vmgexit_msr_protocol_enter.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_vmgexit_msr_protocol_enter(void (*probe)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_vmgexit_msr_protocol_enter, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_vmgexit_msr_protocol_enter(void (*probe)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_vmgexit_msr_protocol_enter, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_vmgexit_msr_protocol_enter(void (*probe)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_vmgexit_msr_protocol_enter, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_vmgexit_msr_protocol_enter(void (*cb)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_vmgexit_msr_protocol_enter_enabled(void) { return static_key_false(&__tracepoint_kvm_vmgexit_msr_protocol_enter.key); };
# 1710 "./arch/x86/kvm/trace.h"
extern int __traceiter_kvm_vmgexit_msr_protocol_exit(void *__data, unsigned int vcpu_id, u64 ghcb_gpa, int result); extern struct static_call_key __SCK__tp_func_kvm_vmgexit_msr_protocol_exit; extern typeof(__traceiter_kvm_vmgexit_msr_protocol_exit) __SCT__tp_func_kvm_vmgexit_msr_protocol_exit;; extern struct tracepoint __tracepoint_kvm_vmgexit_msr_protocol_exit; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void trace_kvm_vmgexit_msr_protocol_exit(unsigned int vcpu_id, u64 ghcb_gpa, int result) { if (static_key_false(&__tracepoint_kvm_vmgexit_msr_protocol_exit.key)) do { int __attribute__((__unused__)) __idx = 0; if (!(cpu_online(0))) return; ({ int __ret_warn_on = !!(0 && ((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4))))); __builtin_expect(!!(__ret_warn_on), 0); }); do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); if (0) { __idx = srcu_read_lock_notrace(&tracepoint_srcu); rcu_irq_enter_irqson(); } do { struct tracepoint_func *it_func_ptr; void *__data; it_func_ptr = ({ typeof((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs) ________p1 = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_864(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs) == sizeof(char) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs) == sizeof(short) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs) == sizeof(int) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs) == sizeof(long)) || sizeof((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs) == sizeof(long long))) __compiletime_assert_864(); } while (0); (*(const volatile typeof( _Generic(((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs))) *)&((&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs)); }); ((typeof(*(&__tracepoint_kvm_vmgexit_msr_protocol_exit)->funcs) *)(________p1)); }); if (it_func_ptr) { __data = (it_func_ptr)->data; ({ static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___SCK__tp_func_kvm_vmgexit_msr_protocol_exit865 = (void *)&__SCK__tp_func_kvm_vmgexit_msr_protocol_exit;; (&__SCT__tp_func_kvm_vmgexit_msr_protocol_exit); })(__data, vcpu_id, ghcb_gpa, result); } } while (0); if (0) { rcu_irq_exit_irqson(); srcu_read_unlock_notrace(&tracepoint_srcu, __idx); } do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0); } while (0); } while (0); if (1 && (cpu_online(0))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) *________p1 = (typeof(*(__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_866(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) == sizeof(char) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) == sizeof(short) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) == sizeof(int) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) == sizeof(long)) || sizeof((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) == sizeof(long long))) __compiletime_assert_866(); } while (0); (*(const volatile typeof( _Generic(((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)))) *)&((__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs))); }); do { } while (0 && (!((0) || rcu_read_lock_sched_held()))); ; ((typeof(*(__tracepoint_kvm_vmgexit_msr_protocol_exit.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_kvm_vmgexit_msr_protocol_exit(void (*probe)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa, int result), void *data) { return tracepoint_probe_register(&__tracepoint_kvm_vmgexit_msr_protocol_exit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_trace_prio_kvm_vmgexit_msr_protocol_exit(void (*probe)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa, int result), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_kvm_vmgexit_msr_protocol_exit, (void *)probe, data, prio); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int unregister_trace_kvm_vmgexit_msr_protocol_exit(void (*probe)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa, int result), void *data) { return tracepoint_probe_unregister(&__tracepoint_kvm_vmgexit_msr_protocol_exit, (void *)probe, data); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_trace_callback_type_kvm_vmgexit_msr_protocol_exit(void (*cb)(void *__data, unsigned int vcpu_id, u64 ghcb_gpa, int result)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool trace_kvm_vmgexit_msr_protocol_exit_enabled(void) { return static_key_false(&__tracepoint_kvm_vmgexit_msr_protocol_exit.key); };
# 1738 "./arch/x86/kvm/trace.h"
# 1 "./include/trace/define_trace.h" 1
# 1739 "./arch/x86/kvm/trace.h" 2
# 64 "arch/x86/kvm/vmx/vmx.c" 2





static const char __UNIQUE_ID_author867[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "author" "=" "Qumranet";
 static const char __UNIQUE_ID_license868[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "license" "=" "GPL";


static const struct x86_cpu_id vmx_cpu_id[] = {
 { .vendor = 0xffff, .family = 0, .model = 0, .steppings = 0, .feature = ( 4*32+ 5), .driver_data = (unsigned long) ((void *)0) },
 {}
};
extern typeof(vmx_cpu_id) __mod_x86cpu__vmx_cpu_id_device_table __attribute__ ((unused, alias("vmx_cpu_id")));


bool __attribute__((__section__(".data..read_mostly"))) enable_vpid = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_vpid(void) { return(&(enable_vpid)); }; static const char __param_str_vpid[] = "vpid"; static struct kernel_param const __param_vpid __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_vpid, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { &enable_vpid } }; static const char __UNIQUE_ID_vpidtype869[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "vpid" ":" "bool";

static bool __attribute__((__section__(".data..read_mostly"))) enable_vnmi = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_vnmi(void) { return(&(enable_vnmi)); }; static const char __param_str_vnmi[] = "vnmi"; static struct kernel_param const __param_vnmi __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_vnmi, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &enable_vnmi } }; static const char __UNIQUE_ID_vnmitype870[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "vnmi" ":" "bool";

bool __attribute__((__section__(".data..read_mostly"))) flexpriority_enabled = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_flexpriority(void) { return(&(flexpriority_enabled)); }; static const char __param_str_flexpriority[] = "flexpriority"; static struct kernel_param const __param_flexpriority __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_flexpriority, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &flexpriority_enabled } }; static const char __UNIQUE_ID_flexprioritytype871[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "flexpriority" ":" "bool";

bool __attribute__((__section__(".data..read_mostly"))) enable_ept = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_ept(void) { return(&(enable_ept)); }; static const char __param_str_ept[] = "ept"; static struct kernel_param const __param_ept __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_ept, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &enable_ept } }; static const char __UNIQUE_ID_epttype872[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "ept" ":" "bool";

bool __attribute__((__section__(".data..read_mostly"))) enable_unrestricted_guest = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_unrestricted_guest(void) { return(&(enable_unrestricted_guest)); }; static const char __param_str_unrestricted_guest[] = "unrestricted_guest"; static struct kernel_param const __param_unrestricted_guest __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_unrestricted_guest, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &enable_unrestricted_guest } }; static const char __UNIQUE_ID_unrestricted_guesttype873[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "unrestricted_guest" ":" "bool";


bool __attribute__((__section__(".data..read_mostly"))) enable_ept_ad_bits = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_eptad(void) { return(&(enable_ept_ad_bits)); }; static const char __param_str_eptad[] = "eptad"; static struct kernel_param const __param_eptad __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_eptad, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &enable_ept_ad_bits } }; static const char __UNIQUE_ID_eptadtype874[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "eptad" ":" "bool";

static bool __attribute__((__section__(".data..read_mostly"))) emulate_invalid_guest_state = true;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_emulate_invalid_guest_state(void) { return(&(emulate_invalid_guest_state)); }; static const char __param_str_emulate_invalid_guest_state[] = "emulate_invalid_guest_state"; static struct kernel_param const __param_emulate_invalid_guest_state __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_emulate_invalid_guest_state, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &emulate_invalid_guest_state } }; static const char __UNIQUE_ID_emulate_invalid_guest_statetype875[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "emulate_invalid_guest_state" ":" "bool";

static bool __attribute__((__section__(".data..read_mostly"))) fasteoi = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_fasteoi(void) { return(&(fasteoi)); }; static const char __param_str_fasteoi[] = "fasteoi"; static struct kernel_param const __param_fasteoi __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_fasteoi, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &fasteoi } }; static const char __UNIQUE_ID_fasteoitype876[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "fasteoi" ":" "bool";

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_enable_apicv(void) { return(&(enable_apicv)); }; static const char __param_str_enable_apicv[] = "enable_apicv"; static struct kernel_param const __param_enable_apicv __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_enable_apicv, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &enable_apicv } }; static const char __UNIQUE_ID_enable_apicvtype877[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "enable_apicv" ":" "bool";






static bool __attribute__((__section__(".data..read_mostly"))) nested = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_nested(void) { return(&(nested)); }; static const char __param_str_nested[] = "nested"; static struct kernel_param const __param_nested __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_nested, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &nested } }; static const char __UNIQUE_ID_nestedtype878[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "nested" ":" "bool";

bool __attribute__((__section__(".data..read_mostly"))) enable_pml = 1;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_pml(void) { return(&(enable_pml)); }; static const char __param_str_pml[] = "pml"; static struct kernel_param const __param_pml __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_pml, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &enable_pml } }; static const char __UNIQUE_ID_pmltype879[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "pml" ":" "bool";

static bool __attribute__((__section__(".data..read_mostly"))) dump_invalid_vmcs = 0;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_dump_invalid_vmcs(void) { return(&(dump_invalid_vmcs)); }; static const char __param_str_dump_invalid_vmcs[] = "dump_invalid_vmcs"; static struct kernel_param const __param_dump_invalid_vmcs __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_dump_invalid_vmcs, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!((0644) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0644) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0644) >> 6) & 4) < (((0644) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0644) >> 3) & 4) < ((0644) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0644) >> 6) & 2) < (((0644) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0644) & 2)); }))) + (0644)), -1, 0, { &dump_invalid_vmcs } }; static const char __UNIQUE_ID_dump_invalid_vmcstype880[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "dump_invalid_vmcs" ":" "bool";







static int __attribute__((__section__(".data..read_mostly"))) cpu_preemption_timer_multi;
static bool __attribute__((__section__(".data..read_mostly"))) enable_preemption_timer = 1;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_preemption_timer(void) { return(&(enable_preemption_timer)); }; static const char __param_str_preemption_timer[] = "preemption_timer"; static struct kernel_param const __param_preemption_timer __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_preemption_timer, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &enable_preemption_timer } }; static const char __UNIQUE_ID_preemption_timertype881[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "preemption_timer" ":" "bool";


extern bool __attribute__((__section__(".data..read_mostly"))) allow_smaller_maxphyaddr;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__unused__)) *__check_allow_smaller_maxphyaddr(void) { return(&(allow_smaller_maxphyaddr)); }; static const char __param_str_allow_smaller_maxphyaddr[] = "allow_smaller_maxphyaddr"; static struct kernel_param const __param_allow_smaller_maxphyaddr __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_allow_smaller_maxphyaddr, (&__this_module), &param_ops_bool, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &allow_smaller_maxphyaddr } }; static const char __UNIQUE_ID_allow_smaller_maxphyaddrtype882[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "allow_smaller_maxphyaddr" ":" "bool";
# 156 "arch/x86/kvm/vmx/vmx.c"
static u32 vmx_possible_passthrough_msrs[13] = {
 0x00000048,
 0x00000049,
 0x00000010,

 0xc0000100,
 0xc0000101,
 0xc0000102,

 0x00000174,
 0x00000175,
 0x00000176,
 0x00000660,
 0x000003fc,
 0x000003fd,
 0x000003fe,
};
# 185 "arch/x86/kvm/vmx/vmx.c"
static unsigned int ple_gap = 128;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __attribute__((__unused__)) *__check_ple_gap(void) { return(&(ple_gap)); }; static const char __param_str_ple_gap[] = "ple_gap"; static struct kernel_param const __param_ple_gap __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_ple_gap, (&__this_module), &param_ops_uint, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { &ple_gap } }; static const char __UNIQUE_ID_ple_gaptype883[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "ple_gap" ":" "uint";

static unsigned int ple_window = 4096;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __attribute__((__unused__)) *__check_ple_window(void) { return(&(ple_window)); }; static const char __param_str_ple_window[] = "ple_window"; static struct kernel_param const __param_ple_window __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_ple_window, (&__this_module), &param_ops_uint, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { &ple_window } }; static const char __UNIQUE_ID_ple_windowtype884[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "ple_window" ":" "uint";


static unsigned int ple_window_grow = 2;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __attribute__((__unused__)) *__check_ple_window_grow(void) { return(&(ple_window_grow)); }; static const char __param_str_ple_window_grow[] = "ple_window_grow"; static struct kernel_param const __param_ple_window_grow __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_ple_window_grow, (&__this_module), &param_ops_uint, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { &ple_window_grow } }; static const char __UNIQUE_ID_ple_window_growtype885[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "ple_window_grow" ":" "uint";


static unsigned int ple_window_shrink = 0;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __attribute__((__unused__)) *__check_ple_window_shrink(void) { return(&(ple_window_shrink)); }; static const char __param_str_ple_window_shrink[] = "ple_window_shrink"; static struct kernel_param const __param_ple_window_shrink __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_ple_window_shrink, (&__this_module), &param_ops_uint, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { &ple_window_shrink } }; static const char __UNIQUE_ID_ple_window_shrinktype886[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "ple_window_shrink" ":" "uint";


static unsigned int ple_window_max = (~0U);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __attribute__((__unused__)) *__check_ple_window_max(void) { return(&(ple_window_max)); }; static const char __param_str_ple_window_max[] = "ple_window_max"; static struct kernel_param const __param_ple_window_max __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_ple_window_max, (&__this_module), &param_ops_uint, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { &ple_window_max } }; static const char __UNIQUE_ID_ple_window_maxtype887[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "ple_window_max" ":" "uint";


int __attribute__((__section__(".data..read_mostly"))) pt_mode = 0;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__unused__)) *__check_pt_mode(void) { return(&(pt_mode)); }; static const char __param_str_pt_mode[] = "pt_mode"; static struct kernel_param const __param_pt_mode __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_pt_mode, (&__this_module), &param_ops_int, (((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) < 0)); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 4) < ((((00400|00040|00004)) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 3) & 4) < (((00400|00040|00004)) & 4))); }))) + ((int)(sizeof(struct { int:(-!!(((((00400|00040|00004)) >> 6) & 2) < ((((00400|00040|00004)) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!(((00400|00040|00004)) & 2)); }))) + ((00400|00040|00004))), -1, 0, { &pt_mode } }; static const char __UNIQUE_ID_pt_modetype888[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = "parmtype" "=" "pt_mode" ":" "int";

static struct static_key_false vmx_l1d_should_flush = (struct static_key_false){ .key = { .enabled = { (0) } }, };
static struct static_key_false vmx_l1d_flush_cond = (struct static_key_false){ .key = { .enabled = { (0) } }, };
static struct mutex vmx_l1d_flush_mutex = { .owner = { (0) } , .wait_lock = (raw_spinlock_t) { .raw_lock = { 1 }, .magic = 0xdead4ead, .owner_cpu = -1, .owner = ((void *)-1L), .dep_map = { .name = "vmx_l1d_flush_mutex.wait_lock", .wait_type_inner = LD_WAIT_SPIN, } } , .wait_list = { &(vmx_l1d_flush_mutex.wait_list), &(vmx_l1d_flush_mutex.wait_list) } , .magic = &vmx_l1d_flush_mutex , .dep_map = { .name = "vmx_l1d_flush_mutex", .wait_type_inner = LD_WAIT_SLEEP, } };


static enum vmx_l1d_flush_state __attribute__((__section__(".data..read_mostly"))) vmentry_l1d_flush_param = VMENTER_L1D_FLUSH_AUTO;

static const struct {
 const char *option;
 bool for_parse;
} vmentry_l1d_param[] = {
 [VMENTER_L1D_FLUSH_AUTO] = {"auto", true},
 [VMENTER_L1D_FLUSH_NEVER] = {"never", true},
 [VMENTER_L1D_FLUSH_COND] = {"cond", true},
 [VMENTER_L1D_FLUSH_ALWAYS] = {"always", true},
 [VMENTER_L1D_FLUSH_EPT_DISABLED] = {"EPT disabled", false},
 [VMENTER_L1D_FLUSH_NOT_REQUIRED] = {"not required", false},
};


static void *vmx_l1d_flush_pages;

static int vmx_setup_l1d_flush(enum vmx_l1d_flush_state l1tf)
{
 struct page *page;
 unsigned int i;

 if (!(__builtin_constant_p((((20*32 + (18))))) && ( ((((((20*32 + (18)))))>>5)==(0) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((20*32 + (18)))))>>5)==(1) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((20*32 + (18)))))>>5)==(2) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(3) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((20*32 + (18)))))>>5)==(4) && (1UL<<(((((20*32 + (18)))))&31) & (0) )) || ((((((20*32 + (18)))))>>5)==(5) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(6) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(7) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(8) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(9) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(10) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(11) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(12) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(13) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(14) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(15) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(16) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(17) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(18) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(19) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((((20*32 + (18)))), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {
  l1tf_vmx_mitigation = VMENTER_L1D_FLUSH_NOT_REQUIRED;
  return 0;
 }

 if (!enable_ept) {
  l1tf_vmx_mitigation = VMENTER_L1D_FLUSH_EPT_DISABLED;
  return 0;
 }

 if ((__builtin_constant_p((18*32+29)) && ( ((((18*32+29))>>5)==(0) && (1UL<<(((18*32+29))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+29))>>5)==(1) && (1UL<<(((18*32+29))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+29))>>5)==(2) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(3) && (1UL<<(((18*32+29))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+29))>>5)==(4) && (1UL<<(((18*32+29))&31) & (0) )) || ((((18*32+29))>>5)==(5) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(6) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(7) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(8) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(9) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(10) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(11) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(12) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(13) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(14) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(15) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(16) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(17) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(18) && (1UL<<(((18*32+29))&31) & 0 )) || ((((18*32+29))>>5)==(19) && (1UL<<(((18*32+29))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((18*32+29), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {
  u64 msr;

  ((msr) = native_read_msr((0x0000010a)));
  if (msr & ((((1UL))) << (3))) {
   l1tf_vmx_mitigation = VMENTER_L1D_FLUSH_NOT_REQUIRED;
   return 0;
  }
 }


 if (l1tf == VMENTER_L1D_FLUSH_AUTO) {
  switch (l1tf_mitigation) {
  case L1TF_MITIGATION_OFF:
   l1tf = VMENTER_L1D_FLUSH_NEVER;
   break;
  case L1TF_MITIGATION_FLUSH_NOWARN:
  case L1TF_MITIGATION_FLUSH:
  case L1TF_MITIGATION_FLUSH_NOSMT:
   l1tf = VMENTER_L1D_FLUSH_COND;
   break;
  case L1TF_MITIGATION_FULL:
  case L1TF_MITIGATION_FULL_FORCE:
   l1tf = VMENTER_L1D_FLUSH_ALWAYS;
   break;
  }
 } else if (l1tf_mitigation == L1TF_MITIGATION_FULL_FORCE) {
  l1tf = VMENTER_L1D_FLUSH_ALWAYS;
 }

 if (l1tf != VMENTER_L1D_FLUSH_NEVER && !vmx_l1d_flush_pages &&
     !(__builtin_constant_p((18*32+28)) && ( ((((18*32+28))>>5)==(0) && (1UL<<(((18*32+28))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+28))>>5)==(1) && (1UL<<(((18*32+28))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+28))>>5)==(2) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(3) && (1UL<<(((18*32+28))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+28))>>5)==(4) && (1UL<<(((18*32+28))&31) & (0) )) || ((((18*32+28))>>5)==(5) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(6) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(7) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(8) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(9) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(10) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(11) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(12) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(13) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(14) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(15) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(16) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(17) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(18) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(19) && (1UL<<(((18*32+28))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((18*32+28), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {




  page = alloc_pages(((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), 4);
  if (!page)
   return -12;
  vmx_l1d_flush_pages = lowmem_page_address(page);






  for (i = 0; i < 1u << 4; ++i) {
   memset(vmx_l1d_flush_pages + i * ((1UL) << 12), i + 1,
          ((1UL) << 12));
  }
 }

 l1tf_vmx_mitigation = l1tf;

 if (l1tf != VMENTER_L1D_FLUSH_NEVER)
  static_key_enable(&(&vmx_l1d_should_flush)->key);
 else
  static_key_disable(&(&vmx_l1d_should_flush)->key);

 if (l1tf == VMENTER_L1D_FLUSH_COND)
  static_key_enable(&(&vmx_l1d_flush_cond)->key);
 else
  static_key_disable(&(&vmx_l1d_flush_cond)->key);
 return 0;
}

static int vmentry_l1d_flush_parse(const char *s)
{
 unsigned int i;

 if (s) {
  for (i = 0; i < (sizeof(vmentry_l1d_param) / sizeof((vmentry_l1d_param)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((vmentry_l1d_param)), typeof(&(vmentry_l1d_param)[0])))); })))); i++) {
   if (vmentry_l1d_param[i].for_parse &&
       sysfs_streq(s, vmentry_l1d_param[i].option))
    return i;
  }
 }
 return -22;
}

static int vmentry_l1d_flush_set(const char *s, const struct kernel_param *kp)
{
 int l1tf, ret;

 l1tf = vmentry_l1d_flush_parse(s);
 if (l1tf < 0)
  return l1tf;

 if (!(__builtin_constant_p((20*32 + (18))) && ( ((((20*32 + (18)))>>5)==(0) && (1UL<<(((20*32 + (18)))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((20*32 + (18)))>>5)==(1) && (1UL<<(((20*32 + (18)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((20*32 + (18)))>>5)==(2) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(3) && (1UL<<(((20*32 + (18)))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((20*32 + (18)))>>5)==(4) && (1UL<<(((20*32 + (18)))&31) & (0) )) || ((((20*32 + (18)))>>5)==(5) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(6) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(7) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(8) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(9) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(10) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(11) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(12) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(13) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(14) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(15) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(16) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(17) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(18) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(19) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((20*32 + (18)), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  return 0;







 if (l1tf_vmx_mitigation == VMENTER_L1D_FLUSH_AUTO) {
  vmentry_l1d_flush_param = l1tf;
  return 0;
 }

 mutex_lock_nested(&vmx_l1d_flush_mutex, 0);
 ret = vmx_setup_l1d_flush(l1tf);
 mutex_unlock(&vmx_l1d_flush_mutex);
 return ret;
}

static int vmentry_l1d_flush_get(char *s, const struct kernel_param *kp)
{
 if (({ int __ret_warn_on = !!(l1tf_vmx_mitigation >= (sizeof(vmentry_l1d_param) / sizeof((vmentry_l1d_param)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((vmentry_l1d_param)), typeof(&(vmentry_l1d_param)[0])))); }))))); __builtin_expect(!!(__ret_warn_on), 0); }))
  return sprintf(s, "???\n");

 return sprintf(s, "%s\n", vmentry_l1d_param[l1tf_vmx_mitigation].option);
}

static const struct kernel_param_ops vmentry_l1d_flush_ops = {
 .set = vmentry_l1d_flush_set,
 .get = vmentry_l1d_flush_get,
};
static const char __param_str_vmentry_l1d_flush[] = "vmentry_l1d_flush"; static struct kernel_param const __param_vmentry_l1d_flush __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_vmentry_l1d_flush, (&__this_module), &vmentry_l1d_flush_ops, (((int)(sizeof(struct { int:(-!!((0644) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0644) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0644) >> 6) & 4) < (((0644) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0644) >> 3) & 4) < ((0644) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0644) >> 6) & 2) < (((0644) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0644) & 2)); }))) + (0644)), -1, 0, { ((void *)0) } };

static u32 vmx_segment_access_rights(struct kvm_segment *var);

void vmx_vmexit(void);







           void vmread_error(unsigned long field, bool fault)
{
 if (fault)
  kvm_spurious_fault();
 else
  do { ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("kvm: vmread failed: field=%lx\n", field); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: vmread failed: field=%lx\n", field); }); 0; }); } while (0);
}

__attribute__((__noinline__)) void vmwrite_error(unsigned long field, unsigned long value)
{
 do { ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("kvm: vmwrite failed: field=%lx val=%lx err=%d\n", field, value, vmcs_read32(VM_INSTRUCTION_ERROR)); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: vmwrite failed: field=%lx val=%lx err=%d\n", field, value, vmcs_read32(VM_INSTRUCTION_ERROR)); }); 0; }); } while (0);

}

__attribute__((__noinline__)) void vmclear_error(struct vmcs *vmcs, u64 phys_addr)
{
 do { ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("kvm: vmclear failed: %p/%llx\n", vmcs, phys_addr); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: vmclear failed: %p/%llx\n", vmcs, phys_addr); }); 0; }); } while (0);
}

__attribute__((__noinline__)) void vmptrld_error(struct vmcs *vmcs, u64 phys_addr)
{
 do { ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("kvm: vmptrld failed: %p/%llx\n", vmcs, phys_addr); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: vmptrld failed: %p/%llx\n", vmcs, phys_addr); }); 0; }); } while (0);
}

__attribute__((__noinline__)) void invvpid_error(unsigned long ext, u16 vpid, gva_t gva)
{
 do { ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("kvm: invvpid failed: ext=0x%lx vpid=%u gva=0x%lx\n", ext, vpid, gva); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: invvpid failed: ext=0x%lx vpid=%u gva=0x%lx\n", ext, vpid, gva); }); 0; }); } while (0);

}

__attribute__((__noinline__)) void invept_error(unsigned long ext, u64 eptp, gpa_t gpa)
{
 do { ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("kvm: invept failed: ext=0x%lx eptp=%llx gpa=0x%llx\n", ext, eptp, gpa); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); }); ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: invept failed: ext=0x%lx eptp=%llx gpa=0x%llx\n", ext, eptp, gpa); }); 0; }); } while (0);

}

static __attribute__((section(".data" ""))) __typeof__(struct vmcs *) vmxarea;
 __attribute__((section(".data" ""))) __typeof__(struct vmcs *) current_vmcs;




static __attribute__((section(".data" ""))) __typeof__(struct list_head) loaded_vmcss_on_cpu;

static unsigned long vmx_vpid_bitmap[((((1 << 16)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
static spinlock_t vmx_vpid_lock = (spinlock_t) { { .rlock = { .raw_lock = { 1 }, .magic = 0xdead4ead, .owner_cpu = -1, .owner = ((void *)-1L), .dep_map = { .name = "vmx_vpid_lock", .wait_type_inner = LD_WAIT_CONFIG, } } } };

struct vmcs_config vmcs_config;
struct vmx_capability vmx_capability;
# 434 "arch/x86/kvm/vmx/vmx.c"
static const struct kvm_vmx_segment_field {
 unsigned selector;
 unsigned base;
 unsigned limit;
 unsigned ar_bytes;
} kvm_vmx_segment_fields[] = {
 [VCPU_SREG_CS] = { .selector = GUEST_CS_SELECTOR, .base = GUEST_CS_BASE, .limit = GUEST_CS_LIMIT, .ar_bytes = GUEST_CS_AR_BYTES, },
 [VCPU_SREG_DS] = { .selector = GUEST_DS_SELECTOR, .base = GUEST_DS_BASE, .limit = GUEST_DS_LIMIT, .ar_bytes = GUEST_DS_AR_BYTES, },
 [VCPU_SREG_ES] = { .selector = GUEST_ES_SELECTOR, .base = GUEST_ES_BASE, .limit = GUEST_ES_LIMIT, .ar_bytes = GUEST_ES_AR_BYTES, },
 [VCPU_SREG_FS] = { .selector = GUEST_FS_SELECTOR, .base = GUEST_FS_BASE, .limit = GUEST_FS_LIMIT, .ar_bytes = GUEST_FS_AR_BYTES, },
 [VCPU_SREG_GS] = { .selector = GUEST_GS_SELECTOR, .base = GUEST_GS_BASE, .limit = GUEST_GS_LIMIT, .ar_bytes = GUEST_GS_AR_BYTES, },
 [VCPU_SREG_SS] = { .selector = GUEST_SS_SELECTOR, .base = GUEST_SS_BASE, .limit = GUEST_SS_LIMIT, .ar_bytes = GUEST_SS_AR_BYTES, },
 [VCPU_SREG_TR] = { .selector = GUEST_TR_SELECTOR, .base = GUEST_TR_BASE, .limit = GUEST_TR_LIMIT, .ar_bytes = GUEST_TR_AR_BYTES, },
 [VCPU_SREG_LDTR] = { .selector = GUEST_LDTR_SELECTOR, .base = GUEST_LDTR_BASE, .limit = GUEST_LDTR_LIMIT, .ar_bytes = GUEST_LDTR_AR_BYTES, },
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vmx_segment_cache_clear(struct vcpu_vmx *vmx)
{
 vmx->segment_cache.bitmask = 0;
}

static unsigned long host_idt_base;
# 493 "arch/x86/kvm/vmx/vmx.c"
static u32 vmx_preemption_cpu_tfms[] = {

0x000206E6,



0x00020652,

0x00020655,






0x000106E5,

0x000106A0,

0x000106A1,

0x000106A4,



0x000106A5,

0x000306A8,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_has_broken_vmx_preemption_timer(void)
{
 u32 eax = cpuid_eax(0x00000001), i;


 eax &= ~(0x3U << 14 | 0xfU << 28);
 for (i = 0; i < (sizeof(vmx_preemption_cpu_tfms) / sizeof((vmx_preemption_cpu_tfms)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((vmx_preemption_cpu_tfms)), typeof(&(vmx_preemption_cpu_tfms)[0])))); })))); i++)
  if (eax == vmx_preemption_cpu_tfms[i])
   return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpu_need_virtualize_apic_accesses(struct kvm_vcpu *vcpu)
{
 return flexpriority_enabled && lapic_in_kernel(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool report_flexpriority(void)
{
 return flexpriority_enabled;
}

static int possible_passthrough_msr_slot(u32 msr)
{
 u32 i;

 for (i = 0; i < (sizeof(vmx_possible_passthrough_msrs) / sizeof((vmx_possible_passthrough_msrs)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((vmx_possible_passthrough_msrs)), typeof(&(vmx_possible_passthrough_msrs)[0])))); })))); i++)
  if (vmx_possible_passthrough_msrs[i] == msr)
   return i;

 return -2;
}

static bool is_valid_passthrough_msr(u32 msr)
{
 bool r;

 switch (msr) {
 case 0x800 ... 0x8ff:

  return true;
 case 0x00000571:
 case 0x00000560:
 case 0x00000561:
 case 0x00000572:
 case 0x00000580 ... 0x00000587:

 case 0x000001c8:
 case 0x000001c9:
 case 0x00000dc0 ... 0x00000dc0 + 31:
 case 0x00000680 ... 0x00000680 + 31:
 case 0x000006c0 ... 0x000006c0 + 31:
 case 0x00000040 ... 0x00000040 + 8:
 case 0x00000060 ... 0x00000060 + 8:

  return true;
 }

 r = possible_passthrough_msr_slot(msr) != -2;

 ({ int __ret_warn_on = !!(!r); ({ if (0) ({ do {} while (0); _printk("Invalid MSR %x, please adapt vmx_possible_passthrough_msrs[]", msr); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });

 return r;
}

struct vmx_uret_msr *vmx_find_uret_msr(struct vcpu_vmx *vmx, u32 msr)
{
 int i;

 i = kvm_find_user_return_msr(msr);
 if (i >= 0)
  return &vmx->guest_uret_msrs[i];
 return ((void *)0);
}

static int vmx_set_guest_uret_msr(struct vcpu_vmx *vmx,
      struct vmx_uret_msr *msr, u64 data)
{
 unsigned int slot = msr - vmx->guest_uret_msrs;
 int ret = 0;

 u64 old_msr_data = msr->data;
 msr->data = data;
 if (msr->load_into_hardware) {
  do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
  ret = kvm_set_user_return_msr(slot, msr->data, msr->mask);
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
  if (ret)
   msr->data = old_msr_data;
 }
 return ret;
}
# 629 "arch/x86/kvm/vmx/vmx.c"
static void __loaded_vmcs_clear(void *arg)
{
 struct loaded_vmcs *loaded_vmcs = arg;
 int cpu = 0;

 if (loaded_vmcs->cpu != cpu)
  return;
 if ((*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(current_vmcs)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(current_vmcs))) *)(&(current_vmcs)); }); })) == loaded_vmcs->vmcs)
  (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(current_vmcs)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(current_vmcs))) *)(&(current_vmcs)); }); })) = ((void *)0);

 vmcs_clear(loaded_vmcs->vmcs);
 if (loaded_vmcs->shadow_vmcs && loaded_vmcs->launched)
  vmcs_clear(loaded_vmcs->shadow_vmcs);

 list_del(&loaded_vmcs->loaded_vmcss_on_cpu_link);
# 652 "arch/x86/kvm/vmx/vmx.c"
 __asm__ __volatile__("": : :"memory");

 loaded_vmcs->cpu = -1;
 loaded_vmcs->launched = 0;
}

void loaded_vmcs_clear(struct loaded_vmcs *loaded_vmcs)
{
 int cpu = loaded_vmcs->cpu;

 if (cpu != -1)
  smp_call_function_single(cpu,
    __loaded_vmcs_clear, loaded_vmcs, 1);
}

static bool vmx_segment_cache_test_set(struct vcpu_vmx *vmx, unsigned seg,
           unsigned field)
{
 bool ret;
 u32 mask = 1 << (seg * SEG_FIELD_NR + field);

 if (!kvm_register_is_available(&vmx->vcpu, VCPU_EXREG_SEGMENTS)) {
  kvm_register_mark_available(&vmx->vcpu, VCPU_EXREG_SEGMENTS);
  vmx->segment_cache.bitmask = 0;
 }
 ret = vmx->segment_cache.bitmask & mask;
 vmx->segment_cache.bitmask |= mask;
 return ret;
}

static u16 vmx_read_guest_seg_selector(struct vcpu_vmx *vmx, unsigned seg)
{
 u16 *p = &vmx->segment_cache.seg[seg].selector;

 if (!vmx_segment_cache_test_set(vmx, seg, SEG_FIELD_SEL))
  *p = vmcs_read16(kvm_vmx_segment_fields[seg].selector);
 return *p;
}

static ulong vmx_read_guest_seg_base(struct vcpu_vmx *vmx, unsigned seg)
{
 ulong *p = &vmx->segment_cache.seg[seg].base;

 if (!vmx_segment_cache_test_set(vmx, seg, SEG_FIELD_BASE))
  *p = vmcs_readl(kvm_vmx_segment_fields[seg].base);
 return *p;
}

static u32 vmx_read_guest_seg_limit(struct vcpu_vmx *vmx, unsigned seg)
{
 u32 *p = &vmx->segment_cache.seg[seg].limit;

 if (!vmx_segment_cache_test_set(vmx, seg, SEG_FIELD_LIMIT))
  *p = vmcs_read32(kvm_vmx_segment_fields[seg].limit);
 return *p;
}

static u32 vmx_read_guest_seg_ar(struct vcpu_vmx *vmx, unsigned seg)
{
 u32 *p = &vmx->segment_cache.seg[seg].ar;

 if (!vmx_segment_cache_test_set(vmx, seg, SEG_FIELD_AR))
  *p = vmcs_read32(kvm_vmx_segment_fields[seg].ar_bytes);
 return *p;
}

void vmx_update_exception_bitmap(struct kvm_vcpu *vcpu)
{
 u32 eb;

 eb = (1u << 14) | (1u << 6) | (1u << 18) |
      (1u << 1) | (1u << 17);






 if (enable_vmware_backdoor)
  eb |= (1u << 13);
 if ((vcpu->guest_debug &
      (0x00000001 | 0x00010000)) ==
     (0x00000001 | 0x00010000))
  eb |= 1u << 3;
 if (to_vmx(vcpu)->rmode.vm86_active)
  eb = ~0;
 if (!vmx_need_pf_intercept(vcpu))
  eb &= ~(1u << 14);






 if (is_guest_mode(vcpu))
  eb |= get_vmcs12(vcpu)->exception_bitmap;
        else {
  int mask = 0, match = 0;

  if (enable_ept && (eb & (1u << 14))) {







   mask = (1U << 0) | (1U << 3);
   match = (1U << 0);
  }
  vmcs_write32(PAGE_FAULT_ERROR_CODE_MASK, mask);
  vmcs_write32(PAGE_FAULT_ERROR_CODE_MATCH, match);
 }

 vmcs_write32(EXCEPTION_BITMAP, eb);
}




static bool msr_write_intercepted(struct vcpu_vmx *vmx, u32 msr)
{
 if (!(exec_controls_get(vmx) & ((((1UL))) << (( 1*32+ 28) & 0x1f))))
  return true;

 return vmx_test_msr_bitmap_write(vmx->loaded_vmcs->msr_bitmap,
      0x00000048);
}

static void clear_atomic_switch_msr_special(struct vcpu_vmx *vmx,
  unsigned long entry, unsigned long exit)
{
 vm_entry_controls_clearbit(vmx, entry);
 vm_exit_controls_clearbit(vmx, exit);
}

int vmx_find_loadstore_msr_slot(struct vmx_msrs *m, u32 msr)
{
 unsigned int i;

 for (i = 0; i < m->nr; ++i) {
  if (m->val[i].index == msr)
   return i;
 }
 return -2;
}

static void clear_atomic_switch_msr(struct vcpu_vmx *vmx, unsigned msr)
{
 int i;
 struct msr_autoload *m = &vmx->msr_autoload;

 switch (msr) {
 case 0xc0000080:
  if (cpu_has_load_ia32_efer()) {
   clear_atomic_switch_msr_special(vmx,
     0x00008000,
     0x00200000);
   return;
  }
  break;
 case 0x0000038f:
  if (cpu_has_load_perf_global_ctrl()) {
   clear_atomic_switch_msr_special(vmx,
     0x00002000,
     0x00001000);
   return;
  }
  break;
 }
 i = vmx_find_loadstore_msr_slot(&m->guest, msr);
 if (i < 0)
  goto skip_guest;
 --m->guest.nr;
 m->guest.val[i] = m->guest.val[m->guest.nr];
 vmcs_write32(VM_ENTRY_MSR_LOAD_COUNT, m->guest.nr);

skip_guest:
 i = vmx_find_loadstore_msr_slot(&m->host, msr);
 if (i < 0)
  return;

 --m->host.nr;
 m->host.val[i] = m->host.val[m->host.nr];
 vmcs_write32(VM_EXIT_MSR_LOAD_COUNT, m->host.nr);
}

static void add_atomic_switch_msr_special(struct vcpu_vmx *vmx,
  unsigned long entry, unsigned long exit,
  unsigned long guest_val_vmcs, unsigned long host_val_vmcs,
  u64 guest_val, u64 host_val)
{
 vmcs_write64(guest_val_vmcs, guest_val);
 if (host_val_vmcs != HOST_IA32_EFER)
  vmcs_write64(host_val_vmcs, host_val);
 vm_entry_controls_setbit(vmx, entry);
 vm_exit_controls_setbit(vmx, exit);
}

static void add_atomic_switch_msr(struct vcpu_vmx *vmx, unsigned msr,
      u64 guest_val, u64 host_val, bool entry_only)
{
 int i, j = 0;
 struct msr_autoload *m = &vmx->msr_autoload;

 switch (msr) {
 case 0xc0000080:
  if (cpu_has_load_ia32_efer()) {
   add_atomic_switch_msr_special(vmx,
     0x00008000,
     0x00200000,
     GUEST_IA32_EFER,
     HOST_IA32_EFER,
     guest_val, host_val);
   return;
  }
  break;
 case 0x0000038f:
  if (cpu_has_load_perf_global_ctrl()) {
   add_atomic_switch_msr_special(vmx,
     0x00002000,
     0x00001000,
     GUEST_IA32_PERF_GLOBAL_CTRL,
     HOST_IA32_PERF_GLOBAL_CTRL,
     guest_val, host_val);
   return;
  }
  break;
 case 0x000003f1:





  wrmsrl(0x000003f1, 0);
 }

 i = vmx_find_loadstore_msr_slot(&m->guest, msr);
 if (!entry_only)
  j = vmx_find_loadstore_msr_slot(&m->host, msr);

 if ((i < 0 && m->guest.nr == 8) ||
     (j < 0 && m->host.nr == 8)) {
  ({ if (0) ({ do {} while (0); _printk("\001" "4" "Not enough msr switch entries. " "Can't add msr %x\n", msr); }); 0; });

  return;
 }
 if (i < 0) {
  i = m->guest.nr++;
  vmcs_write32(VM_ENTRY_MSR_LOAD_COUNT, m->guest.nr);
 }
 m->guest.val[i].index = msr;
 m->guest.val[i].value = guest_val;

 if (entry_only)
  return;

 if (j < 0) {
  j = m->host.nr++;
  vmcs_write32(VM_EXIT_MSR_LOAD_COUNT, m->host.nr);
 }
 m->host.val[j].index = msr;
 m->host.val[j].value = host_val;
}

static bool update_transition_efer(struct vcpu_vmx *vmx)
{
 u64 guest_efer = vmx->vcpu.arch.efer;
 u64 ignore_bits = 0;
 int i;


 if (!enable_ept)
  guest_efer |= (1<<11);




 ignore_bits |= (1<<0);

 ignore_bits |= (1<<10) | (1<<8);

 if (guest_efer & (1<<10))
  ignore_bits &= ~(u64)(1<<0);







 if (cpu_has_load_ia32_efer() ||
     (enable_ept && ((vmx->vcpu.arch.efer ^ host_efer) & (1<<11)))) {
  if (!(guest_efer & (1<<10)))
   guest_efer &= ~(1<<8);
  if (guest_efer != host_efer)
   add_atomic_switch_msr(vmx, 0xc0000080,
           guest_efer, host_efer, false);
  else
   clear_atomic_switch_msr(vmx, 0xc0000080);
  return false;
 }

 i = kvm_find_user_return_msr(0xc0000080);
 if (i < 0)
  return false;

 clear_atomic_switch_msr(vmx, 0xc0000080);

 guest_efer &= ~ignore_bits;
 guest_efer |= host_efer & ignore_bits;

 vmx->guest_uret_msrs[i].data = guest_efer;
 vmx->guest_uret_msrs[i].mask = ~ignore_bits;

 return true;
}
# 999 "arch/x86/kvm/vmx/vmx.c"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pt_can_write_msr(struct vcpu_vmx *vmx)
{
 return vmx_pt_mode_is_host_guest() &&
        !(vmx->pt_desc.guest.ctl & ((((1UL))) << (0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pt_output_base_valid(struct kvm_vcpu *vcpu, u64 base)
{

 return kvm_vcpu_is_legal_aligned_gpa(vcpu, base, 128);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pt_load_msr(struct pt_ctx *ctx, u32 addr_range)
{
 u32 i;

 wrmsrl(0x00000571, ctx->status);
 wrmsrl(0x00000560, ctx->output_base);
 wrmsrl(0x00000561, ctx->output_mask);
 wrmsrl(0x00000572, ctx->cr3_match);
 for (i = 0; i < addr_range; i++) {
  wrmsrl(0x00000580 + i * 2, ctx->addr_a[i]);
  wrmsrl(0x00000581 + i * 2, ctx->addr_b[i]);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pt_save_msr(struct pt_ctx *ctx, u32 addr_range)
{
 u32 i;

 ((ctx->status) = native_read_msr((0x00000571)));
 ((ctx->output_base) = native_read_msr((0x00000560)));
 ((ctx->output_mask) = native_read_msr((0x00000561)));
 ((ctx->cr3_match) = native_read_msr((0x00000572)));
 for (i = 0; i < addr_range; i++) {
  ((ctx->addr_a[i]) = native_read_msr((0x00000580 + i * 2)));
  ((ctx->addr_b[i]) = native_read_msr((0x00000581 + i * 2)));
 }
}

static void pt_guest_enter(struct vcpu_vmx *vmx)
{
 if (vmx_pt_mode_is_system())
  return;





 ((vmx->pt_desc.host.ctl) = native_read_msr((0x00000570)));
 if (vmx->pt_desc.guest.ctl & ((((1UL))) << (0))) {
  wrmsrl(0x00000570, 0);
  pt_save_msr(&vmx->pt_desc.host, vmx->pt_desc.num_address_ranges);
  pt_load_msr(&vmx->pt_desc.guest, vmx->pt_desc.num_address_ranges);
 }
}

static void pt_guest_exit(struct vcpu_vmx *vmx)
{
 if (vmx_pt_mode_is_system())
  return;

 if (vmx->pt_desc.guest.ctl & ((((1UL))) << (0))) {
  pt_save_msr(&vmx->pt_desc.guest, vmx->pt_desc.num_address_ranges);
  pt_load_msr(&vmx->pt_desc.host, vmx->pt_desc.num_address_ranges);
 }





 if (vmx->pt_desc.host.ctl)
  wrmsrl(0x00000570, vmx->pt_desc.host.ctl);
}

void vmx_set_host_fs_gs(struct vmcs_host_state *host, u16 fs_sel, u16 gs_sel,
   unsigned long fs_base, unsigned long gs_base)
{
 if (__builtin_expect(!!(fs_sel != host->fs_sel), 0)) {
  if (!(fs_sel & 7))
   vmcs_write16(HOST_FS_SELECTOR, fs_sel);
  else
   vmcs_write16(HOST_FS_SELECTOR, 0);
  host->fs_sel = fs_sel;
 }
 if (__builtin_expect(!!(gs_sel != host->gs_sel), 0)) {
  if (!(gs_sel & 7))
   vmcs_write16(HOST_GS_SELECTOR, gs_sel);
  else
   vmcs_write16(HOST_GS_SELECTOR, 0);
  host->gs_sel = gs_sel;
 }
 if (__builtin_expect(!!(fs_base != host->fs_base), 0)) {
  vmcs_writel(HOST_FS_BASE, fs_base);
  host->fs_base = fs_base;
 }
 if (__builtin_expect(!!(gs_base != host->gs_base), 0)) {
  vmcs_writel(HOST_GS_BASE, gs_base);
  host->gs_base = gs_base;
 }
}

void vmx_prepare_switch_to_guest(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct vmcs_host_state *host_state;

 int cpu = 0;

 unsigned long fs_base, gs_base;
 u16 fs_sel, gs_sel;
 int i;

 vmx->req_immediate_exit = false;






 if (!vmx->guest_uret_msrs_loaded) {
  vmx->guest_uret_msrs_loaded = true;
  for (i = 0; i < kvm_nr_uret_msrs; ++i) {
   if (!vmx->guest_uret_msrs[i].load_into_hardware)
    continue;

   kvm_set_user_return_msr(i,
      vmx->guest_uret_msrs[i].data,
      vmx->guest_uret_msrs[i].mask);
  }
 }

     if (vmx->nested.need_vmcs12_to_shadow_sync)
  nested_sync_vmcs12_to_shadow(vcpu);

 if (vmx->guest_state_loaded)
  return;

 host_state = &vmx->loaded_vmcs->host_state;





 host_state->ldt_sel = kvm_read_ldt();


 asm("mov %%" "ds" ",%0":"=r" (host_state->ds_sel) : : "memory");
 asm("mov %%" "es" ",%0":"=r" (host_state->es_sel) : : "memory");

 gs_base = cpu_kernelmode_gs_base(cpu);
 if (__builtin_expect(!!(is_64bit_mm(get_current()->mm)), 1)) {
  current_save_fsgs();
  fs_sel = get_current()->thread.fsindex;
  gs_sel = get_current()->thread.gsindex;
  fs_base = get_current()->thread.fsbase;
  vmx->msr_host_kernel_gs_base = get_current()->thread.gsbase;
 } else {
  asm("mov %%" "fs" ",%0":"=r" (fs_sel) : : "memory");
  asm("mov %%" "gs" ",%0":"=r" (gs_sel) : : "memory");
  fs_base = read_msr(0xc0000100);
  vmx->msr_host_kernel_gs_base = read_msr(0xc0000102);
 }

 wrmsrl(0xc0000102, vmx->msr_guest_kernel_gs_base);







 vmx_set_host_fs_gs(host_state, fs_sel, gs_sel, fs_base, gs_base);
 vmx->guest_state_loaded = true;
}

static void vmx_prepare_switch_to_host(struct vcpu_vmx *vmx)
{
 struct vmcs_host_state *host_state;

 if (!vmx->guest_state_loaded)
  return;

 host_state = &vmx->loaded_vmcs->host_state;

 ++vmx->vcpu.stat.host_state_reload;


 ((vmx->msr_guest_kernel_gs_base) = native_read_msr((0xc0000102)));

 if (host_state->ldt_sel || (host_state->gs_sel & 7)) {
  kvm_load_ldt(host_state->ldt_sel);

  load_gs_index(host_state->gs_sel);



 }
 if (host_state->fs_sel & 7)
  __loadsegment_fs (host_state->fs_sel);

 if (__builtin_expect(!!(host_state->ds_sel | host_state->es_sel), 0)) {
  do { unsigned short __val = ((host_state->ds_sel)); asm volatile("						\n" "1:	movl %k0,%%" "ds" "		\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "1b" ") - .\n" "extable_type_reg reg=" "%k0" ", type=" "(17 | ((0) << 16))" " \n" " .popsection\n" : "+r" (__val) : : "memory"); } while (0);
  do { unsigned short __val = ((host_state->es_sel)); asm volatile("						\n" "1:	movl %k0,%%" "es" "		\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "1b" ") - .\n" "extable_type_reg reg=" "%k0" ", type=" "(17 | ((0) << 16))" " \n" " .popsection\n" : "+r" (__val) : : "memory"); } while (0);
 }

 invalidate_tss_limit();

 wrmsrl(0xc0000102, vmx->msr_host_kernel_gs_base);

 load_fixmap_gdt(0);
 vmx->guest_state_loaded = false;
 vmx->guest_uret_msrs_loaded = false;
}


static u64 vmx_read_guest_kernel_gs_base(struct vcpu_vmx *vmx)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (vmx->guest_state_loaded)
  ((vmx->msr_guest_kernel_gs_base) = native_read_msr((0xc0000102)));
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 return vmx->msr_guest_kernel_gs_base;
}

static void vmx_write_guest_kernel_gs_base(struct vcpu_vmx *vmx, u64 data)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (vmx->guest_state_loaded)
  wrmsrl(0xc0000102, data);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) do { ; asm volatile ("call " "__SCT__preempt_schedule" : "+r" (current_stack_pointer)); } while (0); } while (0);
 vmx->msr_guest_kernel_gs_base = data;
}


void vmx_vcpu_load_vmcs(struct kvm_vcpu *vcpu, int cpu,
   struct loaded_vmcs *buddy)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 bool already_loaded = vmx->loaded_vmcs->cpu == cpu;
 struct vmcs *prev;

 if (!already_loaded) {
  loaded_vmcs_clear(vmx->loaded_vmcs);
  do { arch_local_irq_disable(); } while (0);







  __asm__ __volatile__("": : :"memory");

  list_add(&vmx->loaded_vmcs->loaded_vmcss_on_cpu_link,
    &(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(loaded_vmcss_on_cpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(loaded_vmcss_on_cpu))) *)(&(loaded_vmcss_on_cpu)); }); })));
  do { arch_local_irq_enable(); } while (0);
 }

 prev = (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(current_vmcs)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(current_vmcs))) *)(&(current_vmcs)); }); }));
 if (prev != vmx->loaded_vmcs->vmcs) {
  (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(current_vmcs)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(current_vmcs))) *)(&(current_vmcs)); }); })) = vmx->loaded_vmcs->vmcs;
  vmcs_load(vmx->loaded_vmcs->vmcs);






  if (!buddy || ({ int __ret_warn_on = !!(buddy->vmcs != prev); __builtin_expect(!!(__ret_warn_on), 0); }))
   indirect_branch_prediction_barrier();
 }

 if (!already_loaded) {
  void *gdt = get_current_gdt_ro();
  unsigned long sysenter_esp;





  kvm_make_request((0 | ((((1UL))) << (9)) | ((((1UL))) << (8))), vcpu);





  vmcs_writel(HOST_TR_BASE,
       (unsigned long)&get_cpu_entry_area(cpu)->tss.x86_tss);
  vmcs_writel(HOST_GDTR_BASE, (unsigned long)gdt);

  ((sysenter_esp) = native_read_msr((0x00000175)));
  vmcs_writel(HOST_IA32_SYSENTER_ESP, sysenter_esp);

  vmx->loaded_vmcs->cpu = cpu;
 }
}





static void vmx_vcpu_load(struct kvm_vcpu *vcpu, int cpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 vmx_vcpu_load_vmcs(vcpu, cpu, ((void *)0));

 vmx_vcpu_pi_load(vcpu, cpu);

 vmx->host_debugctlmsr = get_debugctlmsr();
}

static void vmx_vcpu_put(struct kvm_vcpu *vcpu)
{
 vmx_vcpu_pi_put(vcpu);

 vmx_prepare_switch_to_host(to_vmx(vcpu));
}

bool vmx_emulation_required(struct kvm_vcpu *vcpu)
{
 return emulate_invalid_guest_state && !vmx_guest_state_valid(vcpu);
}

unsigned long vmx_get_rflags(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long rflags, save_rflags;

 if (!kvm_register_is_available(vcpu, VCPU_EXREG_RFLAGS)) {
  kvm_register_mark_available(vcpu, VCPU_EXREG_RFLAGS);
  rflags = vmcs_readl(GUEST_RFLAGS);
  if (vmx->rmode.vm86_active) {
   rflags &= (~(((3UL) << 12) | (((1UL)) << (17))));
   save_rflags = vmx->rmode.save_rflags;
   rflags |= save_rflags & ~(~(((3UL) << 12) | (((1UL)) << (17))));
  }
  vmx->rflags = rflags;
 }
 return vmx->rflags;
}

void vmx_set_rflags(struct kvm_vcpu *vcpu, unsigned long rflags)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long old_rflags;

 if (is_unrestricted_guest(vcpu)) {
  kvm_register_mark_available(vcpu, VCPU_EXREG_RFLAGS);
  vmx->rflags = rflags;
  vmcs_writel(GUEST_RFLAGS, rflags);
  return;
 }

 old_rflags = vmx_get_rflags(vcpu);
 vmx->rflags = rflags;
 if (vmx->rmode.vm86_active) {
  vmx->rmode.save_rflags = rflags;
  rflags |= ((3UL) << 12) | (((1UL)) << (17));
 }
 vmcs_writel(GUEST_RFLAGS, rflags);

 if ((old_rflags ^ vmx->rflags) & (((1UL)) << (17)))
  vmx->emulation_required = vmx_emulation_required(vcpu);
}

u32 vmx_get_interrupt_shadow(struct kvm_vcpu *vcpu)
{
 u32 interruptibility = vmcs_read32(GUEST_INTERRUPTIBILITY_INFO);
 int ret = 0;

 if (interruptibility & 0x00000001)
  ret |= 0x02;
 if (interruptibility & 0x00000002)
  ret |= 0x01;

 return ret;
}

void vmx_set_interrupt_shadow(struct kvm_vcpu *vcpu, int mask)
{
 u32 interruptibility_old = vmcs_read32(GUEST_INTERRUPTIBILITY_INFO);
 u32 interruptibility = interruptibility_old;

 interruptibility &= ~(0x00000001 | 0x00000002);

 if (mask & 0x01)
  interruptibility |= 0x00000002;
 else if (mask & 0x02)
  interruptibility |= 0x00000001;

 if ((interruptibility != interruptibility_old))
  vmcs_write32(GUEST_INTERRUPTIBILITY_INFO, interruptibility);
}

static int vmx_rtit_ctl_check(struct kvm_vcpu *vcpu, u64 data)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long value;





 if (data & vmx->pt_desc.ctl_bitmask)
  return 1;





 if ((vmx->pt_desc.guest.ctl & ((((1UL))) << (0))) &&
  ((vmx->pt_desc.guest.ctl ^ data) & ~((((1UL))) << (0))))
  return 1;






 if ((data & ((((1UL))) << (0))) && !(data & ((((1UL))) << (8))) &&
  !(data & ((((1UL))) << (6))) &&
  !intel_pt_validate_cap(vmx->pt_desc.caps,
     PT_CAP_single_range_output))
  return 1;





 value = intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_mtc_periods);
 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_mtc) &&
   !test_bit((data & (0x0full << 14)) >>
   14, &value))
  return 1;
 value = intel_pt_validate_cap(vmx->pt_desc.caps,
      PT_CAP_cycle_thresholds);
 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_psb_cyc) &&
   !test_bit((data & (0x0full << 19)) >>
   19, &value))
  return 1;
 value = intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_psb_periods);
 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_psb_cyc) &&
   !test_bit((data & (0x0full << 24)) >>
   24, &value))
  return 1;





 value = (data & (0x0full << 32)) >> 32;
 if ((value && (vmx->pt_desc.num_address_ranges < 1)) || (value > 2))
  return 1;
 value = (data & (0x0full << 36)) >> 36;
 if ((value && (vmx->pt_desc.num_address_ranges < 2)) || (value > 2))
  return 1;
 value = (data & (0x0full << 40)) >> 40;
 if ((value && (vmx->pt_desc.num_address_ranges < 3)) || (value > 2))
  return 1;
 value = (data & (0x0full << 44)) >> 44;
 if ((value && (vmx->pt_desc.num_address_ranges < 4)) || (value > 2))
  return 1;

 return 0;
}

static bool vmx_can_emulate_instruction(struct kvm_vcpu *vcpu, void *insn, int insn_len)
{







 if (to_vmx(vcpu)->exit_reason.enclave_mode) {
  kvm_queue_exception(vcpu, 6);
  return false;
 }
 return true;
}

static int skip_emulated_instruction(struct kvm_vcpu *vcpu)
{
 union vmx_exit_reason exit_reason = to_vmx(vcpu)->exit_reason;
 unsigned long rip, orig_rip;
 u32 instr_len;
# 1497 "arch/x86/kvm/vmx/vmx.c"
 if (!( __builtin_constant_p((__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(19) && (1UL<<((( 4*32+31))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 4*32+31), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(19) && (1UL<<((( 4*32+31))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 4*32+31), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(( 4*32+31)) ) ||
     exit_reason.basic != 49) {
  instr_len = vmcs_read32(VM_EXIT_INSTRUCTION_LEN);
# 1517 "arch/x86/kvm/vmx/vmx.c"
  if (!instr_len)
   goto rip_updated;

  ({ int __ret_warn_on = !!(exit_reason.enclave_mode); ({ if (0) ({ do {} while (0); _printk("KVM: skipping instruction after SGX enclave VM-Exit"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });


  orig_rip = kvm_rip_read(vcpu);
  rip = orig_rip + instr_len;






  if (__builtin_expect(!!(((rip ^ orig_rip) >> 31) == 3), 0) && !is_64_bit_mode(vcpu))
   rip = (u32)rip;

  kvm_rip_write(vcpu, rip);
 } else {
  if (!kvm_emulate_instruction(vcpu, (1 << 2)))
   return 0;
 }

rip_updated:

 vmx_set_interrupt_shadow(vcpu, 0);

 return 1;
}





static void vmx_update_emulated_instruction(struct kvm_vcpu *vcpu)
{
 struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (!is_guest_mode(vcpu))
  return;
# 1566 "arch/x86/kvm/vmx/vmx.c"
 if (nested_cpu_has_mtf(vmcs12) &&
     (!vcpu->arch.exception.pending ||
      vcpu->arch.exception.nr == 1))
  vmx->nested.mtf_pending = true;
 else
  vmx->nested.mtf_pending = false;
}

static int vmx_skip_emulated_instruction(struct kvm_vcpu *vcpu)
{
 vmx_update_emulated_instruction(vcpu);
 return skip_emulated_instruction(vcpu);
}

static void vmx_clear_hlt(struct kvm_vcpu *vcpu)
{






 if (kvm_hlt_in_guest(vcpu->kvm) &&
   vmcs_read32(GUEST_ACTIVITY_STATE) == 1)
  vmcs_write32(GUEST_ACTIVITY_STATE, 0);
}

static void vmx_queue_exception(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned nr = vcpu->arch.exception.nr;
 bool has_error_code = vcpu->arch.exception.has_error_code;
 u32 error_code = vcpu->arch.exception.error_code;
 u32 intr_info = nr | 0x80000000;

 kvm_deliver_exception_payload(vcpu);

 if (has_error_code) {
  vmcs_write32(VM_ENTRY_EXCEPTION_ERROR_CODE, error_code);
  intr_info |= 0x800;
 }

 if (vmx->rmode.vm86_active) {
  int inc_eip = 0;
  if (kvm_exception_is_soft(nr))
   inc_eip = vcpu->arch.event_exit_inst_len;
  kvm_inject_realmode_interrupt(vcpu, nr, inc_eip);
  return;
 }

 ({ int __ret_warn_on = !!(vmx->emulation_required); __builtin_expect(!!(__ret_warn_on), 0); });

 if (kvm_exception_is_soft(nr)) {
  vmcs_write32(VM_ENTRY_INSTRUCTION_LEN,
        vmx->vcpu.arch.event_exit_inst_len);
  intr_info |= (6 << 8);
 } else
  intr_info |= (3 << 8);

 vmcs_write32(VM_ENTRY_INTR_INFO_FIELD, intr_info);

 vmx_clear_hlt(vcpu);
}

static void vmx_setup_uret_msr(struct vcpu_vmx *vmx, unsigned int msr,
          bool load_into_hardware)
{
 struct vmx_uret_msr *uret_msr;

 uret_msr = vmx_find_uret_msr(vmx, msr);
 if (!uret_msr)
  return;

 uret_msr->load_into_hardware = load_into_hardware;
}







static void vmx_setup_uret_msrs(struct vcpu_vmx *vmx)
{

 bool load_syscall_msrs;





 load_syscall_msrs = is_long_mode(&vmx->vcpu) &&
       (vmx->vcpu.arch.efer & (1<<0));

 vmx_setup_uret_msr(vmx, 0xc0000081, load_syscall_msrs);
 vmx_setup_uret_msr(vmx, 0xc0000082, load_syscall_msrs);
 vmx_setup_uret_msr(vmx, 0xc0000084, load_syscall_msrs);

 vmx_setup_uret_msr(vmx, 0xc0000080, update_transition_efer(vmx));

 vmx_setup_uret_msr(vmx, 0xc0000103,
      guest_cpuid_has(&vmx->vcpu, ( 1*32+27)) ||
      guest_cpuid_has(&vmx->vcpu, (16*32+22)));







 vmx_setup_uret_msr(vmx, 0x00000122, (__builtin_constant_p(( 9*32+11)) && ( (((( 9*32+11))>>5)==(0) && (1UL<<((( 9*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+11))>>5)==(1) && (1UL<<((( 9*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+11))>>5)==(2) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(3) && (1UL<<((( 9*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+11))>>5)==(4) && (1UL<<((( 9*32+11))&31) & (0) )) || (((( 9*32+11))>>5)==(5) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(6) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(7) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(8) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(9) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(10) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(11) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(12) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(13) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(14) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(15) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(16) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(17) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(18) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(19) && (1UL<<((( 9*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability))));





 vmx->guest_uret_msrs_loaded = false;
}

u64 vmx_get_l2_tsc_offset(struct kvm_vcpu *vcpu)
{
 struct vmcs12 *vmcs12 = get_vmcs12(vcpu);

 if (nested_cpu_has(vmcs12, ((((1UL))) << (( 1*32+ 3) & 0x1f))))
  return vmcs12->tsc_offset;

 return 0;
}

u64 vmx_get_l2_tsc_multiplier(struct kvm_vcpu *vcpu)
{
 struct vmcs12 *vmcs12 = get_vmcs12(vcpu);

 if (nested_cpu_has(vmcs12, ((((1UL))) << (( 1*32+ 3) & 0x1f))) &&
     nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 25) & 0x1f))))
  return vmcs12->tsc_multiplier;

 return kvm_default_tsc_scaling_ratio;
}

static void vmx_write_tsc_offset(struct kvm_vcpu *vcpu, u64 offset)
{
 vmcs_write64(TSC_OFFSET, offset);
}

static void vmx_write_tsc_multiplier(struct kvm_vcpu *vcpu, u64 multiplier)
{
 vmcs_write64(TSC_MULTIPLIER, multiplier);
}







bool nested_vmx_allowed(struct kvm_vcpu *vcpu)
{
 return nested && guest_cpuid_has(vcpu, ( 4*32+ 5));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vmx_feature_control_msr_valid(struct kvm_vcpu *vcpu,
       uint64_t val)
{
 uint64_t valid_bits = to_vmx(vcpu)->msr_ia32_feature_control_valid_bits;

 return !(val & ~valid_bits);
}

static int vmx_get_msr_feature(struct kvm_msr_entry *msr)
{
 switch (msr->index) {
 case 0x00000480 ... 0x00000491:
  if (!nested)
   return 1;
  return vmx_get_vmx_msr(&vmcs_config.nested, msr->index, &msr->data);
 case 0x00000345:
  msr->data = vmx_get_perf_capabilities();
  return 0;
 default:
  return 2;
 }
}






static int vmx_get_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct vmx_uret_msr *msr;
 u32 index;

 switch (msr_info->index) {

 case 0xc0000100:
  msr_info->data = vmcs_readl(GUEST_FS_BASE);
  break;
 case 0xc0000101:
  msr_info->data = vmcs_readl(GUEST_GS_BASE);
  break;
 case 0xc0000102:
  msr_info->data = vmx_read_guest_kernel_gs_base(vmx);
  break;

 case 0xc0000080:
  return kvm_get_msr_common(vcpu, msr_info);
 case 0x00000122:
  if (!msr_info->host_initiated &&
      !(vcpu->arch.arch_capabilities & ((((1UL))) << (7))))
   return 1;
  goto find_uret_msr;
 case 0xe1:
  if (!msr_info->host_initiated && !vmx_has_waitpkg(vmx))
   return 1;

  msr_info->data = vmx->msr_ia32_umwait_control;
  break;
 case 0x00000048:
  if (!msr_info->host_initiated &&
      !guest_has_spec_ctrl_msr(vcpu))
   return 1;

  msr_info->data = to_vmx(vcpu)->spec_ctrl;
  break;
 case 0x00000174:
  msr_info->data = vmcs_read32(GUEST_SYSENTER_CS);
  break;
 case 0x00000176:
  msr_info->data = vmcs_readl(GUEST_SYSENTER_EIP);
  break;
 case 0x00000175:
  msr_info->data = vmcs_readl(GUEST_SYSENTER_ESP);
  break;
 case 0x00000d90:
  if (!kvm_mpx_supported() ||
      (!msr_info->host_initiated &&
       !guest_cpuid_has(vcpu, ( 9*32+14))))
   return 1;
  msr_info->data = vmcs_read64(GUEST_BNDCFGS);
  break;
 case 0x000004d0:
  if (!msr_info->host_initiated &&
      !(vmx->msr_ia32_feature_control &
        ((((1UL))) << (20))))
   return 1;
  msr_info->data = vcpu->arch.mcg_ext_ctl;
  break;
 case 0x0000003a:
  msr_info->data = vmx->msr_ia32_feature_control;
  break;
 case 0x0000008C ... 0x0000008F:
  if (!msr_info->host_initiated &&
      !guest_cpuid_has(vcpu, (16*32+30)))
   return 1;
  msr_info->data = to_vmx(vcpu)->msr_ia32_sgxlepubkeyhash
   [msr_info->index - 0x0000008C];
  break;
 case 0x00000480 ... 0x00000491:
  if (!nested_vmx_allowed(vcpu))
   return 1;
  if (vmx_get_vmx_msr(&vmx->nested.msrs, msr_info->index,
        &msr_info->data))
   return 1;







  if (!msr_info->host_initiated &&
      vmx->nested.enlightened_vmcs_enabled)
   nested_evmcs_filter_control_msr(msr_info->index,
       &msr_info->data);
  break;
 case 0x00000570:
  if (!vmx_pt_mode_is_host_guest())
   return 1;
  msr_info->data = vmx->pt_desc.guest.ctl;
  break;
 case 0x00000571:
  if (!vmx_pt_mode_is_host_guest())
   return 1;
  msr_info->data = vmx->pt_desc.guest.status;
  break;
 case 0x00000572:
  if (!vmx_pt_mode_is_host_guest() ||
   !intel_pt_validate_cap(vmx->pt_desc.caps,
      PT_CAP_cr3_filtering))
   return 1;
  msr_info->data = vmx->pt_desc.guest.cr3_match;
  break;
 case 0x00000560:
  if (!vmx_pt_mode_is_host_guest() ||
   (!intel_pt_validate_cap(vmx->pt_desc.caps,
     PT_CAP_topa_output) &&
    !intel_pt_validate_cap(vmx->pt_desc.caps,
     PT_CAP_single_range_output)))
   return 1;
  msr_info->data = vmx->pt_desc.guest.output_base;
  break;
 case 0x00000561:
  if (!vmx_pt_mode_is_host_guest() ||
   (!intel_pt_validate_cap(vmx->pt_desc.caps,
     PT_CAP_topa_output) &&
    !intel_pt_validate_cap(vmx->pt_desc.caps,
     PT_CAP_single_range_output)))
   return 1;
  msr_info->data = vmx->pt_desc.guest.output_mask;
  break;
 case 0x00000580 ... 0x00000587:
  index = msr_info->index - 0x00000580;
  if (!vmx_pt_mode_is_host_guest() ||
      (index >= 2 * vmx->pt_desc.num_address_ranges))
   return 1;
  if (index % 2)
   msr_info->data = vmx->pt_desc.guest.addr_b[index / 2];
  else
   msr_info->data = vmx->pt_desc.guest.addr_a[index / 2];
  break;
 case 0x000001d9:
  msr_info->data = vmcs_read64(GUEST_IA32_DEBUGCTL);
  break;
 default:
 find_uret_msr:
  msr = vmx_find_uret_msr(vmx, msr_info->index);
  if (msr) {
   msr_info->data = msr->data;
   break;
  }
  return kvm_get_msr_common(vcpu, msr_info);
 }

 return 0;
}

static u64 nested_vmx_truncate_sysenter_addr(struct kvm_vcpu *vcpu,
          u64 data)
{

 if (!guest_cpuid_has(vcpu, ( 1*32+29)))
  return (u32)data;

 return (unsigned long)data;
}

static u64 vcpu_supported_debugctl(struct kvm_vcpu *vcpu)
{
 u64 debugctl = vmx_supported_debugctl();

 if (!intel_pmu_lbr_is_enabled(vcpu))
  debugctl &= ~((1UL << 0) | (1UL << 11));

 if (!guest_cpuid_has(vcpu, (16*32+24)))
  debugctl &= ~(1UL << 2);

 return debugctl;
}






static int vmx_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct vmx_uret_msr *msr;
 int ret = 0;
 u32 msr_index = msr_info->index;
 u64 data = msr_info->data;
 u32 index;

 switch (msr_index) {
 case 0xc0000080:
  ret = kvm_set_msr_common(vcpu, msr_info);
  break;

 case 0xc0000100:
  vmx_segment_cache_clear(vmx);
  vmcs_writel(GUEST_FS_BASE, data);
  break;
 case 0xc0000101:
  vmx_segment_cache_clear(vmx);
  vmcs_writel(GUEST_GS_BASE, data);
  break;
 case 0xc0000102:
  vmx_write_guest_kernel_gs_base(vmx, data);
  break;

 case 0x00000174:
  if (is_guest_mode(vcpu))
   get_vmcs12(vcpu)->guest_sysenter_cs = data;
  vmcs_write32(GUEST_SYSENTER_CS, data);
  break;
 case 0x00000176:
  if (is_guest_mode(vcpu)) {
   data = nested_vmx_truncate_sysenter_addr(vcpu, data);
   get_vmcs12(vcpu)->guest_sysenter_eip = data;
  }
  vmcs_writel(GUEST_SYSENTER_EIP, data);
  break;
 case 0x00000175:
  if (is_guest_mode(vcpu)) {
   data = nested_vmx_truncate_sysenter_addr(vcpu, data);
   get_vmcs12(vcpu)->guest_sysenter_esp = data;
  }
  vmcs_writel(GUEST_SYSENTER_ESP, data);
  break;
 case 0x000001d9: {
  u64 invalid = data & ~vcpu_supported_debugctl(vcpu);
  if (invalid & ((1UL << 1)|(1UL << 0))) {
   if (report_ignored_msrs)
    ({ if (0) ({ do {} while (0); _printk("\001" "3" "kvm [%i]: " "vcpu%i, guest rIP: 0x%lx " "%s: BTF|LBR in IA32_DEBUGCTLMSR 0x%llx, nop\n", task_tgid_nr(get_current()), (vcpu)->vcpu_id, kvm_rip_read(vcpu), __func__, data); }); 0; });

   data &= ~((1UL << 1)|(1UL << 0));
   invalid &= ~((1UL << 1)|(1UL << 0));
  }

  if (invalid)
   return 1;

  if (is_guest_mode(vcpu) && get_vmcs12(vcpu)->vm_exit_controls &
      0x00000004)
   get_vmcs12(vcpu)->guest_ia32_debugctl = data;

  vmcs_write64(GUEST_IA32_DEBUGCTL, data);
  if (intel_pmu_lbr_is_enabled(vcpu) && !to_vmx(vcpu)->lbr_desc.event &&
      (data & (1UL << 0)))
   intel_pmu_create_guest_lbr_event(vcpu);
  return 0;
 }
 case 0x00000d90:
  if (!kvm_mpx_supported() ||
      (!msr_info->host_initiated &&
       !guest_cpuid_has(vcpu, ( 9*32+14))))
   return 1;
  if (is_noncanonical_address(data & (~(((1UL) << 12)-1)), vcpu) ||
      (data & 0x00000ffc))
   return 1;
  vmcs_write64(GUEST_BNDCFGS, data);
  break;
 case 0xe1:
  if (!msr_info->host_initiated && !vmx_has_waitpkg(vmx))
   return 1;


  if (data & (((((1ULL))) << (1)) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((32) > (63)) * 0l)) : (int *)8))), (32) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (32)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))))
   return 1;

  vmx->msr_ia32_umwait_control = data;
  break;
 case 0x00000048:
  if (!msr_info->host_initiated &&
      !guest_has_spec_ctrl_msr(vcpu))
   return 1;

  if (kvm_spec_ctrl_test_value(data))
   return 1;

  vmx->spec_ctrl = data;
  if (!data)
   break;
# 2045 "arch/x86/kvm/vmx/vmx.c"
  vmx_disable_intercept_for_msr(vcpu,
           0x00000048,
           3);
  break;
 case 0x00000122:
  if (!msr_info->host_initiated &&
      !(vcpu->arch.arch_capabilities & ((((1UL))) << (7))))
   return 1;
  if (data & ~(((((1UL))) << (0)) | ((((1UL))) << (1))))
   return 1;
  goto find_uret_msr;
 case 0x00000049:
  if (!msr_info->host_initiated &&
      !guest_has_pred_cmd_msr(vcpu))
   return 1;

  if (data & ~((((1UL))) << (0)))
   return 1;
  if (!(__builtin_constant_p(( 7*32+26)) && ( (((( 7*32+26))>>5)==(0) && (1UL<<((( 7*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+26))>>5)==(1) && (1UL<<((( 7*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+26))>>5)==(2) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(3) && (1UL<<((( 7*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+26))>>5)==(4) && (1UL<<((( 7*32+26))&31) & (0) )) || (((( 7*32+26))>>5)==(5) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(6) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(7) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(8) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(9) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(10) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(11) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(12) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(13) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(14) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(15) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(16) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(17) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(18) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(19) && (1UL<<((( 7*32+26))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+26), (unsigned long *)((&boot_cpu_data)->x86_capability))))
   return 1;
  if (!data)
   break;

  wrmsrl(0x00000049, ((((1UL))) << (0)));
# 2081 "arch/x86/kvm/vmx/vmx.c"
  vmx_disable_intercept_for_msr(vcpu, 0x00000049, 2);
  break;
 case 0x00000277:
  if (!kvm_pat_valid(data))
   return 1;

  if (is_guest_mode(vcpu) &&
      get_vmcs12(vcpu)->vm_exit_controls & 0x00040000)
   get_vmcs12(vcpu)->guest_ia32_pat = data;

  if (vmcs_config.vmentry_ctrl & 0x00004000) {
   vmcs_write64(GUEST_IA32_PAT, data);
   vcpu->arch.pat = data;
   break;
  }
  ret = kvm_set_msr_common(vcpu, msr_info);
  break;
 case 0x0000003b:
  ret = kvm_set_msr_common(vcpu, msr_info);
  break;
 case 0x000004d0:
  if ((!msr_info->host_initiated &&
       !(to_vmx(vcpu)->msr_ia32_feature_control &
         ((((1UL))) << (20)))) ||
      (data & ~((((1ULL))) << (0))))
   return 1;
  vcpu->arch.mcg_ext_ctl = data;
  break;
 case 0x0000003a:
  if (!vmx_feature_control_msr_valid(vcpu, data) ||
      (to_vmx(vcpu)->msr_ia32_feature_control &
       ((((1UL))) << (0)) && !msr_info->host_initiated))
   return 1;
  vmx->msr_ia32_feature_control = data;
  if (msr_info->host_initiated && data == 0)
   vmx_leave_nested(vcpu);


  vmx_write_encls_bitmap(vcpu, ((void *)0));
  break;
 case 0x0000008C ... 0x0000008F:
# 2133 "arch/x86/kvm/vmx/vmx.c"
  if (!msr_info->host_initiated &&
      (!guest_cpuid_has(vcpu, (16*32+30)) ||
      ((vmx->msr_ia32_feature_control & ((((1UL))) << (0))) &&
      !(vmx->msr_ia32_feature_control & ((((1UL))) << (17))))))
   return 1;
  vmx->msr_ia32_sgxlepubkeyhash
   [msr_index - 0x0000008C] = data;
  break;
 case 0x00000480 ... 0x00000491:
  if (!msr_info->host_initiated)
   return 1;
  if (!nested_vmx_allowed(vcpu))
   return 1;
  return vmx_set_vmx_msr(vcpu, msr_index, data);
 case 0x00000570:
  if (!vmx_pt_mode_is_host_guest() ||
   vmx_rtit_ctl_check(vcpu, data) ||
   vmx->nested.vmxon)
   return 1;
  vmcs_write64(GUEST_IA32_RTIT_CTL, data);
  vmx->pt_desc.guest.ctl = data;
  pt_update_intercept_for_msr(vcpu);
  break;
 case 0x00000571:
  if (!pt_can_write_msr(vmx))
   return 1;
  if (data & (~(((((1UL))) << (0)) | ((((1UL))) << (1)) | ((((1UL))) << (2)) | ((((1UL))) << (4)) | ((((1UL))) << (5)) | (0x1ffffull << 32))))
   return 1;
  vmx->pt_desc.guest.status = data;
  break;
 case 0x00000572:
  if (!pt_can_write_msr(vmx))
   return 1;
  if (!intel_pt_validate_cap(vmx->pt_desc.caps,
        PT_CAP_cr3_filtering))
   return 1;
  vmx->pt_desc.guest.cr3_match = data;
  break;
 case 0x00000560:
  if (!pt_can_write_msr(vmx))
   return 1;
  if (!intel_pt_validate_cap(vmx->pt_desc.caps,
        PT_CAP_topa_output) &&
      !intel_pt_validate_cap(vmx->pt_desc.caps,
        PT_CAP_single_range_output))
   return 1;
  if (!pt_output_base_valid(vcpu, data))
   return 1;
  vmx->pt_desc.guest.output_base = data;
  break;
 case 0x00000561:
  if (!pt_can_write_msr(vmx))
   return 1;
  if (!intel_pt_validate_cap(vmx->pt_desc.caps,
        PT_CAP_topa_output) &&
      !intel_pt_validate_cap(vmx->pt_desc.caps,
        PT_CAP_single_range_output))
   return 1;
  vmx->pt_desc.guest.output_mask = data;
  break;
 case 0x00000580 ... 0x00000587:
  if (!pt_can_write_msr(vmx))
   return 1;
  index = msr_info->index - 0x00000580;
  if (index >= 2 * vmx->pt_desc.num_address_ranges)
   return 1;
  if (is_noncanonical_address(data, vcpu))
   return 1;
  if (index % 2)
   vmx->pt_desc.guest.addr_b[index / 2] = data;
  else
   vmx->pt_desc.guest.addr_a[index / 2] = data;
  break;
 case 0x00000345:
  if (data && !(&(vcpu)->arch.pmu)->version)
   return 1;
  if (data & 0x3f) {
   if ((data & 0x3f) !=
       (vmx_get_perf_capabilities() & 0x3f))
    return 1;
   if (!intel_pmu_lbr_is_compatible(vcpu))
    return 1;
  }
  ret = kvm_set_msr_common(vcpu, msr_info);
  break;

 default:
 find_uret_msr:
  msr = vmx_find_uret_msr(vmx, msr_index);
  if (msr)
   ret = vmx_set_guest_uret_msr(vmx, msr, data);
  else
   ret = kvm_set_msr_common(vcpu, msr_info);
 }

 return ret;
}

static void vmx_cache_reg(struct kvm_vcpu *vcpu, enum kvm_reg reg)
{
 unsigned long guest_owned_bits;

 kvm_register_mark_available(vcpu, reg);

 switch (reg) {
 case VCPU_REGS_RSP:
  vcpu->arch.regs[VCPU_REGS_RSP] = vmcs_readl(GUEST_RSP);
  break;
 case VCPU_REGS_RIP:
  vcpu->arch.regs[VCPU_REGS_RIP] = vmcs_readl(GUEST_RIP);
  break;
 case VCPU_EXREG_PDPTR:
  if (enable_ept)
   ept_save_pdptrs(vcpu);
  break;
 case VCPU_EXREG_CR0:
  guest_owned_bits = vcpu->arch.cr0_guest_owned_bits;

  vcpu->arch.cr0 &= ~guest_owned_bits;
  vcpu->arch.cr0 |= vmcs_readl(GUEST_CR0) & guest_owned_bits;
  break;
 case VCPU_EXREG_CR3:




  if (!(exec_controls_get(to_vmx(vcpu)) & ((((1UL))) << (( 1*32+ 15) & 0x1f))))
   vcpu->arch.cr3 = vmcs_readl(GUEST_CR3);
  break;
 case VCPU_EXREG_CR4:
  guest_owned_bits = vcpu->arch.cr4_guest_owned_bits;

  vcpu->arch.cr4 &= ~guest_owned_bits;
  vcpu->arch.cr4 |= vmcs_readl(GUEST_CR4) & guest_owned_bits;
  break;
 default:
  ({ int __ret = (1); if (({ int __ret_warn_on = !!(__ret && !(vcpu->kvm)->vm_bugged); __builtin_expect(!!(__ret_warn_on), 0); })) kvm_vm_bugged(vcpu->kvm); __builtin_expect(!!(__ret), 0); });
  break;
 }
}

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) int cpu_has_kvm_support(void)
{
 return cpu_has_vmx();
}

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) int vmx_disabled_by_bios(void)
{
 return !(__builtin_constant_p(( 7*32+31)) && ( (((( 7*32+31))>>5)==(0) && (1UL<<((( 7*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+31))>>5)==(1) && (1UL<<((( 7*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+31))>>5)==(2) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(3) && (1UL<<((( 7*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+31))>>5)==(4) && (1UL<<((( 7*32+31))&31) & (0) )) || (((( 7*32+31))>>5)==(5) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(6) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(7) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(8) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(9) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(10) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(11) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(12) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(13) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(14) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(15) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(16) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(17) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(18) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(19) && (1UL<<((( 7*32+31))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+31), (unsigned long *)((&boot_cpu_data)->x86_capability))) ||
        !(__builtin_constant_p(( 4*32+ 5)) && ( (((( 4*32+ 5))>>5)==(0) && (1UL<<((( 4*32+ 5))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+ 5))>>5)==(1) && (1UL<<((( 4*32+ 5))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+ 5))>>5)==(2) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(3) && (1UL<<((( 4*32+ 5))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+ 5))>>5)==(4) && (1UL<<((( 4*32+ 5))&31) & (0) )) || (((( 4*32+ 5))>>5)==(5) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(6) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(7) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(8) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(9) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(10) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(11) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(12) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(13) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(14) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(15) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(16) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(17) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(18) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(19) && (1UL<<((( 4*32+ 5))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 4*32+ 5), (unsigned long *)((&boot_cpu_data)->x86_capability)));
}

static int kvm_cpu_vmxon(u64 vmxon_pointer)
{
 u64 msr;

 cr4_set_bits((((1UL)) << (13)));

 asm goto("1: vmxon %[vmxon_pointer]\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "%l[fault]" ") - .\n" " .long " "1" " \n" " .popsection\n" : : [vmxon_pointer] "m"(vmxon_pointer) : : fault);



 return 0;

fault:
 ({ int __ret_warn_on = !!(1); ({ if (0) ({ do {} while (0); _printk("VMXON faulted, MSR_IA32_FEAT_CTL (0x3a) = 0x%llx\n", rdmsrl_safe(0x0000003a, &msr) ? 0xdeadbeef : msr); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });

 cr4_clear_bits((((1UL)) << (13)));

 return -14;
}

static int hardware_enable(void)
{
 int cpu = 0;
 u64 phys_addr = __phys_addr_nodebug((unsigned long)((*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(vmxarea)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(vmxarea))) *)(&(vmxarea)); }); }))));
 int r;

 if (cr4_read_shadow() & (((1UL)) << (13)))
  return -16;





 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0) &&
     !hv_get_vp_assist_page(cpu))
  return -14;

 intel_pt_handle_vmx(1);

 r = kvm_cpu_vmxon(phys_addr);
 if (r) {
  intel_pt_handle_vmx(0);
  return r;
 }

 if (enable_ept)
  ept_sync_global();

 return 0;
}

static void vmclear_local_loaded_vmcss(void)
{
 int cpu = 0;
 struct loaded_vmcs *v, *n;

 for (v = ({ void *__mptr = (void *)((&(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(loaded_vmcss_on_cpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(loaded_vmcss_on_cpu))) *)(&(loaded_vmcss_on_cpu)); }); })))->next); _Static_assert(__builtin_types_compatible_p(typeof(*((&(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(loaded_vmcss_on_cpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(loaded_vmcss_on_cpu))) *)(&(loaded_vmcss_on_cpu)); }); })))->next)), typeof(((typeof(*v) *)0)->loaded_vmcss_on_cpu_link)) || __builtin_types_compatible_p(typeof(*((&(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(loaded_vmcss_on_cpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(loaded_vmcss_on_cpu))) *)(&(loaded_vmcss_on_cpu)); }); })))->next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*v) *)(__mptr - __builtin_offsetof(typeof(*v), loaded_vmcss_on_cpu_link))); }), n = ({ void *__mptr = (void *)((v)->loaded_vmcss_on_cpu_link.next); _Static_assert(__builtin_types_compatible_p(typeof(*((v)->loaded_vmcss_on_cpu_link.next)), typeof(((typeof(*(v)) *)0)->loaded_vmcss_on_cpu_link)) || __builtin_types_compatible_p(typeof(*((v)->loaded_vmcss_on_cpu_link.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(v)) *)(__mptr - __builtin_offsetof(typeof(*(v)), loaded_vmcss_on_cpu_link))); }); !(&v->loaded_vmcss_on_cpu_link == (&(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(loaded_vmcss_on_cpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(loaded_vmcss_on_cpu))) *)(&(loaded_vmcss_on_cpu)); }); })))); v = n, n = ({ void *__mptr = (void *)((n)->loaded_vmcss_on_cpu_link.next); _Static_assert(__builtin_types_compatible_p(typeof(*((n)->loaded_vmcss_on_cpu_link.next)), typeof(((typeof(*(n)) *)0)->loaded_vmcss_on_cpu_link)) || __builtin_types_compatible_p(typeof(*((n)->loaded_vmcss_on_cpu_link.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(n)) *)(__mptr - __builtin_offsetof(typeof(*(n)), loaded_vmcss_on_cpu_link))); }))

  __loaded_vmcs_clear(v);
}

static void hardware_disable(void)
{
 vmclear_local_loaded_vmcss();

 if (cpu_vmxoff())
  kvm_spurious_fault();

 intel_pt_handle_vmx(0);
}







static bool cpu_has_sgx(void)
{
 return cpuid_eax(0) >= 0x12 && (cpuid_eax(0x12) & ((((1UL))) << (0)));
}

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) int adjust_vmx_controls(u32 ctl_min, u32 ctl_opt,
          u32 msr, u32 *result)
{
 u32 vmx_msr_low, vmx_msr_high;
 u32 ctl = ctl_min | ctl_opt;

 do { u64 __val = native_read_msr((msr)); (void)((vmx_msr_low) = (u32)__val); (void)((vmx_msr_high) = (u32)(__val >> 32)); } while (0);

 ctl &= vmx_msr_high;
 ctl |= vmx_msr_low;


 if (ctl_min & ~ctl)
  return -5;

 *result = ctl;
 return 0;
}

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) int setup_vmcs_config(struct vmcs_config *vmcs_conf,
        struct vmx_capability *vmx_cap)
{
 u32 vmx_msr_low, vmx_msr_high;
 u32 min, opt, min2, opt2;
 u32 _pin_based_exec_control = 0;
 u32 _cpu_based_exec_control = 0;
 u32 _cpu_based_2nd_exec_control = 0;
 u32 _vmexit_control = 0;
 u32 _vmentry_control = 0;

 memset(vmcs_conf, 0, sizeof(*vmcs_conf));
 min = ((((1UL))) << (( 1*32+ 7) & 0x1f)) |

       ((((1UL))) << (( 1*32+ 19) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 20) & 0x1f)) |

       ((((1UL))) << (( 1*32+ 15) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 16) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 24) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 23) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 3) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 10) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 29) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 9) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 11) & 0x1f));

 opt = ((((1UL))) << (( 1*32+ 21) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 28) & 0x1f)) |
       ((((1UL))) << (( 1*32+ 31) & 0x1f));
 if (adjust_vmx_controls(min, opt, 0x00000482,
    &_cpu_based_exec_control) < 0)
  return -5;

 if ((_cpu_based_exec_control & ((((1UL))) << (( 1*32+ 21) & 0x1f))))
  _cpu_based_exec_control &= ~((((1UL))) << (( 1*32+ 19) & 0x1f)) &
        ~((((1UL))) << (( 1*32+ 20) & 0x1f));

 if (_cpu_based_exec_control & ((((1UL))) << (( 1*32+ 31) & 0x1f))) {
  min2 = 0;
  opt2 = ((((1UL))) << (( 2*32+ 0) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 4) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 6) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 5) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 1) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 7) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 10) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 2) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 3) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 12) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 8) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 9) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 14) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 20) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 16) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 11) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 17) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 25) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 26) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 24) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 19) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 13) & 0x1f)) |
   ((((1UL))) << (( 2*32+ 30) & 0x1f));
  if (cpu_has_sgx())
   opt2 |= ((((1UL))) << (( 2*32+ 15) & 0x1f));
  if (adjust_vmx_controls(min2, opt2,
     0x0000048b,
     &_cpu_based_2nd_exec_control) < 0)
   return -5;
 }






 if (!(_cpu_based_exec_control & ((((1UL))) << (( 1*32+ 21) & 0x1f))))
  _cpu_based_2nd_exec_control &= ~(
    ((((1UL))) << (( 2*32+ 8) & 0x1f)) |
    ((((1UL))) << (( 2*32+ 4) & 0x1f)) |
    ((((1UL))) << (( 2*32+ 9) & 0x1f)));

 ({ int __err; u64 __val = native_read_msr_safe((0x0000048c), &__err); (*&vmx_cap->ept) = (u32)__val; (*&vmx_cap->vpid) = (u32)(__val >> 32); __err; });


 if (_cpu_based_2nd_exec_control & ((((1UL))) << (( 2*32+ 1) & 0x1f))) {


  _cpu_based_exec_control &= ~(((((1UL))) << (( 1*32+ 15) & 0x1f)) |
          ((((1UL))) << (( 1*32+ 16) & 0x1f)) |
          ((((1UL))) << (( 1*32+ 9) & 0x1f)));
 } else if (vmx_cap->ept) {
  vmx_cap->ept = 0;
  ({ if (0) ({ do {} while (0); _printk("\001" "4" "EPT CAP should not exist if not support " "1-setting enable EPT VM-execution control\n"); }); 0; });

 }
 if (!(_cpu_based_2nd_exec_control & ((((1UL))) << (( 2*32+ 5) & 0x1f))) &&
  vmx_cap->vpid) {
  vmx_cap->vpid = 0;
  ({ if (0) ({ do {} while (0); _printk("\001" "4" "VPID CAP should not exist if not support " "1-setting enable VPID VM-execution control\n"); }); 0; });

 }

 min = 0x00000004 | 0x00008000;

 min |= 0x00000200;

 opt = 0x00001000 |
       0x00080000 |
       0x00200000 |
       0x00800000 |
       0x01000000 |
       0x02000000;
 if (adjust_vmx_controls(min, opt, 0x00000483,
    &_vmexit_control) < 0)
  return -5;

 min = ((((1UL))) << (( 0*32+ 0) & 0x1f)) | ((((1UL))) << (( 0*32+ 3) & 0x1f));
 opt = ((((1UL))) << (( 0*32+ 5) & 0x1f)) | ((((1UL))) << (( 0*32+ 7) & 0x1f)) |
   ((((1UL))) << (( 0*32+ 6) & 0x1f));
 if (adjust_vmx_controls(min, opt, 0x00000481,
    &_pin_based_exec_control) < 0)
  return -5;

 if (cpu_has_broken_vmx_preemption_timer())
  _pin_based_exec_control &= ~((((1UL))) << (( 0*32+ 6) & 0x1f));
 if (!(_cpu_based_2nd_exec_control &
  ((((1UL))) << (( 2*32+ 9) & 0x1f))))
  _pin_based_exec_control &= ~((((1UL))) << (( 0*32+ 7) & 0x1f));

 min = 0x00000004;
 opt = 0x00002000 |
       0x00004000 |
       0x00008000 |
       0x00010000 |
       0x00020000 |
       0x00040000;
 if (adjust_vmx_controls(min, opt, 0x00000484,
    &_vmentry_control) < 0)
  return -5;







 if (boot_cpu_data.x86 == 0x6) {
  switch (boot_cpu_data.x86_model) {
  case 26:
  case 30:
  case 37:
  case 44:
  case 46:
   _vmentry_control &= ~0x00002000;
   _vmexit_control &= ~0x00001000;
   ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL " "does not work properly. Using workaround\n"); }); 0; });

   break;
  default:
   break;
  }
 }


 do { u64 __val = native_read_msr((0x00000480)); (void)((vmx_msr_low) = (u32)__val); (void)((vmx_msr_high) = (u32)(__val >> 32)); } while (0);


 if ((vmx_msr_high & 0x1fff) > ((1UL) << 12))
  return -5;



 if (vmx_msr_high & (1u<<16))
  return -5;



 if (((vmx_msr_high >> 18) & 15) != 6)
  return -5;

 vmcs_conf->size = vmx_msr_high & 0x1fff;
 vmcs_conf->order = get_order(vmcs_conf->size);
 vmcs_conf->basic_cap = vmx_msr_high & ~0x1fff;

 vmcs_conf->revision_id = vmx_msr_low;

 vmcs_conf->pin_based_exec_ctrl = _pin_based_exec_control;
 vmcs_conf->cpu_based_exec_ctrl = _cpu_based_exec_control;
 vmcs_conf->cpu_based_2nd_exec_ctrl = _cpu_based_2nd_exec_control;
 vmcs_conf->vmexit_ctrl = _vmexit_control;
 vmcs_conf->vmentry_ctrl = _vmentry_control;






 return 0;
}

struct vmcs *alloc_vmcs_cpu(bool shadow, int cpu, gfp_t flags)
{
 int node = ((void)(cpu),0);
 struct page *pages;
 struct vmcs *vmcs;

 pages = __alloc_pages_node(node, flags, vmcs_config.order);
 if (!pages)
  return ((void *)0);
 vmcs = lowmem_page_address(pages);
 memset(vmcs, 0, vmcs_config.size);


 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  vmcs->hdr.revision_id = 1;
 else
  vmcs->hdr.revision_id = vmcs_config.revision_id;

 if (shadow)
  vmcs->hdr.shadow_vmcs = 1;
 return vmcs;
}

void free_vmcs(struct vmcs *vmcs)
{
 free_pages((unsigned long)vmcs, vmcs_config.order);
}




void free_loaded_vmcs(struct loaded_vmcs *loaded_vmcs)
{
 if (!loaded_vmcs->vmcs)
  return;
 loaded_vmcs_clear(loaded_vmcs);
 free_vmcs(loaded_vmcs->vmcs);
 loaded_vmcs->vmcs = ((void *)0);
 if (loaded_vmcs->msr_bitmap)
  free_pages(((unsigned long)loaded_vmcs->msr_bitmap), 0);
 ({ int __ret_warn_on = !!(loaded_vmcs->shadow_vmcs != ((void *)0)); __builtin_expect(!!(__ret_warn_on), 0); });
}

int alloc_loaded_vmcs(struct loaded_vmcs *loaded_vmcs)
{
 loaded_vmcs->vmcs = alloc_vmcs(false);
 if (!loaded_vmcs->vmcs)
  return -12;

 vmcs_clear(loaded_vmcs->vmcs);

 loaded_vmcs->shadow_vmcs = ((void *)0);
 loaded_vmcs->hv_timer_soft_disabled = false;
 loaded_vmcs->cpu = -1;
 loaded_vmcs->launched = 0;

 if (cpu_has_vmx_msr_bitmap()) {
  loaded_vmcs->msr_bitmap = (unsigned long *)
    __get_free_pages(((((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)) | (( gfp_t)0x400000u))), 0);
  if (!loaded_vmcs->msr_bitmap)
   goto out_vmcs;
  memset(loaded_vmcs->msr_bitmap, 0xff, ((1UL) << 12));

  if (0 &&
      __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0) &&
      (ms_hyperv.nested_features & ((((1UL))) << (19)))) {
   struct hv_enlightened_vmcs *evmcs =
    (struct hv_enlightened_vmcs *)loaded_vmcs->vmcs;

   evmcs->hv_enlightenments_control.msr_bitmap = 1;
  }
 }

 memset(&loaded_vmcs->host_state, 0, sizeof(struct vmcs_host_state));
 memset(&loaded_vmcs->controls_shadow, 0,
  sizeof(struct vmcs_controls_shadow));

 return 0;

out_vmcs:
 free_loaded_vmcs(loaded_vmcs);
 return -12;
}

static void free_kvm_area(void)
{
 int cpu;

 for (((cpu)) = 0; ((cpu)) < 1; ((cpu))++, (void)((const struct cpumask *)&__cpu_possible_mask)) {
  free_vmcs((*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(vmxarea)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(vmxarea))) *)(&(vmxarea)); }); })));
  (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(vmxarea)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(vmxarea))) *)(&(vmxarea)); }); })) = ((void *)0);
 }
}

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) int alloc_kvm_area(void)
{
 int cpu;

 for (((cpu)) = 0; ((cpu)) < 1; ((cpu))++, (void)((const struct cpumask *)&__cpu_possible_mask)) {
  struct vmcs *vmcs;

  vmcs = alloc_vmcs_cpu(false, cpu, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
  if (!vmcs) {
   free_kvm_area();
   return -12;
  }
# 2704 "arch/x86/kvm/vmx/vmx.c"
  if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
   vmcs->hdr.revision_id = vmcs_config.revision_id;

  (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(vmxarea)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(vmxarea))) *)(&(vmxarea)); }); })) = vmcs;
 }
 return 0;
}

static void fix_pmode_seg(struct kvm_vcpu *vcpu, int seg,
  struct kvm_segment *save)
{
 if (!emulate_invalid_guest_state) {







  if (seg == VCPU_SREG_CS || seg == VCPU_SREG_SS)
   save->selector &= ~0x3;
  save->dpl = save->selector & 0x3;
  save->s = 1;
 }
 __vmx_set_segment(vcpu, save, seg);
}

static void enter_pmode(struct kvm_vcpu *vcpu)
{
 unsigned long flags;
 struct vcpu_vmx *vmx = to_vmx(vcpu);





 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_ES], VCPU_SREG_ES);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_DS], VCPU_SREG_DS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_FS], VCPU_SREG_FS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_GS], VCPU_SREG_GS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_SS], VCPU_SREG_SS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_CS], VCPU_SREG_CS);

 vmx->rmode.vm86_active = 0;

 __vmx_set_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_TR], VCPU_SREG_TR);

 flags = vmcs_readl(GUEST_RFLAGS);
 flags &= (~(((3UL) << 12) | (((1UL)) << (17))));
 flags |= vmx->rmode.save_rflags & ~(~(((3UL) << 12) | (((1UL)) << (17))));
 vmcs_writel(GUEST_RFLAGS, flags);

 vmcs_writel(GUEST_CR4, (vmcs_readl(GUEST_CR4) & ~(((1UL)) << (0))) |
   (vmcs_readl(CR4_READ_SHADOW) & (((1UL)) << (0))));

 vmx_update_exception_bitmap(vcpu);

 fix_pmode_seg(vcpu, VCPU_SREG_CS, &vmx->rmode.segs[VCPU_SREG_CS]);
 fix_pmode_seg(vcpu, VCPU_SREG_SS, &vmx->rmode.segs[VCPU_SREG_SS]);
 fix_pmode_seg(vcpu, VCPU_SREG_ES, &vmx->rmode.segs[VCPU_SREG_ES]);
 fix_pmode_seg(vcpu, VCPU_SREG_DS, &vmx->rmode.segs[VCPU_SREG_DS]);
 fix_pmode_seg(vcpu, VCPU_SREG_FS, &vmx->rmode.segs[VCPU_SREG_FS]);
 fix_pmode_seg(vcpu, VCPU_SREG_GS, &vmx->rmode.segs[VCPU_SREG_GS]);
}

static void fix_rmode_seg(int seg, struct kvm_segment *save)
{
 const struct kvm_vmx_segment_field *sf = &kvm_vmx_segment_fields[seg];
 struct kvm_segment var = *save;

 var.dpl = 0x3;
 if (seg == VCPU_SREG_CS)
  var.type = 0x3;

 if (!emulate_invalid_guest_state) {
  var.selector = var.base >> 4;
  var.base = var.base & 0xffff0;
  var.limit = 0xffff;
  var.g = 0;
  var.db = 0;
  var.present = 1;
  var.s = 1;
  var.l = 0;
  var.unusable = 0;
  var.type = 0x3;
  var.avl = 0;
  if (save->base & 0xf)
   ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: segment base is not " "paragraph aligned when entering " "protected mode (seg=%d)", seg); }); 0; });


 }

 vmcs_write16(sf->selector, var.selector);
 vmcs_writel(sf->base, var.base);
 vmcs_write32(sf->limit, var.limit);
 vmcs_write32(sf->ar_bytes, vmx_segment_access_rights(&var));
}

static void enter_rmode(struct kvm_vcpu *vcpu)
{
 unsigned long flags;
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct kvm_vmx *kvm_vmx = to_kvm_vmx(vcpu->kvm);

 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_TR], VCPU_SREG_TR);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_ES], VCPU_SREG_ES);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_DS], VCPU_SREG_DS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_FS], VCPU_SREG_FS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_GS], VCPU_SREG_GS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_SS], VCPU_SREG_SS);
 vmx_get_segment(vcpu, &vmx->rmode.segs[VCPU_SREG_CS], VCPU_SREG_CS);

 vmx->rmode.vm86_active = 1;





 if (!kvm_vmx->tss_addr)
  ({ if (0) ({ do {} while (0); _printk("\001" "4" "kvm: KVM_SET_TSS_ADDR need to be " "called before entering vcpu\n"); }); 0; });


 vmx_segment_cache_clear(vmx);

 vmcs_writel(GUEST_TR_BASE, kvm_vmx->tss_addr);
 vmcs_write32(GUEST_TR_LIMIT, (0x68 + (256 / 8) + (65536 / 8) + 1) - 1);
 vmcs_write32(GUEST_TR_AR_BYTES, 0x008b);

 flags = vmcs_readl(GUEST_RFLAGS);
 vmx->rmode.save_rflags = flags;

 flags |= ((3UL) << 12) | (((1UL)) << (17));

 vmcs_writel(GUEST_RFLAGS, flags);
 vmcs_writel(GUEST_CR4, vmcs_readl(GUEST_CR4) | (((1UL)) << (0)));
 vmx_update_exception_bitmap(vcpu);

 fix_rmode_seg(VCPU_SREG_SS, &vmx->rmode.segs[VCPU_SREG_SS]);
 fix_rmode_seg(VCPU_SREG_CS, &vmx->rmode.segs[VCPU_SREG_CS]);
 fix_rmode_seg(VCPU_SREG_ES, &vmx->rmode.segs[VCPU_SREG_ES]);
 fix_rmode_seg(VCPU_SREG_DS, &vmx->rmode.segs[VCPU_SREG_DS]);
 fix_rmode_seg(VCPU_SREG_GS, &vmx->rmode.segs[VCPU_SREG_GS]);
 fix_rmode_seg(VCPU_SREG_FS, &vmx->rmode.segs[VCPU_SREG_FS]);
}

int vmx_set_efer(struct kvm_vcpu *vcpu, u64 efer)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct vmx_uret_msr *msr = vmx_find_uret_msr(vmx, 0xc0000080);


 if (!msr)
  return 0;

 vcpu->arch.efer = efer;
 if (efer & (1<<10)) {
  vm_entry_controls_setbit(to_vmx(vcpu), 0x00000200);
  msr->data = efer;
 } else {
  vm_entry_controls_clearbit(to_vmx(vcpu), 0x00000200);

  msr->data = efer & ~(1<<8);
 }
 vmx_setup_uret_msrs(vmx);
 return 0;
}



static void enter_lmode(struct kvm_vcpu *vcpu)
{
 u32 guest_tr_ar;

 vmx_segment_cache_clear(to_vmx(vcpu));

 guest_tr_ar = vmcs_read32(GUEST_TR_AR_BYTES);
 if ((guest_tr_ar & 0x0f) != 11) {
  ({ if (0) ({ do {} while (0); _printk("\001" "7" "%s: tss fixup for long mode. \n", __func__); }); 0; });

  vmcs_write32(GUEST_TR_AR_BYTES,
        (guest_tr_ar & ~0x0f)
        | 11);
 }
 vmx_set_efer(vcpu, vcpu->arch.efer | (1<<10));
}

static void exit_lmode(struct kvm_vcpu *vcpu)
{
 vm_entry_controls_clearbit(to_vmx(vcpu), 0x00000200);
 vmx_set_efer(vcpu, vcpu->arch.efer & ~(1<<10));
}



static void vmx_flush_tlb_all(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
# 2909 "arch/x86/kvm/vmx/vmx.c"
 if (enable_ept) {
  ept_sync_global();
 } else if (enable_vpid) {
  if (cpu_has_vmx_invvpid_global()) {
   vpid_sync_vcpu_global();
  } else {
   vpid_sync_vcpu_single(vmx->vpid);
   vpid_sync_vcpu_single(vmx->nested.vpid02);
  }
 }
}

static void vmx_flush_tlb_current(struct kvm_vcpu *vcpu)
{
 struct kvm_mmu *mmu = vcpu->arch.mmu;
 u64 root_hpa = mmu->root_hpa;


 if (!((root_hpa) != (~(hpa_t)0)))
  return;

 if (enable_ept)
  ept_sync_context(construct_eptp(vcpu, root_hpa,
      mmu->shadow_root_level));
 else if (!is_guest_mode(vcpu))
  vpid_sync_context(to_vmx(vcpu)->vpid);
 else
  vpid_sync_context(nested_get_vpid02(vcpu));
}

static void vmx_flush_tlb_gva(struct kvm_vcpu *vcpu, gva_t addr)
{




 vpid_sync_vcpu_addr(to_vmx(vcpu)->vpid, addr);
}

static void vmx_flush_tlb_guest(struct kvm_vcpu *vcpu)
{







 vpid_sync_context(to_vmx(vcpu)->vpid);
}

void vmx_ept_load_pdptrs(struct kvm_vcpu *vcpu)
{
 struct kvm_mmu *mmu = vcpu->arch.walk_mmu;

 if (!kvm_register_is_dirty(vcpu, VCPU_EXREG_PDPTR))
  return;

 if (is_pae_paging(vcpu)) {
  vmcs_write64(GUEST_PDPTR0, mmu->pdptrs[0]);
  vmcs_write64(GUEST_PDPTR1, mmu->pdptrs[1]);
  vmcs_write64(GUEST_PDPTR2, mmu->pdptrs[2]);
  vmcs_write64(GUEST_PDPTR3, mmu->pdptrs[3]);
 }
}

void ept_save_pdptrs(struct kvm_vcpu *vcpu)
{
 struct kvm_mmu *mmu = vcpu->arch.walk_mmu;

 if (({ int __ret_warn_on = !!(!is_pae_paging(vcpu)); __builtin_expect(!!(__ret_warn_on), 0); }))
  return;

 mmu->pdptrs[0] = vmcs_read64(GUEST_PDPTR0);
 mmu->pdptrs[1] = vmcs_read64(GUEST_PDPTR1);
 mmu->pdptrs[2] = vmcs_read64(GUEST_PDPTR2);
 mmu->pdptrs[3] = vmcs_read64(GUEST_PDPTR3);

 kvm_register_mark_dirty(vcpu, VCPU_EXREG_PDPTR);
}




void vmx_set_cr0(struct kvm_vcpu *vcpu, unsigned long cr0)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long hw_cr0, old_cr0_pg;
 u32 tmp;

 old_cr0_pg = kvm_read_cr0_bits(vcpu, (((1UL)) << (31)));

 hw_cr0 = (cr0 & ~((((1UL)) << (29)) | (((1UL)) << (30))));
 if (is_unrestricted_guest(vcpu))
  hw_cr0 |= (((1UL)) << (5));
 else {
  hw_cr0 |= ((((1UL)) << (5)) | (((1UL)) << (31)) | (((1UL)) << (0)));
  if (!enable_ept)
   hw_cr0 |= (((1UL)) << (16));

  if (vmx->rmode.vm86_active && (cr0 & (((1UL)) << (0))))
   enter_pmode(vcpu);

  if (!vmx->rmode.vm86_active && !(cr0 & (((1UL)) << (0))))
   enter_rmode(vcpu);
 }

 vmcs_writel(CR0_READ_SHADOW, cr0);
 vmcs_writel(GUEST_CR0, hw_cr0);
 vcpu->arch.cr0 = cr0;
 kvm_register_mark_available(vcpu, VCPU_EXREG_CR0);


 if (vcpu->arch.efer & (1<<8)) {
  if (!old_cr0_pg && (cr0 & (((1UL)) << (31))))
   enter_lmode(vcpu);
  else if (old_cr0_pg && !(cr0 & (((1UL)) << (31))))
   exit_lmode(vcpu);
 }


 if (enable_ept && !is_unrestricted_guest(vcpu)) {






  if (!kvm_register_is_available(vcpu, VCPU_EXREG_CR3))
   vmx_cache_reg(vcpu, VCPU_EXREG_CR3);
# 3055 "arch/x86/kvm/vmx/vmx.c"
  if (!(cr0 & (((1UL)) << (31)))) {
   exec_controls_setbit(vmx, (((((1UL))) << (( 1*32+ 15) & 0x1f)) | ((((1UL))) << (( 1*32+ 16) & 0x1f))));
  } else if (!is_guest_mode(vcpu)) {
   exec_controls_clearbit(vmx, (((((1UL))) << (( 1*32+ 15) & 0x1f)) | ((((1UL))) << (( 1*32+ 16) & 0x1f))));
  } else {
   tmp = exec_controls_get(vmx);
   tmp &= ~(((((1UL))) << (( 1*32+ 15) & 0x1f)) | ((((1UL))) << (( 1*32+ 16) & 0x1f)));
   tmp |= get_vmcs12(vcpu)->cpu_based_vm_exec_control & (((((1UL))) << (( 1*32+ 15) & 0x1f)) | ((((1UL))) << (( 1*32+ 16) & 0x1f)));
   exec_controls_set(vmx, tmp);
  }


  if ((old_cr0_pg ^ cr0) & (((1UL)) << (31)))
   vmx_set_cr4(vcpu, kvm_read_cr4(vcpu));
 }


 vmx->emulation_required = vmx_emulation_required(vcpu);
}

static int vmx_get_max_tdp_level(void)
{
 if (cpu_has_vmx_ept_5levels())
  return 5;
 return 4;
}

u64 construct_eptp(struct kvm_vcpu *vcpu, hpa_t root_hpa, int root_level)
{
 u64 eptp = 0x6ull;

 eptp |= (root_level == 5) ? 0x20ull : 0x18ull;

 if (enable_ept_ad_bits &&
     (!is_guest_mode(vcpu) || nested_ept_ad_enabled(vcpu)))
  eptp |= (1ull << 6);
 eptp |= root_hpa;

 return eptp;
}

static void vmx_load_mmu_pgd(struct kvm_vcpu *vcpu, hpa_t root_hpa,
        int root_level)
{
 struct kvm *kvm = vcpu->kvm;
 bool update_guest_cr3 = true;
 unsigned long guest_cr3;
 u64 eptp;

 if (enable_ept) {
  eptp = construct_eptp(vcpu, root_hpa, root_level);
  vmcs_write64(EPT_POINTER, eptp);

  hv_track_root_tdp(vcpu, root_hpa);

  if (!enable_unrestricted_guest && !is_paging(vcpu))
   guest_cr3 = to_kvm_vmx(kvm)->ept_identity_map_addr;
  else if (test_bit(VCPU_EXREG_CR3, (ulong *)&vcpu->arch.regs_avail))
   guest_cr3 = vcpu->arch.cr3;
  else
   update_guest_cr3 = false;
  vmx_ept_load_pdptrs(vcpu);
 } else {
  guest_cr3 = root_hpa | kvm_get_active_pcid(vcpu);
 }

 if (update_guest_cr3)
  vmcs_writel(GUEST_CR3, guest_cr3);
}

static bool vmx_is_valid_cr4(struct kvm_vcpu *vcpu, unsigned long cr4)
{





 if ((cr4 & (((1UL)) << (13))) && is_smm(vcpu))
  return false;

 if (to_vmx(vcpu)->nested.vmxon && !nested_cr4_valid(vcpu, cr4))
  return false;

 return true;
}

void vmx_set_cr4(struct kvm_vcpu *vcpu, unsigned long cr4)
{
 unsigned long old_cr4 = vcpu->arch.cr4;
 struct vcpu_vmx *vmx = to_vmx(vcpu);





 unsigned long hw_cr4;

 hw_cr4 = (cr4_read_shadow() & (((1UL)) << (6))) | (cr4 & ~(((1UL)) << (6)));
 if (is_unrestricted_guest(vcpu))
  hw_cr4 |= (((1UL)) << (13));
 else if (vmx->rmode.vm86_active)
  hw_cr4 |= ((((1UL)) << (0)) | (((1UL)) << (5)) | (((1UL)) << (13)));
 else
  hw_cr4 |= ((((1UL)) << (5)) | (((1UL)) << (13)));

 if (!(__builtin_constant_p((16*32+ 2)) && ( ((((16*32+ 2))>>5)==(0) && (1UL<<(((16*32+ 2))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 2))>>5)==(1) && (1UL<<(((16*32+ 2))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 2))>>5)==(2) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(3) && (1UL<<(((16*32+ 2))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 2))>>5)==(4) && (1UL<<(((16*32+ 2))&31) & (0) )) || ((((16*32+ 2))>>5)==(5) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(6) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(7) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(8) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(9) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(10) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(11) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(12) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(13) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(14) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(15) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(16) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(17) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(18) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((((16*32+ 2))>>5)==(19) && (1UL<<(((16*32+ 2))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 2), (unsigned long *)((&boot_cpu_data)->x86_capability))) && vmx_umip_emulated()) {
  if (cr4 & (((1UL)) << (11))) {
   secondary_exec_controls_setbit(vmx, ((((1UL))) << (( 2*32+ 2) & 0x1f)));
   hw_cr4 &= ~(((1UL)) << (11));
  } else if (!is_guest_mode(vcpu) ||
   !nested_cpu_has2(get_vmcs12(vcpu), ((((1UL))) << (( 2*32+ 2) & 0x1f)))) {
   secondary_exec_controls_clearbit(vmx, ((((1UL))) << (( 2*32+ 2) & 0x1f)));
  }
 }

 vcpu->arch.cr4 = cr4;
 kvm_register_mark_available(vcpu, VCPU_EXREG_CR4);

 if (!is_unrestricted_guest(vcpu)) {
  if (enable_ept) {
   if (!is_paging(vcpu)) {
    hw_cr4 &= ~(((1UL)) << (5));
    hw_cr4 |= (((1UL)) << (4));
   } else if (!(cr4 & (((1UL)) << (5)))) {
    hw_cr4 &= ~(((1UL)) << (5));
   }
  }
# 3194 "arch/x86/kvm/vmx/vmx.c"
  if (!is_paging(vcpu))
   hw_cr4 &= ~((((1UL)) << (20)) | (((1UL)) << (21)) | (((1UL)) << (22)));
 }

 vmcs_writel(CR4_READ_SHADOW, cr4);
 vmcs_writel(GUEST_CR4, hw_cr4);

 if ((cr4 ^ old_cr4) & ((((1UL)) << (18)) | (((1UL)) << (22))))
  kvm_update_cpuid_runtime(vcpu);
}

void vmx_get_segment(struct kvm_vcpu *vcpu, struct kvm_segment *var, int seg)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 u32 ar;

 if (vmx->rmode.vm86_active && seg != VCPU_SREG_LDTR) {
  *var = vmx->rmode.segs[seg];
  if (seg == VCPU_SREG_TR
      || var->selector == vmx_read_guest_seg_selector(vmx, seg))
   return;
  var->base = vmx_read_guest_seg_base(vmx, seg);
  var->selector = vmx_read_guest_seg_selector(vmx, seg);
  return;
 }
 var->base = vmx_read_guest_seg_base(vmx, seg);
 var->limit = vmx_read_guest_seg_limit(vmx, seg);
 var->selector = vmx_read_guest_seg_selector(vmx, seg);
 ar = vmx_read_guest_seg_ar(vmx, seg);
 var->unusable = (ar >> 16) & 1;
 var->type = ar & 15;
 var->s = (ar >> 4) & 1;
 var->dpl = (ar >> 5) & 3;







 var->present = !var->unusable;
 var->avl = (ar >> 12) & 1;
 var->l = (ar >> 13) & 1;
 var->db = (ar >> 14) & 1;
 var->g = (ar >> 15) & 1;
}

static u64 vmx_get_segment_base(struct kvm_vcpu *vcpu, int seg)
{
 struct kvm_segment s;

 if (to_vmx(vcpu)->rmode.vm86_active) {
  vmx_get_segment(vcpu, &s, seg);
  return s.base;
 }
 return vmx_read_guest_seg_base(to_vmx(vcpu), seg);
}

int vmx_get_cpl(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (__builtin_expect(!!(vmx->rmode.vm86_active), 0))
  return 0;
 else {
  int ar = vmx_read_guest_seg_ar(vmx, VCPU_SREG_SS);
  return (((ar) >> 5) & 3);
 }
}

static u32 vmx_segment_access_rights(struct kvm_segment *var)
{
 u32 ar;

 if (var->unusable || !var->present)
  ar = 1 << 16;
 else {
  ar = var->type & 15;
  ar |= (var->s & 1) << 4;
  ar |= (var->dpl & 3) << 5;
  ar |= (var->present & 1) << 7;
  ar |= (var->avl & 1) << 12;
  ar |= (var->l & 1) << 13;
  ar |= (var->db & 1) << 14;
  ar |= (var->g & 1) << 15;
 }

 return ar;
}

void __vmx_set_segment(struct kvm_vcpu *vcpu, struct kvm_segment *var, int seg)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 const struct kvm_vmx_segment_field *sf = &kvm_vmx_segment_fields[seg];

 vmx_segment_cache_clear(vmx);

 if (vmx->rmode.vm86_active && seg != VCPU_SREG_LDTR) {
  vmx->rmode.segs[seg] = *var;
  if (seg == VCPU_SREG_TR)
   vmcs_write16(sf->selector, var->selector);
  else if (var->s)
   fix_rmode_seg(seg, &vmx->rmode.segs[seg]);
  return;
 }

 vmcs_writel(sf->base, var->base);
 vmcs_write32(sf->limit, var->limit);
 vmcs_write16(sf->selector, var->selector);
# 3315 "arch/x86/kvm/vmx/vmx.c"
 if (is_unrestricted_guest(vcpu) && (seg != VCPU_SREG_LDTR))
  var->type |= 0x1;

 vmcs_write32(sf->ar_bytes, vmx_segment_access_rights(var));
}

static void vmx_set_segment(struct kvm_vcpu *vcpu, struct kvm_segment *var, int seg)
{
 __vmx_set_segment(vcpu, var, seg);

 to_vmx(vcpu)->emulation_required = vmx_emulation_required(vcpu);
}

static void vmx_get_cs_db_l_bits(struct kvm_vcpu *vcpu, int *db, int *l)
{
 u32 ar = vmx_read_guest_seg_ar(to_vmx(vcpu), VCPU_SREG_CS);

 *db = (ar >> 14) & 1;
 *l = (ar >> 13) & 1;
}

static void vmx_get_idt(struct kvm_vcpu *vcpu, struct desc_ptr *dt)
{
 dt->size = vmcs_read32(GUEST_IDTR_LIMIT);
 dt->address = vmcs_readl(GUEST_IDTR_BASE);
}

static void vmx_set_idt(struct kvm_vcpu *vcpu, struct desc_ptr *dt)
{
 vmcs_write32(GUEST_IDTR_LIMIT, dt->size);
 vmcs_writel(GUEST_IDTR_BASE, dt->address);
}

static void vmx_get_gdt(struct kvm_vcpu *vcpu, struct desc_ptr *dt)
{
 dt->size = vmcs_read32(GUEST_GDTR_LIMIT);
 dt->address = vmcs_readl(GUEST_GDTR_BASE);
}

static void vmx_set_gdt(struct kvm_vcpu *vcpu, struct desc_ptr *dt)
{
 vmcs_write32(GUEST_GDTR_LIMIT, dt->size);
 vmcs_writel(GUEST_GDTR_BASE, dt->address);
}

static bool rmode_segment_valid(struct kvm_vcpu *vcpu, int seg)
{
 struct kvm_segment var;
 u32 ar;

 vmx_get_segment(vcpu, &var, seg);
 var.dpl = 0x3;
 if (seg == VCPU_SREG_CS)
  var.type = 0x3;
 ar = vmx_segment_access_rights(&var);

 if (var.base != (var.selector << 4))
  return false;
 if (var.limit != 0xffff)
  return false;
 if (ar != 0xf3)
  return false;

 return true;
}

static bool code_segment_valid(struct kvm_vcpu *vcpu)
{
 struct kvm_segment cs;
 unsigned int cs_rpl;

 vmx_get_segment(vcpu, &cs, VCPU_SREG_CS);
 cs_rpl = cs.selector & 0x3;

 if (cs.unusable)
  return false;
 if (~cs.type & ((1 << 3)|1))
  return false;
 if (!cs.s)
  return false;
 if (cs.type & (1 << 2)) {
  if (cs.dpl > cs_rpl)
   return false;
 } else {
  if (cs.dpl != cs_rpl)
   return false;
 }
 if (!cs.present)
  return false;


 return true;
}

static bool stack_segment_valid(struct kvm_vcpu *vcpu)
{
 struct kvm_segment ss;
 unsigned int ss_rpl;

 vmx_get_segment(vcpu, &ss, VCPU_SREG_SS);
 ss_rpl = ss.selector & 0x3;

 if (ss.unusable)
  return true;
 if (ss.type != 3 && ss.type != 7)
  return false;
 if (!ss.s)
  return false;
 if (ss.dpl != ss_rpl)
  return false;
 if (!ss.present)
  return false;

 return true;
}

static bool data_segment_valid(struct kvm_vcpu *vcpu, int seg)
{
 struct kvm_segment var;
 unsigned int rpl;

 vmx_get_segment(vcpu, &var, seg);
 rpl = var.selector & 0x3;

 if (var.unusable)
  return true;
 if (!var.s)
  return false;
 if (!var.present)
  return false;
 if (~var.type & ((1 << 3)|(1 << 2))) {
  if (var.dpl < rpl)
   return false;
 }




 return true;
}

static bool tr_valid(struct kvm_vcpu *vcpu)
{
 struct kvm_segment tr;

 vmx_get_segment(vcpu, &tr, VCPU_SREG_TR);

 if (tr.unusable)
  return false;
 if (tr.selector & 0x4)
  return false;
 if (tr.type != 3 && tr.type != 11)
  return false;
 if (!tr.present)
  return false;

 return true;
}

static bool ldtr_valid(struct kvm_vcpu *vcpu)
{
 struct kvm_segment ldtr;

 vmx_get_segment(vcpu, &ldtr, VCPU_SREG_LDTR);

 if (ldtr.unusable)
  return true;
 if (ldtr.selector & 0x4)
  return false;
 if (ldtr.type != 2)
  return false;
 if (!ldtr.present)
  return false;

 return true;
}

static bool cs_ss_rpl_check(struct kvm_vcpu *vcpu)
{
 struct kvm_segment cs, ss;

 vmx_get_segment(vcpu, &cs, VCPU_SREG_CS);
 vmx_get_segment(vcpu, &ss, VCPU_SREG_SS);

 return ((cs.selector & 0x3) ==
   (ss.selector & 0x3));
}






bool __vmx_guest_state_valid(struct kvm_vcpu *vcpu)
{

 if (!is_protmode(vcpu) || (vmx_get_rflags(vcpu) & (((1UL)) << (17)))) {
  if (!rmode_segment_valid(vcpu, VCPU_SREG_CS))
   return false;
  if (!rmode_segment_valid(vcpu, VCPU_SREG_SS))
   return false;
  if (!rmode_segment_valid(vcpu, VCPU_SREG_DS))
   return false;
  if (!rmode_segment_valid(vcpu, VCPU_SREG_ES))
   return false;
  if (!rmode_segment_valid(vcpu, VCPU_SREG_FS))
   return false;
  if (!rmode_segment_valid(vcpu, VCPU_SREG_GS))
   return false;
 } else {

  if (!cs_ss_rpl_check(vcpu))
   return false;
  if (!code_segment_valid(vcpu))
   return false;
  if (!stack_segment_valid(vcpu))
   return false;
  if (!data_segment_valid(vcpu, VCPU_SREG_DS))
   return false;
  if (!data_segment_valid(vcpu, VCPU_SREG_ES))
   return false;
  if (!data_segment_valid(vcpu, VCPU_SREG_FS))
   return false;
  if (!data_segment_valid(vcpu, VCPU_SREG_GS))
   return false;
  if (!tr_valid(vcpu))
   return false;
  if (!ldtr_valid(vcpu))
   return false;
 }





 return true;
}

static int init_rmode_tss(struct kvm *kvm, void *ua)
{
 const void *zero_page = (const void *) ((void *)((unsigned long)(((dma_addr_t)(unsigned long)((((void)(0),(((struct page *)vmemmap_base) + (__phys_addr_nodebug((unsigned long)(empty_zero_page)) >> 12)))) - ((struct page *)vmemmap_base)) << 12))+((unsigned long)page_offset_base)));
 u16 data;
 int i;

 for (i = 0; i < 3; i++) {
  if (__copy_to_user(ua + ((1UL) << 12) * i, zero_page, ((1UL) << 12)))
   return -14;
 }

 data = 0x68 + (256 / 8);
 if (__copy_to_user(ua + 0x66, &data, sizeof(u16)))
  return -14;

 data = ~0;
 if (__copy_to_user(ua + (0x68 + (256 / 8) + (65536 / 8) + 1) - 1, &data, sizeof(u8)))
  return -14;

 return 0;
}

static int init_rmode_identity_map(struct kvm *kvm)
{
 struct kvm_vmx *kvm_vmx = to_kvm_vmx(kvm);
 int i, r = 0;
 void *uaddr;
 u32 tmp;


 mutex_lock_nested(&kvm->slots_lock, 0);

 if (__builtin_expect(!!(kvm_vmx->ept_identity_pagetable_done), 1))
  goto out;

 if (!kvm_vmx->ept_identity_map_addr)
  kvm_vmx->ept_identity_map_addr = 0xfffbc000ul;

 uaddr = __x86_set_memory_region(kvm,
     ((((short)(((unsigned short)~0U) >> 1)) - 3) + 2),
     kvm_vmx->ept_identity_map_addr,
     ((1UL) << 12));
 if (IS_ERR(uaddr)) {
  r = PTR_ERR(uaddr);
  goto out;
 }


 for (i = 0; i < (1 << 10); i++) {
  tmp = (i << 22) + ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 2) |
   (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 7));
  if (__copy_to_user(uaddr + i * sizeof(tmp), &tmp, sizeof(tmp))) {
   r = -14;
   goto out;
  }
 }
 kvm_vmx->ept_identity_pagetable_done = true;

out:
 mutex_unlock(&kvm->slots_lock);
 return r;
}

static void seg_setup(int seg)
{
 const struct kvm_vmx_segment_field *sf = &kvm_vmx_segment_fields[seg];
 unsigned int ar;

 vmcs_write16(sf->selector, 0);
 vmcs_writel(sf->base, 0);
 vmcs_write32(sf->limit, 0xffff);
 ar = 0x93;
 if (seg == VCPU_SREG_CS)
  ar |= 0x08;

 vmcs_write32(sf->ar_bytes, ar);
}

static int alloc_apic_access_page(struct kvm *kvm)
{
 struct page *page;
 void *hva;
 int ret = 0;

 mutex_lock_nested(&kvm->slots_lock, 0);
 if (kvm->arch.apic_access_memslot_enabled)
  goto out;
 hva = __x86_set_memory_region(kvm, ((((short)(((unsigned short)~0U) >> 1)) - 3) + 1),
          0xfee00000, ((1UL) << 12));
 if (IS_ERR(hva)) {
  ret = PTR_ERR(hva);
  goto out;
 }

 page = gfn_to_page(kvm, 0xfee00000 >> 12);
 if (is_error_page(page)) {
  ret = -14;
  goto out;
 }





 put_page(page);
 kvm->arch.apic_access_memslot_enabled = true;
out:
 mutex_unlock(&kvm->slots_lock);
 return ret;
}

int allocate_vpid(void)
{
 int vpid;

 if (!enable_vpid)
  return 0;
 spin_lock(&vmx_vpid_lock);
 vpid = find_first_zero_bit(vmx_vpid_bitmap, (1 << 16));
 if (vpid < (1 << 16))
  __set_bit(vpid, vmx_vpid_bitmap);
 else
  vpid = 0;
 spin_unlock(&vmx_vpid_lock);
 return vpid;
}

void free_vpid(int vpid)
{
 if (!enable_vpid || vpid == 0)
  return;
 spin_lock(&vmx_vpid_lock);
 __clear_bit(vpid, vmx_vpid_bitmap);
 spin_unlock(&vmx_vpid_lock);
}

void vmx_disable_intercept_for_msr(struct kvm_vcpu *vcpu, u32 msr, int type)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long *msr_bitmap = vmx->vmcs01.msr_bitmap;

 if (!cpu_has_vmx_msr_bitmap())
  return;

 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  evmcs_touch_msr_bitmap();





 if (is_valid_passthrough_msr(msr)) {
  int idx = possible_passthrough_msr_slot(msr);

  if (idx != -2) {
   if (type & 1)
    clear_bit(idx, vmx->shadow_msr_intercept.read);
   if (type & 2)
    clear_bit(idx, vmx->shadow_msr_intercept.write);
  }
 }

 if ((type & 1) &&
     !kvm_msr_allowed(vcpu, msr, (1 << 0))) {
  vmx_set_msr_bitmap_read(msr_bitmap, msr);
  type &= ~1;
 }

 if ((type & 2) &&
     !kvm_msr_allowed(vcpu, msr, (1 << 1))) {
  vmx_set_msr_bitmap_write(msr_bitmap, msr);
  type &= ~2;
 }

 if (type & 1)
  vmx_clear_msr_bitmap_read(msr_bitmap, msr);

 if (type & 2)
  vmx_clear_msr_bitmap_write(msr_bitmap, msr);
}

void vmx_enable_intercept_for_msr(struct kvm_vcpu *vcpu, u32 msr, int type)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long *msr_bitmap = vmx->vmcs01.msr_bitmap;

 if (!cpu_has_vmx_msr_bitmap())
  return;

 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0))
  evmcs_touch_msr_bitmap();





 if (is_valid_passthrough_msr(msr)) {
  int idx = possible_passthrough_msr_slot(msr);

  if (idx != -2) {
   if (type & 1)
    set_bit(idx, vmx->shadow_msr_intercept.read);
   if (type & 2)
    set_bit(idx, vmx->shadow_msr_intercept.write);
  }
 }

 if (type & 1)
  vmx_set_msr_bitmap_read(msr_bitmap, msr);

 if (type & 2)
  vmx_set_msr_bitmap_write(msr_bitmap, msr);
}

static void vmx_reset_x2apic_msrs(struct kvm_vcpu *vcpu, u8 mode)
{
 unsigned long *msr_bitmap = to_vmx(vcpu)->vmcs01.msr_bitmap;
 unsigned long read_intercept;
 int msr;

 read_intercept = (mode & 2) ? 0 : ~0;

 for (msr = 0x800; msr <= 0x8ff; msr += 64) {
  unsigned int read_idx = msr / 64;
  unsigned int write_idx = read_idx + (0x800 / sizeof(long));

  msr_bitmap[read_idx] = read_intercept;
  msr_bitmap[write_idx] = ~0ul;
 }
}

static void vmx_update_msr_bitmap_x2apic(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 u8 mode;

 if (!cpu_has_vmx_msr_bitmap())
  return;

 if (cpu_has_secondary_exec_ctrls() &&
     (secondary_exec_controls_get(vmx) &
      ((((1UL))) << (( 2*32+ 4) & 0x1f)))) {
  mode = 1;
  if (enable_apicv && kvm_vcpu_apicv_active(vcpu))
   mode |= 2;
 } else {
  mode = 0;
 }

 if (mode == vmx->x2apic_msr_bitmap_mode)
  return;

 vmx->x2apic_msr_bitmap_mode = mode;

 vmx_reset_x2apic_msrs(vcpu, mode);





 vmx_set_intercept_for_msr(vcpu, (0x800 + ((0x80) >> 4)), 3,
      !(mode & 1));

 if (mode & 2) {
  vmx_enable_intercept_for_msr(vcpu, (0x800 + ((0x390) >> 4)), 3);
  vmx_disable_intercept_for_msr(vcpu, (0x800 + ((0xB0) >> 4)), 2);
  vmx_disable_intercept_for_msr(vcpu, (0x800 + ((0x3F0) >> 4)), 2);
 }
}

void pt_update_intercept_for_msr(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 bool flag = !(vmx->pt_desc.guest.ctl & ((((1UL))) << (0)));
 u32 i;

 vmx_set_intercept_for_msr(vcpu, 0x00000571, 3, flag);
 vmx_set_intercept_for_msr(vcpu, 0x00000560, 3, flag);
 vmx_set_intercept_for_msr(vcpu, 0x00000561, 3, flag);
 vmx_set_intercept_for_msr(vcpu, 0x00000572, 3, flag);
 for (i = 0; i < vmx->pt_desc.num_address_ranges; i++) {
  vmx_set_intercept_for_msr(vcpu, 0x00000580 + i * 2, 3, flag);
  vmx_set_intercept_for_msr(vcpu, 0x00000581 + i * 2, 3, flag);
 }
}

static bool vmx_guest_apic_has_interrupt(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 void *vapic_page;
 u32 vppr;
 int rvi;

 if (({ int __ret_warn_on = !!(!is_guest_mode(vcpu)); __builtin_expect(!!(__ret_warn_on), 0); }) ||
  !nested_cpu_has_vid(get_vmcs12(vcpu)) ||
  ({ int __ret_warn_on = !!(!vmx->nested.virtual_apic_map.gfn); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;

 rvi = vmx_get_rvi();

 vapic_page = vmx->nested.virtual_apic_map.hva;
 vppr = *((u32 *)(vapic_page + 0xA0));

 return ((rvi & 0xf0) > (vppr & 0xf0));
}

static void vmx_msr_filter_changed(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 u32 i;






 for (i = 0; i < (sizeof(vmx_possible_passthrough_msrs) / sizeof((vmx_possible_passthrough_msrs)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((vmx_possible_passthrough_msrs)), typeof(&(vmx_possible_passthrough_msrs)[0])))); })))); i++) {
  u32 msr = vmx_possible_passthrough_msrs[i];
  bool read = test_bit(i, vmx->shadow_msr_intercept.read);
  bool write = test_bit(i, vmx->shadow_msr_intercept.write);

  vmx_set_intercept_for_msr(vcpu, msr, 1, read);
  vmx_set_intercept_for_msr(vcpu, msr, 2, write);
 }

 pt_update_intercept_for_msr(vcpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kvm_vcpu_trigger_posted_interrupt(struct kvm_vcpu *vcpu,
           bool nested)
{
# 3917 "arch/x86/kvm/vmx/vmx.c"
 return false;
}

static int vmx_deliver_nested_posted_interrupt(struct kvm_vcpu *vcpu,
      int vector)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (is_guest_mode(vcpu) &&
     vector == vmx->nested.posted_intr_nv) {




  vmx->nested.pi_pending = true;
  kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_889(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(6) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(6) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_889(); } while (0); (unsigned)(((6) + 8) | (0)); }), vcpu);

  if (!kvm_vcpu_trigger_posted_interrupt(vcpu, true))
   kvm_vcpu_kick(vcpu);
  return 0;
 }
 return -1;
}







static int vmx_deliver_posted_interrupt(struct kvm_vcpu *vcpu, int vector)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 int r;

 r = vmx_deliver_nested_posted_interrupt(vcpu, vector);
 if (!r)
  return 0;

 if (!vcpu->arch.apicv_active)
  return -1;

 if (pi_test_and_set_pir(vector, &vmx->pi_desc))
  return 0;


 if (pi_test_and_set_on(&vmx->pi_desc))
  return 0;

 if (vcpu != kvm_get_running_vcpu() &&
     !kvm_vcpu_trigger_posted_interrupt(vcpu, false))
  kvm_vcpu_kick(vcpu);

 return 0;
}







void vmx_set_constant_host_state(struct vcpu_vmx *vmx)
{
 u32 low32, high32;
 unsigned long tmpl;
 unsigned long cr0, cr3, cr4;

 cr0 = read_cr0();
 ({ int __ret_warn_on = !!(cr0 & (((1UL)) << (3))); __builtin_expect(!!(__ret_warn_on), 0); });
 vmcs_writel(HOST_CR0, cr0);





 cr3 = __read_cr3();
 vmcs_writel(HOST_CR3, cr3);
 vmx->loaded_vmcs->host_state.cr3 = cr3;


 cr4 = cr4_read_shadow();
 vmcs_writel(HOST_CR4, cr4);
 vmx->loaded_vmcs->host_state.cr4 = cr4;

 vmcs_write16(HOST_CS_SELECTOR, (2*8));






 vmcs_write16(HOST_DS_SELECTOR, 0);
 vmcs_write16(HOST_ES_SELECTOR, 0);




 vmcs_write16(HOST_SS_SELECTOR, (3*8));
 vmcs_write16(HOST_TR_SELECTOR, 8*8);

 vmcs_writel(HOST_IDTR_BASE, host_idt_base);

 vmcs_writel(HOST_RIP, (unsigned long)vmx_vmexit);

 do { u64 __val = native_read_msr((0x00000174)); (void)((low32) = (u32)__val); (void)((high32) = (u32)(__val >> 32)); } while (0);
 vmcs_write32(HOST_IA32_SYSENTER_CS, low32);
 ((tmpl) = native_read_msr((0x00000176)));
 vmcs_writel(HOST_IA32_SYSENTER_EIP, tmpl);

 if (vmcs_config.vmexit_ctrl & 0x00080000) {
  do { u64 __val = native_read_msr((0x00000277)); (void)((low32) = (u32)__val); (void)((high32) = (u32)(__val >> 32)); } while (0);
  vmcs_write64(HOST_IA32_PAT, low32 | ((u64) high32 << 32));
 }

 if (cpu_has_load_ia32_efer())
  vmcs_write64(HOST_IA32_EFER, host_efer);
}

void set_cr4_guest_host_mask(struct vcpu_vmx *vmx)
{
 struct kvm_vcpu *vcpu = &vmx->vcpu;

 vcpu->arch.cr4_guest_owned_bits = ((((1UL)) << (1)) | (((1UL)) << (3)) | (((1UL)) << (8)) | (((1UL)) << (9)) | (((1UL)) << (10)) | (((1UL)) << (7)) | (((1UL)) << (2)) | (((1UL)) << (16))) &
       ~vcpu->arch.cr4_guest_rsvd_bits;
 if (!enable_ept)
  vcpu->arch.cr4_guest_owned_bits &= ~(((1UL)) << (7));
 if (is_guest_mode(&vmx->vcpu))
  vcpu->arch.cr4_guest_owned_bits &=
   ~get_vmcs12(vcpu)->cr4_guest_host_mask;
 vmcs_writel(CR4_GUEST_HOST_MASK, ~vcpu->arch.cr4_guest_owned_bits);
}

static u32 vmx_pin_based_exec_ctrl(struct vcpu_vmx *vmx)
{
 u32 pin_based_exec_ctrl = vmcs_config.pin_based_exec_ctrl;

 if (!kvm_vcpu_apicv_active(&vmx->vcpu))
  pin_based_exec_ctrl &= ~((((1UL))) << (( 0*32+ 7) & 0x1f));

 if (!enable_vnmi)
  pin_based_exec_ctrl &= ~((((1UL))) << (( 0*32+ 5) & 0x1f));

 if (!enable_preemption_timer)
  pin_based_exec_ctrl &= ~((((1UL))) << (( 0*32+ 6) & 0x1f));

 return pin_based_exec_ctrl;
}

static u32 vmx_vmentry_ctrl(void)
{
 u32 vmentry_ctrl = vmcs_config.vmentry_ctrl;

 if (vmx_pt_mode_is_system())
  vmentry_ctrl &= ~(0x00020000 |
      0x00040000);

 return vmentry_ctrl &
  ~(0x00002000 | 0x00008000);
}

static u32 vmx_vmexit_ctrl(void)
{
 u32 vmexit_ctrl = vmcs_config.vmexit_ctrl;

 if (vmx_pt_mode_is_system())
  vmexit_ctrl &= ~(0x01000000 |
     0x02000000);

 return vmexit_ctrl &
  ~(0x00001000 | 0x00200000);
}

static void vmx_refresh_apicv_exec_ctrl(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 pin_controls_set(vmx, vmx_pin_based_exec_ctrl(vmx));
 if (cpu_has_secondary_exec_ctrls()) {
  if (kvm_vcpu_apicv_active(vcpu))
   secondary_exec_controls_setbit(vmx,
          ((((1UL))) << (( 2*32+ 8) & 0x1f)) |
          ((((1UL))) << (( 2*32+ 9) & 0x1f)));
  else
   secondary_exec_controls_clearbit(vmx,
     ((((1UL))) << (( 2*32+ 8) & 0x1f)) |
     ((((1UL))) << (( 2*32+ 9) & 0x1f)));
 }

 vmx_update_msr_bitmap_x2apic(vcpu);
}

static u32 vmx_exec_control(struct vcpu_vmx *vmx)
{
 u32 exec_control = vmcs_config.cpu_based_exec_ctrl;

 if (vmx->vcpu.arch.switch_db_regs & KVM_DEBUGREG_WONT_EXIT)
  exec_control &= ~((((1UL))) << (( 1*32+ 23) & 0x1f));

 if (!cpu_need_tpr_shadow(&vmx->vcpu)) {
  exec_control &= ~((((1UL))) << (( 1*32+ 21) & 0x1f));

  exec_control |= ((((1UL))) << (( 1*32+ 20) & 0x1f)) |
    ((((1UL))) << (( 1*32+ 19) & 0x1f));

 }
 if (!enable_ept)
  exec_control |= ((((1UL))) << (( 1*32+ 16) & 0x1f)) |
    ((((1UL))) << (( 1*32+ 15) & 0x1f)) |
    ((((1UL))) << (( 1*32+ 9) & 0x1f));
 if (kvm_mwait_in_guest(vmx->vcpu.kvm))
  exec_control &= ~(((((1UL))) << (( 1*32+ 10) & 0x1f)) |
    ((((1UL))) << (( 1*32+ 29) & 0x1f)));
 if (kvm_hlt_in_guest(vmx->vcpu.kvm))
  exec_control &= ~((((1UL))) << (( 1*32+ 7) & 0x1f));
 return exec_control;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
vmx_adjust_secondary_exec_control(struct vcpu_vmx *vmx, u32 *exec_control,
      u32 control, bool enabled, bool exiting)
{
# 4152 "arch/x86/kvm/vmx/vmx.c"
 if (enabled == exiting)
  *exec_control &= ~control;





 if (nested) {
  if (enabled)
   vmx->nested.msrs.secondary_ctls_high |= control;
  else
   vmx->nested.msrs.secondary_ctls_high &= ~control;
 }
}
# 4191 "arch/x86/kvm/vmx/vmx.c"
static u32 vmx_secondary_exec_control(struct vcpu_vmx *vmx)
{
 struct kvm_vcpu *vcpu = &vmx->vcpu;

 u32 exec_control = vmcs_config.cpu_based_2nd_exec_ctrl;

 if (vmx_pt_mode_is_system())
  exec_control &= ~(((((1UL))) << (( 2*32+ 24) & 0x1f)) | ((((1UL))) << (( 2*32+ 19) & 0x1f)));
 if (!cpu_need_virtualize_apic_accesses(vcpu))
  exec_control &= ~((((1UL))) << (( 2*32+ 0) & 0x1f));
 if (vmx->vpid == 0)
  exec_control &= ~((((1UL))) << (( 2*32+ 5) & 0x1f));
 if (!enable_ept) {
  exec_control &= ~((((1UL))) << (( 2*32+ 1) & 0x1f));
  enable_unrestricted_guest = 0;
 }
 if (!enable_unrestricted_guest)
  exec_control &= ~((((1UL))) << (( 2*32+ 7) & 0x1f));
 if (kvm_pause_in_guest(vmx->vcpu.kvm))
  exec_control &= ~((((1UL))) << (( 2*32+ 10) & 0x1f));
 if (!kvm_vcpu_apicv_active(vcpu))
  exec_control &= ~(((((1UL))) << (( 2*32+ 8) & 0x1f)) |
      ((((1UL))) << (( 2*32+ 9) & 0x1f)));
 exec_control &= ~((((1UL))) << (( 2*32+ 4) & 0x1f));



 exec_control &= ~((((1UL))) << (( 2*32+ 2) & 0x1f));






 exec_control &= ~((((1UL))) << (( 2*32+ 14) & 0x1f));






 if (!vcpu->kvm->arch.cpu_dirty_logging_count)
  exec_control &= ~((((1UL))) << (( 2*32+ 17) & 0x1f));

 if (cpu_has_vmx_xsaves()) {

  bool xsaves_enabled =
   (__builtin_constant_p(( 4*32+26)) && ( (((( 4*32+26))>>5)==(0) && (1UL<<((( 4*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+26))>>5)==(1) && (1UL<<((( 4*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+26))>>5)==(2) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(3) && (1UL<<((( 4*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+26))>>5)==(4) && (1UL<<((( 4*32+26))&31) & (0) )) || (((( 4*32+26))>>5)==(5) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(6) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(7) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(8) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(9) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(10) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(11) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(12) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(13) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(14) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(15) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(16) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(17) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(18) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(19) && (1UL<<((( 4*32+26))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 4*32+26), (unsigned long *)((&boot_cpu_data)->x86_capability))) &&
   guest_cpuid_has(vcpu, ( 4*32+26)) &&
   guest_cpuid_has(vcpu, (10*32+ 3));

  vcpu->arch.xsaves_enabled = xsaves_enabled;

  vmx_adjust_secondary_exec_control(vmx, &exec_control,
        ((((1UL))) << (( 2*32+ 20) & 0x1f)),
        xsaves_enabled, false);
 }
# 4257 "arch/x86/kvm/vmx/vmx.c"
 if (cpu_has_vmx_rdtscp()) {
  bool rdpid_or_rdtscp_enabled =
   guest_cpuid_has(vcpu, ( 1*32+27)) ||
   guest_cpuid_has(vcpu, (16*32+22));

  vmx_adjust_secondary_exec_control(vmx, &exec_control,
        ((((1UL))) << (( 2*32+ 3) & 0x1f)),
        rdpid_or_rdtscp_enabled, false);
 }
 ({ bool __enabled; if (cpu_has_vmx_invpcid()) { __enabled = guest_cpuid_has(&(vmx)->vcpu, ( 9*32+10)); vmx_adjust_secondary_exec_control(vmx, &exec_control, ((((1UL))) << (( 2*32+ 12) & 0x1f)), __enabled, false); } });

 ({ bool __enabled; if (cpu_has_vmx_rdrand()) { __enabled = guest_cpuid_has(&(vmx)->vcpu, ( 4*32+30)); vmx_adjust_secondary_exec_control(vmx, &exec_control, ((((1UL))) << (( 2*32+ 11) & 0x1f)), __enabled, true); } });
 ({ bool __enabled; if (cpu_has_vmx_rdseed()) { __enabled = guest_cpuid_has(&(vmx)->vcpu, ( 9*32+18)); vmx_adjust_secondary_exec_control(vmx, &exec_control, ((((1UL))) << (( 2*32+ 16) & 0x1f)), __enabled, true); } });

 ({ bool __enabled; if (cpu_has_vmx_waitpkg()) { __enabled = guest_cpuid_has(&(vmx)->vcpu, (16*32+ 5)); vmx_adjust_secondary_exec_control(vmx, &exec_control, ((((1UL))) << (( 2*32+ 26) & 0x1f)), __enabled, false); } });


 if (!vcpu->kvm->arch.bus_lock_detection_enabled)
  exec_control &= ~((((1UL))) << (( 2*32+ 30) & 0x1f));

 return exec_control;
}



static void init_vmcs(struct vcpu_vmx *vmx)
{
 if (nested)
  nested_vmx_set_vmcs_shadowing_bitmap();

 if (cpu_has_vmx_msr_bitmap())
  vmcs_write64(MSR_BITMAP, __phys_addr_nodebug((unsigned long)(vmx->vmcs01.msr_bitmap)));

 vmcs_write64(VMCS_LINK_POINTER, (~(gpa_t)0));


 pin_controls_set(vmx, vmx_pin_based_exec_ctrl(vmx));

 exec_controls_set(vmx, vmx_exec_control(vmx));

 if (cpu_has_secondary_exec_ctrls())
  secondary_exec_controls_set(vmx, vmx_secondary_exec_control(vmx));

 if (kvm_vcpu_apicv_active(&vmx->vcpu)) {
  vmcs_write64(EOI_EXIT_BITMAP0, 0);
  vmcs_write64(EOI_EXIT_BITMAP1, 0);
  vmcs_write64(EOI_EXIT_BITMAP2, 0);
  vmcs_write64(EOI_EXIT_BITMAP3, 0);

  vmcs_write16(GUEST_INTR_STATUS, 0);

  vmcs_write16(POSTED_INTR_NV, 0xf2);
  vmcs_write64(POSTED_INTR_DESC_ADDR, __phys_addr_nodebug((unsigned long)((&vmx->pi_desc))));
 }

 if (!kvm_pause_in_guest(vmx->vcpu.kvm)) {
  vmcs_write32(PLE_GAP, ple_gap);
  vmx->ple_window = ple_window;
  vmx->ple_window_dirty = true;
 }

 vmcs_write32(PAGE_FAULT_ERROR_CODE_MASK, 0);
 vmcs_write32(PAGE_FAULT_ERROR_CODE_MATCH, 0);
 vmcs_write32(CR3_TARGET_COUNT, 0);

 vmcs_write16(HOST_FS_SELECTOR, 0);
 vmcs_write16(HOST_GS_SELECTOR, 0);
 vmx_set_constant_host_state(vmx);
 vmcs_writel(HOST_FS_BASE, 0);
 vmcs_writel(HOST_GS_BASE, 0);

 if (cpu_has_vmx_vmfunc())
  vmcs_write64(VM_FUNCTION_CONTROL, 0);

 vmcs_write32(VM_EXIT_MSR_STORE_COUNT, 0);
 vmcs_write32(VM_EXIT_MSR_LOAD_COUNT, 0);
 vmcs_write64(VM_EXIT_MSR_LOAD_ADDR, __phys_addr_nodebug((unsigned long)(vmx->msr_autoload.host.val)));
 vmcs_write32(VM_ENTRY_MSR_LOAD_COUNT, 0);
 vmcs_write64(VM_ENTRY_MSR_LOAD_ADDR, __phys_addr_nodebug((unsigned long)(vmx->msr_autoload.guest.val)));

 if (vmcs_config.vmentry_ctrl & 0x00004000)
  vmcs_write64(GUEST_IA32_PAT, vmx->vcpu.arch.pat);

 vm_exit_controls_set(vmx, vmx_vmexit_ctrl());


 vm_entry_controls_set(vmx, vmx_vmentry_ctrl());

 vmx->vcpu.arch.cr0_guest_owned_bits = (((1UL)) << (3));
 vmcs_writel(CR0_GUEST_HOST_MASK, ~vmx->vcpu.arch.cr0_guest_owned_bits);

 set_cr4_guest_host_mask(vmx);

 if (vmx->vpid != 0)
  vmcs_write16(VIRTUAL_PROCESSOR_ID, vmx->vpid);

 if (cpu_has_vmx_xsaves())
  vmcs_write64(XSS_EXIT_BITMAP, 0);

 if (enable_pml) {
  vmcs_write64(PML_ADDRESS, ((dma_addr_t)(unsigned long)((vmx->pml_pg) - ((struct page *)vmemmap_base)) << 12));
  vmcs_write16(GUEST_PML_INDEX, 512 - 1);
 }

 vmx_write_encls_bitmap(&vmx->vcpu, ((void *)0));

 if (vmx_pt_mode_is_host_guest()) {
  memset(&vmx->pt_desc, 0, sizeof(vmx->pt_desc));

  vmx->pt_desc.guest.output_mask = 0x7F;
  vmcs_write64(GUEST_IA32_RTIT_CTL, 0);
 }

 vmcs_write32(GUEST_SYSENTER_CS, 0);
 vmcs_writel(GUEST_SYSENTER_ESP, 0);
 vmcs_writel(GUEST_SYSENTER_EIP, 0);
 vmcs_write64(GUEST_IA32_DEBUGCTL, 0);

 if (cpu_has_vmx_tpr_shadow()) {
  vmcs_write64(VIRTUAL_APIC_PAGE_ADDR, 0);
  if (cpu_need_tpr_shadow(&vmx->vcpu))
   vmcs_write64(VIRTUAL_APIC_PAGE_ADDR,
         __phys_addr_nodebug((unsigned long)(vmx->vcpu.arch.apic->regs)));
  vmcs_write32(TPR_THRESHOLD, 0);
 }

 vmx_setup_uret_msrs(vmx);
}

static void __vmx_vcpu_reset(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 init_vmcs(vmx);

 if (nested)
  memcpy(&vmx->nested.msrs, &vmcs_config.nested, sizeof(vmx->nested.msrs));

 vcpu_setup_sgx_lepubkeyhash(vcpu);

 vmx->nested.posted_intr_nv = -1;
 vmx->nested.vmxon_ptr = (~(gpa_t)0);
 vmx->nested.current_vmptr = (~(gpa_t)0);
 vmx->nested.hv_evmcs_vmptr = (-1ULL);

 vcpu->arch.microcode_version = 0x100000000ULL;
 vmx->msr_ia32_feature_control_valid_bits = ((((1UL))) << (0));





 vmx->pi_desc.nv = 0xf2;
 vmx->pi_desc.sn = 1;
}

static void vmx_vcpu_reset(struct kvm_vcpu *vcpu, bool init_event)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (!init_event)
  __vmx_vcpu_reset(vcpu);

 vmx->rmode.vm86_active = 0;
 vmx->spec_ctrl = 0;

 vmx->msr_ia32_umwait_control = 0;

 vmx->hv_deadline_tsc = -1;
 kvm_set_cr8(vcpu, 0);

 vmx_segment_cache_clear(vmx);
 kvm_register_mark_available(vcpu, VCPU_EXREG_SEGMENTS);

 seg_setup(VCPU_SREG_CS);
 vmcs_write16(GUEST_CS_SELECTOR, 0xf000);
 vmcs_writel(GUEST_CS_BASE, 0xffff0000ul);

 seg_setup(VCPU_SREG_DS);
 seg_setup(VCPU_SREG_ES);
 seg_setup(VCPU_SREG_FS);
 seg_setup(VCPU_SREG_GS);
 seg_setup(VCPU_SREG_SS);

 vmcs_write16(GUEST_TR_SELECTOR, 0);
 vmcs_writel(GUEST_TR_BASE, 0);
 vmcs_write32(GUEST_TR_LIMIT, 0xffff);
 vmcs_write32(GUEST_TR_AR_BYTES, 0x008b);

 vmcs_write16(GUEST_LDTR_SELECTOR, 0);
 vmcs_writel(GUEST_LDTR_BASE, 0);
 vmcs_write32(GUEST_LDTR_LIMIT, 0xffff);
 vmcs_write32(GUEST_LDTR_AR_BYTES, 0x00082);

 vmcs_writel(GUEST_GDTR_BASE, 0);
 vmcs_write32(GUEST_GDTR_LIMIT, 0xffff);

 vmcs_writel(GUEST_IDTR_BASE, 0);
 vmcs_write32(GUEST_IDTR_LIMIT, 0xffff);

 vmcs_write32(GUEST_ACTIVITY_STATE, 0);
 vmcs_write32(GUEST_INTERRUPTIBILITY_INFO, 0);
 vmcs_writel(GUEST_PENDING_DBG_EXCEPTIONS, 0);
 if (kvm_mpx_supported())
  vmcs_write64(GUEST_BNDCFGS, 0);

 vmcs_write32(VM_ENTRY_INTR_INFO_FIELD, 0);

 kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_890(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(17) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(17) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_890(); } while (0); (unsigned)(((17) + 8) | (((((1UL))) << (9)) | ((((1UL))) << (8)))); }), vcpu);

 vpid_sync_context(vmx->vpid);
}

static void vmx_enable_irq_window(struct kvm_vcpu *vcpu)
{
 exec_controls_setbit(to_vmx(vcpu), ((((1UL))) << (( 1*32+ 2) & 0x1f)));
}

static void vmx_enable_nmi_window(struct kvm_vcpu *vcpu)
{
 if (!enable_vnmi ||
     vmcs_read32(GUEST_INTERRUPTIBILITY_INFO) & 0x00000001) {
  vmx_enable_irq_window(vcpu);
  return;
 }

 exec_controls_setbit(to_vmx(vcpu), ((((1UL))) << (( 1*32+ 22) & 0x1f)));
}

static void vmx_inject_irq(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 uint32_t intr;
 int irq = vcpu->arch.interrupt.nr;

 trace_kvm_inj_virq(irq);

 ++vcpu->stat.irq_injections;
 if (vmx->rmode.vm86_active) {
  int inc_eip = 0;
  if (vcpu->arch.interrupt.soft)
   inc_eip = vcpu->arch.event_exit_inst_len;
  kvm_inject_realmode_interrupt(vcpu, irq, inc_eip);
  return;
 }
 intr = irq | 0x80000000;
 if (vcpu->arch.interrupt.soft) {
  intr |= (4 << 8);
  vmcs_write32(VM_ENTRY_INSTRUCTION_LEN,
        vmx->vcpu.arch.event_exit_inst_len);
 } else
  intr |= (0 << 8);
 vmcs_write32(VM_ENTRY_INTR_INFO_FIELD, intr);

 vmx_clear_hlt(vcpu);
}

static void vmx_inject_nmi(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (!enable_vnmi) {
# 4527 "arch/x86/kvm/vmx/vmx.c"
  vmx->loaded_vmcs->soft_vnmi_blocked = 1;
  vmx->loaded_vmcs->vnmi_blocked_time = 0;
 }

 ++vcpu->stat.nmi_injections;
 vmx->loaded_vmcs->nmi_known_unmasked = false;

 if (vmx->rmode.vm86_active) {
  kvm_inject_realmode_interrupt(vcpu, 0x02, 0);
  return;
 }

 vmcs_write32(VM_ENTRY_INTR_INFO_FIELD,
   (2 << 8) | 0x80000000 | 0x02);

 vmx_clear_hlt(vcpu);
}

bool vmx_get_nmi_mask(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 bool masked;

 if (!enable_vnmi)
  return vmx->loaded_vmcs->soft_vnmi_blocked;
 if (vmx->loaded_vmcs->nmi_known_unmasked)
  return false;
 masked = vmcs_read32(GUEST_INTERRUPTIBILITY_INFO) & 0x00000008;
 vmx->loaded_vmcs->nmi_known_unmasked = !masked;
 return masked;
}

void vmx_set_nmi_mask(struct kvm_vcpu *vcpu, bool masked)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (!enable_vnmi) {
  if (vmx->loaded_vmcs->soft_vnmi_blocked != masked) {
   vmx->loaded_vmcs->soft_vnmi_blocked = masked;
   vmx->loaded_vmcs->vnmi_blocked_time = 0;
  }
 } else {
  vmx->loaded_vmcs->nmi_known_unmasked = !masked;
  if (masked)
   vmcs_set_bits(GUEST_INTERRUPTIBILITY_INFO,
          0x00000008);
  else
   vmcs_clear_bits(GUEST_INTERRUPTIBILITY_INFO,
     0x00000008);
 }
}

bool vmx_nmi_blocked(struct kvm_vcpu *vcpu)
{
 if (is_guest_mode(vcpu) && nested_exit_on_nmi(vcpu))
  return false;

 if (!enable_vnmi && to_vmx(vcpu)->loaded_vmcs->soft_vnmi_blocked)
  return true;

 return (vmcs_read32(GUEST_INTERRUPTIBILITY_INFO) &
  (0x00000002 | 0x00000001 |
   0x00000008));
}

static int vmx_nmi_allowed(struct kvm_vcpu *vcpu, bool for_injection)
{
 if (to_vmx(vcpu)->nested.nested_run_pending)
  return -16;


 if (for_injection && is_guest_mode(vcpu) && nested_exit_on_nmi(vcpu))
  return -16;

 return !vmx_nmi_blocked(vcpu);
}

bool vmx_interrupt_blocked(struct kvm_vcpu *vcpu)
{
 if (is_guest_mode(vcpu) && nested_exit_on_intr(vcpu))
  return false;

 return !(vmx_get_rflags(vcpu) & (((1UL)) << (9))) ||
        (vmcs_read32(GUEST_INTERRUPTIBILITY_INFO) &
  (0x00000001 | 0x00000002));
}

static int vmx_interrupt_allowed(struct kvm_vcpu *vcpu, bool for_injection)
{
 if (to_vmx(vcpu)->nested.nested_run_pending)
  return -16;





 if (for_injection && is_guest_mode(vcpu) && nested_exit_on_intr(vcpu))
  return -16;

 return !vmx_interrupt_blocked(vcpu);
}

static int vmx_set_tss_addr(struct kvm *kvm, unsigned int addr)
{
 void *ret;

 if (enable_unrestricted_guest)
  return 0;

 mutex_lock_nested(&kvm->slots_lock, 0);
 ret = __x86_set_memory_region(kvm, ((((short)(((unsigned short)~0U) >> 1)) - 3) + 0), addr,
          ((1UL) << 12) * 3);
 mutex_unlock(&kvm->slots_lock);

 if (IS_ERR(ret))
  return PTR_ERR(ret);

 to_kvm_vmx(kvm)->tss_addr = addr;

 return init_rmode_tss(kvm, ret);
}

static int vmx_set_identity_map_addr(struct kvm *kvm, u64 ident_addr)
{
 to_kvm_vmx(kvm)->ept_identity_map_addr = ident_addr;
 return 0;
}

static bool rmode_exception(struct kvm_vcpu *vcpu, int vec)
{
 switch (vec) {
 case 3:




  to_vmx(vcpu)->vcpu.arch.event_exit_inst_len =
   vmcs_read32(VM_EXIT_INSTRUCTION_LEN);
  if (vcpu->guest_debug & 0x00010000)
   return false;
  __attribute__((__fallthrough__));
 case 1:
  return !(vcpu->guest_debug &
   (0x00000002 | 0x00020000));
 case 0:
 case 4:
 case 5:
 case 6:
 case 8:
 case 12:
 case 13:
 case 16:
  return true;
 }
 return false;
}

static int handle_rmode_exception(struct kvm_vcpu *vcpu,
      int vec, u32 err_code)
{




 if (((vec == 13) || (vec == 12)) && err_code == 0) {
  if (kvm_emulate_instruction(vcpu, 0)) {
   if (vcpu->arch.halt_request) {
    vcpu->arch.halt_request = 0;
    return kvm_vcpu_halt(vcpu);
   }
   return 1;
  }
  return 0;
 }






 kvm_queue_exception(vcpu, vec);
 return 1;
}

static int handle_machine_check(struct kvm_vcpu *vcpu)
{

 return 1;
}
# 4728 "arch/x86/kvm/vmx/vmx.c"
bool vmx_guest_inject_ac(struct kvm_vcpu *vcpu)
{
 if (!(__builtin_constant_p((11*32+ 6)) && ( ((((11*32+ 6))>>5)==(0) && (1UL<<(((11*32+ 6))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((11*32+ 6))>>5)==(1) && (1UL<<(((11*32+ 6))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((11*32+ 6))>>5)==(2) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(3) && (1UL<<(((11*32+ 6))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((11*32+ 6))>>5)==(4) && (1UL<<(((11*32+ 6))&31) & (0) )) || ((((11*32+ 6))>>5)==(5) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(6) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(7) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(8) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(9) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(10) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(11) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(12) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(13) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(14) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(15) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(16) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(17) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(18) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((((11*32+ 6))>>5)==(19) && (1UL<<(((11*32+ 6))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((11*32+ 6), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  return true;

 return vmx_get_cpl(vcpu) == 3 && kvm_read_cr0_bits(vcpu, (((1UL)) << (18))) &&
        (kvm_get_rflags(vcpu) & (((1UL)) << (18)));
}

static int handle_exception_nmi(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct kvm_run *kvm_run = vcpu->run;
 u32 intr_info, ex_no, error_code;
 unsigned long cr2, dr6;
 u32 vect_info;

 vect_info = vmx->idt_vectoring_info;
 intr_info = vmx_get_intr_info(vcpu);

 if (is_machine_check(intr_info) || is_nmi(intr_info))
  return 1;

 if (is_invalid_opcode(intr_info))
  return handle_ud(vcpu);

 error_code = 0;
 if (intr_info & 0x800)
  error_code = vmcs_read32(VM_EXIT_INTR_ERROR_CODE);

 if (!vmx->rmode.vm86_active && is_gp_fault(intr_info)) {
  ({ int __ret_warn_on = !!(!enable_vmware_backdoor); __builtin_expect(!!(__ret_warn_on), 0); });






  if (error_code) {
   kvm_queue_exception_e(vcpu, 13, error_code);
   return 1;
  }
  return kvm_emulate_instruction(vcpu, (1 << 5));
 }






 if ((vect_info & 0x80000000) &&
     !(is_page_fault(intr_info) && !(error_code & (1U << 3)))) {
  vcpu->run->exit_reason = 17;
  vcpu->run->internal.suberror = 2;
  vcpu->run->internal.ndata = 4;
  vcpu->run->internal.data[0] = vect_info;
  vcpu->run->internal.data[1] = intr_info;
  vcpu->run->internal.data[2] = error_code;
  vcpu->run->internal.data[3] = vcpu->arch.last_vmentry_cpu;
  return 0;
 }

 if (is_page_fault(intr_info)) {
  cr2 = vmx_get_exit_qual(vcpu);
  if (enable_ept && !vcpu->arch.apf.host_apf_flags) {




   ({ int __ret_warn_on = !!(!allow_smaller_maxphyaddr); __builtin_expect(!!(__ret_warn_on), 0); });
   kvm_fixup_and_inject_pf_error(vcpu, cr2, error_code);
   return 1;
  } else
   return kvm_handle_page_fault(vcpu, error_code, cr2, ((void *)0), 0);
 }

 ex_no = intr_info & 0xff;

 if (vmx->rmode.vm86_active && rmode_exception(vcpu, ex_no))
  return handle_rmode_exception(vcpu, ex_no, error_code);

 switch (ex_no) {
 case 1:
  dr6 = vmx_get_exit_qual(vcpu);
  if (!(vcpu->guest_debug &
        (0x00000002 | 0x00020000))) {
   if (is_icebp(intr_info))
    ({ int __ret_warn_on = !!(!skip_emulated_instruction(vcpu)); __builtin_expect(!!(__ret_warn_on), 0); });

   kvm_queue_exception_p(vcpu, 1, dr6);
   return 1;
  }
  kvm_run->debug.arch.dr6 = dr6 | 0xffff0ff0;
  kvm_run->debug.arch.dr7 = vmcs_readl(GUEST_DR7);
  __attribute__((__fallthrough__));
 case 3:





  vmx->vcpu.arch.event_exit_inst_len =
   vmcs_read32(VM_EXIT_INSTRUCTION_LEN);
  kvm_run->exit_reason = 4;
  kvm_run->debug.arch.pc = kvm_get_linear_rip(vcpu);
  kvm_run->debug.arch.exception = ex_no;
  break;
 case 17:
  if (vmx_guest_inject_ac(vcpu)) {
   kvm_queue_exception_e(vcpu, 17, error_code);
   return 1;
  }






  if (handle_guest_split_lock(kvm_rip_read(vcpu)))
   return 1;
  __attribute__((__fallthrough__));
 default:
  kvm_run->exit_reason = 1;
  kvm_run->ex.exception = ex_no;
  kvm_run->ex.error_code = error_code;
  break;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int handle_external_interrupt(struct kvm_vcpu *vcpu)
{
 ++vcpu->stat.irq_exits;
 return 1;
}

static int handle_triple_fault(struct kvm_vcpu *vcpu)
{
 vcpu->run->exit_reason = 8;
 vcpu->mmio_needed = 0;
 return 0;
}

static int handle_io(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification;
 int size, in, string;
 unsigned port;

 exit_qualification = vmx_get_exit_qual(vcpu);
 string = (exit_qualification & 16) != 0;

 ++vcpu->stat.io_exits;

 if (string)
  return kvm_emulate_instruction(vcpu, 0);

 port = exit_qualification >> 16;
 size = (exit_qualification & 7) + 1;
 in = (exit_qualification & 8) != 0;

 return kvm_fast_pio(vcpu, size, port, in);
}

static void
vmx_patch_hypercall(struct kvm_vcpu *vcpu, unsigned char *hypercall)
{



 hypercall[0] = 0x0f;
 hypercall[1] = 0x01;
 hypercall[2] = 0xc1;
}


static int handle_set_cr0(struct kvm_vcpu *vcpu, unsigned long val)
{
 if (is_guest_mode(vcpu)) {
  struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
  unsigned long orig_val = val;
# 4918 "arch/x86/kvm/vmx/vmx.c"
  val = (val & ~vmcs12->cr0_guest_host_mask) |
   (vmcs12->guest_cr0 & vmcs12->cr0_guest_host_mask);

  if (!nested_guest_cr0_valid(vcpu, val))
   return 1;

  if (kvm_set_cr0(vcpu, val))
   return 1;
  vmcs_writel(CR0_READ_SHADOW, orig_val);
  return 0;
 } else {
  if (to_vmx(vcpu)->nested.vmxon &&
      !nested_host_cr0_valid(vcpu, val))
   return 1;

  return kvm_set_cr0(vcpu, val);
 }
}

static int handle_set_cr4(struct kvm_vcpu *vcpu, unsigned long val)
{
 if (is_guest_mode(vcpu)) {
  struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
  unsigned long orig_val = val;


  val = (val & ~vmcs12->cr4_guest_host_mask) |
   (vmcs12->guest_cr4 & vmcs12->cr4_guest_host_mask);
  if (kvm_set_cr4(vcpu, val))
   return 1;
  vmcs_writel(CR4_READ_SHADOW, orig_val);
  return 0;
 } else
  return kvm_set_cr4(vcpu, val);
}

static int handle_desc(struct kvm_vcpu *vcpu)
{
 ({ int __ret_warn_on = !!(!(vcpu->arch.cr4 & (((1UL)) << (11)))); __builtin_expect(!!(__ret_warn_on), 0); });
 return kvm_emulate_instruction(vcpu, 0);
}

static int handle_cr(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification, val;
 int cr;
 int reg;
 int err;
 int ret;

 exit_qualification = vmx_get_exit_qual(vcpu);
 cr = exit_qualification & 15;
 reg = (exit_qualification >> 8) & 15;
 switch ((exit_qualification >> 4) & 3) {
 case 0:
  val = kvm_register_read(vcpu, reg);
  trace_kvm_cr(1, cr, val);
  switch (cr) {
  case 0:
   err = handle_set_cr0(vcpu, val);
   return kvm_complete_insn_gp(vcpu, err);
  case 3:
   ({ int __ret_warn_on = !!(enable_unrestricted_guest); __builtin_expect(!!(__ret_warn_on), 0); });

   err = kvm_set_cr3(vcpu, val);
   return kvm_complete_insn_gp(vcpu, err);
  case 4:
   err = handle_set_cr4(vcpu, val);
   return kvm_complete_insn_gp(vcpu, err);
  case 8: {
    u8 cr8_prev = kvm_get_cr8(vcpu);
    u8 cr8 = (u8)val;
    err = kvm_set_cr8(vcpu, cr8);
    ret = kvm_complete_insn_gp(vcpu, err);
    if (lapic_in_kernel(vcpu))
     return ret;
    if (cr8_prev <= cr8)
     return ret;





    vcpu->run->exit_reason = 11;
    return 0;
   }
  }
  break;
 case 2:
  ({ int __ret = (1); if (({ int __ret_warn_on = !!(__ret && !(vcpu->kvm)->vm_bugged); ({ if (0) ({ do {} while (0); _printk("Guest always owns CR0.TS"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); })) kvm_vm_bugged(vcpu->kvm); __builtin_expect(!!(__ret), 0); });
  return -5;
 case 1:
  switch (cr) {
  case 3:
   ({ int __ret_warn_on = !!(enable_unrestricted_guest); __builtin_expect(!!(__ret_warn_on), 0); });

   val = kvm_read_cr3(vcpu);
   kvm_register_write(vcpu, reg, val);
   trace_kvm_cr(0, cr, val);
   return kvm_skip_emulated_instruction(vcpu);
  case 8:
   val = kvm_get_cr8(vcpu);
   kvm_register_write(vcpu, reg, val);
   trace_kvm_cr(0, cr, val);
   return kvm_skip_emulated_instruction(vcpu);
  }
  break;
 case 3:
  val = (exit_qualification >> 16) & 0x0f;
  trace_kvm_cr(1, 0, (kvm_read_cr0(vcpu) & ~0xful) | val);
  kvm_lmsw(vcpu, val);

  return kvm_skip_emulated_instruction(vcpu);
 default:
  break;
 }
 vcpu->run->exit_reason = 0;
 ({ if (0) ({ do {} while (0); _printk("\001" "3" "kvm [%i]: " "vcpu%i, guest rIP: 0x%lx " "unhandled control register: op %d cr %d\n", task_tgid_nr(get_current()), (vcpu)->vcpu_id, kvm_rip_read(vcpu), (int)(exit_qualification >> 4) & 3, cr); }); 0; });

 return 0;
}

static int handle_dr(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification;
 int dr, dr7, reg;
 int err = 1;

 exit_qualification = vmx_get_exit_qual(vcpu);
 dr = exit_qualification & 0x7;


 if (!kvm_require_dr(vcpu, dr))
  return 1;

 if (kvm_x86_ops.get_cpl(vcpu) > 0)
  goto out;

 dr7 = vmcs_readl(GUEST_DR7);
 if (dr7 & (1 << 13)) {





  if (vcpu->guest_debug & 0x00020000) {
   vcpu->run->debug.arch.dr6 = (1 << 13) | 0xffff0ff0;
   vcpu->run->debug.arch.dr7 = dr7;
   vcpu->run->debug.arch.pc = kvm_get_linear_rip(vcpu);
   vcpu->run->debug.arch.exception = 1;
   vcpu->run->exit_reason = 4;
   return 0;
  } else {
   kvm_queue_exception_p(vcpu, 1, (1 << 13));
   return 1;
  }
 }

 if (vcpu->guest_debug == 0) {
  exec_controls_clearbit(to_vmx(vcpu), ((((1UL))) << (( 1*32+ 23) & 0x1f)));






  vcpu->arch.switch_db_regs |= KVM_DEBUGREG_WONT_EXIT;
  return 1;
 }

 reg = (((exit_qualification) >> 8) & 0xf);
 if (exit_qualification & (1 << 4)) {
  unsigned long val;

  kvm_get_dr(vcpu, dr, &val);
  kvm_register_write(vcpu, reg, val);
  err = 0;
 } else {
  err = kvm_set_dr(vcpu, dr, kvm_register_read(vcpu, reg));
 }

out:
 return kvm_complete_insn_gp(vcpu, err);
}

static void vmx_sync_dirty_debug_regs(struct kvm_vcpu *vcpu)
{
 (vcpu->arch.db[0]) = native_get_debugreg(0);
 (vcpu->arch.db[1]) = native_get_debugreg(1);
 (vcpu->arch.db[2]) = native_get_debugreg(2);
 (vcpu->arch.db[3]) = native_get_debugreg(3);
 (vcpu->arch.dr6) = native_get_debugreg(6);
 vcpu->arch.dr7 = vmcs_readl(GUEST_DR7);

 vcpu->arch.switch_db_regs &= ~KVM_DEBUGREG_WONT_EXIT;
 exec_controls_setbit(to_vmx(vcpu), ((((1UL))) << (( 1*32+ 23) & 0x1f)));





 native_set_debugreg(6, (0xFFFF0FF0));
}

static void vmx_set_dr7(struct kvm_vcpu *vcpu, unsigned long val)
{
 vmcs_writel(GUEST_DR7, val);
}

static int handle_tpr_below_threshold(struct kvm_vcpu *vcpu)
{
 kvm_apic_update_ppr(vcpu);
 return 1;
}

static int handle_interrupt_window(struct kvm_vcpu *vcpu)
{
 exec_controls_clearbit(to_vmx(vcpu), ((((1UL))) << (( 1*32+ 2) & 0x1f)));

 kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_891(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(6) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(6) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_891(); } while (0); (unsigned)(((6) + 8) | (0)); }), vcpu);

 ++vcpu->stat.irq_window_exits;
 return 1;
}

static int handle_invlpg(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification = vmx_get_exit_qual(vcpu);

 kvm_mmu_invlpg(vcpu, exit_qualification);
 return kvm_skip_emulated_instruction(vcpu);
}

static int handle_apic_access(struct kvm_vcpu *vcpu)
{
 if (__builtin_expect(!!(fasteoi), 1)) {
  unsigned long exit_qualification = vmx_get_exit_qual(vcpu);
  int access_type, offset;

  access_type = exit_qualification & 0xf000;
  offset = exit_qualification & 0xfff;





  if ((access_type == (1 << 12)) &&
      (offset == 0xB0)) {
   kvm_lapic_set_eoi(vcpu);
   return kvm_skip_emulated_instruction(vcpu);
  }
 }
 return kvm_emulate_instruction(vcpu, 0);
}

static int handle_apic_eoi_induced(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification = vmx_get_exit_qual(vcpu);
 int vector = exit_qualification & 0xff;


 kvm_apic_set_eoi_accelerated(vcpu, vector);
 return 1;
}

static int handle_apic_write(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification = vmx_get_exit_qual(vcpu);
 u32 offset = exit_qualification & 0xfff;


 kvm_apic_write_nodecode(vcpu, offset);
 return 1;
}

static int handle_task_switch(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long exit_qualification;
 bool has_error_code = false;
 u32 error_code = 0;
 u16 tss_selector;
 int reason, type, idt_v, idt_index;

 idt_v = (vmx->idt_vectoring_info & 0x80000000);
 idt_index = (vmx->idt_vectoring_info & 0xff);
 type = (vmx->idt_vectoring_info & 0x700);

 exit_qualification = vmx_get_exit_qual(vcpu);

 reason = (u32)exit_qualification >> 30;
 if (reason == TASK_SWITCH_GATE && idt_v) {
  switch (type) {
  case (2 << 8):
   vcpu->arch.nmi_injected = false;
   vmx_set_nmi_mask(vcpu, true);
   break;
  case (0 << 8):
  case (4 << 8):
   kvm_clear_interrupt_queue(vcpu);
   break;
  case (3 << 8):
   if (vmx->idt_vectoring_info &
       0x800) {
    has_error_code = true;
    error_code =
     vmcs_read32(IDT_VECTORING_ERROR_CODE);
   }
   __attribute__((__fallthrough__));
  case (6 << 8):
   kvm_clear_exception_queue(vcpu);
   break;
  default:
   break;
  }
 }
 tss_selector = exit_qualification;

 if (!idt_v || (type != (3 << 8) &&
         type != (0 << 8) &&
         type != (2 << 8)))
  ({ int __ret_warn_on = !!(!skip_emulated_instruction(vcpu)); __builtin_expect(!!(__ret_warn_on), 0); });





 return kvm_task_switch(vcpu, tss_selector,
          type == (4 << 8) ? idt_index : -1,
          reason, has_error_code, error_code);
}

static int handle_ept_violation(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification;
 gpa_t gpa;
 u64 error_code;

 exit_qualification = vmx_get_exit_qual(vcpu);







 if (!(to_vmx(vcpu)->idt_vectoring_info & 0x80000000) &&
   enable_vnmi &&
   (exit_qualification & 0x1000))
  vmcs_set_bits(GUEST_INTERRUPTIBILITY_INFO, 0x00000008);

 gpa = vmcs_read64(GUEST_PHYSICAL_ADDRESS);
 trace_kvm_page_fault(gpa, exit_qualification);


 error_code = (exit_qualification & (1 << 0))
       ? (1U << 2) : 0;

 error_code |= (exit_qualification & (1 << 1))
        ? (1U << 1) : 0;

 error_code |= (exit_qualification & (1 << 2))
        ? (1U << 4) : 0;

 error_code |= (exit_qualification &
         ((1 << 3) | (1 << 4) |
   (1 << 5)))
        ? (1U << 0) : 0;

 error_code |= (exit_qualification & (1 << 8)) != 0 ?
        (1ULL << 32) : (1ULL << 33);

 vcpu->arch.exit_qualification = exit_qualification;
# 5300 "arch/x86/kvm/vmx/vmx.c"
 if (__builtin_expect(!!(allow_smaller_maxphyaddr && kvm_vcpu_is_illegal_gpa(vcpu, gpa)), 0))
  return kvm_emulate_instruction(vcpu, 0);

 return kvm_mmu_page_fault(vcpu, gpa, error_code, ((void *)0), 0);
}

static int handle_ept_misconfig(struct kvm_vcpu *vcpu)
{
 gpa_t gpa;

 if (!vmx_can_emulate_instruction(vcpu, ((void *)0), 0))
  return 1;





 gpa = vmcs_read64(GUEST_PHYSICAL_ADDRESS);
 if (!is_guest_mode(vcpu) &&
     !kvm_io_bus_write(vcpu, KVM_FAST_MMIO_BUS, gpa, 0, ((void *)0))) {
  trace_kvm_fast_mmio(gpa);
  return kvm_skip_emulated_instruction(vcpu);
 }

 return kvm_mmu_page_fault(vcpu, gpa, (1U << 3), ((void *)0), 0);
}

static int handle_nmi_window(struct kvm_vcpu *vcpu)
{
 if (({ int __ret = (!enable_vnmi); if (({ int __ret_warn_on = !!(__ret && !(vcpu->kvm)->vm_bugged); __builtin_expect(!!(__ret_warn_on), 0); })) kvm_vm_bugged(vcpu->kvm); __builtin_expect(!!(__ret), 0); }))
  return -5;

 exec_controls_clearbit(to_vmx(vcpu), ((((1UL))) << (( 1*32+ 22) & 0x1f)));
 ++vcpu->stat.nmi_window_exits;
 kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_892(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(6) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(6) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_892(); } while (0); (unsigned)(((6) + 8) | (0)); }), vcpu);

 return 1;
}

static int handle_invalid_guest_state(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 bool intr_window_requested;
 unsigned count = 130;

 intr_window_requested = exec_controls_get(vmx) &
    ((((1UL))) << (( 1*32+ 2) & 0x1f));

 while (vmx->emulation_required && count-- != 0) {
  if (intr_window_requested && !vmx_interrupt_blocked(vcpu))
   return handle_interrupt_window(&vmx->vcpu);

  if (kvm_test_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_893(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(6) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(6) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_893(); } while (0); (unsigned)(((6) + 8) | (0)); }), vcpu))
   return 1;

  if (!kvm_emulate_instruction(vcpu, 0))
   return 0;

  if (vmx->emulation_required && !vmx->rmode.vm86_active &&
      vcpu->arch.exception.pending) {
   kvm_prepare_emulation_failure_exit(vcpu);
   return 0;
  }

  if (vcpu->arch.halt_request) {
   vcpu->arch.halt_request = 0;
   return kvm_vcpu_halt(vcpu);
  }






  if (__xfer_to_guest_mode_work_pending())
   return 1;
 }

 return 1;
}

static void grow_ple_window(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned int old = vmx->ple_window;

 vmx->ple_window = __grow_ple_window(old, ple_window,
         ple_window_grow,
         ple_window_max);

 if (vmx->ple_window != old) {
  vmx->ple_window_dirty = true;
  trace_kvm_ple_window_update(vcpu->vcpu_id,
         vmx->ple_window, old);
 }
}

static void shrink_ple_window(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned int old = vmx->ple_window;

 vmx->ple_window = __shrink_ple_window(old, ple_window,
           ple_window_shrink,
           ple_window);

 if (vmx->ple_window != old) {
  vmx->ple_window_dirty = true;
  trace_kvm_ple_window_update(vcpu->vcpu_id,
         vmx->ple_window, old);
 }
}





static int handle_pause(struct kvm_vcpu *vcpu)
{
 if (!kvm_pause_in_guest(vcpu->kvm))
  grow_ple_window(vcpu);







 kvm_vcpu_on_spin(vcpu, true);
 return kvm_skip_emulated_instruction(vcpu);
}

static int handle_monitor_trap(struct kvm_vcpu *vcpu)
{
 return 1;
}

static int handle_invpcid(struct kvm_vcpu *vcpu)
{
 u32 vmx_instruction_info;
 unsigned long type;
 gva_t gva;
 struct {
  u64 pcid;
  u64 gla;
 } operand;
 int gpr_index;

 if (!guest_cpuid_has(vcpu, ( 9*32+10))) {
  kvm_queue_exception(vcpu, 6);
  return 1;
 }

 vmx_instruction_info = vmcs_read32(VMX_INSTRUCTION_INFO);
 gpr_index = vmx_get_instr_info_reg2(vmx_instruction_info);
 type = kvm_register_read(vcpu, gpr_index);




 if (get_vmx_mem_address(vcpu, vmx_get_exit_qual(vcpu),
    vmx_instruction_info, false,
    sizeof(operand), &gva))
  return 1;

 return kvm_handle_invpcid(vcpu, type, gva);
}

static int handle_pml_full(struct kvm_vcpu *vcpu)
{
 unsigned long exit_qualification;

 trace_kvm_pml_full(vcpu->vcpu_id);

 exit_qualification = vmx_get_exit_qual(vcpu);





 if (!(to_vmx(vcpu)->idt_vectoring_info & 0x80000000) &&
   enable_vnmi &&
   (exit_qualification & 0x1000))
  vmcs_set_bits(GUEST_INTERRUPTIBILITY_INFO,
    0x00000008);





 return 1;
}

static fastpath_t handle_fastpath_preemption_timer(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (!vmx->req_immediate_exit &&
     !__builtin_expect(!!(vmx->loaded_vmcs->hv_timer_soft_disabled), 0)) {
  kvm_lapic_expired_hv_timer(vcpu);
  return EXIT_FASTPATH_REENTER_GUEST;
 }

 return EXIT_FASTPATH_NONE;
}

static int handle_preemption_timer(struct kvm_vcpu *vcpu)
{
 handle_fastpath_preemption_timer(vcpu);
 return 1;
}





static int handle_vmx_instruction(struct kvm_vcpu *vcpu)
{
 kvm_queue_exception(vcpu, 6);
 return 1;
}


static int handle_encls(struct kvm_vcpu *vcpu)
{





 kvm_queue_exception(vcpu, 6);
 return 1;
}


static int handle_bus_lock_vmexit(struct kvm_vcpu *vcpu)
{





 to_vmx(vcpu)->exit_reason.bus_lock_detected = true;
 return 1;
}






static int (*kvm_vmx_exit_handlers[])(struct kvm_vcpu *vcpu) = {
 [0] = handle_exception_nmi,
 [1] = handle_external_interrupt,
 [2] = handle_triple_fault,
 [8] = handle_nmi_window,
 [30] = handle_io,
 [28] = handle_cr,
 [29] = handle_dr,
 [10] = kvm_emulate_cpuid,
 [31] = kvm_emulate_rdmsr,
 [32] = kvm_emulate_wrmsr,
 [7] = handle_interrupt_window,
 [12] = kvm_emulate_halt,
 [13] = kvm_emulate_invd,
 [14] = handle_invlpg,
 [15] = kvm_emulate_rdpmc,
 [18] = kvm_emulate_hypercall,
 [19] = handle_vmx_instruction,
 [20] = handle_vmx_instruction,
 [21] = handle_vmx_instruction,
 [22] = handle_vmx_instruction,
 [23] = handle_vmx_instruction,
 [24] = handle_vmx_instruction,
 [25] = handle_vmx_instruction,
 [26] = handle_vmx_instruction,
 [27] = handle_vmx_instruction,
 [43] = handle_tpr_below_threshold,
 [44] = handle_apic_access,
 [56] = handle_apic_write,
 [45] = handle_apic_eoi_induced,
 [54] = kvm_emulate_wbinvd,
 [55] = kvm_emulate_xsetbv,
 [9] = handle_task_switch,
 [41] = handle_machine_check,
 [46] = handle_desc,
 [47] = handle_desc,
 [48] = handle_ept_violation,
 [49] = handle_ept_misconfig,
 [40] = handle_pause,
 [36] = kvm_emulate_mwait,
 [37] = handle_monitor_trap,
 [39] = kvm_emulate_monitor,
 [50] = handle_vmx_instruction,
 [53] = handle_vmx_instruction,
 [57] = kvm_handle_invalid_op,
 [61] = kvm_handle_invalid_op,
 [62] = handle_pml_full,
 [58] = handle_invpcid,
 [59] = handle_vmx_instruction,
 [52] = handle_preemption_timer,
 [60] = handle_encls,
 [74] = handle_bus_lock_vmexit,
};

static const int kvm_vmx_max_exit_handlers =
 (sizeof(kvm_vmx_exit_handlers) / sizeof((kvm_vmx_exit_handlers)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((kvm_vmx_exit_handlers)), typeof(&(kvm_vmx_exit_handlers)[0])))); }))));

static void vmx_get_exit_info(struct kvm_vcpu *vcpu, u32 *reason,
         u64 *info1, u64 *info2,
         u32 *intr_info, u32 *error_code)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 *reason = vmx->exit_reason.full;
 *info1 = vmx_get_exit_qual(vcpu);
 if (!(vmx->exit_reason.failed_vmentry)) {
  *info2 = vmx->idt_vectoring_info;
  *intr_info = vmx_get_intr_info(vcpu);
  if (is_exception_with_error_code(*intr_info))
   *error_code = vmcs_read32(VM_EXIT_INTR_ERROR_CODE);
  else
   *error_code = 0;
 } else {
  *info2 = 0;
  *intr_info = 0;
  *error_code = 0;
 }
}

static void vmx_destroy_pml_buffer(struct vcpu_vmx *vmx)
{
 if (vmx->pml_pg) {
  __free_pages((vmx->pml_pg), 0);
  vmx->pml_pg = ((void *)0);
 }
}

static void vmx_flush_pml_buffer(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 u64 *pml_buf;
 u16 pml_idx;

 pml_idx = vmcs_read16(GUEST_PML_INDEX);


 if (pml_idx == (512 - 1))
  return;


 if (pml_idx >= 512)
  pml_idx = 0;
 else
  pml_idx++;

 pml_buf = lowmem_page_address(vmx->pml_pg);
 for (; pml_idx < 512; pml_idx++) {
  u64 gpa;

  gpa = pml_buf[pml_idx];
  ({ int __ret_warn_on = !!(gpa & (((1UL) << 12) - 1)); __builtin_expect(!!(__ret_warn_on), 0); });
  kvm_vcpu_mark_page_dirty(vcpu, gpa >> 12);
 }


 vmcs_write16(GUEST_PML_INDEX, 512 - 1);
}

static void vmx_dump_sel(char *name, uint32_t sel)
{
 ({ do {} while (0); _printk("\001" "3" "%s sel=0x%04x, attr=0x%05x, limit=0x%08x, base=0x%016lx\n", name, vmcs_read16(sel), vmcs_read32(sel + GUEST_ES_AR_BYTES - GUEST_ES_SELECTOR), vmcs_read32(sel + GUEST_ES_LIMIT - GUEST_ES_SELECTOR), vmcs_readl(sel + GUEST_ES_BASE - GUEST_ES_SELECTOR)); });




}

static void vmx_dump_dtsel(char *name, uint32_t limit)
{
 ({ do {} while (0); _printk("\001" "3" "%s                           limit=0x%08x, base=0x%016lx\n", name, vmcs_read32(limit), vmcs_readl(limit + GUEST_GDTR_BASE - GUEST_GDTR_LIMIT)); });


}

static void vmx_dump_msrs(char *name, struct vmx_msrs *m)
{
 unsigned int i;
 struct vmx_msr_entry *e;

 ({ do {} while (0); _printk("\001" "3" "MSR %s:\n", name); });
 for (i = 0, e = m->val; i < m->nr; ++i, ++e)
  ({ do {} while (0); _printk("\001" "3" "  %2d: msr=0x%08x value=0x%016llx\n", i, e->index, e->value); });
}

void dump_vmcs(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 u32 vmentry_ctl, vmexit_ctl;
 u32 cpu_based_exec_ctrl, pin_based_exec_ctrl, secondary_exec_control;
 unsigned long cr4;
 int efer_slot;

 if (!dump_invalid_vmcs) {
  ({ if (0) ({ do {} while (0); _printk("\001" "4" "set kvm_intel.dump_invalid_vmcs=1 to dump internal KVM state.\n"); }); 0; });
  return;
 }

 vmentry_ctl = vmcs_read32(VM_ENTRY_CONTROLS);
 vmexit_ctl = vmcs_read32(VM_EXIT_CONTROLS);
 cpu_based_exec_ctrl = vmcs_read32(CPU_BASED_VM_EXEC_CONTROL);
 pin_based_exec_ctrl = vmcs_read32(PIN_BASED_VM_EXEC_CONTROL);
 cr4 = vmcs_readl(GUEST_CR4);
 secondary_exec_control = 0;
 if (cpu_has_secondary_exec_ctrls())
  secondary_exec_control = vmcs_read32(SECONDARY_VM_EXEC_CONTROL);

 ({ do {} while (0); _printk("\001" "3" "VMCS %p, last attempted VM-entry on CPU %d\n", vmx->loaded_vmcs->vmcs, vcpu->arch.last_vmentry_cpu); });

 ({ do {} while (0); _printk("\001" "3" "*** Guest State ***\n"); });
 ({ do {} while (0); _printk("\001" "3" "CR0: actual=0x%016lx, shadow=0x%016lx, gh_mask=%016lx\n", vmcs_readl(GUEST_CR0), vmcs_readl(CR0_READ_SHADOW), vmcs_readl(CR0_GUEST_HOST_MASK)); });


 ({ do {} while (0); _printk("\001" "3" "CR4: actual=0x%016lx, shadow=0x%016lx, gh_mask=%016lx\n", cr4, vmcs_readl(CR4_READ_SHADOW), vmcs_readl(CR4_GUEST_HOST_MASK)); });

 ({ do {} while (0); _printk("\001" "3" "CR3 = 0x%016lx\n", vmcs_readl(GUEST_CR3)); });
 if (cpu_has_vmx_ept()) {
  ({ do {} while (0); _printk("\001" "3" "PDPTR0 = 0x%016llx  PDPTR1 = 0x%016llx\n", vmcs_read64(GUEST_PDPTR0), vmcs_read64(GUEST_PDPTR1)); });

  ({ do {} while (0); _printk("\001" "3" "PDPTR2 = 0x%016llx  PDPTR3 = 0x%016llx\n", vmcs_read64(GUEST_PDPTR2), vmcs_read64(GUEST_PDPTR3)); });

 }
 ({ do {} while (0); _printk("\001" "3" "RSP = 0x%016lx  RIP = 0x%016lx\n", vmcs_readl(GUEST_RSP), vmcs_readl(GUEST_RIP)); });

 ({ do {} while (0); _printk("\001" "3" "RFLAGS=0x%08lx         DR7 = 0x%016lx\n", vmcs_readl(GUEST_RFLAGS), vmcs_readl(GUEST_DR7)); });

 ({ do {} while (0); _printk("\001" "3" "Sysenter RSP=%016lx CS:RIP=%04x:%016lx\n", vmcs_readl(GUEST_SYSENTER_ESP), vmcs_read32(GUEST_SYSENTER_CS), vmcs_readl(GUEST_SYSENTER_EIP)); });


 vmx_dump_sel("CS:  ", GUEST_CS_SELECTOR);
 vmx_dump_sel("DS:  ", GUEST_DS_SELECTOR);
 vmx_dump_sel("SS:  ", GUEST_SS_SELECTOR);
 vmx_dump_sel("ES:  ", GUEST_ES_SELECTOR);
 vmx_dump_sel("FS:  ", GUEST_FS_SELECTOR);
 vmx_dump_sel("GS:  ", GUEST_GS_SELECTOR);
 vmx_dump_dtsel("GDTR:", GUEST_GDTR_LIMIT);
 vmx_dump_sel("LDTR:", GUEST_LDTR_SELECTOR);
 vmx_dump_dtsel("IDTR:", GUEST_IDTR_LIMIT);
 vmx_dump_sel("TR:  ", GUEST_TR_SELECTOR);
 efer_slot = vmx_find_loadstore_msr_slot(&vmx->msr_autoload.guest, 0xc0000080);
 if (vmentry_ctl & 0x00008000)
  ({ do {} while (0); _printk("\001" "3" "EFER= 0x%016llx\n", vmcs_read64(GUEST_IA32_EFER)); });
 else if (efer_slot >= 0)
  ({ do {} while (0); _printk("\001" "3" "EFER= 0x%016llx (autoload)\n", vmx->msr_autoload.guest.val[efer_slot].value); });

 else if (vmentry_ctl & 0x00000200)
  ({ do {} while (0); _printk("\001" "3" "EFER= 0x%016llx (effective)\n", vcpu->arch.efer | ((1<<10) | (1<<8))); });

 else
  ({ do {} while (0); _printk("\001" "3" "EFER= 0x%016llx (effective)\n", vcpu->arch.efer & ~((1<<10) | (1<<8))); });

 if (vmentry_ctl & 0x00004000)
  ({ do {} while (0); _printk("\001" "3" "PAT = 0x%016llx\n", vmcs_read64(GUEST_IA32_PAT)); });
 ({ do {} while (0); _printk("\001" "3" "DebugCtl = 0x%016llx  DebugExceptions = 0x%016lx\n", vmcs_read64(GUEST_IA32_DEBUGCTL), vmcs_readl(GUEST_PENDING_DBG_EXCEPTIONS)); });


 if (cpu_has_load_perf_global_ctrl() &&
     vmentry_ctl & 0x00002000)
  ({ do {} while (0); _printk("\001" "3" "PerfGlobCtl = 0x%016llx\n", vmcs_read64(GUEST_IA32_PERF_GLOBAL_CTRL)); });

 if (vmentry_ctl & 0x00010000)
  ({ do {} while (0); _printk("\001" "3" "BndCfgS = 0x%016llx\n", vmcs_read64(GUEST_BNDCFGS)); });
 ({ do {} while (0); _printk("\001" "3" "Interruptibility = %08x  ActivityState = %08x\n", vmcs_read32(GUEST_INTERRUPTIBILITY_INFO), vmcs_read32(GUEST_ACTIVITY_STATE)); });


 if (secondary_exec_control & ((((1UL))) << (( 2*32+ 9) & 0x1f)))
  ({ do {} while (0); _printk("\001" "3" "InterruptStatus = %04x\n", vmcs_read16(GUEST_INTR_STATUS)); });

 if (vmcs_read32(VM_ENTRY_MSR_LOAD_COUNT) > 0)
  vmx_dump_msrs("guest autoload", &vmx->msr_autoload.guest);
 if (vmcs_read32(VM_EXIT_MSR_STORE_COUNT) > 0)
  vmx_dump_msrs("guest autostore", &vmx->msr_autostore.guest);

 ({ do {} while (0); _printk("\001" "3" "*** Host State ***\n"); });
 ({ do {} while (0); _printk("\001" "3" "RIP = 0x%016lx  RSP = 0x%016lx\n", vmcs_readl(HOST_RIP), vmcs_readl(HOST_RSP)); });

 ({ do {} while (0); _printk("\001" "3" "CS=%04x SS=%04x DS=%04x ES=%04x FS=%04x GS=%04x TR=%04x\n", vmcs_read16(HOST_CS_SELECTOR), vmcs_read16(HOST_SS_SELECTOR), vmcs_read16(HOST_DS_SELECTOR), vmcs_read16(HOST_ES_SELECTOR), vmcs_read16(HOST_FS_SELECTOR), vmcs_read16(HOST_GS_SELECTOR), vmcs_read16(HOST_TR_SELECTOR)); });




 ({ do {} while (0); _printk("\001" "3" "FSBase=%016lx GSBase=%016lx TRBase=%016lx\n", vmcs_readl(HOST_FS_BASE), vmcs_readl(HOST_GS_BASE), vmcs_readl(HOST_TR_BASE)); });


 ({ do {} while (0); _printk("\001" "3" "GDTBase=%016lx IDTBase=%016lx\n", vmcs_readl(HOST_GDTR_BASE), vmcs_readl(HOST_IDTR_BASE)); });

 ({ do {} while (0); _printk("\001" "3" "CR0=%016lx CR3=%016lx CR4=%016lx\n", vmcs_readl(HOST_CR0), vmcs_readl(HOST_CR3), vmcs_readl(HOST_CR4)); });


 ({ do {} while (0); _printk("\001" "3" "Sysenter RSP=%016lx CS:RIP=%04x:%016lx\n", vmcs_readl(HOST_IA32_SYSENTER_ESP), vmcs_read32(HOST_IA32_SYSENTER_CS), vmcs_readl(HOST_IA32_SYSENTER_EIP)); });



 if (vmexit_ctl & 0x00200000)
  ({ do {} while (0); _printk("\001" "3" "EFER= 0x%016llx\n", vmcs_read64(HOST_IA32_EFER)); });
 if (vmexit_ctl & 0x00080000)
  ({ do {} while (0); _printk("\001" "3" "PAT = 0x%016llx\n", vmcs_read64(HOST_IA32_PAT)); });
 if (cpu_has_load_perf_global_ctrl() &&
     vmexit_ctl & 0x00001000)
  ({ do {} while (0); _printk("\001" "3" "PerfGlobCtl = 0x%016llx\n", vmcs_read64(HOST_IA32_PERF_GLOBAL_CTRL)); });

 if (vmcs_read32(VM_EXIT_MSR_LOAD_COUNT) > 0)
  vmx_dump_msrs("host autoload", &vmx->msr_autoload.host);

 ({ do {} while (0); _printk("\001" "3" "*** Control State ***\n"); });
 ({ do {} while (0); _printk("\001" "3" "PinBased=%08x CPUBased=%08x SecondaryExec=%08x\n", pin_based_exec_ctrl, cpu_based_exec_ctrl, secondary_exec_control); });

 ({ do {} while (0); _printk("\001" "3" "EntryControls=%08x ExitControls=%08x\n", vmentry_ctl, vmexit_ctl); });
 ({ do {} while (0); _printk("\001" "3" "ExceptionBitmap=%08x PFECmask=%08x PFECmatch=%08x\n", vmcs_read32(EXCEPTION_BITMAP), vmcs_read32(PAGE_FAULT_ERROR_CODE_MASK), vmcs_read32(PAGE_FAULT_ERROR_CODE_MATCH)); });



 ({ do {} while (0); _printk("\001" "3" "VMEntry: intr_info=%08x errcode=%08x ilen=%08x\n", vmcs_read32(VM_ENTRY_INTR_INFO_FIELD), vmcs_read32(VM_ENTRY_EXCEPTION_ERROR_CODE), vmcs_read32(VM_ENTRY_INSTRUCTION_LEN)); });



 ({ do {} while (0); _printk("\001" "3" "VMExit: intr_info=%08x errcode=%08x ilen=%08x\n", vmcs_read32(VM_EXIT_INTR_INFO), vmcs_read32(VM_EXIT_INTR_ERROR_CODE), vmcs_read32(VM_EXIT_INSTRUCTION_LEN)); });



 ({ do {} while (0); _printk("\001" "3" "        reason=%08x qualification=%016lx\n", vmcs_read32(VM_EXIT_REASON), vmcs_readl(EXIT_QUALIFICATION)); });

 ({ do {} while (0); _printk("\001" "3" "IDTVectoring: info=%08x errcode=%08x\n", vmcs_read32(IDT_VECTORING_INFO_FIELD), vmcs_read32(IDT_VECTORING_ERROR_CODE)); });


 ({ do {} while (0); _printk("\001" "3" "TSC Offset = 0x%016llx\n", vmcs_read64(TSC_OFFSET)); });
 if (secondary_exec_control & ((((1UL))) << (( 2*32+ 25) & 0x1f)))
  ({ do {} while (0); _printk("\001" "3" "TSC Multiplier = 0x%016llx\n", vmcs_read64(TSC_MULTIPLIER)); });

 if (cpu_based_exec_ctrl & ((((1UL))) << (( 1*32+ 21) & 0x1f))) {
  if (secondary_exec_control & ((((1UL))) << (( 2*32+ 9) & 0x1f))) {
   u16 status = vmcs_read16(GUEST_INTR_STATUS);
   ({ do {} while (0); _printk("\001" "3" "SVI|RVI = %02x|%02x ", status >> 8, status & 0xff); });
  }
  ({ do {} while (0); _printk("\001" "c" "TPR Threshold = 0x%02x\n", vmcs_read32(TPR_THRESHOLD)); });
  if (secondary_exec_control & ((((1UL))) << (( 2*32+ 0) & 0x1f)))
   ({ do {} while (0); _printk("\001" "3" "APIC-access addr = 0x%016llx ", vmcs_read64(APIC_ACCESS_ADDR)); });
  ({ do {} while (0); _printk("\001" "c" "virt-APIC addr = 0x%016llx\n", vmcs_read64(VIRTUAL_APIC_PAGE_ADDR)); });
 }
 if (pin_based_exec_ctrl & ((((1UL))) << (( 0*32+ 7) & 0x1f)))
  ({ do {} while (0); _printk("\001" "3" "PostedIntrVec = 0x%02x\n", vmcs_read16(POSTED_INTR_NV)); });
 if ((secondary_exec_control & ((((1UL))) << (( 2*32+ 1) & 0x1f))))
  ({ do {} while (0); _printk("\001" "3" "EPT pointer = 0x%016llx\n", vmcs_read64(EPT_POINTER)); });
 if (secondary_exec_control & ((((1UL))) << (( 2*32+ 10) & 0x1f)))
  ({ do {} while (0); _printk("\001" "3" "PLE Gap=%08x Window=%08x\n", vmcs_read32(PLE_GAP), vmcs_read32(PLE_WINDOW)); });

 if (secondary_exec_control & ((((1UL))) << (( 2*32+ 5) & 0x1f)))
  ({ do {} while (0); _printk("\001" "3" "Virtual processor ID = 0x%04x\n", vmcs_read16(VIRTUAL_PROCESSOR_ID)); });

}





static int __vmx_handle_exit(struct kvm_vcpu *vcpu, fastpath_t exit_fastpath)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 union vmx_exit_reason exit_reason = vmx->exit_reason;
 u32 vectoring_info = vmx->idt_vectoring_info;
 u16 exit_handler_index;
# 5880 "arch/x86/kvm/vmx/vmx.c"
 if (enable_pml && !is_guest_mode(vcpu))
  vmx_flush_pml_buffer(vcpu);







 if (({ int __ret = (vmx->nested.nested_run_pending); if (({ int __ret_warn_on = !!(__ret && !(vcpu->kvm)->vm_bugged); __builtin_expect(!!(__ret_warn_on), 0); })) kvm_vm_bugged(vcpu->kvm); __builtin_expect(!!(__ret), 0); }))
  return -5;


 if (vmx->emulation_required)
  return handle_invalid_guest_state(vcpu);

 if (is_guest_mode(vcpu)) {




  if (exit_reason.basic == 62)
   goto unexpected_vmexit;
# 5915 "arch/x86/kvm/vmx/vmx.c"
  nested_mark_vmcs12_pages_dirty(vcpu);

  if (nested_vmx_reflect_vmexit(vcpu))
   return 1;
 }

 if (exit_reason.failed_vmentry) {
  dump_vmcs(vcpu);
  vcpu->run->exit_reason = 9;
  vcpu->run->fail_entry.hardware_entry_failure_reason
   = exit_reason.full;
  vcpu->run->fail_entry.cpu = vcpu->arch.last_vmentry_cpu;
  return 0;
 }

 if (__builtin_expect(!!(vmx->fail), 0)) {
  dump_vmcs(vcpu);
  vcpu->run->exit_reason = 9;
  vcpu->run->fail_entry.hardware_entry_failure_reason
   = vmcs_read32(VM_INSTRUCTION_ERROR);
  vcpu->run->fail_entry.cpu = vcpu->arch.last_vmentry_cpu;
  return 0;
 }
# 5946 "arch/x86/kvm/vmx/vmx.c"
 if ((vectoring_info & 0x80000000) &&
     (exit_reason.basic != 0 &&
      exit_reason.basic != 48 &&
      exit_reason.basic != 62 &&
      exit_reason.basic != 44 &&
      exit_reason.basic != 9)) {
  int ndata = 3;

  vcpu->run->exit_reason = 17;
  vcpu->run->internal.suberror = 3;
  vcpu->run->internal.data[0] = vectoring_info;
  vcpu->run->internal.data[1] = exit_reason.full;
  vcpu->run->internal.data[2] = vcpu->arch.exit_qualification;
  if (exit_reason.basic == 49) {
   vcpu->run->internal.data[ndata++] =
    vmcs_read64(GUEST_PHYSICAL_ADDRESS);
  }
  vcpu->run->internal.data[ndata++] = vcpu->arch.last_vmentry_cpu;
  vcpu->run->internal.ndata = ndata;
  return 0;
 }

 if (__builtin_expect(!!(!enable_vnmi && vmx->loaded_vmcs->soft_vnmi_blocked), 0)) {

  if (!vmx_interrupt_blocked(vcpu)) {
   vmx->loaded_vmcs->soft_vnmi_blocked = 0;
  } else if (vmx->loaded_vmcs->vnmi_blocked_time > 1000000000LL &&
      vcpu->arch.nmi_pending) {






   ({ do {} while (0); _printk("\001" "4" "%s: Breaking out of NMI-blocked " "state on VCPU %d after 1 s timeout\n", __func__, vcpu->vcpu_id); });


   vmx->loaded_vmcs->soft_vnmi_blocked = 0;
  }
 }

 if (exit_fastpath != EXIT_FASTPATH_NONE)
  return 1;

 if (exit_reason.basic >= kvm_vmx_max_exit_handlers)
  goto unexpected_vmexit;
# 6007 "arch/x86/kvm/vmx/vmx.c"
 exit_handler_index = ({ typeof((u16)exit_reason.basic) _i = ((u16)exit_reason.basic); typeof(kvm_vmx_max_exit_handlers) _s = (kvm_vmx_max_exit_handlers); unsigned long _mask = array_index_mask_nospec(_i, _s); do { __attribute__((__noreturn__)) extern void __compiletime_assert_894(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_i) > sizeof(long)"))); if (!(!(sizeof(_i) > sizeof(long)))) __compiletime_assert_894(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_895(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(_s) > sizeof(long)"))); if (!(!(sizeof(_s) > sizeof(long)))) __compiletime_assert_895(); } while (0); (typeof(_i)) (_i & _mask); });

 if (!kvm_vmx_exit_handlers[exit_handler_index])
  goto unexpected_vmexit;

 return kvm_vmx_exit_handlers[exit_handler_index](vcpu);

unexpected_vmexit:
 ({ if (0) ({ do {} while (0); _printk("\001" "3" "kvm [%i]: " "vcpu%i, guest rIP: 0x%lx " "vmx: unexpected exit reason 0x%x\n", task_tgid_nr(get_current()), (vcpu)->vcpu_id, kvm_rip_read(vcpu), exit_reason.full); }); 0; });

 dump_vmcs(vcpu);
 vcpu->run->exit_reason = 17;
 vcpu->run->internal.suberror =
   4;
 vcpu->run->internal.ndata = 2;
 vcpu->run->internal.data[0] = exit_reason.full;
 vcpu->run->internal.data[1] = vcpu->arch.last_vmentry_cpu;
 return 0;
}

static int vmx_handle_exit(struct kvm_vcpu *vcpu, fastpath_t exit_fastpath)
{
 int ret = __vmx_handle_exit(vcpu, exit_fastpath);





 if (to_vmx(vcpu)->exit_reason.bus_lock_detected) {
  if (ret > 0)
   vcpu->run->exit_reason = 33;

  vcpu->run->flags |= (1 << 1);
  return 0;
 }
 return ret;
}
# 6055 "arch/x86/kvm/vmx/vmx.c"
static __attribute__((__noinline__)) __attribute__((no_instrument_function)) __attribute((__section__(".noinstr.text"))) __attribute__((__no_profile_instrument_function__)) void vmx_l1d_flush(struct kvm_vcpu *vcpu)
{
 int size = ((1UL) << 12) << 4;





 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&vmx_l1d_flush_cond)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&vmx_l1d_flush_cond)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&vmx_l1d_flush_cond)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&vmx_l1d_flush_cond)->key) > 0; })), 1)) {
  bool flush_l1d;






  flush_l1d = vcpu->arch.l1tf_flush_l1d;
  vcpu->arch.l1tf_flush_l1d = false;





  flush_l1d |= kvm_get_cpu_l1tf_flush_l1d();
  kvm_clear_cpu_l1tf_flush_l1d();

  if (!flush_l1d)
   return;
 }

 vcpu->stat.l1d_flush++;

 if (( __builtin_constant_p((__builtin_constant_p((18*32+28)) && ( ((((18*32+28))>>5)==(0) && (1UL<<(((18*32+28))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+28))>>5)==(1) && (1UL<<(((18*32+28))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+28))>>5)==(2) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(3) && (1UL<<(((18*32+28))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+28))>>5)==(4) && (1UL<<(((18*32+28))&31) & (0) )) || ((((18*32+28))>>5)==(5) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(6) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(7) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(8) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(9) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(10) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(11) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(12) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(13) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(14) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(15) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(16) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(17) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(18) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(19) && (1UL<<(((18*32+28))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((18*32+28), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((18*32+28)) && ( ((((18*32+28))>>5)==(0) && (1UL<<(((18*32+28))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+28))>>5)==(1) && (1UL<<(((18*32+28))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+28))>>5)==(2) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(3) && (1UL<<(((18*32+28))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+28))>>5)==(4) && (1UL<<(((18*32+28))&31) & (0) )) || ((((18*32+28))>>5)==(5) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(6) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(7) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(8) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(9) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(10) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(11) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(12) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(13) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(14) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(15) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(16) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(17) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(18) && (1UL<<(((18*32+28))&31) & 0 )) || ((((18*32+28))>>5)==(19) && (1UL<<(((18*32+28))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((18*32+28), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((18*32+28)) )) {
  __wrmsr((0x0000010b), (u32)((u64)(((((1UL))) << (0)))), (u32)((u64)(((((1UL))) << (0))) >> 32));
  return;
 }

 asm volatile(

  "xorl	%%eax, %%eax\n"
  ".Lpopulate_tlb:\n\t"
  "movzbl	(%[flush_pages], %%" "rax" "), %%ecx\n\t"
  "addl	$4096, %%eax\n\t"
  "cmpl	%%eax, %[size]\n\t"
  "jne	.Lpopulate_tlb\n\t"
  "xorl	%%eax, %%eax\n\t"
  "cpuid\n\t"

  "xorl	%%eax, %%eax\n"
  ".Lfill_cache:\n"
  "movzbl	(%[flush_pages], %%" "rax" "), %%ecx\n\t"
  "addl	$64, %%eax\n\t"
  "cmpl	%%eax, %[size]\n\t"
  "jne	.Lfill_cache\n\t"
  "lfence\n"
  :: [flush_pages] "r" (vmx_l1d_flush_pages),
      [size] "r" (size)
  : "eax", "ebx", "ecx", "edx");
}

static void vmx_update_cr8_intercept(struct kvm_vcpu *vcpu, int tpr, int irr)
{
 struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
 int tpr_threshold;

 if (is_guest_mode(vcpu) &&
  nested_cpu_has(vmcs12, ((((1UL))) << (( 1*32+ 21) & 0x1f))))
  return;

 tpr_threshold = (irr == -1 || tpr < irr) ? 0 : irr;
 if (is_guest_mode(vcpu))
  to_vmx(vcpu)->nested.l1_tpr_threshold = tpr_threshold;
 else
  vmcs_write32(TPR_THRESHOLD, tpr_threshold);
}

void vmx_set_virtual_apic_mode(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 u32 sec_exec_control;

 if (!lapic_in_kernel(vcpu))
  return;

 if (!flexpriority_enabled &&
     !cpu_has_vmx_virtualize_x2apic_mode())
  return;


 if (is_guest_mode(vcpu)) {
  vmx->nested.change_vmcs01_virtual_apic_mode = true;
  return;
 }

 sec_exec_control = secondary_exec_controls_get(vmx);
 sec_exec_control &= ~(((((1UL))) << (( 2*32+ 0) & 0x1f)) |
         ((((1UL))) << (( 2*32+ 4) & 0x1f)));

 switch (kvm_get_apic_mode(vcpu)) {
 case LAPIC_MODE_INVALID:
  ({ int __ret_warn_on = !!(true); ({ if (0) ({ do {} while (0); _printk("Invalid local APIC state"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
  break;
 case LAPIC_MODE_DISABLED:
  break;
 case LAPIC_MODE_XAPIC:
  if (flexpriority_enabled) {
   sec_exec_control |=
    ((((1UL))) << (( 2*32+ 0) & 0x1f));
   kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_896(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(17) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(17) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_896(); } while (0); (unsigned)(((17) + 8) | (((((1UL))) << (9)) | ((((1UL))) << (8)))); }), vcpu);







   kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_897(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(26) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(26) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_897(); } while (0); (unsigned)(((26) + 8) | (0)); }), vcpu);
  }
  break;
 case LAPIC_MODE_X2APIC:
  if (cpu_has_vmx_virtualize_x2apic_mode())
   sec_exec_control |=
    ((((1UL))) << (( 2*32+ 4) & 0x1f));
  break;
 }
 secondary_exec_controls_set(vmx, sec_exec_control);

 vmx_update_msr_bitmap_x2apic(vcpu);
}

static void vmx_set_apic_access_page_addr(struct kvm_vcpu *vcpu)
{
 struct page *page;


 if (is_guest_mode(vcpu)) {
  to_vmx(vcpu)->nested.reload_vmcs01_apic_access_page = true;
  return;
 }

 if (!(secondary_exec_controls_get(to_vmx(vcpu)) &
     ((((1UL))) << (( 2*32+ 0) & 0x1f))))
  return;

 page = gfn_to_page(vcpu->kvm, 0xfee00000 >> 12);
 if (is_error_page(page))
  return;

 vmcs_write64(APIC_ACCESS_ADDR, ((dma_addr_t)(unsigned long)((page) - ((struct page *)vmemmap_base)) << 12));
 vmx_flush_tlb_current(vcpu);





 put_page(page);
}

static void vmx_hwapic_isr_update(struct kvm_vcpu *vcpu, int max_isr)
{
 u16 status;
 u8 old;

 if (max_isr == -1)
  max_isr = 0;

 status = vmcs_read16(GUEST_INTR_STATUS);
 old = status >> 8;
 if (max_isr != old) {
  status &= 0xff;
  status |= max_isr << 8;
  vmcs_write16(GUEST_INTR_STATUS, status);
 }
}

static void vmx_set_rvi(int vector)
{
 u16 status;
 u8 old;

 if (vector == -1)
  vector = 0;

 status = vmcs_read16(GUEST_INTR_STATUS);
 old = (u8)status & 0xff;
 if ((u8)vector != old) {
  status &= ~0xff;
  status |= (u8)vector;
  vmcs_write16(GUEST_INTR_STATUS, status);
 }
}

static void vmx_hwapic_irr_update(struct kvm_vcpu *vcpu, int max_irr)
{
# 6257 "arch/x86/kvm/vmx/vmx.c"
 if (!is_guest_mode(vcpu))
  vmx_set_rvi(max_irr);
}

static int vmx_sync_pir_to_irr(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 int max_irr;
 bool max_irr_updated;

 if (({ int __ret = (!vcpu->arch.apicv_active); if (({ int __ret_warn_on = !!(__ret && !(vcpu->kvm)->vm_bugged); __builtin_expect(!!(__ret_warn_on), 0); })) kvm_vm_bugged(vcpu->kvm); __builtin_expect(!!(__ret), 0); }))
  return -5;

 if (pi_test_on(&vmx->pi_desc)) {
  pi_clear_on(&vmx->pi_desc);




  __asm__ __volatile__("": : :"memory");
  max_irr_updated =
   kvm_apic_update_irr(vcpu, vmx->pi_desc.pir, &max_irr);
# 6287 "arch/x86/kvm/vmx/vmx.c"
  if (is_guest_mode(vcpu) && max_irr_updated)
   kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_898(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(6) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(6) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_898(); } while (0); (unsigned)(((6) + 8) | (0)); }), vcpu);
 } else {
  max_irr = kvm_lapic_find_highest_irr(vcpu);
 }
 vmx_hwapic_irr_update(vcpu, max_irr);
 return max_irr;
}

static void vmx_load_eoi_exitmap(struct kvm_vcpu *vcpu, u64 *eoi_exit_bitmap)
{
 if (!kvm_vcpu_apicv_active(vcpu))
  return;

 vmcs_write64(EOI_EXIT_BITMAP0, eoi_exit_bitmap[0]);
 vmcs_write64(EOI_EXIT_BITMAP1, eoi_exit_bitmap[1]);
 vmcs_write64(EOI_EXIT_BITMAP2, eoi_exit_bitmap[2]);
 vmcs_write64(EOI_EXIT_BITMAP3, eoi_exit_bitmap[3]);
}

static void vmx_apicv_post_state_restore(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 pi_clear_on(&vmx->pi_desc);
 memset(vmx->pi_desc.pir, 0, sizeof(vmx->pi_desc.pir));
}

void vmx_do_interrupt_nmi_irqoff(unsigned long entry);

static void handle_interrupt_nmi_irqoff(struct kvm_vcpu *vcpu,
     unsigned long entry)
{
 kvm_before_interrupt(vcpu);
 vmx_do_interrupt_nmi_irqoff(entry);
 kvm_after_interrupt(vcpu);
}

static void handle_exception_nmi_irqoff(struct vcpu_vmx *vmx)
{
 const unsigned long nmi_entry = (unsigned long)asm_exc_nmi_noist;
 u32 intr_info = vmx_get_intr_info(&vmx->vcpu);


 if (is_page_fault(intr_info))
  vmx->vcpu.arch.apf.host_apf_flags = kvm_read_and_reset_apf_flags();

 else if (is_machine_check(intr_info))
  kvm_machine_check();

 else if (is_nmi(intr_info))
  handle_interrupt_nmi_irqoff(&vmx->vcpu, nmi_entry);
}

static void handle_external_interrupt_irqoff(struct kvm_vcpu *vcpu)
{
 u32 intr_info = vmx_get_intr_info(vcpu);
 unsigned int vector = intr_info & 0xff;
 gate_desc *desc = (gate_desc *)host_idt_base + vector;

 if (({ int __ret = (!is_external_intr(intr_info)); if (({ int __ret_warn_on = !!(__ret && !(vcpu->kvm)->vm_bugged); ({ if (0) ({ do {} while (0); _printk("KVM: unexpected VM-Exit interrupt info: 0x%x", intr_info); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); })) kvm_vm_bugged(vcpu->kvm); __builtin_expect(!!(__ret), 0); }))

  return;

 handle_interrupt_nmi_irqoff(vcpu, gate_offset(desc));
}

static void vmx_handle_exit_irqoff(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (vmx->emulation_required)
  return;

 if (vmx->exit_reason.basic == 1)
  handle_external_interrupt_irqoff(vcpu);
 else if (vmx->exit_reason.basic == 0)
  handle_exception_nmi_irqoff(vmx);
}





static bool vmx_has_emulated_msr(struct kvm *kvm, u32 index)
{
 switch (index) {
 case 0x0000009e:




  return enable_unrestricted_guest || emulate_invalid_guest_state;
 case 0x00000480 ... 0x00000491:
  return nested;
 case 0xc001011f:
 case 0xc0000104:

  return false;
 default:
  return true;
 }
}

static void vmx_recover_nmi_blocking(struct vcpu_vmx *vmx)
{
 u32 exit_intr_info;
 bool unblock_nmi;
 u8 vector;
 bool idtv_info_valid;

 idtv_info_valid = vmx->idt_vectoring_info & 0x80000000;

 if (enable_vnmi) {
  if (vmx->loaded_vmcs->nmi_known_unmasked)
   return;

  exit_intr_info = vmx_get_intr_info(&vmx->vcpu);
  unblock_nmi = (exit_intr_info & 0x1000) != 0;
  vector = exit_intr_info & 0xff;
# 6417 "arch/x86/kvm/vmx/vmx.c"
  if ((exit_intr_info & 0x80000000) && unblock_nmi &&
      vector != 8 && !idtv_info_valid)
   vmcs_set_bits(GUEST_INTERRUPTIBILITY_INFO,
          0x00000008);
  else
   vmx->loaded_vmcs->nmi_known_unmasked =
    !(vmcs_read32(GUEST_INTERRUPTIBILITY_INFO)
      & 0x00000008);
 } else if (__builtin_expect(!!(vmx->loaded_vmcs->soft_vnmi_blocked), 0))
  vmx->loaded_vmcs->vnmi_blocked_time +=
   ktime_to_ns(((ktime_get()) - (vmx->loaded_vmcs->entry_time)));

}

static void __vmx_complete_interrupts(struct kvm_vcpu *vcpu,
          u32 idt_vectoring_info,
          int instr_len_field,
          int error_code_field)
{
 u8 vector;
 int type;
 bool idtv_info_valid;

 idtv_info_valid = idt_vectoring_info & 0x80000000;

 vcpu->arch.nmi_injected = false;
 kvm_clear_exception_queue(vcpu);
 kvm_clear_interrupt_queue(vcpu);

 if (!idtv_info_valid)
  return;

 kvm_make_request(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_899(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(unsigned)(6) >= (sizeof_field(struct kvm_vcpu, requests) * 8) - KVM_REQUEST_ARCH_BASE"))); if (!(!((unsigned)(6) >= (sizeof((((struct kvm_vcpu *)0)->requests)) * 8) - 8))) __compiletime_assert_899(); } while (0); (unsigned)(((6) + 8) | (0)); }), vcpu);

 vector = idt_vectoring_info & 0xff;
 type = idt_vectoring_info & 0x700;

 switch (type) {
 case (2 << 8):
  vcpu->arch.nmi_injected = true;





  vmx_set_nmi_mask(vcpu, false);
  break;
 case (6 << 8):
  vcpu->arch.event_exit_inst_len = vmcs_read32(instr_len_field);
  __attribute__((__fallthrough__));
 case (3 << 8):
  if (idt_vectoring_info & 0x800) {
   u32 err = vmcs_read32(error_code_field);
   kvm_requeue_exception_e(vcpu, vector, err);
  } else
   kvm_requeue_exception(vcpu, vector);
  break;
 case (4 << 8):
  vcpu->arch.event_exit_inst_len = vmcs_read32(instr_len_field);
  __attribute__((__fallthrough__));
 case (0 << 8):
  kvm_queue_interrupt(vcpu, vector, type == (4 << 8));
  break;
 default:
  break;
 }
}

static void vmx_complete_interrupts(struct vcpu_vmx *vmx)
{
 __vmx_complete_interrupts(&vmx->vcpu, vmx->idt_vectoring_info,
      VM_EXIT_INSTRUCTION_LEN,
      IDT_VECTORING_ERROR_CODE);
}

static void vmx_cancel_injection(struct kvm_vcpu *vcpu)
{
 __vmx_complete_interrupts(vcpu,
      vmcs_read32(VM_ENTRY_INTR_INFO_FIELD),
      VM_ENTRY_INSTRUCTION_LEN,
      VM_ENTRY_EXCEPTION_ERROR_CODE);

 vmcs_write32(VM_ENTRY_INTR_INFO_FIELD, 0);
}

static void atomic_switch_perf_msrs(struct vcpu_vmx *vmx)
{
 int i, nr_msrs;
 struct perf_guest_switch_msr *msrs;


 msrs = perf_guest_get_msrs(&nr_msrs);
 if (!msrs)
  return;

 for (i = 0; i < nr_msrs; i++)
  if (msrs[i].host == msrs[i].guest)
   clear_atomic_switch_msr(vmx, msrs[i].msr);
  else
   add_atomic_switch_msr(vmx, msrs[i].msr, msrs[i].guest,
     msrs[i].host, false);
}

static void vmx_update_hv_timer(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 u64 tscl;
 u32 delta_tsc;

 if (vmx->req_immediate_exit) {
  vmcs_write32(VMX_PREEMPTION_TIMER_VALUE, 0);
  vmx->loaded_vmcs->hv_timer_soft_disabled = false;
 } else if (vmx->hv_deadline_tsc != -1) {
  tscl = rdtsc();
  if (vmx->hv_deadline_tsc > tscl)

   delta_tsc = (u32)((vmx->hv_deadline_tsc - tscl) >>
    cpu_preemption_timer_multi);
  else
   delta_tsc = 0;

  vmcs_write32(VMX_PREEMPTION_TIMER_VALUE, delta_tsc);
  vmx->loaded_vmcs->hv_timer_soft_disabled = false;
 } else if (!vmx->loaded_vmcs->hv_timer_soft_disabled) {
  vmcs_write32(VMX_PREEMPTION_TIMER_VALUE, -1);
  vmx->loaded_vmcs->hv_timer_soft_disabled = true;
 }
}

void __attribute__((__noinline__)) __attribute__((no_instrument_function)) __attribute((__section__(".noinstr.text"))) __attribute__((__no_profile_instrument_function__)) vmx_update_host_rsp(struct vcpu_vmx *vmx, unsigned long host_rsp)
{
 if (__builtin_expect(!!(host_rsp != vmx->loaded_vmcs->host_state.rsp), 0)) {
  vmx->loaded_vmcs->host_state.rsp = host_rsp;
  vmcs_writel(HOST_RSP, host_rsp);
 }
}

static fastpath_t vmx_exit_handlers_fastpath(struct kvm_vcpu *vcpu)
{
 switch (to_vmx(vcpu)->exit_reason.basic) {
 case 32:
  return handle_fastpath_set_msr_irqoff(vcpu);
 case 52:
  return handle_fastpath_preemption_timer(vcpu);
 default:
  return EXIT_FASTPATH_NONE;
 }
}

static __attribute__((__noinline__)) __attribute__((no_instrument_function)) __attribute((__section__(".noinstr.text"))) __attribute__((__no_profile_instrument_function__)) void vmx_vcpu_enter_exit(struct kvm_vcpu *vcpu,
     struct vcpu_vmx *vmx)
{
 kvm_guest_enter_irqoff();


 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&vmx_l1d_should_flush)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&vmx_l1d_should_flush)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&vmx_l1d_should_flush)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&vmx_l1d_should_flush)->key) > 0; })), 0))
  vmx_l1d_flush(vcpu);
 else if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&mds_user_clear)->key) > 0; })), 0))
  mds_clear_cpu_buffers();

 if (vcpu->arch.cr2 != native_read_cr2())
  native_write_cr2(vcpu->arch.cr2);

 vmx->fail = __vmx_vcpu_run(vmx, (unsigned long *)&vcpu->arch.regs,
       vmx->loaded_vmcs->launched);

 vcpu->arch.cr2 = native_read_cr2();

 kvm_guest_exit_irqoff();
}

static fastpath_t vmx_vcpu_run(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 unsigned long cr3, cr4;


 if (__builtin_expect(!!(!enable_vnmi && vmx->loaded_vmcs->soft_vnmi_blocked), 0))

  vmx->loaded_vmcs->entry_time = ktime_get();






 if (__builtin_expect(!!(vmx->emulation_required), 0)) {


  vmx->fail = is_guest_mode(vcpu);

  vmx->exit_reason.full = 33;
  vmx->exit_reason.failed_vmentry = 1;
  kvm_register_mark_available(vcpu, VCPU_EXREG_EXIT_INFO_1);
  vmx->exit_qualification = ENTRY_FAIL_DEFAULT;
  kvm_register_mark_available(vcpu, VCPU_EXREG_EXIT_INFO_2);
  vmx->exit_intr_info = 0;
  return EXIT_FASTPATH_NONE;
 }

 trace_kvm_entry(vcpu);

 if (vmx->ple_window_dirty) {
  vmx->ple_window_dirty = false;
  vmcs_write32(PLE_WINDOW, vmx->ple_window);
 }





 ({ int __ret_warn_on = !!(vmx->nested.need_vmcs12_to_shadow_sync); __builtin_expect(!!(__ret_warn_on), 0); });

 if (kvm_register_is_dirty(vcpu, VCPU_REGS_RSP))
  vmcs_writel(GUEST_RSP, vcpu->arch.regs[VCPU_REGS_RSP]);
 if (kvm_register_is_dirty(vcpu, VCPU_REGS_RIP))
  vmcs_writel(GUEST_RIP, vcpu->arch.regs[VCPU_REGS_RIP]);

 cr3 = __get_current_cr3_fast();
 if (__builtin_expect(!!(cr3 != vmx->loaded_vmcs->host_state.cr3), 0)) {
  vmcs_writel(HOST_CR3, cr3);
  vmx->loaded_vmcs->host_state.cr3 = cr3;
 }

 cr4 = cr4_read_shadow();
 if (__builtin_expect(!!(cr4 != vmx->loaded_vmcs->host_state.cr4), 0)) {
  vmcs_writel(HOST_CR4, cr4);
  vmx->loaded_vmcs->host_state.cr4 = cr4;
 }


 if (__builtin_expect(!!(vcpu->arch.switch_db_regs & KVM_DEBUGREG_WONT_EXIT), 0))
  native_set_debugreg(6, vcpu->arch.dr6);






 if (vcpu->guest_debug & 0x00000002)
  vmx_set_interrupt_shadow(vcpu, 0);

 kvm_load_guest_xsave_state(vcpu);

 pt_guest_enter(vmx);

 atomic_switch_perf_msrs(vmx);
 if (intel_pmu_lbr_is_enabled(vcpu))
  vmx_passthrough_lbr_msrs(vcpu);

 if (enable_preemption_timer)
  vmx_update_hv_timer(vcpu);

 kvm_wait_lapic_expire(vcpu);







 x86_spec_ctrl_set_guest(vmx->spec_ctrl, 0);


 vmx_vcpu_enter_exit(vcpu, vmx);
# 6698 "arch/x86/kvm/vmx/vmx.c"
 if (__builtin_expect(!!(!msr_write_intercepted(vmx, 0x00000048)), 0))
  vmx->spec_ctrl = native_read_msr(0x00000048);

 x86_spec_ctrl_restore_host(vmx->spec_ctrl, 0);


 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&enable_evmcs)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&enable_evmcs)->key) > 0; })), 0)) {
  ((struct hv_enlightened_vmcs *)({ typeof(current_vmcs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(current_vmcs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(current_vmcs)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))->hv_clean_fields |=
   0xFFFF;

  ((struct hv_enlightened_vmcs *)({ typeof(current_vmcs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(current_vmcs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(current_vmcs)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (current_vmcs)); (typeof(current_vmcs))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))->hv_vp_id = kvm_hv_get_vpindex(vcpu);
 }


 if (vmx->host_debugctlmsr)
  update_debugctlmsr(vmx->host_debugctlmsr);
# 6728 "arch/x86/kvm/vmx/vmx.c"
 vmx_register_cache_reset(vcpu);

 pt_guest_exit(vmx);

 kvm_load_host_xsave_state(vcpu);

 if (is_guest_mode(vcpu)) {




  if (vmx->nested.nested_run_pending &&
      !vmx->exit_reason.failed_vmentry)
   ++vcpu->stat.nested_run;

  vmx->nested.nested_run_pending = 0;
 }

 vmx->idt_vectoring_info = 0;

 if (__builtin_expect(!!(vmx->fail), 0)) {
  vmx->exit_reason.full = 0xdead;
  return EXIT_FASTPATH_NONE;
 }

 vmx->exit_reason.full = vmcs_read32(VM_EXIT_REASON);
 if (__builtin_expect(!!((u16)vmx->exit_reason.basic == 41), 0))
  kvm_machine_check();

 if (__builtin_expect(!!(!vmx->exit_reason.failed_vmentry), 1))
  vmx->idt_vectoring_info = vmcs_read32(IDT_VECTORING_INFO_FIELD);

 trace_kvm_exit(vcpu, 1);

 if (__builtin_expect(!!(vmx->exit_reason.failed_vmentry), 0))
  return EXIT_FASTPATH_NONE;

 vmx->loaded_vmcs->launched = 1;

 vmx_recover_nmi_blocking(vmx);
 vmx_complete_interrupts(vmx);

 if (is_guest_mode(vcpu))
  return EXIT_FASTPATH_NONE;

 return vmx_exit_handlers_fastpath(vcpu);
}

static void vmx_free_vcpu(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (enable_pml)
  vmx_destroy_pml_buffer(vmx);
 free_vpid(vmx->vpid);
 nested_vmx_free_vcpu(vcpu);
 free_loaded_vmcs(vmx->loaded_vmcs);
}

static int vmx_create_vcpu(struct kvm_vcpu *vcpu)
{
 struct vmx_uret_msr *tsx_ctrl;
 struct vcpu_vmx *vmx;
 int i, err;

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_900(void) __attribute__((__error__("BUILD_BUG_ON failed: " "offsetof(struct vcpu_vmx, vcpu) != 0"))); if (!(!(__builtin_offsetof(struct vcpu_vmx, vcpu) != 0))) __compiletime_assert_900(); } while (0);
 vmx = to_vmx(vcpu);

 err = -12;

 vmx->vpid = allocate_vpid();







 if (enable_pml) {
  vmx->pml_pg = alloc_pages((((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)) | (( gfp_t)0x400000u)) | (( gfp_t)0x100u), 0);
  if (!vmx->pml_pg)
   goto free_vpid;
 }

 for (i = 0; i < kvm_nr_uret_msrs; ++i)
  vmx->guest_uret_msrs[i].mask = -1ull;
 if ((__builtin_constant_p(( 9*32+11)) && ( (((( 9*32+11))>>5)==(0) && (1UL<<((( 9*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+11))>>5)==(1) && (1UL<<((( 9*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+11))>>5)==(2) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(3) && (1UL<<((( 9*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+11))>>5)==(4) && (1UL<<((( 9*32+11))&31) & (0) )) || (((( 9*32+11))>>5)==(5) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(6) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(7) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(8) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(9) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(10) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(11) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(12) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(13) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(14) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(15) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(16) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(17) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(18) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(19) && (1UL<<((( 9*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {





  tsx_ctrl = vmx_find_uret_msr(vmx, 0x00000122);
  if (tsx_ctrl)
   tsx_ctrl->mask = ~(u64)((((1UL))) << (1));
 }

 err = alloc_loaded_vmcs(&vmx->vmcs01);
 if (err < 0)
  goto free_pml;


 bitmap_fill(vmx->shadow_msr_intercept.read, 13);
 bitmap_fill(vmx->shadow_msr_intercept.write, 13);

 vmx_disable_intercept_for_msr(vcpu, 0x00000010, 1);

 vmx_disable_intercept_for_msr(vcpu, 0xc0000100, 3);
 vmx_disable_intercept_for_msr(vcpu, 0xc0000101, 3);
 vmx_disable_intercept_for_msr(vcpu, 0xc0000102, 3);

 vmx_disable_intercept_for_msr(vcpu, 0x00000174, 3);
 vmx_disable_intercept_for_msr(vcpu, 0x00000175, 3);
 vmx_disable_intercept_for_msr(vcpu, 0x00000176, 3);
 if (kvm_cstate_in_guest(vcpu->kvm)) {
  vmx_disable_intercept_for_msr(vcpu, 0x00000660, 1);
  vmx_disable_intercept_for_msr(vcpu, 0x000003fc, 1);
  vmx_disable_intercept_for_msr(vcpu, 0x000003fd, 1);
  vmx_disable_intercept_for_msr(vcpu, 0x000003fe, 1);
 }

 vmx->loaded_vmcs = &vmx->vmcs01;

 if (cpu_need_virtualize_apic_accesses(vcpu)) {
  err = alloc_apic_access_page(vcpu->kvm);
  if (err)
   goto free_vmcs;
 }

 if (enable_ept && !enable_unrestricted_guest) {
  err = init_rmode_identity_map(vcpu->kvm);
  if (err)
   goto free_vmcs;
 }

 return 0;

free_vmcs:
 free_loaded_vmcs(vmx->loaded_vmcs);
free_pml:
 vmx_destroy_pml_buffer(vmx);
free_vpid:
 free_vpid(vmx->vpid);
 return err;
}




static int vmx_vm_init(struct kvm *kvm)
{
 if (!ple_gap)
  kvm->arch.pause_in_guest = true;

 if ((__builtin_constant_p((20*32 + (18))) && ( ((((20*32 + (18)))>>5)==(0) && (1UL<<(((20*32 + (18)))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((20*32 + (18)))>>5)==(1) && (1UL<<(((20*32 + (18)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((20*32 + (18)))>>5)==(2) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(3) && (1UL<<(((20*32 + (18)))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((20*32 + (18)))>>5)==(4) && (1UL<<(((20*32 + (18)))&31) & (0) )) || ((((20*32 + (18)))>>5)==(5) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(6) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(7) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(8) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(9) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(10) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(11) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(12) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(13) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(14) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(15) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(16) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(17) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(18) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((((20*32 + (18)))>>5)==(19) && (1UL<<(((20*32 + (18)))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((20*32 + (18)), (unsigned long *)((&boot_cpu_data)->x86_capability))) && enable_ept) {
  switch (l1tf_mitigation) {
  case L1TF_MITIGATION_OFF:
  case L1TF_MITIGATION_FLUSH_NOWARN:

   break;
  case L1TF_MITIGATION_FLUSH:
  case L1TF_MITIGATION_FLUSH_NOSMT:
  case L1TF_MITIGATION_FULL:




   if (sched_smt_active())
    ({ if (0) ({ do {} while (0); _printk("\001" "4" "L1TF CPU bug present and SMT on, data leak possible. See CVE-2018-3646 and https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/l1tf.html for details.\n"); }); 0; });
   if (l1tf_vmx_mitigation == VMENTER_L1D_FLUSH_NEVER)
    ({ if (0) ({ do {} while (0); _printk("\001" "4" "L1TF CPU bug present and virtualization mitigation disabled, data leak possible. See CVE-2018-3646 and https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/l1tf.html for details.\n"); }); 0; });
   break;
  case L1TF_MITIGATION_FULL_FORCE:

   break;
  }
 }
 return 0;
}

static int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vmx_check_processor_compat(void)
{
 struct vmcs_config vmcs_conf;
 struct vmx_capability vmx_cap;

 if (!(__builtin_constant_p(( 7*32+31)) && ( (((( 7*32+31))>>5)==(0) && (1UL<<((( 7*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+31))>>5)==(1) && (1UL<<((( 7*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+31))>>5)==(2) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(3) && (1UL<<((( 7*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+31))>>5)==(4) && (1UL<<((( 7*32+31))&31) & (0) )) || (((( 7*32+31))>>5)==(5) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(6) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(7) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(8) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(9) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(10) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(11) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(12) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(13) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(14) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(15) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(16) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(17) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(18) && (1UL<<((( 7*32+31))&31) & 0 )) || (((( 7*32+31))>>5)==(19) && (1UL<<((( 7*32+31))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : (__builtin_constant_p((( 7*32+31))) ? x86_this_cpu_constant_test_bit((( 7*32+31)), ((unsigned long *)&boot_cpu_data.x86_capability)) : x86_this_cpu_variable_test_bit((( 7*32+31)), ((unsigned long *)&boot_cpu_data.x86_capability)))) ||
     !(__builtin_constant_p(( 4*32+ 5)) && ( (((( 4*32+ 5))>>5)==(0) && (1UL<<((( 4*32+ 5))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+ 5))>>5)==(1) && (1UL<<((( 4*32+ 5))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+ 5))>>5)==(2) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(3) && (1UL<<((( 4*32+ 5))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+ 5))>>5)==(4) && (1UL<<((( 4*32+ 5))&31) & (0) )) || (((( 4*32+ 5))>>5)==(5) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(6) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(7) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(8) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(9) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(10) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(11) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(12) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(13) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(14) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(15) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(16) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(17) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(18) && (1UL<<((( 4*32+ 5))&31) & 0 )) || (((( 4*32+ 5))>>5)==(19) && (1UL<<((( 4*32+ 5))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : (__builtin_constant_p((( 4*32+ 5))) ? x86_this_cpu_constant_test_bit((( 4*32+ 5)), ((unsigned long *)&boot_cpu_data.x86_capability)) : x86_this_cpu_variable_test_bit((( 4*32+ 5)), ((unsigned long *)&boot_cpu_data.x86_capability))))) {
  ({ do {} while (0); _printk("\001" "3" "kvm: VMX is disabled on CPU %d\n", debug_smp_processor_id()); });
  return -5;
 }

 if (setup_vmcs_config(&vmcs_conf, &vmx_cap) < 0)
  return -5;
 if (nested)
  nested_vmx_setup_ctls_msrs(&vmcs_conf.nested, vmx_cap.ept);
 if (memcmp(&vmcs_config, &vmcs_conf, sizeof(struct vmcs_config)) != 0) {
  ({ do {} while (0); _printk("\001" "3" "kvm: CPU %d feature inconsistency!\n", debug_smp_processor_id()); });

  return -5;
 }
 return 0;
}

static u64 vmx_get_mt_mask(struct kvm_vcpu *vcpu, gfn_t gfn, bool is_mmio)
{
 u8 cache;
 u64 ipat = 0;
# 6954 "arch/x86/kvm/vmx/vmx.c"
 if (is_mmio) {
  cache = 0;
  goto exit;
 }

 if (!kvm_arch_has_noncoherent_dma(vcpu->kvm)) {
  ipat = (1ull << 6);
  cache = 6;
  goto exit;
 }

 if (kvm_read_cr0(vcpu) & (((1UL)) << (30))) {
  ipat = (1ull << 6);
  if (kvm_check_has_quirk(vcpu->kvm, (1 << 1)))
   cache = 6;
  else
   cache = 0;
  goto exit;
 }

 cache = kvm_mtrr_get_guest_memory_type(vcpu, gfn);

exit:
 return (cache << 3) | ipat;
}

static void vmcs_set_secondary_exec_control(struct vcpu_vmx *vmx, u32 new_ctl)
{






 u32 mask =
  ((((1UL))) << (( 2*32+ 14) & 0x1f)) |
  ((((1UL))) << (( 2*32+ 4) & 0x1f)) |
  ((((1UL))) << (( 2*32+ 0) & 0x1f)) |
  ((((1UL))) << (( 2*32+ 2) & 0x1f));

 u32 cur_ctl = secondary_exec_controls_get(vmx);

 secondary_exec_controls_set(vmx, (new_ctl & ~mask) | (cur_ctl & mask));
}





static void nested_vmx_cr_fixed1_bits_update(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct kvm_cpuid_entry2 *entry;

 vmx->nested.msrs.cr0_fixed1 = 0xffffffff;
 vmx->nested.msrs.cr4_fixed1 = (((1UL)) << (8));






 entry = kvm_find_cpuid_entry(vcpu, 0x1, 0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+ 1))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (0))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+ 1))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (1))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+ 4))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (2))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+ 2))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (3))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+ 3))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (4))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+ 6))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (5))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+ 7))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (6))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+13))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (7))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+24))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (9))); } while (0);
 do { if (entry && (entry->edx & (__feature_bit(( 0*32+25))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (10))); } while (0);
 do { if (entry && (entry->ecx & (__feature_bit(( 4*32+ 5))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (13))); } while (0);
 do { if (entry && (entry->ecx & (__feature_bit(( 4*32+ 6))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (14))); } while (0);
 do { if (entry && (entry->ecx & (__feature_bit(( 4*32+17))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (17))); } while (0);
 do { if (entry && (entry->ecx & (__feature_bit(( 4*32+26))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (18))); } while (0);

 entry = kvm_find_cpuid_entry(vcpu, 0x7, 0);
 do { if (entry && (entry->ebx & (__feature_bit(( 9*32+ 0))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (16))); } while (0);
 do { if (entry && (entry->ebx & (__feature_bit(( 9*32+ 7))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (20))); } while (0);
 do { if (entry && (entry->ebx & (__feature_bit(( 9*32+20))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (21))); } while (0);
 do { if (entry && (entry->ecx & (__feature_bit((16*32+ 3))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (22))); } while (0);
 do { if (entry && (entry->ecx & (__feature_bit((16*32+ 2))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (11))); } while (0);
 do { if (entry && (entry->ecx & (__feature_bit((16*32+16))))) vmx->nested.msrs.cr4_fixed1 |= ((((1UL)) << (12))); } while (0);


}

static void nested_vmx_entry_exit_ctls_update(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (kvm_mpx_supported()) {
  bool mpx_enabled = guest_cpuid_has(vcpu, ( 9*32+14));

  if (mpx_enabled) {
   vmx->nested.msrs.entry_ctls_high |= 0x00010000;
   vmx->nested.msrs.exit_ctls_high |= 0x00800000;
  } else {
   vmx->nested.msrs.entry_ctls_high &= ~0x00010000;
   vmx->nested.msrs.exit_ctls_high &= ~0x00800000;
  }
 }
}

static void update_intel_pt_cfg(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 struct kvm_cpuid_entry2 *best = ((void *)0);
 int i;

 for (i = 0; i < 2; i++) {
  best = kvm_find_cpuid_entry(vcpu, 0x14, i);
  if (!best)
   return;
  vmx->pt_desc.caps[CPUID_EAX + i*4] = best->eax;
  vmx->pt_desc.caps[CPUID_EBX + i*4] = best->ebx;
  vmx->pt_desc.caps[CPUID_ECX + i*4] = best->ecx;
  vmx->pt_desc.caps[CPUID_EDX + i*4] = best->edx;
 }


 vmx->pt_desc.num_address_ranges = intel_pt_validate_cap(vmx->pt_desc.caps,
      PT_CAP_num_address_ranges);


 vmx->pt_desc.ctl_bitmask = ~(((((1UL))) << (0)) | ((((1UL))) << (2)) |
   ((((1UL))) << (3)) | ((((1UL))) << (10)) | ((((1UL))) << (11)) |
   ((((1UL))) << (13)));





 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_cr3_filtering))
  vmx->pt_desc.ctl_bitmask &= ~((((1UL))) << (7));





 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_psb_cyc))
  vmx->pt_desc.ctl_bitmask &= ~(((((1UL))) << (1)) |
    (0x0full << 19) | (0x0full << 24));




 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_mtc))
  vmx->pt_desc.ctl_bitmask &= ~(((((1UL))) << (9)) |
           (0x0full << 14));


 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_ptwrite))
  vmx->pt_desc.ctl_bitmask &= ~(((((1UL))) << (5)) |
       ((((1UL))) << (12)));


 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_power_event_trace))
  vmx->pt_desc.ctl_bitmask &= ~((((1UL))) << (4));


 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_topa_output))
  vmx->pt_desc.ctl_bitmask &= ~((((1UL))) << (8));


 if (intel_pt_validate_cap(vmx->pt_desc.caps, PT_CAP_output_subsys))
  vmx->pt_desc.ctl_bitmask &= ~((((1UL))) << (6));


 for (i = 0; i < vmx->pt_desc.num_address_ranges; i++)
  vmx->pt_desc.ctl_bitmask &= ~(0xfULL << (32 + i * 4));
}

static void vmx_vcpu_after_set_cpuid(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);


 vcpu->arch.xsaves_enabled = false;

 vmx_setup_uret_msrs(vmx);

 if (cpu_has_secondary_exec_ctrls())
  vmcs_set_secondary_exec_control(vmx,
      vmx_secondary_exec_control(vmx));

 if (nested_vmx_allowed(vcpu))
  to_vmx(vcpu)->msr_ia32_feature_control_valid_bits |=
   ((((1UL))) << (1)) |
   ((((1UL))) << (2));
 else
  to_vmx(vcpu)->msr_ia32_feature_control_valid_bits &=
   ~(((((1UL))) << (1)) |
     ((((1UL))) << (2)));

 if (nested_vmx_allowed(vcpu)) {
  nested_vmx_cr_fixed1_bits_update(vcpu);
  nested_vmx_entry_exit_ctls_update(vcpu);
 }

 if ((__builtin_constant_p(( 9*32+25)) && ( (((( 9*32+25))>>5)==(0) && (1UL<<((( 9*32+25))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+25))>>5)==(1) && (1UL<<((( 9*32+25))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+25))>>5)==(2) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(3) && (1UL<<((( 9*32+25))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+25))>>5)==(4) && (1UL<<((( 9*32+25))&31) & (0) )) || (((( 9*32+25))>>5)==(5) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(6) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(7) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(8) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(9) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(10) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(11) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(12) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(13) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(14) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(15) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(16) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(17) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(18) && (1UL<<((( 9*32+25))&31) & 0 )) || (((( 9*32+25))>>5)==(19) && (1UL<<((( 9*32+25))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+25), (unsigned long *)((&boot_cpu_data)->x86_capability))) &&
   guest_cpuid_has(vcpu, ( 9*32+25)))
  update_intel_pt_cfg(vcpu);

 if ((__builtin_constant_p(( 9*32+11)) && ( (((( 9*32+11))>>5)==(0) && (1UL<<((( 9*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+11))>>5)==(1) && (1UL<<((( 9*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+11))>>5)==(2) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(3) && (1UL<<((( 9*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+11))>>5)==(4) && (1UL<<((( 9*32+11))&31) & (0) )) || (((( 9*32+11))>>5)==(5) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(6) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(7) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(8) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(9) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(10) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(11) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(12) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(13) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(14) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(15) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(16) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(17) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(18) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(19) && (1UL<<((( 9*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {
  struct vmx_uret_msr *msr;
  msr = vmx_find_uret_msr(vmx, 0x00000122);
  if (msr) {
   bool enabled = guest_cpuid_has(vcpu, ( 9*32+11));
   vmx_set_guest_uret_msr(vmx, msr, enabled ? 0 : ((((1UL))) << (0)));
  }
 }

 set_cr4_guest_host_mask(vmx);

 vmx_write_encls_bitmap(vcpu, ((void *)0));
 if (guest_cpuid_has(vcpu, ( 9*32+ 2)))
  vmx->msr_ia32_feature_control_valid_bits |= ((((1UL))) << (18));
 else
  vmx->msr_ia32_feature_control_valid_bits &= ~((((1UL))) << (18));

 if (guest_cpuid_has(vcpu, (16*32+30)))
  vmx->msr_ia32_feature_control_valid_bits |=
   ((((1UL))) << (17));
 else
  vmx->msr_ia32_feature_control_valid_bits &=
   ~((((1UL))) << (17));


 vmx_update_exception_bitmap(vcpu);
}

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vmx_set_cpu_caps(void)
{
 kvm_set_cpu_caps();


 if (nested)
  kvm_cpu_cap_set(( 4*32+ 5));


 if (kvm_mpx_supported())
  kvm_cpu_cap_check_and_set(( 9*32+14));
 if (!cpu_has_vmx_invpcid())
  kvm_cpu_cap_clear(( 9*32+10));
 if (vmx_pt_mode_is_host_guest())
  kvm_cpu_cap_check_and_set(( 9*32+25));

 if (!0) {
  kvm_cpu_cap_clear(( 9*32+ 2));
  kvm_cpu_cap_clear((16*32+30));
  kvm_cpu_cap_clear((11*32+ 8));
  kvm_cpu_cap_clear((11*32+ 9));
 }

 if (vmx_umip_emulated())
  kvm_cpu_cap_set((16*32+ 2));


 supported_xss = 0;
 if (!cpu_has_vmx_xsaves())
  kvm_cpu_cap_clear((10*32+ 3));


 if (!cpu_has_vmx_rdtscp()) {
  kvm_cpu_cap_clear(( 1*32+27));
  kvm_cpu_cap_clear((16*32+22));
 }

 if (cpu_has_vmx_waitpkg())
  kvm_cpu_cap_check_and_set((16*32+ 5));
}

static void vmx_request_immediate_exit(struct kvm_vcpu *vcpu)
{
 to_vmx(vcpu)->req_immediate_exit = true;
}

static int vmx_check_intercept_io(struct kvm_vcpu *vcpu,
      struct x86_instruction_info *info)
{
 struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
 unsigned short port;
 bool intercept;
 int size;

 if (info->intercept == x86_intercept_in ||
     info->intercept == x86_intercept_ins) {
  port = info->src_val;
  size = info->dst_bytes;
 } else {
  port = info->dst_val;
  size = info->src_bytes;
 }
# 7258 "arch/x86/kvm/vmx/vmx.c"
 if (!nested_cpu_has(vmcs12, ((((1UL))) << (( 1*32+ 25) & 0x1f))))
  intercept = nested_cpu_has(vmcs12,
        ((((1UL))) << (( 1*32+ 24) & 0x1f)));
 else
  intercept = nested_vmx_check_io_bitmaps(vcpu, port, size);


 return intercept ? 1 : 0;
}

static int vmx_check_intercept(struct kvm_vcpu *vcpu,
          struct x86_instruction_info *info,
          enum x86_intercept_stage stage,
          struct x86_exception *exception)
{
 struct vmcs12 *vmcs12 = get_vmcs12(vcpu);

 switch (info->intercept) {





 case x86_intercept_rdpid:
  if (!nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 3) & 0x1f)))) {
   exception->vector = 6;
   exception->error_code_valid = false;
   return 2;
  }
  break;

 case x86_intercept_in:
 case x86_intercept_ins:
 case x86_intercept_out:
 case x86_intercept_outs:
  return vmx_check_intercept_io(vcpu, info);

 case x86_intercept_lgdt:
 case x86_intercept_lidt:
 case x86_intercept_lldt:
 case x86_intercept_ltr:
 case x86_intercept_sgdt:
 case x86_intercept_sidt:
 case x86_intercept_sldt:
 case x86_intercept_str:
  if (!nested_cpu_has2(vmcs12, ((((1UL))) << (( 2*32+ 2) & 0x1f))))
   return 0;


  break;


 default:
  break;
 }

 return 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int u64_shl_div_u64(u64 a, unsigned int shift,
      u64 divisor, u64 *result)
{
 u64 low = a << shift, high = a >> (64 - shift);


 if (high >= divisor)
  return 1;


 asm("divq %2\n\t" : "=a" (low), "=d" (high) :
     "rm" (divisor), "0" (low), "1" (high));
 *result = low;

 return 0;
}

static int vmx_set_hv_timer(struct kvm_vcpu *vcpu, u64 guest_deadline_tsc,
       bool *expired)
{
 struct vcpu_vmx *vmx;
 u64 tscl, guest_tscl, delta_tsc, lapic_timer_advance_cycles;
 struct kvm_timer *ktimer = &vcpu->arch.apic->lapic_timer;

 vmx = to_vmx(vcpu);
 tscl = rdtsc();
 guest_tscl = kvm_read_l1_tsc(vcpu, tscl);
 delta_tsc = __builtin_choose_expr(((!!(sizeof((typeof(guest_deadline_tsc) *)1 == (typeof(guest_tscl) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(guest_deadline_tsc) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(guest_tscl) * 0l)) : (int *)8))))), ((guest_deadline_tsc) > (guest_tscl) ? (guest_deadline_tsc) : (guest_tscl)), ({ typeof(guest_deadline_tsc) __UNIQUE_ID___x901 = (guest_deadline_tsc); typeof(guest_tscl) __UNIQUE_ID___y902 = (guest_tscl); ((__UNIQUE_ID___x901) > (__UNIQUE_ID___y902) ? (__UNIQUE_ID___x901) : (__UNIQUE_ID___y902)); })) - guest_tscl;
 lapic_timer_advance_cycles = nsec_to_cycles(vcpu,
          ktimer->timer_advance_ns);

 if (delta_tsc > lapic_timer_advance_cycles)
  delta_tsc -= lapic_timer_advance_cycles;
 else
  delta_tsc = 0;


 if (vcpu->arch.l1_tsc_scaling_ratio != kvm_default_tsc_scaling_ratio &&
     delta_tsc && u64_shl_div_u64(delta_tsc,
    kvm_tsc_scaling_ratio_frac_bits,
    vcpu->arch.l1_tsc_scaling_ratio, &delta_tsc))
  return -34;







 if (delta_tsc >> (cpu_preemption_timer_multi + 32))
  return -34;

 vmx->hv_deadline_tsc = tscl + delta_tsc;
 *expired = !delta_tsc;
 return 0;
}

static void vmx_cancel_hv_timer(struct kvm_vcpu *vcpu)
{
 to_vmx(vcpu)->hv_deadline_tsc = -1;
}


static void vmx_sched_in(struct kvm_vcpu *vcpu, int cpu)
{
 if (!kvm_pause_in_guest(vcpu->kvm))
  shrink_ple_window(vcpu);
}

void vmx_update_cpu_dirty_logging(struct kvm_vcpu *vcpu)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 if (is_guest_mode(vcpu)) {
  vmx->nested.update_vmcs01_cpu_dirty_logging = true;
  return;
 }






 if (vcpu->kvm->arch.cpu_dirty_logging_count)
  secondary_exec_controls_setbit(vmx, ((((1UL))) << (( 2*32+ 17) & 0x1f)));
 else
  secondary_exec_controls_clearbit(vmx, ((((1UL))) << (( 2*32+ 17) & 0x1f)));
}

static int vmx_pre_block(struct kvm_vcpu *vcpu)
{
 if (pi_pre_block(vcpu))
  return 1;

 if (kvm_lapic_hv_timer_in_use(vcpu))
  kvm_lapic_switch_to_sw_timer(vcpu);

 return 0;
}

static void vmx_post_block(struct kvm_vcpu *vcpu)
{
 if (kvm_x86_ops.set_hv_timer)
  kvm_lapic_switch_to_hv_timer(vcpu);

 pi_post_block(vcpu);
}

static void vmx_setup_mce(struct kvm_vcpu *vcpu)
{
 if (vcpu->arch.mcg_cap & ((((1ULL))) << (27)))
  to_vmx(vcpu)->msr_ia32_feature_control_valid_bits |=
   ((((1UL))) << (20));
 else
  to_vmx(vcpu)->msr_ia32_feature_control_valid_bits &=
   ~((((1UL))) << (20));
}

static int vmx_smi_allowed(struct kvm_vcpu *vcpu, bool for_injection)
{

 if (to_vmx(vcpu)->nested.nested_run_pending)
  return -16;
 return !is_smm(vcpu);
}

static int vmx_enter_smm(struct kvm_vcpu *vcpu, char *smstate)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);

 vmx->nested.smm.guest_mode = is_guest_mode(vcpu);
 if (vmx->nested.smm.guest_mode)
  nested_vmx_vmexit(vcpu, -1, 0, 0);

 vmx->nested.smm.vmxon = vmx->nested.vmxon;
 vmx->nested.vmxon = false;
 vmx_clear_hlt(vcpu);
 return 0;
}

static int vmx_leave_smm(struct kvm_vcpu *vcpu, const char *smstate)
{
 struct vcpu_vmx *vmx = to_vmx(vcpu);
 int ret;

 if (vmx->nested.smm.vmxon) {
  vmx->nested.vmxon = true;
  vmx->nested.smm.vmxon = false;
 }

 if (vmx->nested.smm.guest_mode) {
  ret = nested_vmx_enter_non_root_mode(vcpu, false);
  if (ret)
   return ret;

  vmx->nested.smm.guest_mode = false;
 }
 return 0;
}

static void vmx_enable_smi_window(struct kvm_vcpu *vcpu)
{

}

static bool vmx_apic_init_signal_blocked(struct kvm_vcpu *vcpu)
{
 return to_vmx(vcpu)->nested.vmxon && !is_guest_mode(vcpu);
}

static void vmx_migrate_timers(struct kvm_vcpu *vcpu)
{
 if (is_guest_mode(vcpu)) {
  struct hrtimer *timer = &to_vmx(vcpu)->nested.preemption_timer;

  if (hrtimer_try_to_cancel(timer) == 1)
   hrtimer_start_expires(timer, HRTIMER_MODE_ABS_PINNED);
 }
}

static void hardware_unsetup(void)
{
 kvm_set_posted_intr_wakeup_handler(((void *)0));

 if (nested)
  nested_vmx_hardware_unsetup();

 free_kvm_area();
}

static bool vmx_check_apicv_inhibit_reasons(ulong bit)
{
 ulong supported = ((((1UL))) << (0)) |
     ((((1UL))) << (1)) |
     ((((1UL))) << (6));

 return supported & ((((1UL))) << (bit));
}

static struct kvm_x86_ops vmx_x86_ops __attribute__((__section__(".init.data"))) = {
 .name = "kvm_intel",

 .hardware_unsetup = hardware_unsetup,

 .hardware_enable = hardware_enable,
 .hardware_disable = hardware_disable,
 .cpu_has_accelerated_tpr = report_flexpriority,
 .has_emulated_msr = vmx_has_emulated_msr,

 .vm_size = sizeof(struct kvm_vmx),
 .vm_init = vmx_vm_init,

 .vcpu_create = vmx_create_vcpu,
 .vcpu_free = vmx_free_vcpu,
 .vcpu_reset = vmx_vcpu_reset,

 .prepare_guest_switch = vmx_prepare_switch_to_guest,
 .vcpu_load = vmx_vcpu_load,
 .vcpu_put = vmx_vcpu_put,

 .update_exception_bitmap = vmx_update_exception_bitmap,
 .get_msr_feature = vmx_get_msr_feature,
 .get_msr = vmx_get_msr,
 .set_msr = vmx_set_msr,
 .get_segment_base = vmx_get_segment_base,
 .get_segment = vmx_get_segment,
 .set_segment = vmx_set_segment,
 .get_cpl = vmx_get_cpl,
 .get_cs_db_l_bits = vmx_get_cs_db_l_bits,
 .set_cr0 = vmx_set_cr0,
 .is_valid_cr4 = vmx_is_valid_cr4,
 .set_cr4 = vmx_set_cr4,
 .set_efer = vmx_set_efer,
 .get_idt = vmx_get_idt,
 .set_idt = vmx_set_idt,
 .get_gdt = vmx_get_gdt,
 .set_gdt = vmx_set_gdt,
 .set_dr7 = vmx_set_dr7,
 .sync_dirty_debug_regs = vmx_sync_dirty_debug_regs,
 .cache_reg = vmx_cache_reg,
 .get_rflags = vmx_get_rflags,
 .set_rflags = vmx_set_rflags,

 .tlb_flush_all = vmx_flush_tlb_all,
 .tlb_flush_current = vmx_flush_tlb_current,
 .tlb_flush_gva = vmx_flush_tlb_gva,
 .tlb_flush_guest = vmx_flush_tlb_guest,

 .run = vmx_vcpu_run,
 .handle_exit = vmx_handle_exit,
 .skip_emulated_instruction = vmx_skip_emulated_instruction,
 .update_emulated_instruction = vmx_update_emulated_instruction,
 .set_interrupt_shadow = vmx_set_interrupt_shadow,
 .get_interrupt_shadow = vmx_get_interrupt_shadow,
 .patch_hypercall = vmx_patch_hypercall,
 .set_irq = vmx_inject_irq,
 .set_nmi = vmx_inject_nmi,
 .queue_exception = vmx_queue_exception,
 .cancel_injection = vmx_cancel_injection,
 .interrupt_allowed = vmx_interrupt_allowed,
 .nmi_allowed = vmx_nmi_allowed,
 .get_nmi_mask = vmx_get_nmi_mask,
 .set_nmi_mask = vmx_set_nmi_mask,
 .enable_nmi_window = vmx_enable_nmi_window,
 .enable_irq_window = vmx_enable_irq_window,
 .update_cr8_intercept = vmx_update_cr8_intercept,
 .set_virtual_apic_mode = vmx_set_virtual_apic_mode,
 .set_apic_access_page_addr = vmx_set_apic_access_page_addr,
 .refresh_apicv_exec_ctrl = vmx_refresh_apicv_exec_ctrl,
 .load_eoi_exitmap = vmx_load_eoi_exitmap,
 .apicv_post_state_restore = vmx_apicv_post_state_restore,
 .check_apicv_inhibit_reasons = vmx_check_apicv_inhibit_reasons,
 .hwapic_irr_update = vmx_hwapic_irr_update,
 .hwapic_isr_update = vmx_hwapic_isr_update,
 .guest_apic_has_interrupt = vmx_guest_apic_has_interrupt,
 .sync_pir_to_irr = vmx_sync_pir_to_irr,
 .deliver_posted_interrupt = vmx_deliver_posted_interrupt,
 .dy_apicv_has_pending_interrupt = pi_has_pending_interrupt,

 .set_tss_addr = vmx_set_tss_addr,
 .set_identity_map_addr = vmx_set_identity_map_addr,
 .get_mt_mask = vmx_get_mt_mask,

 .get_exit_info = vmx_get_exit_info,

 .vcpu_after_set_cpuid = vmx_vcpu_after_set_cpuid,

 .has_wbinvd_exit = cpu_has_vmx_wbinvd_exit,

 .get_l2_tsc_offset = vmx_get_l2_tsc_offset,
 .get_l2_tsc_multiplier = vmx_get_l2_tsc_multiplier,
 .write_tsc_offset = vmx_write_tsc_offset,
 .write_tsc_multiplier = vmx_write_tsc_multiplier,

 .load_mmu_pgd = vmx_load_mmu_pgd,

 .check_intercept = vmx_check_intercept,
 .handle_exit_irqoff = vmx_handle_exit_irqoff,

 .request_immediate_exit = vmx_request_immediate_exit,

 .sched_in = vmx_sched_in,

 .cpu_dirty_log_size = 512,
 .update_cpu_dirty_logging = vmx_update_cpu_dirty_logging,

 .pre_block = vmx_pre_block,
 .post_block = vmx_post_block,

 .pmu_ops = &intel_pmu_ops,
 .nested_ops = &vmx_nested_ops,

 .update_pi_irte = pi_update_irte,
 .start_assignment = vmx_pi_start_assignment,


 .set_hv_timer = vmx_set_hv_timer,
 .cancel_hv_timer = vmx_cancel_hv_timer,


 .setup_mce = vmx_setup_mce,

 .smi_allowed = vmx_smi_allowed,
 .enter_smm = vmx_enter_smm,
 .leave_smm = vmx_leave_smm,
 .enable_smi_window = vmx_enable_smi_window,

 .can_emulate_instruction = vmx_can_emulate_instruction,
 .apic_init_signal_blocked = vmx_apic_init_signal_blocked,
 .migrate_timers = vmx_migrate_timers,

 .msr_filter_changed = vmx_msr_filter_changed,
 .complete_emulated_msr = kvm_complete_insn_gp,

 .vcpu_deliver_sipi_vector = kvm_vcpu_deliver_sipi_vector,
};

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vmx_setup_user_return_msrs(void)
{
# 7667 "arch/x86/kvm/vmx/vmx.c"
 const u32 vmx_uret_msrs_list[] = {

  0xc0000084, 0xc0000082, 0xc0000083,

  0xc0000080, 0xc0000103, 0xc0000081,
  0x00000122,
 };
 int i;

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_903(void) __attribute__((__error__("BUILD_BUG_ON failed: " "ARRAY_SIZE(vmx_uret_msrs_list) != MAX_NR_USER_RETURN_MSRS"))); if (!(!((sizeof(vmx_uret_msrs_list) / sizeof((vmx_uret_msrs_list)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((vmx_uret_msrs_list)), typeof(&(vmx_uret_msrs_list)[0])))); })))) != 7))) __compiletime_assert_903(); } while (0);

 for (i = 0; i < (sizeof(vmx_uret_msrs_list) / sizeof((vmx_uret_msrs_list)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((vmx_uret_msrs_list)), typeof(&(vmx_uret_msrs_list)[0])))); })))); ++i)
  kvm_add_user_return_msr(vmx_uret_msrs_list[i]);
}

static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) int hardware_setup(void)
{
 unsigned long host_bndcfgs;
 struct desc_ptr dt;
 int r, ept_lpage_level;

 store_idt(&dt);
 host_idt_base = dt.address;

 vmx_setup_user_return_msrs();

 if (setup_vmcs_config(&vmcs_config, &vmx_capability) < 0)
  return -5;

 if ((__builtin_constant_p(( 1*32+20)) && ( (((( 1*32+20))>>5)==(0) && (1UL<<((( 1*32+20))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 1*32+20))>>5)==(1) && (1UL<<((( 1*32+20))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 1*32+20))>>5)==(2) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(3) && (1UL<<((( 1*32+20))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 1*32+20))>>5)==(4) && (1UL<<((( 1*32+20))&31) & (0) )) || (((( 1*32+20))>>5)==(5) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(6) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(7) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(8) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(9) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(10) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(11) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(12) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(13) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(14) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(15) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(16) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(17) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(18) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(19) && (1UL<<((( 1*32+20))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 1*32+20), (unsigned long *)((&boot_cpu_data)->x86_capability))))
  kvm_enable_efer_bits((1<<11));

 if ((__builtin_constant_p(( 9*32+14)) && ( (((( 9*32+14))>>5)==(0) && (1UL<<((( 9*32+14))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+14))>>5)==(1) && (1UL<<((( 9*32+14))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+14))>>5)==(2) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(3) && (1UL<<((( 9*32+14))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+14))>>5)==(4) && (1UL<<((( 9*32+14))&31) & (0) )) || (((( 9*32+14))>>5)==(5) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(6) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(7) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(8) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(9) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(10) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(11) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(12) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(13) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(14) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(15) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(16) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(17) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(18) && (1UL<<((( 9*32+14))&31) & 0 )) || (((( 9*32+14))>>5)==(19) && (1UL<<((( 9*32+14))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+14), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {
  ((host_bndcfgs) = native_read_msr((0x00000d90)));
  ({ int __ret_warn_on = !!(host_bndcfgs); ({ if (0) ({ do {} while (0); _printk("KVM: BNDCFGS in host will be lost"); }); 0; }); __builtin_expect(!!(__ret_warn_on), 0); });
 }

 if (!cpu_has_vmx_mpx())
  supported_xcr0 &= ~((1 << XFEATURE_BNDREGS) |
        (1 << XFEATURE_BNDCSR));

 if (!cpu_has_vmx_vpid() || !cpu_has_vmx_invvpid() ||
     !(cpu_has_vmx_invvpid_single() || cpu_has_vmx_invvpid_global()))
  enable_vpid = 0;

 if (!cpu_has_vmx_ept() ||
     !cpu_has_vmx_ept_4levels() ||
     !cpu_has_vmx_ept_mt_wb() ||
     !cpu_has_vmx_invept_global())
  enable_ept = 0;


 if (!enable_ept && !(__builtin_constant_p(( 1*32+20)) && ( (((( 1*32+20))>>5)==(0) && (1UL<<((( 1*32+20))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 1*32+20))>>5)==(1) && (1UL<<((( 1*32+20))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 1*32+20))>>5)==(2) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(3) && (1UL<<((( 1*32+20))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 1*32+20))>>5)==(4) && (1UL<<((( 1*32+20))&31) & (0) )) || (((( 1*32+20))>>5)==(5) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(6) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(7) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(8) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(9) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(10) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(11) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(12) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(13) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(14) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(15) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(16) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(17) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(18) && (1UL<<((( 1*32+20))&31) & 0 )) || (((( 1*32+20))>>5)==(19) && (1UL<<((( 1*32+20))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 1*32+20), (unsigned long *)((&boot_cpu_data)->x86_capability)))) {
  ({ if (0) ({ do {} while (0); _printk("\001" "3" "kvm: NX (Execute Disable) not supported\n"); }); 0; });
  return -95;
 }

 if (!cpu_has_vmx_ept_ad_bits() || !enable_ept)
  enable_ept_ad_bits = 0;

 if (!cpu_has_vmx_unrestricted_guest() || !enable_ept)
  enable_unrestricted_guest = 0;

 if (!cpu_has_vmx_flexpriority())
  flexpriority_enabled = 0;

 if (!cpu_has_virtual_nmis())
  enable_vnmi = 0;






 if (!flexpriority_enabled)
  vmx_x86_ops.set_apic_access_page_addr = ((void *)0);

 if (!cpu_has_vmx_tpr_shadow())
  vmx_x86_ops.update_cr8_intercept = ((void *)0);
# 7756 "arch/x86/kvm/vmx/vmx.c"
 if (!cpu_has_vmx_ple()) {
  ple_gap = 0;
  ple_window = 0;
  ple_window_grow = 0;
  ple_window_max = 0;
  ple_window_shrink = 0;
 }

 if (!cpu_has_vmx_apicv()) {
  enable_apicv = 0;
  vmx_x86_ops.sync_pir_to_irr = ((void *)0);
 }

 if (cpu_has_vmx_tsc_scaling()) {
  kvm_has_tsc_control = true;
  kvm_max_tsc_scaling_ratio = 0xffffffffffffffffULL;
  kvm_tsc_scaling_ratio_frac_bits = 48;
 }

 kvm_has_bus_lock_exit = cpu_has_vmx_bus_lock_detection();

 set_bit(0, vmx_vpid_bitmap);

 if (enable_ept)
  kvm_mmu_set_ept_masks(enable_ept_ad_bits,
          cpu_has_vmx_ept_execute_only());

 if (!enable_ept)
  ept_lpage_level = 0;
 else if (cpu_has_vmx_ept_1g_page())
  ept_lpage_level = PG_LEVEL_1G;
 else if (cpu_has_vmx_ept_2m_page())
  ept_lpage_level = PG_LEVEL_2M;
 else
  ept_lpage_level = PG_LEVEL_4K;
 kvm_configure_mmu(enable_ept, 0, vmx_get_max_tdp_level(),
     ept_lpage_level);





 if (!enable_ept || !enable_ept_ad_bits || !cpu_has_vmx_pml())
  enable_pml = 0;

 if (!enable_pml)
  vmx_x86_ops.cpu_dirty_log_size = 0;

 if (!cpu_has_vmx_preemption_timer())
  enable_preemption_timer = false;

 if (enable_preemption_timer) {
  u64 use_timer_freq = 5000ULL * 1000 * 1000;
  u64 vmx_msr;

  ((vmx_msr) = native_read_msr((0x00000485)));
  cpu_preemption_timer_multi =
   vmx_msr & 0x0000001f;

  if (tsc_khz)
   use_timer_freq = (u64)tsc_khz * 1000;
  use_timer_freq >>= cpu_preemption_timer_multi;






  if (use_timer_freq > 0xffffffffu / 10)
   enable_preemption_timer = false;
 }

 if (!enable_preemption_timer) {
  vmx_x86_ops.set_hv_timer = ((void *)0);
  vmx_x86_ops.cancel_hv_timer = ((void *)0);
  vmx_x86_ops.request_immediate_exit = __kvm_request_immediate_exit;
 }

 kvm_mce_cap_supported |= ((((1ULL))) << (27));

 if (pt_mode != 0 && pt_mode != 1)
  return -22;
 if (!enable_ept || !cpu_has_vmx_intel_pt())
  pt_mode = 0;

 setup_default_sgx_lepubkeyhash();

 if (nested) {
  nested_vmx_setup_ctls_msrs(&vmcs_config.nested,
        vmx_capability.ept);

  r = nested_vmx_hardware_setup(kvm_vmx_exit_handlers);
  if (r)
   return r;
 }

 vmx_set_cpu_caps();

 r = alloc_kvm_area();
 if (r)
  nested_vmx_hardware_unsetup();

 kvm_set_posted_intr_wakeup_handler(pi_wakeup_handler);

 return r;
}

static struct kvm_x86_init_ops vmx_init_ops __attribute__((__section__(".init.data"))) = {
 .cpu_has_kvm_support = cpu_has_kvm_support,
 .disabled_by_bios = vmx_disabled_by_bios,
 .check_processor_compatibility = vmx_check_processor_compat,
 .hardware_setup = hardware_setup,

 .runtime_ops = &vmx_x86_ops,
};

static void vmx_cleanup_l1d_flush(void)
{
 if (vmx_l1d_flush_pages) {
  free_pages((unsigned long)vmx_l1d_flush_pages, 4);
  vmx_l1d_flush_pages = ((void *)0);
 }

 l1tf_vmx_mitigation = VMENTER_L1D_FLUSH_AUTO;
}

static void vmx_exit(void)
{





 kvm_exit();
# 7914 "arch/x86/kvm/vmx/vmx.c"
 vmx_cleanup_l1d_flush();

 allow_smaller_maxphyaddr = false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) exitcall_t __attribute__((__unused__)) __exittest(void) { return vmx_exit; } void cleanup_module(void) __attribute__((alias("vmx_exit"))); ;;

static int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vmx_init(void)
{
 int r, cpu;
# 7958 "arch/x86/kvm/vmx/vmx.c"
 r = kvm_init(&vmx_init_ops, sizeof(struct vcpu_vmx),
       __alignof__(struct vcpu_vmx), (&__this_module));
 if (r)
  return r;
# 7970 "arch/x86/kvm/vmx/vmx.c"
 r = vmx_setup_l1d_flush(vmentry_l1d_flush_param);
 if (r) {
  vmx_exit();
  return r;
 }

 for (((cpu)) = 0; ((cpu)) < 1; ((cpu))++, (void)((const struct cpumask *)&__cpu_possible_mask)) {
  INIT_LIST_HEAD(&(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(loaded_vmcss_on_cpu)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(loaded_vmcss_on_cpu))) *)(&(loaded_vmcss_on_cpu)); }); })));

  pi_init_cpu(cpu);
 }





 vmx_check_vmcs12_offsets();






 if (!enable_ept)
  allow_smaller_maxphyaddr = true;

 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) initcall_t __attribute__((__unused__)) __inittest(void) { return vmx_init; } int init_module(void) __attribute__((alias("vmx_init"))); ;;
