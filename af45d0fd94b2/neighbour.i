# 1 "net/core/neighbour.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 377 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "././include/linux/compiler-version.h" 1
# 2 "<built-in>" 2
# 1 "././include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "././include/linux/kconfig.h" 2
# 3 "<built-in>" 2
# 1 "././include/linux/compiler_types.h" 1
# 65 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler_attributes.h" 1
# 66 "././include/linux/compiler_types.h" 2
# 80 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler-clang.h" 1
# 81 "././include/linux/compiler_types.h" 2
# 99 "././include/linux/compiler_types.h"
# 1 "./arch/arm64/include/asm/compiler.h" 1
# 12 "./arch/arm64/include/asm/compiler.h"
extern unsigned long long vabits_actual;
# 100 "././include/linux/compiler_types.h" 2


struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 4 "<built-in>" 2
# 1 "net/core/neighbour.c" 2
# 16 "net/core/neighbour.c"
# 1 "./include/net/rtnetlink_api.h" 1




# 1 "./include/net/rtnetlink_types.h" 1




# 1 "./include/net/netlink_types.h" 1




# 1 "./include/linux/types.h" 1





# 1 "./include/uapi/linux/types.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 1 "./include/uapi/asm-generic/types.h" 1






# 1 "./include/asm-generic/int-ll64.h" 1
# 11 "./include/asm-generic/int-ll64.h"
# 1 "./include/uapi/asm-generic/int-ll64.h" 1
# 12 "./include/uapi/asm-generic/int-ll64.h"
# 1 "./arch/arm64/include/uapi/asm/bitsperlong.h" 1
# 22 "./arch/arm64/include/uapi/asm/bitsperlong.h"
# 1 "./include/asm-generic/bitsperlong.h" 1




# 1 "./include/uapi/asm-generic/bitsperlong.h" 1
# 6 "./include/asm-generic/bitsperlong.h" 2
# 23 "./arch/arm64/include/uapi/asm/bitsperlong.h" 2
# 13 "./include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "./include/asm-generic/int-ll64.h" 2




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 8 "./include/uapi/asm-generic/types.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/types.h" 2
# 6 "./include/uapi/linux/types.h" 2








# 1 "./include/uapi/linux/posix_types.h" 1




# 1 "./include/linux/stddef.h" 1




# 1 "./include/uapi/linux/stddef.h" 1
# 6 "./include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "./include/uapi/linux/posix_types.h" 2
# 25 "./include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "./arch/arm64/include/uapi/asm/posix_types.h" 1




typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


# 1 "./include/uapi/asm-generic/posix_types.h" 1
# 15 "./include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 59 "./include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_old_dev_t;
# 72 "./include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;



typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 10 "./arch/arm64/include/uapi/asm/posix_types.h" 2
# 37 "./include/uapi/linux/posix_types.h" 2
# 15 "./include/uapi/linux/types.h" 2
# 29 "./include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "./include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 7 "./include/linux/types.h" 2






typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ulong_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;



typedef __kernel_loff_t loff_t;
# 55 "./include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 125 "./include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 147 "./include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;

typedef u64 netdev_features_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;




typedef struct {
 s64 counter;
} atomic64_t;
typedef atomic64_t atomic_long_t;






struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;



 unsigned long f_tinode;

 char f_fname[6];
 char f_fpack[6];
};
# 231 "./include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);

typedef void (*swap_func_t)(void *a, void *b, int size);

typedef int (*cmp_r_func_t)(const void *a, const void *b, const void *priv);
typedef int (*cmp_func_t)(const void *a, const void *b);
# 6 "./include/net/netlink_types.h" 2

struct netlink_ext_ack;
struct nlattr;




enum {
 NLA_UNSPEC,
 NLA_U8,
 NLA_U16,
 NLA_U32,
 NLA_U64,
 NLA_STRING,
 NLA_FLAG,
 NLA_MSECS,
 NLA_NESTED,
 NLA_NESTED_ARRAY,
 NLA_NUL_STRING,
 NLA_BINARY,
 NLA_S8,
 NLA_S16,
 NLA_S32,
 NLA_S64,
 NLA_BITFIELD32,
 NLA_REJECT,
 __NLA_TYPE_MAX,
};



struct netlink_range_validation {
 u64 min, max;
};

struct netlink_range_validation_signed {
 s64 min, max;
};

enum nla_policy_validation {
 NLA_VALIDATE_NONE,
 NLA_VALIDATE_RANGE,
 NLA_VALIDATE_RANGE_WARN_TOO_LONG,
 NLA_VALIDATE_MIN,
 NLA_VALIDATE_MAX,
 NLA_VALIDATE_MASK,
 NLA_VALIDATE_RANGE_PTR,
 NLA_VALIDATE_FUNCTION,
};
# 163 "./include/net/netlink_types.h"
struct nla_policy {
 u8 type;
 u8 validation_type;
 u16 len;
 union {
  const u32 bitfield32_valid;
  const u32 mask;
  const char *reject_message;
  const struct nla_policy *nested_policy;
  struct netlink_range_validation *range;
  struct netlink_range_validation_signed *range_signed;
  struct {
   s16 min, max;
  };
  int (*validate)(const struct nlattr *attr,
    struct netlink_ext_ack *extack);
# 197 "./include/net/netlink_types.h"
  u16 strict_start_type;
 };
};
# 209 "./include/net/netlink_types.h"
struct nl_info {
 struct nlmsghdr *nlh;
 struct net *nl_net;
 u32 portid;
 u8 skip_notify:1,
    skip_notify_kernel:1;
};
# 6 "./include/net/rtnetlink_types.h" 2

enum rtnl_link_flags {
 RTNL_FLAG_DOIT_UNLOCKED = 1,
};
# 6 "./include/net/rtnetlink_api.h" 2
# 1 "./include/linux/rtnetlink.h" 1




# 1 "./include/linux/rcupdate.h" 1
# 23 "./include/linux/rcupdate.h"
# 1 "./include/linux/rcupdate_api_debug.h" 1
# 33 "./include/linux/rcupdate_api_debug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_bh_held(void)
{
 return 1;
}
# 24 "./include/linux/rcupdate.h" 2

# 1 "./include/linux/bug.h" 1




# 1 "./arch/arm64/include/asm/bug.h" 1
# 10 "./arch/arm64/include/asm/bug.h"
# 1 "./include/linux/stringify.h" 1
# 11 "./arch/arm64/include/asm/bug.h" 2

# 1 "./arch/arm64/include/asm/asm-bug.h" 1







# 1 "./arch/arm64/include/asm/brk-imm.h" 1
# 9 "./arch/arm64/include/asm/asm-bug.h" 2
# 13 "./arch/arm64/include/asm/bug.h" 2
# 26 "./arch/arm64/include/asm/bug.h"
# 1 "./include/asm-generic/bug.h" 1




# 1 "./include/linux/compiler.h" 1
# 250 "./include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 263 "./include/linux/compiler.h"
# 1 "./arch/arm64/include/asm/rwonce.h" 1
# 71 "./arch/arm64/include/asm/rwonce.h"
# 1 "./include/asm-generic/rwonce.h" 1
# 26 "./include/asm-generic/rwonce.h"
# 1 "./include/linux/kasan-checks.h" 1
# 22 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 40 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 27 "./include/asm-generic/rwonce.h" 2
# 1 "./include/linux/kcsan-checks.h" 1
# 151 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_check_access(const volatile void *ptr, size_t size,
     int type) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_disable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current_nowarn(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_atomic_next(int n) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_set_access_mask(unsigned long mask) { }

struct kcsan_scoped_access { };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kcsan_scoped_access *
kcsan_begin_scoped_access(const volatile void *ptr, size_t size, int type,
     struct kcsan_scoped_access *sa) { return sa; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_end_scoped_access(struct kcsan_scoped_access *sa) { }
# 187 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_check_access(const volatile void *ptr, size_t size,
          int type) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_disable_current(void) { }
# 28 "./include/asm-generic/rwonce.h" 2
# 64 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long __read_once_word_nocheck(const void *addr)
{
 return (*(const volatile typeof( _Generic((*(unsigned long *)addr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(unsigned long *)addr))) *)&(*(unsigned long *)addr));
}
# 82 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 72 "./arch/arm64/include/asm/rwonce.h" 2
# 264 "./include/linux/compiler.h" 2
# 6 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/instrumentation.h" 1
# 7 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/once_lite.h" 1
# 8 "./include/asm-generic/bug.h" 2
# 21 "./include/asm-generic/bug.h"
# 1 "./include/linux/panic.h" 1







struct pt_regs;

extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
extern bool oops_may_print(void);


extern unsigned int sysctl_oops_all_cpu_backtrace;




extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;

extern unsigned long panic_on_taint;
extern bool panic_on_taint_nousertaint;

extern int sysctl_panic_on_rcu_stall;
extern int sysctl_max_rcu_stall_to_panic;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
# 80 "./include/linux/panic.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE,
};

extern const char *print_tainted(void);
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
# 22 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/printk.h" 1




# 1 "./include/linux/stdarg.h" 1




typedef __builtin_va_list va_list;
# 6 "./include/linux/printk.h" 2
# 1 "./include/linux/kern_levels.h" 1
# 7 "./include/linux/printk.h" 2
# 1 "./include/linux/linkage.h" 1






# 1 "./include/linux/export.h" 1
# 60 "./include/linux/export.h"
struct kernel_symbol {
 int value_offset;
 int name_offset;
 int namespace_offset;
};
# 8 "./include/linux/linkage.h" 2
# 1 "./arch/arm64/include/asm/linkage.h" 1
# 9 "./include/linux/linkage.h" 2
# 8 "./include/linux/printk.h" 2


extern const char linux_banner[];
extern const char linux_proc_banner[];

extern int oops_in_progress;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 63 "./include/linux/printk.h"
extern int console_printk[];






extern void console_verbose(void);



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 137 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
void early_printk(const char *s, ...) { }


struct dev_printk_info;


           __attribute__((__format__(printf, 4, 0)))
int vprintk_emit(int facility, int level,
   const struct dev_printk_info *dev_info,
   const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int _printk(const char *fmt, ...);




__attribute__((__format__(printf, 1, 2))) __attribute__((__cold__)) int _printk_deferred(const char *fmt, ...);

extern void __printk_safe_enter(void);
extern void __printk_safe_exit(void);
# 175 "./include/linux/printk.h"
extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void setup_log_buf(int early);
__attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void dump_stack_lvl(const char *log_lvl) __attribute__((__cold__));
extern void dump_stack(void) __attribute__((__cold__));
void printk_trigger_flush(void);
# 281 "./include/linux/printk.h"
extern int __printk_cpu_trylock(void);
extern void __printk_wait_on_cpu_lock(void);
extern void __printk_cpu_unlock(void);
# 321 "./include/linux/printk.h"
extern int kptr_restrict;
# 340 "./include/linux/printk.h"
struct module;
# 694 "./include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);
# 733 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 23 "./include/asm-generic/bug.h" 2




struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 95 "./include/asm-generic/bug.h"
extern __attribute__((__format__(printf, 1, 2))) void __warn_printk(const char *fmt, ...);
# 113 "./include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 27 "./arch/arm64/include/asm/bug.h" 2
# 6 "./include/linux/bug.h" 2

# 1 "./include/linux/build_bug.h" 1
# 8 "./include/linux/bug.h" 2

enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

void bug_get_file_line(struct bug_entry *bug, const char **file,
         unsigned int *line);

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);

void generic_bug_clear_once(void);
# 80 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 26 "./include/linux/rcupdate.h" 2
# 1 "./include/linux/bottom_half.h" 1




# 1 "./include/linux/kernel.h" 1




# 1 "./include/linux/kstrtox.h" 1








int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 30 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 58 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}
# 145 "./include/linux/kstrtox.h"
extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}
# 6 "./include/linux/kernel.h" 2
# 1 "./include/linux/static_call_types.h" 1
# 32 "./include/linux/static_call_types.h"
struct static_call_site {
 s32 addr;
 s32 key;
};
# 94 "./include/linux/static_call_types.h"
struct static_call_key {
 void *func;
};
# 7 "./include/linux/kernel.h" 2
# 1 "./include/linux/instruction_pointer.h" 1
# 8 "./include/linux/kernel.h" 2
# 1 "./include/linux/container_of.h" 1





# 1 "./include/linux/err.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 1 "./include/uapi/asm-generic/errno.h" 1




# 1 "./include/uapi/asm-generic/errno-base.h" 1
# 6 "./include/uapi/asm-generic/errno.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/errno.h" 2
# 9 "./include/linux/err.h" 2
# 24 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 7 "./include/linux/container_of.h" 2
# 9 "./include/linux/kernel.h" 2
# 65 "./include/linux/kernel.h"
struct completion;
struct user;
# 148 "./include/linux/kernel.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __might_resched(const char *file, int line,
         unsigned int offsets) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __might_sleep(const char *file, int line) { }
# 166 "./include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void might_fault(void) { }


void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int no_hash_pointers_enable(char *str);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

extern void bust_spinlocks(int yes);

extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_FREEING_INITMEM,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;

extern const char hex_asc[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 281 "./include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};
# 431 "./include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_start(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_stop(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_dump_stack(int skip) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_on(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_off(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int tracing_is_on(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_snapshot(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_snapshot_alloc(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
int trace_printk(const char *fmt, ...)
{
 return 0;
}
static __attribute__((__format__(printf, 1, 0))) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
ftrace_vprintk(const char *fmt, va_list ap)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
# 6 "./include/linux/bottom_half.h" 2

# 1 "./include/linux/preempt.h" 1
# 10 "./include/linux/preempt.h"
# 1 "./arch/arm64/include/asm/current.h" 1








struct task_struct;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct task_struct *get_current(void)
{
 unsigned long sp_el0;

 asm ("mrs %0, sp_el0" : "=r" (sp_el0));

 return (struct task_struct *)sp_el0;
}
# 11 "./include/linux/preempt.h" 2

# 1 "./include/linux/list.h" 1





# 1 "./include/linux/poison.h" 1
# 7 "./include/linux/list.h" 2
# 1 "./include/linux/const.h" 1



# 1 "./include/vdso/const.h" 1




# 1 "./include/uapi/linux/const.h" 1
# 6 "./include/vdso/const.h" 2
# 5 "./include/linux/const.h" 2
# 8 "./include/linux/list.h" 2


# 1 "./arch/arm64/include/asm/barrier.h" 1
# 68 "./arch/arm64/include/asm/barrier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long array_index_mask_nospec(unsigned long idx,
          unsigned long sz)
{
 unsigned long mask;

 asm volatile(
 "	cmp	%1, %2\n"
 "	sbc	%0, xzr, xzr\n"
 : "=r" (mask)
 : "r" (idx), "Ir" (sz)
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return mask;
}
# 199 "./arch/arm64/include/asm/barrier.h"
# 1 "./include/asm-generic/barrier.h" 1
# 16 "./include/asm-generic/barrier.h"
# 1 "./arch/arm64/include/asm/vdso/processor.h" 1
# 10 "./arch/arm64/include/asm/vdso/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_relax(void)
{
 asm volatile("yield" ::: "memory");
}
# 17 "./include/asm-generic/barrier.h" 2
# 200 "./arch/arm64/include/asm/barrier.h" 2
# 11 "./include/linux/list.h" 2
# 34 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD(struct list_head *list)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_0(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_0(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 list->prev = list;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_add_valid(struct list_head *new,
    struct list_head *prev,
    struct list_head *next)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_del_entry_valid(struct list_head *entry)
{
 return true;
}
# 64 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_1(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_1(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (new); } while (0); } while (0);
}
# 85 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 99 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 111 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_2(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_2(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
}
# 125 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + (0xdead000000000000UL));
 entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 159 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}
# 175 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_init(struct list_head *old,
         struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 241 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty(const struct list_head *head)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_3(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->next) == sizeof(char) || sizeof(head->next) == sizeof(short) || sizeof(head->next) == sizeof(int) || sizeof(head->next) == sizeof(long)) || sizeof(head->next) == sizeof(long long))) __compiletime_assert_3(); } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); }) == head;
}
# 297 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init_careful(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = entry;
 do { typeof(&entry->next) __p = (&entry->next); union { typeof( _Generic((*&entry->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&entry->next))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&entry->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&entry->next)))) (entry) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_4(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)))) __compiletime_assert_4(); } while (0); kasan_check_write(__p, sizeof(*&entry->next)); switch (sizeof(*&entry->next)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}
# 317 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = ({ union { typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) __val; char __c[1]; } __u; typeof(&head->next) __p = (&head->next); do { __attribute__((__noreturn__)) extern void __compiletime_assert_5(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)))) __compiletime_assert_5(); } while (0); kasan_check_read(__p, sizeof(*&head->next)); switch (sizeof(*&head->next)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*__p) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*__p) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*__p) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*__p) : "memory"); break; } (typeof(*&head->next))__u.__val; });
 return (next == head) && (next == head->prev);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 344 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 390 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 418 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 479 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 496 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 801 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}
# 815 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}
# 828 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed_lockless(const struct hlist_node *h)
{
 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_6(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->pprev) == sizeof(char) || sizeof(h->pprev) == sizeof(short) || sizeof(h->pprev) == sizeof(int) || sizeof(h->pprev) == sizeof(long)) || sizeof(h->pprev) == sizeof(long long))) __compiletime_assert_6(); } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_empty(const struct hlist_head *h)
{
 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_7(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_7(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_8(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_8(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
 if (next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_9(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_9(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
}
# 859 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}
# 888 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_10(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_10(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (first); } while (0); } while (0);
 if (first)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_11(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_11(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_12(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_12(); } while (0); do { *(volatile typeof(h->first) *)&(h->first) = (n); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_13(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_13(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before(struct hlist_node *n,
        struct hlist_node *next)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_14(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_14(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_15(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_15(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_16(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_16(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_17(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(n->pprev)) == sizeof(char) || sizeof(*(n->pprev)) == sizeof(short) || sizeof(*(n->pprev)) == sizeof(int) || sizeof(*(n->pprev)) == sizeof(long)) || sizeof(*(n->pprev)) == sizeof(long long))) __compiletime_assert_17(); } while (0); do { *(volatile typeof(*(n->pprev)) *)&(*(n->pprev)) = (n); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_18(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_18(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (prev->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_19(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_19(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (n); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_20(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_20(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);

 if (n->next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_21(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_21(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 936 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}
# 958 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}
# 972 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 13 "./include/linux/preempt.h" 2
# 79 "./include/linux/preempt.h"
# 1 "./arch/arm64/include/asm/preempt.h" 1




# 1 "./include/linux/thread_info.h" 1
# 11 "./include/linux/thread_info.h"
# 1 "./include/vdso/limits.h" 1
# 12 "./include/linux/thread_info.h" 2


# 1 "./include/linux/limits.h" 1




# 1 "./include/uapi/linux/limits.h" 1
# 6 "./include/linux/limits.h" 2
# 15 "./include/linux/thread_info.h" 2

# 1 "./include/linux/errno.h" 1




# 1 "./include/uapi/linux/errno.h" 1
# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 2 "./include/uapi/linux/errno.h" 2
# 6 "./include/linux/errno.h" 2
# 17 "./include/linux/thread_info.h" 2
# 1 "./include/linux/bitops.h" 1




# 1 "./include/linux/bitops_types.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "./include/linux/bitops_types.h" 2
# 1 "./include/linux/bits.h" 1





# 1 "./include/vdso/bits.h" 1
# 7 "./include/linux/bits.h" 2
# 7 "./include/linux/bitops_types.h" 2

# 1 "./include/uapi/linux/kernel.h" 1




# 1 "./include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "./include/uapi/linux/kernel.h" 2
# 9 "./include/linux/bitops_types.h" 2
# 6 "./include/linux/bitops.h" 2

# 1 "./include/linux/typecheck.h" 1
# 8 "./include/linux/bitops.h" 2





# 1 "./arch/arm64/include/asm/bitops.h" 1







# 1 "./include/linux/atomic_api.h" 1





# 1 "./include/linux/atomic_types.h" 1
# 7 "./include/linux/atomic_api.h" 2

# 1 "./arch/arm64/include/asm/atomic.h" 1
# 16 "./arch/arm64/include/asm/atomic.h"
# 1 "./arch/arm64/include/asm/cmpxchg.h" 1
# 14 "./arch/arm64/include/asm/cmpxchg.h"
# 1 "./arch/arm64/include/asm/lse.h" 1




# 1 "./arch/arm64/include/asm/atomic_ll_sc.h" 1
# 111 "./arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_add(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_sub(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; }
# 122 "./arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_and(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "and" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "and" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_or(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "or" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "orr" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_xor(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "xor" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "eor" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_andnot(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "andnot" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "bic" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }
# 210 "./arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_add(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return_relaxed(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return_acquire(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return_release(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_sub(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return_relaxed(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return_acquire(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return_release(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; }
# 221 "./arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_and(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "and" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "and" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_or(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "or" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "orr" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_xor(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "xor" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "eor" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_andnot(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "andnot" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "bic" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_relaxed" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_acquire" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_release" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
__ll_sc_atomic64_dec_if_positive(atomic64_t *v)
{
 s64 result;
 unsigned long tmp;

 asm volatile("// atomic64_dec_if_positive\n"
 "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n""1:	ldxr	%0, %2\n""	subs	%0, %0, #1\n""	b.lt	2f\n""	stlxr	%w1, %0, %2\n""	cbnz	%w1, 1b\n""	dmb	ish\n""2:" "\n" "	b	4f\n" "	.previous\n" "4:\n"
# 252 "./arch/arm64/include/asm/atomic_ll_sc.h"
 : "=&r" (result), "=&r" (tmp), "+Q" (v->counter)
 :
 : "cc", "memory");

 return result;
}
# 299 "./arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_acq_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_acq_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_acq_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_acq_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_rel_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_rel_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_rel_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_rel_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_mb_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_mb_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_mb_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_mb_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
# 347 "./arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc__cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc__cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "_mb" "\n" "	b	3f\n" "	.subsection	1\n" "3:\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "l" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "dmb ish" "\n" "2:" "\n" "	b	4f\n" "	.previous\n" "4:\n" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : "memory"); return ret; }
# 6 "./arch/arm64/include/asm/lse.h" 2







# 1 "./include/linux/jump_label.h" 1
# 80 "./include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;
# 103 "./include/linux/jump_label.h"
 union {
  unsigned long type;
  struct jump_entry *entries;
  struct static_key_mod *next;
 };
};
# 118 "./include/linux/jump_label.h"
# 1 "./arch/arm64/include/asm/jump_label.h" 1
# 14 "./arch/arm64/include/asm/jump_label.h"
# 1 "./arch/arm64/include/asm/insn.h" 1
# 13 "./arch/arm64/include/asm/insn.h"
# 1 "./arch/arm64/include/asm/insn-def.h" 1
# 14 "./arch/arm64/include/asm/insn.h" 2
# 31 "./arch/arm64/include/asm/insn.h"
enum aarch64_insn_encoding_class {
 AARCH64_INSN_CLS_UNKNOWN,
 AARCH64_INSN_CLS_SVE,
 AARCH64_INSN_CLS_DP_IMM,
 AARCH64_INSN_CLS_DP_REG,
 AARCH64_INSN_CLS_DP_FPSIMD,
 AARCH64_INSN_CLS_LDST,
 AARCH64_INSN_CLS_BR_SYS,

};

enum aarch64_insn_hint_cr_op {
 AARCH64_INSN_HINT_NOP = 0x0 << 5,
 AARCH64_INSN_HINT_YIELD = 0x1 << 5,
 AARCH64_INSN_HINT_WFE = 0x2 << 5,
 AARCH64_INSN_HINT_WFI = 0x3 << 5,
 AARCH64_INSN_HINT_SEV = 0x4 << 5,
 AARCH64_INSN_HINT_SEVL = 0x5 << 5,

 AARCH64_INSN_HINT_XPACLRI = 0x07 << 5,
 AARCH64_INSN_HINT_PACIA_1716 = 0x08 << 5,
 AARCH64_INSN_HINT_PACIB_1716 = 0x0A << 5,
 AARCH64_INSN_HINT_AUTIA_1716 = 0x0C << 5,
 AARCH64_INSN_HINT_AUTIB_1716 = 0x0E << 5,
 AARCH64_INSN_HINT_PACIAZ = 0x18 << 5,
 AARCH64_INSN_HINT_PACIASP = 0x19 << 5,
 AARCH64_INSN_HINT_PACIBZ = 0x1A << 5,
 AARCH64_INSN_HINT_PACIBSP = 0x1B << 5,
 AARCH64_INSN_HINT_AUTIAZ = 0x1C << 5,
 AARCH64_INSN_HINT_AUTIASP = 0x1D << 5,
 AARCH64_INSN_HINT_AUTIBZ = 0x1E << 5,
 AARCH64_INSN_HINT_AUTIBSP = 0x1F << 5,

 AARCH64_INSN_HINT_ESB = 0x10 << 5,
 AARCH64_INSN_HINT_PSB = 0x11 << 5,
 AARCH64_INSN_HINT_TSB = 0x12 << 5,
 AARCH64_INSN_HINT_CSDB = 0x14 << 5,

 AARCH64_INSN_HINT_BTI = 0x20 << 5,
 AARCH64_INSN_HINT_BTIC = 0x22 << 5,
 AARCH64_INSN_HINT_BTIJ = 0x24 << 5,
 AARCH64_INSN_HINT_BTIJC = 0x26 << 5,
};

enum aarch64_insn_imm_type {
 AARCH64_INSN_IMM_ADR,
 AARCH64_INSN_IMM_26,
 AARCH64_INSN_IMM_19,
 AARCH64_INSN_IMM_16,
 AARCH64_INSN_IMM_14,
 AARCH64_INSN_IMM_12,
 AARCH64_INSN_IMM_9,
 AARCH64_INSN_IMM_7,
 AARCH64_INSN_IMM_6,
 AARCH64_INSN_IMM_S,
 AARCH64_INSN_IMM_R,
 AARCH64_INSN_IMM_N,
 AARCH64_INSN_IMM_MAX
};

enum aarch64_insn_register_type {
 AARCH64_INSN_REGTYPE_RT,
 AARCH64_INSN_REGTYPE_RN,
 AARCH64_INSN_REGTYPE_RT2,
 AARCH64_INSN_REGTYPE_RM,
 AARCH64_INSN_REGTYPE_RD,
 AARCH64_INSN_REGTYPE_RA,
 AARCH64_INSN_REGTYPE_RS,
};

enum aarch64_insn_register {
 AARCH64_INSN_REG_0 = 0,
 AARCH64_INSN_REG_1 = 1,
 AARCH64_INSN_REG_2 = 2,
 AARCH64_INSN_REG_3 = 3,
 AARCH64_INSN_REG_4 = 4,
 AARCH64_INSN_REG_5 = 5,
 AARCH64_INSN_REG_6 = 6,
 AARCH64_INSN_REG_7 = 7,
 AARCH64_INSN_REG_8 = 8,
 AARCH64_INSN_REG_9 = 9,
 AARCH64_INSN_REG_10 = 10,
 AARCH64_INSN_REG_11 = 11,
 AARCH64_INSN_REG_12 = 12,
 AARCH64_INSN_REG_13 = 13,
 AARCH64_INSN_REG_14 = 14,
 AARCH64_INSN_REG_15 = 15,
 AARCH64_INSN_REG_16 = 16,
 AARCH64_INSN_REG_17 = 17,
 AARCH64_INSN_REG_18 = 18,
 AARCH64_INSN_REG_19 = 19,
 AARCH64_INSN_REG_20 = 20,
 AARCH64_INSN_REG_21 = 21,
 AARCH64_INSN_REG_22 = 22,
 AARCH64_INSN_REG_23 = 23,
 AARCH64_INSN_REG_24 = 24,
 AARCH64_INSN_REG_25 = 25,
 AARCH64_INSN_REG_26 = 26,
 AARCH64_INSN_REG_27 = 27,
 AARCH64_INSN_REG_28 = 28,
 AARCH64_INSN_REG_29 = 29,
 AARCH64_INSN_REG_FP = 29,
 AARCH64_INSN_REG_30 = 30,
 AARCH64_INSN_REG_LR = 30,
 AARCH64_INSN_REG_ZR = 31,
 AARCH64_INSN_REG_SP = 31
};

enum aarch64_insn_special_register {
 AARCH64_INSN_SPCLREG_SPSR_EL1 = 0xC200,
 AARCH64_INSN_SPCLREG_ELR_EL1 = 0xC201,
 AARCH64_INSN_SPCLREG_SP_EL0 = 0xC208,
 AARCH64_INSN_SPCLREG_SPSEL = 0xC210,
 AARCH64_INSN_SPCLREG_CURRENTEL = 0xC212,
 AARCH64_INSN_SPCLREG_DAIF = 0xDA11,
 AARCH64_INSN_SPCLREG_NZCV = 0xDA10,
 AARCH64_INSN_SPCLREG_FPCR = 0xDA20,
 AARCH64_INSN_SPCLREG_DSPSR_EL0 = 0xDA28,
 AARCH64_INSN_SPCLREG_DLR_EL0 = 0xDA29,
 AARCH64_INSN_SPCLREG_SPSR_EL2 = 0xE200,
 AARCH64_INSN_SPCLREG_ELR_EL2 = 0xE201,
 AARCH64_INSN_SPCLREG_SP_EL1 = 0xE208,
 AARCH64_INSN_SPCLREG_SPSR_INQ = 0xE218,
 AARCH64_INSN_SPCLREG_SPSR_ABT = 0xE219,
 AARCH64_INSN_SPCLREG_SPSR_UND = 0xE21A,
 AARCH64_INSN_SPCLREG_SPSR_FIQ = 0xE21B,
 AARCH64_INSN_SPCLREG_SPSR_EL3 = 0xF200,
 AARCH64_INSN_SPCLREG_ELR_EL3 = 0xF201,
 AARCH64_INSN_SPCLREG_SP_EL2 = 0xF210
};

enum aarch64_insn_variant {
 AARCH64_INSN_VARIANT_32BIT,
 AARCH64_INSN_VARIANT_64BIT
};

enum aarch64_insn_condition {
 AARCH64_INSN_COND_EQ = 0x0,
 AARCH64_INSN_COND_NE = 0x1,
 AARCH64_INSN_COND_CS = 0x2,
 AARCH64_INSN_COND_CC = 0x3,
 AARCH64_INSN_COND_MI = 0x4,
 AARCH64_INSN_COND_PL = 0x5,
 AARCH64_INSN_COND_VS = 0x6,
 AARCH64_INSN_COND_VC = 0x7,
 AARCH64_INSN_COND_HI = 0x8,
 AARCH64_INSN_COND_LS = 0x9,
 AARCH64_INSN_COND_GE = 0xa,
 AARCH64_INSN_COND_LT = 0xb,
 AARCH64_INSN_COND_GT = 0xc,
 AARCH64_INSN_COND_LE = 0xd,
 AARCH64_INSN_COND_AL = 0xe,
};

enum aarch64_insn_branch_type {
 AARCH64_INSN_BRANCH_NOLINK,
 AARCH64_INSN_BRANCH_LINK,
 AARCH64_INSN_BRANCH_RETURN,
 AARCH64_INSN_BRANCH_COMP_ZERO,
 AARCH64_INSN_BRANCH_COMP_NONZERO,
};

enum aarch64_insn_size_type {
 AARCH64_INSN_SIZE_8,
 AARCH64_INSN_SIZE_16,
 AARCH64_INSN_SIZE_32,
 AARCH64_INSN_SIZE_64,
};

enum aarch64_insn_ldst_type {
 AARCH64_INSN_LDST_LOAD_REG_OFFSET,
 AARCH64_INSN_LDST_STORE_REG_OFFSET,
 AARCH64_INSN_LDST_LOAD_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_LOAD_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_LOAD_EX,
 AARCH64_INSN_LDST_STORE_EX,
};

enum aarch64_insn_adsb_type {
 AARCH64_INSN_ADSB_ADD,
 AARCH64_INSN_ADSB_SUB,
 AARCH64_INSN_ADSB_ADD_SETFLAGS,
 AARCH64_INSN_ADSB_SUB_SETFLAGS
};

enum aarch64_insn_movewide_type {
 AARCH64_INSN_MOVEWIDE_ZERO,
 AARCH64_INSN_MOVEWIDE_KEEP,
 AARCH64_INSN_MOVEWIDE_INVERSE
};

enum aarch64_insn_bitfield_type {
 AARCH64_INSN_BITFIELD_MOVE,
 AARCH64_INSN_BITFIELD_MOVE_UNSIGNED,
 AARCH64_INSN_BITFIELD_MOVE_SIGNED
};

enum aarch64_insn_data1_type {
 AARCH64_INSN_DATA1_REVERSE_16,
 AARCH64_INSN_DATA1_REVERSE_32,
 AARCH64_INSN_DATA1_REVERSE_64,
};

enum aarch64_insn_data2_type {
 AARCH64_INSN_DATA2_UDIV,
 AARCH64_INSN_DATA2_SDIV,
 AARCH64_INSN_DATA2_LSLV,
 AARCH64_INSN_DATA2_LSRV,
 AARCH64_INSN_DATA2_ASRV,
 AARCH64_INSN_DATA2_RORV,
};

enum aarch64_insn_data3_type {
 AARCH64_INSN_DATA3_MADD,
 AARCH64_INSN_DATA3_MSUB,
};

enum aarch64_insn_logic_type {
 AARCH64_INSN_LOGIC_AND,
 AARCH64_INSN_LOGIC_BIC,
 AARCH64_INSN_LOGIC_ORR,
 AARCH64_INSN_LOGIC_ORN,
 AARCH64_INSN_LOGIC_EOR,
 AARCH64_INSN_LOGIC_EON,
 AARCH64_INSN_LOGIC_AND_SETFLAGS,
 AARCH64_INSN_LOGIC_BIC_SETFLAGS
};

enum aarch64_insn_prfm_type {
 AARCH64_INSN_PRFM_TYPE_PLD,
 AARCH64_INSN_PRFM_TYPE_PLI,
 AARCH64_INSN_PRFM_TYPE_PST,
};

enum aarch64_insn_prfm_target {
 AARCH64_INSN_PRFM_TARGET_L1,
 AARCH64_INSN_PRFM_TARGET_L2,
 AARCH64_INSN_PRFM_TARGET_L3,
};

enum aarch64_insn_prfm_policy {
 AARCH64_INSN_PRFM_POLICY_KEEP,
 AARCH64_INSN_PRFM_POLICY_STRM,
};

enum aarch64_insn_adr_type {
 AARCH64_INSN_ADR_TYPE_ADRP,
 AARCH64_INSN_ADR_TYPE_ADR,
};
# 294 "./arch/arm64/include/asm/insn.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adr(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_22(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x9F000000) & (0x10000000)"))); if (!(!(~(0x9F000000) & (0x10000000)))) __compiletime_assert_22(); } while (0); return (code & (0x9F000000)) == (0x10000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adr_value(void) { return (0x10000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adrp(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_23(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x9F000000) & (0x90000000)"))); if (!(!(~(0x9F000000) & (0x90000000)))) __compiletime_assert_23(); } while (0); return (code & (0x9F000000)) == (0x90000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adrp_value(void) { return (0x90000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_prfm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_24(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FC00000) & (0x39800000)"))); if (!(!(~(0x3FC00000) & (0x39800000)))) __compiletime_assert_24(); } while (0); return (code & (0x3FC00000)) == (0x39800000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_prfm_value(void) { return (0x39800000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_prfm_lit(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_25(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFF000000) & (0xD8000000)"))); if (!(!(~(0xFF000000) & (0xD8000000)))) __compiletime_assert_25(); } while (0); return (code & (0xFF000000)) == (0xD8000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_prfm_lit_value(void) { return (0xD8000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_store_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_26(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FC00000) & (0x39000000)"))); if (!(!(~(0x3FC00000) & (0x39000000)))) __compiletime_assert_26(); } while (0); return (code & (0x3FC00000)) == (0x39000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_store_imm_value(void) { return (0x39000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_load_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_27(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FC00000) & (0x39400000)"))); if (!(!(~(0x3FC00000) & (0x39400000)))) __compiletime_assert_27(); } while (0); return (code & (0x3FC00000)) == (0x39400000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_load_imm_value(void) { return (0x39400000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_store_pre(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_28(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FE00C00) & (0x38000C00)"))); if (!(!(~(0x3FE00C00) & (0x38000C00)))) __compiletime_assert_28(); } while (0); return (code & (0x3FE00C00)) == (0x38000C00); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_store_pre_value(void) { return (0x38000C00); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_load_pre(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_29(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FE00C00) & (0x38400C00)"))); if (!(!(~(0x3FE00C00) & (0x38400C00)))) __compiletime_assert_29(); } while (0); return (code & (0x3FE00C00)) == (0x38400C00); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_load_pre_value(void) { return (0x38400C00); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_store_post(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_30(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FE00C00) & (0x38000400)"))); if (!(!(~(0x3FE00C00) & (0x38000400)))) __compiletime_assert_30(); } while (0); return (code & (0x3FE00C00)) == (0x38000400); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_store_post_value(void) { return (0x38000400); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_load_post(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_31(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FE00C00) & (0x38400400)"))); if (!(!(~(0x3FE00C00) & (0x38400400)))) __compiletime_assert_31(); } while (0); return (code & (0x3FE00C00)) == (0x38400400); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_load_post_value(void) { return (0x38400400); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_str_reg(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_32(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FE0EC00) & (0x38206800)"))); if (!(!(~(0x3FE0EC00) & (0x38206800)))) __compiletime_assert_32(); } while (0); return (code & (0x3FE0EC00)) == (0x38206800); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_str_reg_value(void) { return (0x38206800); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldadd(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_33(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3F20FC00) & (0x38200000)"))); if (!(!(~(0x3F20FC00) & (0x38200000)))) __compiletime_assert_33(); } while (0); return (code & (0x3F20FC00)) == (0x38200000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldadd_value(void) { return (0x38200000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldr_reg(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_34(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3FE0EC00) & (0x38606800)"))); if (!(!(~(0x3FE0EC00) & (0x38606800)))) __compiletime_assert_34(); } while (0); return (code & (0x3FE0EC00)) == (0x38606800); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldr_reg_value(void) { return (0x38606800); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldr_lit(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_35(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xBF000000) & (0x18000000)"))); if (!(!(~(0xBF000000) & (0x18000000)))) __compiletime_assert_35(); } while (0); return (code & (0xBF000000)) == (0x18000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldr_lit_value(void) { return (0x18000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldrsw_lit(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_36(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFF000000) & (0x98000000)"))); if (!(!(~(0xFF000000) & (0x98000000)))) __compiletime_assert_36(); } while (0); return (code & (0xFF000000)) == (0x98000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldrsw_lit_value(void) { return (0x98000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_exclusive(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_37(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3F800000) & (0x08000000)"))); if (!(!(~(0x3F800000) & (0x08000000)))) __compiletime_assert_37(); } while (0); return (code & (0x3F800000)) == (0x08000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_exclusive_value(void) { return (0x08000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_load_ex(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_38(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3F400000) & (0x08400000)"))); if (!(!(~(0x3F400000) & (0x08400000)))) __compiletime_assert_38(); } while (0); return (code & (0x3F400000)) == (0x08400000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_load_ex_value(void) { return (0x08400000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_store_ex(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_39(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x3F400000) & (0x08000000)"))); if (!(!(~(0x3F400000) & (0x08000000)))) __compiletime_assert_39(); } while (0); return (code & (0x3F400000)) == (0x08000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_store_ex_value(void) { return (0x08000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_stp(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_40(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FC00000) & (0x29000000)"))); if (!(!(~(0x7FC00000) & (0x29000000)))) __compiletime_assert_40(); } while (0); return (code & (0x7FC00000)) == (0x29000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_stp_value(void) { return (0x29000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldp(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_41(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FC00000) & (0x29400000)"))); if (!(!(~(0x7FC00000) & (0x29400000)))) __compiletime_assert_41(); } while (0); return (code & (0x7FC00000)) == (0x29400000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldp_value(void) { return (0x29400000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_stp_post(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_42(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FC00000) & (0x28800000)"))); if (!(!(~(0x7FC00000) & (0x28800000)))) __compiletime_assert_42(); } while (0); return (code & (0x7FC00000)) == (0x28800000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_stp_post_value(void) { return (0x28800000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldp_post(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_43(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FC00000) & (0x28C00000)"))); if (!(!(~(0x7FC00000) & (0x28C00000)))) __compiletime_assert_43(); } while (0); return (code & (0x7FC00000)) == (0x28C00000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldp_post_value(void) { return (0x28C00000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_stp_pre(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_44(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FC00000) & (0x29800000)"))); if (!(!(~(0x7FC00000) & (0x29800000)))) __compiletime_assert_44(); } while (0); return (code & (0x7FC00000)) == (0x29800000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_stp_pre_value(void) { return (0x29800000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldp_pre(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_45(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FC00000) & (0x29C00000)"))); if (!(!(~(0x7FC00000) & (0x29C00000)))) __compiletime_assert_45(); } while (0); return (code & (0x7FC00000)) == (0x29C00000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldp_pre_value(void) { return (0x29C00000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_add_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_46(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x11000000)"))); if (!(!(~(0x7F000000) & (0x11000000)))) __compiletime_assert_46(); } while (0); return (code & (0x7F000000)) == (0x11000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_add_imm_value(void) { return (0x11000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adds_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_47(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x31000000)"))); if (!(!(~(0x7F000000) & (0x31000000)))) __compiletime_assert_47(); } while (0); return (code & (0x7F000000)) == (0x31000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adds_imm_value(void) { return (0x31000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sub_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_48(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x51000000)"))); if (!(!(~(0x7F000000) & (0x51000000)))) __compiletime_assert_48(); } while (0); return (code & (0x7F000000)) == (0x51000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sub_imm_value(void) { return (0x51000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_subs_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_49(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x71000000)"))); if (!(!(~(0x7F000000) & (0x71000000)))) __compiletime_assert_49(); } while (0); return (code & (0x7F000000)) == (0x71000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_subs_imm_value(void) { return (0x71000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_movn(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_50(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x12800000)"))); if (!(!(~(0x7F800000) & (0x12800000)))) __compiletime_assert_50(); } while (0); return (code & (0x7F800000)) == (0x12800000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_movn_value(void) { return (0x12800000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sbfm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_51(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x13000000)"))); if (!(!(~(0x7F800000) & (0x13000000)))) __compiletime_assert_51(); } while (0); return (code & (0x7F800000)) == (0x13000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sbfm_value(void) { return (0x13000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bfm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_52(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x33000000)"))); if (!(!(~(0x7F800000) & (0x33000000)))) __compiletime_assert_52(); } while (0); return (code & (0x7F800000)) == (0x33000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bfm_value(void) { return (0x33000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_movz(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_53(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x52800000)"))); if (!(!(~(0x7F800000) & (0x52800000)))) __compiletime_assert_53(); } while (0); return (code & (0x7F800000)) == (0x52800000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_movz_value(void) { return (0x52800000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ubfm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_54(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x53000000)"))); if (!(!(~(0x7F800000) & (0x53000000)))) __compiletime_assert_54(); } while (0); return (code & (0x7F800000)) == (0x53000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ubfm_value(void) { return (0x53000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_movk(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_55(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x72800000)"))); if (!(!(~(0x7F800000) & (0x72800000)))) __compiletime_assert_55(); } while (0); return (code & (0x7F800000)) == (0x72800000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_movk_value(void) { return (0x72800000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_add(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_56(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x0B000000)"))); if (!(!(~(0x7F200000) & (0x0B000000)))) __compiletime_assert_56(); } while (0); return (code & (0x7F200000)) == (0x0B000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_add_value(void) { return (0x0B000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adds(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_57(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x2B000000)"))); if (!(!(~(0x7F200000) & (0x2B000000)))) __compiletime_assert_57(); } while (0); return (code & (0x7F200000)) == (0x2B000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adds_value(void) { return (0x2B000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sub(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_58(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x4B000000)"))); if (!(!(~(0x7F200000) & (0x4B000000)))) __compiletime_assert_58(); } while (0); return (code & (0x7F200000)) == (0x4B000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sub_value(void) { return (0x4B000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_subs(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_59(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x6B000000)"))); if (!(!(~(0x7F200000) & (0x6B000000)))) __compiletime_assert_59(); } while (0); return (code & (0x7F200000)) == (0x6B000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_subs_value(void) { return (0x6B000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_madd(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_60(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE08000) & (0x1B000000)"))); if (!(!(~(0x7FE08000) & (0x1B000000)))) __compiletime_assert_60(); } while (0); return (code & (0x7FE08000)) == (0x1B000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_madd_value(void) { return (0x1B000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_msub(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_61(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE08000) & (0x1B008000)"))); if (!(!(~(0x7FE08000) & (0x1B008000)))) __compiletime_assert_61(); } while (0); return (code & (0x7FE08000)) == (0x1B008000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_msub_value(void) { return (0x1B008000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_udiv(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_62(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE0FC00) & (0x1AC00800)"))); if (!(!(~(0x7FE0FC00) & (0x1AC00800)))) __compiletime_assert_62(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC00800); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_udiv_value(void) { return (0x1AC00800); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sdiv(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_63(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE0FC00) & (0x1AC00C00)"))); if (!(!(~(0x7FE0FC00) & (0x1AC00C00)))) __compiletime_assert_63(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC00C00); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sdiv_value(void) { return (0x1AC00C00); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_lslv(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_64(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE0FC00) & (0x1AC02000)"))); if (!(!(~(0x7FE0FC00) & (0x1AC02000)))) __compiletime_assert_64(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_lslv_value(void) { return (0x1AC02000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_lsrv(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_65(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE0FC00) & (0x1AC02400)"))); if (!(!(~(0x7FE0FC00) & (0x1AC02400)))) __compiletime_assert_65(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02400); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_lsrv_value(void) { return (0x1AC02400); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_asrv(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_66(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE0FC00) & (0x1AC02800)"))); if (!(!(~(0x7FE0FC00) & (0x1AC02800)))) __compiletime_assert_66(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02800); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_asrv_value(void) { return (0x1AC02800); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rorv(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_67(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE0FC00) & (0x1AC02C00)"))); if (!(!(~(0x7FE0FC00) & (0x1AC02C00)))) __compiletime_assert_67(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02C00); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rorv_value(void) { return (0x1AC02C00); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rev16(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_68(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FFFFC00) & (0x5AC00400)"))); if (!(!(~(0x7FFFFC00) & (0x5AC00400)))) __compiletime_assert_68(); } while (0); return (code & (0x7FFFFC00)) == (0x5AC00400); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rev16_value(void) { return (0x5AC00400); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rev32(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_69(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FFFFC00) & (0x5AC00800)"))); if (!(!(~(0x7FFFFC00) & (0x5AC00800)))) __compiletime_assert_69(); } while (0); return (code & (0x7FFFFC00)) == (0x5AC00800); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rev32_value(void) { return (0x5AC00800); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rev64(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_70(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FFFFC00) & (0x5AC00C00)"))); if (!(!(~(0x7FFFFC00) & (0x5AC00C00)))) __compiletime_assert_70(); } while (0); return (code & (0x7FFFFC00)) == (0x5AC00C00); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rev64_value(void) { return (0x5AC00C00); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_and(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_71(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x0A000000)"))); if (!(!(~(0x7F200000) & (0x0A000000)))) __compiletime_assert_71(); } while (0); return (code & (0x7F200000)) == (0x0A000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_and_value(void) { return (0x0A000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bic(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_72(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x0A200000)"))); if (!(!(~(0x7F200000) & (0x0A200000)))) __compiletime_assert_72(); } while (0); return (code & (0x7F200000)) == (0x0A200000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bic_value(void) { return (0x0A200000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_orr(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_73(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x2A000000)"))); if (!(!(~(0x7F200000) & (0x2A000000)))) __compiletime_assert_73(); } while (0); return (code & (0x7F200000)) == (0x2A000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_orr_value(void) { return (0x2A000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_mov_reg(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_74(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FE0FFE0) & (0x2A0003E0)"))); if (!(!(~(0x7FE0FFE0) & (0x2A0003E0)))) __compiletime_assert_74(); } while (0); return (code & (0x7FE0FFE0)) == (0x2A0003E0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_mov_reg_value(void) { return (0x2A0003E0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_orn(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_75(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x2A200000)"))); if (!(!(~(0x7F200000) & (0x2A200000)))) __compiletime_assert_75(); } while (0); return (code & (0x7F200000)) == (0x2A200000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_orn_value(void) { return (0x2A200000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eor(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_76(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x4A000000)"))); if (!(!(~(0x7F200000) & (0x4A000000)))) __compiletime_assert_76(); } while (0); return (code & (0x7F200000)) == (0x4A000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eor_value(void) { return (0x4A000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eon(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_77(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x4A200000)"))); if (!(!(~(0x7F200000) & (0x4A200000)))) __compiletime_assert_77(); } while (0); return (code & (0x7F200000)) == (0x4A200000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eon_value(void) { return (0x4A200000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ands(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_78(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x6A000000)"))); if (!(!(~(0x7F200000) & (0x6A000000)))) __compiletime_assert_78(); } while (0); return (code & (0x7F200000)) == (0x6A000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ands_value(void) { return (0x6A000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bics(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_79(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F200000) & (0x6A200000)"))); if (!(!(~(0x7F200000) & (0x6A200000)))) __compiletime_assert_79(); } while (0); return (code & (0x7F200000)) == (0x6A200000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bics_value(void) { return (0x6A200000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_and_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_80(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x12000000)"))); if (!(!(~(0x7F800000) & (0x12000000)))) __compiletime_assert_80(); } while (0); return (code & (0x7F800000)) == (0x12000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_and_imm_value(void) { return (0x12000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_orr_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_81(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x32000000)"))); if (!(!(~(0x7F800000) & (0x32000000)))) __compiletime_assert_81(); } while (0); return (code & (0x7F800000)) == (0x32000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_orr_imm_value(void) { return (0x32000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eor_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_82(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x52000000)"))); if (!(!(~(0x7F800000) & (0x52000000)))) __compiletime_assert_82(); } while (0); return (code & (0x7F800000)) == (0x52000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eor_imm_value(void) { return (0x52000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ands_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_83(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F800000) & (0x72000000)"))); if (!(!(~(0x7F800000) & (0x72000000)))) __compiletime_assert_83(); } while (0); return (code & (0x7F800000)) == (0x72000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ands_imm_value(void) { return (0x72000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_extr(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_84(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7FA00000) & (0x13800000)"))); if (!(!(~(0x7FA00000) & (0x13800000)))) __compiletime_assert_84(); } while (0); return (code & (0x7FA00000)) == (0x13800000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_extr_value(void) { return (0x13800000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_b(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_85(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFC000000) & (0x14000000)"))); if (!(!(~(0xFC000000) & (0x14000000)))) __compiletime_assert_85(); } while (0); return (code & (0xFC000000)) == (0x14000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_b_value(void) { return (0x14000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bl(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_86(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFC000000) & (0x94000000)"))); if (!(!(~(0xFC000000) & (0x94000000)))) __compiletime_assert_86(); } while (0); return (code & (0xFC000000)) == (0x94000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bl_value(void) { return (0x94000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_cbz(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_87(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x34000000)"))); if (!(!(~(0x7F000000) & (0x34000000)))) __compiletime_assert_87(); } while (0); return (code & (0x7F000000)) == (0x34000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_cbz_value(void) { return (0x34000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_cbnz(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_88(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x35000000)"))); if (!(!(~(0x7F000000) & (0x35000000)))) __compiletime_assert_88(); } while (0); return (code & (0x7F000000)) == (0x35000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_cbnz_value(void) { return (0x35000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_tbz(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_89(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x36000000)"))); if (!(!(~(0x7F000000) & (0x36000000)))) __compiletime_assert_89(); } while (0); return (code & (0x7F000000)) == (0x36000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_tbz_value(void) { return (0x36000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_tbnz(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_90(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0x7F000000) & (0x37000000)"))); if (!(!(~(0x7F000000) & (0x37000000)))) __compiletime_assert_90(); } while (0); return (code & (0x7F000000)) == (0x37000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_tbnz_value(void) { return (0x37000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bcond(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_91(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFF000010) & (0x54000000)"))); if (!(!(~(0xFF000010) & (0x54000000)))) __compiletime_assert_91(); } while (0); return (code & (0xFF000010)) == (0x54000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bcond_value(void) { return (0x54000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_svc(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_92(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFE0001F) & (0xD4000001)"))); if (!(!(~(0xFFE0001F) & (0xD4000001)))) __compiletime_assert_92(); } while (0); return (code & (0xFFE0001F)) == (0xD4000001); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_svc_value(void) { return (0xD4000001); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_hvc(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_93(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFE0001F) & (0xD4000002)"))); if (!(!(~(0xFFE0001F) & (0xD4000002)))) __compiletime_assert_93(); } while (0); return (code & (0xFFE0001F)) == (0xD4000002); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_hvc_value(void) { return (0xD4000002); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_smc(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_94(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFE0001F) & (0xD4000003)"))); if (!(!(~(0xFFE0001F) & (0xD4000003)))) __compiletime_assert_94(); } while (0); return (code & (0xFFE0001F)) == (0xD4000003); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_smc_value(void) { return (0xD4000003); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_brk(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_95(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFE0001F) & (0xD4200000)"))); if (!(!(~(0xFFE0001F) & (0xD4200000)))) __compiletime_assert_95(); } while (0); return (code & (0xFFE0001F)) == (0xD4200000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_brk_value(void) { return (0xD4200000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_exception(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_96(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFF000000) & (0xD4000000)"))); if (!(!(~(0xFF000000) & (0xD4000000)))) __compiletime_assert_96(); } while (0); return (code & (0xFF000000)) == (0xD4000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_exception_value(void) { return (0xD4000000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_hint(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_97(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFF01F) & (0xD503201F)"))); if (!(!(~(0xFFFFF01F) & (0xD503201F)))) __compiletime_assert_97(); } while (0); return (code & (0xFFFFF01F)) == (0xD503201F); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_hint_value(void) { return (0xD503201F); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_br(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_98(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFC1F) & (0xD61F0000)"))); if (!(!(~(0xFFFFFC1F) & (0xD61F0000)))) __compiletime_assert_98(); } while (0); return (code & (0xFFFFFC1F)) == (0xD61F0000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_br_value(void) { return (0xD61F0000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_br_auth(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_99(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFEFFF800) & (0xD61F0800)"))); if (!(!(~(0xFEFFF800) & (0xD61F0800)))) __compiletime_assert_99(); } while (0); return (code & (0xFEFFF800)) == (0xD61F0800); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_br_auth_value(void) { return (0xD61F0800); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_blr(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_100(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFC1F) & (0xD63F0000)"))); if (!(!(~(0xFFFFFC1F) & (0xD63F0000)))) __compiletime_assert_100(); } while (0); return (code & (0xFFFFFC1F)) == (0xD63F0000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_blr_value(void) { return (0xD63F0000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_blr_auth(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_101(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFEFFF800) & (0xD63F0800)"))); if (!(!(~(0xFEFFF800) & (0xD63F0800)))) __compiletime_assert_101(); } while (0); return (code & (0xFEFFF800)) == (0xD63F0800); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_blr_auth_value(void) { return (0xD63F0800); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ret(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_102(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFC1F) & (0xD65F0000)"))); if (!(!(~(0xFFFFFC1F) & (0xD65F0000)))) __compiletime_assert_102(); } while (0); return (code & (0xFFFFFC1F)) == (0xD65F0000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ret_value(void) { return (0xD65F0000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ret_auth(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_103(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFBFF) & (0xD65F0BFF)"))); if (!(!(~(0xFFFFFBFF) & (0xD65F0BFF)))) __compiletime_assert_103(); } while (0); return (code & (0xFFFFFBFF)) == (0xD65F0BFF); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ret_auth_value(void) { return (0xD65F0BFF); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eret(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_104(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFFFF) & (0xD69F03E0)"))); if (!(!(~(0xFFFFFFFF) & (0xD69F03E0)))) __compiletime_assert_104(); } while (0); return (code & (0xFFFFFFFF)) == (0xD69F03E0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eret_value(void) { return (0xD69F03E0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eret_auth(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_105(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFBFF) & (0xD69F0BFF)"))); if (!(!(~(0xFFFFFBFF) & (0xD69F0BFF)))) __compiletime_assert_105(); } while (0); return (code & (0xFFFFFBFF)) == (0xD69F0BFF); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eret_auth_value(void) { return (0xD69F0BFF); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_mrs(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_106(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFF00000) & (0xD5300000)"))); if (!(!(~(0xFFF00000) & (0xD5300000)))) __compiletime_assert_106(); } while (0); return (code & (0xFFF00000)) == (0xD5300000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_mrs_value(void) { return (0xD5300000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_msr_imm(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_107(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFF8F01F) & (0xD500401F)"))); if (!(!(~(0xFFF8F01F) & (0xD500401F)))) __compiletime_assert_107(); } while (0); return (code & (0xFFF8F01F)) == (0xD500401F); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_msr_imm_value(void) { return (0xD500401F); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_msr_reg(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_108(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFF00000) & (0xD5100000)"))); if (!(!(~(0xFFF00000) & (0xD5100000)))) __compiletime_assert_108(); } while (0); return (code & (0xFFF00000)) == (0xD5100000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_msr_reg_value(void) { return (0xD5100000); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_dmb(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_109(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFF0FF) & (0xD50330BF)"))); if (!(!(~(0xFFFFF0FF) & (0xD50330BF)))) __compiletime_assert_109(); } while (0); return (code & (0xFFFFF0FF)) == (0xD50330BF); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_dmb_value(void) { return (0xD50330BF); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_dsb_base(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_110(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFF0FF) & (0xD503309F)"))); if (!(!(~(0xFFFFF0FF) & (0xD503309F)))) __compiletime_assert_110(); } while (0); return (code & (0xFFFFF0FF)) == (0xD503309F); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_dsb_base_value(void) { return (0xD503309F); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_dsb_nxs(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_111(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFF3FF) & (0xD503323F)"))); if (!(!(~(0xFFFFF3FF) & (0xD503323F)))) __compiletime_assert_111(); } while (0); return (code & (0xFFFFF3FF)) == (0xD503323F); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_dsb_nxs_value(void) { return (0xD503323F); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_isb(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_112(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFF0FF) & (0xD50330DF)"))); if (!(!(~(0xFFFFF0FF) & (0xD50330DF)))) __compiletime_assert_112(); } while (0); return (code & (0xFFFFF0FF)) == (0xD50330DF); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_isb_value(void) { return (0xD50330DF); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sb(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_113(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFFFF) & (0xD50330FF)"))); if (!(!(~(0xFFFFFFFF) & (0xD50330FF)))) __compiletime_assert_113(); } while (0); return (code & (0xFFFFFFFF)) == (0xD50330FF); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sb_value(void) { return (0xD50330FF); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_clrex(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_114(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFF0FF) & (0xD503305F)"))); if (!(!(~(0xFFFFF0FF) & (0xD503305F)))) __compiletime_assert_114(); } while (0); return (code & (0xFFFFF0FF)) == (0xD503305F); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_clrex_value(void) { return (0xD503305F); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ssbb(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_115(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFFFF) & (0xD503309F)"))); if (!(!(~(0xFFFFFFFF) & (0xD503309F)))) __compiletime_assert_115(); } while (0); return (code & (0xFFFFFFFF)) == (0xD503309F); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ssbb_value(void) { return (0xD503309F); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_pssbb(u32 code) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_116(void) __attribute__((__error__("BUILD_BUG_ON failed: " "~(0xFFFFFFFF) & (0xD503349F)"))); if (!(!(~(0xFFFFFFFF) & (0xD503349F)))) __compiletime_assert_116(); } while (0); return (code & (0xFFFFFFFF)) == (0xD503349F); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_pssbb_value(void) { return (0xD503349F); }



bool aarch64_insn_is_steppable_hint(u32 insn);
bool aarch64_insn_is_branch_imm(u32 insn);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_adr_adrp(u32 insn)
{
 return aarch64_insn_is_adr(insn) || aarch64_insn_is_adrp(insn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_dsb(u32 insn)
{
 return aarch64_insn_is_dsb_base(insn) || aarch64_insn_is_dsb_nxs(insn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_barrier(u32 insn)
{
 return aarch64_insn_is_dmb(insn) || aarch64_insn_is_dsb(insn) ||
        aarch64_insn_is_isb(insn) || aarch64_insn_is_sb(insn) ||
        aarch64_insn_is_clrex(insn) || aarch64_insn_is_ssbb(insn) ||
        aarch64_insn_is_pssbb(insn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_store_single(u32 insn)
{
 return aarch64_insn_is_store_imm(insn) ||
        aarch64_insn_is_store_pre(insn) ||
        aarch64_insn_is_store_post(insn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_store_pair(u32 insn)
{
 return aarch64_insn_is_stp(insn) ||
        aarch64_insn_is_stp_pre(insn) ||
        aarch64_insn_is_stp_post(insn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_load_single(u32 insn)
{
 return aarch64_insn_is_load_imm(insn) ||
        aarch64_insn_is_load_pre(insn) ||
        aarch64_insn_is_load_post(insn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_load_pair(u32 insn)
{
 return aarch64_insn_is_ldp(insn) ||
        aarch64_insn_is_ldp_pre(insn) ||
        aarch64_insn_is_ldp_post(insn);
}

enum aarch64_insn_encoding_class aarch64_get_insn_class(u32 insn);
bool aarch64_insn_uses_literal(u32 insn);
bool aarch64_insn_is_branch(u32 insn);
u64 aarch64_insn_decode_immediate(enum aarch64_insn_imm_type type, u32 insn);
u32 aarch64_insn_encode_immediate(enum aarch64_insn_imm_type type,
      u32 insn, u64 imm);
u32 aarch64_insn_decode_register(enum aarch64_insn_register_type type,
      u32 insn);
u32 aarch64_insn_gen_branch_imm(unsigned long pc, unsigned long addr,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_comp_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_register reg,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_cond_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_condition cond);
u32 aarch64_insn_gen_hint(enum aarch64_insn_hint_cr_op op);
u32 aarch64_insn_gen_nop(void);
u32 aarch64_insn_gen_branch_reg(enum aarch64_insn_register reg,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_load_store_reg(enum aarch64_insn_register reg,
        enum aarch64_insn_register base,
        enum aarch64_insn_register offset,
        enum aarch64_insn_size_type size,
        enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_pair(enum aarch64_insn_register reg1,
         enum aarch64_insn_register reg2,
         enum aarch64_insn_register base,
         int offset,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_ex(enum aarch64_insn_register reg,
       enum aarch64_insn_register base,
       enum aarch64_insn_register state,
       enum aarch64_insn_size_type size,
       enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_ldadd(enum aarch64_insn_register result,
      enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_stadd(enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_add_sub_imm(enum aarch64_insn_register dst,
     enum aarch64_insn_register src,
     int imm, enum aarch64_insn_variant variant,
     enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_adr(unsigned long pc, unsigned long addr,
    enum aarch64_insn_register reg,
    enum aarch64_insn_adr_type type);
u32 aarch64_insn_gen_bitfield(enum aarch64_insn_register dst,
         enum aarch64_insn_register src,
         int immr, int imms,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_bitfield_type type);
u32 aarch64_insn_gen_movewide(enum aarch64_insn_register dst,
         int imm, int shift,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_movewide_type type);
u32 aarch64_insn_gen_add_sub_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_data1(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data1_type type);
u32 aarch64_insn_gen_data2(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data2_type type);
u32 aarch64_insn_gen_data3(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg1,
      enum aarch64_insn_register reg2,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data3_type type);
u32 aarch64_insn_gen_logical_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_logic_type type);
u32 aarch64_insn_gen_move_reg(enum aarch64_insn_register dst,
         enum aarch64_insn_register src,
         enum aarch64_insn_variant variant);
u32 aarch64_insn_gen_logical_immediate(enum aarch64_insn_logic_type type,
           enum aarch64_insn_variant variant,
           enum aarch64_insn_register Rn,
           enum aarch64_insn_register Rd,
           u64 imm);
u32 aarch64_insn_gen_extr(enum aarch64_insn_variant variant,
     enum aarch64_insn_register Rm,
     enum aarch64_insn_register Rn,
     enum aarch64_insn_register Rd,
     u8 lsb);
u32 aarch64_insn_gen_prefetch(enum aarch64_insn_register base,
         enum aarch64_insn_prfm_type type,
         enum aarch64_insn_prfm_target target,
         enum aarch64_insn_prfm_policy policy);
s32 aarch64_get_branch_offset(u32 insn);
u32 aarch64_set_branch_offset(u32 insn, s32 offset);

s32 aarch64_insn_adrp_get_offset(u32 insn);
u32 aarch64_insn_adrp_set_offset(u32 insn, s32 offset);

bool aarch32_insn_is_wide(u32 insn);





u32 aarch64_insn_extract_system_reg(u32 insn);
u32 aarch32_insn_extract_reg_num(u32 insn, int offset);
u32 aarch32_insn_mcr_extract_opc2(u32 insn);
u32 aarch32_insn_mcr_extract_crm(u32 insn);

typedef bool (pstate_check_t)(unsigned long);
extern pstate_check_t * const aarch32_opcode_cond_checks[16];
# 15 "./arch/arm64/include/asm/jump_label.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch(struct static_key *key,
            bool branch)
{
 asm goto("1:	nop					\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		3			\n\t" "	.long		1b - ., %l[l_yes] - .	\n\t" "	.quad		%c0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : l_yes);
# 30 "./arch/arm64/include/asm/jump_label.h"
 return false;
l_yes:
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch_jump(struct static_key *key,
          bool branch)
{
 asm goto("1:	b		%l[l_yes]		\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		3			\n\t" "	.long		1b - ., %l[l_yes] - .	\n\t" "	.quad		%c0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : l_yes);
# 47 "./arch/arm64/include/asm/jump_label.h"
 return false;
l_yes:
 return true;
}
# 119 "./include/linux/jump_label.h" 2




struct jump_entry {
 s32 code;
 s32 target;
 long key;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_code(const struct jump_entry *entry)
{
 return (unsigned long)&entry->code + entry->code;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_target(const struct jump_entry *entry)
{
 return (unsigned long)&entry->target + entry->target;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct static_key *jump_entry_key(const struct jump_entry *entry)
{
 long offset = entry->key & ~3L;

 return (struct static_key *)((unsigned long)&entry->key + offset);
}
# 165 "./include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_branch(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 1UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_init(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 2UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jump_entry_set_init(struct jump_entry *entry, bool set)
{
 if (set)
  entry->key |= 2;
 else
  entry->key &= ~2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int jump_entry_size(struct jump_entry *entry)
{

 return 4;



}






enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 211 "./include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern bool arch_jump_label_transform_queue(struct jump_entry *entry,
         enum jump_label_type type);
extern void arch_jump_label_transform_apply(void);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void static_key_slow_inc_cpuslocked(struct static_key *key);
extern void static_key_slow_dec_cpuslocked(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
extern int static_key_count(struct static_key *key);
extern void static_key_enable(struct static_key *key);
extern void static_key_disable(struct static_key *key);
extern void static_key_enable_cpuslocked(struct static_key *key);
extern void static_key_disable_cpuslocked(struct static_key *key);
# 359 "./include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 413 "./include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 14 "./arch/arm64/include/asm/lse.h" 2

# 1 "./arch/arm64/include/asm/alternative.h" 1




# 1 "./arch/arm64/include/asm/alternative-macros.h" 1




# 1 "./arch/arm64/include/generated/asm/cpucaps.h" 1
# 6 "./arch/arm64/include/asm/alternative-macros.h" 2
# 6 "./arch/arm64/include/asm/alternative.h" 2



# 1 "./include/linux/init.h" 1
# 117 "./include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);


typedef int initcall_entry_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return offset_to_ptr(entry);
}
# 136 "./include/linux/init.h"
extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;


extern bool rodata_enabled;


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 304 "./include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 353 "./include/linux/init.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_param(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_options(char *cmdline);
# 10 "./arch/arm64/include/asm/alternative.h" 2



struct alt_instr {
 s32 orig_offset;
 s32 alt_offset;
 u16 cpufeature;
 u8 orig_len;
 u8 alt_len;
};

typedef void (*alternative_cb_t)(struct alt_instr *alt,
     __le32 *origptr, __le32 *updptr, int nr_inst);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) apply_boot_alternatives(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) apply_alternatives_all(void);
bool alternative_is_applied(u16 cpufeature);


void apply_alternatives_module(void *start, size_t length);
# 16 "./arch/arm64/include/asm/lse.h" 2
# 1 "./arch/arm64/include/asm/atomic_lse.h" 1
# 23 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic_andnot(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "stclr" "	%w[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic_or(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "stset" "	%w[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic_xor(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "steor" "	%w[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic_add(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "stadd" "	%w[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
# 49 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_andnot_relaxed(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldclr" "" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_andnot_acquire(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldclr" "a" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_andnot_release(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldclr" "l" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_andnot(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldclr" "al" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_or_relaxed(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldset" "" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_or_acquire(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldset" "a" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_or_release(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldset" "l" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_or(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldset" "al" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_xor_relaxed(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldeor" "" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_xor_acquire(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldeor" "a" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_xor_release(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldeor" "l" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_xor(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldeor" "al" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_add_relaxed(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldadd" "" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_add_acquire(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldadd" "a" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_add_release(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldadd" "l" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_add(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	" "ldadd" "al" "	%w[i], %w[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
# 73 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_add_return_relaxed(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_add_return_acquire(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "a" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_add_return_release(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "l" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_add_return(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "al" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic_and(int i, atomic_t *v)
{
 asm volatile(
 ".arch_extension lse\n"
 "	mvn	%w[i], %w[i]\n"
 "	stclr	%w[i], %[v]"
 : [i] "+&r" (i), [v] "+Q" (v->counter)
 : "r" (v));
}
# 104 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_and_relaxed(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%w[i], %w[i]\n" "	ldclr" "" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_and_acquire(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%w[i], %w[i]\n" "	ldclr" "a" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_and_release(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%w[i], %w[i]\n" "	ldclr" "l" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_and(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%w[i], %w[i]\n" "	ldclr" "al" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic_sub(int i, atomic_t *v)
{
 asm volatile(
 ".arch_extension lse\n"
 "	neg	%w[i], %w[i]\n"
 "	stadd	%w[i], %[v]"
 : [i] "+&r" (i), [v] "+Q" (v->counter)
 : "r" (v));
}
# 138 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_sub_return_relaxed(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_sub_return_acquire(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "a" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_sub_return_release(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "l" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_sub_return(int i, atomic_t *v) { u32 tmp; asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "al" "	%w[i], %w[tmp], %[v]\n" "	add	%w[i], %w[i], %w[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
# 159 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_sub_relaxed(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_sub_acquire(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "a" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_sub_release(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "l" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __lse_atomic_fetch_sub(int i, atomic_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%w[i], %w[i]\n" "	ldadd" "al" "	%w[i], %w[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
# 176 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic64_andnot(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	" "stclr" "	%[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic64_or(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	" "stset" "	%[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic64_xor(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	" "steor" "	%[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic64_add(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	" "stadd" "	%[i], %[v]\n" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v)); }
# 202 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldclr" "" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldclr" "a" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_andnot_release(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldclr" "l" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_andnot(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldclr" "al" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_or_relaxed(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldset" "" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_or_acquire(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldset" "a" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_or_release(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldset" "l" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_or(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldset" "al" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldeor" "" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_xor_acquire(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldeor" "a" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_xor_release(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldeor" "l" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_xor(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldeor" "al" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_add_relaxed(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldadd" "" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_add_acquire(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldadd" "a" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_add_release(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldadd" "l" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_add(s64 i, atomic64_t *v){ asm volatile( ".arch_extension lse\n" "	" "ldadd" "al" "	%[i], %[i], %[v]" : [i] "+r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
# 226 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_add_return_relaxed(s64 i, atomic64_t *v){ unsigned long tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_add_return_acquire(s64 i, atomic64_t *v){ unsigned long tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "a" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_add_return_release(s64 i, atomic64_t *v){ unsigned long tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "l" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_add_return(s64 i, atomic64_t *v){ unsigned long tmp; asm volatile( ".arch_extension lse\n" "	ldadd" "al" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic64_and(s64 i, atomic64_t *v)
{
 asm volatile(
 ".arch_extension lse\n"
 "	mvn	%[i], %[i]\n"
 "	stclr	%[i], %[v]"
 : [i] "+&r" (i), [v] "+Q" (v->counter)
 : "r" (v));
}
# 257 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_and_relaxed(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%[i], %[i]\n" "	ldclr" "" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_and_acquire(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%[i], %[i]\n" "	ldclr" "a" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_and_release(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%[i], %[i]\n" "	ldclr" "l" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_and(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	mvn	%[i], %[i]\n" "	ldclr" "al" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lse_atomic64_sub(s64 i, atomic64_t *v)
{
 asm volatile(
 ".arch_extension lse\n"
 "	neg	%[i], %[i]\n"
 "	stadd	%[i], %[v]"
 : [i] "+&r" (i), [v] "+Q" (v->counter)
 : "r" (v));
}
# 291 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_sub_return_relaxed(s64 i, atomic64_t *v) { unsigned long tmp; asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_sub_return_acquire(s64 i, atomic64_t *v) { unsigned long tmp; asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "a" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_sub_return_release(s64 i, atomic64_t *v) { unsigned long tmp; asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "l" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_sub_return(s64 i, atomic64_t *v) { unsigned long tmp; asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "al" "	%[i], %x[tmp], %[v]\n" "	add	%[i], %[i], %x[tmp]" : [i] "+&r" (i), [v] "+Q" (v->counter), [tmp] "=&r" (tmp) : "r" (v) : "memory"); return i; }
# 312 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : ); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_sub_acquire(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "a" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_sub_release(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "l" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __lse_atomic64_fetch_sub(s64 i, atomic64_t *v) { asm volatile( ".arch_extension lse\n" "	neg	%[i], %[i]\n" "	ldadd" "al" "	%[i], %[i], %[v]" : [i] "+&r" (i), [v] "+Q" (v->counter) : "r" (v) : "memory"); return i; }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 __lse_atomic64_dec_if_positive(atomic64_t *v)
{
 unsigned long tmp;

 asm volatile(
 ".arch_extension lse\n"
 "1:	ldr	%x[tmp], %[v]\n"
 "	subs	%[ret], %x[tmp], #1\n"
 "	b.lt	2f\n"
 "	casal	%x[tmp], %[ret], %[v]\n"
 "	sub	%x[tmp], %x[tmp], #1\n"
 "	sub	%x[tmp], %x[tmp], %[ret]\n"
 "	cbnz	%x[tmp], 1b\n"
 "2:"
 : [ret] "+&r" (v), [v] "+Q" (v->counter), [tmp] "=&r" (tmp)
 :
 : "cc", "memory");

 return (long)v;
}
# 364 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u8 __lse__cmpxchg_case_8(volatile void *ptr, u8 old, u8 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u8 x1 asm ("x1") = old; register u8 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "" "b" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : ); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 __lse__cmpxchg_case_16(volatile void *ptr, u16 old, u16 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u16 x1 asm ("x1") = old; register u16 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "" "h" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : ); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 __lse__cmpxchg_case_32(volatile void *ptr, u32 old, u32 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u32 x1 asm ("x1") = old; register u32 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "" "" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : ); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __lse__cmpxchg_case_64(volatile void *ptr, u64 old, u64 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u64 x1 asm ("x1") = old; register u64 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "x" "[tmp], %" "x" "[old]\n" "	cas" "" "" "\t%" "x" "[tmp], %" "x" "[new], %[v]\n" "	mov	%" "x" "[ret], %" "x" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : ); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u8 __lse__cmpxchg_case_acq_8(volatile void *ptr, u8 old, u8 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u8 x1 asm ("x1") = old; register u8 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "a" "b" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 __lse__cmpxchg_case_acq_16(volatile void *ptr, u16 old, u16 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u16 x1 asm ("x1") = old; register u16 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "a" "h" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 __lse__cmpxchg_case_acq_32(volatile void *ptr, u32 old, u32 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u32 x1 asm ("x1") = old; register u32 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "a" "" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __lse__cmpxchg_case_acq_64(volatile void *ptr, u64 old, u64 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u64 x1 asm ("x1") = old; register u64 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "x" "[tmp], %" "x" "[old]\n" "	cas" "a" "" "\t%" "x" "[tmp], %" "x" "[new], %[v]\n" "	mov	%" "x" "[ret], %" "x" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u8 __lse__cmpxchg_case_rel_8(volatile void *ptr, u8 old, u8 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u8 x1 asm ("x1") = old; register u8 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "l" "b" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 __lse__cmpxchg_case_rel_16(volatile void *ptr, u16 old, u16 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u16 x1 asm ("x1") = old; register u16 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "l" "h" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 __lse__cmpxchg_case_rel_32(volatile void *ptr, u32 old, u32 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u32 x1 asm ("x1") = old; register u32 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "l" "" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __lse__cmpxchg_case_rel_64(volatile void *ptr, u64 old, u64 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u64 x1 asm ("x1") = old; register u64 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "x" "[tmp], %" "x" "[old]\n" "	cas" "l" "" "\t%" "x" "[tmp], %" "x" "[new], %[v]\n" "	mov	%" "x" "[ret], %" "x" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u8 __lse__cmpxchg_case_mb_8(volatile void *ptr, u8 old, u8 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u8 x1 asm ("x1") = old; register u8 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "al" "b" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 __lse__cmpxchg_case_mb_16(volatile void *ptr, u16 old, u16 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u16 x1 asm ("x1") = old; register u16 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "al" "h" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 __lse__cmpxchg_case_mb_32(volatile void *ptr, u32 old, u32 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u32 x1 asm ("x1") = old; register u32 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "w" "[tmp], %" "w" "[old]\n" "	cas" "al" "" "\t%" "w" "[tmp], %" "w" "[new], %[v]\n" "	mov	%" "w" "[ret], %" "w" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __lse__cmpxchg_case_mb_64(volatile void *ptr, u64 old, u64 new) { register unsigned long x0 asm ("x0") = (unsigned long)ptr; register u64 x1 asm ("x1") = old; register u64 x2 asm ("x2") = new; unsigned long tmp; asm volatile( ".arch_extension lse\n" "	mov	%" "x" "[tmp], %" "x" "[old]\n" "	cas" "al" "" "\t%" "x" "[tmp], %" "x" "[new], %[v]\n" "	mov	%" "x" "[ret], %" "x" "[tmp]" : [ret] "+r" (x0), [v] "+Q" (*(unsigned long *)ptr), [tmp] "=&r" (tmp) : [old] "r" (x1), [new] "r" (x2) : "memory"); return x0; }
# 414 "./arch/arm64/include/asm/atomic_lse.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long __lse__cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long oldval1 = old1; unsigned long oldval2 = old2; register unsigned long x0 asm ("x0") = old1; register unsigned long x1 asm ("x1") = old2; register unsigned long x2 asm ("x2") = new1; register unsigned long x3 asm ("x3") = new2; register unsigned long x4 asm ("x4") = (unsigned long)ptr; asm volatile( ".arch_extension lse\n" "	casp" "" "\t%[old1], %[old2], %[new1], %[new2], %[v]\n" "	eor	%[old1], %[old1], %[oldval1]\n" "	eor	%[old2], %[old2], %[oldval2]\n" "	orr	%[old1], %[old1], %[old2]" : [old1] "+&r" (x0), [old2] "+&r" (x1), [v] "+Q" (*(unsigned long *)ptr) : [new1] "r" (x2), [new2] "r" (x3), [ptr] "r" (x4), [oldval1] "r" (oldval1), [oldval2] "r" (oldval2) : ); return x0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long __lse__cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long oldval1 = old1; unsigned long oldval2 = old2; register unsigned long x0 asm ("x0") = old1; register unsigned long x1 asm ("x1") = old2; register unsigned long x2 asm ("x2") = new1; register unsigned long x3 asm ("x3") = new2; register unsigned long x4 asm ("x4") = (unsigned long)ptr; asm volatile( ".arch_extension lse\n" "	casp" "al" "\t%[old1], %[old2], %[new1], %[new2], %[v]\n" "	eor	%[old1], %[old1], %[oldval1]\n" "	eor	%[old2], %[old2], %[oldval2]\n" "	orr	%[old1], %[old1], %[old2]" : [old1] "+&r" (x0), [old2] "+&r" (x1), [v] "+Q" (*(unsigned long *)ptr) : [new1] "r" (x2), [new2] "r" (x3), [ptr] "r" (x4), [oldval1] "r" (oldval1), [oldval2] "r" (oldval2) : "memory"); return x0; }
# 17 "./arch/arm64/include/asm/lse.h" 2


extern struct static_key_false cpu_hwcap_keys[66];
extern struct static_key_false arm64_const_caps_ready;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_uses_lse_atomics(void)
{
 return (({ bool branch; if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_true)) branch = !arch_static_branch(&(&arm64_const_caps_ready)->key, true); else if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_false)) branch = !arch_static_branch_jump(&(&arm64_const_caps_ready)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); })) &&
  ({ bool branch; if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[22]), struct static_key_true)) branch = !arch_static_branch(&(&cpu_hwcap_keys[22])->key, true); else if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[22]), struct static_key_false)) branch = !arch_static_branch_jump(&(&cpu_hwcap_keys[22])->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); });
}
# 15 "./arch/arm64/include/asm/cmpxchg.h" 2
# 45 "./arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "" "b" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "" "h" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "" "" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "" "" "\t%" "" "3, %" "" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_acq_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "" "b" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_acq_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "" "h" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_acq_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "" "" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_acq_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "" "" "\t%" "" "3, %" "" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_rel_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "l" "b" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_rel_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "l" "h" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_rel_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "l" "" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_rel_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "" "l" "" "\t%" "" "3, %" "" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_mb_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "l" "b" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "nop" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_mb_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "l" "h" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "nop" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_mb_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "l" "" "\t%" "w" "3, %" "w" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "nop" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_mb_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile(".if ""1"" == 1\n" "661:\n\t" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "	swp" "a" "l" "" "\t%" "" "3, %" "" "0, %2\n" ".rept	" "3" "\nnop\n.endr\n" "	" "nop" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
# 85 "./arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_8(x, ptr); case 2: return __xchg_case_16(x, ptr); case 4: return __xchg_case_32(x, ptr); case 8: return __xchg_case_64(x, ptr); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_117(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_117(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg_acq(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_acq_8(x, ptr); case 2: return __xchg_case_acq_16(x, ptr); case 4: return __xchg_case_acq_32(x, ptr); case 8: return __xchg_case_acq_64(x, ptr); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_118(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_118(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg_rel(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_rel_8(x, ptr); case 2: return __xchg_case_rel_16(x, ptr); case 4: return __xchg_case_rel_32(x, ptr); case 8: return __xchg_case_rel_64(x, ptr); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_119(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_119(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg_mb(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_mb_8(x, ptr); case 2: return __xchg_case_mb_16(x, ptr); case 4: return __xchg_case_mb_32(x, ptr); case 8: return __xchg_case_mb_64(x, ptr); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_120(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_120(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
# 115 "./arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_8(volatile void *ptr, u8 old, u8 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_8(ptr, old, new) : __ll_sc__cmpxchg_case_8(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_16(volatile void *ptr, u16 old, u16 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_16(ptr, old, new) : __ll_sc__cmpxchg_case_16(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_32(volatile void *ptr, u32 old, u32 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_32(ptr, old, new) : __ll_sc__cmpxchg_case_32(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_64(volatile void *ptr, u64 old, u64 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_64(ptr, old, new) : __ll_sc__cmpxchg_case_64(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_acq_8(volatile void *ptr, u8 old, u8 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_acq_8(ptr, old, new) : __ll_sc__cmpxchg_case_acq_8(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_acq_16(volatile void *ptr, u16 old, u16 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_acq_16(ptr, old, new) : __ll_sc__cmpxchg_case_acq_16(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_acq_32(volatile void *ptr, u32 old, u32 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_acq_32(ptr, old, new) : __ll_sc__cmpxchg_case_acq_32(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_acq_64(volatile void *ptr, u64 old, u64 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_acq_64(ptr, old, new) : __ll_sc__cmpxchg_case_acq_64(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_rel_8(volatile void *ptr, u8 old, u8 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_rel_8(ptr, old, new) : __ll_sc__cmpxchg_case_rel_8(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_rel_16(volatile void *ptr, u16 old, u16 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_rel_16(ptr, old, new) : __ll_sc__cmpxchg_case_rel_16(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_rel_32(volatile void *ptr, u32 old, u32 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_rel_32(ptr, old, new) : __ll_sc__cmpxchg_case_rel_32(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_rel_64(volatile void *ptr, u64 old, u64 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_rel_64(ptr, old, new) : __ll_sc__cmpxchg_case_rel_64(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_mb_8(volatile void *ptr, u8 old, u8 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_mb_8(ptr, old, new) : __ll_sc__cmpxchg_case_mb_8(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_mb_16(volatile void *ptr, u16 old, u16 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_mb_16(ptr, old, new) : __ll_sc__cmpxchg_case_mb_16(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_mb_32(volatile void *ptr, u32 old, u32 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_mb_32(ptr, old, new) : __ll_sc__cmpxchg_case_mb_32(ptr, old, new); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_mb_64(volatile void *ptr, u64 old, u64 new) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_case_mb_64(ptr, old, new) : __ll_sc__cmpxchg_case_mb_64(ptr, old, new); }); }
# 145 "./arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_double(old1, old2, new1, new2, ptr) : __ll_sc__cmpxchg_double(old1, old2, new1, new2, ptr); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { return ({ system_uses_lse_atomics() ? __lse__cmpxchg_double_mb(old1, old2, new1, new2, ptr) : __ll_sc__cmpxchg_double_mb(old1, old2, new1, new2, ptr); }); }
# 172 "./arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_8(ptr, old, new); case 2: return __cmpxchg_case_16(ptr, old, new); case 4: return __cmpxchg_case_32(ptr, old, new); case 8: return __cmpxchg_case_64(ptr, old, new); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_121(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_121(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg_acq(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_acq_8(ptr, old, new); case 2: return __cmpxchg_case_acq_16(ptr, old, new); case 4: return __cmpxchg_case_acq_32(ptr, old, new); case 8: return __cmpxchg_case_acq_64(ptr, old, new); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_122(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_122(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg_rel(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_rel_8(ptr, old, new); case 2: return __cmpxchg_case_rel_16(ptr, old, new); case 4: return __cmpxchg_case_rel_32(ptr, old, new); case 8: return __cmpxchg_case_rel_64(ptr, old, new); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_123(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_123(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg_mb(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_mb_8(ptr, old, new); case 2: return __cmpxchg_case_mb_16(ptr, old, new); case 4: return __cmpxchg_case_mb_32(ptr, old, new); case 8: return __cmpxchg_case_mb_64(ptr, old, new); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_124(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_124(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
# 250 "./arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_8(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "b" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_16(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "h" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_32(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_64(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "" "[tmp], %[v]\n" "	eor	%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	cbnz	%" "" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
# 278 "./arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __cmpwait(volatile void *ptr, unsigned long val, int size) { switch (size) { case 1: return __cmpwait_case_8(ptr, (u8)val); case 2: return __cmpwait_case_16(ptr, (u16)val); case 4: return __cmpwait_case_32(ptr, val); case 8: return __cmpwait_case_64(ptr, val); default: do { __attribute__((__noreturn__)) extern void __compiletime_assert_125(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_125(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
# 17 "./arch/arm64/include/asm/atomic.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_andnot(int i, atomic_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic_andnot(i, v) : __ll_sc_atomic_andnot(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_or(int i, atomic_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic_or(i, v) : __ll_sc_atomic_or(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_xor(int i, atomic_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic_xor(i, v) : __ll_sc_atomic_xor(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_add(int i, atomic_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic_add(i, v) : __ll_sc_atomic_add(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_and(int i, atomic_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic_and(i, v) : __ll_sc_atomic_and(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic_sub(int i, atomic_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic_sub(i, v) : __ll_sc_atomic_sub(i, v); }); }
# 46 "./arch/arm64/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_andnot_relaxed(i, v) : __ll_sc_atomic_fetch_andnot_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_andnot_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_andnot_acquire(i, v) : __ll_sc_atomic_fetch_andnot_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_andnot_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_andnot_release(i, v) : __ll_sc_atomic_fetch_andnot_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_andnot(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_andnot(i, v) : __ll_sc_atomic_fetch_andnot(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_or_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_or_relaxed(i, v) : __ll_sc_atomic_fetch_or_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_or_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_or_acquire(i, v) : __ll_sc_atomic_fetch_or_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_or_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_or_release(i, v) : __ll_sc_atomic_fetch_or_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_or(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_or(i, v) : __ll_sc_atomic_fetch_or(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_xor_relaxed(i, v) : __ll_sc_atomic_fetch_xor_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_xor_acquire(i, v) : __ll_sc_atomic_fetch_xor_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_xor_release(i, v) : __ll_sc_atomic_fetch_xor_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_xor(i, v) : __ll_sc_atomic_fetch_xor(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_add_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_add_relaxed(i, v) : __ll_sc_atomic_fetch_add_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_add_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_add_acquire(i, v) : __ll_sc_atomic_fetch_add_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_add_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_add_release(i, v) : __ll_sc_atomic_fetch_add_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_add(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_add(i, v) : __ll_sc_atomic_fetch_add(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_and_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_and_relaxed(i, v) : __ll_sc_atomic_fetch_and_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_and_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_and_acquire(i, v) : __ll_sc_atomic_fetch_and_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_and_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_and_release(i, v) : __ll_sc_atomic_fetch_and_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_and(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_and(i, v) : __ll_sc_atomic_fetch_and(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_sub_relaxed(i, v) : __ll_sc_atomic_fetch_sub_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_sub_acquire(i, v) : __ll_sc_atomic_fetch_sub_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_sub_release(i, v) : __ll_sc_atomic_fetch_sub_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_fetch_sub(i, v) : __ll_sc_atomic_fetch_sub(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_add_return_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_add_return_relaxed(i, v) : __ll_sc_atomic_add_return_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_add_return_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_add_return_acquire(i, v) : __ll_sc_atomic_add_return_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_add_return_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_add_return_release(i, v) : __ll_sc_atomic_add_return_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_add_return(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_add_return(i, v) : __ll_sc_atomic_add_return(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_sub_return_relaxed(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_sub_return_relaxed(i, v) : __ll_sc_atomic_sub_return_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_sub_return_acquire(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_sub_return_acquire(i, v) : __ll_sc_atomic_sub_return_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_sub_return_release(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_sub_return_release(i, v) : __ll_sc_atomic_sub_return_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int arch_atomic_sub_return(int i, atomic_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic_sub_return(i, v) : __ll_sc_atomic_sub_return(i, v); }); }
# 64 "./arch/arm64/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_andnot(long i, atomic64_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic64_andnot(i, v) : __ll_sc_atomic64_andnot(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_or(long i, atomic64_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic64_or(i, v) : __ll_sc_atomic64_or(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_xor(long i, atomic64_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic64_xor(i, v) : __ll_sc_atomic64_xor(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_add(long i, atomic64_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic64_add(i, v) : __ll_sc_atomic64_add(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_and(long i, atomic64_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic64_and(i, v) : __ll_sc_atomic64_and(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void arch_atomic64_sub(long i, atomic64_t *v) { ({ system_uses_lse_atomics() ? __lse_atomic64_sub(i, v) : __ll_sc_atomic64_sub(i, v); }); }
# 85 "./arch/arm64/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_andnot_relaxed(i, v) : __ll_sc_atomic64_fetch_andnot_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_andnot_acquire(i, v) : __ll_sc_atomic64_fetch_andnot_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_andnot_release(i, v) : __ll_sc_atomic64_fetch_andnot_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_andnot(i, v) : __ll_sc_atomic64_fetch_andnot(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_or_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_or_relaxed(i, v) : __ll_sc_atomic64_fetch_or_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_or_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_or_acquire(i, v) : __ll_sc_atomic64_fetch_or_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_or_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_or_release(i, v) : __ll_sc_atomic64_fetch_or_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_or(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_or(i, v) : __ll_sc_atomic64_fetch_or(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_xor_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_xor_relaxed(i, v) : __ll_sc_atomic64_fetch_xor_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_xor_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_xor_acquire(i, v) : __ll_sc_atomic64_fetch_xor_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_xor_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_xor_release(i, v) : __ll_sc_atomic64_fetch_xor_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_xor(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_xor(i, v) : __ll_sc_atomic64_fetch_xor(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_add_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_add_relaxed(i, v) : __ll_sc_atomic64_fetch_add_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_add_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_add_acquire(i, v) : __ll_sc_atomic64_fetch_add_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_add_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_add_release(i, v) : __ll_sc_atomic64_fetch_add_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_add(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_add(i, v) : __ll_sc_atomic64_fetch_add(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_and_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_and_relaxed(i, v) : __ll_sc_atomic64_fetch_and_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_and_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_and_acquire(i, v) : __ll_sc_atomic64_fetch_and_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_and_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_and_release(i, v) : __ll_sc_atomic64_fetch_and_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_and(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_and(i, v) : __ll_sc_atomic64_fetch_and(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_sub_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_sub_relaxed(i, v) : __ll_sc_atomic64_fetch_sub_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_sub_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_sub_acquire(i, v) : __ll_sc_atomic64_fetch_sub_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_sub_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_sub_release(i, v) : __ll_sc_atomic64_fetch_sub_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_fetch_sub(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_fetch_sub(i, v) : __ll_sc_atomic64_fetch_sub(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_add_return_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_add_return_relaxed(i, v) : __ll_sc_atomic64_add_return_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_add_return_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_add_return_acquire(i, v) : __ll_sc_atomic64_add_return_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_add_return_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_add_return_release(i, v) : __ll_sc_atomic64_add_return_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_add_return(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_add_return(i, v) : __ll_sc_atomic64_add_return(i, v); }); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_sub_return_relaxed(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_sub_return_relaxed(i, v) : __ll_sc_atomic64_sub_return_relaxed(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_sub_return_acquire(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_sub_return_acquire(i, v) : __ll_sc_atomic64_sub_return_acquire(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_sub_return_release(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_sub_return_release(i, v) : __ll_sc_atomic64_sub_return_release(i, v); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_sub_return(long i, atomic64_t *v) { return ({ system_uses_lse_atomics() ? __lse_atomic64_sub_return(i, v) : __ll_sc_atomic64_sub_return(i, v); }); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long arch_atomic64_dec_if_positive(atomic64_t *v)
{
 return ({ system_uses_lse_atomics() ? __lse_atomic64_dec_if_positive(v) : __ll_sc_atomic64_dec_if_positive(v); });
}
# 9 "./include/linux/atomic_api.h" 2
# 81 "./include/linux/atomic_api.h"
# 1 "./include/linux/atomic/atomic-arch-fallback.h" 1
# 151 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_read_acquire(const atomic_t *v)
{
 return ({ union { typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) __val; char __c[1]; } __u; typeof(&(v)->counter) __p = (&(v)->counter); do { __attribute__((__noreturn__)) extern void __compiletime_assert_126(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_126(); } while (0); kasan_check_read(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*__p) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*__p) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*__p) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*__p) : "memory"); break; } (typeof(*&(v)->counter))__u.__val; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_set_release(atomic_t *v, int i)
{
 do { typeof(&(v)->counter) __p = (&(v)->counter); union { typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter)))) (i) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_127(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_127(); } while (0); kasan_check_write(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}
# 337 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_inc(atomic_t *v)
{
 arch_atomic_add(1, v);
}
# 353 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_acquire(atomic_t *v)
{
 return arch_atomic_add_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_release(atomic_t *v)
{
 return arch_atomic_add_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_relaxed(atomic_t *v)
{
 return arch_atomic_add_return_relaxed(1, v);
}
# 434 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_acquire(atomic_t *v)
{
 return arch_atomic_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_release(atomic_t *v)
{
 return arch_atomic_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_add_relaxed(1, v);
}
# 508 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_dec(atomic_t *v)
{
 arch_atomic_sub(1, v);
}
# 524 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_acquire(atomic_t *v)
{
 return arch_atomic_sub_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_release(atomic_t *v)
{
 return arch_atomic_sub_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_relaxed(atomic_t *v)
{
 return arch_atomic_sub_return_relaxed(1, v);
}
# 605 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_acquire(atomic_t *v)
{
 return arch_atomic_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_release(atomic_t *v)
{
 return arch_atomic_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_sub_relaxed(1, v);
}
# 986 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 1085 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_sub_and_test(int i, atomic_t *v)
{
 return arch_atomic_sub_return(i, v) == 0;
}
# 1102 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_and_test(atomic_t *v)
{
 return arch_atomic_dec_return(v) == 0;
}
# 1119 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_and_test(atomic_t *v)
{
 return arch_atomic_inc_return(v) == 0;
}
# 1137 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_negative(int i, atomic_t *v)
{
 return arch_atomic_add_return(i, v) < 0;
}
# 1155 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 int c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + a));

 return c;
}
# 1180 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_unless(atomic_t *v, int a, int u)
{
 return arch_atomic_fetch_add_unless(v, a, u) != u;
}
# 1196 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_not_zero(atomic_t *v)
{
 return arch_atomic_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_unless_negative(atomic_t *v)
{
 int c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_unless_positive(atomic_t *v)
{
 int c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_if_positive(atomic_t *v)
{
 int dec, c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, dec));

 return dec;
}
# 1258 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_read_acquire(const atomic64_t *v)
{
 return ({ union { typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) __val; char __c[1]; } __u; typeof(&(v)->counter) __p = (&(v)->counter); do { __attribute__((__noreturn__)) extern void __compiletime_assert_128(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_128(); } while (0); kasan_check_read(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*__p) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*__p) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*__p) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*__p) : "memory"); break; } (typeof(*&(v)->counter))__u.__val; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_set_release(atomic64_t *v, s64 i)
{
 do { typeof(&(v)->counter) __p = (&(v)->counter); union { typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter)))) (i) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_129(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_129(); } while (0); kasan_check_write(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}
# 1444 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_inc(atomic64_t *v)
{
 arch_atomic64_add(1, v);
}
# 1460 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_acquire(atomic64_t *v)
{
 return arch_atomic64_add_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_release(atomic64_t *v)
{
 return arch_atomic64_add_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_add_return_relaxed(1, v);
}
# 1541 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_release(atomic64_t *v)
{
 return arch_atomic64_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_add_relaxed(1, v);
}
# 1615 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_dec(atomic64_t *v)
{
 arch_atomic64_sub(1, v);
}
# 1631 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_acquire(atomic64_t *v)
{
 return arch_atomic64_sub_return_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_release(atomic64_t *v)
{
 return arch_atomic64_sub_return_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_sub_return_relaxed(1, v);
}
# 1712 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_release(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(1, v);
}
# 2093 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 2192 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return arch_atomic64_sub_return(i, v) == 0;
}
# 2209 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_and_test(atomic64_t *v)
{
 return arch_atomic64_dec_return(v) == 0;
}
# 2226 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_and_test(atomic64_t *v)
{
 return arch_atomic64_inc_return(v) == 0;
}
# 2244 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_negative(s64 i, atomic64_t *v)
{
 return arch_atomic64_add_return(i, v) < 0;
}
# 2262 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 s64 c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + a));

 return c;
}
# 2287 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return arch_atomic64_fetch_add_unless(v, a, u) != u;
}
# 2303 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_not_zero(atomic64_t *v)
{
 return arch_atomic64_add_unless(v, 1, 0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 82 "./include/linux/atomic_api.h" 2
# 1 "./include/linux/atomic/atomic-long.h" 1
# 11 "./include/linux/atomic/atomic-long.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 12 "./include/linux/atomic/atomic-long.h" 2
# 23 "./include/linux/atomic/atomic-long.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read(const atomic_long_t *v)
{
 return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read_acquire(const atomic_long_t *v)
{
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set(atomic_long_t *v, long i)
{
 do { *(volatile typeof(((v)->counter)) *)&(((v)->counter)) = ((i)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set_release(atomic_long_t *v, long i)
{
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_add(long i, atomic_long_t *v)
{
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_sub(long i, atomic_long_t *v)
{
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_inc(atomic_long_t *v)
{
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return(atomic_long_t *v)
{
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_release(atomic_long_t *v)
{
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_dec(atomic_long_t *v)
{
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return(atomic_long_t *v)
{
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_release(atomic_long_t *v)
{
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_and(long i, atomic_long_t *v)
{
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_andnot(long i, atomic_long_t *v)
{
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_or(long i, atomic_long_t *v)
{
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_xor(long i, atomic_long_t *v)
{
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg(atomic_long_t *v, long i)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_mb((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_acq((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_rel((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_acquire(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_release(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_relaxed(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_and_test(atomic_long_t *v)
{
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_and_test(atomic_long_t *v)
{
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_negative(long i, atomic_long_t *v)
{
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_not_zero(atomic_long_t *v)
{
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_if_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_if_positive(v);
}
# 83 "./include/linux/atomic_api.h" 2
# 1 "./include/linux/atomic/atomic-instrumented.h" 1
# 22 "./include/linux/atomic/atomic-instrumented.h"
# 1 "./include/linux/instrumented.h" 1
# 24 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, 0);
}
# 39 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 0));
}
# 54 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 1) | (1 << 0));
}
# 69 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, (1 << 2));
}
# 84 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0));
}
# 99 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0) | (1 << 1));
}
# 115 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_to_user(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 kcsan_check_access(from, n, 0);
}
# 132 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_from_user(const void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 kcsan_check_access(to, n, (1 << 0));
}
# 23 "./include/linux/atomic/atomic-instrumented.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read_acquire(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 do { *(volatile typeof(((v)->counter)) *)&(((v)->counter)) = ((i)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set_release(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_mb((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_acquire(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_acq((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_release(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_rel((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_relaxed(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_if_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_if_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 do { *(volatile typeof(((v)->counter)) *)&(((v)->counter)) = ((i)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set_release(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_mb((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_acq((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_release(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_rel((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_relaxed(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_if_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_if_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_relaxed(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_if_positive(v);
}
# 84 "./include/linux/atomic_api.h" 2
# 9 "./arch/arm64/include/asm/bitops.h" 2






# 1 "./include/asm-generic/bitops/builtin-__ffs.h" 1
# 11 "./include/asm-generic/bitops/builtin-__ffs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 return __builtin_ctzl(word);
}
# 16 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/builtin-ffs.h" 1
# 17 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/builtin-__fls.h" 1
# 11 "./include/asm-generic/bitops/builtin-__fls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 return (sizeof(word) * 8) - 1 - __builtin_clzl(word);
}
# 18 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/builtin-fls.h" 1
# 12 "./include/asm-generic/bitops/builtin-fls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls(unsigned int x)
{
 return x ? sizeof(x) * 8 - __builtin_clz(x) : 0;
}
# 19 "./arch/arm64/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/ffz.h" 1
# 21 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/fls64.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/fls64.h" 2
# 27 "./include/asm-generic/bitops/fls64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls64(__u64 x)
{
 if (x == 0)
  return 0;
 return __fls(x) + 1;
}
# 22 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/find.h" 1






extern unsigned long _find_next_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long nbits,
  unsigned long start, unsigned long invert, unsigned long le);
extern unsigned long _find_first_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_first_zero_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_last_bit(const unsigned long *addr, unsigned long size);
# 24 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
       unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr, ((void *)0), size, offset, 0UL, 0);
}
# 53 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr1 & *addr2 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr1, addr2, size, offset, 0UL, 0);
}
# 82 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
     unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_next_bit(addr, ((void *)0), size, offset, ~0UL, 0);
}
# 110 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_first_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __ffs(val) : size;
 }

 return _find_first_bit(addr, size);
}
# 130 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_first_zero_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_first_zero_bit(addr, size);
}
# 160 "./include/asm-generic/bitops/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_last_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __fls(val) : size;
 }

 return _find_last_bit(addr, size);
}
# 183 "./include/asm-generic/bitops/find.h"
extern unsigned long find_next_clump8(unsigned long *clump,
          const unsigned long *addr,
          unsigned long size, unsigned long offset);
# 23 "./arch/arm64/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/sched.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/bitops/sched.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "./include/asm-generic/bitops/sched.h"
}
# 25 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/hweight.h" 1




# 1 "./include/asm-generic/bitops/arch_hweight.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/arch_hweight.h" 2

extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 6 "./include/asm-generic/bitops/hweight.h" 2
# 1 "./include/asm-generic/bitops/const_hweight.h" 1
# 7 "./include/asm-generic/bitops/hweight.h" 2
# 26 "./arch/arm64/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/atomic.h" 1




# 1 "./include/linux/atomic.h" 1
# 6 "./include/asm-generic/bitops/atomic.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_set_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 arch_atomic_long_or(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_clear_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 arch_atomic_long_andnot(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_change_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 arch_atomic_long_xor(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_and_set_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 if (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_130(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p) == sizeof(char) || sizeof(*p) == sizeof(short) || sizeof(*p) == sizeof(int) || sizeof(*p) == sizeof(long)) || sizeof(*p) == sizeof(long long))) __compiletime_assert_130(); } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); }) & mask)
  return 1;

 old = arch_atomic_long_fetch_or(mask, (atomic_long_t *)p);
 return !!(old & mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_and_clear_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 if (!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_131(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p) == sizeof(char) || sizeof(*p) == sizeof(short) || sizeof(*p) == sizeof(int) || sizeof(*p) == sizeof(long)) || sizeof(*p) == sizeof(long long))) __compiletime_assert_131(); } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); }) & mask))
  return 0;

 old = arch_atomic_long_fetch_andnot(mask, (atomic_long_t *)p);
 return !!(old & mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_and_change_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 old = arch_atomic_long_fetch_xor(mask, (atomic_long_t *)p);
 return !!(old & mask);
}

# 1 "./include/asm-generic/bitops/instrumented-atomic.h" 1
# 26 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_set_bit(nr, addr);
}
# 39 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_clear_bit(nr, addr);
}
# 55 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_change_bit(nr, addr);
}
# 68 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_set_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_set_bit(nr, addr);
}
# 81 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_clear_bit(nr, addr);
}
# 94 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_change_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_change_bit(nr, addr);
}
# 75 "./include/asm-generic/bitops/atomic.h" 2
# 28 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/lock.h" 1
# 18 "./include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_and_set_bit_lock(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 if (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_132(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p) == sizeof(char) || sizeof(*p) == sizeof(short) || sizeof(*p) == sizeof(int) || sizeof(*p) == sizeof(long)) || sizeof(*p) == sizeof(long long))) __compiletime_assert_132(); } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); }) & mask)
  return 1;

 old = arch_atomic_long_fetch_or_acquire(mask, (atomic_long_t *)p);
 return !!(old & mask);
}
# 40 "./include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_clear_bit_unlock(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 arch_atomic_long_fetch_andnot_release(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}
# 58 "./include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
arch___clear_bit_unlock(unsigned int nr, volatile unsigned long *p)
{
 unsigned long old;

 p += ((nr) / 64);
 old = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_133(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p) == sizeof(char) || sizeof(*p) == sizeof(short) || sizeof(*p) == sizeof(int) || sizeof(*p) == sizeof(long)) || sizeof(*p) == sizeof(long long))) __compiletime_assert_133(); } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); });
 old &= ~((((1UL))) << ((nr) % 64));
 arch_atomic_long_set_release((atomic_long_t *)p, old);
}
# 79 "./include/asm-generic/bitops/lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_clear_bit_unlock_is_negative_byte(unsigned int nr,
         volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 old = arch_atomic_long_fetch_andnot_release(mask, (atomic_long_t *)p);
 return !!(old & ((((1UL))) << (7)));
}



# 1 "./include/asm-generic/bitops/instrumented-lock.h" 1
# 23 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_clear_bit_unlock(nr, addr);
}
# 38 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 instrument_write(addr + ((nr) / 64), sizeof(long));
 arch___clear_bit_unlock(nr, addr);
}
# 53 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_set_bit_lock(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_set_bit_lock(nr, addr);
}
# 71 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 return arch_clear_bit_unlock_is_negative_byte(nr, addr);
}
# 93 "./include/asm-generic/bitops/lock.h" 2
# 29 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/non-atomic.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "./include/asm-generic/bitops/non-atomic.h" 2
# 16 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p |= mask;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p &= ~mask;
}
# 45 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch___change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p ^= mask;
}
# 64 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 85 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_bit(unsigned int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 64)] >> (nr & (64 -1)));
}
# 30 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/le.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 7 "./include/asm-generic/bitops/le.h" 2
# 1 "./arch/arm64/include/uapi/asm/byteorder.h" 1
# 23 "./arch/arm64/include/uapi/asm/byteorder.h"
# 1 "./include/linux/byteorder/little_endian.h" 1




# 1 "./include/uapi/linux/byteorder/little_endian.h" 1
# 14 "./include/uapi/linux/byteorder/little_endian.h"
# 1 "./include/linux/swab.h" 1




# 1 "./include/uapi/linux/swab.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/swab.h" 1
# 1 "./include/uapi/asm-generic/swab.h" 1
# 2 "./arch/arm64/include/generated/uapi/asm/swab.h" 2
# 9 "./include/uapi/linux/swab.h" 2
# 48 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x000000ffUL) << 24) | (((__u32)(val) & (__u32)0x0000ff00UL) << 8) | (((__u32)(val) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(val) & (__u32)0xff000000UL) >> 24)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{







 return ((__u64)( (((__u64)(val) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(val) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(val) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(val) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(val) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(val) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(val) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(val) & (__u64)0xff00000000000000ULL) >> 56)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __swab(const unsigned long y)
{

 return (__builtin_constant_p((__u64)(y)) ? ((__u64)( (((__u64)(y) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(y) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(y) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(y) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(y) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(y) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(y) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(y) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(y));



}
# 171 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "./include/linux/swab.h" 2
# 15 "./include/uapi/linux/byteorder/little_endian.h" 2
# 45 "./include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "./include/linux/byteorder/little_endian.h" 2





# 1 "./include/linux/byteorder/generic.h" 1
# 144 "./include/linux/byteorder/generic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__builtin_constant_p((__u32)((src[i]))) ? ((__u32)( (((__u32)((src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)((src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)((src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32((src[i]))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (__builtin_constant_p((__u32)(( __u32)(__be32)(src[i]))) ? ((__u32)( (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(src[i])));
}
# 12 "./include/linux/byteorder/little_endian.h" 2
# 24 "./arch/arm64/include/uapi/asm/byteorder.h" 2
# 8 "./include/asm-generic/bitops/le.h" 2






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_first_zero_bit(addr, size);
}
# 83 "./include/asm-generic/bitops/le.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit_le(int nr, const void *addr)
{
 return arch_test_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit_le(int nr, void *addr)
{
 arch___set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_le(int nr, void *addr)
{
 arch___clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit_le(int nr, void *addr)
{
 return arch___test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return arch___test_and_clear_bit(nr ^ 0, addr);
}
# 31 "./arch/arm64/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 32 "./arch/arm64/include/asm/bitops.h" 2
# 14 "./include/linux/bitops.h" 2
# 49 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p((__u64)w) ? (((((unsigned int) ((!!(((__u64)w) & (1ULL << 0))) + (!!(((__u64)w) & (1ULL << 1))) + (!!(((__u64)w) & (1ULL << 2))) + (!!(((__u64)w) & (1ULL << 3))) + (!!(((__u64)w) & (1ULL << 4))) + (!!(((__u64)w) & (1ULL << 5))) + (!!(((__u64)w) & (1ULL << 6))) + (!!(((__u64)w) & (1ULL << 7))))) + ((unsigned int) ((!!((((__u64)w) >> 8) & (1ULL << 0))) + (!!((((__u64)w) >> 8) & (1ULL << 1))) + (!!((((__u64)w) >> 8) & (1ULL << 2))) + (!!((((__u64)w) >> 8) & (1ULL << 3))) + (!!((((__u64)w) >> 8) & (1ULL << 4))) + (!!((((__u64)w) >> 8) & (1ULL << 5))) + (!!((((__u64)w) >> 8) & (1ULL << 6))) + (!!((((__u64)w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((__u64)w) >> 16) & (1ULL << 0))) + (!!((((__u64)w) >> 16) & (1ULL << 1))) + (!!((((__u64)w) >> 16) & (1ULL << 2))) + (!!((((__u64)w) >> 16) & (1ULL << 3))) + (!!((((__u64)w) >> 16) & (1ULL << 4))) + (!!((((__u64)w) >> 16) & (1ULL << 5))) + (!!((((__u64)w) >> 16) & (1ULL << 6))) + (!!((((__u64)w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 16) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!((((__u64)w) >> 32) & (1ULL << 0))) + (!!((((__u64)w) >> 32) & (1ULL << 1))) + (!!((((__u64)w) >> 32) & (1ULL << 2))) + (!!((((__u64)w) >> 32) & (1ULL << 3))) + (!!((((__u64)w) >> 32) & (1ULL << 4))) + (!!((((__u64)w) >> 32) & (1ULL << 5))) + (!!((((__u64)w) >> 32) & (1ULL << 6))) + (!!((((__u64)w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 32) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((__u64)w) >> 32) >> 16) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64((__u64)w));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 149 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order(unsigned int count)
{
 if (count == 0)
  return -1;

 return fls(--count);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 return (int)fls_long(--l);
}
# 202 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  set_bit(nr, addr);
 else
  clear_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  arch___set_bit(nr, addr);
 else
  arch___clear_bit(nr, addr);
}
# 18 "./include/linux/thread_info.h" 2
# 36 "./include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};
# 63 "./include/linux/thread_info.h"
# 1 "./arch/arm64/include/asm/thread_info.h" 1
# 15 "./arch/arm64/include/asm/thread_info.h"
struct task_struct;

# 1 "./arch/arm64/include/asm/stack_pointer.h" 1







register unsigned long current_stack_pointer asm ("sp");
# 18 "./arch/arm64/include/asm/thread_info.h" 2
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 19 "./arch/arm64/include/asm/thread_info.h" 2
# 1 "./arch/arm64/include/asm/page-def.h" 1
# 20 "./arch/arm64/include/asm/thread_info.h" 2




struct thread_info {
 unsigned long flags;



 union {
  u64 preempt_count;
  struct {




   u32 count;
   u32 need_resched;

  } preempt;
 };




 u32 cpu;
};
# 55 "./arch/arm64/include/asm/thread_info.h"
void arch_setup_new_exec(void);


void arch_release_task_struct(struct task_struct *tsk);
int arch_dup_task_struct(struct task_struct *dst,
    struct task_struct *src);
# 64 "./include/linux/thread_info.h" 2

# 1 "./include/linux/sched/thread_info_api_lowlevel.h" 1
# 10 "./include/linux/sched/thread_info_api_lowlevel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return arch_test_bit(flag, (unsigned long *)&ti->flags);
}
# 66 "./include/linux/thread_info.h" 2
# 76 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{
 return 0;
}
# 6 "./arch/arm64/include/asm/preempt.h" 2
# 1 "./include/linux/sched/thread_info_api.h" 1




# 1 "./include/linux/sched.h" 1
# 15 "./include/linux/sched.h"
# 1 "./include/uapi/linux/sched.h" 1
# 92 "./include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
 __u64 __attribute__((aligned(8))) set_tid;
 __u64 __attribute__((aligned(8))) set_tid_size;
 __u64 __attribute__((aligned(8))) cgroup;
};
# 16 "./include/linux/sched.h" 2

# 1 "./include/linux/sched/per_task.h" 1
# 40 "./include/linux/sched/per_task.h"
# 1 "./include/linux/sched/per_task_types.h" 1
# 41 "./include/linux/sched/per_task.h" 2







# 1 "./include/generated/asm-offsets.h" 1
# 49 "./include/linux/sched/per_task.h" 2
# 18 "./include/linux/sched.h" 2
# 1 "./include/linux/cache.h" 1





# 1 "./arch/arm64/include/asm/cache.h" 1







# 1 "./arch/arm64/include/asm/cputype.h" 1
# 148 "./arch/arm64/include/asm/cputype.h"
# 1 "./arch/arm64/include/asm/sysreg.h" 1
# 14 "./arch/arm64/include/asm/sysreg.h"
# 1 "./include/linux/kasan-tags.h" 1
# 15 "./arch/arm64/include/asm/sysreg.h" 2

# 1 "./arch/arm64/include/asm/gpr-num.h" 1
# 17 "./arch/arm64/include/asm/sysreg.h" 2
# 149 "./arch/arm64/include/asm/cputype.h" 2
# 161 "./arch/arm64/include/asm/cputype.h"
struct midr_range {
 u32 model;
 u32 rv_min;
 u32 rv_max;
};
# 178 "./arch/arm64/include/asm/cputype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool midr_is_cpu_model_range(u32 midr, u32 model, u32 rv_min,
        u32 rv_max)
{
 u32 _model = midr & ((0xff << 24) | (0xfff << 4) | (0xf << 16));
 u32 rv = midr & (0xf | (0xf << 20));

 return _model == model && rv >= rv_min && rv <= rv_max;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_midr_in_range(u32 midr, struct midr_range const *range)
{
 return midr_is_cpu_model_range(midr, range->model,
           range->rv_min, range->rv_max);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_midr_in_range_list(u32 midr, struct midr_range const *ranges)
{
 while (ranges->model)
  if (is_midr_in_range(midr, ranges++))
   return true;
 return false;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __attribute__((__const__)) read_cpuid_id(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __attribute__((__const__)) read_cpuid_mpidr(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((5) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __attribute__((__const__)) read_cpuid_implementor(void)
{
 return (((read_cpuid_id()) & (0xff << 24)) >> 24);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __attribute__((__const__)) read_cpuid_part_number(void)
{
 return (((read_cpuid_id()) & (0xfff << 4)) >> 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __attribute__((__const__)) read_cpuid_cachetype(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((3) << 16) | ((0) << 12) | ((0) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}
# 9 "./arch/arm64/include/asm/cache.h" 2
# 64 "./arch/arm64/include/asm/cache.h"
extern unsigned long __icache_flags;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int icache_is_aliasing(void)
{
 return arch_test_bit(0, &__icache_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int icache_is_vpipt(void)
{
 return arch_test_bit(1, &__icache_flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 cache_type_cwg(void)
{
 return (read_cpuid_cachetype() >> 24) & 15;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cache_line_size_of_cpu(void)
{
 u32 cwg = cache_type_cwg();

 return cwg ? 4 << cwg : (128);
}

int cache_line_size(void);
# 112 "./arch/arm64/include/asm/cache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __attribute__((__const__)) read_cpuid_effective_cachetype(void)
{
 u32 ctr = read_cpuid_cachetype();

 if (!(ctr & ((((1UL))) << (28)))) {
  u64 clidr = ({ u64 __val; asm volatile("mrs %0, " "clidr_el1" : "=r" (__val)); __val; });

  if ((((clidr) >> 24) & 0x7) == 0 ||
      ((((clidr) >> 21) & 0x7) == 0 && (((clidr) >> 27) & 0x7) == 0))
   ctr |= ((((1UL))) << (28));
 }

 return ctr;
}
# 7 "./include/linux/cache.h" 2
# 19 "./include/linux/sched.h" 2




# 1 "./include/linux/pid_types.h" 1




enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
# 24 "./include/linux/sched.h" 2
# 1 "./include/linux/latencytop.h" 1
# 14 "./include/linux/latencytop.h"
struct task_struct;
struct ctl_table;
# 47 "./include/linux/latencytop.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_latency_tracing(struct task_struct *p)
{
}
# 25 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/prio.h" 1
# 32 "./include/linux/sched/prio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 26 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/types.h" 1
# 17 "./include/linux/sched/types.h"
struct task_cputime {
 u64 stime;
 u64 utime;
 unsigned long long sum_exec_runtime;
};
# 27 "./include/linux/sched.h" 2
# 1 "./include/linux/syscall_user_dispatch.h" 1
# 26 "./include/linux/syscall_user_dispatch.h"
struct syscall_user_dispatch {};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int set_syscall_user_dispatch(unsigned long mode, unsigned long offset,
         unsigned long len, char *selector)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_syscall_work_syscall_user_dispatch(struct task_struct *tsk)
{
}
# 28 "./include/linux/sched.h" 2
# 1 "./include/linux/task_io_accounting.h" 1
# 15 "./include/linux/task_io_accounting.h"
struct task_io_accounting {
# 49 "./include/linux/task_io_accounting.h"
};
# 29 "./include/linux/sched.h" 2
# 1 "./include/linux/smp_types.h" 1






# 1 "./include/linux/llist_types.h" 1






struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 22 "./include/linux/llist_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 8 "./include/linux/smp_types.h" 2

enum {
 CSD_FLAG_LOCK = 0x01,

 IRQ_WORK_PENDING = 0x01,
 IRQ_WORK_BUSY = 0x02,
 IRQ_WORK_LAZY = 0x04,
 IRQ_WORK_HARD_IRQ = 0x08,

 IRQ_WORK_CLAIMED = (IRQ_WORK_PENDING | IRQ_WORK_BUSY),

 CSD_TYPE_ASYNC = 0x00,
 CSD_TYPE_SYNC = 0x10,
 CSD_TYPE_IRQ_WORK = 0x20,
 CSD_TYPE_TTWU = 0x30,

 CSD_FLAG_TYPE_MASK = 0xF0,
};
# 60 "./include/linux/smp_types.h"
struct __call_single_node {
 struct llist_node llist;
 union {
  unsigned int u_flags;
  atomic_t a_flags;
 };

 u16 src, dst;

};

typedef void (*smp_call_func_t)(void *info);
typedef bool (*smp_cond_func_t)(int cpu, void *info);




struct __call_single_data {
 struct __call_single_node node;
 smp_call_func_t func;
 void *info;
};





typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));
# 30 "./include/linux/sched.h" 2
# 40 "./include/linux/sched.h"
struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct bpf_local_storage;
struct bpf_run_ctx;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct io_uring_task;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 228 "./include/linux/sched.h"
extern void scheduler_tick(void);

extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);
           void preempt_schedule_irq(void);




extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);

struct sched_statistics {
# 283 "./include/linux/sched.h"
} __attribute__((__aligned__((1 << (6)))));

union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 need_mb;
 } b;
 u32 s;
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct task_struct {
 unsigned int __state;
# 311 "./include/linux/sched.h"
 u8 per_task_area[8192] __attribute__((__aligned__((1 << (6)))));
# 320 "./include/linux/sched.h"
 unsigned int ptrace;


 struct __call_single_node wake_entry;


 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 struct sched_statistics stats;

 unsigned int policy;
 int nr_cpus_allowed;
 void *migration_pending;

 unsigned short migration_disabled;

 unsigned short migration_flags;


 int rcu_read_lock_nesting;
 union rcu_special rcu_read_unlock_special;
 struct list_head rcu_node_entry;
 struct rcu_node *rcu_blocked_node;
# 356 "./include/linux/sched.h"
 struct list_head tasks;

 struct mm_struct *mm;
 struct mm_struct *active_mm;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;





 unsigned :0;
# 398 "./include/linux/sched.h"
 unsigned sched_remote_wakeup:1;


 unsigned in_execve:1;
 unsigned in_iowait:1;




 unsigned in_user_fault:1;






 unsigned no_cgroup_migration:1;

 unsigned frozen:1;


 unsigned use_memdelay:1;
# 431 "./include/linux/sched.h"
 unsigned in_eventfd_signal:1;


 unsigned long atomic_flags;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 450 "./include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;


 void *pf_io_worker;

 u64 utime;
 u64 stime;




 u64 gtime;


 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 start_boottime;


 unsigned long min_flt;
 unsigned long maj_flt;




 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 533 "./include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;






 struct fs_struct *fs;


 struct files_struct *files;


 struct io_uring_task *io_uring;



 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;

 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;



 struct audit_context *audit_context;

 unsigned int sessionid;

 struct syscall_user_dispatch syscall_dispatch;


 u64 parent_exec_id;
 u64 self_exec_id;

 struct wake_q_node wake_q;



 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;
# 614 "./include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;


 struct blk_plug *plug;


 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 struct capture_control *capture_control;


 unsigned long ptrace_message;

 struct task_io_accounting ioac;
# 650 "./include/linux/sched.h"
 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;
 unsigned int futex_state;






 struct mempolicy *mempolicy;
 short il_prev;
 short pref_node_fork;


 int numa_scan_seq;
 unsigned int numa_scan_period;
 unsigned int numa_scan_period_max;
 int numa_preferred_nid;
 unsigned long numa_migrate_retry;

 u64 node_stamp;
 u64 last_task_numa_placement;
 u64 last_sum_exec_runtime;
 struct callback_head numa_work;
# 696 "./include/linux/sched.h"
 struct numa_group *numa_group;
# 712 "./include/linux/sched.h"
 unsigned long *numa_faults;
 unsigned long total_numa_faults;







 unsigned long numa_faults_locality[3];

 unsigned long numa_pages_migrated;



 u32 rseq_sig;




 unsigned long rseq_event_mask;



 struct pipe_inode_info *splice_pipe;
# 750 "./include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 763 "./include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 820 "./include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;


 struct mem_cgroup *active_memcg;



 struct request_queue *throttle_queue;
# 849 "./include/linux/sched.h"
 struct task_struct *oom_reaper_list;






 void *security;
# 896 "./include/linux/sched.h"
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 914 "./include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 947 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
}

extern pid_t task_ppid_nr(const struct task_struct *tsk);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}
# 1000 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;

extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern void sched_set_fifo(struct task_struct *p);
extern void sched_set_fifo_low(struct task_struct *p);
extern void sched_set_normal(struct task_struct *p, int nice);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);
# 1051 "./include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);





extern bool sched_task_on_rq(struct task_struct *p);
extern unsigned long get_wchan(struct task_struct *p);
# 6 "./include/linux/sched/thread_info_api.h" 2
# 1 "./include/linux/sched/thread.h" 1
# 14 "./include/linux/sched/thread.h"
extern __typeof__(struct thread_struct) per_task__thread;
extern __typeof__(void *) per_task__stack;
# 7 "./include/linux/sched/thread_info_api.h" 2


union thread_union {

 struct task_struct task;




 unsigned long stack[((((1UL))) << (14 + 0))/sizeof(long)];
};





extern unsigned long init_stack[((((1UL))) << (14 + 0)) / sizeof(unsigned long)];



extern __typeof__(struct thread_info) per_task__ti;
# 47 "./include/linux/sched/thread_info_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((tsk)->per_task_area + ((unsigned long)0))))), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((tsk)->per_task_area + ((unsigned long)0))))), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((tsk)->per_task_area + ((unsigned long)0))))), flag, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((tsk)->per_task_area + ((unsigned long)0))))), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((tsk)->per_task_area + ((unsigned long)0))))), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((tsk)->per_task_area + ((unsigned long)0))))), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,1)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_cpu(const struct task_struct *p)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_134(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu) == sizeof(long long))) __compiletime_assert_134(); } while (0); (*(const volatile typeof( _Generic(((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu))) *)&((&(*((__typeof__(per_task__ti) *)((p)->per_task_area + ((unsigned long)0)))))->cpu)); });
}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 7 "./arch/arm64/include/asm/preempt.h" 2




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int preempt_count(void)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_135(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long long))) __compiletime_assert_135(); } while (0); (*(const volatile typeof( _Generic(((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count))) *)&((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void preempt_count_set(u64 pc)
{

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_136(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long long))) __compiletime_assert_136(); } while (0); do { *(volatile typeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) *)&((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) = (pc); } while (0); } while (0);
}
# 30 "./arch/arm64/include/asm/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_preempt_need_resched(void)
{
 (&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.need_resched = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_preempt_need_resched(void)
{
 (&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.need_resched = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_preempt_need_resched(void)
{
 return !(&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.need_resched;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __preempt_count_add(int val)
{
 u32 pc = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_137(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long long))) __compiletime_assert_137(); } while (0); (*(const volatile typeof( _Generic(((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count))) *)&((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count)); });
 pc += val;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_138(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long long))) __compiletime_assert_138(); } while (0); do { *(volatile typeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) *)&((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) = (pc); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __preempt_count_sub(int val)
{
 u32 pc = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_139(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long long))) __compiletime_assert_139(); } while (0); (*(const volatile typeof( _Generic(((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count))) *)&((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count)); });
 pc -= val;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_140(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) == sizeof(long long))) __compiletime_assert_140(); } while (0); do { *(volatile typeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) *)&((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt.count) = (pc); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __preempt_count_dec_and_test(void)
{
 struct thread_info *ti = (&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))));
 u64 pc = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_141(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ti->preempt_count) == sizeof(char) || sizeof(ti->preempt_count) == sizeof(short) || sizeof(ti->preempt_count) == sizeof(int) || sizeof(ti->preempt_count) == sizeof(long)) || sizeof(ti->preempt_count) == sizeof(long long))) __compiletime_assert_141(); } while (0); (*(const volatile typeof( _Generic((ti->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ti->preempt_count))) *)&(ti->preempt_count)); });


 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_142(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ti->preempt.count) == sizeof(char) || sizeof(ti->preempt.count) == sizeof(short) || sizeof(ti->preempt.count) == sizeof(int) || sizeof(ti->preempt.count) == sizeof(long)) || sizeof(ti->preempt.count) == sizeof(long long))) __compiletime_assert_142(); } while (0); do { *(volatile typeof(ti->preempt.count) *)&(ti->preempt.count) = (--pc); } while (0); } while (0);
# 74 "./arch/arm64/include/asm/preempt.h"
 return !pc || !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_143(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ti->preempt_count) == sizeof(char) || sizeof(ti->preempt_count) == sizeof(short) || sizeof(ti->preempt_count) == sizeof(int) || sizeof(ti->preempt_count) == sizeof(long)) || sizeof(ti->preempt_count) == sizeof(long long))) __compiletime_assert_143(); } while (0); (*(const volatile typeof( _Generic((ti->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ti->preempt_count))) *)&(ti->preempt_count)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool should_resched(int preempt_offset)
{
 u64 pc = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_144(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count) == sizeof(char) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count) == sizeof(short) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count) == sizeof(int) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count) == sizeof(long)) || sizeof((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count) == sizeof(long long))) __compiletime_assert_144(); } while (0); (*(const volatile typeof( _Generic(((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count))) *)&((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0)))))->preempt_count)); });
 return pc == preempt_offset;
}


void preempt_schedule(void);

void preempt_schedule_notrace(void);
# 80 "./include/linux/preempt.h" 2
# 90 "./include/linux/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned char interrupt_context_level(void)
{
 unsigned long pc = preempt_count();
 unsigned char level = 0;

 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4))));
 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4)) | (((1UL << (4))-1) << ((0 + 8) + 8))));
 level += !!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4)) | (((1UL << (4))-1) << ((0 + 8) + 8)) | (1UL << (0 + 8))));

 return level;
}
# 310 "./include/linux/preempt.h"
struct preempt_notifier;
struct task_struct;
# 327 "./include/linux/preempt.h"
struct preempt_ops {
 void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 void (*sched_out)(struct preempt_notifier *notifier,
     struct task_struct *next);
};
# 340 "./include/linux/preempt.h"
struct preempt_notifier {
 struct hlist_node link;
 struct preempt_ops *ops;
};

void preempt_notifier_inc(void);
void preempt_notifier_dec(void);
void preempt_notifier_register(struct preempt_notifier *notifier);
void preempt_notifier_unregister(struct preempt_notifier *notifier);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void preempt_notifier_init(struct preempt_notifier *notifier,
         struct preempt_ops *ops)
{
 INIT_HLIST_NODE(&notifier->link);
 notifier->ops = ops;
}
# 416 "./include/linux/preempt.h"
extern void migrate_disable(void);
extern void migrate_enable(void);
# 8 "./include/linux/bottom_half.h" 2




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool local_bh_blocked(void) { return false; }
# 27 "./include/linux/rcupdate.h" 2



extern __typeof__(u8) per_task__rcu_tasks_holdout;
extern __typeof__(int) per_task__rcu_tasks_idle_cpu;
extern __typeof__(struct list_head) per_task__rcu_tasks_holdout_list;
# 42 "./include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void rcu_barrier_tasks_rude(void);
void synchronize_rcu(void);



void __rcu_read_lock(void);
void __rcu_read_unlock(void);
# 88 "./include/linux/rcupdate.h"
void rcu_init(void);
extern int rcu_scheduler_active;
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_init_tasks_generic(void);





void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 112 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_exit(void) { }
# 122 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_init_nohz(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_offload(int cpu) { return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_deoffload(int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_nocb_flush_deferred_wakeup(void) { }
# 165 "./include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
# 198 "./include/linux/rcupdate.h"
void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 215 "./include/linux/rcupdate.h"
# 1 "./include/linux/rcutree.h" 1
# 20 "./include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kvfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
void rcu_momentary_dyntick_idle(void);
void kfree_rcu_scheduler_running(void);
bool rcu_gp_might_be_stalled(void);
unsigned long get_state_synchronize_rcu(void);
unsigned long start_poll_synchronize_rcu(void);
bool poll_state_synchronize_rcu(unsigned long oldstate);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_is_idle_cpu(int cpu);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_irq_exit_check_preempt(void) { }


void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active;
void rcu_end_inkernel_boot(void);
bool rcu_inkernel_boot_has_ended(void);
bool rcu_is_watching(void);





int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 216 "./include/linux/rcupdate.h" 2
# 236 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_lockdep_current_cpu_online(void) { return true; }


extern struct lockdep_map rcu_lock_map;
extern struct lockdep_map rcu_bh_lock_map;
extern struct lockdep_map rcu_sched_lock_map;
extern struct lockdep_map rcu_callback_map;
# 628 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}
# 659 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock(void)
{
 do { } while (0 && (!rcu_is_watching()));

 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 682 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_bh(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 720 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0);
}
# 920 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 938 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_145(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rhp->func) == sizeof(char) || sizeof(rhp->func) == sizeof(short) || sizeof(rhp->func) == sizeof(int) || sizeof(rhp->func) == sizeof(long)) || sizeof(rhp->func) == sizeof(long long))) __compiletime_assert_145(); } while (0); (*(const volatile typeof( _Generic((rhp->func), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rhp->func))) *)&(rhp->func)); });

 if (func == f)
  return true;
 ({ int __ret_warn_on = !!(func != (rcu_callback_t)~0L); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/rcupdate.h\"; .popsection; .long 14472b - 14470b; .short 945; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return false;
}


extern int rcu_expedited;
extern int rcu_normal;
# 6 "./include/linux/rtnetlink.h" 2
# 1 "./include/linux/mutex_types.h" 1
# 14 "./include/linux/mutex_types.h"
# 1 "./include/linux/spinlock_types.h" 1
# 12 "./include/linux/spinlock_types.h"
# 1 "./include/linux/spinlock_types_raw.h" 1






# 1 "./arch/arm64/include/asm/spinlock_types.h" 1
# 12 "./arch/arm64/include/asm/spinlock_types.h"
# 1 "./include/asm-generic/qspinlock_types.h" 1
# 14 "./include/asm-generic/qspinlock_types.h"
typedef struct qspinlock {
 union {
  atomic_t val;







  struct {
   u8 locked;
   u8 pending;
  };
  struct {
   u16 locked_pending;
   u16 tail;
  };
# 43 "./include/asm-generic/qspinlock_types.h"
 };
} arch_spinlock_t;
# 13 "./arch/arm64/include/asm/spinlock_types.h" 2
# 1 "./include/asm-generic/qrwlock_types.h" 1






# 1 "./arch/arm64/include/asm/spinlock_types.h" 1
# 8 "./include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 union {
  atomic_t cnts;
  struct {

   u8 wlocked;
   u8 __lstate[3];




  };
 };
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 14 "./arch/arm64/include/asm/spinlock_types.h" 2
# 8 "./include/linux/spinlock_types_raw.h" 2




# 1 "./include/linux/lockdep_types.h" 1
# 17 "./include/linux/lockdep_types.h"
enum lockdep_wait_type {
 LD_WAIT_INV = 0,

 LD_WAIT_FREE,
 LD_WAIT_SPIN,




 LD_WAIT_CONFIG = LD_WAIT_SPIN,

 LD_WAIT_SLEEP,

 LD_WAIT_MAX,
};

enum lockdep_lock_type {
 LD_LOCK_NORMAL = 0,
 LD_LOCK_PERCPU,
 LD_LOCK_MAX,
};
# 294 "./include/linux/lockdep_types.h"
struct lock_class_key { };




struct lockdep_map { };

struct pin_cookie { };
# 13 "./include/linux/spinlock_types_raw.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;







} raw_spinlock_t;
# 13 "./include/linux/spinlock_types.h" 2




typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 28 "./include/linux/spinlock_types.h"
 };
} spinlock_t;
# 91 "./include/linux/spinlock_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}
# 116 "./include/linux/spinlock_types.h"
# 1 "./include/linux/rwlock_types.h" 1
# 25 "./include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;







} rwlock_t;
# 117 "./include/linux/spinlock_types.h" 2
# 15 "./include/linux/mutex_types.h" 2
# 1 "./include/linux/osq_lock_types.h" 1
# 11 "./include/linux/osq_lock_types.h"
struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};
# 16 "./include/linux/mutex_types.h" 2
# 57 "./include/linux/mutex_types.h"
struct mutex {
 atomic_long_t owner;
 raw_spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;






};
# 7 "./include/linux/rtnetlink.h" 2
# 1 "./include/linux/netdevice_types.h" 1
# 24 "./include/linux/netdevice_types.h"
# 1 "./include/linux/dynamic_queue_limits_types.h" 1






struct dql {

 unsigned int num_queued;
 unsigned int adj_limit;
 unsigned int last_obj_cnt;



 unsigned int limit __attribute__((__aligned__((1 << (6)))));
 unsigned int num_completed;

 unsigned int prev_ovlimit;
 unsigned int prev_num_queued;
 unsigned int prev_last_obj_cnt;

 unsigned int lowest_slack;
 unsigned long slack_start_time;


 unsigned int max_limit;
 unsigned int min_limit;
 unsigned int slack_hold_time;
};
# 25 "./include/linux/netdevice_types.h" 2
# 1 "./include/linux/hashtable_types.h" 1
# 10 "./include/linux/hashtable_types.h"
# 1 "./include/linux/log2_const.h" 1
# 11 "./include/linux/hashtable_types.h" 2
# 26 "./include/linux/netdevice_types.h" 2
# 1 "./include/linux/seqlock_types.h" 1
# 16 "./include/linux/seqlock_types.h"
# 1 "./include/linux/lockdep_api.h" 1
# 15 "./include/linux/lockdep_api.h"
struct task_struct;


extern int prove_locking;
extern int lock_stat;
# 251 "./include/linux/lockdep_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_init_task(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_off(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_on(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_set_selftest_task(struct task_struct *task)
{
}
# 300 "./include/linux/lockdep_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_register_key(struct lock_class_key *key)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_unregister_key(struct lock_class_key *key)
{
}







extern int lock_is_held(const void *);
extern int lockdep_is_held(const void *);
# 338 "./include/linux/lockdep_api.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 352 "./include/linux/lockdep_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_free_task(struct task_struct *task) {}
# 397 "./include/linux/lockdep_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 565 "./include/linux/lockdep_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 17 "./include/linux/seqlock_types.h" 2
# 1 "./include/linux/seqcount_types.h" 1
# 31 "./include/linux/seqcount_types.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;
# 63 "./include/linux/seqcount_types.h"
typedef struct {
 seqcount_t seqcount;
} seqcount_latch_t;
# 18 "./include/linux/seqlock_types.h" 2
# 203 "./include/linux/seqlock_types.h"
typedef struct seqcount_raw_spinlock { seqcount_t seqcount; ; } seqcount_raw_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_raw_spinlock_ptr(seqcount_raw_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_raw_spinlock_sequence(const seqcount_raw_spinlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_146(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_146(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (false && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_147(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_147(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_raw_spinlock_preemptible(const seqcount_raw_spinlock_t *s) { if (!0) return false; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_raw_spinlock_assert(const seqcount_raw_spinlock_t *s) { ; }
typedef struct seqcount_spinlock { seqcount_t seqcount; ; } seqcount_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_spinlock_ptr(seqcount_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_spinlock_sequence(const seqcount_spinlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_148(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_148(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_149(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_149(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_spinlock_preemptible(const seqcount_spinlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_spinlock_assert(const seqcount_spinlock_t *s) { ; }
typedef struct seqcount_rwlock { seqcount_t seqcount; ; } seqcount_rwlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_rwlock_ptr(seqcount_rwlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_rwlock_sequence(const seqcount_rwlock_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_150(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_150(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_151(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_151(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_rwlock_preemptible(const seqcount_rwlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_rwlock_assert(const seqcount_rwlock_t *s) { ; }
typedef struct seqcount_mutex { seqcount_t seqcount; ; } seqcount_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_mutex_ptr(seqcount_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_mutex_sequence(const seqcount_mutex_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_152(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_152(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_153(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_153(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_mutex_preemptible(const seqcount_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_mutex_assert(const seqcount_mutex_t *s) { ; }
typedef struct seqcount_ww_mutex { seqcount_t seqcount; ; } seqcount_ww_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_ww_mutex_ptr(seqcount_ww_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_ww_mutex_sequence(const seqcount_ww_mutex_t *s) { unsigned seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_154(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_154(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_155(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_155(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_ww_mutex_preemptible(const seqcount_ww_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_ww_mutex_assert(const seqcount_ww_mutex_t *s) { ; }
# 252 "./include/linux/seqlock_types.h"
typedef struct {




 seqcount_spinlock_t seqcount;
 spinlock_t lock;
} seqlock_t;
# 27 "./include/linux/netdevice_types.h" 2
# 1 "./include/linux/device_types.h" 1
# 16 "./include/linux/device_types.h"
# 1 "./include/linux/kobject_types.h" 1
# 18 "./include/linux/kobject_types.h"
# 1 "./include/linux/sysfs_types.h" 1
# 22 "./include/linux/sysfs_types.h"
struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 81 "./include/linux/sysfs_types.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 168 "./include/linux/sysfs_types.h"
struct file;
struct vm_area_struct;
struct address_space;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 struct address_space *(*f_mapping)(void);
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 235 "./include/linux/sysfs_types.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};
# 19 "./include/linux/kobject_types.h" 2

# 1 "./include/linux/kref.h" 1




# 1 "./include/linux/kref_types.h" 1





# 1 "./include/linux/refcount_types.h" 1
# 15 "./include/linux/refcount_types.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;
# 7 "./include/linux/kref_types.h" 2

struct kref {
 refcount_t refcount;
};
# 6 "./include/linux/kref.h" 2
# 21 "./include/linux/kobject_types.h" 2
# 1 "./include/linux/uidgid.h" 1
# 16 "./include/linux/uidgid.h"
# 1 "./include/linux/highuid.h" 1
# 35 "./include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "./include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "./include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct kuid_struct {
 uid_t val;
} kuid_t;


typedef struct kgid_struct {
 gid_t val;
} kgid_t;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "./include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}
# 22 "./include/linux/kobject_types.h" 2
# 37 "./include/linux/kobject_types.h"
extern u64 uevent_seqnum;
# 49 "./include/linux/kobject_types.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[64];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;
# 17 "./include/linux/device_types.h" 2
# 1 "./include/linux/numa_types.h" 1
# 18 "./include/linux/device_types.h" 2

# 1 "./include/linux/dev_printk.h" 1
# 16 "./include/linux/dev_printk.h"
# 1 "./include/linux/dynamic_debug.h" 1
# 14 "./include/linux/dynamic_debug.h"
struct _ddebug {




 const char *modname;
 const char *function;
 const char *filename;
 const char *format;
 unsigned int lineno:18;
# 45 "./include/linux/dynamic_debug.h"
 unsigned int flags:8;

 union {
  struct static_key_true dd_key_true;
  struct static_key_false dd_key_false;
 } key;

} __attribute__((aligned(8)));
# 186 "./include/linux/dynamic_debug.h"
# 1 "./include/linux/string.h" 1
# 10 "./include/linux/string.h"
# 1 "./include/uapi/linux/string.h" 1
# 11 "./include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "./arch/arm64/include/asm/string.h" 1
# 10 "./arch/arm64/include/asm/string.h"
extern char *strrchr(const char *, int c);


extern char *strchr(const char *, int c);



extern int strcmp(const char *, const char *);


extern int strncmp(const char *, const char *, __kernel_size_t);



extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *, __kernel_size_t);


extern int memcmp(const void *, const void *, size_t);


extern void *memchr(const void *, int, __kernel_size_t);



extern void *memcpy(void *, const void *, __kernel_size_t);
extern void *__memcpy(void *, const void *, __kernel_size_t);


extern void *memmove(void *, const void *, __kernel_size_t);
extern void *__memmove(void *, const void *, __kernel_size_t);


extern void *memset(void *, int, __kernel_size_t);
extern void *__memset(void *, int, __kernel_size_t);
# 21 "./include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);
# 54 "./include/linux/string.h"
extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);





extern char * strchrnul(const char *,int);

extern char * strnchrnul(const char *, size_t, int);

extern char * strnchr(const char *, size_t, int);




extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);
# 94 "./include/linux/string.h"
extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);







extern void *memset16(uint16_t *, uint16_t, __kernel_size_t);



extern void *memset32(uint32_t *, uint32_t, __kernel_size_t);



extern void *memset64(uint64_t *, uint64_t, __kernel_size_t);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 153 "./include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);





extern int bcmp(const void *,const void *,__kernel_size_t);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_flushcache(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
}


void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 204 "./include/linux/string.h"
extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);

int ptr_to_hashval(const void *ptr, unsigned long *hashval_out);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
# 235 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_explicit(void *s, size_t count)
{
 memset(s, 0, count);
 __asm__ __volatile__("": :"r"(s) :"memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}





void memcpy_and_pad(void *dest, size_t dest_len, const void *src, size_t count,
      int pad);
# 309 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 187 "./include/linux/dynamic_debug.h" 2



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ddebug_add_module(struct _ddebug *tab, unsigned int n,
        const char *modname)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ddebug_remove_module(const char *mod)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ddebug_dyndbg_module_param_cb(char *param, char *val,
      const char *modname)
{
 if (strstr(param, "dyndbg")) {

  ({ do {} while (0); _printk("\001" "4" "dyndbg param is supported only in " "CONFIG_DYNAMIC_DEBUG builds\n"); });

  return 0;
 }
 return -22;
}
# 224 "./include/linux/dynamic_debug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dynamic_debug_exec_queries(const char *query, const char *modname)
{
 ({ do {} while (0); _printk("\001" "4" "neighbour" ": " "kernel not built with CONFIG_DYNAMIC_DEBUG_CORE\n"); });
 return 0;
}
# 17 "./include/linux/dev_printk.h" 2


# 1 "./include/linux/ratelimit.h" 1




# 1 "./include/linux/ratelimit_types.h" 1





# 1 "./include/uapi/linux/param.h" 1




# 1 "./arch/arm64/include/uapi/asm/param.h" 1
# 22 "./arch/arm64/include/uapi/asm/param.h"
# 1 "./include/asm-generic/param.h" 1




# 1 "./include/uapi/asm-generic/param.h" 1
# 6 "./include/asm-generic/param.h" 2
# 23 "./arch/arm64/include/uapi/asm/param.h" 2
# 6 "./include/uapi/linux/param.h" 2
# 7 "./include/linux/ratelimit_types.h" 2








struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "./include/linux/ratelimit_types.h"
extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 6 "./include/linux/ratelimit.h" 2
# 1 "./include/linux/spinlock.h" 1
# 7 "./include/linux/ratelimit.h" 2

extern void ratelimit_state_init(struct ratelimit_state *rs, int interval, int burst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 250),
     10);
}

extern void ratelimit_state_exit(struct ratelimit_state *rs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;
# 20 "./include/linux/dev_printk.h" 2





struct device;
struct va_format;




struct dev_printk_info {
 char subsystem[16];
 char device[48];
};



__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void _dev_printk(const char *level, const struct device *dev,
   const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_emerg(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_alert(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_crit(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_err(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_warn(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_notice(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 20 "./include/linux/device_types.h" 2
# 1 "./include/linux/pm.h" 1
# 12 "./include/linux/pm.h"
# 1 "./include/linux/workqueue_types.h" 1








# 1 "./include/linux/timer.h" 1





# 1 "./include/linux/ktime.h" 1




# 1 "./include/linux/ktime_types.h" 1
# 25 "./include/linux/ktime_types.h"
# 1 "./include/vdso/ktime.h" 1




# 1 "./include/vdso/jiffies.h" 1





# 1 "./include/vdso/time64.h" 1
# 7 "./include/vdso/jiffies.h" 2
# 6 "./include/vdso/ktime.h" 2
# 26 "./include/linux/ktime_types.h" 2


typedef s64 ktime_t;
# 6 "./include/linux/ktime.h" 2
# 7 "./include/linux/timer.h" 2





struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;




};
# 89 "./include/linux/timer.h"
struct lock_class_key;



void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags,
        const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, func, flags, name, key);
}
# 152 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_timer_on_stack(struct timer_list *timer) { }
# 170 "./include/linux/timer.h"
extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp, loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "./include/linux/workqueue_types.h" 2
# 1 "./include/linux/threads.h" 1
# 11 "./include/linux/workqueue_types.h" 2







struct workqueue_struct;
struct timer_list;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_INACTIVE_BIT= 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_INACTIVE = 1 << WORK_STRUCT_INACTIVE_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,


 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS),


 WORK_CPU_UNBOUND = 256,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};





enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 165 "./include/linux/workqueue_types.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};





struct execute_work {
 struct work_struct work;
};
# 13 "./include/linux/pm.h" 2
# 1 "./include/linux/wait_types.h" 1
# 10 "./include/linux/wait_types.h"
# 1 "./include/uapi/linux/wait.h" 1
# 11 "./include/linux/wait_types.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 28 "./include/linux/wait_types.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 62 "./include/linux/wait_types.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 80 "./include/linux/wait_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}

extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 14 "./include/linux/pm.h" 2
# 1 "./include/linux/hrtimer_types.h" 1
# 19 "./include/linux/hrtimer_types.h"
# 1 "./include/linux/timerqueue.h" 1




# 1 "./include/linux/timerqueue_types.h" 1




# 1 "./include/linux/rbtree_types.h" 1
# 20 "./include/linux/rbtree_types.h"
struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 41 "./include/linux/rbtree_types.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};
# 6 "./include/linux/timerqueue_types.h" 2


struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root_cached rb_root;
};
# 6 "./include/linux/timerqueue.h" 2
# 20 "./include/linux/hrtimer_types.h" 2
# 1 "./include/linux/ktime.h" 1
# 21 "./include/linux/hrtimer_types.h" 2
# 42 "./include/linux/hrtimer_types.h"
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 57 "./include/linux/hrtimer_types.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,
 HRTIMER_MODE_HARD = 0x08,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,

 HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 136 "./include/linux/hrtimer_types.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
 u8 is_hard;
};
# 15 "./include/linux/pm.h" 2
# 1 "./include/linux/completion.h" 1
# 12 "./include/linux/completion.h"
# 1 "./include/linux/swait.h" 1




# 1 "./include/linux/swait_types.h" 1
# 37 "./include/linux/swait_types.h"
struct task_struct;

struct swait_queue_head {
 raw_spinlock_t lock;
 struct list_head task_list;
};

struct swait_queue {
 struct task_struct *task;
 struct list_head task_list;
};
# 65 "./include/linux/swait_types.h"
extern void __init_swait_queue_head(struct swait_queue_head *q, const char *name,
        struct lock_class_key *key);
# 6 "./include/linux/swait.h" 2
# 13 "./include/linux/completion.h" 2
# 26 "./include/linux/completion.h"
struct completion {
 unsigned int done;
 struct swait_queue_head wait;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_acquire(struct completion *x) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_release(struct completion *x) {}
# 84 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_swait_queue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 97 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 16 "./include/linux/pm.h" 2




extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
# 42 "./include/linux/pm.h"
extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 275 "./include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 499 "./include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 521 "./include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;

 unsigned int clock_op_might_sleep;
 struct mutex clock_mutex;
 struct list_head clock_list;


 struct pm_domain_data *domain_data;

};
# 564 "./include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;
 unsigned int must_resume:1;
 unsigned int may_skip_resume:1;




 struct hrtimer suspend_timer;
 u64 timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int needs_force_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 u64 last_busy;
 u64 active_time;
 u64 suspended_time;
 u64 accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 642 "./include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 int (*start)(struct device *dev);
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 706 "./include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);

extern bool dev_pm_skip_resume(struct device *dev);
extern bool dev_pm_skip_suspend(struct device *dev);
# 800 "./include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 21 "./include/linux/device_types.h" 2

# 1 "./arch/arm64/include/asm/device.h" 1







struct dev_archdata {
};

struct pdev_archdata {
};
# 23 "./include/linux/device_types.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct dev_pin_info;
struct dev_iommu;
# 47 "./include/linux/device_types.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};
# 100 "./include/linux/device_types.h"
struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned int min_align_mask;
 unsigned long segment_boundary_mask;
};
# 119 "./include/linux/device_types.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 158 "./include/linux/device_types.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};
# 174 "./include/linux/device_types.h"
enum device_removable {
 DEVICE_REMOVABLE_NOT_SUPPORTED = 0,
 DEVICE_REMOVABLE_UNKNOWN,
 DEVICE_FIXED,
 DEVICE_REMOVABLE,
};
# 188 "./include/linux/device_types.h"
struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 struct list_head defer_sync;
 enum dl_dev_state status;
};
# 294 "./include/linux/device_types.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;




 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct em_perf_domain *em_pd;



 struct irq_domain *msi_domain;


 struct dev_pin_info *pins;


 raw_spinlock_t msi_lock;
 struct list_head msi_list;


 const struct dma_map_ops *dma_ops;

 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_limit;
 const struct bus_dma_region *dma_range_map;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;


 struct dma_coherent_mem *dma_mem;



 struct cma *cma_area;



 struct io_tlb_mem *dma_io_tlb_mem;


 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;


 int numa_node;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct dev_iommu *iommu;

 enum device_removable removable;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
 bool state_synced:1;
 bool can_match:1;



 bool dma_coherent:1;




};
# 423 "./include/linux/device_types.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 474 "./include/linux/device_types.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 void (*sync_state)(struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
# 531 "./include/linux/device_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); _Static_assert(__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) || __builtin_types_compatible_p(typeof(*(kobj)), typeof(void)), "pointer type mismatch in container_of()"); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}


const char *dev_driver_string(const struct device *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}
# 28 "./include/linux/netdevice_types.h" 2

# 1 "./include/linux/u64_stats_sync_types.h" 1
# 13 "./include/linux/u64_stats_sync_types.h"
struct u64_stats_sync {



};


# 1 "./arch/arm64/include/generated/asm/local64.h" 1
# 1 "./include/asm-generic/local64.h" 1




# 1 "./arch/arm64/include/generated/asm/local64_types.h" 1
# 1 "./include/asm-generic/local64_types.h" 1








# 1 "./arch/arm64/include/generated/asm/local_types.h" 1
# 1 "./include/asm-generic/local_types.h" 1
# 1 "./arch/arm64/include/generated/asm/local.h" 1
# 1 "./include/asm-generic/local.h" 1





# 1 "./include/linux/percpu.h" 1




# 1 "./include/linux/pfn.h" 1
# 13 "./include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "./include/linux/percpu.h" 2
# 1 "./include/linux/smp_api.h" 1
# 12 "./include/linux/smp_api.h"
# 1 "./include/linux/cpumask.h" 1




# 1 "./include/linux/cpumask_types.h" 1
# 15 "./include/linux/cpumask_types.h"
typedef struct cpumask { unsigned long bits[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 60 "./include/linux/cpumask_types.h"
typedef struct cpumask cpumask_var_t[1];
# 103 "./include/linux/cpumask_types.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
extern struct cpumask __cpu_dying_mask;
# 128 "./include/linux/cpumask_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}



extern const unsigned long cpu_all_bits[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 153 "./include/linux/cpumask_types.h"
extern unsigned int nr_cpu_ids;
# 164 "./include/linux/cpumask_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{



}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, ((unsigned int)256));
 return cpu;
}
# 6 "./include/linux/cpumask.h" 2
# 13 "./include/linux/smp_api.h" 2


# 1 "./arch/arm64/include/asm/smp.h" 1
# 28 "./arch/arm64/include/asm/smp.h"
# 1 "./arch/arm64/include/asm/percpu.h" 1
# 13 "./arch/arm64/include/asm/percpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_my_cpu_offset(unsigned long off)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr tpidr_el1, %0" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "32" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "msr tpidr_el2, %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


   :: "r" (off) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __hyp_my_cpu_offset(void)
{




 return ({ u64 __val; asm volatile("mrs %0, " "tpidr_el2" : "=r" (__val)); __val; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __kern_my_cpu_offset(void)
{
 unsigned long off;





 asm(".if ""1"" == 1\n" "661:\n\t" "mrs %0, tpidr_el1" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "32" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "mrs %0, tpidr_el2" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


  : "=r" (off) :
  "Q" (*(const unsigned long *)current_stack_pointer));

 return off;
}
# 121 "./arch/arm64/include/asm/percpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_8(void *ptr) { return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_156(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u8 *)ptr) == sizeof(char) || sizeof(*(u8 *)ptr) == sizeof(short) || sizeof(*(u8 *)ptr) == sizeof(int) || sizeof(*(u8 *)ptr) == sizeof(long)) || sizeof(*(u8 *)ptr) == sizeof(long long))) __compiletime_assert_156(); } while (0); (*(const volatile typeof( _Generic((*(u8 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u8 *)ptr))) *)&(*(u8 *)ptr)); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_8(void *ptr, unsigned long val) { do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_157(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u8 *)ptr) == sizeof(char) || sizeof(*(u8 *)ptr) == sizeof(short) || sizeof(*(u8 *)ptr) == sizeof(int) || sizeof(*(u8 *)ptr) == sizeof(long)) || sizeof(*(u8 *)ptr) == sizeof(long long))) __compiletime_assert_157(); } while (0); do { *(volatile typeof(*(u8 *)ptr) *)&(*(u8 *)ptr) = ((u8)val); } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_16(void *ptr) { return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_158(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u16 *)ptr) == sizeof(char) || sizeof(*(u16 *)ptr) == sizeof(short) || sizeof(*(u16 *)ptr) == sizeof(int) || sizeof(*(u16 *)ptr) == sizeof(long)) || sizeof(*(u16 *)ptr) == sizeof(long long))) __compiletime_assert_158(); } while (0); (*(const volatile typeof( _Generic((*(u16 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u16 *)ptr))) *)&(*(u16 *)ptr)); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_16(void *ptr, unsigned long val) { do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_159(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u16 *)ptr) == sizeof(char) || sizeof(*(u16 *)ptr) == sizeof(short) || sizeof(*(u16 *)ptr) == sizeof(int) || sizeof(*(u16 *)ptr) == sizeof(long)) || sizeof(*(u16 *)ptr) == sizeof(long long))) __compiletime_assert_159(); } while (0); do { *(volatile typeof(*(u16 *)ptr) *)&(*(u16 *)ptr) = ((u16)val); } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_32(void *ptr) { return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_160(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u32 *)ptr) == sizeof(char) || sizeof(*(u32 *)ptr) == sizeof(short) || sizeof(*(u32 *)ptr) == sizeof(int) || sizeof(*(u32 *)ptr) == sizeof(long)) || sizeof(*(u32 *)ptr) == sizeof(long long))) __compiletime_assert_160(); } while (0); (*(const volatile typeof( _Generic((*(u32 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u32 *)ptr))) *)&(*(u32 *)ptr)); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_32(void *ptr, unsigned long val) { do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_161(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u32 *)ptr) == sizeof(char) || sizeof(*(u32 *)ptr) == sizeof(short) || sizeof(*(u32 *)ptr) == sizeof(int) || sizeof(*(u32 *)ptr) == sizeof(long)) || sizeof(*(u32 *)ptr) == sizeof(long long))) __compiletime_assert_161(); } while (0); do { *(volatile typeof(*(u32 *)ptr) *)&(*(u32 *)ptr) = ((u32)val); } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_64(void *ptr) { return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_162(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u64 *)ptr) == sizeof(char) || sizeof(*(u64 *)ptr) == sizeof(short) || sizeof(*(u64 *)ptr) == sizeof(int) || sizeof(*(u64 *)ptr) == sizeof(long)) || sizeof(*(u64 *)ptr) == sizeof(long long))) __compiletime_assert_162(); } while (0); (*(const volatile typeof( _Generic((*(u64 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u64 *)ptr))) *)&(*(u64 *)ptr)); }); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_64(void *ptr, unsigned long val) { do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_163(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(u64 *)ptr) == sizeof(char) || sizeof(*(u64 *)ptr) == sizeof(short) || sizeof(*(u64 *)ptr) == sizeof(int) || sizeof(*(u64 *)ptr) == sizeof(long)) || sizeof(*(u64 *)ptr) == sizeof(long long))) __compiletime_assert_163(); } while (0); do { *(volatile typeof(*(u64 *)ptr) *)&(*(u64 *)ptr) = ((u64)val); } while (0); } while (0); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stadd" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stadd" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stadd" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "add" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stadd" "\t%" "" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stclr" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stclr" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stclr" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "bic" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stclr" "\t%" "" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stset" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stset" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stset" "\t%" "w" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "orr" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "stset" "\t%" "" "[val], %[ptr]\n" ".rept	" "3" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __percpu_add_return_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 ret; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "b" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "ldadd" "\t%" "w" "[val], %" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" ".rept	" "2" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __percpu_add_return_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 ret; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "h" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "ldadd" "\t%" "w" "[val], %" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" ".rept	" "2" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __percpu_add_return_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 ret; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "ldadd" "\t%" "w" "[val], %" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" ".rept	" "2" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); return ret; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __percpu_add_return_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 ret; asm volatile (".if ""1"" == 1\n" "661:\n\t" "1:	ldxr" "" "\t%" "" "[ret], %[ptr]\n" "add" "\t%" "" "[ret], %" "" "[ret], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "ldadd" "\t%" "" "[val], %" "" "[ret], %[ptr]\n" "add" "\t%" "" "[ret], %" "" "[ret], %" "" "[val]\n" ".rept	" "2" "\nnop\n.endr\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); return ret; }
# 247 "./arch/arm64/include/asm/percpu.h"
# 1 "./include/asm-generic/percpu.h" 1






# 1 "./include/linux/percpu-defs.h" 1
# 308 "./include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __this_cpu_preempt_check(const char *op) { }
# 8 "./include/asm-generic/percpu.h" 2
# 19 "./include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[256];
# 48 "./include/asm-generic/percpu.h"
extern void setup_per_cpu_areas(void);
# 248 "./arch/arm64/include/asm/percpu.h" 2
# 29 "./arch/arm64/include/asm/smp.h" 2


# 1 "./include/linux/cpumask.h" 1
# 32 "./arch/arm64/include/asm/smp.h" 2


extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) cpu_number;
# 48 "./arch/arm64/include/asm/smp.h"
extern u64 __cpu_logical_map[256];
extern u64 cpu_logical_map(unsigned int cpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpu_logical_map(unsigned int cpu, u64 hwid)
{
 __cpu_logical_map[cpu] = hwid;
}

struct seq_file;





extern void smp_init_cpus(void);




extern void set_smp_ipi_range(int ipi_base, int nr_ipi);




           void secondary_start_kernel(void);






struct secondary_data {
 struct task_struct *task;
 long status;
};

extern struct secondary_data secondary_data;
extern long __early_cpu_boot_status;
extern void secondary_entry(void);

extern void arch_send_call_function_single_ipi(int cpu);
extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_send_wakeup_ipi_mask(const struct cpumask *mask)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_164(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_164(); } while (0);
}


extern int __cpu_disable(void);

extern void __cpu_die(unsigned int cpu);
extern void cpu_die(void);
extern void cpu_die_early(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_park_loop(void)
{
 for (;;) {
  asm volatile("wfe" : : : "memory");
  asm volatile("wfi" : : : "memory");
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_cpu_boot_status(int val)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_165(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(secondary_data.status) == sizeof(char) || sizeof(secondary_data.status) == sizeof(short) || sizeof(secondary_data.status) == sizeof(int) || sizeof(secondary_data.status) == sizeof(long)) || sizeof(secondary_data.status) == sizeof(long long))) __compiletime_assert_165(); } while (0); do { *(volatile typeof(secondary_data.status) *)&(secondary_data.status) = (val); } while (0); } while (0);

 asm volatile("dsb " "ishst" : : : "memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_panic_kernel(void)
{
 update_cpu_boot_status((3));
 cpu_park_loop();
}
# 142 "./arch/arm64/include/asm/smp.h"
bool cpus_are_stuck_in_kernel(void);

extern void crash_smp_send_stop(void);
extern bool smp_crash_stop_failed(void);
extern void panic_smp_self_stop(void);
# 16 "./include/linux/smp_api.h" 2


struct task_struct;
struct pt_regs;





extern void __smp_call_single_queue(int cpu, struct llist_node *node);


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);

void on_each_cpu_cond_mask(smp_cond_func_t cond_func, smp_call_func_t func,
      void *info, bool wait, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, struct __call_single_data *csd);





void panic_smp_self_stop(void);
void nmi_panic_self_stop(struct pt_regs *regs);
void crash_smp_send_stop(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu(smp_call_func_t func, void *info, int wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 70 "./include/linux/smp_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_mask(const struct cpumask *mask,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, mask);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_cond(smp_cond_func_t cond_func,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(cond_func, func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 98 "./include/linux/smp_api.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




void smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void setup_nr_cpu_ids(void);
extern void smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 249 "./include/linux/smp_api.h"
extern void arch_disable_smp_support(void);

extern void arch_thaw_secondary_cpus_begin(void);
extern void arch_thaw_secondary_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 7 "./include/linux/percpu.h" 2
# 60 "./include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * pcpu_alloc_alloc_info(int nr_groups, int nr_units);
extern void pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern void pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai, void *base_addr);


extern int pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
      size_t atom_size,
      pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
      pcpu_fc_alloc_fn_t alloc_fn,
      pcpu_fc_free_fn_t free_fn);



extern int pcpu_page_first_chunk(size_t reserved_size,
     pcpu_fc_alloc_fn_t alloc_fn,
     pcpu_fc_free_fn_t free_fn,
     pcpu_fc_populate_pte_fn_t populate_pte_fn);


extern void *__alloc_reserved_percpu(size_t size, size_t align) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);





extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__alloc_percpu(size_t size, size_t align) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 139 "./include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 7 "./include/asm-generic/local.h" 2

# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 9 "./include/asm-generic/local.h" 2
# 23 "./include/asm-generic/local.h"
typedef struct
{
 atomic_long_t a;
} local_t;
# 2 "./arch/arm64/include/generated/asm/local.h" 2
# 2 "./include/asm-generic/local_types.h" 2
# 2 "./arch/arm64/include/generated/asm/local_types.h" 2
# 10 "./include/asm-generic/local64_types.h" 2

typedef struct {
 local_t a;
} local64_t;
# 2 "./arch/arm64/include/generated/asm/local64_types.h" 2
# 6 "./include/asm-generic/local64.h" 2
# 2 "./arch/arm64/include/generated/asm/local64.h" 2
# 21 "./include/linux/u64_stats_sync_types.h" 2

typedef struct {
 local64_t v;
} u64_stats_t ;
# 30 "./include/linux/netdevice_types.h" 2
# 1 "./include/linux/align.h" 1
# 31 "./include/linux/netdevice_types.h" 2

# 1 "./include/net/net_namespace_types_possible.h" 1




struct net;

typedef struct {

 struct net *net;

} possible_net_t;


extern struct net init_net;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net *read_pnet(const possible_net_t *pnet)
{

 return pnet->net;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_pnet(possible_net_t *pnet, struct net *net)
{

 pnet->net = net;

}
# 33 "./include/linux/netdevice_types.h" 2

# 1 "./include/uapi/linux/netdevice.h" 1
# 29 "./include/uapi/linux/netdevice.h"
# 1 "./include/uapi/linux/if.h" 1
# 23 "./include/uapi/linux/if.h"
# 1 "./include/uapi/linux/libc-compat.h" 1
# 24 "./include/uapi/linux/if.h" 2

# 1 "./include/linux/socket_types.h" 1




# 1 "./include/uapi/linux/socket.h" 1




# 1 "./include/uapi/linux/socket_types.h" 1
# 6 "./include/uapi/linux/socket.h" 2

typedef unsigned short __kernel_sa_family_t;
typedef __kernel_sa_family_t sa_family_t;
# 19 "./include/uapi/linux/socket.h"
struct __kernel_sockaddr_storage {
 union {
  struct {
   __kernel_sa_family_t ss_family;

   char __data[128 - sizeof(unsigned short)];


  };
  void *__align;
 };
};
# 6 "./include/linux/socket_types.h" 2






struct sockaddr {
 sa_family_t sa_family;
 char sa_data[14];
};

struct linger {
 int l_onoff;
 int l_linger;
};
# 26 "./include/uapi/linux/if.h" 2
# 37 "./include/uapi/linux/if.h"
# 1 "./include/uapi/linux/hdlc/ioctl.h" 1
# 40 "./include/uapi/linux/hdlc/ioctl.h"
typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
} sync_serial_settings;

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
 unsigned int slot_map;
} te1_settings;

typedef struct {
 unsigned short encoding;
 unsigned short parity;
} raw_hdlc_proto;

typedef struct {
 unsigned int t391;
 unsigned int t392;
 unsigned int n391;
 unsigned int n392;
 unsigned int n393;
 unsigned short lmi;
 unsigned short dce;
} fr_proto;

typedef struct {
 unsigned int dlci;
} fr_proto_pvc;

typedef struct {
 unsigned int dlci;
 char master[16];
}fr_proto_pvc_info;

typedef struct {
    unsigned int interval;
    unsigned int timeout;
} cisco_proto;

typedef struct {
 unsigned short dce;
 unsigned int modulo;
 unsigned int window;
 unsigned int t1;
 unsigned int t2;
 unsigned int n2;
} x25_hdlc_proto;
# 38 "./include/uapi/linux/if.h" 2
# 82 "./include/uapi/linux/if.h"
enum net_device_flags {


 IFF_UP = 1<<0,
 IFF_BROADCAST = 1<<1,
 IFF_DEBUG = 1<<2,
 IFF_LOOPBACK = 1<<3,
 IFF_POINTOPOINT = 1<<4,
 IFF_NOTRAILERS = 1<<5,
 IFF_RUNNING = 1<<6,
 IFF_NOARP = 1<<7,
 IFF_PROMISC = 1<<8,
 IFF_ALLMULTI = 1<<9,
 IFF_MASTER = 1<<10,
 IFF_SLAVE = 1<<11,
 IFF_MULTICAST = 1<<12,
 IFF_PORTSEL = 1<<13,
 IFF_AUTOMEDIA = 1<<14,
 IFF_DYNAMIC = 1<<15,


 IFF_LOWER_UP = 1<<16,
 IFF_DORMANT = 1<<17,
 IFF_ECHO = 1<<18,

};
# 167 "./include/uapi/linux/if.h"
enum {
 IF_OPER_UNKNOWN,
 IF_OPER_NOTPRESENT,
 IF_OPER_DOWN,
 IF_OPER_LOWERLAYERDOWN,
 IF_OPER_TESTING,
 IF_OPER_DORMANT,
 IF_OPER_UP,
};


enum {
 IF_LINK_MODE_DEFAULT,
 IF_LINK_MODE_DORMANT,
 IF_LINK_MODE_TESTING,
};
# 196 "./include/uapi/linux/if.h"
struct ifmap {
 unsigned long mem_start;
 unsigned long mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;

};


struct if_settings {
 unsigned int type;
 unsigned int size;
 union {

  raw_hdlc_proto *raw_hdlc;
  cisco_proto *cisco;
  fr_proto *fr;
  fr_proto_pvc *fr_pvc;
  fr_proto_pvc_info *fr_pvc_info;
  x25_hdlc_proto *x25;


  sync_serial_settings *sync;
  te1_settings *te1;
 } ifs_ifsu;
};
# 234 "./include/uapi/linux/if.h"
struct ifreq {

 union
 {
  char ifrn_name[16];
 } ifr_ifrn;

 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  int ifru_ivalue;
  int ifru_mtu;
  struct ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  void * ifru_data;
  struct if_settings ifru_settings;
 } ifr_ifru;
};
# 286 "./include/uapi/linux/if.h"
struct ifconf {
 int ifc_len;
 union {
  char *ifcu_buf;
  struct ifreq *ifcu_req;
 } ifc_ifcu;
};
# 30 "./include/uapi/linux/netdevice.h" 2
# 1 "./include/uapi/linux/if_ether.h" 1
# 169 "./include/uapi/linux/if_ether.h"
struct ethhdr {
 unsigned char h_dest[6];
 unsigned char h_source[6];
 __be16 h_proto;
} __attribute__((packed));
# 31 "./include/uapi/linux/netdevice.h" 2
# 1 "./include/uapi/linux/if_packet.h" 1







struct sockaddr_pkt {
 unsigned short spkt_family;
 unsigned char spkt_device[14];
 __be16 spkt_protocol;
};

struct sockaddr_ll {
 unsigned short sll_family;
 __be16 sll_protocol;
 int sll_ifindex;
 unsigned short sll_hatype;
 unsigned char sll_pkttype;
 unsigned char sll_halen;
 unsigned char sll_addr[8];
};
# 75 "./include/uapi/linux/if_packet.h"
struct tpacket_stats {
 unsigned int tp_packets;
 unsigned int tp_drops;
};

struct tpacket_stats_v3 {
 unsigned int tp_packets;
 unsigned int tp_drops;
 unsigned int tp_freeze_q_cnt;
};

struct tpacket_rollover_stats {
 __u64 __attribute__((aligned(8))) tp_all;
 __u64 __attribute__((aligned(8))) tp_huge;
 __u64 __attribute__((aligned(8))) tp_failed;
};

union tpacket_stats_u {
 struct tpacket_stats stats1;
 struct tpacket_stats_v3 stats3;
};

struct tpacket_auxdata {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
};
# 132 "./include/uapi/linux/if_packet.h"
struct tpacket_hdr {
 unsigned long tp_status;
 unsigned int tp_len;
 unsigned int tp_snaplen;
 unsigned short tp_mac;
 unsigned short tp_net;
 unsigned int tp_sec;
 unsigned int tp_usec;
};





struct tpacket2_hdr {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u8 tp_padding[4];
};

struct tpacket_hdr_variant1 {
 __u32 tp_rxhash;
 __u32 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u16 tp_padding;
};

struct tpacket3_hdr {
 __u32 tp_next_offset;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u32 tp_snaplen;
 __u32 tp_len;
 __u32 tp_status;
 __u16 tp_mac;
 __u16 tp_net;

 union {
  struct tpacket_hdr_variant1 hv1;
 };
 __u8 tp_padding[8];
};

struct tpacket_bd_ts {
 unsigned int ts_sec;
 union {
  unsigned int ts_usec;
  unsigned int ts_nsec;
 };
};

struct tpacket_hdr_v1 {
 __u32 block_status;
 __u32 num_pkts;
 __u32 offset_to_first_pkt;




 __u32 blk_len;
# 209 "./include/uapi/linux/if_packet.h"
 __u64 __attribute__((aligned(8))) seq_num;
# 236 "./include/uapi/linux/if_packet.h"
 struct tpacket_bd_ts ts_first_pkt, ts_last_pkt;
};

union tpacket_bd_header_u {
 struct tpacket_hdr_v1 bh1;
};

struct tpacket_block_desc {
 __u32 version;
 __u32 offset_to_priv;
 union tpacket_bd_header_u hdr;
};




enum tpacket_versions {
 TPACKET_V1,
 TPACKET_V2,
 TPACKET_V3
};
# 271 "./include/uapi/linux/if_packet.h"
struct tpacket_req {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
};

struct tpacket_req3 {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
 unsigned int tp_retire_blk_tov;
 unsigned int tp_sizeof_priv;
 unsigned int tp_feature_req_word;
};

union tpacket_req_u {
 struct tpacket_req req;
 struct tpacket_req3 req3;
};

struct packet_mreq {
 int mr_ifindex;
 unsigned short mr_type;
 unsigned short mr_alen;
 unsigned char mr_address[8];
};

struct fanout_args {

 __u16 id;
 __u16 type_flags;




 __u32 max_num_members;
};
# 32 "./include/uapi/linux/netdevice.h" 2
# 1 "./include/uapi/linux/if_link.h" 1





# 1 "./include/uapi/linux/netlink.h" 1
# 37 "./include/uapi/linux/netlink.h"
struct sockaddr_nl {
 __kernel_sa_family_t nl_family;
 unsigned short nl_pad;
 __u32 nl_pid;
        __u32 nl_groups;
};

struct nlmsghdr {
 __u32 nlmsg_len;
 __u16 nlmsg_type;
 __u16 nlmsg_flags;
 __u32 nlmsg_seq;
 __u32 nlmsg_pid;
};
# 110 "./include/uapi/linux/netlink.h"
struct nlmsgerr {
 int error;
 struct nlmsghdr msg;
# 122 "./include/uapi/linux/netlink.h"
};
# 137 "./include/uapi/linux/netlink.h"
enum nlmsgerr_attrs {
 NLMSGERR_ATTR_UNUSED,
 NLMSGERR_ATTR_MSG,
 NLMSGERR_ATTR_OFFS,
 NLMSGERR_ATTR_COOKIE,
 NLMSGERR_ATTR_POLICY,

 __NLMSGERR_ATTR_MAX,
 NLMSGERR_ATTR_MAX = __NLMSGERR_ATTR_MAX - 1
};
# 163 "./include/uapi/linux/netlink.h"
struct nl_pktinfo {
 __u32 group;
};

struct nl_mmap_req {
 unsigned int nm_block_size;
 unsigned int nm_block_nr;
 unsigned int nm_frame_size;
 unsigned int nm_frame_nr;
};

struct nl_mmap_hdr {
 unsigned int nm_status;
 unsigned int nm_len;
 __u32 nm_group;

 __u32 nm_pid;
 __u32 nm_uid;
 __u32 nm_gid;
};
# 200 "./include/uapi/linux/netlink.h"
enum {
 NETLINK_UNCONNECTED = 0,
 NETLINK_CONNECTED,
};
# 214 "./include/uapi/linux/netlink.h"
struct nlattr {
 __u16 nla_len;
 __u16 nla_type;
};
# 250 "./include/uapi/linux/netlink.h"
struct nla_bitfield32 {
 __u32 value;
 __u32 selector;
};
# 287 "./include/uapi/linux/netlink.h"
enum netlink_attribute_type {
 NL_ATTR_TYPE_INVALID,

 NL_ATTR_TYPE_FLAG,

 NL_ATTR_TYPE_U8,
 NL_ATTR_TYPE_U16,
 NL_ATTR_TYPE_U32,
 NL_ATTR_TYPE_U64,

 NL_ATTR_TYPE_S8,
 NL_ATTR_TYPE_S16,
 NL_ATTR_TYPE_S32,
 NL_ATTR_TYPE_S64,

 NL_ATTR_TYPE_BINARY,
 NL_ATTR_TYPE_STRING,
 NL_ATTR_TYPE_NUL_STRING,

 NL_ATTR_TYPE_NESTED,
 NL_ATTR_TYPE_NESTED_ARRAY,

 NL_ATTR_TYPE_BITFIELD32,
};
# 340 "./include/uapi/linux/netlink.h"
enum netlink_policy_type_attr {
 NL_POLICY_TYPE_ATTR_UNSPEC,
 NL_POLICY_TYPE_ATTR_TYPE,
 NL_POLICY_TYPE_ATTR_MIN_VALUE_S,
 NL_POLICY_TYPE_ATTR_MAX_VALUE_S,
 NL_POLICY_TYPE_ATTR_MIN_VALUE_U,
 NL_POLICY_TYPE_ATTR_MAX_VALUE_U,
 NL_POLICY_TYPE_ATTR_MIN_LENGTH,
 NL_POLICY_TYPE_ATTR_MAX_LENGTH,
 NL_POLICY_TYPE_ATTR_POLICY_IDX,
 NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE,
 NL_POLICY_TYPE_ATTR_BITFIELD32_MASK,
 NL_POLICY_TYPE_ATTR_PAD,
 NL_POLICY_TYPE_ATTR_MASK,


 __NL_POLICY_TYPE_ATTR_MAX,
 NL_POLICY_TYPE_ATTR_MAX = __NL_POLICY_TYPE_ATTR_MAX - 1
};
# 7 "./include/uapi/linux/if_link.h" 2


struct rtnl_link_stats {
 __u32 rx_packets;
 __u32 tx_packets;
 __u32 rx_bytes;
 __u32 tx_bytes;
 __u32 rx_errors;
 __u32 tx_errors;
 __u32 rx_dropped;
 __u32 tx_dropped;
 __u32 multicast;
 __u32 collisions;

 __u32 rx_length_errors;
 __u32 rx_over_errors;
 __u32 rx_crc_errors;
 __u32 rx_frame_errors;
 __u32 rx_fifo_errors;
 __u32 rx_missed_errors;


 __u32 tx_aborted_errors;
 __u32 tx_carrier_errors;
 __u32 tx_fifo_errors;
 __u32 tx_heartbeat_errors;
 __u32 tx_window_errors;


 __u32 rx_compressed;
 __u32 tx_compressed;

 __u32 rx_nohandler;
};
# 215 "./include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
 __u64 rx_packets;
 __u64 tx_packets;
 __u64 rx_bytes;
 __u64 tx_bytes;
 __u64 rx_errors;
 __u64 tx_errors;
 __u64 rx_dropped;
 __u64 tx_dropped;
 __u64 multicast;
 __u64 collisions;


 __u64 rx_length_errors;
 __u64 rx_over_errors;
 __u64 rx_crc_errors;
 __u64 rx_frame_errors;
 __u64 rx_fifo_errors;
 __u64 rx_missed_errors;


 __u64 tx_aborted_errors;
 __u64 tx_carrier_errors;
 __u64 tx_fifo_errors;
 __u64 tx_heartbeat_errors;
 __u64 tx_window_errors;


 __u64 rx_compressed;
 __u64 tx_compressed;
 __u64 rx_nohandler;
};


struct rtnl_link_ifmap {
 __u64 mem_start;
 __u64 mem_end;
 __u64 base_addr;
 __u16 irq;
 __u8 dma;
 __u8 port;
};
# 276 "./include/uapi/linux/if_link.h"
enum {
 IFLA_UNSPEC,
 IFLA_ADDRESS,
 IFLA_BROADCAST,
 IFLA_IFNAME,
 IFLA_MTU,
 IFLA_LINK,
 IFLA_QDISC,
 IFLA_STATS,
 IFLA_COST,

 IFLA_PRIORITY,

 IFLA_MASTER,

 IFLA_WIRELESS,

 IFLA_PROTINFO,

 IFLA_TXQLEN,

 IFLA_MAP,

 IFLA_WEIGHT,

 IFLA_OPERSTATE,
 IFLA_LINKMODE,
 IFLA_LINKINFO,

 IFLA_NET_NS_PID,
 IFLA_IFALIAS,
 IFLA_NUM_VF,
 IFLA_VFINFO_LIST,
 IFLA_STATS64,
 IFLA_VF_PORTS,
 IFLA_PORT_SELF,
 IFLA_AF_SPEC,
 IFLA_GROUP,
 IFLA_NET_NS_FD,
 IFLA_EXT_MASK,
 IFLA_PROMISCUITY,

 IFLA_NUM_TX_QUEUES,
 IFLA_NUM_RX_QUEUES,
 IFLA_CARRIER,
 IFLA_PHYS_PORT_ID,
 IFLA_CARRIER_CHANGES,
 IFLA_PHYS_SWITCH_ID,
 IFLA_LINK_NETNSID,
 IFLA_PHYS_PORT_NAME,
 IFLA_PROTO_DOWN,
 IFLA_GSO_MAX_SEGS,
 IFLA_GSO_MAX_SIZE,
 IFLA_PAD,
 IFLA_XDP,
 IFLA_EVENT,
 IFLA_NEW_NETNSID,
 IFLA_IF_NETNSID,
 IFLA_TARGET_NETNSID = IFLA_IF_NETNSID,
 IFLA_CARRIER_UP_COUNT,
 IFLA_CARRIER_DOWN_COUNT,
 IFLA_NEW_IFINDEX,
 IFLA_MIN_MTU,
 IFLA_MAX_MTU,
 IFLA_PROP_LIST,
 IFLA_ALT_IFNAME,
 IFLA_PERM_ADDRESS,
 IFLA_PROTO_DOWN_REASON,




 IFLA_PARENT_DEV_NAME,
 IFLA_PARENT_DEV_BUS_NAME,

 __IFLA_MAX
};




enum {
 IFLA_PROTO_DOWN_REASON_UNSPEC,
 IFLA_PROTO_DOWN_REASON_MASK,
 IFLA_PROTO_DOWN_REASON_VALUE,

 __IFLA_PROTO_DOWN_REASON_CNT,
 IFLA_PROTO_DOWN_REASON_MAX = __IFLA_PROTO_DOWN_REASON_CNT - 1
};







enum {
 IFLA_INET_UNSPEC,
 IFLA_INET_CONF,
 __IFLA_INET_MAX,
};
# 410 "./include/uapi/linux/if_link.h"
enum {
 IFLA_INET6_UNSPEC,
 IFLA_INET6_FLAGS,
 IFLA_INET6_CONF,
 IFLA_INET6_STATS,
 IFLA_INET6_MCAST,
 IFLA_INET6_CACHEINFO,
 IFLA_INET6_ICMP6STATS,
 IFLA_INET6_TOKEN,
 IFLA_INET6_ADDR_GEN_MODE,
 IFLA_INET6_RA_MTU,
 __IFLA_INET6_MAX
};



enum in6_addr_gen_mode {
 IN6_ADDR_GEN_MODE_EUI64,
 IN6_ADDR_GEN_MODE_NONE,
 IN6_ADDR_GEN_MODE_STABLE_PRIVACY,
 IN6_ADDR_GEN_MODE_RANDOM,
};



enum {
 IFLA_BR_UNSPEC,
 IFLA_BR_FORWARD_DELAY,
 IFLA_BR_HELLO_TIME,
 IFLA_BR_MAX_AGE,
 IFLA_BR_AGEING_TIME,
 IFLA_BR_STP_STATE,
 IFLA_BR_PRIORITY,
 IFLA_BR_VLAN_FILTERING,
 IFLA_BR_VLAN_PROTOCOL,
 IFLA_BR_GROUP_FWD_MASK,
 IFLA_BR_ROOT_ID,
 IFLA_BR_BRIDGE_ID,
 IFLA_BR_ROOT_PORT,
 IFLA_BR_ROOT_PATH_COST,
 IFLA_BR_TOPOLOGY_CHANGE,
 IFLA_BR_TOPOLOGY_CHANGE_DETECTED,
 IFLA_BR_HELLO_TIMER,
 IFLA_BR_TCN_TIMER,
 IFLA_BR_TOPOLOGY_CHANGE_TIMER,
 IFLA_BR_GC_TIMER,
 IFLA_BR_GROUP_ADDR,
 IFLA_BR_FDB_FLUSH,
 IFLA_BR_MCAST_ROUTER,
 IFLA_BR_MCAST_SNOOPING,
 IFLA_BR_MCAST_QUERY_USE_IFADDR,
 IFLA_BR_MCAST_QUERIER,
 IFLA_BR_MCAST_HASH_ELASTICITY,
 IFLA_BR_MCAST_HASH_MAX,
 IFLA_BR_MCAST_LAST_MEMBER_CNT,
 IFLA_BR_MCAST_STARTUP_QUERY_CNT,
 IFLA_BR_MCAST_LAST_MEMBER_INTVL,
 IFLA_BR_MCAST_MEMBERSHIP_INTVL,
 IFLA_BR_MCAST_QUERIER_INTVL,
 IFLA_BR_MCAST_QUERY_INTVL,
 IFLA_BR_MCAST_QUERY_RESPONSE_INTVL,
 IFLA_BR_MCAST_STARTUP_QUERY_INTVL,
 IFLA_BR_NF_CALL_IPTABLES,
 IFLA_BR_NF_CALL_IP6TABLES,
 IFLA_BR_NF_CALL_ARPTABLES,
 IFLA_BR_VLAN_DEFAULT_PVID,
 IFLA_BR_PAD,
 IFLA_BR_VLAN_STATS_ENABLED,
 IFLA_BR_MCAST_STATS_ENABLED,
 IFLA_BR_MCAST_IGMP_VERSION,
 IFLA_BR_MCAST_MLD_VERSION,
 IFLA_BR_VLAN_STATS_PER_PORT,
 IFLA_BR_MULTI_BOOLOPT,
 IFLA_BR_MCAST_QUERIER_STATE,
 __IFLA_BR_MAX,
};



struct ifla_bridge_id {
 __u8 prio[2];
 __u8 addr[6];
};

enum {
 BRIDGE_MODE_UNSPEC,
 BRIDGE_MODE_HAIRPIN,
};

enum {
 IFLA_BRPORT_UNSPEC,
 IFLA_BRPORT_STATE,
 IFLA_BRPORT_PRIORITY,
 IFLA_BRPORT_COST,
 IFLA_BRPORT_MODE,
 IFLA_BRPORT_GUARD,
 IFLA_BRPORT_PROTECT,
 IFLA_BRPORT_FAST_LEAVE,
 IFLA_BRPORT_LEARNING,
 IFLA_BRPORT_UNICAST_FLOOD,
 IFLA_BRPORT_PROXYARP,
 IFLA_BRPORT_LEARNING_SYNC,
 IFLA_BRPORT_PROXYARP_WIFI,
 IFLA_BRPORT_ROOT_ID,
 IFLA_BRPORT_BRIDGE_ID,
 IFLA_BRPORT_DESIGNATED_PORT,
 IFLA_BRPORT_DESIGNATED_COST,
 IFLA_BRPORT_ID,
 IFLA_BRPORT_NO,
 IFLA_BRPORT_TOPOLOGY_CHANGE_ACK,
 IFLA_BRPORT_CONFIG_PENDING,
 IFLA_BRPORT_MESSAGE_AGE_TIMER,
 IFLA_BRPORT_FORWARD_DELAY_TIMER,
 IFLA_BRPORT_HOLD_TIMER,
 IFLA_BRPORT_FLUSH,
 IFLA_BRPORT_MULTICAST_ROUTER,
 IFLA_BRPORT_PAD,
 IFLA_BRPORT_MCAST_FLOOD,
 IFLA_BRPORT_MCAST_TO_UCAST,
 IFLA_BRPORT_VLAN_TUNNEL,
 IFLA_BRPORT_BCAST_FLOOD,
 IFLA_BRPORT_GROUP_FWD_MASK,
 IFLA_BRPORT_NEIGH_SUPPRESS,
 IFLA_BRPORT_ISOLATED,
 IFLA_BRPORT_BACKUP_PORT,
 IFLA_BRPORT_MRP_RING_OPEN,
 IFLA_BRPORT_MRP_IN_OPEN,
 IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT,
 IFLA_BRPORT_MCAST_EHT_HOSTS_CNT,
 __IFLA_BRPORT_MAX
};


struct ifla_cacheinfo {
 __u32 max_reasm_len;
 __u32 tstamp;
 __u32 reachable_time;
 __u32 retrans_time;
};

enum {
 IFLA_INFO_UNSPEC,
 IFLA_INFO_KIND,
 IFLA_INFO_DATA,
 IFLA_INFO_XSTATS,
 IFLA_INFO_SLAVE_KIND,
 IFLA_INFO_SLAVE_DATA,
 __IFLA_INFO_MAX,
};





enum {
 IFLA_VLAN_UNSPEC,
 IFLA_VLAN_ID,
 IFLA_VLAN_FLAGS,
 IFLA_VLAN_EGRESS_QOS,
 IFLA_VLAN_INGRESS_QOS,
 IFLA_VLAN_PROTOCOL,
 __IFLA_VLAN_MAX,
};



struct ifla_vlan_flags {
 __u32 flags;
 __u32 mask;
};

enum {
 IFLA_VLAN_QOS_UNSPEC,
 IFLA_VLAN_QOS_MAPPING,
 __IFLA_VLAN_QOS_MAX
};



struct ifla_vlan_qos_mapping {
 __u32 from;
 __u32 to;
};


enum {
 IFLA_MACVLAN_UNSPEC,
 IFLA_MACVLAN_MODE,
 IFLA_MACVLAN_FLAGS,
 IFLA_MACVLAN_MACADDR_MODE,
 IFLA_MACVLAN_MACADDR,
 IFLA_MACVLAN_MACADDR_DATA,
 IFLA_MACVLAN_MACADDR_COUNT,
 IFLA_MACVLAN_BC_QUEUE_LEN,
 IFLA_MACVLAN_BC_QUEUE_LEN_USED,
 __IFLA_MACVLAN_MAX,
};



enum macvlan_mode {
 MACVLAN_MODE_PRIVATE = 1,
 MACVLAN_MODE_VEPA = 2,
 MACVLAN_MODE_BRIDGE = 4,
 MACVLAN_MODE_PASSTHRU = 8,
 MACVLAN_MODE_SOURCE = 16,
};

enum macvlan_macaddr_mode {
 MACVLAN_MACADDR_ADD,
 MACVLAN_MACADDR_DEL,
 MACVLAN_MACADDR_FLUSH,
 MACVLAN_MACADDR_SET,
};





enum {
 IFLA_VRF_UNSPEC,
 IFLA_VRF_TABLE,
 __IFLA_VRF_MAX
};



enum {
 IFLA_VRF_PORT_UNSPEC,
 IFLA_VRF_PORT_TABLE,
 __IFLA_VRF_PORT_MAX
};




enum {
 IFLA_MACSEC_UNSPEC,
 IFLA_MACSEC_SCI,
 IFLA_MACSEC_PORT,
 IFLA_MACSEC_ICV_LEN,
 IFLA_MACSEC_CIPHER_SUITE,
 IFLA_MACSEC_WINDOW,
 IFLA_MACSEC_ENCODING_SA,
 IFLA_MACSEC_ENCRYPT,
 IFLA_MACSEC_PROTECT,
 IFLA_MACSEC_INC_SCI,
 IFLA_MACSEC_ES,
 IFLA_MACSEC_SCB,
 IFLA_MACSEC_REPLAY_PROTECT,
 IFLA_MACSEC_VALIDATION,
 IFLA_MACSEC_PAD,
 IFLA_MACSEC_OFFLOAD,
 __IFLA_MACSEC_MAX,
};




enum {
 IFLA_XFRM_UNSPEC,
 IFLA_XFRM_LINK,
 IFLA_XFRM_IF_ID,
 __IFLA_XFRM_MAX
};



enum macsec_validation_type {
 MACSEC_VALIDATE_DISABLED = 0,
 MACSEC_VALIDATE_CHECK = 1,
 MACSEC_VALIDATE_STRICT = 2,
 __MACSEC_VALIDATE_END,
 MACSEC_VALIDATE_MAX = __MACSEC_VALIDATE_END - 1,
};

enum macsec_offload {
 MACSEC_OFFLOAD_OFF = 0,
 MACSEC_OFFLOAD_PHY = 1,
 MACSEC_OFFLOAD_MAC = 2,
 __MACSEC_OFFLOAD_END,
 MACSEC_OFFLOAD_MAX = __MACSEC_OFFLOAD_END - 1,
};


enum {
 IFLA_IPVLAN_UNSPEC,
 IFLA_IPVLAN_MODE,
 IFLA_IPVLAN_FLAGS,
 __IFLA_IPVLAN_MAX
};



enum ipvlan_mode {
 IPVLAN_MODE_L2 = 0,
 IPVLAN_MODE_L3,
 IPVLAN_MODE_L3S,
 IPVLAN_MODE_MAX
};





enum {
 IFLA_VXLAN_UNSPEC,
 IFLA_VXLAN_ID,
 IFLA_VXLAN_GROUP,
 IFLA_VXLAN_LINK,
 IFLA_VXLAN_LOCAL,
 IFLA_VXLAN_TTL,
 IFLA_VXLAN_TOS,
 IFLA_VXLAN_LEARNING,
 IFLA_VXLAN_AGEING,
 IFLA_VXLAN_LIMIT,
 IFLA_VXLAN_PORT_RANGE,
 IFLA_VXLAN_PROXY,
 IFLA_VXLAN_RSC,
 IFLA_VXLAN_L2MISS,
 IFLA_VXLAN_L3MISS,
 IFLA_VXLAN_PORT,
 IFLA_VXLAN_GROUP6,
 IFLA_VXLAN_LOCAL6,
 IFLA_VXLAN_UDP_CSUM,
 IFLA_VXLAN_UDP_ZERO_CSUM6_TX,
 IFLA_VXLAN_UDP_ZERO_CSUM6_RX,
 IFLA_VXLAN_REMCSUM_TX,
 IFLA_VXLAN_REMCSUM_RX,
 IFLA_VXLAN_GBP,
 IFLA_VXLAN_REMCSUM_NOPARTIAL,
 IFLA_VXLAN_COLLECT_METADATA,
 IFLA_VXLAN_LABEL,
 IFLA_VXLAN_GPE,
 IFLA_VXLAN_TTL_INHERIT,
 IFLA_VXLAN_DF,
 __IFLA_VXLAN_MAX
};


struct ifla_vxlan_port_range {
 __be16 low;
 __be16 high;
};

enum ifla_vxlan_df {
 VXLAN_DF_UNSET = 0,
 VXLAN_DF_SET,
 VXLAN_DF_INHERIT,
 __VXLAN_DF_END,
 VXLAN_DF_MAX = __VXLAN_DF_END - 1,
};


enum {
 IFLA_GENEVE_UNSPEC,
 IFLA_GENEVE_ID,
 IFLA_GENEVE_REMOTE,
 IFLA_GENEVE_TTL,
 IFLA_GENEVE_TOS,
 IFLA_GENEVE_PORT,
 IFLA_GENEVE_COLLECT_METADATA,
 IFLA_GENEVE_REMOTE6,
 IFLA_GENEVE_UDP_CSUM,
 IFLA_GENEVE_UDP_ZERO_CSUM6_TX,
 IFLA_GENEVE_UDP_ZERO_CSUM6_RX,
 IFLA_GENEVE_LABEL,
 IFLA_GENEVE_TTL_INHERIT,
 IFLA_GENEVE_DF,
 __IFLA_GENEVE_MAX
};


enum ifla_geneve_df {
 GENEVE_DF_UNSET = 0,
 GENEVE_DF_SET,
 GENEVE_DF_INHERIT,
 __GENEVE_DF_END,
 GENEVE_DF_MAX = __GENEVE_DF_END - 1,
};


enum {
 IFLA_BAREUDP_UNSPEC,
 IFLA_BAREUDP_PORT,
 IFLA_BAREUDP_ETHERTYPE,
 IFLA_BAREUDP_SRCPORT_MIN,
 IFLA_BAREUDP_MULTIPROTO_MODE,
 __IFLA_BAREUDP_MAX
};




enum {
 IFLA_PPP_UNSPEC,
 IFLA_PPP_DEV_FD,
 __IFLA_PPP_MAX
};




enum ifla_gtp_role {
 GTP_ROLE_GGSN = 0,
 GTP_ROLE_SGSN,
};

enum {
 IFLA_GTP_UNSPEC,
 IFLA_GTP_FD0,
 IFLA_GTP_FD1,
 IFLA_GTP_PDP_HASHSIZE,
 IFLA_GTP_ROLE,
 __IFLA_GTP_MAX,
};




enum {
 IFLA_BOND_UNSPEC,
 IFLA_BOND_MODE,
 IFLA_BOND_ACTIVE_SLAVE,
 IFLA_BOND_MIIMON,
 IFLA_BOND_UPDELAY,
 IFLA_BOND_DOWNDELAY,
 IFLA_BOND_USE_CARRIER,
 IFLA_BOND_ARP_INTERVAL,
 IFLA_BOND_ARP_IP_TARGET,
 IFLA_BOND_ARP_VALIDATE,
 IFLA_BOND_ARP_ALL_TARGETS,
 IFLA_BOND_PRIMARY,
 IFLA_BOND_PRIMARY_RESELECT,
 IFLA_BOND_FAIL_OVER_MAC,
 IFLA_BOND_XMIT_HASH_POLICY,
 IFLA_BOND_RESEND_IGMP,
 IFLA_BOND_NUM_PEER_NOTIF,
 IFLA_BOND_ALL_SLAVES_ACTIVE,
 IFLA_BOND_MIN_LINKS,
 IFLA_BOND_LP_INTERVAL,
 IFLA_BOND_PACKETS_PER_SLAVE,
 IFLA_BOND_AD_LACP_RATE,
 IFLA_BOND_AD_SELECT,
 IFLA_BOND_AD_INFO,
 IFLA_BOND_AD_ACTOR_SYS_PRIO,
 IFLA_BOND_AD_USER_PORT_KEY,
 IFLA_BOND_AD_ACTOR_SYSTEM,
 IFLA_BOND_TLB_DYNAMIC_LB,
 IFLA_BOND_PEER_NOTIF_DELAY,
 IFLA_BOND_AD_LACP_ACTIVE,
 __IFLA_BOND_MAX,
};



enum {
 IFLA_BOND_AD_INFO_UNSPEC,
 IFLA_BOND_AD_INFO_AGGREGATOR,
 IFLA_BOND_AD_INFO_NUM_PORTS,
 IFLA_BOND_AD_INFO_ACTOR_KEY,
 IFLA_BOND_AD_INFO_PARTNER_KEY,
 IFLA_BOND_AD_INFO_PARTNER_MAC,
 __IFLA_BOND_AD_INFO_MAX,
};



enum {
 IFLA_BOND_SLAVE_UNSPEC,
 IFLA_BOND_SLAVE_STATE,
 IFLA_BOND_SLAVE_MII_STATUS,
 IFLA_BOND_SLAVE_LINK_FAILURE_COUNT,
 IFLA_BOND_SLAVE_PERM_HWADDR,
 IFLA_BOND_SLAVE_QUEUE_ID,
 IFLA_BOND_SLAVE_AD_AGGREGATOR_ID,
 IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE,
 IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE,
 __IFLA_BOND_SLAVE_MAX,
};





enum {
 IFLA_VF_INFO_UNSPEC,
 IFLA_VF_INFO,
 __IFLA_VF_INFO_MAX,
};



enum {
 IFLA_VF_UNSPEC,
 IFLA_VF_MAC,
 IFLA_VF_VLAN,
 IFLA_VF_TX_RATE,
 IFLA_VF_SPOOFCHK,
 IFLA_VF_LINK_STATE,
 IFLA_VF_RATE,
 IFLA_VF_RSS_QUERY_EN,


 IFLA_VF_STATS,
 IFLA_VF_TRUST,
 IFLA_VF_IB_NODE_GUID,
 IFLA_VF_IB_PORT_GUID,
 IFLA_VF_VLAN_LIST,
 IFLA_VF_BROADCAST,
 __IFLA_VF_MAX,
};



struct ifla_vf_mac {
 __u32 vf;
 __u8 mac[32];
};

struct ifla_vf_broadcast {
 __u8 broadcast[32];
};

struct ifla_vf_vlan {
 __u32 vf;
 __u32 vlan;
 __u32 qos;
};

enum {
 IFLA_VF_VLAN_INFO_UNSPEC,
 IFLA_VF_VLAN_INFO,
 __IFLA_VF_VLAN_INFO_MAX,
};




struct ifla_vf_vlan_info {
 __u32 vf;
 __u32 vlan;
 __u32 qos;
 __be16 vlan_proto;
};

struct ifla_vf_tx_rate {
 __u32 vf;
 __u32 rate;
};

struct ifla_vf_rate {
 __u32 vf;
 __u32 min_tx_rate;
 __u32 max_tx_rate;
};

struct ifla_vf_spoofchk {
 __u32 vf;
 __u32 setting;
};

struct ifla_vf_guid {
 __u32 vf;
 __u64 guid;
};

enum {
 IFLA_VF_LINK_STATE_AUTO,
 IFLA_VF_LINK_STATE_ENABLE,
 IFLA_VF_LINK_STATE_DISABLE,
 __IFLA_VF_LINK_STATE_MAX,
};

struct ifla_vf_link_state {
 __u32 vf;
 __u32 link_state;
};

struct ifla_vf_rss_query_en {
 __u32 vf;
 __u32 setting;
};

enum {
 IFLA_VF_STATS_RX_PACKETS,
 IFLA_VF_STATS_TX_PACKETS,
 IFLA_VF_STATS_RX_BYTES,
 IFLA_VF_STATS_TX_BYTES,
 IFLA_VF_STATS_BROADCAST,
 IFLA_VF_STATS_MULTICAST,
 IFLA_VF_STATS_PAD,
 IFLA_VF_STATS_RX_DROPPED,
 IFLA_VF_STATS_TX_DROPPED,
 __IFLA_VF_STATS_MAX,
};



struct ifla_vf_trust {
 __u32 vf;
 __u32 setting;
};
# 1029 "./include/uapi/linux/if_link.h"
enum {
 IFLA_VF_PORT_UNSPEC,
 IFLA_VF_PORT,
 __IFLA_VF_PORT_MAX,
};



enum {
 IFLA_PORT_UNSPEC,
 IFLA_PORT_VF,
 IFLA_PORT_PROFILE,
 IFLA_PORT_VSI_TYPE,
 IFLA_PORT_INSTANCE_UUID,
 IFLA_PORT_HOST_UUID,
 IFLA_PORT_REQUEST,
 IFLA_PORT_RESPONSE,
 __IFLA_PORT_MAX,
};







enum {
 PORT_REQUEST_PREASSOCIATE = 0,
 PORT_REQUEST_PREASSOCIATE_RR,
 PORT_REQUEST_ASSOCIATE,
 PORT_REQUEST_DISASSOCIATE,
};

enum {
 PORT_VDP_RESPONSE_SUCCESS = 0,
 PORT_VDP_RESPONSE_INVALID_FORMAT,
 PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_VDP_RESPONSE_UNUSED_VTID,
 PORT_VDP_RESPONSE_VTID_VIOLATION,
 PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION,
 PORT_VDP_RESPONSE_OUT_OF_SYNC,

 PORT_PROFILE_RESPONSE_SUCCESS = 0x100,
 PORT_PROFILE_RESPONSE_INPROGRESS,
 PORT_PROFILE_RESPONSE_INVALID,
 PORT_PROFILE_RESPONSE_BADSTATE,
 PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_PROFILE_RESPONSE_ERROR,
};

struct ifla_port_vsi {
 __u8 vsi_mgr_id;
 __u8 vsi_type_id[3];
 __u8 vsi_type_version;
 __u8 pad[3];
};




enum {
 IFLA_IPOIB_UNSPEC,
 IFLA_IPOIB_PKEY,
 IFLA_IPOIB_MODE,
 IFLA_IPOIB_UMCAST,
 __IFLA_IPOIB_MAX
};

enum {
 IPOIB_MODE_DATAGRAM = 0,
 IPOIB_MODE_CONNECTED = 1,
};







enum {
 HSR_PROTOCOL_HSR,
 HSR_PROTOCOL_PRP,
 HSR_PROTOCOL_MAX,
};

enum {
 IFLA_HSR_UNSPEC,
 IFLA_HSR_SLAVE1,
 IFLA_HSR_SLAVE2,
 IFLA_HSR_MULTICAST_SPEC,
 IFLA_HSR_SUPERVISION_ADDR,
 IFLA_HSR_SEQ_NR,
 IFLA_HSR_VERSION,
 IFLA_HSR_PROTOCOL,


 __IFLA_HSR_MAX,
};





struct if_stats_msg {
 __u8 family;
 __u8 pad1;
 __u16 pad2;
 __u32 ifindex;
 __u32 filter_mask;
};




enum {
 IFLA_STATS_UNSPEC,
 IFLA_STATS_LINK_64,
 IFLA_STATS_LINK_XSTATS,
 IFLA_STATS_LINK_XSTATS_SLAVE,
 IFLA_STATS_LINK_OFFLOAD_XSTATS,
 IFLA_STATS_AF_SPEC,
 __IFLA_STATS_MAX,
};
# 1162 "./include/uapi/linux/if_link.h"
enum {
 LINK_XSTATS_TYPE_UNSPEC,
 LINK_XSTATS_TYPE_BRIDGE,
 LINK_XSTATS_TYPE_BOND,
 __LINK_XSTATS_TYPE_MAX
};



enum {
 IFLA_OFFLOAD_XSTATS_UNSPEC,
 IFLA_OFFLOAD_XSTATS_CPU_HIT,
 __IFLA_OFFLOAD_XSTATS_MAX
};
# 1192 "./include/uapi/linux/if_link.h"
enum {
 XDP_ATTACHED_NONE = 0,
 XDP_ATTACHED_DRV,
 XDP_ATTACHED_SKB,
 XDP_ATTACHED_HW,
 XDP_ATTACHED_MULTI,
};

enum {
 IFLA_XDP_UNSPEC,
 IFLA_XDP_FD,
 IFLA_XDP_ATTACHED,
 IFLA_XDP_FLAGS,
 IFLA_XDP_PROG_ID,
 IFLA_XDP_DRV_PROG_ID,
 IFLA_XDP_SKB_PROG_ID,
 IFLA_XDP_HW_PROG_ID,
 IFLA_XDP_EXPECTED_FD,
 __IFLA_XDP_MAX,
};



enum {
 IFLA_EVENT_NONE,
 IFLA_EVENT_REBOOT,
 IFLA_EVENT_FEATURES,
 IFLA_EVENT_BONDING_FAILOVER,
 IFLA_EVENT_NOTIFY_PEERS,
 IFLA_EVENT_IGMP_RESEND,
 IFLA_EVENT_BONDING_OPTIONS,
};



enum {
 IFLA_TUN_UNSPEC,
 IFLA_TUN_OWNER,
 IFLA_TUN_GROUP,
 IFLA_TUN_TYPE,
 IFLA_TUN_PI,
 IFLA_TUN_VNET_HDR,
 IFLA_TUN_PERSIST,
 IFLA_TUN_MULTI_QUEUE,
 IFLA_TUN_NUM_QUEUES,
 IFLA_TUN_NUM_DISABLED_QUEUES,
 __IFLA_TUN_MAX,
};
# 1252 "./include/uapi/linux/if_link.h"
enum {
 IFLA_RMNET_UNSPEC,
 IFLA_RMNET_MUX_ID,
 IFLA_RMNET_FLAGS,
 __IFLA_RMNET_MAX,
};



struct ifla_rmnet_flags {
 __u32 flags;
 __u32 mask;
};



enum {
 IFLA_MCTP_UNSPEC,
 IFLA_MCTP_NET,
 __IFLA_MCTP_MAX,
};
# 33 "./include/uapi/linux/netdevice.h" 2
# 49 "./include/uapi/linux/netdevice.h"
enum {
        IF_PORT_UNKNOWN = 0,
        IF_PORT_10BASE2,
        IF_PORT_10BASET,
        IF_PORT_AUI,
        IF_PORT_100BASET,
        IF_PORT_100BASETX,
        IF_PORT_100BASEFX
};
# 35 "./include/linux/netdevice_types.h" 2




struct netpoll_info;
struct device;
struct ethtool_ops;
struct phy_device;
struct dsa_port;
struct ip_tunnel_parm;
struct macsec_context;
struct macsec_ops;
struct ndmsg;
struct netlink_callback;
struct xdp_frame;
struct netdev_rx_queue;
struct scatterlist;
struct sock;
struct net_device;

struct sfp_bus;

struct wireless_dev;

struct wpan_dev;
struct mpls_dev;

struct udp_tunnel_info;
struct udp_tunnel_nic_info;
struct udp_tunnel_nic;
struct bpf_prog;
struct xdp_buff;

void synchronize_net(void);
void netdev_set_default_ethtool_ops(struct net_device *dev,
        const struct ethtool_ops *ops);
# 110 "./include/linux/netdevice_types.h"
enum netdev_tx {
 __NETDEV_TX_MIN = (-((int)(~0U >> 1)) - 1),
 NETDEV_TX_OK = 0x00,
 NETDEV_TX_BUSY = 0x10,
};
typedef enum netdev_tx netdev_tx_t;
# 146 "./include/linux/netdevice_types.h"
struct net_device_stats {
 unsigned long rx_packets;
 unsigned long tx_packets;
 unsigned long rx_bytes;
 unsigned long tx_bytes;
 unsigned long rx_errors;
 unsigned long tx_errors;
 unsigned long rx_dropped;
 unsigned long tx_dropped;
 unsigned long multicast;
 unsigned long collisions;
 unsigned long rx_length_errors;
 unsigned long rx_over_errors;
 unsigned long rx_crc_errors;
 unsigned long rx_frame_errors;
 unsigned long rx_fifo_errors;
 unsigned long rx_missed_errors;
 unsigned long tx_aborted_errors;
 unsigned long tx_carrier_errors;
 unsigned long tx_fifo_errors;
 unsigned long tx_heartbeat_errors;
 unsigned long tx_window_errors;
 unsigned long rx_compressed;
 unsigned long tx_compressed;
};



extern struct static_key_false rps_needed;
extern struct static_key_false rfs_needed;


struct neighbour;
struct neigh_parms;
struct sk_buff;

struct netdev_hw_addr {
 struct list_head list;
 struct rb_node node;
 unsigned char addr[32];
 unsigned char type;




 bool global_use;
 int sync_cnt;
 int refcount;
 int synced;
 struct callback_head callback_head;
};

struct netdev_hw_addr_list {
 struct list_head list;
 int count;


 struct rb_root tree;
};
# 221 "./include/linux/netdevice_types.h"
struct hh_cache {
 unsigned int hh_len;
 seqlock_t hh_lock;







 unsigned long hh_data[(((96)+(16 -1))&~(16 - 1)) / sizeof(long)];
};
# 247 "./include/linux/netdevice_types.h"
struct header_ops {
 int (*create) (struct sk_buff *skb, struct net_device *dev,
      unsigned short type, const void *daddr,
      const void *saddr, unsigned int len);
 int (*parse)(const struct sk_buff *skb, unsigned char *haddr);
 int (*cache)(const struct neighbour *neigh, struct hh_cache *hh, __be16 type);
 void (*cache_update)(struct hh_cache *hh,
    const struct net_device *dev,
    const unsigned char *haddr);
 bool (*validate)(const char *ll_header, unsigned int len);
 __be16 (*parse_protocol)(const struct sk_buff *skb);
};






enum netdev_state_t {
 __LINK_STATE_START,
 __LINK_STATE_PRESENT,
 __LINK_STATE_NOCARRIER,
 __LINK_STATE_LINKWATCH_PENDING,
 __LINK_STATE_DORMANT,
 __LINK_STATE_TESTING,
};


struct gro_list {
 struct list_head list;
 int count;
};
# 289 "./include/linux/netdevice_types.h"
struct napi_struct {






 struct list_head poll_list;

 unsigned long state;
 int weight;
 int defer_hard_irqs_count;
 unsigned long gro_bitmask;
 int (*poll)(struct napi_struct *, int);



 struct net_device *dev;
 struct gro_list gro_hash[8];
 struct sk_buff *skb;
 struct list_head rx_list;
 int rx_count;
 struct hrtimer timer;
 struct list_head dev_list;
 struct hlist_node napi_hash_node;
 unsigned int napi_id;
 struct task_struct *thread;
};

enum {
 NAPI_STATE_SCHED,
 NAPI_STATE_MISSED,
 NAPI_STATE_DISABLE,
 NAPI_STATE_NPSVC,
 NAPI_STATE_LISTED,
 NAPI_STATE_NO_BUSY_POLL,
 NAPI_STATE_IN_BUSY_POLL,
 NAPI_STATE_PREFER_BUSY_POLL,
 NAPI_STATE_THREADED,
 NAPI_STATE_SCHED_THREADED,
};

enum {
 NAPIF_STATE_SCHED = ((((1UL))) << (NAPI_STATE_SCHED)),
 NAPIF_STATE_MISSED = ((((1UL))) << (NAPI_STATE_MISSED)),
 NAPIF_STATE_DISABLE = ((((1UL))) << (NAPI_STATE_DISABLE)),
 NAPIF_STATE_NPSVC = ((((1UL))) << (NAPI_STATE_NPSVC)),
 NAPIF_STATE_LISTED = ((((1UL))) << (NAPI_STATE_LISTED)),
 NAPIF_STATE_NO_BUSY_POLL = ((((1UL))) << (NAPI_STATE_NO_BUSY_POLL)),
 NAPIF_STATE_IN_BUSY_POLL = ((((1UL))) << (NAPI_STATE_IN_BUSY_POLL)),
 NAPIF_STATE_PREFER_BUSY_POLL = ((((1UL))) << (NAPI_STATE_PREFER_BUSY_POLL)),
 NAPIF_STATE_THREADED = ((((1UL))) << (NAPI_STATE_THREADED)),
 NAPIF_STATE_SCHED_THREADED = ((((1UL))) << (NAPI_STATE_SCHED_THREADED)),
};

enum gro_result {
 GRO_MERGED,
 GRO_MERGED_FREE,
 GRO_HELD,
 GRO_NORMAL,
 GRO_CONSUMED,
};
typedef enum gro_result gro_result_t;
# 394 "./include/linux/netdevice_types.h"
enum rx_handler_result {
 RX_HANDLER_CONSUMED,
 RX_HANDLER_ANOTHER,
 RX_HANDLER_EXACT,
 RX_HANDLER_PASS,
};
typedef enum rx_handler_result rx_handler_result_t;
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **pskb);

enum netdev_queue_state_t {
 __QUEUE_STATE_DRV_XOFF,
 __QUEUE_STATE_STACK_XOFF,
 __QUEUE_STATE_FROZEN,
};
# 429 "./include/linux/netdevice_types.h"
struct netdev_queue {



 struct net_device *dev;
 struct Qdisc *qdisc;
 struct Qdisc *qdisc_sleeping;

 struct kobject kobj;


 int numa_node;

 unsigned long tx_maxrate;




 unsigned long trans_timeout;


 struct net_device *sb_dev;






 spinlock_t _xmit_lock __attribute__((__aligned__((1 << (6)))));
 int xmit_lock_owner;



 unsigned long trans_start;

 unsigned long state;


 struct dql dql;

} __attribute__((__aligned__((1 << (6)))));






struct rps_map {
 unsigned int len;
 struct callback_head rcu;
 u16 cpus[];
};







struct rps_dev_flow {
 u16 cpu;
 u16 filter;
 unsigned int last_qtail;
};





struct rps_dev_flow_table {
 unsigned int mask;
 struct callback_head rcu;
 struct rps_dev_flow flows[];
};
# 516 "./include/linux/netdevice_types.h"
struct rps_sock_flow_table {
 u32 mask;

 u32 ents[] __attribute__((__aligned__((1 << (6)))));
};






struct netdev_rx_queue;




struct rx_queue_attribute {
 struct attribute attr;
 ssize_t (*show)(struct netdev_rx_queue *queue, char *buf);
 ssize_t (*store)(struct netdev_rx_queue *queue,
    const char *buf, size_t len);
};


enum xps_map_type {
 XPS_CPUS = 0,
 XPS_RXQS,
 XPS_MAPS_MAX,
};






struct xps_map {
 unsigned int len;
 unsigned int alloc_len;
 struct callback_head rcu;
 u16 queues[];
};
# 572 "./include/linux/netdevice_types.h"
struct xps_dev_maps {
 struct callback_head rcu;
 unsigned int nr_ids;
 s16 num_tc;
 struct xps_map *attr_map[];
};
# 590 "./include/linux/netdevice_types.h"
struct netdev_tc_txq {
 u16 count;
 u16 offset;
};
# 617 "./include/linux/netdevice_types.h"
struct netdev_phys_item_id {
 unsigned char id[32];
 unsigned char id_len;
};

typedef u16 (*select_queue_fallback_t)(struct net_device *dev,
           struct sk_buff *skb,
           struct net_device *sb_dev);

enum net_device_path_type {
 DEV_PATH_ETHERNET = 0,
 DEV_PATH_VLAN,
 DEV_PATH_BRIDGE,
 DEV_PATH_PPPOE,
 DEV_PATH_DSA,
};

struct net_device_path {
 enum net_device_path_type type;
 const struct net_device *dev;
 union {
  struct {
   u16 id;
   __be16 proto;
   u8 h_dest[6];
  } encap;
  struct {
   enum {
    DEV_PATH_BR_VLAN_KEEP,
    DEV_PATH_BR_VLAN_TAG,
    DEV_PATH_BR_VLAN_UNTAG,
    DEV_PATH_BR_VLAN_UNTAG_HW,
   } vlan_mode;
   u16 vlan_id;
   __be16 vlan_proto;
  } bridge;
  struct {
   int port;
   u16 proto;
  } dsa;
 };
};




struct net_device_path_stack {
 int num_paths;
 struct net_device_path path[5];
};

struct net_device_path_ctx {
 const struct net_device *dev;
 const u8 *daddr;

 int num_vlans;
 struct {
  u16 id;
  __be16 proto;
 } vlan[2];
};

enum tc_setup_type {
 TC_SETUP_QDISC_MQPRIO,
 TC_SETUP_CLSU32,
 TC_SETUP_CLSFLOWER,
 TC_SETUP_CLSMATCHALL,
 TC_SETUP_CLSBPF,
 TC_SETUP_BLOCK,
 TC_SETUP_QDISC_CBS,
 TC_SETUP_QDISC_RED,
 TC_SETUP_QDISC_PRIO,
 TC_SETUP_QDISC_MQ,
 TC_SETUP_QDISC_ETF,
 TC_SETUP_ROOT_QDISC,
 TC_SETUP_QDISC_GRED,
 TC_SETUP_QDISC_TAPRIO,
 TC_SETUP_FT,
 TC_SETUP_QDISC_ETS,
 TC_SETUP_QDISC_TBF,
 TC_SETUP_QDISC_FIFO,
 TC_SETUP_QDISC_HTB,
};




enum bpf_netdev_command {







 XDP_SETUP_PROG,
 XDP_SETUP_PROG_HW,

 BPF_OFFLOAD_MAP_ALLOC,
 BPF_OFFLOAD_MAP_FREE,
 XDP_SETUP_XSK_POOL,
};

struct bpf_prog_offload_ops;
struct netlink_ext_ack;
struct xdp_umem;
struct xdp_dev_bulk_queue;
struct bpf_xdp_link;
struct ifla_vf_info;
struct ifla_vf_stats;

enum bpf_xdp_mode {
 XDP_MODE_SKB = 0,
 XDP_MODE_DRV = 1,
 XDP_MODE_HW = 2,
 __MAX_XDP_MODE
};

struct bpf_xdp_entity {
 struct bpf_prog *prog;
 struct bpf_xdp_link *link;
};

struct netdev_bpf {
 enum bpf_netdev_command command;
 union {

  struct {
   u32 flags;
   struct bpf_prog *prog;
   struct netlink_ext_ack *extack;
  };

  struct {
   struct bpf_offloaded_map *offmap;
  };

  struct {
   struct xsk_buff_pool *pool;
   u16 queue_id;
  } xsk;
 };
};
# 777 "./include/linux/netdevice_types.h"
struct dev_ifalias {
 struct callback_head rcuhead;
 char ifalias[];
};

struct devlink;
struct tlsdev_ops;

struct netdev_name_node {
 struct hlist_node hlist;
 struct list_head list;
 struct net_device *dev;
 const char *name;
};

int netdev_name_node_alt_create(struct net_device *dev, const char *name);
int netdev_name_node_alt_destroy(struct net_device *dev, const char *name);

struct netdev_net_notifier {
 struct list_head list;
 struct notifier_block *nb;
};
# 1131 "./include/linux/netdevice_types.h"
struct net_device_ops {
 int (*ndo_init)(struct net_device *dev);
 void (*ndo_uninit)(struct net_device *dev);
 int (*ndo_open)(struct net_device *dev);
 int (*ndo_stop)(struct net_device *dev);
 netdev_tx_t (*ndo_start_xmit)(struct sk_buff *skb,
        struct net_device *dev);
 netdev_features_t (*ndo_features_check)(struct sk_buff *skb,
            struct net_device *dev,
            netdev_features_t features);
 u16 (*ndo_select_queue)(struct net_device *dev,
          struct sk_buff *skb,
          struct net_device *sb_dev);
 void (*ndo_change_rx_flags)(struct net_device *dev,
             int flags);
 void (*ndo_set_rx_mode)(struct net_device *dev);
 int (*ndo_set_mac_address)(struct net_device *dev,
             void *addr);
 int (*ndo_validate_addr)(struct net_device *dev);
 int (*ndo_do_ioctl)(struct net_device *dev,
             struct ifreq *ifr, int cmd);
 int (*ndo_eth_ioctl)(struct net_device *dev,
       struct ifreq *ifr, int cmd);
 int (*ndo_siocbond)(struct net_device *dev,
      struct ifreq *ifr, int cmd);
 int (*ndo_siocwandev)(struct net_device *dev,
        struct if_settings *ifs);
 int (*ndo_siocdevprivate)(struct net_device *dev,
            struct ifreq *ifr,
            void *data, int cmd);
 int (*ndo_set_config)(struct net_device *dev,
               struct ifmap *map);
 int (*ndo_change_mtu)(struct net_device *dev,
        int new_mtu);
 int (*ndo_neigh_setup)(struct net_device *dev,
         struct neigh_parms *);
 void (*ndo_tx_timeout) (struct net_device *dev,
         unsigned int txqueue);

 void (*ndo_get_stats64)(struct net_device *dev,
         struct rtnl_link_stats64 *storage);
 bool (*ndo_has_offload_stats)(const struct net_device *dev, int attr_id);
 int (*ndo_get_offload_stats)(int attr_id,
        const struct net_device *dev,
        void *attr_data);
 struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);

 int (*ndo_vlan_rx_add_vid)(struct net_device *dev,
             __be16 proto, u16 vid);
 int (*ndo_vlan_rx_kill_vid)(struct net_device *dev,
              __be16 proto, u16 vid);






 int (*ndo_set_vf_mac)(struct net_device *dev,
        int queue, u8 *mac);
 int (*ndo_set_vf_vlan)(struct net_device *dev,
         int queue, u16 vlan,
         u8 qos, __be16 proto);
 int (*ndo_set_vf_rate)(struct net_device *dev,
         int vf, int min_tx_rate,
         int max_tx_rate);
 int (*ndo_set_vf_spoofchk)(struct net_device *dev,
             int vf, bool setting);
 int (*ndo_set_vf_trust)(struct net_device *dev,
          int vf, bool setting);
 int (*ndo_get_vf_config)(struct net_device *dev,
           int vf,
           struct ifla_vf_info *ivf);
 int (*ndo_set_vf_link_state)(struct net_device *dev,
        int vf, int link_state);
 int (*ndo_get_vf_stats)(struct net_device *dev,
          int vf,
          struct ifla_vf_stats
          *vf_stats);
 int (*ndo_set_vf_port)(struct net_device *dev,
         int vf,
         struct nlattr *port[]);
 int (*ndo_get_vf_port)(struct net_device *dev,
         int vf, struct sk_buff *skb);
 int (*ndo_get_vf_guid)(struct net_device *dev,
         int vf,
         struct ifla_vf_guid *node_guid,
         struct ifla_vf_guid *port_guid);
 int (*ndo_set_vf_guid)(struct net_device *dev,
         int vf, u64 guid,
         int guid_type);
 int (*ndo_set_vf_rss_query_en)(
         struct net_device *dev,
         int vf, bool setting);
 int (*ndo_setup_tc)(struct net_device *dev,
      enum tc_setup_type type,
      void *type_data);
# 1252 "./include/linux/netdevice_types.h"
 int (*ndo_rx_flow_steer)(struct net_device *dev,
           const struct sk_buff *skb,
           u16 rxq_index,
           u32 flow_id);

 int (*ndo_add_slave)(struct net_device *dev,
       struct net_device *slave_dev,
       struct netlink_ext_ack *extack);
 int (*ndo_del_slave)(struct net_device *dev,
       struct net_device *slave_dev);
 struct net_device* (*ndo_get_xmit_slave)(struct net_device *dev,
            struct sk_buff *skb,
            bool all_slaves);
 struct net_device* (*ndo_sk_get_lower_dev)(struct net_device *dev,
       struct sock *sk);
 netdev_features_t (*ndo_fix_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_set_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_neigh_construct)(struct net_device *dev,
             struct neighbour *n);
 void (*ndo_neigh_destroy)(struct net_device *dev,
           struct neighbour *n);

 int (*ndo_fdb_add)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            const unsigned char *addr,
            u16 vid,
            u16 flags,
            struct netlink_ext_ack *extack);
 int (*ndo_fdb_del)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            const unsigned char *addr,
            u16 vid);
 int (*ndo_fdb_dump)(struct sk_buff *skb,
      struct netlink_callback *cb,
      struct net_device *dev,
      struct net_device *filter_dev,
      int *idx);
 int (*ndo_fdb_get)(struct sk_buff *skb,
            struct nlattr *tb[],
            struct net_device *dev,
            const unsigned char *addr,
            u16 vid, u32 portid, u32 seq,
            struct netlink_ext_ack *extack);
 int (*ndo_bridge_setlink)(struct net_device *dev,
            struct nlmsghdr *nlh,
            u16 flags,
            struct netlink_ext_ack *extack);
 int (*ndo_bridge_getlink)(struct sk_buff *skb,
            u32 pid, u32 seq,
            struct net_device *dev,
            u32 filter_mask,
            int nlflags);
 int (*ndo_bridge_dellink)(struct net_device *dev,
            struct nlmsghdr *nlh,
            u16 flags);
 int (*ndo_change_carrier)(struct net_device *dev,
            bool new_carrier);
 int (*ndo_get_phys_port_id)(struct net_device *dev,
       struct netdev_phys_item_id *ppid);
 int (*ndo_get_port_parent_id)(struct net_device *dev,
         struct netdev_phys_item_id *ppid);
 int (*ndo_get_phys_port_name)(struct net_device *dev,
         char *name, size_t len);
 void* (*ndo_dfwd_add_station)(struct net_device *pdev,
       struct net_device *dev);
 void (*ndo_dfwd_del_station)(struct net_device *pdev,
       void *priv);

 int (*ndo_set_tx_maxrate)(struct net_device *dev,
            int queue_index,
            u32 maxrate);
 int (*ndo_get_iflink)(const struct net_device *dev);
 int (*ndo_change_proto_down)(struct net_device *dev,
        bool proto_down);
 int (*ndo_fill_metadata_dst)(struct net_device *dev,
             struct sk_buff *skb);
 void (*ndo_set_rx_headroom)(struct net_device *dev,
             int needed_headroom);
 int (*ndo_bpf)(struct net_device *dev,
        struct netdev_bpf *bpf);
 int (*ndo_xdp_xmit)(struct net_device *dev, int n,
      struct xdp_frame **xdp,
      u32 flags);
 struct net_device * (*ndo_xdp_get_xmit_slave)(struct net_device *dev,
         struct xdp_buff *xdp);
 int (*ndo_xsk_wakeup)(struct net_device *dev,
        u32 queue_id, u32 flags);
 struct devlink_port * (*ndo_get_devlink_port)(struct net_device *dev);
 int (*ndo_tunnel_ctl)(struct net_device *dev,
        struct ip_tunnel_parm *p, int cmd);
 struct net_device * (*ndo_get_peer_dev)(struct net_device *dev);
 int (*ndo_fill_forward_path)(struct net_device_path_ctx *ctx,
                                                         struct net_device_path *path);
};
# 1399 "./include/linux/netdevice_types.h"
enum netdev_priv_flags {
 IFF_802_1Q_VLAN = 1<<0,
 IFF_EBRIDGE = 1<<1,
 IFF_BONDING = 1<<2,
 IFF_ISATAP = 1<<3,
 IFF_WAN_HDLC = 1<<4,
 IFF_XMIT_DST_RELEASE = 1<<5,
 IFF_DONT_BRIDGE = 1<<6,
 IFF_DISABLE_NETPOLL = 1<<7,
 IFF_MACVLAN_PORT = 1<<8,
 IFF_BRIDGE_PORT = 1<<9,
 IFF_OVS_DATAPATH = 1<<10,
 IFF_TX_SKB_SHARING = 1<<11,
 IFF_UNICAST_FLT = 1<<12,
 IFF_TEAM_PORT = 1<<13,
 IFF_SUPP_NOFCS = 1<<14,
 IFF_LIVE_ADDR_CHANGE = 1<<15,
 IFF_MACVLAN = 1<<16,
 IFF_XMIT_DST_RELEASE_PERM = 1<<17,
 IFF_L3MDEV_MASTER = 1<<18,
 IFF_NO_QUEUE = 1<<19,
 IFF_OPENVSWITCH = 1<<20,
 IFF_L3MDEV_SLAVE = 1<<21,
 IFF_TEAM = 1<<22,
 IFF_RXFH_CONFIGURED = 1<<23,
 IFF_PHONY_HEADROOM = 1<<24,
 IFF_MACSEC = 1<<25,
 IFF_NO_RX_HANDLER = 1<<26,
 IFF_FAILOVER = 1<<27,
 IFF_FAILOVER_SLAVE = 1<<28,
 IFF_L3MDEV_RX_HANDLER = 1<<29,
 IFF_LIVE_RENAME_OK = 1<<30,
 IFF_TX_SKB_NO_LINEAR = 1<<31,
};
# 1468 "./include/linux/netdevice_types.h"
enum netdev_ml_priv_type {
 ML_PRIV_NONE,
 ML_PRIV_CAN,
};
# 1732 "./include/linux/netdevice_types.h"
struct net_device {
 char name[16];
 struct netdev_name_node *name_node;
 struct dev_ifalias *ifalias;




 unsigned long mem_end;
 unsigned long mem_start;
 unsigned long base_addr;







 unsigned long state;

 struct list_head dev_list;
 struct list_head napi_list;
 struct list_head unreg_list;
 struct list_head close_list;
 struct list_head ptype_all;
 struct list_head ptype_specific;

 struct {
  struct list_head upper;
  struct list_head lower;
 } adj_list;


 unsigned int flags;
 unsigned int priv_flags;
 const struct net_device_ops *netdev_ops;
 int ifindex;
 unsigned short gflags;
 unsigned short hard_header_len;






 unsigned int mtu;
 unsigned short needed_headroom;
 unsigned short needed_tailroom;

 netdev_features_t features;
 netdev_features_t hw_features;
 netdev_features_t wanted_features;
 netdev_features_t vlan_features;
 netdev_features_t hw_enc_features;
 netdev_features_t mpls_features;
 netdev_features_t gso_partial_features;

 unsigned int min_mtu;
 unsigned int max_mtu;
 unsigned short type;
 unsigned char min_header_len;
 unsigned char name_assign_type;

 int group;

 struct net_device_stats stats;

 atomic_long_t rx_dropped;
 atomic_long_t tx_dropped;
 atomic_long_t rx_nohandler;


 atomic_t carrier_up_count;
 atomic_t carrier_down_count;





 const struct ethtool_ops *ethtool_ops;




 const struct ndisc_ops *ndisc_ops;
# 1827 "./include/linux/netdevice_types.h"
 const struct header_ops *header_ops;

 unsigned char operstate;
 unsigned char link_mode;

 unsigned char if_port;
 unsigned char dma;


 unsigned char perm_addr[32];
 unsigned char addr_assign_type;
 unsigned char addr_len;
 unsigned char upper_level;
 unsigned char lower_level;

 unsigned short neigh_priv_len;
 unsigned short dev_id;
 unsigned short dev_port;
 unsigned short padded;

 spinlock_t addr_list_lock;
 int irq;

 struct netdev_hw_addr_list uc;
 struct netdev_hw_addr_list mc;
 struct netdev_hw_addr_list dev_addrs;


 struct kset *queues_kset;




 unsigned int promiscuity;
 unsigned int allmulti;
 bool uc_promisc;
# 1871 "./include/linux/netdevice_types.h"
 struct vlan_info *vlan_info;


 struct dsa_port *dsa_ptr;







 struct in_device *ip_ptr;



 struct inet6_dev *ip6_ptr;



 struct wireless_dev *ieee80211_ptr;
 struct wpan_dev *ieee802154_ptr;
# 1903 "./include/linux/netdevice_types.h"
 unsigned char *dev_addr;

 struct netdev_rx_queue *_rx;
 unsigned int num_rx_queues;
 unsigned int real_num_rx_queues;

 struct bpf_prog *xdp_prog;
 unsigned long gro_flush_timeout;
 int napi_defer_hard_irqs;
 rx_handler_func_t *rx_handler;
 void *rx_handler_data;


 struct mini_Qdisc *miniq_ingress;

 struct netdev_queue *ingress_queue;

 struct nf_hook_entries *nf_hooks_ingress;


 unsigned char broadcast[32];

 struct cpu_rmap *rx_cpu_rmap;

 struct hlist_node index_hlist;




 struct netdev_queue *_tx __attribute__((__aligned__((1 << (6)))));
 unsigned int num_tx_queues;
 unsigned int real_num_tx_queues;
 struct Qdisc *qdisc;
 unsigned int tx_queue_len;
 spinlock_t tx_global_lock;

 struct xdp_dev_bulk_queue *xdp_bulkq;


 struct xps_dev_maps *xps_maps[XPS_MAPS_MAX];


 struct mini_Qdisc *miniq_egress;


 struct nf_hook_entries *nf_hooks_egress;



 struct hlist_head qdisc_hash[1 << (4)];


 struct timer_list watchdog_timer;
 int watchdog_timeo;

 u32 proto_down_reason;

 struct list_head todo_list;


 int *pcpu_refcnt;




 struct list_head link_watch_list;

 enum { NETREG_UNINITIALIZED=0,
        NETREG_REGISTERED,
        NETREG_UNREGISTERING,
        NETREG_UNREGISTERED,
        NETREG_RELEASED,
        NETREG_DUMMY,
 } reg_state:8;

 bool dismantle;

 enum {
  RTNL_LINK_INITIALIZED,
  RTNL_LINK_INITIALIZING,
 } rtnl_link_state:16;

 bool needs_free_netdev;
 void (*priv_destructor)(struct net_device *dev);





 possible_net_t nd_net;


 void *ml_priv;
 enum netdev_ml_priv_type ml_priv_type;

 union {
  struct pcpu_lstats *lstats;
  struct pcpu_sw_netstats *tstats;
  struct pcpu_dstats *dstats;
 };


 struct garp_port *garp_port;


 struct mrp_port *mrp_port;


 struct device dev;
 const struct attribute_group *sysfs_groups[4];
 const struct attribute_group *sysfs_rx_queue_group;

 const struct rtnl_link_ops *rtnl_link_ops;



 unsigned int gso_max_size;

 u16 gso_max_segs;




 s16 num_tc;
 struct netdev_tc_txq tc_to_txq[16];
 u8 prio_tc_map[15 + 1];







 struct phy_device *phydev;
 struct sfp_bus *sfp_bus;
 struct lock_class_key *qdisc_tx_busylock;
 bool proto_down;
 unsigned wol_enabled:1;
 unsigned threaded:1;

 struct list_head net_notifier_list;





 const struct udp_tunnel_nic_info *udp_tunnel_nic_info;
 struct udp_tunnel_nic *udp_tunnel_nic;


 struct bpf_xdp_entity xdp_state[__MAX_XDP_MODE];
};

struct packet_type {
 __be16 type;
 bool ignore_outgoing;
 struct net_device *dev;
 int (*func) (struct sk_buff *,
      struct net_device *,
      struct packet_type *,
      struct net_device *);
 void (*list_func) (struct list_head *,
           struct packet_type *,
           struct net_device *);
 bool (*id_match)(struct packet_type *ptype,
         struct sock *sk);
 void *af_packet_priv;
 struct list_head list;
};

struct offload_callbacks {
 struct sk_buff *(*gso_segment)(struct sk_buff *skb,
      netdev_features_t features);
 struct sk_buff *(*gro_receive)(struct list_head *head,
      struct sk_buff *skb);
 int (*gro_complete)(struct sk_buff *skb, int nhoff);
};

struct packet_offload {
 __be16 type;
 u16 priority;
 struct offload_callbacks callbacks;
 struct list_head list;
};


struct pcpu_sw_netstats {
 u64 rx_packets;
 u64 rx_bytes;
 u64 tx_packets;
 u64 tx_bytes;
 struct u64_stats_sync syncp;
} __attribute__((__aligned__(4 * sizeof(u64))));

struct pcpu_lstats {
 u64_stats_t packets;
 u64_stats_t bytes;
 struct u64_stats_sync syncp;
} __attribute__((__aligned__(2 * sizeof(u64))));
# 2111 "./include/linux/netdevice_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct net *dev_net(const struct net_device *dev)
{
 return read_pnet(&dev->nd_net);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void dev_net_set(struct net_device *dev, struct net *net)
{
 write_pnet(&dev->nd_net, net);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_macsec(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACSEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_macvlan(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACVLAN;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_macvlan_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACVLAN_PORT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_bond_master(const struct net_device *dev)
{
 return dev->flags & IFF_MASTER && dev->priv_flags & IFF_BONDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_bond_slave(const struct net_device *dev)
{
 return dev->flags & IFF_SLAVE && dev->priv_flags & IFF_BONDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_supports_nofcs(struct net_device *dev)
{
 return dev->priv_flags & IFF_SUPP_NOFCS;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_has_l3_rx_handler(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_RX_HANDLER;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_l3_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_MASTER;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_l3_slave(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_SLAVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_bridge_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_EBRIDGE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_bridge_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_BRIDGE_PORT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_ovs_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_OPENVSWITCH;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_ovs_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_OVS_DATAPATH;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_any_bridge_port(const struct net_device *dev)
{
 return netif_is_bridge_port(dev) || netif_is_ovs_port(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_team_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_TEAM;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_team_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_TEAM_PORT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_lag_master(const struct net_device *dev)
{
 return netif_is_bond_master(dev) || netif_is_team_master(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_lag_port(const struct net_device *dev)
{
 return netif_is_bond_slave(dev) || netif_is_team_port(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_rxfh_configured(const struct net_device *dev)
{
 return dev->priv_flags & IFF_RXFH_CONFIGURED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_failover(const struct net_device *dev)
{
 return dev->priv_flags & IFF_FAILOVER;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_failover_slave(const struct net_device *dev)
{
 return dev->priv_flags & IFF_FAILOVER_SLAVE;
}

extern struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev);
extern struct net_device *dev_get_by_index_rcu(struct net *net, int ifindex);


extern u32 rps_cpu_mask;
extern struct rps_sock_flow_table *rps_sock_flow_table;
extern void sock_rps_record_flow_hash(__u32 hash);
extern void sock_rps_record_flow(const struct sock *sk);
# 2244 "./include/linux/netdevice_types.h"
bool rps_may_expire_flow(struct net_device *dev, u16 rxq_index, u32 flow_id, u16 filter_id);
# 2254 "./include/linux/netdevice_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *netdev_priv(const struct net_device *dev)
{
 return (char *)dev + ((((sizeof(struct net_device))) + ((typeof((sizeof(struct net_device))))((32)) - 1)) & ~((typeof((sizeof(struct net_device))))((32)) - 1));
}
# 8 "./include/linux/rtnetlink.h" 2



# 1 "./include/uapi/linux/rtnetlink.h" 1







# 1 "./include/uapi/linux/if_addr.h" 1







struct ifaddrmsg {
 __u8 ifa_family;
 __u8 ifa_prefixlen;
 __u8 ifa_flags;
 __u8 ifa_scope;
 __u32 ifa_index;
};
# 26 "./include/uapi/linux/if_addr.h"
enum {
 IFA_UNSPEC,
 IFA_ADDRESS,
 IFA_LOCAL,
 IFA_LABEL,
 IFA_BROADCAST,
 IFA_ANYCAST,
 IFA_CACHEINFO,
 IFA_MULTICAST,
 IFA_FLAGS,
 IFA_RT_PRIORITY,
 IFA_TARGET_NETNSID,
 __IFA_MAX,
};
# 59 "./include/uapi/linux/if_addr.h"
struct ifa_cacheinfo {
 __u32 ifa_prefered;
 __u32 ifa_valid;
 __u32 cstamp;
 __u32 tstamp;
};
# 9 "./include/uapi/linux/rtnetlink.h" 2
# 1 "./include/uapi/linux/neighbour.h" 1







struct ndmsg {
 __u8 ndm_family;
 __u8 ndm_pad1;
 __u16 ndm_pad2;
 __s32 ndm_ifindex;
 __u16 ndm_state;
 __u8 ndm_flags;
 __u8 ndm_type;
};

enum {
 NDA_UNSPEC,
 NDA_DST,
 NDA_LLADDR,
 NDA_CACHEINFO,
 NDA_PROBES,
 NDA_VLAN,
 NDA_PORT,
 NDA_VNI,
 NDA_IFINDEX,
 NDA_MASTER,
 NDA_LINK_NETNSID,
 NDA_SRC_VNI,
 NDA_PROTOCOL,
 NDA_NH_ID,
 NDA_FDB_EXT_ATTRS,
 NDA_FLAGS_EXT,
 __NDA_MAX
};
# 89 "./include/uapi/linux/neighbour.h"
struct nda_cacheinfo {
 __u32 ndm_confirmed;
 __u32 ndm_used;
 __u32 ndm_updated;
 __u32 ndm_refcnt;
};
# 121 "./include/uapi/linux/neighbour.h"
struct ndt_stats {
 __u64 ndts_allocs;
 __u64 ndts_destroys;
 __u64 ndts_hash_grows;
 __u64 ndts_res_failed;
 __u64 ndts_lookups;
 __u64 ndts_hits;
 __u64 ndts_rcv_probes_mcast;
 __u64 ndts_rcv_probes_ucast;
 __u64 ndts_periodic_gc_runs;
 __u64 ndts_forced_gc_runs;
 __u64 ndts_table_fulls;
};

enum {
 NDTPA_UNSPEC,
 NDTPA_IFINDEX,
 NDTPA_REFCNT,
 NDTPA_REACHABLE_TIME,
 NDTPA_BASE_REACHABLE_TIME,
 NDTPA_RETRANS_TIME,
 NDTPA_GC_STALETIME,
 NDTPA_DELAY_PROBE_TIME,
 NDTPA_QUEUE_LEN,
 NDTPA_APP_PROBES,
 NDTPA_UCAST_PROBES,
 NDTPA_MCAST_PROBES,
 NDTPA_ANYCAST_DELAY,
 NDTPA_PROXY_DELAY,
 NDTPA_PROXY_QLEN,
 NDTPA_LOCKTIME,
 NDTPA_QUEUE_LENBYTES,
 NDTPA_MCAST_REPROBES,
 NDTPA_PAD,
 __NDTPA_MAX
};


struct ndtmsg {
 __u8 ndtm_family;
 __u8 ndtm_pad1;
 __u16 ndtm_pad2;
};

struct ndt_config {
 __u16 ndtc_key_len;
 __u16 ndtc_entry_size;
 __u32 ndtc_entries;
 __u32 ndtc_last_flush;
 __u32 ndtc_last_rand;
 __u32 ndtc_hash_rnd;
 __u32 ndtc_hash_mask;
 __u32 ndtc_hash_chain_gc;
 __u32 ndtc_proxy_qlen;
};

enum {
 NDTA_UNSPEC,
 NDTA_NAME,
 NDTA_THRESH1,
 NDTA_THRESH2,
 NDTA_THRESH3,
 NDTA_CONFIG,
 NDTA_PARMS,
 NDTA_STATS,
 NDTA_GC_INTERVAL,
 NDTA_PAD,
 __NDTA_MAX
};






enum {
 FDB_NOTIFY_BIT = (1 << 0),
 FDB_NOTIFY_INACTIVE_BIT = (1 << 1)
};







enum {
 NFEA_UNSPEC,
 NFEA_ACTIVITY_NOTIFY,
 NFEA_DONT_REFRESH,
 __NFEA_MAX
};
# 10 "./include/uapi/linux/rtnetlink.h" 2
# 24 "./include/uapi/linux/rtnetlink.h"
enum {
 RTM_BASE = 16,


 RTM_NEWLINK = 16,

 RTM_DELLINK,

 RTM_GETLINK,

 RTM_SETLINK,


 RTM_NEWADDR = 20,

 RTM_DELADDR,

 RTM_GETADDR,


 RTM_NEWROUTE = 24,

 RTM_DELROUTE,

 RTM_GETROUTE,


 RTM_NEWNEIGH = 28,

 RTM_DELNEIGH,

 RTM_GETNEIGH,


 RTM_NEWRULE = 32,

 RTM_DELRULE,

 RTM_GETRULE,


 RTM_NEWQDISC = 36,

 RTM_DELQDISC,

 RTM_GETQDISC,


 RTM_NEWTCLASS = 40,

 RTM_DELTCLASS,

 RTM_GETTCLASS,


 RTM_NEWTFILTER = 44,

 RTM_DELTFILTER,

 RTM_GETTFILTER,


 RTM_NEWACTION = 48,

 RTM_DELACTION,

 RTM_GETACTION,


 RTM_NEWPREFIX = 52,


 RTM_GETMULTICAST = 58,


 RTM_GETANYCAST = 62,


 RTM_NEWNEIGHTBL = 64,

 RTM_GETNEIGHTBL = 66,

 RTM_SETNEIGHTBL,


 RTM_NEWNDUSEROPT = 68,


 RTM_NEWADDRLABEL = 72,

 RTM_DELADDRLABEL,

 RTM_GETADDRLABEL,


 RTM_GETDCB = 78,

 RTM_SETDCB,


 RTM_NEWNETCONF = 80,

 RTM_DELNETCONF,

 RTM_GETNETCONF = 82,


 RTM_NEWMDB = 84,

 RTM_DELMDB = 85,

 RTM_GETMDB = 86,


 RTM_NEWNSID = 88,

 RTM_DELNSID = 89,

 RTM_GETNSID = 90,


 RTM_NEWSTATS = 92,

 RTM_GETSTATS = 94,


 RTM_NEWCACHEREPORT = 96,


 RTM_NEWCHAIN = 100,

 RTM_DELCHAIN,

 RTM_GETCHAIN,


 RTM_NEWNEXTHOP = 104,

 RTM_DELNEXTHOP,

 RTM_GETNEXTHOP,


 RTM_NEWLINKPROP = 108,

 RTM_DELLINKPROP,

 RTM_GETLINKPROP,


 RTM_NEWVLAN = 112,

 RTM_DELVLAN,

 RTM_GETVLAN,


 RTM_NEWNEXTHOPBUCKET = 116,

 RTM_DELNEXTHOPBUCKET,

 RTM_GETNEXTHOPBUCKET,


 __RTM_MAX,

};
# 202 "./include/uapi/linux/rtnetlink.h"
struct rtattr {
 unsigned short rta_len;
 unsigned short rta_type;
};
# 228 "./include/uapi/linux/rtnetlink.h"
struct rtmsg {
 unsigned char rtm_family;
 unsigned char rtm_dst_len;
 unsigned char rtm_src_len;
 unsigned char rtm_tos;

 unsigned char rtm_table;
 unsigned char rtm_protocol;
 unsigned char rtm_scope;
 unsigned char rtm_type;

 unsigned rtm_flags;
};



enum {
 RTN_UNSPEC,
 RTN_UNICAST,
 RTN_LOCAL,
 RTN_BROADCAST,

 RTN_ANYCAST,

 RTN_MULTICAST,
 RTN_BLACKHOLE,
 RTN_UNREACHABLE,
 RTN_PROHIBIT,
 RTN_THROW,
 RTN_NAT,
 RTN_XRESOLVE,
 __RTN_MAX
};
# 311 "./include/uapi/linux/rtnetlink.h"
enum rt_scope_t {
 RT_SCOPE_UNIVERSE=0,

 RT_SCOPE_SITE=200,
 RT_SCOPE_LINK=253,
 RT_SCOPE_HOST=254,
 RT_SCOPE_NOWHERE=255
};
# 338 "./include/uapi/linux/rtnetlink.h"
enum rt_class_t {
 RT_TABLE_UNSPEC=0,

 RT_TABLE_COMPAT=252,
 RT_TABLE_DEFAULT=253,
 RT_TABLE_MAIN=254,
 RT_TABLE_LOCAL=255,
 RT_TABLE_MAX=0xFFFFFFFF
};




enum rtattr_type_t {
 RTA_UNSPEC,
 RTA_DST,
 RTA_SRC,
 RTA_IIF,
 RTA_OIF,
 RTA_GATEWAY,
 RTA_PRIORITY,
 RTA_PREFSRC,
 RTA_METRICS,
 RTA_MULTIPATH,
 RTA_PROTOINFO,
 RTA_FLOW,
 RTA_CACHEINFO,
 RTA_SESSION,
 RTA_MP_ALGO,
 RTA_TABLE,
 RTA_MARK,
 RTA_MFC_STATS,
 RTA_VIA,
 RTA_NEWDST,
 RTA_PREF,
 RTA_ENCAP_TYPE,
 RTA_ENCAP,
 RTA_EXPIRES,
 RTA_PAD,
 RTA_UID,
 RTA_TTL_PROPAGATE,
 RTA_IP_PROTO,
 RTA_SPORT,
 RTA_DPORT,
 RTA_NH_ID,
 __RTA_MAX
};
# 400 "./include/uapi/linux/rtnetlink.h"
struct rtnexthop {
 unsigned short rtnh_len;
 unsigned char rtnh_flags;
 unsigned char rtnh_hops;
 int rtnh_ifindex;
};
# 432 "./include/uapi/linux/rtnetlink.h"
struct rtvia {
 __kernel_sa_family_t rtvia_family;
 __u8 rtvia_addr[0];
};



struct rta_cacheinfo {
 __u32 rta_clntref;
 __u32 rta_lastuse;
 __s32 rta_expires;
 __u32 rta_error;
 __u32 rta_used;


 __u32 rta_id;
 __u32 rta_ts;
 __u32 rta_tsage;
};



enum {
 RTAX_UNSPEC,

 RTAX_LOCK,

 RTAX_MTU,

 RTAX_WINDOW,

 RTAX_RTT,

 RTAX_RTTVAR,

 RTAX_SSTHRESH,

 RTAX_CWND,

 RTAX_ADVMSS,

 RTAX_REORDERING,

 RTAX_HOPLIMIT,

 RTAX_INITCWND,

 RTAX_FEATURES,

 RTAX_RTO_MIN,

 RTAX_INITRWND,

 RTAX_QUICKACK,

 RTAX_CC_ALGO,

 RTAX_FASTOPEN_NO_COOKIE,

 __RTAX_MAX
};
# 504 "./include/uapi/linux/rtnetlink.h"
struct rta_session {
 __u8 proto;
 __u8 pad1;
 __u16 pad2;

 union {
  struct {
   __u16 sport;
   __u16 dport;
  } ports;

  struct {
   __u8 type;
   __u8 code;
   __u16 ident;
  } icmpt;

  __u32 spi;
 } u;
};

struct rta_mfc_stats {
 __u64 mfcs_packets;
 __u64 mfcs_bytes;
 __u64 mfcs_wrong_if;
};





struct rtgenmsg {
 unsigned char rtgen_family;
};
# 548 "./include/uapi/linux/rtnetlink.h"
struct ifinfomsg {
 unsigned char ifi_family;
 unsigned char __ifi_pad;
 unsigned short ifi_type;
 int ifi_index;
 unsigned ifi_flags;
 unsigned ifi_change;
};





struct prefixmsg {
 unsigned char prefix_family;
 unsigned char prefix_pad1;
 unsigned short prefix_pad2;
 int prefix_ifindex;
 unsigned char prefix_type;
 unsigned char prefix_len;
 unsigned char prefix_flags;
 unsigned char prefix_pad3;
};

enum
{
 PREFIX_UNSPEC,
 PREFIX_ADDRESS,
 PREFIX_CACHEINFO,
 __PREFIX_MAX
};



struct prefix_cacheinfo {
 __u32 preferred_time;
 __u32 valid_time;
};






struct tcmsg {
 unsigned char tcm_family;
 unsigned char tcm__pad1;
 unsigned short tcm__pad2;
 int tcm_ifindex;
 __u32 tcm_handle;
 __u32 tcm_parent;




 __u32 tcm_info;
};







enum {
 TCA_UNSPEC,
 TCA_KIND,
 TCA_OPTIONS,
 TCA_STATS,
 TCA_XSTATS,
 TCA_RATE,
 TCA_FCNT,
 TCA_STATS2,
 TCA_STAB,
 TCA_PAD,
 TCA_DUMP_INVISIBLE,
 TCA_CHAIN,
 TCA_HW_OFFLOAD,
 TCA_INGRESS_BLOCK,
 TCA_EGRESS_BLOCK,
 TCA_DUMP_FLAGS,
 __TCA_MAX
};
# 646 "./include/uapi/linux/rtnetlink.h"
struct nduseroptmsg {
 unsigned char nduseropt_family;
 unsigned char nduseropt_pad1;
 unsigned short nduseropt_opts_len;
 int nduseropt_ifindex;
 __u8 nduseropt_icmp_type;
 __u8 nduseropt_icmp_code;
 unsigned short nduseropt_pad2;
 unsigned int nduseropt_pad3;

};

enum {
 NDUSEROPT_UNSPEC,
 NDUSEROPT_SRCADDR,
 __NDUSEROPT_MAX
};
# 690 "./include/uapi/linux/rtnetlink.h"
enum rtnetlink_groups {
 RTNLGRP_NONE,

 RTNLGRP_LINK,

 RTNLGRP_NOTIFY,

 RTNLGRP_NEIGH,

 RTNLGRP_TC,

 RTNLGRP_IPV4_IFADDR,

 RTNLGRP_IPV4_MROUTE,

 RTNLGRP_IPV4_ROUTE,

 RTNLGRP_IPV4_RULE,

 RTNLGRP_IPV6_IFADDR,

 RTNLGRP_IPV6_MROUTE,

 RTNLGRP_IPV6_ROUTE,

 RTNLGRP_IPV6_IFINFO,

 RTNLGRP_DECnet_IFADDR,

 RTNLGRP_NOP2,
 RTNLGRP_DECnet_ROUTE,

 RTNLGRP_DECnet_RULE,

 RTNLGRP_NOP4,
 RTNLGRP_IPV6_PREFIX,

 RTNLGRP_IPV6_RULE,

 RTNLGRP_ND_USEROPT,

 RTNLGRP_PHONET_IFADDR,

 RTNLGRP_PHONET_ROUTE,

 RTNLGRP_DCB,

 RTNLGRP_IPV4_NETCONF,

 RTNLGRP_IPV6_NETCONF,

 RTNLGRP_MDB,

 RTNLGRP_MPLS_ROUTE,

 RTNLGRP_NSID,

 RTNLGRP_MPLS_NETCONF,

 RTNLGRP_IPV4_MROUTE_R,

 RTNLGRP_IPV6_MROUTE_R,

 RTNLGRP_NEXTHOP,

 RTNLGRP_BRVLAN,

 __RTNLGRP_MAX
};



struct tcamsg {
 unsigned char tca_family;
 unsigned char tca__pad1;
 unsigned short tca__pad2;
};

enum {
 TCA_ROOT_UNSPEC,
 TCA_ROOT_TAB,


 TCA_ROOT_FLAGS,
 TCA_ROOT_COUNT,
 TCA_ROOT_TIME_DELTA,
 __TCA_ROOT_MAX,

};
# 12 "./include/linux/rtnetlink.h" 2

struct dst_entry;

extern int rtnetlink_send(struct sk_buff *skb, struct net *net, u32 pid, u32 group, int echo);
extern int rtnl_unicast(struct sk_buff *skb, struct net *net, u32 pid);
extern void rtnl_notify(struct sk_buff *skb, struct net *net, u32 pid,
   u32 group, struct nlmsghdr *nlh, gfp_t flags);
extern void rtnl_set_sk_err(struct net *net, u32 group, int error);
extern int rtnetlink_put_metrics(struct sk_buff *skb, u32 *metrics);
extern int rtnl_put_cacheinfo(struct sk_buff *skb, struct dst_entry *dst,
         u32 id, long expires, u32 error);

void rtmsg_ifinfo(int type, struct net_device *dev, unsigned change, gfp_t flags);
void rtmsg_ifinfo_newnet(int type, struct net_device *dev, unsigned int change,
    gfp_t flags, int *new_nsid, int new_ifindex);
struct sk_buff *rtmsg_ifinfo_build_skb(int type, struct net_device *dev,
           unsigned change, u32 event,
           gfp_t flags, int *new_nsid,
           int new_ifindex);
void rtmsg_ifinfo_send(struct sk_buff *skb, struct net_device *dev,
         gfp_t flags);



extern void rtnl_lock(void);
extern void rtnl_unlock(void);
extern int rtnl_trylock(void);
extern int rtnl_is_locked(void);
extern int rtnl_lock_killable(void);
extern bool refcount_dec_and_rtnl_lock(refcount_t *r);

extern wait_queue_head_t netdev_unregistering_wq;
extern struct rw_semaphore pernet_ops_rwsem;
extern struct rw_semaphore net_rwsem;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lockdep_rtnl_is_held(void)
{
 return true;
}
# 90 "./include/linux/rtnetlink.h"
struct netdev_queue *dev_ingress_queue_create(struct net_device *dev);


void net_inc_ingress_queue(void);
void net_dec_ingress_queue(void);



void net_inc_egress_queue(void);
void net_dec_egress_queue(void);


void rtnetlink_init(void);
void __rtnl_unlock(void);
void rtnl_kfree_skbs(struct sk_buff *head, struct sk_buff *tail);





extern int ndo_dflt_fdb_dump(struct sk_buff *skb,
        struct netlink_callback *cb,
        struct net_device *dev,
        struct net_device *filter_dev,
        int *idx);
extern int ndo_dflt_fdb_add(struct ndmsg *ndm,
       struct nlattr *tb[],
       struct net_device *dev,
       const unsigned char *addr,
       u16 vid,
       u16 flags);
extern int ndo_dflt_fdb_del(struct ndmsg *ndm,
       struct nlattr *tb[],
       struct net_device *dev,
       const unsigned char *addr,
       u16 vid);

extern int ndo_dflt_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq,
       struct net_device *dev, u16 mode,
       u32 flags, u32 mask, int nlflags,
       u32 filter_mask,
       int (*vlan_fill)(struct sk_buff *skb,
          struct net_device *dev,
          u32 filter_mask));
# 7 "./include/net/rtnetlink_api.h" 2

# 1 "./include/net/netlink_api.h" 1







# 1 "./include/linux/netlink.h" 1




# 1 "./include/linux/skbuff_types.h" 1
# 13 "./include/linux/skbuff_types.h"
# 1 "./include/linux/skbuff_types_head.h" 1






struct sk_buff;

struct sk_buff_head {

 struct sk_buff *next;
 struct sk_buff *prev;

 __u32 qlen;
 spinlock_t lock;
};
# 14 "./include/linux/skbuff_types.h" 2


# 1 "./include/linux/bvec.h" 1
# 10 "./include/linux/bvec.h"
# 1 "./include/linux/bvec_types.h" 1
# 12 "./include/linux/bvec_types.h"
struct page;
# 26 "./include/linux/bvec_types.h"
struct bio_vec {
 struct page *bv_page;
 unsigned int bv_len;
 unsigned int bv_offset;
};

struct bvec_iter {
 sector_t bi_sector;

 unsigned int bi_size;

 unsigned int bi_idx;

 unsigned int bi_bvec_done;

} __attribute__((__packed__));

struct bvec_iter_all {
 struct bio_vec bv;
 int idx;
 unsigned done;
};
# 95 "./include/linux/bvec_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bvec_iter_advance(const struct bio_vec *bv,
  struct bvec_iter *iter, unsigned bytes)
{
 unsigned int idx = iter->bi_idx;

 if (({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(bytes > iter->bi_size); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Attempted to advance past end of bvec iter\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/bvec_types.h\"; .popsection; .long 14472b - 14470b; .short 101; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); })) {

  iter->bi_size = 0;
  return false;
 }

 iter->bi_size -= bytes;
 bytes += iter->bi_bvec_done;

 while (bytes && bytes >= bv[idx].bv_len) {
  bytes -= bv[idx].bv_len;
  idx++;
 }

 iter->bi_idx = idx;
 iter->bi_bvec_done = bytes;
 return true;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bvec_iter_advance_single(const struct bio_vec *bv,
    struct bvec_iter *iter, unsigned int bytes)
{
 unsigned int done = iter->bi_bvec_done + bytes;

 if (done == bv[iter->bi_idx].bv_len) {
  done = 0;
  iter->bi_idx++;
 }
 iter->bi_bvec_done = done;
 iter->bi_size -= bytes;
}
# 151 "./include/linux/bvec_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bio_vec *bvec_init_iter_all(struct bvec_iter_all *iter_all)
{
 iter_all->done = 0;
 iter_all->idx = 0;

 return &iter_all->bv;
}

extern void bvec_advance(const struct bio_vec *bvec, struct bvec_iter_all *iter_all);
# 11 "./include/linux/bvec.h" 2
# 17 "./include/linux/skbuff_types.h" 2





# 1 "./arch/arm64/include/asm/page_types.h" 1
# 23 "./include/linux/skbuff_types.h" 2


# 1 "./include/uapi/linux/in6.h" 1
# 33 "./include/uapi/linux/in6.h"
struct in6_addr {
 union {
  __u8 u6_addr8[16];

  __be16 u6_addr16[8];
  __be32 u6_addr32[4];

 } in6_u;





};



struct sockaddr_in6 {
 unsigned short int sin6_family;
 __be16 sin6_port;
 __be32 sin6_flowinfo;
 struct in6_addr sin6_addr;
 __u32 sin6_scope_id;
};



struct ipv6_mreq {

 struct in6_addr ipv6mr_multiaddr;


 int ipv6mr_ifindex;
};




struct in6_flowlabel_req {
 struct in6_addr flr_dst;
 __be32 flr_label;
 __u8 flr_action;
 __u8 flr_share;
 __u16 flr_flags;
 __u16 flr_expires;
 __u16 flr_linger;
 __u32 __flr_pad;

};
# 26 "./include/linux/skbuff_types.h" 2
# 225 "./include/linux/skbuff_types.h"
struct ahash_request;
struct net_device;
struct scatterlist;
struct pipe_inode_info;
struct iov_iter;
struct napi_struct;
struct bpf_prog;
union bpf_attr;
struct skb_ext;
struct page_frag;
# 290 "./include/linux/skbuff_types.h"
extern int sysctl_max_skb_frags;






typedef struct bio_vec skb_frag_t;
# 315 "./include/linux/skbuff_types.h"
struct skb_shared_hwtstamps {
 ktime_t hwtstamp;
};


enum {

 SKBTX_HW_TSTAMP = 1 << 0,


 SKBTX_SW_TSTAMP = 1 << 1,


 SKBTX_IN_PROGRESS = 1 << 2,


 SKBTX_WIFI_STATUS = 1 << 4,


 SKBTX_SCHED_TSTAMP = 1 << 6,
};






enum {

 SKBFL_ZEROCOPY_ENABLE = ((((1UL))) << (0)),






 SKBFL_SHARED_FRAG = ((((1UL))) << (1)),




 SKBFL_PURE_ZEROCOPY = ((((1UL))) << (2)),
};
# 370 "./include/linux/skbuff_types.h"
struct ubuf_info {
 void (*callback)(struct sk_buff *, struct ubuf_info *,
    bool zerocopy_success);
 union {
  struct {
   unsigned long desc;
   void *ctx;
  };
  struct {
   u32 id;
   u16 len;
   u16 zerocopy:1;
   u32 bytelen;
  };
 };
 refcount_t refcnt;
 u8 flags;

 struct mmpin {
  struct user_struct *user;
  unsigned int num_pg;
 } mmp;
};




struct skb_shared_info {
 __u8 flags;
 __u8 meta_len;
 __u8 nr_frags;
 __u8 tx_flags;
 unsigned short gso_size;

 unsigned short gso_segs;
 struct sk_buff *frag_list;
 struct skb_shared_hwtstamps hwtstamps;
 unsigned int gso_type;
 u32 tskey;




 atomic_t dataref;



 void * destructor_arg;


 skb_frag_t frags[(65536/((1UL) << 12) + 1)];
};
# 438 "./include/linux/skbuff_types.h"
enum {
 SKB_FCLONE_UNAVAILABLE,
 SKB_FCLONE_ORIG,
 SKB_FCLONE_CLONE,
};

enum {
 SKB_GSO_TCPV4 = 1 << 0,


 SKB_GSO_DODGY = 1 << 1,


 SKB_GSO_TCP_ECN = 1 << 2,

 SKB_GSO_TCP_FIXEDID = 1 << 3,

 SKB_GSO_TCPV6 = 1 << 4,

 SKB_GSO_FCOE = 1 << 5,

 SKB_GSO_GRE = 1 << 6,

 SKB_GSO_GRE_CSUM = 1 << 7,

 SKB_GSO_IPXIP4 = 1 << 8,

 SKB_GSO_IPXIP6 = 1 << 9,

 SKB_GSO_UDP_TUNNEL = 1 << 10,

 SKB_GSO_UDP_TUNNEL_CSUM = 1 << 11,

 SKB_GSO_PARTIAL = 1 << 12,

 SKB_GSO_TUNNEL_REMCSUM = 1 << 13,

 SKB_GSO_SCTP = 1 << 14,

 SKB_GSO_ESP = 1 << 15,

 SKB_GSO_UDP = 1 << 16,

 SKB_GSO_UDP_L4 = 1 << 17,

 SKB_GSO_FRAGLIST = 1 << 18,
};






typedef unsigned int sk_buff_data_t;
# 604 "./include/linux/skbuff_types.h"
struct sk_buff {
 union {
  struct {

   struct sk_buff *next;
   struct sk_buff *prev;

   union {
    struct net_device *dev;




    unsigned long dev_scratch;
   };
  };
  struct rb_node rbnode;
  struct list_head list;
 };

 union {
  struct sock *sk;
  int ip_defrag_offset;
 };

 union {
  ktime_t tstamp;
  u64 skb_mstamp_ns;
 };






 char cb[48] __attribute__((__aligned__(8)));

 union {
  struct {
   unsigned long _skb_refdst;
   void (*destructor)(struct sk_buff *skb);
  };
  struct list_head tcp_tsorted_anchor;



 };


 unsigned long _nfct;

 unsigned int len,
    data_len;
 __u16 mac_len,
    hdr_len;




 __u16 queue_mapping;
# 674 "./include/linux/skbuff_types.h"
 __u8 __cloned_offset[0];

 __u8 cloned:1,
    nohdr:1,
    fclone:2,
    peeked:1,
    head_frag:1,
    pfmemalloc:1,
    pp_recycle:1;
# 691 "./include/linux/skbuff_types.h"
 __u32 headers_start[0];
# 703 "./include/linux/skbuff_types.h"
 __u8 __pkt_type_offset[0];

 __u8 pkt_type:3;
 __u8 ignore_df:1;
 __u8 nf_trace:1;
 __u8 ip_summed:2;
 __u8 ooo_okay:1;

 __u8 l4_hash:1;
 __u8 sw_hash:1;
 __u8 wifi_acked_valid:1;
 __u8 wifi_acked:1;
 __u8 no_fcs:1;

 __u8 encapsulation:1;
 __u8 encap_hdr_csum:1;
 __u8 csum_valid:1;
# 728 "./include/linux/skbuff_types.h"
 __u8 __pkt_vlan_present_offset[0];

 __u8 vlan_present:1;
 __u8 csum_complete_sw:1;
 __u8 csum_level:2;
 __u8 csum_not_inet:1;
 __u8 dst_pending_confirm:1;

 __u8 ndisc_nodetype:2;


 __u8 ipvs_property:1;
 __u8 inner_protocol_type:1;
 __u8 remcsum_offload:1;

 __u8 offload_fwd_mark:1;
 __u8 offload_l3_fwd_mark:1;


 __u8 tc_skip_classify:1;
 __u8 tc_at_ingress:1;

 __u8 redirected:1;




 __u8 nf_skip_egress:1;




 __u8 slow_gro:1;


 __u16 tc_index;


 union {
  __wsum csum;
  struct {
   __u16 csum_start;
   __u16 csum_offset;
  };
 };
 __u32 priority;
 int skb_iif;
 __u32 hash;
 __be16 vlan_proto;
 __u16 vlan_tci;

 union {
  unsigned int napi_id;
  unsigned int sender_cpu;
 };





 union {
  __u32 mark;
  __u32 reserved_tailroom;
 };

 union {
  __be16 inner_protocol;
  __u8 inner_ipproto;
 };

 __u16 inner_transport_header;
 __u16 inner_network_header;
 __u16 inner_mac_header;

 __be16 protocol;
 __u16 transport_header;
 __u16 network_header;
 __u16 mac_header;






 __u32 headers_end[0];



 sk_buff_data_t tail;
 sk_buff_data_t end;
 unsigned char *head,
    *data;
 unsigned int truesize;
 refcount_t users;





};




struct sk_buff_fclones {
 struct sk_buff skb1;

 struct sk_buff skb2;

 refcount_t fclone_ref;
};

struct skb_seq_state {
 __u32 lower_offset;
 __u32 upper_offset;
 __u32 frag_idx;
 __u32 stepped_offset;
 struct sk_buff *root_skb;
 struct sk_buff *cur_skb;
 __u8 *frag_data;
 __u32 frag_off;
};
# 877 "./include/linux/skbuff_types.h"
enum pkt_hash_types {
 PKT_HASH_TYPE_NONE,
 PKT_HASH_TYPE_L2,
 PKT_HASH_TYPE_L3,
 PKT_HASH_TYPE_L4,
};
# 922 "./include/linux/skbuff_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_transport_header(const struct sk_buff *skb)
{
 return skb->head + skb->transport_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_inner_transport_header(const struct sk_buff *skb)
{
 return skb->head + skb->inner_transport_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_network_header(const struct sk_buff *skb)
{
 return skb->head + skb->network_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 skb_network_header_len(const struct sk_buff *skb)
{
 return skb->transport_header - skb->network_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_inner_network_header(const struct sk_buff *skb)
{
 return skb->head + skb->inner_network_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_mark_not_on_list(struct sk_buff *skb)
{
 skb->next = ((void *)0);
}
# 6 "./include/linux/netlink.h" 2


# 1 "./include/net/scm_types.h" 1






struct scm_creds {
 u32 pid;
 kuid_t uid;
 kgid_t gid;
};
# 9 "./include/linux/netlink.h" 2



struct net;
struct notifier_block;
struct file;
struct module;

void do_trace_netlink_extack(const char *msg);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlmsghdr *nlmsg_hdr(const struct sk_buff *skb)
{
 return (struct nlmsghdr *)skb->data;
}

enum netlink_skb_flags {
 NETLINK_SKB_DST = 0x8,
};

struct netlink_skb_parms {
 struct scm_creds creds;
 __u32 portid;
 __u32 dst_group;
 __u32 flags;
 struct sock *sk;
 bool nsid_is_set;
 int nsid;
};





void netlink_table_grab(void);
void netlink_table_ungrab(void);





struct netlink_kernel_cfg {
 unsigned int groups;
 unsigned int flags;
 void (*input)(struct sk_buff *skb);
 struct mutex *cb_mutex;
 int (*bind)(struct net *net, int group);
 void (*unbind)(struct net *net, int group);
 bool (*compare)(struct net *net, struct sock *sk);
};

struct sock *__netlink_kernel_create(struct net *net, int unit,
         struct module *module,
         struct netlink_kernel_cfg *cfg);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sock *
netlink_kernel_create(struct net *net, int unit, struct netlink_kernel_cfg *cfg)
{
 return __netlink_kernel_create(net, unit, ((struct module *)0), cfg);
}
# 80 "./include/linux/netlink.h"
struct netlink_ext_ack {
 const char *_msg;
 const struct nlattr *bad_attr;
 const struct nla_policy *policy;
 u8 cookie[20];
 u8 cookie_len;
};
# 132 "./include/linux/netlink.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void nl_set_extack_cookie_u64(struct netlink_ext_ack *extack,
         u64 cookie)
{
 if (!extack)
  return;
 memcpy(extack->cookie, &cookie, sizeof(cookie));
 extack->cookie_len = sizeof(cookie);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void nl_set_extack_cookie_u32(struct netlink_ext_ack *extack,
         u32 cookie)
{
 if (!extack)
  return;
 memcpy(extack->cookie, &cookie, sizeof(cookie));
 extack->cookie_len = sizeof(cookie);
}

void netlink_kernel_release(struct sock *sk);
int __netlink_change_ngroups(struct sock *sk, unsigned int groups);
int netlink_change_ngroups(struct sock *sk, unsigned int groups);
void __netlink_clear_multicast_users(struct sock *sk, unsigned int group);
void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err,
   const struct netlink_ext_ack *extack);
int netlink_has_listeners(struct sock *sk, unsigned int group);
bool netlink_strict_get_check(struct sk_buff *skb);

int netlink_unicast(struct sock *ssk, struct sk_buff *skb, __u32 portid, int nonblock);
int netlink_broadcast(struct sock *ssk, struct sk_buff *skb, __u32 portid,
        __u32 group, gfp_t allocation);
int netlink_set_err(struct sock *ssk, __u32 portid, __u32 group, int code);
int netlink_register_notifier(struct notifier_block *nb);
int netlink_unregister_notifier(struct notifier_block *nb);


struct sock *netlink_getsockbyfilp(struct file *filp);
int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
        long *timeo, struct sock *ssk);
void netlink_detachskb(struct sock *sk, struct sk_buff *skb);
int netlink_sendskb(struct sock *sk, struct sk_buff *skb);
# 188 "./include/linux/netlink.h"
struct netlink_callback {
 struct sk_buff *skb;
 const struct nlmsghdr *nlh;
 int (*dump)(struct sk_buff * skb,
     struct netlink_callback *cb);
 int (*done)(struct netlink_callback *cb);
 void *data;

 struct module *module;
 struct netlink_ext_ack *extack;
 u16 family;
 u16 answer_flags;
 u32 min_dump_alloc;
 unsigned int prev_seq, seq;
 bool strict_check;
 union {
  u8 ctx[48];




  long args[6];
 };
};

struct netlink_notify {
 struct net *net;
 u32 portid;
 int protocol;
};

struct nlmsghdr *
__nlmsg_put(struct sk_buff *skb, u32 portid, u32 seq, int type, int len, int flags);

struct netlink_dump_control {
 int (*start)(struct netlink_callback *);
 int (*dump)(struct sk_buff *skb, struct netlink_callback *);
 int (*done)(struct netlink_callback *);
 void *data;
 struct module *module;
 u32 min_dump_alloc;
};

int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
    const struct nlmsghdr *nlh,
    struct netlink_dump_control *control);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
         const struct nlmsghdr *nlh,
         struct netlink_dump_control *control)
{
 if (!control->module)
  control->module = ((struct module *)0);

 return __netlink_dump_start(ssk, skb, nlh, control);
}

struct netlink_tap {
 struct net_device *dev;
 struct module *module;
 struct list_head list;
};

int netlink_add_tap(struct netlink_tap *nt);
int netlink_remove_tap(struct netlink_tap *nt);

bool __netlink_ns_capable(const struct netlink_skb_parms *nsp,
     struct user_namespace *ns, int cap);
bool netlink_ns_capable(const struct sk_buff *skb,
   struct user_namespace *ns, int cap);
bool netlink_capable(const struct sk_buff *skb, int cap);
bool netlink_net_capable(const struct sk_buff *skb, int cap);
# 9 "./include/net/netlink_api.h" 2
# 1 "./include/linux/jiffies.h" 1







# 1 "./include/linux/math64.h" 1





# 1 "./include/linux/math.h" 1




# 1 "./arch/arm64/include/generated/asm/div64.h" 1
# 1 "./include/asm-generic/div64.h" 1
# 2 "./arch/arm64/include/generated/asm/div64.h" 2
# 6 "./include/linux/math.h" 2
# 160 "./include/linux/math.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 int_sqrt64(u64 x)
{
 return (u32)int_sqrt(x);
}
# 7 "./include/linux/math64.h" 2
# 1 "./include/vdso/math64.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}
# 8 "./include/linux/math64.h" 2
# 1 "./arch/arm64/include/generated/asm/div64.h" 1
# 9 "./include/linux/math64.h" 2
# 26 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 40 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 54 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 67 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}
# 79 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 125 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 138 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u64_shr(u64 a, u64 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}
# 239 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_s64_u64_shr(s64 a, u64 b, unsigned int shift)
{
 u64 ret;





 ret = mul_u64_u64_shr(__builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long long) || __builtin_types_compatible_p(typeof(a), unsigned long long), ({ signed long long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long) || __builtin_types_compatible_p(typeof(a), unsigned long), ({ signed long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed int) || __builtin_types_compatible_p(typeof(a), unsigned int), ({ signed int __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed short) || __builtin_types_compatible_p(typeof(a), unsigned short), ({ signed short __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed char) || __builtin_types_compatible_p(typeof(a), unsigned char), ({ signed char __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), char), (char)({ signed char __x = (a); __x<0?-__x:__x; }), ((void)0))))))), b, shift);

 if (a < 0)
  ret = -((s64) ret);

 return ret;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}


u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
# 9 "./include/linux/jiffies.h" 2
# 1 "./include/linux/minmax.h" 1
# 10 "./include/linux/jiffies.h" 2

# 1 "./include/linux/time.h" 1




# 1 "./include/linux/time64.h" 1




# 1 "./include/linux/time64_types.h" 1







typedef __s64 time64_t;
typedef __u64 timeu64_t;

# 1 "./include/uapi/linux/time.h" 1





# 1 "./include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "./include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_old_timespec {
 __kernel_old_time_t tv_sec;
 long tv_nsec;
};

struct __kernel_old_itimerval {
 struct __kernel_old_timeval it_interval;
 struct __kernel_old_timeval it_value;
};

struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "./include/uapi/linux/time.h" 2
# 33 "./include/uapi/linux/time.h"
struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 12 "./include/linux/time64_types.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 6 "./include/linux/time64.h" 2
# 6 "./include/linux/time.h" 2
# 1 "./include/linux/time32.h" 1
# 12 "./include/linux/time32.h"
# 1 "./include/linux/time64.h" 1
# 13 "./include/linux/time32.h" 2

# 1 "./include/vdso/time32.h" 1




typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};
# 15 "./include/linux/time32.h" 2

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);







extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 7 "./include/linux/time.h" 2

# 1 "./include/vdso/time.h" 1






struct timens_offset {
 s64 sec;
 u64 nsec;
};
# 9 "./include/linux/time.h" 2

extern struct timezone sys_tz;

extern int get_timespec64( struct timespec64 *ts, const struct __kernel_timespec *uts);
extern int put_timespec64( const struct timespec64 *ts, struct __kernel_timespec *uts);
extern int get_itimerspec64( struct itimerspec64 *it, const struct __kernel_itimerspec *uit);
extern int put_itimerspec64(const struct itimerspec64 *it, struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
    const unsigned int day, const unsigned int hour,
    const unsigned int min, const unsigned int sec);


extern void clear_itimer(void);




extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

extern void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);
# 12 "./include/linux/jiffies.h" 2


# 1 "./include/generated/timeconst.h" 1
# 15 "./include/linux/jiffies.h" 2
# 62 "./include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 79 "./include/linux/jiffies.h"
extern u64 jiffies_64;
extern unsigned long volatile jiffies;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 189 "./include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 290 "./include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 250) - 1) / (1000L / 250);
}
# 363 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 250) - 1) / (1000000L / 250);
}
# 410 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x166 = (0L); typeof(delta) __UNIQUE_ID___y167 = (delta); ((__UNIQUE_ID___x166) > (__UNIQUE_ID___y167) ? (__UNIQUE_ID___x166) : (__UNIQUE_ID___y167)); })));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x168 = (0L); typeof(delta) __UNIQUE_ID___y169 = (delta); ((__UNIQUE_ID___x168) > (__UNIQUE_ID___y169) ? (__UNIQUE_ID___x168) : (__UNIQUE_ID___y169)); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 10 "./include/net/netlink_api.h" 2
# 1 "./include/linux/in6.h" 1
# 25 "./include/linux/in6.h"
extern const struct in6_addr in6addr_any;

extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_linklocal_allnodes;


extern const struct in6_addr in6addr_linklocal_allrouters;


extern const struct in6_addr in6addr_interfacelocal_allnodes;


extern const struct in6_addr in6addr_interfacelocal_allrouters;


extern const struct in6_addr in6addr_sitelocal_allrouters;
# 11 "./include/net/netlink_api.h" 2
# 1 "./include/linux/skbuff_api.h" 1
# 15 "./include/linux/skbuff_api.h"
# 1 "./include/linux/uio_api.h" 1







# 1 "./include/linux/uio_types.h" 1







# 1 "./include/uapi/linux/uio.h" 1
# 17 "./include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 9 "./include/linux/uio_types.h" 2

struct page;
struct pipe_inode_info;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum iter_type {

 ITER_IOVEC,
 ITER_KVEC,
 ITER_BVEC,
 ITER_PIPE,
 ITER_XARRAY,
 ITER_DISCARD,
};

struct iov_iter_state {
 size_t iov_offset;
 size_t count;
 unsigned long nr_segs;
};

struct iov_iter {
 u8 iter_type;
 bool nofault;
 bool data_source;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
  struct xarray *xarray;
  struct pipe_inode_info *pipe;
 };
 union {
  unsigned long nr_segs;
  struct {
   unsigned int head;
   unsigned int start_head;
  };
  loff_t xarray_start;
 };
};
# 9 "./include/linux/uio_api.h" 2


# 1 "./include/linux/check_size.h" 1
# 20 "./include/linux/check_size.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_object_size(const void *ptr, unsigned long n,
         bool to_user)
{ }


extern void __attribute__((__error__("copy source size is too small")))
__bad_copy_from(void);
extern void __attribute__((__error__("copy destination size is too small")))
__bad_copy_to(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Buffer overflow detected (%d < %lu)!\n", size, count); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/check_size.h\"; .popsection; .long 14472b - 14470b; .short 32; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = __builtin_object_size(addr, 0);
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 if (({ int __ret_warn_on = !!(bytes > ((int)(~0U >> 1))); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/check_size.h\"; .popsection; .long 14472b - 14470b; .short 48; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 check_object_size(addr, bytes, is_source);
 return true;
}
# 12 "./include/linux/uio_api.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum iter_type iov_iter_type(const struct iov_iter *i)
{
 return i->iter_type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_save_state(struct iov_iter *iter,
           struct iov_iter_state *state)
{
 state->iov_offset = iter->iov_offset;
 state->count = iter->count;
 state->nr_segs = iter->nr_segs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iter_is_iovec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_IOVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_kvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_KVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_bvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_BVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_pipe(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_PIPE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_discard(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_DISCARD;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_xarray(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_XARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char iov_iter_rw(const struct iov_iter *i)
{
 return i->data_source ? 1 : 0;
}
# 68 "./include/linux/uio_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = __builtin_choose_expr(((!!(sizeof((typeof(iter->count) *)1 == (typeof(iter->iov->iov_len - iter->iov_offset) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->count) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->iov->iov_len - iter->iov_offset) * 0l)) : (int *)8))))), ((iter->count) < (iter->iov->iov_len - iter->iov_offset) ? (iter->count) : (iter->iov->iov_len - iter->iov_offset)), ({ typeof(iter->count) __UNIQUE_ID___x170 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) __UNIQUE_ID___y171 = (iter->iov->iov_len - iter->iov_offset); ((__UNIQUE_ID___x170) < (__UNIQUE_ID___y171) ? (__UNIQUE_ID___x170) : (__UNIQUE_ID___y171)); })),

 };
}

size_t copy_page_from_iter_atomic(struct page *page, unsigned offset,
      size_t bytes, struct iov_iter *i);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
void iov_iter_revert(struct iov_iter *i, size_t bytes);
size_t fault_in_iov_iter_readable(const struct iov_iter *i, size_t bytes);
size_t fault_in_iov_iter_writeable(const struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);

size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter_nocache(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
# 168 "./include/linux/uio_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_mc_to_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, unsigned int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, unsigned int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, unsigned int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
void iov_iter_pipe(struct iov_iter *i, unsigned int direction, struct pipe_inode_info *pipe,
   size_t count);
void iov_iter_discard(struct iov_iter *i, unsigned int direction, size_t count);
void iov_iter_xarray(struct iov_iter *i, unsigned int direction, struct xarray *xarray,
       loff_t start, size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);
void iov_iter_restore(struct iov_iter *i, struct iov_iter_state *state);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_iter_count(const struct iov_iter *i)
{
 return i->count;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}

struct csum_state {
 __wsum csum;
 size_t off;
};

size_t csum_and_copy_to_iter(const void *addr, size_t bytes, void *csstate, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool csum_and_copy_from_iter_full(void *addr, size_t bytes,
      __wsum *csum, struct iov_iter *i)
{
 size_t copied = csum_and_copy_from_iter(addr, bytes, csum, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
size_t hash_and_copy_to_iter(const void *addr, size_t bytes, void *hashp,
  struct iov_iter *i);

struct iovec *iovec_from_user(const struct iovec *uvector,
  unsigned long nr_segs, unsigned long fast_segs,
  struct iovec *fast_iov, bool compat);
ssize_t import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i);
ssize_t __import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i, bool compat);
int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 16 "./include/linux/skbuff_api.h" 2


# 1 "./include/linux/gfp_types.h" 1
# 352 "./include/linux/gfp_types.h"
typedef unsigned isolate_mode_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 19 "./include/linux/skbuff_api.h" 2
# 1 "./include/linux/rbtree_api.h" 1
# 25 "./include/linux/rbtree_api.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

extern void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link);
extern void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link);
# 81 "./include/linux/rbtree_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rb_node *
rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)
{
 struct rb_node *leftmost = ((void *)0);

 if (root->rb_leftmost == node)
  leftmost = root->rb_leftmost = rb_next(node);

 rb_erase(node, &root->rb_root);

 return leftmost;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 137 "./include/linux/rbtree_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_add_cached(struct rb_node *node, struct rb_root_cached *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_root.rb_node;
 struct rb_node *parent = ((void *)0);
 bool leftmost = true;

 while (*link) {
  parent = *link;
  if (less(node, parent)) {
   link = &parent->rb_left;
  } else {
   link = &parent->rb_right;
   leftmost = false;
  }
 }

 rb_link_node(node, parent, link);
 rb_insert_color_cached(node, tree, leftmost);

 return leftmost ? node : ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
rb_add(struct rb_node *node, struct rb_root *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);

 while (*link) {
  parent = *link;
  if (less(node, parent))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
}
# 195 "./include/linux/rbtree_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_add(struct rb_node *node, struct rb_root *tree,
     int (*cmp)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);
 int c;

 while (*link) {
  parent = *link;
  c = cmp(node, parent);

  if (c < 0)
   link = &parent->rb_left;
  else if (c > 0)
   link = &parent->rb_right;
  else
   return parent;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
 return ((void *)0);
}
# 228 "./include/linux/rbtree_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find(const void *key, const struct rb_root *tree,
 int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;

 while (node) {
  int c = cmp(key, node);

  if (c < 0)
   node = node->rb_left;
  else if (c > 0)
   node = node->rb_right;
  else
   return node;
 }

 return ((void *)0);
}
# 256 "./include/linux/rbtree_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_first(const void *key, const struct rb_root *tree,
       int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;
 struct rb_node *match = ((void *)0);

 while (node) {
  int c = cmp(key, node);

  if (c <= 0) {
   if (!c)
    match = node;
   node = node->rb_left;
  } else if (c > 0) {
   node = node->rb_right;
  }
 }

 return match;
}
# 286 "./include/linux/rbtree_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_next_match(const void *key, struct rb_node *node,
       int (*cmp)(const void *key, const struct rb_node *))
{
 node = rb_next(node);
 if (node && cmp(key, node))
  node = ((void *)0);
 return node;
}
# 20 "./include/linux/skbuff_api.h" 2

# 1 "./include/linux/log2.h" 1
# 22 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 45 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 123 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ((n - 1) < 2 ? 0 : 63 - __builtin_clzll(n - 1)) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 150 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 22 "./include/linux/skbuff_api.h" 2


# 1 "./include/linux/bvec.h" 1
# 25 "./include/linux/skbuff_api.h" 2
# 1 "./include/linux/socket.h" 1






# 1 "./include/linux/time64.h" 1
# 8 "./include/linux/socket.h" 2
# 1 "./arch/arm64/include/generated/uapi/asm/socket.h" 1
# 1 "./include/uapi/asm-generic/socket.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/sockios.h" 1
# 1 "./include/uapi/asm-generic/sockios.h" 1
# 2 "./arch/arm64/include/generated/uapi/asm/sockios.h" 2
# 7 "./include/uapi/asm-generic/socket.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/socket.h" 2
# 9 "./include/linux/socket.h" 2





struct file;
struct pid;
struct cred;
struct socket;





struct seq_file;
extern void socket_seq_show(struct seq_file *seq);
# 35 "./include/linux/socket.h"
struct msghdr {
 void *msg_name;
 int msg_namelen;
 struct iov_iter msg_iter;






 union {
  void *msg_control;
  void *msg_control_user;
 };
 bool msg_control_is_user : 1;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
 struct kiocb *msg_iocb;
};

struct user_msghdr {
 void *msg_name;
 int msg_namelen;
 struct iovec *msg_iov;
 __kernel_size_t msg_iovlen;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
};


struct mmsghdr {
 struct user_msghdr msg_hdr;
 unsigned int msg_len;
};







struct cmsghdr {
 __kernel_size_t cmsg_len;
        int cmsg_level;
        int cmsg_type;
};
# 126 "./include/linux/socket.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
            struct cmsghdr *__cmsg)
{
 struct cmsghdr * __ptr;

 __ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) + ( ((__cmsg->cmsg_len)+sizeof(long)-1) & ~(sizeof(long)-1) ));
 if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
  return (struct cmsghdr *)0;

 return __ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
 return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
}
# 151 "./include/linux/socket.h"
struct ucred {
 __u32 pid;
 __u32 uid;
 __u32 gid;
};
# 355 "./include/linux/socket.h"
extern int move_addr_to_kernel(void *uaddr, int ulen, struct __kernel_sockaddr_storage *kaddr);
extern int put_cmsg(struct msghdr*, int level, int type, int len, void *data);

struct __kernel_timespec;
struct old_timespec32;

struct scm_timestamping_internal {
 struct timespec64 ts[3];
};

extern void put_cmsg_scm_timestamping64(struct msghdr *msg, struct scm_timestamping_internal *tss);
extern void put_cmsg_scm_timestamping(struct msghdr *msg, struct scm_timestamping_internal *tss);




extern long __sys_recvmsg(int fd, struct user_msghdr *msg,
     unsigned int flags, bool forbid_cmsg_compat);
extern long __sys_sendmsg(int fd, struct user_msghdr *msg,
     unsigned int flags, bool forbid_cmsg_compat);
extern int __sys_recvmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags,
     struct __kernel_timespec *timeout,
     struct old_timespec32 *timeout32);
extern int __sys_sendmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags,
     bool forbid_cmsg_compat);
extern long __sys_sendmsg_sock(struct socket *sock, struct msghdr *msg,
          unsigned int flags);
extern long __sys_recvmsg_sock(struct socket *sock, struct msghdr *msg,
          struct user_msghdr *umsg,
          struct sockaddr *uaddr,
          unsigned int flags);
extern int sendmsg_copy_msghdr(struct msghdr *msg,
          struct user_msghdr *umsg, unsigned flags,
          struct iovec **iov);
extern int recvmsg_copy_msghdr(struct msghdr *msg,
          struct user_msghdr *umsg, unsigned flags,
          struct sockaddr **uaddr,
          struct iovec **iov);
extern int __copy_msghdr_from_user(struct msghdr *kmsg,
       struct user_msghdr *umsg,
       struct sockaddr **save_addr,
       struct iovec **uiov, size_t *nsegs);


extern int __sys_recvfrom(int fd, void *ubuf, size_t size,
     unsigned int flags, struct sockaddr *addr,
     int *addr_len);
extern int __sys_sendto(int fd, void *buff, size_t len,
   unsigned int flags, struct sockaddr *addr,
   int addr_len);
extern int __sys_accept4_file(struct file *file, unsigned file_flags,
   struct sockaddr *upeer_sockaddr,
    int *upeer_addrlen, int flags,
    unsigned long nofile);
extern struct file *do_accept(struct file *file, unsigned file_flags,
         struct sockaddr *upeer_sockaddr,
         int *upeer_addrlen, int flags);
extern int __sys_accept4(int fd, struct sockaddr *upeer_sockaddr,
    int *upeer_addrlen, int flags);
extern int __sys_socket(int family, int type, int protocol);
extern int __sys_bind(int fd, struct sockaddr *umyaddr, int addrlen);
extern int __sys_connect_file(struct file *file, struct __kernel_sockaddr_storage *addr,
         int addrlen, int file_flags);
extern int __sys_connect(int fd, struct sockaddr *uservaddr,
    int addrlen);
extern int __sys_listen(int fd, int backlog);
extern int __sys_getsockname(int fd, struct sockaddr *usockaddr,
        int *usockaddr_len);
extern int __sys_getpeername(int fd, struct sockaddr *usockaddr,
        int *usockaddr_len);
extern int __sys_socketpair(int family, int type, int protocol,
       int *usockvec);
extern int __sys_shutdown_sock(struct socket *sock, int how);
extern int __sys_shutdown(int fd, int how);
# 26 "./include/linux/skbuff_api.h" 2
# 1 "./include/linux/ktime_api.h" 1
# 26 "./include/linux/ktime_api.h"
# 1 "./include/linux/time64_api.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 93 "./include/linux/time64_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec64_to_ns(const struct timespec64 *ts)
{

 if (ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return ((s64)~((u64)1 << 63));

 if (ts->tv_sec <= ((-((s64)~((u64)1 << 63)) - 1) / 1000000000L))
  return (-((s64)~((u64)1 << 63)) - 1);

 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 121 "./include/linux/time64_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 27 "./include/linux/ktime_api.h" 2
# 37 "./include/linux/ktime_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 70 "./include/linux/ktime_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 94 "./include/linux/ktime_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 110 "./include/linux/ktime_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 122 "./include/linux/ktime_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 147 "./include/linux/ktime_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/ktime_api.h\"; .popsection; .long 14472b - 14470b; .short 153; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 208 "./include/linux/ktime_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}

# 1 "./include/linux/timekeeping.h" 1





# 1 "./include/linux/clocksource_ids.h" 1





enum clocksource_ids {
 CSID_GENERIC = 0,
 CSID_ARM_ARCH_COUNTER,
 CSID_MAX,
};
# 7 "./include/linux/timekeeping.h" 2
# 1 "./include/linux/ktime_api.h" 1
# 8 "./include/linux/timekeeping.h" 2



void timekeeping_init(void);
extern int timekeeping_suspended;


extern void legacy_timer_tick(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 42 "./include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);







struct ktime_timestamps {
 u64 mono;
 u64 boot;
 u64 real;
};
# 247 "./include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 enum clocksource_ids cs_id;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 263 "./include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 276 "./include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);


extern void ktime_get_fast_timestamps(struct ktime_timestamps *snap);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);
# 230 "./include/linux/ktime_api.h" 2
# 27 "./include/linux/skbuff_api.h" 2

# 1 "./include/linux/netdev_features.h" 1
# 11 "./include/linux/netdev_features.h"
enum {
 NETIF_F_SG_BIT,
 NETIF_F_IP_CSUM_BIT,
 __UNUSED_NETIF_F_1,
 NETIF_F_HW_CSUM_BIT,
 NETIF_F_IPV6_CSUM_BIT,
 NETIF_F_HIGHDMA_BIT,
 NETIF_F_FRAGLIST_BIT,
 NETIF_F_HW_VLAN_CTAG_TX_BIT,
 NETIF_F_HW_VLAN_CTAG_RX_BIT,
 NETIF_F_HW_VLAN_CTAG_FILTER_BIT,
 NETIF_F_VLAN_CHALLENGED_BIT,
 NETIF_F_GSO_BIT,
 NETIF_F_LLTX_BIT,

 NETIF_F_NETNS_LOCAL_BIT,
 NETIF_F_GRO_BIT,
 NETIF_F_LRO_BIT,

     NETIF_F_GSO_SHIFT,
 NETIF_F_TSO_BIT
  = NETIF_F_GSO_SHIFT,
 NETIF_F_GSO_ROBUST_BIT,
 NETIF_F_TSO_ECN_BIT,
 NETIF_F_TSO_MANGLEID_BIT,
 NETIF_F_TSO6_BIT,
 NETIF_F_FSO_BIT,
 NETIF_F_GSO_GRE_BIT,
 NETIF_F_GSO_GRE_CSUM_BIT,
 NETIF_F_GSO_IPXIP4_BIT,
 NETIF_F_GSO_IPXIP6_BIT,
 NETIF_F_GSO_UDP_TUNNEL_BIT,
 NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT,
 NETIF_F_GSO_PARTIAL_BIT,



 NETIF_F_GSO_TUNNEL_REMCSUM_BIT,
 NETIF_F_GSO_SCTP_BIT,
 NETIF_F_GSO_ESP_BIT,
 NETIF_F_GSO_UDP_BIT,
 NETIF_F_GSO_UDP_L4_BIT,
 NETIF_F_GSO_FRAGLIST_BIT,
     NETIF_F_GSO_LAST =
  NETIF_F_GSO_FRAGLIST_BIT,

 NETIF_F_FCOE_CRC_BIT,
 NETIF_F_SCTP_CRC_BIT,
 NETIF_F_FCOE_MTU_BIT,
 NETIF_F_NTUPLE_BIT,
 NETIF_F_RXHASH_BIT,
 NETIF_F_RXCSUM_BIT,
 NETIF_F_NOCACHE_COPY_BIT,
 NETIF_F_LOOPBACK_BIT,
 NETIF_F_RXFCS_BIT,
 NETIF_F_RXALL_BIT,
 NETIF_F_HW_VLAN_STAG_TX_BIT,
 NETIF_F_HW_VLAN_STAG_RX_BIT,
 NETIF_F_HW_VLAN_STAG_FILTER_BIT,
 NETIF_F_HW_L2FW_DOFFLOAD_BIT,

 NETIF_F_HW_TC_BIT,
 NETIF_F_HW_ESP_BIT,
 NETIF_F_HW_ESP_TX_CSUM_BIT,
 NETIF_F_RX_UDP_TUNNEL_PORT_BIT,
 NETIF_F_HW_TLS_TX_BIT,
 NETIF_F_HW_TLS_RX_BIT,

 NETIF_F_GRO_HW_BIT,
 NETIF_F_HW_TLS_RECORD_BIT,
 NETIF_F_GRO_FRAGLIST_BIT,

 NETIF_F_HW_MACSEC_BIT,
 NETIF_F_GRO_UDP_FWD_BIT,

 NETIF_F_HW_HSR_TAG_INS_BIT,
 NETIF_F_HW_HSR_TAG_RM_BIT,
 NETIF_F_HW_HSR_FWD_BIT,
 NETIF_F_HW_HSR_DUP_BIT,
# 98 "./include/linux/netdev_features.h"
     NETDEV_FEATURE_COUNT
};
# 29 "./include/linux/skbuff_api.h" 2
# 1 "./include/linux/refcount_api.h" 1
# 103 "./include/linux/refcount_api.h"
struct mutex;




enum refcount_saturation_type {
 REFCOUNT_ADD_NOT_ZERO_OVF,
 REFCOUNT_ADD_OVF,
 REFCOUNT_ADD_UAF,
 REFCOUNT_SUB_UAF,
 REFCOUNT_DEC_LEAK,
};

void refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_set(refcount_t *r, int n)
{
 atomic_set(&r->refs, n);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_add_not_zero(int i, refcount_t *r, int *oldp)
{
 int old = refcount_read(r);

 do {
  if (!old)
   break;
 } while (!atomic_try_cmpxchg_relaxed(&r->refs, &old, old + i));

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_NOT_ZERO_OVF);

 return old;
}
# 175 "./include/linux/refcount_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_add_not_zero(int i, refcount_t *r)
{
 return __refcount_add_not_zero(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_add(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_add_relaxed(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(!old), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
 else if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
}
# 209 "./include/linux/refcount_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_add(int i, refcount_t *r)
{
 __refcount_add(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
{
 return __refcount_add_not_zero(1, r, oldp);
}
# 232 "./include/linux/refcount_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero(refcount_t *r)
{
 return __refcount_inc_not_zero(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_inc(refcount_t *r, int *oldp)
{
 __refcount_add(1, r, oldp);
}
# 254 "./include/linux/refcount_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_inc(refcount_t *r)
{
 __refcount_inc(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (old == i) {
  asm volatile("dmb " "ishld" : : : "memory");
  return true;
 }

 if (__builtin_expect(!!(old < 0 || old - i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_SUB_UAF);

 return false;
}
# 297 "./include/linux/refcount_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_sub_and_test(int i, refcount_t *r)
{
 return __refcount_sub_and_test(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_dec_and_test(refcount_t *r, int *oldp)
{
 return __refcount_sub_and_test(1, r, oldp);
}
# 320 "./include/linux/refcount_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_dec_and_test(refcount_t *r)
{
 return __refcount_dec_and_test(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_dec(refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(1, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old <= 1), 0))
  refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
}
# 346 "./include/linux/refcount_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_dec(refcount_t *r)
{
 __refcount_dec(r, ((void *)0));
}

extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 30 "./include/linux/skbuff_api.h" 2

# 1 "./include/linux/siphash_types.h" 1
# 20 "./include/linux/siphash_types.h"
typedef struct {
 u64 key[2];
} siphash_key_t;
# 32 "./include/linux/skbuff_api.h" 2

# 1 "./arch/arm64/include/asm/processor_types.h" 1
# 1 "./arch/arm64/include/asm/processor.h" 1
# 34 "./arch/arm64/include/asm/processor.h"
# 1 "./include/vdso/processor.h" 1
# 35 "./arch/arm64/include/asm/processor.h" 2


# 1 "./arch/arm64/include/asm/cpufeature.h" 1
# 11 "./arch/arm64/include/asm/cpufeature.h"
# 1 "./arch/arm64/include/asm/hwcap.h" 1







# 1 "./arch/arm64/include/uapi/asm/hwcap.h" 1
# 9 "./arch/arm64/include/asm/hwcap.h" 2
# 1 "./arch/arm64/include/asm/cpufeature.h" 1
# 10 "./arch/arm64/include/asm/hwcap.h" 2
# 120 "./arch/arm64/include/asm/hwcap.h"
extern unsigned int compat_elf_hwcap, compat_elf_hwcap2;


enum {
 CAP_HWCAP = 1,

 CAP_COMPAT_HWCAP,
 CAP_COMPAT_HWCAP2,

};
# 12 "./arch/arm64/include/asm/cpufeature.h" 2
# 38 "./arch/arm64/include/asm/cpufeature.h"
enum ftr_type {
 FTR_EXACT,
 FTR_LOWER_SAFE,
 FTR_HIGHER_SAFE,
 FTR_HIGHER_OR_ZERO_SAFE,
};
# 57 "./arch/arm64/include/asm/cpufeature.h"
struct arm64_ftr_bits {
 bool sign;
 bool visible;
 bool strict;
 enum ftr_type type;
 u8 shift;
 u8 width;
 s64 safe_val;
};
# 84 "./arch/arm64/include/asm/cpufeature.h"
struct arm64_ftr_override {
 u64 val;
 u64 mask;
};






struct arm64_ftr_reg {
 const char *name;
 u64 strict_mask;
 u64 user_mask;
 u64 sys_val;
 u64 user_val;
 struct arm64_ftr_override *override;
 const struct arm64_ftr_bits *ftr_bits;
};

extern struct arm64_ftr_reg arm64_ftr_reg_ctrel0;
# 329 "./arch/arm64/include/asm/cpufeature.h"
struct arm64_cpu_capabilities {
 const char *desc;
 u16 capability;
 u16 type;
 bool (*matches)(const struct arm64_cpu_capabilities *caps, int scope);
# 346 "./arch/arm64/include/asm/cpufeature.h"
 void (*cpu_enable)(const struct arm64_cpu_capabilities *cap);
 union {
  struct {
   struct midr_range midr_range;
   const struct arm64_midr_revidr {
    u32 midr_rv;
    u32 revidr_mask;
   } * const fixed_revs;
  };

  const struct midr_range *midr_range_list;
  struct {
   u32 sys_reg;
   u8 field_pos;
   u8 min_field_value;
   u8 hwcap_type;
   bool sign;
   unsigned long hwcap;
  };
 };
# 378 "./arch/arm64/include/asm/cpufeature.h"
 const struct arm64_cpu_capabilities *match_list;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpucap_default_scope(const struct arm64_cpu_capabilities *cap)
{
 return cap->type & (((u16)((((1UL))) << (1))) | ((u16)((((1UL))) << (0))) | ((u16)((((1UL))) << (2))));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
cpucap_multi_entry_cap_matches(const struct arm64_cpu_capabilities *entry,
          int scope)
{
 const struct arm64_cpu_capabilities *caps;

 for (caps = entry->match_list; caps->matches; caps++)
  if (caps->matches(caps, scope))
   return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_vhe_hyp_code(void)
{

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_nvhe_hyp_code(void)
{

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_hyp_code(void)
{
 return is_vhe_hyp_code() || is_nvhe_hyp_code();
}

extern unsigned long cpu_hwcaps[(((66) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
extern struct static_key_false cpu_hwcap_keys[66];
extern struct static_key_false arm64_const_caps_ready;



extern unsigned long boot_capabilities[((((66 + 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];




bool this_cpu_has_cap(unsigned int cap);
void cpu_set_feature(unsigned int num);
bool cpu_have_feature(unsigned int num);
unsigned long cpu_get_elf_hwcap(void);
unsigned long cpu_get_elf_hwcap2(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool system_capabilities_finalized(void)
{
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_true)) branch = !arch_static_branch(&(&arm64_const_caps_ready)->key, true); else if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_false)) branch = !arch_static_branch_jump(&(&arm64_const_caps_ready)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpus_have_cap(unsigned int num)
{
 if (num >= 66)
  return false;
 return arch_test_bit(num, cpu_hwcaps);
}
# 466 "./arch/arm64/include/asm/cpufeature.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __cpus_have_const_cap(int num)
{
 if (num >= 66)
  return false;
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[num]), struct static_key_true)) branch = arch_static_branch_jump(&(&cpu_hwcap_keys[num])->key, false); else if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[num]), struct static_key_false)) branch = arch_static_branch(&(&cpu_hwcap_keys[num])->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}
# 481 "./arch/arm64/include/asm/cpufeature.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool cpus_have_final_cap(int num)
{
 if (system_capabilities_finalized())
  return __cpus_have_const_cap(num);
 else
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/cpufeature.h\"; .popsection; .long 14472b - 14470b; .short 486; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
}
# 500 "./arch/arm64/include/asm/cpufeature.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool cpus_have_const_cap(int num)
{
 if (is_hyp_code())
  return cpus_have_final_cap(num);
 else if (system_capabilities_finalized())
  return __cpus_have_const_cap(num);
 else
  return cpus_have_cap(num);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpus_set_cap(unsigned int num)
{
 if (num >= 66) {
  ({ do {} while (0); _printk("\001" "4" "neighbour" ": " "Attempt to set an illegal CPU capability (%d >= %d)\n", num, 66); });

 } else {
  arch___set_bit(num, cpu_hwcaps);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_signed_field_width(u64 features, int field, int width)
{
 return (s64)(features << (64 - width - field)) >> (64 - width);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_signed_field(u64 features, int field)
{
 return cpuid_feature_extract_signed_field_width(features, field, 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field_width(u64 features, int field, int width)
{
 return (u64)(features << (64 - width - field)) >> (64 - width);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field(u64 features, int field)
{
 return cpuid_feature_extract_unsigned_field_width(features, field, 4);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __attribute__((__const__))
cpuid_feature_cap_perfmon_field(u64 features, int field, u64 cap)
{
 u64 val = cpuid_feature_extract_unsigned_field(features, field);
 u64 mask = ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((field) > (field + 3)) * 0l)) : (int *)8))), (field) > (field + 3), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (field)) + 1) & (~(((0ULL))) >> (64 - 1 - (field + 3)))));


 if (val == 0xf)
  val = 0;

 if (val > cap) {
  features &= ~mask;
  features |= (cap << field) & mask;
 }

 return features;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 arm64_ftr_mask(const struct arm64_ftr_bits *ftrp)
{
 return (u64)((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((ftrp->shift) > (ftrp->shift + ftrp->width - 1)) * 0l)) : (int *)8))), (ftrp->shift) > (ftrp->shift + ftrp->width - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (ftrp->shift)) + 1) & (~(((0UL))) >> (64 - 1 - (ftrp->shift + ftrp->width - 1)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 arm64_ftr_reg_user_value(const struct arm64_ftr_reg *reg)
{
 return (reg->user_val | (reg->sys_val & reg->user_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_field_width(u64 features, int field, int width, bool sign)
{
 return (sign) ?
  cpuid_feature_extract_signed_field_width(features, field, width) :
  cpuid_feature_extract_unsigned_field_width(features, field, width);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_field(u64 features, int field, bool sign)
{
 return cpuid_feature_extract_field_width(features, field, 4, sign);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arm64_ftr_value(const struct arm64_ftr_bits *ftrp, u64 val)
{
 return (s64)cpuid_feature_extract_field_width(val, ftrp->shift, ftrp->width, ftrp->sign);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64mmfr0_mixed_endian_el0(u64 mmfr0)
{
 return cpuid_feature_extract_unsigned_field(mmfr0, 8) == 0x1 ||
  cpuid_feature_extract_unsigned_field(mmfr0, 16) == 0x1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64pfr0_32bit_el1(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 4);

 return val == 0x2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64pfr0_32bit_el0(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 0);

 return val == 0x2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64pfr0_sve(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 32);

 return val > 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64pfr1_mte(u64 pfr1)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr1, 8);

 return val >= 0x2;
}

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_cpu_features(void);
void check_local_cpu_capabilities(void);

u64 read_sanitised_ftr_reg(u32 id);
u64 __read_sysreg_by_encoding(u32 sys_id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; }));
}

const struct cpumask *system_32bit_el0_cpumask(void);
extern struct static_key_false arm64_mismatched_32bit_el0;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_32bit_el0(void)
{
 u64 pfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((4) << 8) | ((0) << 5)));

 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&arm64_mismatched_32bit_el0), struct static_key_true)) branch = arch_static_branch_jump(&(&arm64_mismatched_32bit_el0)->key, false); else if (__builtin_types_compatible_p(typeof(*&arm64_mismatched_32bit_el0), struct static_key_false)) branch = arch_static_branch(&(&arm64_mismatched_32bit_el0)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }) ||
        id_aa64pfr0_32bit_el0(pfr0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_4kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      28);

 return (val >= 0x0) &&
        (val <= 0x7);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_64kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      24);

 return (val >= 0x0) &&
        (val <= 0x7);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_16kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      20);

 return (val >= 0x1) &&
        (val <= 0xf);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_mixed_endian(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      8);

 return val == 0x1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool system_supports_fpsimd(void)
{
 return !cpus_have_const_cap(23);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_uses_hw_pan(void)
{
 return 1 &&
  cpus_have_const_cap(25);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_uses_ttbr0_pan(void)
{
 return 0 &&
  !system_uses_hw_pan();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool system_supports_sve(void)
{
 return 1 &&
  cpus_have_const_cap(42);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool system_supports_cnp(void)
{
 return 1 &&
  cpus_have_const_cap(10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_address_auth(void)
{
 return 1 &&
  cpus_have_const_cap(3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_generic_auth(void)
{
 return 1 &&
  cpus_have_const_cap(17);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_has_full_ptr_auth(void)
{
 return system_supports_address_auth() && system_supports_generic_auth();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool system_uses_irq_prio_masking(void)
{
 return 0 &&
        cpus_have_const_cap(20);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_mte(void)
{
 return 1 &&
  cpus_have_const_cap(36);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_has_prio_mask_debugging(void)
{
 return 0 &&
        system_uses_irq_prio_masking();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_bti(void)
{
 return 1 && cpus_have_const_cap(0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_tlb_range(void)
{
 return 1 &&
  cpus_have_const_cap(31);
}

extern int do_emulate_mrs(struct pt_regs *regs, u32 sys_reg, u32 rt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 id_aa64mmfr0_parange_to_phys_shift(int parange)
{
 switch (parange) {
 case 0x0: return 32;
 case 0x1: return 36;
 case 0x2: return 40;
 case 0x3: return 42;
 case 0x4: return 44;
 case 0x5: return 48;
 case 0x6: return 52;







 default: return 48;
 }
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_has_hw_af(void)
{
 u64 mmfr1;

 if (!1)
  return false;

 mmfr1 = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
 return cpuid_feature_extract_unsigned_field(mmfr1,
      0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_has_pan(void)
{
 u64 mmfr1 = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
 return cpuid_feature_extract_unsigned_field(mmfr1,
          20);
}



extern bool cpu_has_amu_feat(int cpu);
# 837 "./arch/arm64/include/asm/cpufeature.h"
extern int get_cpu_with_amu_feat(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int get_vmid_bits(u64 mmfr1)
{
 int vmid_bits;

 vmid_bits = cpuid_feature_extract_unsigned_field(mmfr1,
      4);
 if (vmid_bits == 2)
  return 16;





 return 8;
}

extern struct arm64_ftr_override id_aa64mmfr1_override;
extern struct arm64_ftr_override id_aa64pfr1_override;
extern struct arm64_ftr_override id_aa64isar1_override;

u32 get_kvm_ipa_limit(void);
void dump_cpu_features(void);
# 38 "./arch/arm64/include/asm/processor.h" 2
# 1 "./arch/arm64/include/asm/hw_breakpoint.h" 1
# 11 "./arch/arm64/include/asm/hw_breakpoint.h"
# 1 "./arch/arm64/include/asm/virt.h" 1
# 54 "./arch/arm64/include/asm/virt.h"
# 1 "./arch/arm64/include/asm/ptrace.h" 1
# 13 "./arch/arm64/include/asm/ptrace.h"
# 1 "./arch/arm64/include/uapi/asm/ptrace.h" 1
# 26 "./arch/arm64/include/uapi/asm/ptrace.h"
# 1 "./arch/arm64/include/uapi/asm/sve_context.h" 1
# 27 "./arch/arm64/include/uapi/asm/ptrace.h" 2
# 88 "./arch/arm64/include/uapi/asm/ptrace.h"
struct user_pt_regs {
 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;
};

struct user_fpsimd_state {
 __uint128_t vregs[32];
 __u32 fpsr;
 __u32 fpcr;
 __u32 __reserved[2];
};

struct user_hwdebug_state {
 __u32 dbg_info;
 __u32 pad;
 struct {
  __u64 addr;
  __u32 ctrl;
  __u32 pad;
 } dbg_regs[16];
};



struct user_sve_header {
 __u32 size;
 __u32 max_size;
 __u16 vl;
 __u16 max_vl;
 __u16 flags;
 __u16 __reserved;
};
# 250 "./arch/arm64/include/uapi/asm/ptrace.h"
struct user_pac_mask {
 __u64 data_mask;
 __u64 insn_mask;
};



struct user_pac_address_keys {
 __uint128_t apiakey;
 __uint128_t apibkey;
 __uint128_t apdakey;
 __uint128_t apdbkey;
};

struct user_pac_generic_keys {
 __uint128_t apgakey;
};
# 14 "./arch/arm64/include/asm/ptrace.h" 2
# 149 "./arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long compat_psr_to_pstate(const unsigned long psr)
{
 unsigned long pstate;

 pstate = psr & ~0x00200000;

 if (psr & 0x00200000)
  pstate |= 0x01000000;

 return pstate;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pstate_to_compat_psr(const unsigned long pstate)
{
 unsigned long psr;

 psr = pstate & ~0x01000000;

 if (pstate & 0x01000000)
  psr |= 0x00200000;

 return psr;
}






struct pt_regs {
 union {
  struct user_pt_regs user_regs;
  struct {
   u64 regs[31];
   u64 sp;
   u64 pc;
   u64 pstate;
  };
 };
 u64 orig_x0;




 s32 syscallno;
 u32 unused2;

 u64 sdei_ttbr1;

 u64 pmr_save;
 u64 stackframe[2];


 u64 lockdep_hardirqs;
 u64 exit_rcu;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_syscall(struct pt_regs const *regs)
{
 return regs->syscallno != (-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void forget_syscall(struct pt_regs *regs)
{
 regs->syscallno = (-1);
}
# 248 "./arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 if ((((regs)->pstate & (0x00000010 | 0x0000000f)) == (0x00000010 | 0x00000000)))
  return regs->regs[13];
 return regs->sp;
}

extern int regs_query_register_offset(const char *name);
extern unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n);
# 268 "./arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 regs_get_register(struct pt_regs *regs, unsigned int offset)
{
 u64 val = 0;

 ({ int __ret_warn_on = !!(offset & 7); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 272; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });

 offset >>= 3;
 switch (offset) {
 case 0 ... 30:
  val = regs->regs[offset];
  break;
 case __builtin_offsetof(struct pt_regs, sp) >> 3:
  val = regs->sp;
  break;
 case __builtin_offsetof(struct pt_regs, pc) >> 3:
  val = regs->pc;
  break;
 case __builtin_offsetof(struct pt_regs, pstate) >> 3:
  val = regs->pstate;
  break;
 default:
  val = 0;
 }

 return val;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pt_regs_read_reg(const struct pt_regs *regs, int r)
{
 return (r == 31) ? 0 : regs->regs[r];
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pt_regs_write_reg(struct pt_regs *regs, int r,
         unsigned long val)
{
 if (r != 31)
  regs->regs[r] = val;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_return_value(struct pt_regs *regs)
{
 unsigned long val = regs->regs[0];






 if ((((regs)->pstate & (0x00000010 | 0x0000000f)) == (0x00000010 | 0x00000000)))
  val = sign_extend64(val, 31);

 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_return_value(struct pt_regs *regs, unsigned long rc)
{
 regs->regs[0] = rc;
}
# 354 "./arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_kernel_argument(struct pt_regs *regs,
           unsigned int n)
{

 if (n < 8)
  return pt_regs_read_reg(regs, n);
 return 0;
}


struct task_struct;
int valid_user_regs(struct user_pt_regs *regs, struct task_struct *task);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return regs->pc;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void instruction_pointer_set(struct pt_regs *regs,
  unsigned long val)
{
 regs->pc = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return regs->regs[29];
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void procedure_link_pointer_set(struct pt_regs *regs,
        unsigned long val)
{
 ((regs)->regs[30]) = val;
}

extern unsigned long profile_pc(struct pt_regs *regs);
# 55 "./arch/arm64/include/asm/virt.h" 2
# 1 "./arch/arm64/include/asm/sections.h" 1







# 1 "./include/asm-generic/sections.h" 1
# 35 "./include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];
extern char __start_once[], __end_once[];


extern char __ctors_start[], __ctors_end[];


extern char __start_opd[], __end_opd[];


extern char __noinstr_text_start[], __noinstr_text_end[];

extern const void __nosave_begin, __nosave_end;
# 78 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 95 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 112 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 126 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 141 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_core_data(unsigned long addr)
{
 return addr >= (unsigned long)_sdata &&
        addr < (unsigned long)_edata;
}
# 155 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_rodata(unsigned long addr)
{
 return addr >= (unsigned long)__start_rodata &&
        addr < (unsigned long)__end_rodata;
}
# 169 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_inittext(unsigned long addr)
{
 return addr >= (unsigned long)_sinittext &&
        addr < (unsigned long)_einittext;
}
# 184 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __is_kernel_text(unsigned long addr)
{
 return addr >= (unsigned long)_stext &&
        addr < (unsigned long)_etext;
}
# 198 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __is_kernel(unsigned long addr)
{
 return addr >= (unsigned long)_stext &&
        addr < (unsigned long)_end;
}
# 9 "./arch/arm64/include/asm/sections.h" 2

extern char __alt_instructions[], __alt_instructions_end[];
extern char __hibernate_exit_text_start[], __hibernate_exit_text_end[];
extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
extern char __hyp_text_start[], __hyp_text_end[];
extern char __hyp_rodata_start[], __hyp_rodata_end[];
extern char __hyp_reloc_begin[], __hyp_reloc_end[];
extern char __hyp_bss_start[], __hyp_bss_end[];
extern char __idmap_text_start[], __idmap_text_end[];
extern char __initdata_begin[], __initdata_end[];
extern char __inittext_begin[], __inittext_end[];
extern char __exittext_begin[], __exittext_end[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __mmuoff_data_start[], __mmuoff_data_end[];
extern char __entry_tramp_text_start[], __entry_tramp_text_end[];
extern char __relocate_new_kernel_start[], __relocate_new_kernel_end[];
# 56 "./arch/arm64/include/asm/virt.h" 2
# 68 "./arch/arm64/include/asm/virt.h"
extern u32 __boot_cpu_mode[2];



void __hyp_set_vectors(phys_addr_t phys_vector_base);
void __hyp_reset_vectors(void);

extern struct static_key_false kvm_protected_mode_initialized;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_hyp_mode_available(void)
{




 if (1 &&
     ({ bool branch; if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_true)) branch = !arch_static_branch(&(&kvm_protected_mode_initialized)->key, true); else if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_false)) branch = !arch_static_branch_jump(&(&kvm_protected_mode_initialized)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }))
  return true;

 return (__boot_cpu_mode[0] == (0xe12) &&
  __boot_cpu_mode[1] == (0xe12));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_hyp_mode_mismatched(void)
{




 if (1 &&
     ({ bool branch; if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_true)) branch = !arch_static_branch(&(&kvm_protected_mode_initialized)->key, true); else if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_false)) branch = !arch_static_branch_jump(&(&kvm_protected_mode_initialized)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }))
  return false;

 return __boot_cpu_mode[0] != __boot_cpu_mode[1];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_in_hyp_mode(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "CurrentEL" : "=r" (__val)); __val; }) == (2 << 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool has_vhe(void)
{




 if (is_vhe_hyp_code())
  return true;
 else if (is_nvhe_hyp_code())
  return false;
 else
  return cpus_have_final_cap(32);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_protected_kvm_enabled(void)
{
 if (is_vhe_hyp_code())
  return false;
 else
  return cpus_have_final_cap(34);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_hyp_nvhe(void)
{
 return is_hyp_mode_available() && !is_kernel_in_hyp_mode();
}
# 12 "./arch/arm64/include/asm/hw_breakpoint.h" 2

struct arch_hw_breakpoint_ctrl {
 u32 __reserved : 19,
 len : 8,
 type : 2,
 privilege : 2,
 enabled : 1;
};

struct arch_hw_breakpoint {
 u64 address;
 u64 trigger;
 struct arch_hw_breakpoint_ctrl ctrl;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 encode_ctrl_reg(struct arch_hw_breakpoint_ctrl ctrl)
{
 u32 val = (ctrl.len << 5) | (ctrl.type << 3) | (ctrl.privilege << 1) |
  ctrl.enabled;

 if (is_kernel_in_hyp_mode() && ctrl.privilege == 1)
  val |= (1 << 13);

 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void decode_ctrl_reg(u32 reg,
       struct arch_hw_breakpoint_ctrl *ctrl)
{
 ctrl->enabled = reg & 0x1;
 reg >>= 1;
 ctrl->privilege = reg & 0x3;
 reg >>= 2;
 ctrl->type = reg & 0x3;
 reg >>= 2;
 ctrl->len = reg & 0xff;
}
# 107 "./arch/arm64/include/asm/hw_breakpoint.h"
struct task_struct;
struct notifier_block;
struct perf_event_attr;
struct perf_event;
struct pmu;

extern int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl ctrl,
      int *gen_len, int *gen_type, int *offset);
extern int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_arch_parse(struct perf_event *bp,
        const struct perf_event_attr *attr,
        struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
        unsigned long val, void *data);

extern int arch_install_hw_breakpoint(struct perf_event *bp);
extern void arch_uninstall_hw_breakpoint(struct perf_event *bp);
extern void hw_breakpoint_pmu_read(struct perf_event *bp);
extern int hw_breakpoint_slots(int type);


extern void hw_breakpoint_thread_switch(struct task_struct *next);
extern void ptrace_hw_copy_thread(struct task_struct *task);
# 140 "./arch/arm64/include/asm/hw_breakpoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_num_brps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      12);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_num_wrps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      20);
}
# 39 "./arch/arm64/include/asm/processor.h" 2
# 1 "./arch/arm64/include/asm/kasan.h" 1







# 1 "./arch/arm64/include/asm/memory.h" 1
# 13 "./arch/arm64/include/asm/memory.h"
# 1 "./include/linux/mm_api_kasan.h" 1






# 1 "./include/linux/mm_types.h" 1






# 1 "./include/linux/mm_types_task.h" 1
# 11 "./include/linux/mm_types_task.h"
# 1 "./include/generated/bounds.h" 1
# 12 "./include/linux/mm_types_task.h" 2
# 33 "./include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};





enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};
extern __typeof__(struct task_rss_stat) per_task__rss_stat;



struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};


struct tlbflush_unmap_batch {
# 87 "./include/linux/mm_types_task.h"
};
# 8 "./include/linux/mm_types.h" 2



# 1 "./include/linux/auxvec.h" 1




# 1 "./include/uapi/linux/auxvec.h" 1




# 1 "./arch/arm64/include/uapi/asm/auxvec.h" 1
# 6 "./include/uapi/linux/auxvec.h" 2
# 6 "./include/linux/auxvec.h" 2
# 12 "./include/linux/mm_types.h" 2


# 1 "./include/linux/rwsem_types.h" 1
# 41 "./include/linux/rwsem_types.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;

 struct optimistic_spin_queue osq;

 raw_spinlock_t wait_lock;
 struct list_head wait_list;






};
# 15 "./include/linux/mm_types.h" 2

# 1 "./include/linux/uprobes.h" 1
# 15 "./include/linux/uprobes.h"
# 1 "./include/linux/rbtree.h" 1
# 16 "./include/linux/uprobes.h" 2

# 1 "./include/linux/wait.h" 1
# 18 "./include/linux/uprobes.h" 2

struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;
struct pt_regs;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};
# 143 "./include/linux/uprobes.h"
struct uprobes_state {
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobes_init(void)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool add)
{
 return -38;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uprobe_mmap(struct vm_area_struct *vma)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_start_dup_mmap(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_end_dup_mmap(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_notify_resume(struct pt_regs *regs)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uprobe_deny_signal(void)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_free_utask(struct task_struct *t)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_copy_process(struct task_struct *t, unsigned long flags)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_clear_state(struct mm_struct *mm)
{
}
# 17 "./include/linux/mm_types.h" 2


# 1 "./include/linux/page-flags-layout.h" 1




# 1 "./include/linux/numa.h" 1
# 10 "./include/linux/numa.h"
# 1 "./arch/arm64/include/asm/sparsemem.h" 1
# 11 "./include/linux/numa.h" 2


int numa_map_to_online_node(int node);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memory_add_physaddr_to_nid(u64 start)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(true); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ do {} while (0); _printk("\001" "6" "neighbour" ": " "Unknown online node for memory at 0x%llx, assuming node 0\n", start); }); } __builtin_expect(!!(__ret_do_once), 0); });

 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int phys_to_target_node(u64 start)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(true); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ do {} while (0); _printk("\001" "6" "neighbour" ": " "Unknown target node for memory at 0x%llx, assuming node 0\n", start); }); } __builtin_expect(!!(__ret_do_once), 0); });

 return 0;
}
# 6 "./include/linux/page-flags-layout.h" 2
# 20 "./include/linux/mm_types.h" 2
# 1 "./include/linux/page-flags-defs.h" 1
# 91 "./include/linux/page-flags-defs.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,





 PG_hwpoison,






 PG_arch_2,




 __NR_PAGEFLAGS,

 PG_readahead = PG_reclaim,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,

 PG_xen_remapped = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_workingset,







 PG_has_hwpoisoned = PG_mappedtodisk,



 PG_isolated = PG_reclaim,


 PG_reported = PG_uptodate,
};
# 21 "./include/linux/mm_types.h" 2

# 1 "./arch/arm64/include/asm/mmu.h" 1







# 1 "./arch/arm64/include/asm/pgtable_types.h" 1
# 14 "./arch/arm64/include/asm/pgtable_types.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 15 "./arch/arm64/include/asm/pgtable_types.h" 2

struct page;
typedef struct page *pgtable_t;

typedef u64 pteval_t;
typedef u64 pmdval_t;
typedef u64 pudval_t;
typedef u64 p4dval_t;
typedef u64 pgdval_t;




typedef struct { pteval_t pte; } pte_t;




typedef struct { pmdval_t pmd; } pmd_t;





typedef struct { pudval_t pud; } pud_t;




typedef struct { pgdval_t pgd; } pgd_t;



typedef struct { pteval_t pgprot; } pgprot_t;
# 57 "./arch/arm64/include/asm/pgtable_types.h"
# 1 "./include/asm-generic/pgtable-nop4d.h" 1








typedef struct { pgd_t pgd; } p4d_t;
# 21 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_bad(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_present(pgd_t pgd) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgd_clear(pgd_t *pgd) { }
# 35 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
{
 return (p4d_t *)pgd;
}
# 58 "./arch/arm64/include/asm/pgtable_types.h" 2


# 1 "./arch/arm64/include/asm/pgtable-prot.h" 1







# 1 "./arch/arm64/include/asm/memory.h" 1
# 9 "./arch/arm64/include/asm/pgtable-prot.h" 2
# 1 "./arch/arm64/include/asm/pgtable-hwdef.h" 1







# 1 "./arch/arm64/include/asm/memory.h" 1
# 9 "./arch/arm64/include/asm/pgtable-hwdef.h" 2
# 1 "./arch/arm64/include/asm/pgtable_types.h" 1
# 10 "./arch/arm64/include/asm/pgtable-hwdef.h" 2
# 10 "./arch/arm64/include/asm/pgtable-prot.h" 2
# 32 "./arch/arm64/include/asm/pgtable-prot.h"
# 1 "./arch/arm64/include/asm/pgtable_types.h" 1
# 33 "./arch/arm64/include/asm/pgtable-prot.h" 2

extern bool arm64_use_ng_mappings;
# 61 "./arch/arm64/include/asm/pgtable_types.h" 2
# 9 "./arch/arm64/include/asm/mmu.h" 2
# 1 "./arch/arm64/include/asm/page.h" 1
# 36 "./arch/arm64/include/asm/page.h"
# 1 "./include/linux/personality.h" 1




# 1 "./include/uapi/linux/personality.h" 1
# 11 "./include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 42 "./include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 6 "./include/linux/personality.h" 2
# 37 "./arch/arm64/include/asm/page.h" 2



struct page;
struct vm_area_struct;

extern void copy_page(void *to, const void *from);
extern void clear_page(void *to);

void copy_user_highpage(struct page *to, struct page *from,
   unsigned long vaddr, struct vm_area_struct *vma);


void copy_highpage(struct page *to, struct page *from);


struct page *alloc_zeroed_user_highpage_movable(struct vm_area_struct *vma,
      unsigned long vaddr);


void tag_clear_highpage(struct page *to);





int pfn_is_map_memory(unsigned long pfn);

# 1 "./arch/arm64/include/asm/memory.h" 1
# 66 "./arch/arm64/include/asm/page.h" 2



# 1 "./include/asm-generic/getorder.h" 1
# 29 "./include/asm-generic/getorder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - 12;

  if (size < (1UL << 12))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? (((size) - 1) < 2 ? 0 : 63 - __builtin_clzll((size) - 1)) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1;
 }

 size--;
 size >>= 12;



 return fls64(size);

}
# 70 "./arch/arm64/include/asm/page.h" 2
# 10 "./arch/arm64/include/asm/mmu.h" 2
# 20 "./arch/arm64/include/asm/mmu.h"
# 1 "./include/linux/refcount.h" 1
# 21 "./arch/arm64/include/asm/mmu.h" 2

typedef struct {
 atomic64_t id;

 void *sigpage;

 refcount_t pinned;
 void *vdso;
 unsigned long flags;
} mm_context_t;
# 60 "./arch/arm64/include/asm/mmu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arm64_kernel_unmapped_at_el0(void)
{
 return cpus_have_const_cap(43);
}

struct mm_struct;

extern void arm64_memblock_init(void);
extern void paging_init(void);
extern void bootmem_init(void);
extern void *early_io_map(phys_addr_t phys, unsigned long virt);
extern void init_mem_pgprot(void);
extern void create_pgd_mapping(struct mm_struct *mm, phys_addr_t phys,
          unsigned long virt, phys_addr_t size,
          pgprot_t prot, bool page_mappings_only);
extern void *fixmap_remap_fdt(phys_addr_t dt_phys, int *size, pgprot_t prot);
extern void mark_linear_text_alias_ro(void);
extern bool kaslr_requires_kpti(void);
# 23 "./include/linux/mm_types.h" 2








struct address_space;
struct mem_cgroup;
# 73 "./include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   unsigned long pp_magic;
   struct page_pool *pp;
   unsigned long _pp_mapping_pad;
   unsigned long dma_addr;
   union {




    unsigned long dma_addr_upper;




    atomic_long_t pp_frag_count;
   };
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;

     int pages;



    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
   unsigned int compound_nr;
  };
  struct {
   unsigned long _compound_pad_1;
   atomic_t hpage_pinned_refcount;

   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };



   spinlock_t ptl;

  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
# 191 "./include/linux/mm_types.h"
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;


 unsigned long memcg_data;
# 241 "./include/linux/mm_types.h"
} __attribute__((__aligned__(2 * sizeof(unsigned long))));
# 267 "./include/linux/mm_types.h"
struct folio {

 union {
  struct {

   unsigned long flags;
   struct list_head lru;
   struct address_space *mapping;
   unsigned long index;
   void *private;
   atomic_t _mapcount;
   atomic_t _refcount;

   unsigned long memcg_data;


  };
  struct page page;
 };
};

_Static_assert(sizeof(struct page) == sizeof(struct folio), "sizeof(struct page) == sizeof(struct folio)");


_Static_assert(__builtin_offsetof(struct page, flags) == __builtin_offsetof(struct folio, flags), "offsetof(struct page, flags) == offsetof(struct folio, flags)");
_Static_assert(__builtin_offsetof(struct page, lru) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, lru) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, compound_head) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, compound_head) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, index) == __builtin_offsetof(struct folio, index), "offsetof(struct page, index) == offsetof(struct folio, index)");
_Static_assert(__builtin_offsetof(struct page, private) == __builtin_offsetof(struct folio, private), "offsetof(struct page, private) == offsetof(struct folio, private)");
_Static_assert(__builtin_offsetof(struct page, _mapcount) == __builtin_offsetof(struct folio, _mapcount), "offsetof(struct page, _mapcount) == offsetof(struct folio, _mapcount)");
_Static_assert(__builtin_offsetof(struct page, _refcount) == __builtin_offsetof(struct folio, _refcount), "offsetof(struct page, _refcount) == offsetof(struct folio, _refcount)");

_Static_assert(__builtin_offsetof(struct page, memcg_data) == __builtin_offsetof(struct folio, memcg_data), "offsetof(struct page, memcg_data) == offsetof(struct folio, memcg_data)");



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *folio_mapcount_ptr(struct folio *folio)
{
 struct page *tail = &folio->page + 1;
 return &tail->compound_mapcount;
}
# 326 "./include/linux/mm_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *folio_get_private(struct folio *folio)
{
 return folio->private;
}

struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 374 "./include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 550 "./include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;





 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;


 atomic_long_t swap_readahead_info;





 struct mempolicy *vm_policy;

 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 650 "./include/linux/mm_types.h"
  atomic_t membarrier_state;
# 662 "./include/linux/mm_types.h"
  atomic_t mm_users;
# 671 "./include/linux/mm_types.h"
  atomic_t mm_count;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;
# 693 "./include/linux/mm_types.h"
  struct rw_semaphore mmap_lock;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;






  seqcount_t write_protect_seq;

  spinlock_t arg_lock;

  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(2 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 756 "./include/linux/mm_types.h"
  struct task_struct *owner;

  struct user_namespace *user_ns;


  struct file *exe_file;

  struct mmu_notifier_subscriptions *notifier_subscriptions;
# 774 "./include/linux/mm_types.h"
  unsigned long numa_next_scan;


  unsigned long numa_scan_offset;


  int numa_scan_seq;






  atomic_t tlb_flush_pending;




  struct uprobes_state uprobes_state;




  atomic_long_t hugetlb_usage;

  struct work_struct async_put_work;


  u32 pasid;

 } ;





 unsigned long cpu_bitmap[];
};

struct vm_fault;






typedef unsigned int vm_fault_t;
# 847 "./include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 887 "./include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 959 "./include/linux/mm_types.h"
enum fault_flag {
 FAULT_FLAG_WRITE = 1 << 0,
 FAULT_FLAG_MKWRITE = 1 << 1,
 FAULT_FLAG_ALLOW_RETRY = 1 << 2,
 FAULT_FLAG_RETRY_NOWAIT = 1 << 3,
 FAULT_FLAG_KILLABLE = 1 << 4,
 FAULT_FLAG_TRIED = 1 << 5,
 FAULT_FLAG_USER = 1 << 6,
 FAULT_FLAG_REMOTE = 1 << 7,
 FAULT_FLAG_INSTRUCTION = 1 << 8,
 FAULT_FLAG_INTERRUPTIBLE = 1 << 9,
};
# 991 "./include/linux/mm_types.h"
struct vm_fault {
 const struct {
  struct vm_area_struct *vma;
  gfp_t gfp_mask;
  unsigned long pgoff;
  unsigned long address;
 };
 enum fault_flag flags;

 pmd_t *pmd;

 pud_t *pud;


 union {
  pte_t orig_pte;
  pmd_t orig_pmd;


 };

 struct page *cow_page;
 struct page *page;





 pte_t *pte;



 spinlock_t *ptl;



 pgtable_t prealloc_pte;






};
# 1043 "./include/linux/mm_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int compound_order(struct page *page)
{

 if (!((1UL << PG_head) & page->flags))
  return 0;
 return page[1].compound_order;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long compound_nr(struct page *page)
{
 if (!((1UL << PG_head) & page->flags))
  return 1;
 return page[1].compound_nr;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_size(struct page *page)
{
 return ((1UL) << 12) << compound_order(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int page_shift(struct page *page)
{
 return 12 + compound_order(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_pincount_ptr(struct page *page)
{
 return &page[2].hpage_pinned_refcount;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_private(struct page *page, unsigned long private)
{
 page->private = private;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}
# 8 "./include/linux/mm_api_kasan.h" 2
# 46 "./include/linux/mm_api_kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 page_kasan_tag(const struct page *page)
{
 return 0xff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_set(struct page *page, u8 tag) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_reset(struct page *page) { }
# 14 "./arch/arm64/include/asm/memory.h" 2

# 1 "./include/linux/sizes.h" 1
# 16 "./arch/arm64/include/asm/memory.h" 2
# 141 "./arch/arm64/include/asm/memory.h"
# 1 "./include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

void dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 142 "./arch/arm64/include/asm/memory.h" 2





extern u64 vabits_actual;

extern s64 memstart_addr;




extern u64 kimage_vaddr;


extern u64 kimage_voffset;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kaslr_offset(void)
{
 return kimage_vaddr - ((((((-((((1UL))) << ((((48))) - 1)))) + (0x08000000))) + (0x08000000)));
}
# 204 "./arch/arm64/include/asm/memory.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const void *__tag_set(const void *addr, u8 tag)
{
 u64 __addr = (u64)addr & ~0UL;
 return (const void *)(__addr | 0UL);
}
# 268 "./arch/arm64/include/asm/memory.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t virt_to_phys(const volatile void *x)
{
 return ({ phys_addr_t __x = (phys_addr_t)(((unsigned long)(x))); (((u64)(__x) - ((-((((1UL))) << ((48)))))) < (((-((((1UL))) << ((((48))) - 1)))) - ((-((((1UL))) << ((48))))))) ? (((__x) - ((-((((1UL))) << ((48)))))) + ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) : ((__x) - kimage_voffset); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *phys_to_virt(phys_addr_t x)
{
 return (void *)(((unsigned long)((x) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 323 "./arch/arm64/include/asm/memory.h"
void dump_mem_limit(void);
# 337 "./arch/arm64/include/asm/memory.h"
# 1 "./include/asm-generic/memory_model.h" 1
# 338 "./arch/arm64/include/asm/memory.h" 2
# 9 "./arch/arm64/include/asm/kasan.h" 2
# 1 "./arch/arm64/include/asm/mte-kasan.h" 1







# 1 "./arch/arm64/include/asm/mte-def.h" 1
# 9 "./arch/arm64/include/asm/mte-kasan.h" 2
# 23 "./arch/arm64/include/asm/mte-kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 mte_get_ptr_tag(void *ptr)
{

 u8 tag = 0xF0 | (u8)(((u64)(ptr)) >> 56);

 return tag;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 mte_get_mem_tag(void *addr)
{
 asm(".arch " "armv8.5-a" "\n" ".arch_extension memtag\n" "ldg %0, [%0]"
  : "+r" (addr));

 return mte_get_ptr_tag(addr);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 mte_get_random_tag(void)
{
 void *addr;

 asm(".arch " "armv8.5-a" "\n" ".arch_extension memtag\n" "irg %0, %0"
  : "=r" (addr));

 return mte_get_ptr_tag(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __stg_post(u64 p)
{
 asm volatile(".arch " "armv8.5-a" "\n" ".arch_extension memtag\n" "stg %0, [%0], #16"
       : "+r"(p)
       :
       : "memory");
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __stzg_post(u64 p)
{
 asm volatile(".arch " "armv8.5-a" "\n" ".arch_extension memtag\n" "stzg %0, [%0], #16"
       : "+r"(p)
       :
       : "memory");
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dc_gva(u64 p)
{
 asm volatile(".arch " "armv8.5-a" "\n" ".arch_extension memtag\n" "dc gva, %0" : : "r"(p) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dc_gzva(u64 p)
{
 asm volatile(".arch " "armv8.5-a" "\n" ".arch_extension memtag\n" "dc gzva, %0" : : "r"(p) : "memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mte_set_mem_tag_range(void *addr, size_t size, u8 tag,
      bool init)
{
 u64 curr, mask, dczid_bs, end1, end2, end3;


 dczid_bs = 4ul << (({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((3) << 16) | ((0) << 12) | ((0) << 8) | ((7) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; }) & 0xf);

 curr = (u64)__tag_set(addr, tag);
 mask = dczid_bs - 1;

 end1 = curr | mask;
 end3 = curr + size;

 end2 = end3 & ~mask;
# 124 "./arch/arm64/include/asm/mte-kasan.h"
 if (init)
  do { if (size >= 2 * dczid_bs) { do { curr = __stzg_post(curr); } while (curr < end1); do { __dc_gzva(curr); curr += dczid_bs; } while (curr < end2); } while (curr < end3) curr = __stzg_post(curr); } while (0);
 else
  do { if (size >= 2 * dczid_bs) { do { curr = __stg_post(curr); } while (curr < end1); do { __dc_gva(curr); curr += dczid_bs; } while (curr < end2); } while (curr < end3) curr = __stg_post(curr); } while (0);

}

void mte_enable_kernel_sync(void);
void mte_enable_kernel_async(void);
void mte_enable_kernel_asymm(void);
# 10 "./arch/arm64/include/asm/kasan.h" 2
# 43 "./arch/arm64/include/asm/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_copy_shadow(pgd_t *pgdir) { }
# 40 "./arch/arm64/include/asm/processor.h" 2


# 1 "./arch/arm64/include/asm/pointer_auth.h" 1






# 1 "./include/uapi/linux/prctl.h" 1
# 134 "./include/uapi/linux/prctl.h"
struct prctl_mm_map {
 __u64 start_code;
 __u64 end_code;
 __u64 start_data;
 __u64 end_data;
 __u64 start_brk;
 __u64 brk;
 __u64 start_stack;
 __u64 arg_start;
 __u64 arg_end;
 __u64 env_start;
 __u64 env_end;
 __u64 *auxv;
 __u32 auxv_size;
 __u32 exe_fd;
};
# 8 "./arch/arm64/include/asm/pointer_auth.h" 2
# 1 "./include/linux/random.h" 1
# 14 "./include/linux/random.h"
# 1 "./include/linux/once.h" 1







bool __do_once_start(bool *done, unsigned long *flags);
void __do_once_done(bool *done, struct static_key_true *once_key,
      unsigned long *flags, struct module *mod);
# 15 "./include/linux/random.h" 2

# 1 "./include/uapi/linux/random.h" 1
# 12 "./include/uapi/linux/random.h"
# 1 "./include/uapi/linux/ioctl.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 1
# 1 "./include/asm-generic/ioctl.h" 1




# 1 "./include/uapi/asm-generic/ioctl.h" 1
# 6 "./include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 2 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 2
# 6 "./include/uapi/linux/ioctl.h" 2
# 13 "./include/uapi/linux/random.h" 2
# 1 "./include/linux/irqnr.h" 1




# 1 "./include/uapi/linux/irqnr.h" 1
# 6 "./include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 14 "./include/uapi/linux/random.h" 2
# 41 "./include/uapi/linux/random.h"
struct rand_pool_info {
 int entropy_count;
 int buf_size;
 __u32 buf[0];
};
# 17 "./include/linux/random.h" 2

struct random_ready_callback {
 struct list_head list;
 void (*func)(struct random_ready_callback *rdy);
 struct module *owner;
};

extern void add_device_randomness(const void *, unsigned int);
extern void add_bootloader_randomness(const void *, unsigned int);
# 34 "./include/linux/random.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_latent_entropy(void) {}


extern void add_input_randomness(unsigned int type, unsigned int code,
     unsigned int value) ;
extern void add_interrupt_randomness(int irq, int irq_flags) ;

extern void get_random_bytes(void *buf, int nbytes);
extern int wait_for_random_bytes(void);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) rand_initialize(void);
extern bool rng_is_initialized(void);
extern int add_random_ready_callback(struct random_ready_callback *rdy);
extern void del_random_ready_callback(struct random_ready_callback *rdy);
extern int __attribute__((__warn_unused_result__)) get_random_bytes_arch(void *buf, int nbytes);


extern const struct file_operations random_fops, urandom_fops;


u32 get_random_u32(void);
u64 get_random_u64(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int get_random_int(void)
{
 return get_random_u32();
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_random_long(void)
{

 return get_random_u64();



}
# 82 "./include/linux/random.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_random_canary(void)
{
 unsigned long val = get_random_long();

 return val & 0xffffffffffffff00UL;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_bytes_wait(void *buf, int nbytes)
{
 int ret = wait_for_random_bytes();
 get_random_bytes(buf, nbytes);
 return ret;
}
# 106 "./include/linux/random.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_u32_wait(u32 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u32(); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_u64_wait(u64 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u64(); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_int_wait(int *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_int(); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_long_wait(long *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_long(); return 0; }


unsigned long randomize_page(unsigned long start, unsigned long range);






# 1 "./include/linux/prandom.h" 1
# 15 "./include/linux/prandom.h"
u32 prandom_u32(void);
void prandom_bytes(void *buf, size_t nbytes);
void prandom_seed(u32 seed);
void prandom_reseed_late(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) net_rand_noise;
# 60 "./include/linux/prandom.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prandom_u32_add_noise(unsigned long a, unsigned long b,
      unsigned long c, unsigned long d)
{




 a ^= ({ typeof(net_rand_noise) pscr_ret__; do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(net_rand_noise)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
 ( a += b, b = rol64(b, 13), c += d, d = rol64(d, 16), b ^= a, a = rol64(a, 32), d ^= c, a += d, d = rol64(d, 21), c += b, b = rol64(b, 17), d ^= a, b ^= c, c = rol64(c, 32) );
 do { do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(net_rand_noise)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) = d; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) = d; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) = d; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise))); (typeof((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) = d; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

struct rnd_state {
 __u32 s1, s2, s3, s4;
};

u32 prandom_u32_state(struct rnd_state *state);
void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
void prandom_seed_full_state(struct rnd_state *pcpu_state);
# 95 "./include/linux/prandom.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 prandom_u32_max(u32 ep_ro)
{
 return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __seed(u32 x, u32 m)
{
 return (x < m) ? x + m : x;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prandom_seed_state(struct rnd_state *state, u64 seed)
{
 u32 i = ((seed >> 32) ^ (seed << 10) ^ seed) & 0xffffffffUL;

 state->s1 = __seed(i, 2U);
 state->s2 = __seed(i, 8U);
 state->s3 = __seed(i, 16U);
 state->s4 = __seed(i, 128U);
 prandom_u32_add_noise((unsigned long)(state), (unsigned long)(i), (unsigned long)(0), (unsigned long)(0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 next_pseudo_random32(u32 seed)
{
 return seed * 1664525 + 1013904223;
}
# 120 "./include/linux/random.h" 2


# 1 "./arch/arm64/include/asm/archrandom.h" 1






# 1 "./include/linux/arm-smccc.h" 1
# 194 "./include/linux/arm-smccc.h"
enum arm_smccc_conduit {
 SMCCC_CONDUIT_NONE,
 SMCCC_CONDUIT_SMC,
 SMCCC_CONDUIT_HVC,
};
# 207 "./include/linux/arm-smccc.h"
enum arm_smccc_conduit arm_smccc_1_1_get_conduit(void);
# 218 "./include/linux/arm-smccc.h"
u32 arm_smccc_get_version(void);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) arm_smccc_version_init(u32 version, enum arm_smccc_conduit conduit);

extern u64 smccc_has_sve_hint;





struct arm_smccc_res {
 unsigned long a0;
 unsigned long a1;
 unsigned long a2;
 unsigned long a3;
};






struct arm_smccc_1_2_regs {
 unsigned long a0;
 unsigned long a1;
 unsigned long a2;
 unsigned long a3;
 unsigned long a4;
 unsigned long a5;
 unsigned long a6;
 unsigned long a7;
 unsigned long a8;
 unsigned long a9;
 unsigned long a10;
 unsigned long a11;
 unsigned long a12;
 unsigned long a13;
 unsigned long a14;
 unsigned long a15;
 unsigned long a16;
 unsigned long a17;
};
# 272 "./include/linux/arm-smccc.h"
           void arm_smccc_1_2_hvc(const struct arm_smccc_1_2_regs *args,
      struct arm_smccc_1_2_regs *res);
# 286 "./include/linux/arm-smccc.h"
           void arm_smccc_1_2_smc(const struct arm_smccc_1_2_regs *args,
      struct arm_smccc_1_2_regs *res);
# 296 "./include/linux/arm-smccc.h"
struct arm_smccc_quirk {
 int id;
 union {
  unsigned long a6;
 } state;
};
# 310 "./include/linux/arm-smccc.h"
           unsigned long __arm_smccc_sve_check(unsigned long x0);
# 325 "./include/linux/arm-smccc.h"
           void __arm_smccc_smc(unsigned long a0, unsigned long a1,
   unsigned long a2, unsigned long a3, unsigned long a4,
   unsigned long a5, unsigned long a6, unsigned long a7,
   struct arm_smccc_res *res, struct arm_smccc_quirk *quirk);
# 351 "./include/linux/arm-smccc.h"
           void __arm_smccc_hvc(unsigned long a0, unsigned long a1,
   unsigned long a2, unsigned long a3, unsigned long a4,
   unsigned long a5, unsigned long a6, unsigned long a7,
   struct arm_smccc_res *res, struct arm_smccc_quirk *quirk);
# 8 "./arch/arm64/include/asm/archrandom.h" 2






extern bool smccc_trng_available;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) smccc_probe_trng(void)
{
 struct arm_smccc_res res;

 ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((0) << 30) | (((4) & 0x3F) << 24) | ((0x50) & 0xFFFF)); asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((0) << 30) | (((4) & 0x3F) << 24) | ((0x50) & 0xFFFF)); asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((0) << 30) | (((4) & 0x3F) << 24) | ((0x50) & 0xFFFF)); asm ("" : : "r" (arg0) : "x16", "x30", "cc", "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
 if ((s32)res.a0 < 0)
  return false;

 return res.a0 >= 0x10000UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __arm64_rndr(unsigned long *v)
{
 bool ok;





 asm volatile(
  "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((3) << 16) | ((2) << 12) | ((4) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" "\n"
 "	cset %w1, ne\n"
 : "=r" (*v), "=r" (ok)
 :
 : "cc");

 return ok;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) arch_get_random_long(unsigned long *v)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) arch_get_random_int(unsigned int *v)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) arch_get_random_seed_long(unsigned long *v)
{
 struct arm_smccc_res res;







 if (smccc_trng_available) {
  ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm ("" : : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
  if ((int)res.a0 >= 0) {
   *v = res.a3;
   return true;
  }
 }







 if (cpus_have_const_cap(27) && __arm64_rndr(v))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) arch_get_random_seed_int(unsigned int *v)
{
 struct arm_smccc_res res;
 unsigned long val;

 if (smccc_trng_available) {
  ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(32) __a1 = 32; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(32) arg1 asm("r1") = __a1; asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(32) __a1 = 32; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(32) arg1 asm("r1") = __a1; asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { typeof(32) __a1 = 32; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(32) arg1 asm("r1") = __a1; asm ("" : : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
  if ((int)res.a0 >= 0) {
   *v = res.a3 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (31)) * 0l)) : (int *)8))), (0) > (31), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (31)))));
   return true;
  }
 }

 if (cpus_have_const_cap(27)) {
  if (__arm64_rndr(&val)) {
   *v = val;
   return true;
  }
 }

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) __early_cpu_has_rndr(void)
{

 unsigned long ftr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
 return (ftr >> 60) & 0xf;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) __attribute__((__warn_unused_result__))
arch_get_random_seed_long_early(unsigned long *v)
{
 ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/archrandom.h\"; .popsection; .long 14472b - 14470b; .short 118; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });

 if (smccc_trng_available) {
  struct arm_smccc_res res;

  ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile(".if ""1"" == 1\n" "661:\n\t" "nop \n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "bl __arm_smccc_sve_check \n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" "smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm ("" : : "r" (arg0), "r" (arg1) : "x16", "x30", "cc", "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
  if ((int)res.a0 >= 0) {
   *v = res.a3;
   return true;
  }
 }

 if (__early_cpu_has_rndr() && __arm64_rndr(v))
  return true;

 return false;
}
# 123 "./include/linux/random.h" 2
# 155 "./include/linux/random.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) arch_get_random_long_early(unsigned long *v)
{
 ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/random.h\"; .popsection; .long 14472b - 14470b; .short 157; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return arch_get_random_long(v);
}
# 9 "./arch/arm64/include/asm/pointer_auth.h" 2
# 21 "./arch/arm64/include/asm/pointer_auth.h"
struct ptrauth_key {
 unsigned long lo, hi;
};





struct ptrauth_keys_user {
 struct ptrauth_key apia;
 struct ptrauth_key apib;
 struct ptrauth_key apda;
 struct ptrauth_key apdb;
 struct ptrauth_key apga;
};
# 46 "./arch/arm64/include/asm/pointer_auth.h"
struct ptrauth_keys_kernel {
 struct ptrauth_key apia;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ptrauth_keys_init_kernel(struct ptrauth_keys_kernel *keys)
{
 if (system_supports_address_auth())
  get_random_bytes(&keys->apia, sizeof(keys->apia));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ptrauth_keys_switch_kernel(struct ptrauth_keys_kernel *keys)
{
 if (!system_supports_address_auth())
  return;

 do { struct ptrauth_key __pki_v = (keys->apia); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
 asm volatile("isb" : : : "memory");
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrauth_keys_install_user(struct ptrauth_keys_user *keys)
{
 if (system_supports_address_auth()) {
  do { struct ptrauth_key __pki_v = (keys->apib); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((2) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((3) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
  do { struct ptrauth_key __pki_v = (keys->apda); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
  do { struct ptrauth_key __pki_v = (keys->apdb); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((2) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((3) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
 }

 if (system_supports_generic_auth())
  do { struct ptrauth_key __pki_v = (keys->apga); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((3) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((3) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrauth_keys_init_user(struct ptrauth_keys_user *keys)
{
 if (system_supports_address_auth()) {
  get_random_bytes(&keys->apia, sizeof(keys->apia));
  get_random_bytes(&keys->apib, sizeof(keys->apib));
  get_random_bytes(&keys->apda, sizeof(keys->apda));
  get_random_bytes(&keys->apdb, sizeof(keys->apdb));
 }

 if (system_supports_generic_auth())
  get_random_bytes(&keys->apga, sizeof(keys->apga));

 ptrauth_keys_install_user(keys);
}

extern int ptrauth_prctl_reset_keys(struct task_struct *tsk, unsigned long arg);

extern int ptrauth_set_enabled_keys(struct task_struct *tsk, unsigned long keys,
        unsigned long enabled);
extern int ptrauth_get_enabled_keys(struct task_struct *tsk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ptrauth_strip_insn_pac(unsigned long ptr)
{
 return ((ptr & ((((1ULL))) << (55))) ? (ptr | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : (ptr & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ptrauth_enable(void)
{
 if (!system_supports_address_auth())
  return;
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "sctlr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)(0)) | (((((((1UL))) << (31))) | (((((1UL))) << (30))) | (((((1UL))) << (27))) | (((((1UL))) << (13))))); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "sctlr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0);

 asm volatile("isb" : : : "memory");
}
# 43 "./arch/arm64/include/asm/processor.h" 2

# 1 "./arch/arm64/include/asm/spectre.h" 1
# 23 "./arch/arm64/include/asm/spectre.h"
enum mitigation_state {
 SPECTRE_UNAFFECTED,
 SPECTRE_MITIGATED,
 SPECTRE_VULNERABLE,
};

struct task_struct;





enum arm64_hyp_spectre_vector {




 HYP_VECTOR_DIRECT,





 HYP_VECTOR_SPECTRE_DIRECT,





 HYP_VECTOR_INDIRECT,





 HYP_VECTOR_SPECTRE_INDIRECT,
};

typedef void (*bp_hardening_cb_t)(void);

struct bp_hardening_data {
 enum arm64_hyp_spectre_vector slot;
 bp_hardening_cb_t fn;
};

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(struct bp_hardening_data) bp_hardening_data;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arm64_apply_bp_hardening(void)
{
 struct bp_hardening_data *d;

 if (!cpus_have_const_cap(38))
  return;

 d = ({ do { const void *__vpp_verify = (typeof((&bp_hardening_data) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&bp_hardening_data)) *)(&bp_hardening_data)); (typeof((typeof(*(&bp_hardening_data)) *)(&bp_hardening_data))) (__ptr + ((__kern_my_cpu_offset()))); }); });
 if (d->fn)
  d->fn();
}

enum mitigation_state arm64_get_spectre_v2_state(void);
bool has_spectre_v2(const struct arm64_cpu_capabilities *cap, int scope);
void spectre_v2_enable_mitigation(const struct arm64_cpu_capabilities *__unused);

bool has_spectre_v3a(const struct arm64_cpu_capabilities *cap, int scope);
void spectre_v3a_enable_mitigation(const struct arm64_cpu_capabilities *__unused);

enum mitigation_state arm64_get_spectre_v4_state(void);
bool has_spectre_v4(const struct arm64_cpu_capabilities *cap, int scope);
void spectre_v4_enable_mitigation(const struct arm64_cpu_capabilities *__unused);
void spectre_v4_enable_task_mitigation(struct task_struct *tsk);

enum mitigation_state arm64_get_meltdown_state(void);
# 45 "./arch/arm64/include/asm/processor.h" 2
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 46 "./arch/arm64/include/asm/processor.h" 2
# 103 "./arch/arm64/include/asm/processor.h"
struct debug_info {


 int suspended_step;

 int bps_disabled;
 int wps_disabled;

 struct perf_event *hbp_break[16];
 struct perf_event *hbp_watch[16];

};

enum vec_type {
 ARM64_VEC_SVE = 0,
 ARM64_VEC_MAX,
};

struct cpu_context {
 unsigned long x19;
 unsigned long x20;
 unsigned long x21;
 unsigned long x22;
 unsigned long x23;
 unsigned long x24;
 unsigned long x25;
 unsigned long x26;
 unsigned long x27;
 unsigned long x28;
 unsigned long fp;
 unsigned long sp;
 unsigned long pc;
};

struct thread_struct {
 struct cpu_context cpu_context;






 struct {
  unsigned long tp_value;
  unsigned long tp2_value;
  struct user_fpsimd_state fpsimd_state;
 } uw;

 unsigned int fpsimd_cpu;
 void *sve_state;
 unsigned int vl[ARM64_VEC_MAX];
 unsigned int vl_onexec[ARM64_VEC_MAX];
 unsigned long fault_address;
 unsigned long fault_code;
 struct debug_info debug;

 struct ptrauth_keys_user keys_user;

 struct ptrauth_keys_kernel keys_kernel;



 u64 mte_ctrl;

 u64 sctlr_user;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int thread_get_vl(struct thread_struct *thread,
      enum vec_type type)
{
 return thread->vl[type];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int thread_get_sve_vl(struct thread_struct *thread)
{
 return thread_get_vl(thread, ARM64_VEC_SVE);
}

unsigned int task_get_vl(const struct task_struct *task, enum vec_type type);
void task_set_vl(struct task_struct *task, enum vec_type type,
   unsigned long vl);
void task_set_vl_onexec(struct task_struct *task, enum vec_type type,
   unsigned long vl);
unsigned int task_get_vl_onexec(const struct task_struct *task,
    enum vec_type type);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_get_sve_vl(const struct task_struct *task)
{
 return task_get_vl(task, ARM64_VEC_SVE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_sve_vl(struct task_struct *task, unsigned long vl)
{
 task_set_vl(task, ARM64_VEC_SVE, vl);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_get_sve_vl_onexec(const struct task_struct *task)
{
 return task_get_vl_onexec(task, ARM64_VEC_SVE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_sve_vl_onexec(struct task_struct *task,
       unsigned long vl)
{
 task_set_vl_onexec(task, ARM64_VEC_SVE, vl);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_172(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof_field(struct thread_struct, uw) != sizeof_field(struct thread_struct, uw.tp_value) + sizeof_field(struct thread_struct, uw.tp2_value) + sizeof_field(struct thread_struct, uw.fpsimd_state)"))); if (!(!(sizeof((((struct thread_struct *)0)->uw)) != sizeof((((struct thread_struct *)0)->uw.tp_value)) + sizeof((((struct thread_struct *)0)->uw.tp2_value)) + sizeof((((struct thread_struct *)0)->uw.fpsimd_state))))) __compiletime_assert_172(); } while (0);




 *offset = __builtin_offsetof(struct thread_struct, uw);
 *size = sizeof((((struct thread_struct *)0)->uw));
}
# 245 "./arch/arm64/include/asm/processor.h"
void tls_preserve_current_state(void);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void start_thread_common(struct pt_regs *regs, unsigned long pc)
{
 memset(regs, 0, sizeof(*regs));
 forget_syscall(regs);
 regs->pc = pc;

 if (system_uses_irq_prio_masking())
  regs->pmr_save = 0xe0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void start_thread(struct pt_regs *regs, unsigned long pc,
    unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000000;
 spectre_v4_enable_task_mitigation(get_current());
 regs->sp = sp;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void compat_start_thread(struct pt_regs *regs, unsigned long pc,
           unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000010;
 if (pc & 1)
  regs->pstate |= 0x00000020;





 spectre_v4_enable_task_mitigation(get_current());
 regs->regs[13] = sp;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_ttbr1_addr(unsigned long addr)
{

 return (addr) >= ((-((((1UL))) << ((48)))));
}


struct task_struct;


extern void release_thread(struct task_struct *);

unsigned long __get_wchan(struct task_struct *p);

void update_sctlr_el1(u64 sctlr);


extern struct task_struct *cpu_switch_to(struct task_struct *prev,
      struct task_struct *next);
# 321 "./arch/arm64/include/asm/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetch(const void *ptr)
{
 asm volatile("prfm pldl1keep, %a0\n" : : "p" (ptr));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetchw(const void *ptr)
{
 asm volatile("prfm pstl1keep, %a0\n" : : "p" (ptr));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void spin_lock_prefetch(const void *ptr)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "prfm pstl1strm, %a0" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "22" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".arch_extension lse\n" "nop" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "p" (ptr));


}

extern unsigned long __attribute__((__section__(".data..ro_after_init"))) signal_minsigstksz;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) minsigstksz_setup(void);
# 352 "./arch/arm64/include/asm/processor.h"
# 1 "./arch/arm64/include/asm/fpsimd.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 9 "./arch/arm64/include/asm/fpsimd.h" 2

# 1 "./arch/arm64/include/asm/processor.h" 1
# 11 "./arch/arm64/include/asm/fpsimd.h" 2
# 1 "./arch/arm64/include/uapi/asm/sigcontext.h" 1
# 28 "./arch/arm64/include/uapi/asm/sigcontext.h"
struct sigcontext {
 __u64 fault_address;

 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;

 __u8 __reserved[4096] __attribute__((__aligned__(16)));
};
# 66 "./arch/arm64/include/uapi/asm/sigcontext.h"
struct _aarch64_ctx {
 __u32 magic;
 __u32 size;
};



struct fpsimd_context {
 struct _aarch64_ctx head;
 __u32 fpsr;
 __u32 fpcr;
 __uint128_t vregs[32];
};
# 92 "./arch/arm64/include/uapi/asm/sigcontext.h"
struct esr_context {
 struct _aarch64_ctx head;
 __u64 esr;
};
# 125 "./arch/arm64/include/uapi/asm/sigcontext.h"
struct extra_context {
 struct _aarch64_ctx head;
 __u64 datap;
 __u32 size;
 __u32 __reserved[3];
};



struct sve_context {
 struct _aarch64_ctx head;
 __u16 vl;
 __u16 __reserved[3];
};
# 12 "./arch/arm64/include/asm/fpsimd.h" 2




# 1 "./include/linux/bitmap.h" 1
# 14 "./include/linux/bitmap.h"
struct device;
# 125 "./include/linux/bitmap.h"
unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_alloc_node(unsigned int nbits, gfp_t flags, int node);
unsigned long *bitmap_zalloc_node(unsigned int nbits, gfp_t flags, int node);
void bitmap_free(const unsigned long *bitmap);


unsigned long *devm_bitmap_alloc(struct device *dev,
     unsigned int nbits, gfp_t flags);
unsigned long *devm_bitmap_zalloc(struct device *dev,
      unsigned int nbits, gfp_t flags);





int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
         const unsigned long *src2,
         const unsigned long *src3,
         unsigned int nbits);
void __bitmap_complement(unsigned long *dst, const unsigned long *src,
    unsigned int nbits);
void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
     unsigned int shift, unsigned int nbits);
void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
void bitmap_cut(unsigned long *dst, const unsigned long *src,
  unsigned int first, unsigned int cut, unsigned int nbits);
int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
    const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_replace(unsigned long *dst,
        const unsigned long *old, const unsigned long *new,
        const unsigned long *mask, unsigned int nbits);
int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_subset(const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
void __bitmap_set(unsigned long *map, unsigned int start, int len);
void __bitmap_clear(unsigned long *map, unsigned int start, int len);

unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 193 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *dst, int nbits);
int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);






unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);

extern int bitmap_print_bitmask_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);

extern int bitmap_print_list_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 64)
  dst[nbits / 64] &= (~0UL >> (-(nbits) & (64 - 1)));
}






void bitmap_from_arr32(unsigned long *bitmap, const u32 *buf,
       unsigned int nbits);
void bitmap_to_arr32(u32 *buf, const unsigned long *bitmap,
       unsigned int nbits);
# 290 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 340 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}
# 360 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_or_equal(const unsigned long *src1,
       const unsigned long *src2,
       const unsigned long *src3,
       unsigned int nbits)
{
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return __bitmap_or_equal(src1, src2, src3, nbits);

 return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (64 - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_zero_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_replace(unsigned long *dst,
      const unsigned long *old,
      const unsigned long *new,
      const unsigned long *mask,
      unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*old & ~(*mask)) | (*new & *mask);
 else
  __bitmap_replace(dst, old, new, mask, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_next_clear_region(unsigned long *bitmap,
         unsigned int *rs, unsigned int *re,
         unsigned int end)
{
 *rs = find_next_zero_bit(bitmap, end, *rs);
 *re = find_next_bit(bitmap, end, *rs + 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_next_set_region(unsigned long *bitmap,
       unsigned int *rs, unsigned int *re,
       unsigned int end)
{
 *rs = find_next_bit(bitmap, end, *rs);
 *re = find_next_zero_bit(bitmap, end, *rs + 1);
}
# 548 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 564 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long bitmap_get_value8(const unsigned long *map,
           unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 return (map[index] >> offset) & 0xFF;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_set_value8(unsigned long *map, unsigned long value,
         unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 map[index] &= ~(0xFFUL << offset);
 map[index] |= value << offset;
}
# 17 "./arch/arm64/include/asm/fpsimd.h" 2
# 35 "./arch/arm64/include/asm/fpsimd.h"
struct task_struct;

extern void fpsimd_save_state(struct user_fpsimd_state *state);
extern void fpsimd_load_state(struct user_fpsimd_state *state);

extern void fpsimd_thread_switch(struct task_struct *next);
extern void fpsimd_flush_thread(void);

extern void fpsimd_signal_preserve_current_state(void);
extern void fpsimd_preserve_current_state(void);
extern void fpsimd_restore_current_state(void);
extern void fpsimd_update_current_state(struct user_fpsimd_state const *state);

extern void fpsimd_bind_state_to_cpu(struct user_fpsimd_state *state,
         void *sve_state, unsigned int sve_vl);

extern void fpsimd_flush_task_state(struct task_struct *target);
extern void fpsimd_save_and_flush_cpu_state(void);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t sve_ffr_offset(int vl)
{
 return (((sizeof(struct sve_context) + (16 - 1)) / 16 * 16) + ((0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0)) + (((0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0)) + ((__u32)(((vl) / 16)) * (16 / 8)) * (16)) - (0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0))))) - ((sizeof(struct sve_context) + (16 - 1)) / 16 * 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *sve_pffr(struct thread_struct *thread)
{
 return (char *)thread->sve_state + sve_ffr_offset(thread_get_sve_vl(thread));
}

extern void sve_save_state(void *state, u32 *pfpsr, int save_ffr);
extern void sve_load_state(void const *state, u32 const *pfpsr,
      int restore_ffr);
extern void sve_flush_live(bool flush_ffr, unsigned long vq_minus_1);
extern unsigned int sve_get_vl(void);
extern void sve_set_vq(unsigned long vq_minus_1);

struct arm64_cpu_capabilities;
extern void sve_kernel_enable(const struct arm64_cpu_capabilities *__unused);

extern u64 read_zcr_features(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __vq_to_bit(unsigned int vq)
{
 return 512 - vq;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __bit_to_vq(unsigned int bit)
{
 return 512 - bit;
}


struct vl_info {
 enum vec_type type;
 const char *name;


 int min_vl;


 int max_vl;
 int max_virtualisable_vl;





 unsigned long vq_map[(((512) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];


 unsigned long vq_partial_map[(((512) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};



extern void sve_alloc(struct task_struct *task);
extern void fpsimd_release_task(struct task_struct *task);
extern void fpsimd_sync_to_sve(struct task_struct *task);
extern void sve_sync_to_fpsimd(struct task_struct *task);
extern void sve_sync_from_fpsimd_zeropad(struct task_struct *task);

extern int sve_set_vector_length(struct task_struct *task,
     unsigned long vl, unsigned long flags);

extern int sve_set_current_vl(unsigned long arg);
extern int sve_get_current_vl(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sve_user_disable(void)
{
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "cpacr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)((((((1UL))) << (17))))) | (0); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "cpacr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sve_user_enable(void)
{
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "cpacr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)(0)) | ((((((1UL))) << (17)))); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "cpacr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0);
}
# 154 "./arch/arm64/include/asm/fpsimd.h"
enum vec_type;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vec_init_vq_map(enum vec_type type);
extern void vec_update_vq_map(enum vec_type type);
extern int vec_verify_vq_map(enum vec_type type);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) sve_setup(void);

extern __attribute__((__section__(".data..ro_after_init"))) struct vl_info vl_info[ARM64_VEC_MAX];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_vl(enum vec_type type, u64 val)
{
 u64 tmp;

 switch (type) {

 case ARM64_VEC_SVE:
  tmp = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((1) << 12) | ((2) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; }) & ~0x1ff;
  do { u64 __val = (u64)(tmp | val); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((1) << 12) | ((2) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0);
  break;

 default:
  ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/fpsimd.h\"; .popsection; .long 14472b - 14470b; .short 175; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
  break;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vec_max_vl(enum vec_type type)
{
 return vl_info[type].max_vl;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vec_max_virtualisable_vl(enum vec_type type)
{
 return vl_info[type].max_virtualisable_vl;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sve_max_vl(void)
{
 return vec_max_vl(ARM64_VEC_SVE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sve_max_virtualisable_vl(void)
{
 return vec_max_virtualisable_vl(ARM64_VEC_SVE);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vq_available(enum vec_type type, unsigned int vq)
{
 return arch_test_bit(__vq_to_bit(vq), vl_info[type].vq_map);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sve_vq_available(unsigned int vq)
{
 return vq_available(ARM64_VEC_SVE, vq);
}
# 253 "./arch/arm64/include/asm/fpsimd.h"
extern void __efi_fpsimd_begin(void);
extern void __efi_fpsimd_end(void);
# 353 "./arch/arm64/include/asm/processor.h" 2
# 368 "./arch/arm64/include/asm/processor.h"
long set_tagged_addr_ctrl(struct task_struct *task, unsigned long arg);
long get_tagged_addr_ctrl(struct task_struct *task);
# 2 "./arch/arm64/include/asm/processor_types.h" 2
# 34 "./include/linux/skbuff_api.h" 2


# 1 "./include/linux/netfilter/nf_conntrack_common.h" 1






# 1 "./include/uapi/linux/netfilter/nf_conntrack_common.h" 1






enum ip_conntrack_info {

 IP_CT_ESTABLISHED,



 IP_CT_RELATED,



 IP_CT_NEW,


 IP_CT_IS_REPLY,

 IP_CT_ESTABLISHED_REPLY = IP_CT_ESTABLISHED + IP_CT_IS_REPLY,
 IP_CT_RELATED_REPLY = IP_CT_RELATED + IP_CT_IS_REPLY,



 IP_CT_NUMBER,





 IP_CT_UNTRACKED = 7,

};






enum ip_conntrack_status {

 IPS_EXPECTED_BIT = 0,
 IPS_EXPECTED = (1 << IPS_EXPECTED_BIT),


 IPS_SEEN_REPLY_BIT = 1,
 IPS_SEEN_REPLY = (1 << IPS_SEEN_REPLY_BIT),


 IPS_ASSURED_BIT = 2,
 IPS_ASSURED = (1 << IPS_ASSURED_BIT),


 IPS_CONFIRMED_BIT = 3,
 IPS_CONFIRMED = (1 << IPS_CONFIRMED_BIT),


 IPS_SRC_NAT_BIT = 4,
 IPS_SRC_NAT = (1 << IPS_SRC_NAT_BIT),


 IPS_DST_NAT_BIT = 5,
 IPS_DST_NAT = (1 << IPS_DST_NAT_BIT),


 IPS_NAT_MASK = (IPS_DST_NAT | IPS_SRC_NAT),


 IPS_SEQ_ADJUST_BIT = 6,
 IPS_SEQ_ADJUST = (1 << IPS_SEQ_ADJUST_BIT),


 IPS_SRC_NAT_DONE_BIT = 7,
 IPS_SRC_NAT_DONE = (1 << IPS_SRC_NAT_DONE_BIT),

 IPS_DST_NAT_DONE_BIT = 8,
 IPS_DST_NAT_DONE = (1 << IPS_DST_NAT_DONE_BIT),


 IPS_NAT_DONE_MASK = (IPS_DST_NAT_DONE | IPS_SRC_NAT_DONE),


 IPS_DYING_BIT = 9,
 IPS_DYING = (1 << IPS_DYING_BIT),


 IPS_FIXED_TIMEOUT_BIT = 10,
 IPS_FIXED_TIMEOUT = (1 << IPS_FIXED_TIMEOUT_BIT),


 IPS_TEMPLATE_BIT = 11,
 IPS_TEMPLATE = (1 << IPS_TEMPLATE_BIT),


 IPS_UNTRACKED_BIT = 12,
 IPS_UNTRACKED = (1 << IPS_UNTRACKED_BIT),






 IPS_NAT_CLASH_BIT = IPS_UNTRACKED_BIT,
 IPS_NAT_CLASH = IPS_UNTRACKED,



 IPS_HELPER_BIT = 13,
 IPS_HELPER = (1 << IPS_HELPER_BIT),


 IPS_OFFLOAD_BIT = 14,
 IPS_OFFLOAD = (1 << IPS_OFFLOAD_BIT),


 IPS_HW_OFFLOAD_BIT = 15,
 IPS_HW_OFFLOAD = (1 << IPS_HW_OFFLOAD_BIT),




 IPS_UNCHANGEABLE_MASK = (IPS_NAT_DONE_MASK | IPS_NAT_MASK |
     IPS_EXPECTED | IPS_CONFIRMED | IPS_DYING |
     IPS_SEQ_ADJUST | IPS_TEMPLATE | IPS_UNTRACKED |
     IPS_OFFLOAD | IPS_HW_OFFLOAD),

 __IPS_MAX_BIT = 16,
};


enum ip_conntrack_events {
 IPCT_NEW,
 IPCT_RELATED,
 IPCT_DESTROY,
 IPCT_REPLY,
 IPCT_ASSURED,
 IPCT_PROTOINFO,
 IPCT_HELPER,
 IPCT_MARK,
 IPCT_SEQADJ,
 IPCT_NATSEQADJ = IPCT_SEQADJ,
 IPCT_SECMARK,
 IPCT_LABEL,
 IPCT_SYNPROXY,

 __IPCT_MAX

};

enum ip_conntrack_expect_events {
 IPEXP_NEW,
 IPEXP_DESTROY,
};
# 8 "./include/linux/netfilter/nf_conntrack_common.h" 2

struct ip_conntrack_stat {
 unsigned int found;
 unsigned int invalid;
 unsigned int insert;
 unsigned int insert_failed;
 unsigned int clash_resolve;
 unsigned int drop;
 unsigned int early_drop;
 unsigned int error;
 unsigned int expect_new;
 unsigned int expect_create;
 unsigned int expect_delete;
 unsigned int search_restart;
 unsigned int chaintoolong;
};




struct nf_conntrack {
 atomic_t use;
};
# 37 "./include/linux/skbuff_api.h" 2


struct flow_keys_basic;
struct flow_dissector_key;
struct flow_dissector;
struct net;



int mm_account_pinned_pages(struct mmpin *mmp, size_t size);
void mm_unaccount_pinned_pages(struct mmpin *mmp);

struct ubuf_info *msg_zerocopy_alloc(struct sock *sk, size_t size);
struct ubuf_info *msg_zerocopy_realloc(struct sock *sk, size_t size,
           struct ubuf_info *uarg);

void msg_zerocopy_put_abort(struct ubuf_info *uarg, bool have_uref);

void msg_zerocopy_callback(struct sk_buff *skb, struct ubuf_info *uarg,
      bool success);

int skb_zerocopy_iter_dgram(struct sk_buff *skb, struct msghdr *msg, int len);
int skb_zerocopy_iter_stream(struct sock *sk, struct sk_buff *skb,
        struct msghdr *msg, int len,
        struct ubuf_info *uarg);
# 75 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_pfmemalloc(const struct sk_buff *skb)
{
 return __builtin_expect(!!(skb->pfmemalloc), 0);
}
# 93 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dst_entry *skb_dst(const struct sk_buff *skb)
{



 ({ int __ret_warn_on = !!((skb->_skb_refdst & 1UL) && !rcu_read_lock_held() && !rcu_read_lock_bh_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 100; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });


 return (struct dst_entry *)(skb->_skb_refdst & ~(1UL));
}
# 112 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_dst_set(struct sk_buff *skb, struct dst_entry *dst)
{
 skb->slow_gro |= !!dst;
 skb->_skb_refdst = (unsigned long)dst;
}
# 128 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_dst_set_noref(struct sk_buff *skb, struct dst_entry *dst)
{
 ({ int __ret_warn_on = !!(!rcu_read_lock_held() && !rcu_read_lock_bh_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 130; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 skb->slow_gro |= !!dst;
 skb->_skb_refdst = (unsigned long)dst | 1UL;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_dst_is_noref(const struct sk_buff *skb)
{
 return (skb->_skb_refdst & 1UL) && skb_dst(skb);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rtable *skb_rtable(const struct sk_buff *skb)
{
 return (struct rtable *)skb_dst(skb);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_pkt_type_ok(u32 ptype)
{
 return ptype <= 3;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int skb_napi_id(const struct sk_buff *skb)
{

 return skb->napi_id;



}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_unref(struct sk_buff *skb)
{
 if (__builtin_expect(!!(!skb), 0))
  return false;
 if (__builtin_expect(!!(refcount_read(&skb->users) == 1), 1))
  asm volatile("dmb " "ishld" : : : "memory");
 else if (__builtin_expect(!!(!refcount_dec_and_test(&skb->users)), 1))
  return false;

 return true;
}

void skb_release_head_state(struct sk_buff *skb);
void kfree_skb(struct sk_buff *skb);
void kfree_skb_list(struct sk_buff *segs);
void skb_dump(const char *level, const struct sk_buff *skb, bool full_pkt);
void skb_tx_error(struct sk_buff *skb);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void consume_skb(struct sk_buff *skb)
{
 return kfree_skb(skb);
}


void __consume_stateless_skb(struct sk_buff *skb);
void __kfree_skb(struct sk_buff *skb);
extern struct kmem_cache *skbuff_head_cache;

void kfree_skb_partial(struct sk_buff *skb, bool head_stolen);
bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,
        bool *fragstolen, int *delta_truesize);

struct sk_buff *__alloc_skb(unsigned int size, gfp_t priority, int flags,
       int node);
struct sk_buff *__build_skb(void *data, unsigned int frag_size);
struct sk_buff *build_skb(void *data, unsigned int frag_size);
struct sk_buff *build_skb_around(struct sk_buff *skb,
     void *data, unsigned int frag_size);

struct sk_buff *napi_build_skb(void *data, unsigned int frag_size);
# 232 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *alloc_skb(unsigned int size,
     gfp_t priority)
{
 return __alloc_skb(size, priority, 0, (-1));
}

struct sk_buff *alloc_skb_with_frags(unsigned long header_len,
         unsigned long data_len,
         int max_page_order,
         int *errcode,
         gfp_t gfp_mask);
struct sk_buff *alloc_skb_for_msg(struct sk_buff *first);
# 254 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_fclone_busy(const struct sock *sk,
       const struct sk_buff *skb)
{
 const struct sk_buff_fclones *fclones;

 fclones = ({ void *__mptr = (void *)(skb); _Static_assert(__builtin_types_compatible_p(typeof(*(skb)), typeof(((struct sk_buff_fclones *)0)->skb1)) || __builtin_types_compatible_p(typeof(*(skb)), typeof(void)), "pointer type mismatch in container_of()"); ((struct sk_buff_fclones *)(__mptr - __builtin_offsetof(struct sk_buff_fclones, skb1))); });

 return skb->fclone == SKB_FCLONE_ORIG &&
        refcount_read(&fclones->fclone_ref) > 1 &&
        ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_173(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(fclones->skb2.sk) == sizeof(char) || sizeof(fclones->skb2.sk) == sizeof(short) || sizeof(fclones->skb2.sk) == sizeof(int) || sizeof(fclones->skb2.sk) == sizeof(long)) || sizeof(fclones->skb2.sk) == sizeof(long long))) __compiletime_assert_173(); } while (0); (*(const volatile typeof( _Generic((fclones->skb2.sk), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (fclones->skb2.sk))) *)&(fclones->skb2.sk)); }) == sk;
}
# 273 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *alloc_skb_fclone(unsigned int size,
            gfp_t priority)
{
 return __alloc_skb(size, priority, 0x01, (-1));
}

struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);
void skb_headers_offset_update(struct sk_buff *skb, int off);
int skb_copy_ubufs(struct sk_buff *skb, gfp_t gfp_mask);
struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t priority);
void skb_copy_header(struct sk_buff *new, const struct sk_buff *old);
struct sk_buff *skb_copy(const struct sk_buff *skb, gfp_t priority);
struct sk_buff *__pskb_copy_fclone(struct sk_buff *skb, int headroom,
       gfp_t gfp_mask, bool fclone);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *__pskb_copy(struct sk_buff *skb, int headroom,
       gfp_t gfp_mask)
{
 return __pskb_copy_fclone(skb, headroom, gfp_mask, false);
}

int pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask);
struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,
         unsigned int headroom);
struct sk_buff *skb_expand_head(struct sk_buff *skb, unsigned int headroom);
struct sk_buff *skb_copy_expand(const struct sk_buff *skb, int newheadroom,
    int newtailroom, gfp_t priority);
int __attribute__((__warn_unused_result__)) skb_to_sgvec_nomark(struct sk_buff *skb, struct scatterlist *sg,
         int offset, int len);
int __attribute__((__warn_unused_result__)) skb_to_sgvec(struct sk_buff *skb, struct scatterlist *sg,
         int offset, int len);
int skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer);
int __skb_pad(struct sk_buff *skb, int pad, bool free_on_error);
# 317 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_pad(struct sk_buff *skb, int pad)
{
 return __skb_pad(skb, pad, true);
}


int skb_append_pagefrags(struct sk_buff *skb, struct page *page,
    int offset, size_t size);

void skb_prepare_seq_read(struct sk_buff *skb, unsigned int from,
     unsigned int to, struct skb_seq_state *st);
unsigned int skb_seq_read(unsigned int consumed, const u8 **data,
     struct skb_seq_state *st);
void skb_abort_seq_read(struct skb_seq_state *st);

struct ts_config;
unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,
      unsigned int to, struct ts_config *config);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_clear_hash(struct sk_buff *skb)
{
 skb->hash = 0;
 skb->sw_hash = 0;
 skb->l4_hash = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_clear_hash_if_not_l4(struct sk_buff *skb)
{
 if (!skb->l4_hash)
  skb_clear_hash(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
 skb->l4_hash = is_l4;
 skb->sw_hash = is_sw;
 skb->hash = hash;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{

 __skb_set_hash(skb, hash, false, type == PKT_HASH_TYPE_L4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__skb_set_sw_hash(struct sk_buff *skb, __u32 hash, bool is_l4)
{
 __skb_set_hash(skb, hash, true, is_l4);
}

void __skb_get_hash(struct sk_buff *skb);
u32 __skb_get_hash_symmetric(const struct sk_buff *skb);
u32 skb_get_poff(const struct sk_buff *skb);
u32 __skb_get_poff(const struct sk_buff *skb, const void *data,
     const struct flow_keys_basic *keys, int hlen);
__be32 __skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto,
       const void *data, int hlen_proto);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 skb_flow_get_ports(const struct sk_buff *skb,
     int thoff, u8 ip_proto)
{
 return __skb_flow_get_ports(skb, thoff, ip_proto, ((void *)0), 0);
}

void skb_flow_dissector_init(struct flow_dissector *flow_dissector,
        const struct flow_dissector_key *key,
        unsigned int key_count);

struct bpf_flow_dissector;
bool bpf_flow_dissect(struct bpf_prog *prog, struct bpf_flow_dissector *ctx,
        __be16 proto, int nhoff, int hlen, unsigned int flags);

bool __skb_flow_dissect(const struct net *net,
   const struct sk_buff *skb,
   struct flow_dissector *flow_dissector,
   void *target_container, const void *data,
   __be16 proto, int nhoff, int hlen, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_flow_dissect(const struct sk_buff *skb,
        struct flow_dissector *flow_dissector,
        void *target_container, unsigned int flags)
{
 return __skb_flow_dissect(((void *)0), skb, flow_dissector,
      target_container, ((void *)0), 0, 0, 0, flags);
}

void skb_flow_dissect_meta(const struct sk_buff *skb,
      struct flow_dissector *flow_dissector,
      void *target_container);





void
skb_flow_dissect_ct(const struct sk_buff *skb,
      struct flow_dissector *flow_dissector,
      void *target_container,
      u16 *ctinfo_map, size_t mapsize,
      bool post_ct, u16 zone);
void
skb_flow_dissect_tunnel_info(const struct sk_buff *skb,
        struct flow_dissector *flow_dissector,
        void *target_container);

void skb_flow_dissect_hash(const struct sk_buff *skb,
      struct flow_dissector *flow_dissector,
      void *target_container);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 skb_get_hash(struct sk_buff *skb)
{
 if (!skb->l4_hash && !skb->sw_hash)
  __skb_get_hash(skb);

 return skb->hash;
}

struct flowi6;
__u32 skb_get_hash_flowi6(struct sk_buff *skb, const struct flowi6 *fl6);

__u32 skb_get_hash_perturb(const struct sk_buff *skb,
      const siphash_key_t *perturb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 skb_get_hash_raw(const struct sk_buff *skb)
{
 return skb->hash;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_copy_hash(struct sk_buff *to, const struct sk_buff *from)
{
 to->hash = from->hash;
 to->sw_hash = from->sw_hash;
 to->l4_hash = from->l4_hash;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_copy_decrypted(struct sk_buff *to,
          const struct sk_buff *from)
{



}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_end_pointer(const struct sk_buff *skb)
{
 return skb->head + skb->end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int skb_end_offset(const struct sk_buff *skb)
{
 return skb->end;
}
# 488 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
 return &((struct skb_shared_info *)(skb_end_pointer(skb)))->hwtstamps;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ubuf_info *skb_zcopy(struct sk_buff *skb)
{
 bool is_zcopy = skb && ((struct skb_shared_info *)(skb_end_pointer(skb)))->flags & SKBFL_ZEROCOPY_ENABLE;

 return is_zcopy ? ((struct ubuf_info *)(((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg)) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_zcopy_pure(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->flags & SKBFL_PURE_ZEROCOPY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_pure_zcopy_same(const struct sk_buff *skb1,
           const struct sk_buff *skb2)
{
 return skb_zcopy_pure(skb1) == skb_zcopy_pure(skb2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void net_zcopy_get(struct ubuf_info *uarg)
{
 refcount_inc(&uarg->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_zcopy_init(struct sk_buff *skb, struct ubuf_info *uarg)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg = uarg;
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->flags |= uarg->flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_zcopy_set(struct sk_buff *skb, struct ubuf_info *uarg,
     bool *have_ref)
{
 if (skb && uarg && !skb_zcopy(skb)) {
  if (__builtin_expect(!!(have_ref && *have_ref), 0))
   *have_ref = false;
  else
   net_zcopy_get(uarg);
  skb_zcopy_init(skb, uarg);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_zcopy_set_nouarg(struct sk_buff *skb, void *val)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg = (void *)((uintptr_t) val | 0x1UL);
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->flags |= (SKBFL_ZEROCOPY_ENABLE | SKBFL_SHARED_FRAG);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_zcopy_is_nouarg(struct sk_buff *skb)
{
 return (uintptr_t) ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg & 0x1UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_zcopy_get_nouarg(struct sk_buff *skb)
{
 return (void *)((uintptr_t) ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg & ~0x1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void net_zcopy_put(struct ubuf_info *uarg)
{
 if (uarg)
  uarg->callback(((void *)0), uarg, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void net_zcopy_put_abort(struct ubuf_info *uarg, bool have_uref)
{
 if (uarg) {
  if (uarg->callback == msg_zerocopy_callback)
   msg_zerocopy_put_abort(uarg, have_uref);
  else if (have_uref)
   net_zcopy_put(uarg);
 }
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_zcopy_clear(struct sk_buff *skb, bool zerocopy_success)
{
 struct ubuf_info *uarg = skb_zcopy(skb);

 if (uarg) {
  if (!skb_zcopy_is_nouarg(skb))
   uarg->callback(skb, uarg, zerocopy_success);

  ((struct skb_shared_info *)(skb_end_pointer(skb)))->flags &= ~((SKBFL_ZEROCOPY_ENABLE | SKBFL_SHARED_FRAG) | SKBFL_PURE_ZEROCOPY);
 }
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_list_del_init(struct sk_buff *skb)
{
 __list_del_entry(&skb->list);
 skb_mark_not_on_list(skb);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_queue_empty(const struct sk_buff_head *list)
{
 return list->next == (const struct sk_buff *) list;
}
# 608 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_queue_empty_lockless(const struct sk_buff_head *list)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_174(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_174(); } while (0); (*(const volatile typeof( _Generic((list->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (list->next))) *)&(list->next)); }) == (const struct sk_buff *) list;
}
# 621 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_queue_is_last(const struct sk_buff_head *list,
         const struct sk_buff *skb)
{
 return skb->next == (const struct sk_buff *) list;
}
# 634 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_queue_is_first(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{
 return skb->prev == (const struct sk_buff *) list;
}
# 648 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_queue_next(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{



 do { if (__builtin_expect(!!(skb_queue_is_last(list, skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 654; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return skb->next;
}
# 666 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_queue_prev(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{



 do { if (__builtin_expect(!!(skb_queue_is_first(list, skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 672; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return skb->prev;
}
# 683 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_get(struct sk_buff *skb)
{
 refcount_inc(&skb->users);
 return skb;
}
# 701 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_cloned(const struct sk_buff *skb)
{
 return skb->cloned &&
        (atomic_read(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref) & ((1 << 16) - 1)) != 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_unclone(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);

 if (skb_cloned(skb))
  return pskb_expand_head(skb, 0, 0, pri);

 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_unclone_keeptruesize(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);

 if (skb_cloned(skb)) {
  unsigned int save = skb->truesize;
  int res;

  res = pskb_expand_head(skb, 0, 0, pri);
  skb->truesize = save;
  return res;
 }
 return 0;
}
# 740 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_header_cloned(const struct sk_buff *skb)
{
 int dataref;

 if (!skb->cloned)
  return 0;

 dataref = atomic_read(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref);
 dataref = (dataref & ((1 << 16) - 1)) - (dataref >> 16);
 return dataref != 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_header_unclone(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);

 if (skb_header_cloned(skb))
  return pskb_expand_head(skb, 0, 0, pri);

 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_header_release(struct sk_buff *skb)
{
 skb->nohdr = 1;
 atomic_set(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref, 1 + (1 << 16));
}
# 780 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_shared(const struct sk_buff *skb)
{
 return refcount_read(&skb->users) != 1;
}
# 798 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);
 if (skb_shared(skb)) {
  struct sk_buff *nskb = skb_clone(skb, pri);

  if (__builtin_expect(!!(nskb), 1))
   consume_skb(skb);
  else
   kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
# 833 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_unshare(struct sk_buff *skb,
       gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);
 if (skb_cloned(skb)) {
  struct sk_buff *nskb = skb_copy(skb, pri);


  if (__builtin_expect(!!(nskb), 1))
   consume_skb(skb);
  else
   kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
# 863 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_peek(const struct sk_buff_head *list_)
{
 struct sk_buff *skb = list_->next;

 if (skb == (struct sk_buff *)list_)
  skb = ((void *)0);
 return skb;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *__skb_peek(const struct sk_buff_head *list_)
{
 return list_->next;
}
# 892 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_peek_next(struct sk_buff *skb,
  const struct sk_buff_head *list_)
{
 struct sk_buff *next = skb->next;

 if (next == (struct sk_buff *)list_)
  next = ((void *)0);
 return next;
}
# 915 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *skb_peek_tail(const struct sk_buff_head *list_)
{
 struct sk_buff *skb = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_175(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list_->prev) == sizeof(char) || sizeof(list_->prev) == sizeof(short) || sizeof(list_->prev) == sizeof(int) || sizeof(list_->prev) == sizeof(long)) || sizeof(list_->prev) == sizeof(long long))) __compiletime_assert_175(); } while (0); (*(const volatile typeof( _Generic((list_->prev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (list_->prev))) *)&(list_->prev)); });

 if (skb == (struct sk_buff *)list_)
  skb = ((void *)0);
 return skb;

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 skb_queue_len(const struct sk_buff_head *list_)
{
 return list_->qlen;
}
# 943 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 skb_queue_len_lockless(const struct sk_buff_head *list_)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_176(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list_->qlen) == sizeof(char) || sizeof(list_->qlen) == sizeof(short) || sizeof(list_->qlen) == sizeof(int) || sizeof(list_->qlen) == sizeof(long)) || sizeof(list_->qlen) == sizeof(long long))) __compiletime_assert_176(); } while (0); (*(const volatile typeof( _Generic((list_->qlen), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (list_->qlen))) *)&(list_->qlen)); });
}
# 958 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_queue_head_init(struct sk_buff_head *list)
{
 list->prev = list->next = (struct sk_buff *)list;
 list->qlen = 0;
}
# 972 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_queue_head_init(struct sk_buff_head *list)
{
 do { spinlock_check(&list->lock); *(&list->lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 __skb_queue_head_init(list);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_queue_head_init_class(struct sk_buff_head *list,
  struct lock_class_key *class)
{
 skb_queue_head_init(list);
 do { (void)(class); } while (0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_insert(struct sk_buff *newsk,
    struct sk_buff *prev, struct sk_buff *next,
    struct sk_buff_head *list)
{



 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_177(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(newsk->next) == sizeof(char) || sizeof(newsk->next) == sizeof(short) || sizeof(newsk->next) == sizeof(int) || sizeof(newsk->next) == sizeof(long)) || sizeof(newsk->next) == sizeof(long long))) __compiletime_assert_177(); } while (0); do { *(volatile typeof(newsk->next) *)&(newsk->next) = (next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_178(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(newsk->prev) == sizeof(char) || sizeof(newsk->prev) == sizeof(short) || sizeof(newsk->prev) == sizeof(int) || sizeof(newsk->prev) == sizeof(long)) || sizeof(newsk->prev) == sizeof(long long))) __compiletime_assert_178(); } while (0); do { *(volatile typeof(newsk->prev) *)&(newsk->prev) = (prev); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_179(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->prev) == sizeof(char) || sizeof(next->prev) == sizeof(short) || sizeof(next->prev) == sizeof(int) || sizeof(next->prev) == sizeof(long)) || sizeof(next->prev) == sizeof(long long))) __compiletime_assert_179(); } while (0); do { *(volatile typeof(next->prev) *)&(next->prev) = (newsk); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_180(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_180(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (newsk); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_181(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->qlen) == sizeof(char) || sizeof(list->qlen) == sizeof(short) || sizeof(list->qlen) == sizeof(int) || sizeof(list->qlen) == sizeof(long)) || sizeof(list->qlen) == sizeof(long long))) __compiletime_assert_181(); } while (0); do { *(volatile typeof(list->qlen) *)&(list->qlen) = (list->qlen + 1); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_queue_splice(const struct sk_buff_head *list,
          struct sk_buff *prev,
          struct sk_buff *next)
{
 struct sk_buff *first = list->next;
 struct sk_buff *last = list->prev;

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_182(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->prev) == sizeof(char) || sizeof(first->prev) == sizeof(short) || sizeof(first->prev) == sizeof(int) || sizeof(first->prev) == sizeof(long)) || sizeof(first->prev) == sizeof(long long))) __compiletime_assert_182(); } while (0); do { *(volatile typeof(first->prev) *)&(first->prev) = (prev); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_183(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_183(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (first); } while (0); } while (0);

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_184(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(last->next) == sizeof(char) || sizeof(last->next) == sizeof(short) || sizeof(last->next) == sizeof(int) || sizeof(last->next) == sizeof(long)) || sizeof(last->next) == sizeof(long long))) __compiletime_assert_184(); } while (0); do { *(volatile typeof(last->next) *)&(last->next) = (next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_185(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->prev) == sizeof(char) || sizeof(next->prev) == sizeof(short) || sizeof(next->prev) == sizeof(int) || sizeof(next->prev) == sizeof(long)) || sizeof(next->prev) == sizeof(long long))) __compiletime_assert_185(); } while (0); do { *(volatile typeof(next->prev) *)&(next->prev) = (last); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_queue_splice(const struct sk_buff_head *list,
        struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
 }
}
# 1040 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_queue_splice_init(struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_queue_splice_tail(const struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
 }
}
# 1072 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_queue_splice_tail_init(struct sk_buff_head *list,
           struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}
# 1093 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_queue_after(struct sk_buff_head *list,
         struct sk_buff *prev,
         struct sk_buff *newsk)
{
 __skb_insert(newsk, prev, prev->next, list);
}

void skb_append(struct sk_buff *old, struct sk_buff *newsk,
  struct sk_buff_head *list);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_queue_before(struct sk_buff_head *list,
          struct sk_buff *next,
          struct sk_buff *newsk)
{
 __skb_insert(newsk, next->prev, next, list);
}
# 1120 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_queue_head(struct sk_buff_head *list,
        struct sk_buff *newsk)
{
 __skb_queue_after(list, (struct sk_buff *)list, newsk);
}
void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);
# 1137 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_queue_tail(struct sk_buff_head *list,
       struct sk_buff *newsk)
{
 __skb_queue_before(list, (struct sk_buff *)list, newsk);
}
void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);





void skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
 struct sk_buff *next, *prev;

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_186(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->qlen) == sizeof(char) || sizeof(list->qlen) == sizeof(short) || sizeof(list->qlen) == sizeof(int) || sizeof(list->qlen) == sizeof(long)) || sizeof(list->qlen) == sizeof(long long))) __compiletime_assert_186(); } while (0); do { *(volatile typeof(list->qlen) *)&(list->qlen) = (list->qlen - 1); } while (0); } while (0);
 next = skb->next;
 prev = skb->prev;
 skb->next = skb->prev = ((void *)0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_187(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->prev) == sizeof(char) || sizeof(next->prev) == sizeof(short) || sizeof(next->prev) == sizeof(int) || sizeof(next->prev) == sizeof(long)) || sizeof(next->prev) == sizeof(long long))) __compiletime_assert_187(); } while (0); do { *(volatile typeof(next->prev) *)&(next->prev) = (prev); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_188(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_188(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
}
# 1169 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}
struct sk_buff *skb_dequeue(struct sk_buff_head *list);
# 1186 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek_tail(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}
struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_is_nonlinear(const struct sk_buff *skb)
{
 return skb->data_len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int skb_headlen(const struct sk_buff *skb)
{
 return skb->len - skb->data_len;
}

void skb_add_rx_frag(struct sk_buff *skb, int i, struct page *page, int off,
       int size, unsigned int truesize);

void skb_coalesce_rx_frag(struct sk_buff *skb, int i, int size,
     unsigned int truesize);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_tail_pointer(const struct sk_buff *skb)
{
 return skb->head + skb->tail;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_tail_pointer(struct sk_buff *skb)
{
 skb->tail = skb->data - skb->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_tail_pointer(struct sk_buff *skb, const int offset)
{
 skb_reset_tail_pointer(skb);
 skb->tail += offset;
}
# 1252 "./include/linux/skbuff_api.h"
void *pskb_put(struct sk_buff *skb, struct sk_buff *tail, int len);
void *skb_put(struct sk_buff *skb, unsigned int len);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *__skb_put(struct sk_buff *skb, unsigned int len)
{
 void *tmp = skb_tail_pointer(skb);
 do { if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 1257; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 skb->tail += len;
 skb->len += len;
 return tmp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_put_u8(struct sk_buff *skb, u8 val)
{
 *(u8 *)__skb_put(skb, 1) = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_put_u8(struct sk_buff *skb, u8 val)
{
 *(u8 *)skb_put(skb, 1) = val;
}

void *skb_push(struct sk_buff *skb, unsigned int len);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *__skb_push(struct sk_buff *skb, unsigned int len)
{
 skb->data -= len;
 skb->len += len;
 return skb->data;
}

void *skb_pull(struct sk_buff *skb, unsigned int len);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *__skb_pull(struct sk_buff *skb, unsigned int len)
{
 skb->len -= len;
 do { if (__builtin_expect(!!(skb->len < skb->data_len), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 1285; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return skb->data += len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_pull_inline(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? ((void *)0) : __skb_pull(skb, len);
}

void *__pskb_pull_tail(struct sk_buff *skb, int delta);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *__pskb_pull(struct sk_buff *skb, unsigned int len)
{
 if (len > skb_headlen(skb) &&
     !__pskb_pull_tail(skb, len - skb_headlen(skb)))
  return ((void *)0);
 skb->len -= len;
 return skb->data += len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pskb_pull(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? ((void *)0) : __pskb_pull(skb, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len <= skb_headlen(skb)), 1))
  return true;
 if (__builtin_expect(!!(len > skb->len), 0))
  return false;
 return __pskb_pull_tail(skb, len - skb_headlen(skb)) != ((void *)0);
}

void skb_condense(struct sk_buff *skb);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int skb_headroom(const struct sk_buff *skb)
{
 return skb->data - skb->head;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_tailroom(const struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? 0 : skb->end - skb->tail;
}
# 1350 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_availroom(const struct sk_buff *skb)
{
 if (skb_is_nonlinear(skb))
  return 0;

 return skb->end - skb->tail - skb->reserved_tailroom;
}
# 1366 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reserve(struct sk_buff *skb, int len)
{
 skb->data += len;
 skb->tail += len;
}
# 1384 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_tailroom_reserve(struct sk_buff *skb, unsigned int mtu,
     unsigned int needed_tailroom)
{
 do { if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 1387; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (mtu < skb_tailroom(skb) - needed_tailroom)

  skb->reserved_tailroom = skb_tailroom(skb) - mtu;
 else

  skb->reserved_tailroom = needed_tailroom;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_inner_protocol(struct sk_buff *skb,
       __be16 protocol)
{
 skb->inner_protocol = protocol;
 skb->inner_protocol_type = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_inner_ipproto(struct sk_buff *skb,
      __u8 ipproto)
{
 skb->inner_ipproto = ipproto;
 skb->inner_protocol_type = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_inner_headers(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->mac_header;
 skb->inner_network_header = skb->network_header;
 skb->inner_transport_header = skb->transport_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_mac_len(struct sk_buff *skb)
{
 skb->mac_len = skb->network_header - skb->mac_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_inner_transport_offset(const struct sk_buff *skb)
{
 return skb_inner_transport_header(skb) - skb->data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_inner_transport_header(struct sk_buff *skb)
{
 skb->inner_transport_header = skb->data - skb->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_inner_transport_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_inner_transport_header(skb);
 skb->inner_transport_header += offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_inner_network_header(struct sk_buff *skb)
{
 skb->inner_network_header = skb->data - skb->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_inner_network_header(struct sk_buff *skb,
      const int offset)
{
 skb_reset_inner_network_header(skb);
 skb->inner_network_header += offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_inner_mac_header(const struct sk_buff *skb)
{
 return skb->head + skb->inner_mac_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_inner_mac_header(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->data - skb->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_inner_mac_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_inner_mac_header(skb);
 skb->inner_mac_header += offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_transport_header_was_set(const struct sk_buff *skb)
{
 return skb->transport_header != (typeof(skb->transport_header))~0U;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_transport_header(struct sk_buff *skb)
{
 skb->transport_header = skb->data - skb->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_transport_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_transport_header(skb);
 skb->transport_header += offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_network_header(struct sk_buff *skb)
{
 skb->network_header = skb->data - skb->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_network_header(struct sk_buff *skb, const int offset)
{
 skb_reset_network_header(skb);
 skb->network_header += offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_mac_header(const struct sk_buff *skb)
{
 return skb->head + skb->mac_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_mac_offset(const struct sk_buff *skb)
{
 return skb_mac_header(skb) - skb->data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 skb_mac_header_len(const struct sk_buff *skb)
{
 return skb->network_header - skb->mac_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_mac_header_was_set(const struct sk_buff *skb)
{
 return skb->mac_header != (typeof(skb->mac_header))~0U;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_unset_mac_header(struct sk_buff *skb)
{
 skb->mac_header = (typeof(skb->mac_header))~0U;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->data - skb->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_mac_header(struct sk_buff *skb, const int offset)
{
 skb_reset_mac_header(skb);
 skb->mac_header += offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_pop_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->network_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_checksum_start_offset(const struct sk_buff *skb)
{
 return skb->csum_start - skb_headroom(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *skb_checksum_start(const struct sk_buff *skb)
{
 return skb->head + skb->csum_start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_transport_offset(const struct sk_buff *skb)
{
 return skb_transport_header(skb) - skb->data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 skb_inner_network_header_len(const struct sk_buff *skb)
{
 return skb->inner_transport_header - skb->inner_network_header;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_network_offset(const struct sk_buff *skb)
{
 return skb_network_header(skb) - skb->data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_inner_network_offset(const struct sk_buff *skb)
{
 return skb_inner_network_header(skb) - skb->data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pskb_network_may_pull(struct sk_buff *skb, unsigned int len)
{
 return pskb_may_pull(skb, skb_network_offset(skb) + len);
}
# 1623 "./include/linux/skbuff_api.h"
int ___pskb_trim(struct sk_buff *skb, unsigned int len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_set_length(struct sk_buff *skb, unsigned int len)
{
 if (({ int __ret_warn_on = !!(skb_is_nonlinear(skb)); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 1627; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return;
 skb->len = len;
 skb_set_tail_pointer(skb, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_trim(struct sk_buff *skb, unsigned int len)
{
 __skb_set_length(skb, len);
}

void skb_trim(struct sk_buff *skb, unsigned int len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
 if (skb->data_len)
  return ___pskb_trim(skb, len);
 __skb_trim(skb, len);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pskb_trim(struct sk_buff *skb, unsigned int len)
{
 return (len < skb->len) ? __pskb_trim(skb, len) : 0;
}
# 1662 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pskb_trim_unique(struct sk_buff *skb, unsigned int len)
{
 int err = pskb_trim(skb, len);
 do { if (__builtin_expect(!!(err), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 1665; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __skb_grow(struct sk_buff *skb, unsigned int len)
{
 unsigned int diff = len - skb->len;

 if (skb_tailroom(skb) < diff) {
  int ret = pskb_expand_head(skb, 0, diff - skb_tailroom(skb),
        ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
  if (ret)
   return ret;
 }
 __skb_set_length(skb, len);
 return 0;
}
# 1690 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_orphan(struct sk_buff *skb)
{
 if (skb->destructor) {
  skb->destructor(skb);
  skb->destructor = ((void *)0);
  skb->sk = ((void *)0);
 } else {
  do { if (__builtin_expect(!!(skb->sk), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 1697; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 }
}
# 1710 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
{
 if (__builtin_expect(!!(!skb_zcopy(skb)), 1))
  return 0;
 if (!skb_zcopy_is_nouarg(skb) &&
     ((struct ubuf_info *)(((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg))->callback == msg_zerocopy_callback)
  return 0;
 return skb_copy_ubufs(skb, gfp_mask);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_orphan_frags_rx(struct sk_buff *skb, gfp_t gfp_mask)
{
 if (__builtin_expect(!!(!skb_zcopy(skb)), 1))
  return 0;
 return skb_copy_ubufs(skb, gfp_mask);
}
# 1736 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_queue_purge(struct sk_buff_head *list)
{
 struct sk_buff *skb;
 while ((skb = __skb_dequeue(list)) != ((void *)0))
  kfree_skb(skb);
}
void skb_queue_purge(struct sk_buff_head *list);

unsigned int skb_rbtree_purge(struct rb_root *root);

void *__netdev_alloc_frag_align(unsigned int fragsz, unsigned int align_mask);
# 1755 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *netdev_alloc_frag(unsigned int fragsz)
{
 return __netdev_alloc_frag_align(fragsz, ~0u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *netdev_alloc_frag_align(unsigned int fragsz,
         unsigned int align)
{
 ({ int __ret_warn_on = !!(!is_power_of_2(align)); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 1763; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return __netdev_alloc_frag_align(fragsz, -align);
}

struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int length,
       gfp_t gfp_mask);
# 1783 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *netdev_alloc_skb(struct net_device *dev,
            unsigned int length)
{
 return __netdev_alloc_skb(dev, length, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *__dev_alloc_skb(unsigned int length,
           gfp_t gfp_mask)
{
 return __netdev_alloc_skb(((void *)0), length, gfp_mask);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *dev_alloc_skb(unsigned int length)
{
 return netdev_alloc_skb(((void *)0), length);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length, gfp_t gfp)
{
 struct sk_buff *skb = __netdev_alloc_skb(dev, length + 0, gfp);

 if (0 && skb)
  skb_reserve(skb, 0);
 return skb;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length)
{
 return __netdev_alloc_skb_ip_align(dev, length, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}

struct sk_buff *__napi_alloc_skb(struct napi_struct *napi,
     unsigned int length, gfp_t gfp_mask);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *napi_alloc_skb(struct napi_struct *napi,
          unsigned int length)
{
 return __napi_alloc_skb(napi, length, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}
void napi_consume_skb(struct sk_buff *skb, int budget);

void napi_skb_free_stolen_head(struct sk_buff *skb);
void __kfree_skb_defer(struct sk_buff *skb);

bool dev_page_is_reusable(const struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *pskb_copy(struct sk_buff *skb,
     gfp_t gfp_mask)
{
 return __pskb_copy(skb, skb_headroom(skb), gfp_mask);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *pskb_copy_for_clone(struct sk_buff *skb,
        gfp_t gfp_mask)
{
 return __pskb_copy_fclone(skb, skb_headroom(skb), gfp_mask, true);
}
# 1855 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_clone_writable(const struct sk_buff *skb, unsigned int len)
{
 return !skb_header_cloned(skb) &&
        skb_headroom(skb) + len <= skb->hdr_len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_try_make_writable(struct sk_buff *skb,
     unsigned int write_len)
{
 return skb_cloned(skb) && !skb_clone_writable(skb, write_len) &&
        pskb_expand_head(skb, 0, 0, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __skb_cow(struct sk_buff *skb, unsigned int headroom,
       int cloned)
{
 int delta = 0;

 if (headroom > skb_headroom(skb))
  delta = headroom - skb_headroom(skb);

 if (delta || cloned)
  return pskb_expand_head(skb, ((((delta)) + ((typeof((delta)))((__builtin_choose_expr(((!!(sizeof((typeof(32) *)1 == (typeof((1 << (6))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(32) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((1 << (6))) * 0l)) : (int *)8))))), ((32) > ((1 << (6))) ? (32) : ((1 << (6)))), ({ typeof(32) __UNIQUE_ID___x189 = (32); typeof((1 << (6))) __UNIQUE_ID___y190 = ((1 << (6))); ((__UNIQUE_ID___x189) > (__UNIQUE_ID___y190) ? (__UNIQUE_ID___x189) : (__UNIQUE_ID___y190)); })))) - 1)) & ~((typeof((delta)))((__builtin_choose_expr(((!!(sizeof((typeof(32) *)1 == (typeof((1 << (6))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(32) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((1 << (6))) * 0l)) : (int *)8))))), ((32) > ((1 << (6))) ? (32) : ((1 << (6)))), ({ typeof(32) __UNIQUE_ID___x189 = (32); typeof((1 << (6))) __UNIQUE_ID___y190 = ((1 << (6))); ((__UNIQUE_ID___x189) > (__UNIQUE_ID___y190) ? (__UNIQUE_ID___x189) : (__UNIQUE_ID___y190)); })))) - 1)), 0,
     ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 return 0;
}
# 1894 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_cow(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_cloned(skb));
}
# 1909 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_header_cloned(skb));
}
# 1924 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_padto(struct sk_buff *skb, unsigned int len)
{
 unsigned int size = skb->len;
 if (__builtin_expect(!!(size >= len), 1))
  return 0;
 return skb_pad(skb, len - size);
}
# 1943 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) __skb_put_padto(struct sk_buff *skb,
            unsigned int len,
            bool free_on_error)
{
 unsigned int size = skb->len;

 if (__builtin_expect(!!(size < len), 0)) {
  len -= size;
  if (__skb_pad(skb, len, free_on_error))
   return -12;
  __skb_put(skb, len);
 }
 return 0;
}
# 1968 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) skb_put_padto(struct sk_buff *skb, unsigned int len)
{
 return __skb_put_padto(skb, len, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __skb_linearize(struct sk_buff *skb)
{
 return __pskb_pull_tail(skb, skb->data_len) ? 0 : -12;
}
# 1985 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_linearize(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? __skb_linearize(skb) : 0;
}
# 1997 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_has_shared_frag(const struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) &&
        ((struct skb_shared_info *)(skb_end_pointer(skb)))->flags & SKBFL_SHARED_FRAG;
}
# 2010 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_linearize_cow(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) || skb_cloned(skb) ?
        __skb_linearize(skb) : 0;
}

void *skb_pull_rcsum(struct sk_buff *skb, unsigned int len);

int pskb_trim_rcsum_slow(struct sk_buff *skb, unsigned int len);
# 2029 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pskb_trim_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len >= skb->len), 1))
  return 0;
 return pskb_trim_rcsum_slow(skb, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __skb_trim_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
 __skb_trim(skb, len);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __skb_grow_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
 return __skb_grow(skb, len);
}
# 2103 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_has_frag_list(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_frag_list_init(struct sk_buff *skb)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list = ((void *)0);
}




struct poll_table_struct;

int __skb_wait_for_more_packets(struct sock *sk, struct sk_buff_head *queue,
    int *err, long *timeo_p,
    const struct sk_buff *skb);
struct sk_buff *__skb_try_recv_from_queue(struct sock *sk,
       struct sk_buff_head *queue,
       unsigned int flags,
       int *off, int *err,
       struct sk_buff **last);
struct sk_buff *__skb_try_recv_datagram(struct sock *sk,
     struct sk_buff_head *queue,
     unsigned int flags, int *off, int *err,
     struct sk_buff **last);
struct sk_buff *__skb_recv_datagram(struct sock *sk,
        struct sk_buff_head *sk_queue,
        unsigned int flags, int *off, int *err);
struct sk_buff *skb_recv_datagram(struct sock *sk, unsigned flags, int noblock,
      int *err);
__poll_t datagram_poll(struct file *file, struct socket *sock,
      struct poll_table_struct *wait);
int skb_copy_datagram_iter(const struct sk_buff *from, int offset,
      struct iov_iter *to, int size);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_copy_datagram_msg(const struct sk_buff *from, int offset,
     struct msghdr *msg, int size)
{
 return skb_copy_datagram_iter(from, offset, &msg->msg_iter, size);
}
int skb_copy_and_csum_datagram_msg(struct sk_buff *skb, int hlen,
       struct msghdr *msg);
int skb_copy_and_hash_datagram_iter(const struct sk_buff *skb, int offset,
      struct iov_iter *to, int len,
      struct ahash_request *hash);
int skb_copy_datagram_from_iter(struct sk_buff *skb, int offset,
     struct iov_iter *from, int len);
int zerocopy_sg_from_iter(struct sk_buff *skb, struct iov_iter *frm);
void skb_free_datagram(struct sock *sk, struct sk_buff *skb);
void __skb_free_datagram_locked(struct sock *sk, struct sk_buff *skb, int len);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_free_datagram_locked(struct sock *sk,
         struct sk_buff *skb)
{
 __skb_free_datagram_locked(sk, skb, 0);
}
int skb_kill_datagram(struct sock *sk, struct sk_buff *skb, unsigned int flags);
int skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len);
int skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len);
__wsum skb_copy_and_csum_bits(const struct sk_buff *skb, int offset, u8 *to,
         int len);
int skb_splice_bits(struct sk_buff *skb, struct sock *sk, unsigned int offset,
      struct pipe_inode_info *pipe, unsigned int len,
      unsigned int flags);
int skb_send_sock_locked(struct sock *sk, struct sk_buff *skb, int offset,
    int len);
int skb_send_sock(struct sock *sk, struct sk_buff *skb, int offset, int len);
void skb_copy_and_csum_dev(const struct sk_buff *skb, u8 *to);
unsigned int skb_zerocopy_headlen(const struct sk_buff *from);
int skb_zerocopy(struct sk_buff *to, struct sk_buff *from,
   int len, int hlen);
void skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len);
int skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen);
void skb_scrub_packet(struct sk_buff *skb, bool xnet);
bool skb_gso_validate_network_len(const struct sk_buff *skb, unsigned int mtu);
bool skb_gso_validate_mac_len(const struct sk_buff *skb, unsigned int len);
struct sk_buff *skb_segment(struct sk_buff *skb, netdev_features_t features);
struct sk_buff *skb_segment_list(struct sk_buff *skb, netdev_features_t features,
     unsigned int offset);
struct sk_buff *skb_vlan_untag(struct sk_buff *skb);
int skb_ensure_writable(struct sk_buff *skb, int write_len);
int __skb_vlan_pop(struct sk_buff *skb, u16 *vlan_tci);
int skb_vlan_pop(struct sk_buff *skb);
int skb_vlan_push(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci);
int skb_eth_pop(struct sk_buff *skb);
int skb_eth_push(struct sk_buff *skb, const unsigned char *dst,
   const unsigned char *src);
int skb_mpls_push(struct sk_buff *skb, __be32 mpls_lse, __be16 mpls_proto,
    int mac_len, bool ethernet);
int skb_mpls_pop(struct sk_buff *skb, __be16 next_proto, int mac_len,
   bool ethernet);
int skb_mpls_update_lse(struct sk_buff *skb, __be32 mpls_lse);
int skb_mpls_dec_ttl(struct sk_buff *skb);
struct sk_buff *pskb_extract(struct sk_buff *skb, int off, int to_copy,
        gfp_t gfp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memcpy_from_msg(void *data, struct msghdr *msg, int len)
{
 return copy_from_iter_full(data, len, &msg->msg_iter) ? 0 : -14;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memcpy_to_msg(struct msghdr *msg, void *data, int len)
{
 return copy_to_iter(data, len, &msg->msg_iter) == len ? 0 : -14;
}

struct skb_checksum_ops {
 __wsum (*update)(const void *mem, int len, __wsum wsum);
 __wsum (*combine)(__wsum csum, __wsum csum2, int offset, int len);
};

extern const struct skb_checksum_ops *crc32c_csum_stub __attribute__((__section__(".data..read_mostly")));

__wsum __skb_checksum(const struct sk_buff *skb, int offset, int len,
        __wsum csum, const struct skb_checksum_ops *ops);
__wsum skb_checksum(const struct sk_buff *skb, int offset, int len,
      __wsum csum);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__))
__skb_header_pointer(const struct sk_buff *skb, int offset, int len,
       const void *data, int hlen, void *buffer)
{
 if (__builtin_expect(!!(hlen - offset >= len), 1))
  return (void *)data + offset;

 if (!skb || __builtin_expect(!!(skb_copy_bits(skb, offset, buffer, len) < 0), 0))
  return ((void *)0);

 return buffer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__))
skb_header_pointer(const struct sk_buff *skb, int offset, int len, void *buffer)
{
 return __skb_header_pointer(skb, offset, len, skb->data,
        skb_headlen(skb), buffer);
}
# 2251 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_needs_linearize(struct sk_buff *skb,
           netdev_features_t features)
{
 return skb_is_nonlinear(skb) &&
        ((skb_has_frag_list(skb) && !(features & ((netdev_features_t)1 << (NETIF_F_FRAGLIST_BIT)))) ||
  (((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags && !(features & ((netdev_features_t)1 << (NETIF_F_SG_BIT)))));
}

void skb_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t skb_get_ktime(const struct sk_buff *skb)
{
 return skb->tstamp;
}
# 2275 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_get_timestamp(const struct sk_buff *skb,
         struct __kernel_old_timeval *stamp)
{
 *stamp = ns_to_kernel_old_timeval(skb->tstamp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_get_new_timestamp(const struct sk_buff *skb,
      struct __kernel_sock_timeval *stamp)
{
 struct timespec64 ts = ns_to_timespec64((skb->tstamp));

 stamp->tv_sec = ts.tv_sec;
 stamp->tv_usec = ts.tv_nsec / 1000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_get_timestampns(const struct sk_buff *skb,
           struct __kernel_old_timespec *stamp)
{
 struct timespec64 ts = ns_to_timespec64((skb->tstamp));

 stamp->tv_sec = ts.tv_sec;
 stamp->tv_nsec = ts.tv_nsec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_get_new_timestampns(const struct sk_buff *skb,
        struct __kernel_timespec *stamp)
{
 struct timespec64 ts = ns_to_timespec64((skb->tstamp));

 stamp->tv_sec = ts.tv_sec;
 stamp->tv_nsec = ts.tv_nsec;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __net_timestamp(struct sk_buff *skb)
{
 skb->tstamp = ktime_get_real();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t net_timedelta(ktime_t t)
{
 return ((ktime_get_real()) - (t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t net_invalid_timestamp(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 skb_metadata_len(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->meta_len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_metadata_end(const struct sk_buff *skb)
{
 return skb_mac_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_metadata_set(struct sk_buff *skb, u8 meta_len)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->meta_len = meta_len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_metadata_clear(struct sk_buff *skb)
{
 skb_metadata_set(skb, 0);
}

struct sk_buff *skb_clone_sk(struct sk_buff *skb);
# 2352 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_clone_tx_timestamp(struct sk_buff *skb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_defer_rx_timestamp(struct sk_buff *skb)
{
 return false;
}
# 2375 "./include/linux/skbuff_api.h"
void skb_complete_tx_timestamp(struct sk_buff *skb,
          struct skb_shared_hwtstamps *hwtstamps);

void __skb_tstamp_tx(struct sk_buff *orig_skb, const struct sk_buff *ack_skb,
       struct skb_shared_hwtstamps *hwtstamps,
       struct sock *sk, int tstype);
# 2393 "./include/linux/skbuff_api.h"
void skb_tstamp_tx(struct sk_buff *orig_skb,
     struct skb_shared_hwtstamps *hwtstamps);
# 2408 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_tx_timestamp(struct sk_buff *skb)
{
 skb_clone_tx_timestamp(skb);
 if (((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_SW_TSTAMP)
  skb_tstamp_tx(skb, ((void *)0));
}
# 2422 "./include/linux/skbuff_api.h"
void skb_complete_wifi_ack(struct sk_buff *skb, bool acked);

__sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len);
__sum16 __skb_checksum_complete(struct sk_buff *skb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_csum_unnecessary(const struct sk_buff *skb)
{
 return ((skb->ip_summed == 1) ||
  skb->csum_valid ||
  (skb->ip_summed == 3 &&
   skb_checksum_start_offset(skb) >= 0));
}
# 2451 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 skb_checksum_complete(struct sk_buff *skb)
{
 return skb_csum_unnecessary(skb) ?
        0 : __skb_checksum_complete(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_decr_checksum_unnecessary(struct sk_buff *skb)
{
 if (skb->ip_summed == 1) {
  if (skb->csum_level == 0)
   skb->ip_summed = 0;
  else
   skb->csum_level--;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_incr_checksum_unnecessary(struct sk_buff *skb)
{
 if (skb->ip_summed == 1) {
  if (skb->csum_level < 3)
   skb->csum_level++;
 } else if (skb->ip_summed == 0) {
  skb->ip_summed = 1;
  skb->csum_level = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_reset_checksum_unnecessary(struct sk_buff *skb)
{
 if (skb->ip_summed == 1) {
  skb->ip_summed = 0;
  skb->csum_level = 0;
 }
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __skb_checksum_validate_needed(struct sk_buff *skb,
        bool zero_okay,
        __sum16 check)
{
 if (skb_csum_unnecessary(skb) || (zero_okay && !check)) {
  skb->csum_valid = 1;
  __skb_decr_checksum_unnecessary(skb);
  return false;
 }

 return true;
}
# 2515 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_checksum_complete_unset(struct sk_buff *skb)
{
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum null_compute_pseudo(struct sk_buff *skb, int proto)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nf_conntrack *skb_nfct(const struct sk_buff *skb)
{

 return (void *)(skb->_nfct & ~(7UL));



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long skb_get_nfct(const struct sk_buff *skb)
{

 return skb->_nfct;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_nfct(struct sk_buff *skb, unsigned long nfct)
{

 skb->slow_gro |= !!nfct;
 skb->_nfct = nfct;

}
# 2626 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_ext_put(struct sk_buff *skb) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_ext_reset(struct sk_buff *skb) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_ext_del(struct sk_buff *skb, int unused) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_ext_copy(struct sk_buff *d, const struct sk_buff *s) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_ext_copy(struct sk_buff *dst, const struct sk_buff *s) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_has_extensions(struct sk_buff *skb) { return false; }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipvs_reset(struct sk_buff *skb)
{



}
# 2652 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_copy_secmark(struct sk_buff *to, const struct sk_buff *from)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_init_secmark(struct sk_buff *skb)
{ }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int secpath_exists(const struct sk_buff *skb)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_irq_freeable(const struct sk_buff *skb)
{
 return !skb->destructor &&
  !secpath_exists(skb) &&
  !skb_nfct(skb) &&
  !skb->_skb_refdst &&
  !skb_has_frag_list(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
 skb->queue_mapping = queue_mapping;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 skb_get_queue_mapping(const struct sk_buff *skb)
{
 return skb->queue_mapping;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_copy_queue_mapping(struct sk_buff *to, const struct sk_buff *from)
{
 to->queue_mapping = from->queue_mapping;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
 skb->queue_mapping = rx_queue + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 skb_get_rx_queue(const struct sk_buff *skb)
{
 return skb->queue_mapping - 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_rx_queue_recorded(const struct sk_buff *skb)
{
 return skb->queue_mapping != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_dst_pending_confirm(struct sk_buff *skb, u32 val)
{
 skb->dst_pending_confirm = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_get_dst_pending_confirm(const struct sk_buff *skb)
{
 return skb->dst_pending_confirm != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sec_path *skb_sec_path(const struct sk_buff *skb)
{



 return ((void *)0);

}







struct skb_gso_cb {
 union {
  int mac_offset;
  int data_offset;
 };
 int encap_level;
 __wsum csum;
 __u16 csum_start;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_tnl_header_len(const struct sk_buff *inner_skb)
{
 return (skb_mac_header(inner_skb) - inner_skb->head) -
  ((struct skb_gso_cb *)((inner_skb)->cb + 32))->mac_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gso_pskb_expand_head(struct sk_buff *skb, int extra)
{
 int new_headroom, headroom;
 int ret;

 headroom = skb_headroom(skb);
 ret = pskb_expand_head(skb, extra, 0, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 if (ret)
  return ret;

 new_headroom = skb_headroom(skb);
 ((struct skb_gso_cb *)((skb)->cb + 32))->mac_offset += (new_headroom - headroom);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_is_gso(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_size;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_is_gso_v6(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type & SKB_GSO_TCPV6;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_is_gso_sctp(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type & SKB_GSO_SCTP;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_is_gso_tcp(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gso_reset(struct sk_buff *skb)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_size = 0;
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_segs = 0;
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_increase_gso_size(struct skb_shared_info *shinfo,
      u16 increment)
{
 if (({ int __ret_warn_on = !!(shinfo->gso_size == 0xFFFF); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 2798; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return;
 shinfo->gso_size += increment;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_decrease_gso_size(struct skb_shared_info *shinfo,
      u16 decrement)
{
 if (({ int __ret_warn_on = !!(shinfo->gso_size == 0xFFFF); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/skbuff_api.h\"; .popsection; .long 14472b - 14470b; .short 2806; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return;
 shinfo->gso_size -= decrement;
}

void __skb_warn_lro_forwarding(const struct sk_buff *skb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_warn_if_lro(const struct sk_buff *skb)
{


 const struct skb_shared_info *shinfo = ((struct skb_shared_info *)(skb_end_pointer(skb)));

 if (skb_is_nonlinear(skb) && shinfo->gso_size != 0 &&
     __builtin_expect(!!(shinfo->gso_type == 0), 0)) {
  __skb_warn_lro_forwarding(skb);
  return true;
 }
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_forward_csum(struct sk_buff *skb)
{

 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}
# 2842 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_checksum_none_assert(const struct sk_buff *skb)
{



}

bool skb_partial_csum_set(struct sk_buff *skb, u16 start, u16 off);

int skb_checksum_setup(struct sk_buff *skb, bool recalculate);
struct sk_buff *skb_checksum_trimmed(struct sk_buff *skb,
         unsigned int transport_len,
         __sum16(*skb_chkf)(struct sk_buff *skb));
# 2865 "./include/linux/skbuff_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_head_is_locked(const struct sk_buff *skb)
{
 return !skb->head_frag || skb_cloned(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_is_redirected(const struct sk_buff *skb)
{
 return skb->redirected;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_redirected(struct sk_buff *skb, bool from_ingress)
{
 skb->redirected = 1;





}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_reset_redirect(struct sk_buff *skb)
{
 skb->redirected = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_csum_is_sctp(struct sk_buff *skb)
{
 return skb->csum_not_inet;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_set_kcov_handle(struct sk_buff *skb,
           const u64 kcov_handle)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 skb_get_kcov_handle(struct sk_buff *skb)
{



 return 0;

}
# 12 "./include/net/netlink_api.h" 2
# 274 "./include/net/netlink_api.h"
enum netlink_validation {
 NL_VALIDATE_LIBERAL = 0,
 NL_VALIDATE_TRAILING = ((((1UL))) << (0)),
 NL_VALIDATE_MAXTYPE = ((((1UL))) << (1)),
 NL_VALIDATE_UNSPEC = ((((1UL))) << (2)),
 NL_VALIDATE_STRICT_ATTRS = ((((1UL))) << (3)),
 NL_VALIDATE_NESTED = ((((1UL))) << (4)),
};
# 291 "./include/net/netlink_api.h"
int netlink_rcv_skb(struct sk_buff *skb,
      int (*cb)(struct sk_buff *, struct nlmsghdr *,
         struct netlink_ext_ack *));
int nlmsg_notify(struct sock *sk, struct sk_buff *skb, u32 portid,
   unsigned int group, int report, gfp_t flags);

int __nla_validate(const struct nlattr *head, int len, int maxtype,
     const struct nla_policy *policy, unsigned int validate,
     struct netlink_ext_ack *extack);
int __nla_parse(struct nlattr **tb, int maxtype, const struct nlattr *head,
  int len, const struct nla_policy *policy, unsigned int validate,
  struct netlink_ext_ack *extack);
int nla_policy_len(const struct nla_policy *, int);
struct nlattr *nla_find(const struct nlattr *head, int len, int attrtype);
ssize_t nla_strscpy(char *dst, const struct nlattr *nla, size_t dstsize);
char *nla_strdup(const struct nlattr *nla, gfp_t flags);
int nla_memcpy(void *dest, const struct nlattr *src, int count);
int nla_memcmp(const struct nlattr *nla, const void *data, size_t size);
int nla_strcmp(const struct nlattr *nla, const char *str);
struct nlattr *__nla_reserve(struct sk_buff *skb, int attrtype, int attrlen);
struct nlattr *__nla_reserve_64bit(struct sk_buff *skb, int attrtype,
       int attrlen, int padattr);
void *__nla_reserve_nohdr(struct sk_buff *skb, int attrlen);
struct nlattr *nla_reserve(struct sk_buff *skb, int attrtype, int attrlen);
struct nlattr *nla_reserve_64bit(struct sk_buff *skb, int attrtype,
     int attrlen, int padattr);
void *nla_reserve_nohdr(struct sk_buff *skb, int attrlen);
void __nla_put(struct sk_buff *skb, int attrtype, int attrlen,
        const void *data);
void __nla_put_64bit(struct sk_buff *skb, int attrtype, int attrlen,
       const void *data, int padattr);
void __nla_put_nohdr(struct sk_buff *skb, int attrlen, const void *data);
int nla_put(struct sk_buff *skb, int attrtype, int attrlen, const void *data);
int nla_put_64bit(struct sk_buff *skb, int attrtype, int attrlen,
    const void *data, int padattr);
int nla_put_nohdr(struct sk_buff *skb, int attrlen, const void *data);
int nla_append(struct sk_buff *skb, int attrlen, const void *data);
# 337 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_msg_size(int payload)
{
 return ((int) ( ((sizeof(struct nlmsghdr))+4U -1) & ~(4U -1) )) + payload;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_total_size(int payload)
{
 return ( ((nlmsg_msg_size(payload))+4U -1) & ~(4U -1) );
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_padlen(int payload)
{
 return nlmsg_total_size(payload) - nlmsg_msg_size(payload);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *nlmsg_data(const struct nlmsghdr *nlh)
{
 return (unsigned char *) nlh + ((int) ( ((sizeof(struct nlmsghdr))+4U -1) & ~(4U -1) ));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_len(const struct nlmsghdr *nlh)
{
 return nlh->nlmsg_len - ((int) ( ((sizeof(struct nlmsghdr))+4U -1) & ~(4U -1) ));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlattr *nlmsg_attrdata(const struct nlmsghdr *nlh,
         int hdrlen)
{
 unsigned char *data = nlmsg_data(nlh);
 return (struct nlattr *) (data + ( ((hdrlen)+4U -1) & ~(4U -1) ));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_attrlen(const struct nlmsghdr *nlh, int hdrlen)
{
 return nlmsg_len(nlh) - ( ((hdrlen)+4U -1) & ~(4U -1) );
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_ok(const struct nlmsghdr *nlh, int remaining)
{
 return (remaining >= (int) sizeof(struct nlmsghdr) &&
  nlh->nlmsg_len >= sizeof(struct nlmsghdr) &&
  nlh->nlmsg_len <= remaining);
}
# 420 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlmsghdr *
nlmsg_next(const struct nlmsghdr *nlh, int *remaining)
{
 int totlen = ( ((nlh->nlmsg_len)+4U -1) & ~(4U -1) );

 *remaining -= totlen;

 return (struct nlmsghdr *) ((unsigned char *) nlh + totlen);
}
# 446 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_parse(struct nlattr **tb, int maxtype,
       const struct nlattr *head, int len,
       const struct nla_policy *policy,
       struct netlink_ext_ack *extack)
{
 return __nla_parse(tb, maxtype, head, len, policy,
      (NL_VALIDATE_TRAILING | NL_VALIDATE_MAXTYPE | NL_VALIDATE_UNSPEC | NL_VALIDATE_STRICT_ATTRS | NL_VALIDATE_NESTED), extack);
}
# 471 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_parse_deprecated(struct nlattr **tb, int maxtype,
           const struct nlattr *head, int len,
           const struct nla_policy *policy,
           struct netlink_ext_ack *extack)
{
 return __nla_parse(tb, maxtype, head, len, policy,
      NL_VALIDATE_LIBERAL, extack);
}
# 496 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_parse_deprecated_strict(struct nlattr **tb, int maxtype,
           const struct nlattr *head,
           int len,
           const struct nla_policy *policy,
           struct netlink_ext_ack *extack)
{
 return __nla_parse(tb, maxtype, head, len, policy,
      (NL_VALIDATE_TRAILING | NL_VALIDATE_MAXTYPE), extack);
}
# 518 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nlmsg_parse(const struct nlmsghdr *nlh, int hdrlen,
    struct nlattr *tb[], int maxtype,
    const struct nla_policy *policy,
    unsigned int validate,
    struct netlink_ext_ack *extack)
{
 if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen)) {
  do { static const char __msg[] = "Invalid header length"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 return __nla_parse(tb, maxtype, nlmsg_attrdata(nlh, hdrlen),
      nlmsg_attrlen(nlh, hdrlen), policy, validate,
      extack);
}
# 544 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_parse(const struct nlmsghdr *nlh, int hdrlen,
         struct nlattr *tb[], int maxtype,
         const struct nla_policy *policy,
         struct netlink_ext_ack *extack)
{
 return __nlmsg_parse(nlh, hdrlen, tb, maxtype, policy,
        (NL_VALIDATE_TRAILING | NL_VALIDATE_MAXTYPE | NL_VALIDATE_UNSPEC | NL_VALIDATE_STRICT_ATTRS | NL_VALIDATE_NESTED), extack);
}
# 563 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_parse_deprecated(const struct nlmsghdr *nlh, int hdrlen,
      struct nlattr *tb[], int maxtype,
      const struct nla_policy *policy,
      struct netlink_ext_ack *extack)
{
 return __nlmsg_parse(nlh, hdrlen, tb, maxtype, policy,
        NL_VALIDATE_LIBERAL, extack);
}
# 582 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
nlmsg_parse_deprecated_strict(const struct nlmsghdr *nlh, int hdrlen,
         struct nlattr *tb[], int maxtype,
         const struct nla_policy *policy,
         struct netlink_ext_ack *extack)
{
 return __nlmsg_parse(nlh, hdrlen, tb, maxtype, policy,
        (NL_VALIDATE_TRAILING | NL_VALIDATE_MAXTYPE), extack);
}
# 600 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlattr *nlmsg_find_attr(const struct nlmsghdr *nlh,
          int hdrlen, int attrtype)
{
 return nla_find(nlmsg_attrdata(nlh, hdrlen),
   nlmsg_attrlen(nlh, hdrlen), attrtype);
}
# 622 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_validate_deprecated(const struct nlattr *head, int len,
       int maxtype,
       const struct nla_policy *policy,
       struct netlink_ext_ack *extack)
{
 return __nla_validate(head, len, maxtype, policy, NL_VALIDATE_LIBERAL,
         extack);
}
# 645 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_validate(const struct nlattr *head, int len, int maxtype,
          const struct nla_policy *policy,
          struct netlink_ext_ack *extack)
{
 return __nla_validate(head, len, maxtype, policy, (NL_VALIDATE_TRAILING | NL_VALIDATE_MAXTYPE | NL_VALIDATE_UNSPEC | NL_VALIDATE_STRICT_ATTRS | NL_VALIDATE_NESTED),
         extack);
}
# 661 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_validate_deprecated(const struct nlmsghdr *nlh,
         int hdrlen, int maxtype,
         const struct nla_policy *policy,
         struct netlink_ext_ack *extack)
{
 if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen))
  return -22;

 return __nla_validate(nlmsg_attrdata(nlh, hdrlen),
         nlmsg_attrlen(nlh, hdrlen), maxtype,
         policy, NL_VALIDATE_LIBERAL, extack);
}
# 682 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_report(const struct nlmsghdr *nlh)
{
 return nlh ? !!(nlh->nlmsg_flags & 0x08) : 0;
}
# 710 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlmsghdr *nlmsg_put(struct sk_buff *skb, u32 portid, u32 seq,
      int type, int payload, int flags)
{
 if (__builtin_expect(!!(skb_tailroom(skb) < nlmsg_total_size(payload)), 0))
  return ((void *)0);

 return __nlmsg_put(skb, portid, seq, type, payload, flags);
}
# 730 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlmsghdr *nlmsg_put_answer(struct sk_buff *skb,
      struct netlink_callback *cb,
      int type, int payload,
      int flags)
{
 return nlmsg_put(skb, (*(struct netlink_skb_parms*)&((cb->skb)->cb)).portid, cb->nlh->nlmsg_seq,
    type, payload, flags);
}
# 747 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *nlmsg_new(size_t payload, gfp_t flags)
{
 return alloc_skb(nlmsg_total_size(payload), flags);
}
# 761 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void nlmsg_end(struct sk_buff *skb, struct nlmsghdr *nlh)
{
 nlh->nlmsg_len = skb_tail_pointer(skb) - (unsigned char *)nlh;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *nlmsg_get_pos(struct sk_buff *skb)
{
 return skb_tail_pointer(skb);
}
# 784 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void nlmsg_trim(struct sk_buff *skb, const void *mark)
{
 if (mark) {
  ({ int __ret_warn_on = !!((unsigned char *) mark < skb->data); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/net/netlink_api.h\"; .popsection; .long 14472b - 14470b; .short 787; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
  skb_trim(skb, (unsigned char *) mark - skb->data);
 }
}
# 800 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void nlmsg_cancel(struct sk_buff *skb, struct nlmsghdr *nlh)
{
 nlmsg_trim(skb, nlh);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void nlmsg_free(struct sk_buff *skb)
{
 kfree_skb(skb);
}
# 822 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_multicast(struct sock *sk, struct sk_buff *skb,
      u32 portid, unsigned int group, gfp_t flags)
{
 int err;

 (*(struct netlink_skb_parms*)&((skb)->cb)).dst_group = group;

 err = netlink_broadcast(sk, skb, portid, group, flags);
 if (err > 0)
  err = 0;

 return err;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nlmsg_unicast(struct sock *sk, struct sk_buff *skb, u32 portid)
{
 int err;

 err = netlink_unicast(sk, skb, portid, 0x40);
 if (err > 0)
  err = 0;

 return err;
}
# 880 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
nl_dump_check_consistent(struct netlink_callback *cb,
    struct nlmsghdr *nlh)
{
 if (cb->prev_seq && cb->seq != cb->prev_seq)
  nlh->nlmsg_flags |= 0x10;
 cb->prev_seq = cb->seq;
}
# 897 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_attr_size(int payload)
{
 return ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1))) + payload;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_total_size(int payload)
{
 return (((nla_attr_size(payload)) + 4 - 1) & ~(4 - 1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_padlen(int payload)
{
 return nla_total_size(payload) - nla_attr_size(payload);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_type(const struct nlattr *nla)
{
 return nla->nla_type & ~((1 << 15) | (1 << 14));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *nla_data(const struct nlattr *nla)
{
 return (char *) nla + ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1)));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_len(const struct nlattr *nla)
{
 return nla->nla_len - ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1)));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_ok(const struct nlattr *nla, int remaining)
{
 return remaining >= (int) sizeof(*nla) &&
        nla->nla_len >= sizeof(*nla) &&
        nla->nla_len <= remaining;
}
# 967 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlattr *nla_next(const struct nlattr *nla, int *remaining)
{
 unsigned int totlen = (((nla->nla_len) + 4 - 1) & ~(4 - 1));

 *remaining -= totlen;
 return (struct nlattr *) ((char *) nla + totlen);
}
# 982 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlattr *
nla_find_nested(const struct nlattr *nla, int attrtype)
{
 return nla_find(nla_data(nla), nla_len(nla), attrtype);
}
# 998 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_parse_nested(struct nlattr *tb[], int maxtype,
       const struct nlattr *nla,
       const struct nla_policy *policy,
       struct netlink_ext_ack *extack)
{
 if (!(nla->nla_type & (1 << 15))) {
  do { static const char __msg[] = "NLA_F_NESTED is missing"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) { __extack->_msg = __msg; __extack->bad_attr = (nla); __extack->policy = (((void *)0)); } } while (0);
  return -22;
 }

 return __nla_parse(tb, maxtype, nla_data(nla), nla_len(nla), policy,
      (NL_VALIDATE_TRAILING | NL_VALIDATE_MAXTYPE | NL_VALIDATE_UNSPEC | NL_VALIDATE_STRICT_ATTRS | NL_VALIDATE_NESTED), extack);
}
# 1022 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_parse_nested_deprecated(struct nlattr *tb[], int maxtype,
           const struct nlattr *nla,
           const struct nla_policy *policy,
           struct netlink_ext_ack *extack)
{
 return __nla_parse(tb, maxtype, nla_data(nla), nla_len(nla), policy,
      NL_VALIDATE_LIBERAL, extack);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_u8(struct sk_buff *skb, int attrtype, u8 value)
{

 u8 tmp = value;

 return nla_put(skb, attrtype, sizeof(u8), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_u16(struct sk_buff *skb, int attrtype, u16 value)
{
 u16 tmp = value;

 return nla_put(skb, attrtype, sizeof(u16), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_be16(struct sk_buff *skb, int attrtype, __be16 value)
{
 __be16 tmp = value;

 return nla_put(skb, attrtype, sizeof(__be16), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_net16(struct sk_buff *skb, int attrtype, __be16 value)
{
 __be16 tmp = value;

 return nla_put_be16(skb, attrtype | (1 << 14), tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_le16(struct sk_buff *skb, int attrtype, __le16 value)
{
 __le16 tmp = value;

 return nla_put(skb, attrtype, sizeof(__le16), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_u32(struct sk_buff *skb, int attrtype, u32 value)
{
 u32 tmp = value;

 return nla_put(skb, attrtype, sizeof(u32), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_be32(struct sk_buff *skb, int attrtype, __be32 value)
{
 __be32 tmp = value;

 return nla_put(skb, attrtype, sizeof(__be32), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_net32(struct sk_buff *skb, int attrtype, __be32 value)
{
 __be32 tmp = value;

 return nla_put_be32(skb, attrtype | (1 << 14), tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_le32(struct sk_buff *skb, int attrtype, __le32 value)
{
 __le32 tmp = value;

 return nla_put(skb, attrtype, sizeof(__le32), &tmp);
}
# 1156 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_u64_64bit(struct sk_buff *skb, int attrtype,
        u64 value, int padattr)
{
 u64 tmp = value;

 return nla_put_64bit(skb, attrtype, sizeof(u64), &tmp, padattr);
}
# 1171 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_be64(struct sk_buff *skb, int attrtype, __be64 value,
          int padattr)
{
 __be64 tmp = value;

 return nla_put_64bit(skb, attrtype, sizeof(__be64), &tmp, padattr);
}
# 1186 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_net64(struct sk_buff *skb, int attrtype, __be64 value,
    int padattr)
{
 __be64 tmp = value;

 return nla_put_be64(skb, attrtype | (1 << 14), tmp,
       padattr);
}
# 1202 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_le64(struct sk_buff *skb, int attrtype, __le64 value,
          int padattr)
{
 __le64 tmp = value;

 return nla_put_64bit(skb, attrtype, sizeof(__le64), &tmp, padattr);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_s8(struct sk_buff *skb, int attrtype, s8 value)
{
 s8 tmp = value;

 return nla_put(skb, attrtype, sizeof(s8), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_s16(struct sk_buff *skb, int attrtype, s16 value)
{
 s16 tmp = value;

 return nla_put(skb, attrtype, sizeof(s16), &tmp);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_s32(struct sk_buff *skb, int attrtype, s32 value)
{
 s32 tmp = value;

 return nla_put(skb, attrtype, sizeof(s32), &tmp);
}
# 1256 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_s64(struct sk_buff *skb, int attrtype, s64 value,
         int padattr)
{
 s64 tmp = value;

 return nla_put_64bit(skb, attrtype, sizeof(s64), &tmp, padattr);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_string(struct sk_buff *skb, int attrtype,
     const char *str)
{
 return nla_put(skb, attrtype, strlen(str) + 1, str);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_flag(struct sk_buff *skb, int attrtype)
{
 return nla_put(skb, attrtype, 0, ((void *)0));
}
# 1293 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_msecs(struct sk_buff *skb, int attrtype,
    unsigned long njiffies, int padattr)
{
 u64 tmp = jiffies_to_msecs(njiffies);

 return nla_put_64bit(skb, attrtype, sizeof(u64), &tmp, padattr);
}
# 1308 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_in_addr(struct sk_buff *skb, int attrtype,
      __be32 addr)
{
 __be32 tmp = addr;

 return nla_put_be32(skb, attrtype, tmp);
}
# 1323 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_in6_addr(struct sk_buff *skb, int attrtype,
       const struct in6_addr *addr)
{
 return nla_put(skb, attrtype, sizeof(*addr), addr);
}
# 1336 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_put_bitfield32(struct sk_buff *skb, int attrtype,
         __u32 value, __u32 selector)
{
 struct nla_bitfield32 tmp = { value, selector, };

 return nla_put(skb, attrtype, sizeof(tmp), &tmp);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 nla_get_u32(const struct nlattr *nla)
{
 return *(u32 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 nla_get_be32(const struct nlattr *nla)
{
 return *(__be32 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __le32 nla_get_le32(const struct nlattr *nla)
{
 return *(__le32 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 nla_get_u16(const struct nlattr *nla)
{
 return *(u16 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be16 nla_get_be16(const struct nlattr *nla)
{
 return *(__be16 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __le16 nla_get_le16(const struct nlattr *nla)
{
 return *(__le16 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 nla_get_u8(const struct nlattr *nla)
{
 return *(u8 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 nla_get_u64(const struct nlattr *nla)
{
 u64 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));

 return tmp;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be64 nla_get_be64(const struct nlattr *nla)
{
 __be64 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));

 return tmp;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __le64 nla_get_le64(const struct nlattr *nla)
{
 return *(__le64 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s32 nla_get_s32(const struct nlattr *nla)
{
 return *(s32 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s16 nla_get_s16(const struct nlattr *nla)
{
 return *(s16 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s8 nla_get_s8(const struct nlattr *nla)
{
 return *(s8 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 nla_get_s64(const struct nlattr *nla)
{
 s64 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));

 return tmp;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_get_flag(const struct nlattr *nla)
{
 return !!nla;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long nla_get_msecs(const struct nlattr *nla)
{
 u64 msecs = nla_get_u64(nla);

 return msecs_to_jiffies((unsigned long) msecs);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 nla_get_in_addr(const struct nlattr *nla)
{
 return *(__be32 *) nla_data(nla);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct in6_addr nla_get_in6_addr(const struct nlattr *nla)
{
 struct in6_addr tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));
 return tmp;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nla_bitfield32 nla_get_bitfield32(const struct nlattr *nla)
{
 struct nla_bitfield32 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));
 return tmp;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *nla_memdup(const struct nlattr *src, gfp_t gfp)
{
 return kmemdup(nla_data(src), nla_len(src), gfp);
}
# 1558 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlattr *nla_nest_start_noflag(struct sk_buff *skb,
         int attrtype)
{
 struct nlattr *start = (struct nlattr *)skb_tail_pointer(skb);

 if (nla_put(skb, attrtype, 0, ((void *)0)) < 0)
  return ((void *)0);

 return start;
}
# 1579 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct nlattr *nla_nest_start(struct sk_buff *skb, int attrtype)
{
 return nla_nest_start_noflag(skb, attrtype | (1 << 15));
}
# 1594 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_nest_end(struct sk_buff *skb, struct nlattr *start)
{
 start->nla_len = skb_tail_pointer(skb) - (unsigned char *)start;
 return skb->len;
}
# 1608 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void nla_nest_cancel(struct sk_buff *skb, struct nlattr *start)
{
 nlmsg_trim(skb, start);
}
# 1627 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nla_validate_nested(const struct nlattr *start, int maxtype,
     const struct nla_policy *policy,
     unsigned int validate,
     struct netlink_ext_ack *extack)
{
 return __nla_validate(nla_data(start), nla_len(start), maxtype, policy,
         validate, extack);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
nla_validate_nested(const struct nlattr *start, int maxtype,
      const struct nla_policy *policy,
      struct netlink_ext_ack *extack)
{
 return __nla_validate_nested(start, maxtype, policy,
         (NL_VALIDATE_TRAILING | NL_VALIDATE_MAXTYPE | NL_VALIDATE_UNSPEC | NL_VALIDATE_STRICT_ATTRS | NL_VALIDATE_NESTED), extack);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
nla_validate_nested_deprecated(const struct nlattr *start, int maxtype,
          const struct nla_policy *policy,
          struct netlink_ext_ack *extack)
{
 return __nla_validate_nested(start, maxtype, policy,
         NL_VALIDATE_LIBERAL, extack);
}
# 1661 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool nla_need_padding_for_64bit(struct sk_buff *skb)
{
# 1672 "./include/net/netlink_api.h"
 return false;
}
# 1687 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_align_64bit(struct sk_buff *skb, int padattr)
{
 if (nla_need_padding_for_64bit(skb) &&
     !nla_reserve(skb, padattr, 0))
  return -90;

 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nla_total_size_64bit(int payload)
{
 return (((nla_attr_size(payload)) + 4 - 1) & ~(4 - 1))



  ;
}
# 1735 "./include/net/netlink_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool nla_is_last(const struct nlattr *nla, int rem)
{
 return nla->nla_len == rem;
}

void nla_get_range_unsigned(const struct nla_policy *pt,
       struct netlink_range_validation *range);
void nla_get_range_signed(const struct nla_policy *pt,
     struct netlink_range_validation_signed *range);

struct netlink_policy_dump_state;

int netlink_policy_dump_add_policy(struct netlink_policy_dump_state **pstate,
       const struct nla_policy *policy,
       unsigned int maxtype);
int netlink_policy_dump_get_policy_idx(struct netlink_policy_dump_state *state,
           const struct nla_policy *policy,
           unsigned int maxtype);
bool netlink_policy_dump_loop(struct netlink_policy_dump_state *state);
int netlink_policy_dump_write(struct sk_buff *skb,
         struct netlink_policy_dump_state *state);
int netlink_policy_dump_attr_size_estimate(const struct nla_policy *pt);
int netlink_policy_dump_write_attr(struct sk_buff *skb,
       const struct nla_policy *pt,
       int nestattr);
void netlink_policy_dump_free(struct netlink_policy_dump_state *state);
# 9 "./include/net/rtnetlink_api.h" 2

typedef int (*rtnl_doit_func)(struct sk_buff *, struct nlmsghdr *,
         struct netlink_ext_ack *);
typedef int (*rtnl_dumpit_func)(struct sk_buff *, struct netlink_callback *);

void rtnl_register(int protocol, int msgtype,
     rtnl_doit_func, rtnl_dumpit_func, unsigned int flags);
int rtnl_register_module(struct module *owner, int protocol, int msgtype,
    rtnl_doit_func, rtnl_dumpit_func, unsigned int flags);
int rtnl_unregister(int protocol, int msgtype);
void rtnl_unregister_all(int protocol);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rtnl_msg_family(const struct nlmsghdr *nlh)
{
 if (nlmsg_len(nlh) >= sizeof(struct rtgenmsg))
  return ((struct rtgenmsg *) nlmsg_data(nlh))->rtgen_family;
 else
  return 0;
}
# 61 "./include/net/rtnetlink_api.h"
struct rtnl_link_ops {
 struct list_head list;

 const char *kind;

 size_t priv_size;
 struct net_device *(*alloc)(struct nlattr *tb[],
       const char *ifname,
       unsigned char name_assign_type,
       unsigned int num_tx_queues,
       unsigned int num_rx_queues);
 void (*setup)(struct net_device *dev);

 bool netns_refund;
 unsigned int maxtype;
 const struct nla_policy *policy;
 int (*validate)(struct nlattr *tb[],
         struct nlattr *data[],
         struct netlink_ext_ack *extack);

 int (*newlink)(struct net *src_net,
        struct net_device *dev,
        struct nlattr *tb[],
        struct nlattr *data[],
        struct netlink_ext_ack *extack);
 int (*changelink)(struct net_device *dev,
           struct nlattr *tb[],
           struct nlattr *data[],
           struct netlink_ext_ack *extack);
 void (*dellink)(struct net_device *dev,
        struct list_head *head);

 size_t (*get_size)(const struct net_device *dev);
 int (*fill_info)(struct sk_buff *skb,
          const struct net_device *dev);

 size_t (*get_xstats_size)(const struct net_device *dev);
 int (*fill_xstats)(struct sk_buff *skb,
            const struct net_device *dev);
 unsigned int (*get_num_tx_queues)(void);
 unsigned int (*get_num_rx_queues)(void);

 unsigned int slave_maxtype;
 const struct nla_policy *slave_policy;
 int (*slave_changelink)(struct net_device *dev,
          struct net_device *slave_dev,
          struct nlattr *tb[],
          struct nlattr *data[],
          struct netlink_ext_ack *extack);
 size_t (*get_slave_size)(const struct net_device *dev,
        const struct net_device *slave_dev);
 int (*fill_slave_info)(struct sk_buff *skb,
         const struct net_device *dev,
         const struct net_device *slave_dev);
 struct net *(*get_link_net)(const struct net_device *dev);
 size_t (*get_linkxstats_size)(const struct net_device *dev,
             int attr);
 int (*fill_linkxstats)(struct sk_buff *skb,
         const struct net_device *dev,
         int *prividx, int attr);
};

int __rtnl_link_register(struct rtnl_link_ops *ops);
void __rtnl_link_unregister(struct rtnl_link_ops *ops);

int rtnl_link_register(struct rtnl_link_ops *ops);
void rtnl_link_unregister(struct rtnl_link_ops *ops);
# 143 "./include/net/rtnetlink_api.h"
struct rtnl_af_ops {
 struct list_head list;
 int family;

 int (*fill_link_af)(struct sk_buff *skb,
      const struct net_device *dev,
      u32 ext_filter_mask);
 size_t (*get_link_af_size)(const struct net_device *dev,
          u32 ext_filter_mask);

 int (*validate_link_af)(const struct net_device *dev,
          const struct nlattr *attr,
          struct netlink_ext_ack *extack);
 int (*set_link_af)(struct net_device *dev,
            const struct nlattr *attr,
            struct netlink_ext_ack *extack);
 int (*fill_stats_af)(struct sk_buff *skb,
       const struct net_device *dev);
 size_t (*get_stats_af_size)(const struct net_device *dev);
};

void rtnl_af_register(struct rtnl_af_ops *ops);
void rtnl_af_unregister(struct rtnl_af_ops *ops);

struct net *rtnl_link_get_net(struct net *src_net, struct nlattr *tb[]);
struct net_device *rtnl_create_link(struct net *net, const char *ifname,
        unsigned char name_assign_type,
        const struct rtnl_link_ops *ops,
        struct nlattr *tb[],
        struct netlink_ext_ack *extack);
int rtnl_delete_link(struct net_device *dev);
int rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm);

int rtnl_nla_parse_ifla(struct nlattr **tb, const struct nlattr *head, int len,
   struct netlink_ext_ack *exterr);
struct net *rtnl_get_net_ns_capable(struct sock *sk, int netnsid);
# 17 "net/core/neighbour.c" 2
# 1 "./include/net/net_namespace_api.h" 1







# 1 "./include/net/net_namespace_types.h" 1
# 10 "./include/net/net_namespace_types.h"
# 1 "./include/linux/refcount.h" 1
# 11 "./include/net/net_namespace_types.h" 2
# 1 "./include/linux/sysctl.h" 1
# 28 "./include/linux/sysctl.h"
# 1 "./include/uapi/linux/sysctl.h" 1
# 35 "./include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
 NET_IPV4_CONF_ARP_EVICT_NOCARRIER=23,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 NET_IPV6_RA_DEFRTR_METRIC=28,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 29 "./include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler(struct ctl_table *ctl, int write, void *buffer,
  size_t *lenp, loff_t *ppos);

int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dobool(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec_minmax(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dou8vec_minmax(struct ctl_table *table, int write, void *buffer,
   size_t *lenp, loff_t *ppos);
int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int, void *,
  size_t *, loff_t *);
int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_do_static_key(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 96 "./include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};
# 109 "./include/linux/sysctl.h"
struct ctl_table {
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header {
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct kuid_struct;
struct kgid_struct;

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         struct kuid_struct *uid, struct kgid_struct *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);
void do_sysctl_args(void);

extern int pwrsw_enabled;
extern int unaligned_enabled;
extern int unaligned_dump_stack;
extern int no_unaligned_warning;

extern struct ctl_table sysctl_mount_point[];
extern struct ctl_table random_table[];
extern struct ctl_table firmware_config_table[];
extern struct ctl_table epoll_table[];
# 242 "./include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 12 "./include/net/net_namespace_types.h" 2




# 1 "./include/net/netns/core.h" 1




struct ctl_table_header;
struct prot_inuse;

struct netns_core {

 struct ctl_table_header *sysctl_hdr;

 int sysctl_somaxconn;


 int *sock_inuse;
 struct prot_inuse *prot_inuse;

};
# 17 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/mib.h" 1




# 1 "./include/net/snmp.h" 1
# 18 "./include/net/snmp.h"
# 1 "./include/uapi/linux/snmp.h" 1
# 19 "./include/uapi/linux/snmp.h"
enum
{
 IPSTATS_MIB_NUM = 0,

 IPSTATS_MIB_INPKTS,
 IPSTATS_MIB_INOCTETS,
 IPSTATS_MIB_INDELIVERS,
 IPSTATS_MIB_OUTFORWDATAGRAMS,
 IPSTATS_MIB_OUTPKTS,
 IPSTATS_MIB_OUTOCTETS,

 IPSTATS_MIB_INHDRERRORS,
 IPSTATS_MIB_INTOOBIGERRORS,
 IPSTATS_MIB_INNOROUTES,
 IPSTATS_MIB_INADDRERRORS,
 IPSTATS_MIB_INUNKNOWNPROTOS,
 IPSTATS_MIB_INTRUNCATEDPKTS,
 IPSTATS_MIB_INDISCARDS,
 IPSTATS_MIB_OUTDISCARDS,
 IPSTATS_MIB_OUTNOROUTES,
 IPSTATS_MIB_REASMTIMEOUT,
 IPSTATS_MIB_REASMREQDS,
 IPSTATS_MIB_REASMOKS,
 IPSTATS_MIB_REASMFAILS,
 IPSTATS_MIB_FRAGOKS,
 IPSTATS_MIB_FRAGFAILS,
 IPSTATS_MIB_FRAGCREATES,
 IPSTATS_MIB_INMCASTPKTS,
 IPSTATS_MIB_OUTMCASTPKTS,
 IPSTATS_MIB_INBCASTPKTS,
 IPSTATS_MIB_OUTBCASTPKTS,
 IPSTATS_MIB_INMCASTOCTETS,
 IPSTATS_MIB_OUTMCASTOCTETS,
 IPSTATS_MIB_INBCASTOCTETS,
 IPSTATS_MIB_OUTBCASTOCTETS,
 IPSTATS_MIB_CSUMERRORS,
 IPSTATS_MIB_NOECTPKTS,
 IPSTATS_MIB_ECT1PKTS,
 IPSTATS_MIB_ECT0PKTS,
 IPSTATS_MIB_CEPKTS,
 IPSTATS_MIB_REASM_OVERLAPS,
 __IPSTATS_MIB_MAX
};






enum
{
 ICMP_MIB_NUM = 0,
 ICMP_MIB_INMSGS,
 ICMP_MIB_INERRORS,
 ICMP_MIB_INDESTUNREACHS,
 ICMP_MIB_INTIMEEXCDS,
 ICMP_MIB_INPARMPROBS,
 ICMP_MIB_INSRCQUENCHS,
 ICMP_MIB_INREDIRECTS,
 ICMP_MIB_INECHOS,
 ICMP_MIB_INECHOREPS,
 ICMP_MIB_INTIMESTAMPS,
 ICMP_MIB_INTIMESTAMPREPS,
 ICMP_MIB_INADDRMASKS,
 ICMP_MIB_INADDRMASKREPS,
 ICMP_MIB_OUTMSGS,
 ICMP_MIB_OUTERRORS,
 ICMP_MIB_OUTDESTUNREACHS,
 ICMP_MIB_OUTTIMEEXCDS,
 ICMP_MIB_OUTPARMPROBS,
 ICMP_MIB_OUTSRCQUENCHS,
 ICMP_MIB_OUTREDIRECTS,
 ICMP_MIB_OUTECHOS,
 ICMP_MIB_OUTECHOREPS,
 ICMP_MIB_OUTTIMESTAMPS,
 ICMP_MIB_OUTTIMESTAMPREPS,
 ICMP_MIB_OUTADDRMASKS,
 ICMP_MIB_OUTADDRMASKREPS,
 ICMP_MIB_CSUMERRORS,
 __ICMP_MIB_MAX
};







enum
{
 ICMP6_MIB_NUM = 0,
 ICMP6_MIB_INMSGS,
 ICMP6_MIB_INERRORS,
 ICMP6_MIB_OUTMSGS,
 ICMP6_MIB_OUTERRORS,
 ICMP6_MIB_CSUMERRORS,
 __ICMP6_MIB_MAX
};
# 125 "./include/uapi/linux/snmp.h"
enum
{
 TCP_MIB_NUM = 0,
 TCP_MIB_RTOALGORITHM,
 TCP_MIB_RTOMIN,
 TCP_MIB_RTOMAX,
 TCP_MIB_MAXCONN,
 TCP_MIB_ACTIVEOPENS,
 TCP_MIB_PASSIVEOPENS,
 TCP_MIB_ATTEMPTFAILS,
 TCP_MIB_ESTABRESETS,
 TCP_MIB_CURRESTAB,
 TCP_MIB_INSEGS,
 TCP_MIB_OUTSEGS,
 TCP_MIB_RETRANSSEGS,
 TCP_MIB_INERRS,
 TCP_MIB_OUTRSTS,
 TCP_MIB_CSUMERRORS,
 __TCP_MIB_MAX
};






enum
{
 UDP_MIB_NUM = 0,
 UDP_MIB_INDATAGRAMS,
 UDP_MIB_NOPORTS,
 UDP_MIB_INERRORS,
 UDP_MIB_OUTDATAGRAMS,
 UDP_MIB_RCVBUFERRORS,
 UDP_MIB_SNDBUFERRORS,
 UDP_MIB_CSUMERRORS,
 UDP_MIB_IGNOREDMULTI,
 UDP_MIB_MEMERRORS,
 __UDP_MIB_MAX
};


enum
{
 LINUX_MIB_NUM = 0,
 LINUX_MIB_SYNCOOKIESSENT,
 LINUX_MIB_SYNCOOKIESRECV,
 LINUX_MIB_SYNCOOKIESFAILED,
 LINUX_MIB_EMBRYONICRSTS,
 LINUX_MIB_PRUNECALLED,
 LINUX_MIB_RCVPRUNED,
 LINUX_MIB_OFOPRUNED,
 LINUX_MIB_OUTOFWINDOWICMPS,
 LINUX_MIB_LOCKDROPPEDICMPS,
 LINUX_MIB_ARPFILTER,
 LINUX_MIB_TIMEWAITED,
 LINUX_MIB_TIMEWAITRECYCLED,
 LINUX_MIB_TIMEWAITKILLED,
 LINUX_MIB_PAWSACTIVEREJECTED,
 LINUX_MIB_PAWSESTABREJECTED,
 LINUX_MIB_DELAYEDACKS,
 LINUX_MIB_DELAYEDACKLOCKED,
 LINUX_MIB_DELAYEDACKLOST,
 LINUX_MIB_LISTENOVERFLOWS,
 LINUX_MIB_LISTENDROPS,
 LINUX_MIB_TCPHPHITS,
 LINUX_MIB_TCPPUREACKS,
 LINUX_MIB_TCPHPACKS,
 LINUX_MIB_TCPRENORECOVERY,
 LINUX_MIB_TCPSACKRECOVERY,
 LINUX_MIB_TCPSACKRENEGING,
 LINUX_MIB_TCPSACKREORDER,
 LINUX_MIB_TCPRENOREORDER,
 LINUX_MIB_TCPTSREORDER,
 LINUX_MIB_TCPFULLUNDO,
 LINUX_MIB_TCPPARTIALUNDO,
 LINUX_MIB_TCPDSACKUNDO,
 LINUX_MIB_TCPLOSSUNDO,
 LINUX_MIB_TCPLOSTRETRANSMIT,
 LINUX_MIB_TCPRENOFAILURES,
 LINUX_MIB_TCPSACKFAILURES,
 LINUX_MIB_TCPLOSSFAILURES,
 LINUX_MIB_TCPFASTRETRANS,
 LINUX_MIB_TCPSLOWSTARTRETRANS,
 LINUX_MIB_TCPTIMEOUTS,
 LINUX_MIB_TCPLOSSPROBES,
 LINUX_MIB_TCPLOSSPROBERECOVERY,
 LINUX_MIB_TCPRENORECOVERYFAIL,
 LINUX_MIB_TCPSACKRECOVERYFAIL,
 LINUX_MIB_TCPRCVCOLLAPSED,
 LINUX_MIB_TCPDSACKOLDSENT,
 LINUX_MIB_TCPDSACKOFOSENT,
 LINUX_MIB_TCPDSACKRECV,
 LINUX_MIB_TCPDSACKOFORECV,
 LINUX_MIB_TCPABORTONDATA,
 LINUX_MIB_TCPABORTONCLOSE,
 LINUX_MIB_TCPABORTONMEMORY,
 LINUX_MIB_TCPABORTONTIMEOUT,
 LINUX_MIB_TCPABORTONLINGER,
 LINUX_MIB_TCPABORTFAILED,
 LINUX_MIB_TCPMEMORYPRESSURES,
 LINUX_MIB_TCPMEMORYPRESSURESCHRONO,
 LINUX_MIB_TCPSACKDISCARD,
 LINUX_MIB_TCPDSACKIGNOREDOLD,
 LINUX_MIB_TCPDSACKIGNOREDNOUNDO,
 LINUX_MIB_TCPSPURIOUSRTOS,
 LINUX_MIB_TCPMD5NOTFOUND,
 LINUX_MIB_TCPMD5UNEXPECTED,
 LINUX_MIB_TCPMD5FAILURE,
 LINUX_MIB_SACKSHIFTED,
 LINUX_MIB_SACKMERGED,
 LINUX_MIB_SACKSHIFTFALLBACK,
 LINUX_MIB_TCPBACKLOGDROP,
 LINUX_MIB_PFMEMALLOCDROP,
 LINUX_MIB_TCPMINTTLDROP,
 LINUX_MIB_TCPDEFERACCEPTDROP,
 LINUX_MIB_IPRPFILTER,
 LINUX_MIB_TCPTIMEWAITOVERFLOW,
 LINUX_MIB_TCPREQQFULLDOCOOKIES,
 LINUX_MIB_TCPREQQFULLDROP,
 LINUX_MIB_TCPRETRANSFAIL,
 LINUX_MIB_TCPRCVCOALESCE,
 LINUX_MIB_TCPBACKLOGCOALESCE,
 LINUX_MIB_TCPOFOQUEUE,
 LINUX_MIB_TCPOFODROP,
 LINUX_MIB_TCPOFOMERGE,
 LINUX_MIB_TCPCHALLENGEACK,
 LINUX_MIB_TCPSYNCHALLENGE,
 LINUX_MIB_TCPFASTOPENACTIVE,
 LINUX_MIB_TCPFASTOPENACTIVEFAIL,
 LINUX_MIB_TCPFASTOPENPASSIVE,
 LINUX_MIB_TCPFASTOPENPASSIVEFAIL,
 LINUX_MIB_TCPFASTOPENLISTENOVERFLOW,
 LINUX_MIB_TCPFASTOPENCOOKIEREQD,
 LINUX_MIB_TCPFASTOPENBLACKHOLE,
 LINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES,
 LINUX_MIB_BUSYPOLLRXPACKETS,
 LINUX_MIB_TCPAUTOCORKING,
 LINUX_MIB_TCPFROMZEROWINDOWADV,
 LINUX_MIB_TCPTOZEROWINDOWADV,
 LINUX_MIB_TCPWANTZEROWINDOWADV,
 LINUX_MIB_TCPSYNRETRANS,
 LINUX_MIB_TCPORIGDATASENT,
 LINUX_MIB_TCPHYSTARTTRAINDETECT,
 LINUX_MIB_TCPHYSTARTTRAINCWND,
 LINUX_MIB_TCPHYSTARTDELAYDETECT,
 LINUX_MIB_TCPHYSTARTDELAYCWND,
 LINUX_MIB_TCPACKSKIPPEDSYNRECV,
 LINUX_MIB_TCPACKSKIPPEDPAWS,
 LINUX_MIB_TCPACKSKIPPEDSEQ,
 LINUX_MIB_TCPACKSKIPPEDFINWAIT2,
 LINUX_MIB_TCPACKSKIPPEDTIMEWAIT,
 LINUX_MIB_TCPACKSKIPPEDCHALLENGE,
 LINUX_MIB_TCPWINPROBE,
 LINUX_MIB_TCPKEEPALIVE,
 LINUX_MIB_TCPMTUPFAIL,
 LINUX_MIB_TCPMTUPSUCCESS,
 LINUX_MIB_TCPDELIVERED,
 LINUX_MIB_TCPDELIVEREDCE,
 LINUX_MIB_TCPACKCOMPRESSED,
 LINUX_MIB_TCPZEROWINDOWDROP,
 LINUX_MIB_TCPRCVQDROP,
 LINUX_MIB_TCPWQUEUETOOBIG,
 LINUX_MIB_TCPFASTOPENPASSIVEALTKEY,
 LINUX_MIB_TCPTIMEOUTREHASH,
 LINUX_MIB_TCPDUPLICATEDATAREHASH,
 LINUX_MIB_TCPDSACKRECVSEGS,
 LINUX_MIB_TCPDSACKIGNOREDDUBIOUS,
 LINUX_MIB_TCPMIGRATEREQSUCCESS,
 LINUX_MIB_TCPMIGRATEREQFAILURE,
 __LINUX_MIB_MAX
};


enum
{
 LINUX_MIB_XFRMNUM = 0,
 LINUX_MIB_XFRMINERROR,
 LINUX_MIB_XFRMINBUFFERERROR,
 LINUX_MIB_XFRMINHDRERROR,
 LINUX_MIB_XFRMINNOSTATES,
 LINUX_MIB_XFRMINSTATEPROTOERROR,
 LINUX_MIB_XFRMINSTATEMODEERROR,
 LINUX_MIB_XFRMINSTATESEQERROR,
 LINUX_MIB_XFRMINSTATEEXPIRED,
 LINUX_MIB_XFRMINSTATEMISMATCH,
 LINUX_MIB_XFRMINSTATEINVALID,
 LINUX_MIB_XFRMINTMPLMISMATCH,
 LINUX_MIB_XFRMINNOPOLS,
 LINUX_MIB_XFRMINPOLBLOCK,
 LINUX_MIB_XFRMINPOLERROR,
 LINUX_MIB_XFRMOUTERROR,
 LINUX_MIB_XFRMOUTBUNDLEGENERROR,
 LINUX_MIB_XFRMOUTBUNDLECHECKERROR,
 LINUX_MIB_XFRMOUTNOSTATES,
 LINUX_MIB_XFRMOUTSTATEPROTOERROR,
 LINUX_MIB_XFRMOUTSTATEMODEERROR,
 LINUX_MIB_XFRMOUTSTATESEQERROR,
 LINUX_MIB_XFRMOUTSTATEEXPIRED,
 LINUX_MIB_XFRMOUTPOLBLOCK,
 LINUX_MIB_XFRMOUTPOLDEAD,
 LINUX_MIB_XFRMOUTPOLERROR,
 LINUX_MIB_XFRMFWDHDRERROR,
 LINUX_MIB_XFRMOUTSTATEINVALID,
 LINUX_MIB_XFRMACQUIREERROR,
 __LINUX_MIB_XFRMMAX
};


enum
{
 LINUX_MIB_TLSNUM = 0,
 LINUX_MIB_TLSCURRTXSW,
 LINUX_MIB_TLSCURRRXSW,
 LINUX_MIB_TLSCURRTXDEVICE,
 LINUX_MIB_TLSCURRRXDEVICE,
 LINUX_MIB_TLSTXSW,
 LINUX_MIB_TLSRXSW,
 LINUX_MIB_TLSTXDEVICE,
 LINUX_MIB_TLSRXDEVICE,
 LINUX_MIB_TLSDECRYPTERROR,
 LINUX_MIB_TLSRXDEVICERESYNC,
 __LINUX_MIB_TLSMAX
};
# 19 "./include/net/snmp.h" 2
# 28 "./include/net/snmp.h"
struct snmp_mib {
 const char *name;
 int entry;
};
# 50 "./include/net/snmp.h"
struct ipstats_mib {

 u64 mibs[__IPSTATS_MIB_MAX];
 struct u64_stats_sync syncp;
};



struct icmp_mib {
 unsigned long mibs[__ICMP_MIB_MAX];
};


struct icmpmsg_mib {
 atomic_long_t mibs[512];
};




struct icmpv6_mib {
 unsigned long mibs[__ICMP6_MIB_MAX];
};

struct icmpv6_mib_device {
 atomic_long_t mibs[__ICMP6_MIB_MAX];
};



struct icmpv6msg_mib {
 atomic_long_t mibs[512];
};

struct icmpv6msg_mib_device {
 atomic_long_t mibs[512];
};




struct tcp_mib {
 unsigned long mibs[__TCP_MIB_MAX];
};



struct udp_mib {
 unsigned long mibs[__UDP_MIB_MAX];
};



struct linux_mib {
 unsigned long mibs[__LINUX_MIB_MAX];
};



struct linux_xfrm_mib {
 unsigned long mibs[__LINUX_MIB_XFRMMAX];
};



struct linux_tls_mib {
 unsigned long mibs[__LINUX_MIB_TLSMAX];
};
# 6 "./include/net/netns/mib.h" 2

struct netns_mib {
 __typeof__(struct ipstats_mib) *ip_statistics;

 __typeof__(struct ipstats_mib) *ipv6_statistics;


 __typeof__(struct tcp_mib) *tcp_statistics;
 __typeof__(struct linux_mib) *net_statistics;

 __typeof__(struct udp_mib) *udp_statistics;

 __typeof__(struct udp_mib) *udp_stats_in6;
# 31 "./include/net/netns/mib.h"
 __typeof__(struct udp_mib) *udplite_statistics;

 __typeof__(struct udp_mib) *udplite_stats_in6;


 __typeof__(struct icmp_mib) *icmp_statistics;
 __typeof__(struct icmpmsg_mib) *icmpmsg_statistics;

 __typeof__(struct icmpv6_mib) *icmpv6_statistics;
 __typeof__(struct icmpv6msg_mib) *icmpv6msg_statistics;
 struct proc_dir_entry *proc_net_devsnmp6;

};
# 18 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/unix.h" 1







struct ctl_table_header;
struct netns_unix {
 int sysctl_max_dgram_qlen;
 struct ctl_table_header *ctl;
};
# 19 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/packet.h" 1







# 1 "./include/linux/mutex.h" 1
# 9 "./include/net/netns/packet.h" 2

struct netns_packet {
 struct mutex sklist_lock;
 struct hlist_head sklist;
};
# 20 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/ipv4.h" 1
# 15 "./include/net/netns/ipv4.h"
struct ctl_table_header;
struct ipv4_devconf;
struct fib_rules_ops;
struct hlist_head;
struct fib_table;
struct sock;
struct local_ports {
 seqlock_t lock;
 int range[2];
 bool warned;
};

struct ping_group_range {
 seqlock_t lock;
 kgid_t range[2];
};

struct inet_hashinfo;

struct inet_timewait_death_row {
 atomic_t tw_count;
 char tw_pad[(1 << (6)) - sizeof(atomic_t)];

 struct inet_hashinfo *hashinfo;
 int sysctl_max_tw_buckets;
};

struct tcp_fastopen_context;

struct netns_ipv4 {

 struct inet_timewait_death_row tcp_death_row __attribute__((__aligned__((1 << (6)))));


 struct ctl_table_header *forw_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *ipv4_hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *xfrm4_hdr;

 struct ipv4_devconf *devconf_all;
 struct ipv4_devconf *devconf_dflt;
 struct ip_ra_chain *ra_chain;
 struct mutex ra_mutex;







 bool fib_has_custom_local_routes;
 bool fib_offload_disabled;



 struct hlist_head *fib_table_hash;
 struct sock *fibnl;

 struct sock * *icmp_sk;
 struct sock *mc_autojoin_sk;

 struct inet_peer_base *peers;
 struct sock * *tcp_sk;
 struct fqdir *fqdir;

 u8 sysctl_icmp_echo_ignore_all;
 u8 sysctl_icmp_echo_enable_probe;
 u8 sysctl_icmp_echo_ignore_broadcasts;
 u8 sysctl_icmp_ignore_bogus_error_responses;
 u8 sysctl_icmp_errors_use_inbound_ifaddr;
 int sysctl_icmp_ratelimit;
 int sysctl_icmp_ratemask;

 struct local_ports ip_local_ports;

 u8 sysctl_tcp_ecn;
 u8 sysctl_tcp_ecn_fallback;

 u8 sysctl_ip_default_ttl;
 u8 sysctl_ip_no_pmtu_disc;
 u8 sysctl_ip_fwd_use_pmtu;
 u8 sysctl_ip_fwd_update_priority;
 u8 sysctl_ip_nonlocal_bind;
 u8 sysctl_ip_autobind_reuse;

 u8 sysctl_ip_dynaddr;
 u8 sysctl_ip_early_demux;



 u8 sysctl_tcp_early_demux;
 u8 sysctl_udp_early_demux;

 u8 sysctl_nexthop_compat_mode;

 u8 sysctl_fwmark_reflect;
 u8 sysctl_tcp_fwmark_accept;



 u8 sysctl_tcp_mtu_probing;
 int sysctl_tcp_mtu_probe_floor;
 int sysctl_tcp_base_mss;
 int sysctl_tcp_min_snd_mss;
 int sysctl_tcp_probe_threshold;
 u32 sysctl_tcp_probe_interval;

 int sysctl_tcp_keepalive_time;
 int sysctl_tcp_keepalive_intvl;
 u8 sysctl_tcp_keepalive_probes;

 u8 sysctl_tcp_syn_retries;
 u8 sysctl_tcp_synack_retries;
 u8 sysctl_tcp_syncookies;
 u8 sysctl_tcp_migrate_req;
 int sysctl_tcp_reordering;
 u8 sysctl_tcp_retries1;
 u8 sysctl_tcp_retries2;
 u8 sysctl_tcp_orphan_retries;
 u8 sysctl_tcp_tw_reuse;
 int sysctl_tcp_fin_timeout;
 unsigned int sysctl_tcp_notsent_lowat;
 u8 sysctl_tcp_sack;
 u8 sysctl_tcp_window_scaling;
 u8 sysctl_tcp_timestamps;
 u8 sysctl_tcp_early_retrans;
 u8 sysctl_tcp_recovery;
 u8 sysctl_tcp_thin_linear_timeouts;
 u8 sysctl_tcp_slow_start_after_idle;
 u8 sysctl_tcp_retrans_collapse;
 u8 sysctl_tcp_stdurg;
 u8 sysctl_tcp_rfc1337;
 u8 sysctl_tcp_abort_on_overflow;
 u8 sysctl_tcp_fack;
 int sysctl_tcp_max_reordering;
 int sysctl_tcp_adv_win_scale;
 u8 sysctl_tcp_dsack;
 u8 sysctl_tcp_app_win;
 u8 sysctl_tcp_frto;
 u8 sysctl_tcp_nometrics_save;
 u8 sysctl_tcp_no_ssthresh_metrics_save;
 u8 sysctl_tcp_moderate_rcvbuf;
 u8 sysctl_tcp_tso_win_divisor;
 u8 sysctl_tcp_workaround_signed_windows;
 int sysctl_tcp_limit_output_bytes;
 int sysctl_tcp_challenge_ack_limit;
 int sysctl_tcp_min_rtt_wlen;
 u8 sysctl_tcp_min_tso_segs;
 u8 sysctl_tcp_autocorking;
 u8 sysctl_tcp_reflect_tos;
 u8 sysctl_tcp_comp_sack_nr;
 int sysctl_tcp_invalid_ratelimit;
 int sysctl_tcp_pacing_ss_ratio;
 int sysctl_tcp_pacing_ca_ratio;
 int sysctl_tcp_wmem[3];
 int sysctl_tcp_rmem[3];
 unsigned long sysctl_tcp_comp_sack_delay_ns;
 unsigned long sysctl_tcp_comp_sack_slack_ns;
 int sysctl_max_syn_backlog;
 int sysctl_tcp_fastopen;
 const struct tcp_congestion_ops *tcp_congestion_control;
 struct tcp_fastopen_context *tcp_fastopen_ctx;
 unsigned int sysctl_tcp_fastopen_blackhole_timeout;
 atomic_t tfo_active_disable_times;
 unsigned long tfo_active_disable_stamp;

 int sysctl_udp_wmem_min;
 int sysctl_udp_rmem_min;

 u8 sysctl_fib_notify_on_flag_change;





 u8 sysctl_igmp_llm_reports;
 int sysctl_igmp_max_memberships;
 int sysctl_igmp_max_msf;
 int sysctl_igmp_qrv;

 struct ping_group_range ping_group_range;

 atomic_t dev_addr_genid;


 unsigned long *sysctl_local_reserved_ports;
 int sysctl_ip_prot_sock;
# 219 "./include/net/netns/ipv4.h"
 struct fib_notifier_ops *notifier_ops;
 unsigned int fib_seq;

 struct fib_notifier_ops *ipmr_notifier_ops;
 unsigned int ipmr_seq;

 atomic_t rt_genid;
 siphash_key_t ip_id_key;
};
# 21 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/ipv6.h" 1
# 11 "./include/net/netns/ipv6.h"
# 1 "./include/net/dst_ops.h" 1



# 1 "./include/linux/percpu_counter.h" 1




# 1 "./include/linux/percpu_counter_types.h" 1
# 14 "./include/linux/percpu_counter_types.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};
# 6 "./include/linux/percpu_counter.h" 2
# 5 "./include/net/dst_ops.h" 2


struct dst_entry;
struct kmem_cachep;
struct net_device;
struct sk_buff;
struct sock;
struct net;

struct dst_ops {
 unsigned short family;
 unsigned int gc_thresh;

 int (*gc)(struct dst_ops *ops);
 struct dst_entry * (*check)(struct dst_entry *, __u32 cookie);
 unsigned int (*default_advmss)(const struct dst_entry *);
 unsigned int (*mtu)(const struct dst_entry *);
 u32 * (*cow_metrics)(struct dst_entry *, unsigned long);
 void (*destroy)(struct dst_entry *);
 void (*ifdown)(struct dst_entry *,
       struct net_device *dev, int how);
 struct dst_entry * (*negative_advice)(struct dst_entry *);
 void (*link_failure)(struct sk_buff *);
 void (*update_pmtu)(struct dst_entry *dst, struct sock *sk,
            struct sk_buff *skb, u32 mtu,
            bool confirm_neigh);
 void (*redirect)(struct dst_entry *dst, struct sock *sk,
         struct sk_buff *skb);
 int (*local_out)(struct net *net, struct sock *sk, struct sk_buff *skb);
 struct neighbour * (*neigh_lookup)(const struct dst_entry *dst,
      struct sk_buff *skb,
      const void *daddr);
 void (*confirm_neigh)(const struct dst_entry *dst,
       const void *daddr);

 struct kmem_cache *kmem_cachep;

 struct percpu_counter pcpuc_entries __attribute__((__aligned__((1 << (6)))));
};
# 12 "./include/net/netns/ipv6.h" 2
# 1 "./include/uapi/linux/icmpv6.h" 1







struct icmp6hdr {

 __u8 icmp6_type;
 __u8 icmp6_code;
 __sum16 icmp6_cksum;


 union {
  __be32 un_data32[1];
  __be16 un_data16[2];
  __u8 un_data8[4];

  struct icmpv6_echo {
   __be16 identifier;
   __be16 sequence;
  } u_echo;

                struct icmpv6_nd_advt {

                        __u32 reserved:5,
                          override:1,
                          solicited:1,
                          router:1,
     reserved2:24;
# 40 "./include/uapi/linux/icmpv6.h"
                } u_nd_advt;

                struct icmpv6_nd_ra {
   __u8 hop_limit;

   __u8 reserved:3,
     router_pref:2,
     home_agent:1,
     other:1,
     managed:1;
# 60 "./include/uapi/linux/icmpv6.h"
   __be16 rt_lifetime;
                } u_nd_ra;

 } icmp6_dataun;
# 81 "./include/uapi/linux/icmpv6.h"
};
# 161 "./include/uapi/linux/icmpv6.h"
struct icmp6_filter {
 __u32 data[8];
};
# 13 "./include/net/netns/ipv6.h" 2

struct ctl_table_header;

struct netns_sysctl_ipv6 {

 struct ctl_table_header *hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *icmp_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *xfrm6_hdr;

 int flush_delay;
 int ip6_rt_max_size;
 int ip6_rt_gc_min_interval;
 int ip6_rt_gc_timeout;
 int ip6_rt_gc_interval;
 int ip6_rt_gc_elasticity;
 int ip6_rt_mtu_expires;
 int ip6_rt_min_advmss;
 u32 multipath_hash_fields;
 u8 multipath_hash_policy;
 u8 bindv6only;
 u8 flowlabel_consistency;
 u8 auto_flowlabels;
 int icmpv6_time;
 u8 icmpv6_echo_ignore_all;
 u8 icmpv6_echo_ignore_multicast;
 u8 icmpv6_echo_ignore_anycast;
 unsigned long icmpv6_ratemask[(((255 + 1) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 unsigned long *icmpv6_ratemask_ptr;
 u8 anycast_src_echo_reply;
 u8 ip_nonlocal_bind;
 u8 fwmark_reflect;
 u8 flowlabel_state_ranges;
 int idgen_retries;
 int idgen_delay;
 int flowlabel_reflect;
 int max_dst_opts_cnt;
 int max_hbh_opts_cnt;
 int max_dst_opts_len;
 int max_hbh_opts_len;
 int seg6_flowlabel;
 u32 ioam6_id;
 u64 ioam6_id_wide;
 bool skip_notify_on_dev_down;
 u8 fib_notify_on_flag_change;
};

struct netns_ipv6 {

 struct dst_ops ip6_dst_ops;

 struct netns_sysctl_ipv6 sysctl;
 struct ipv6_devconf *devconf_all;
 struct ipv6_devconf *devconf_dflt;
 struct inet_peer_base *peers;
 struct fqdir *fqdir;
 struct fib6_info *fib6_null_entry;
 struct rt6_info *ip6_null_entry;
 struct rt6_statistics *rt6_stats;
 struct timer_list ip6_fib_timer;
 struct hlist_head *fib_table_hash;
 struct fib6_table *fib6_main_tbl;
 struct list_head fib6_walkers;
 rwlock_t fib6_walker_lock;
 spinlock_t fib6_gc_lock;
 unsigned int ip6_rt_gc_expire;
 unsigned long ip6_rt_last_gc;
# 92 "./include/net/netns/ipv6.h"
 struct sock * *icmp_sk;
 struct sock *ndisc_sk;
 struct sock *tcp_sk;
 struct sock *igmp_sk;
 struct sock *mc_autojoin_sk;
# 105 "./include/net/netns/ipv6.h"
 atomic_t dev_addr_genid;
 atomic_t fib6_sernum;
 struct seg6_pernet_data *seg6_data;
 struct fib_notifier_ops *notifier_ops;
 struct fib_notifier_ops *ip6mr_notifier_ops;
 unsigned int ipmr_seq;
 struct {
  struct hlist_head head;
  spinlock_t lock;
  u32 seq;
 } ip6addrlbl_table;
 struct ioam6_pernet_data *ioam6_data;
};


struct netns_nf_frag {
 struct fqdir *fqdir;
};
# 22 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/nexthop.h" 1








# 1 "./include/linux/notifier.h" 1




# 1 "./include/linux/notifier_types.h" 1




struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};
# 6 "./include/linux/notifier.h" 2
# 10 "./include/net/netns/nexthop.h" 2
# 1 "./include/linux/notifier_api.h" 1
# 18 "./include/linux/notifier_api.h"
# 1 "./include/linux/srcu_types.h" 1
# 18 "./include/linux/srcu_types.h"
# 1 "./include/linux/rcu_segcblist.h" 1
# 21 "./include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
};
# 183 "./include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];



 long len;

 long seglen[4];
 u8 flags;
};
# 19 "./include/linux/srcu_types.h" 2

# 1 "./include/linux/workqueue.h" 1
# 21 "./include/linux/srcu_types.h" 2
# 1 "./include/linux/mutex.h" 1
# 22 "./include/linux/srcu_types.h" 2
# 32 "./include/linux/srcu_types.h"
# 1 "./include/linux/srcutree.h" 1
# 14 "./include/linux/srcutree.h"
# 1 "./include/linux/rcu_node_tree.h" 1
# 15 "./include/linux/srcutree.h" 2



struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock __attribute__((__aligned__(1 << ((6)))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[(1 + (((256) + ((16)) - 1) / ((16))))];
 struct srcu_node *level[2 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;
 struct lockdep_map dep_map;
};
# 136 "./include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 33 "./include/linux/srcu_types.h" 2
# 19 "./include/linux/notifier_api.h" 2
# 51 "./include/linux/notifier_api.h"
struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 84 "./include/linux/notifier_api.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 135 "./include/linux/notifier_api.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);

extern int blocking_notifier_call_chain_robust(struct blocking_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
extern int raw_notifier_call_chain_robust(struct raw_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 212 "./include/linux/notifier_api.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 11 "./include/net/netns/nexthop.h" 2
# 1 "./include/linux/rbtree.h" 1
# 12 "./include/net/netns/nexthop.h" 2

struct netns_nexthop {
 struct rb_root rb_root;
 struct hlist_head *devhash;

 unsigned int seq;
 u32 last_id_allocated;
 struct blocking_notifier_head notifier_chain;
};
# 23 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/ieee802154_6lowpan.h" 1








struct ctl_table_header;
struct fqdir;

struct netns_sysctl_lowpan {

 struct ctl_table_header *frags_hdr;

};

struct netns_ieee802154_lowpan {
 struct netns_sysctl_lowpan sysctl;
 struct fqdir *fqdir;
};
# 24 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/sctp.h" 1




struct sock;
struct proc_dir_entry;
struct sctp_mib;
struct ctl_table_header;

struct netns_sctp {
 __typeof__(struct sctp_mib) *sctp_statistics;


 struct proc_dir_entry *proc_net_sctp;


 struct ctl_table_header *sysctl_header;





 struct sock *ctl_sock;


 struct sock *udp4_sock;
 struct sock *udp6_sock;

 int udp_port;

 int encap_port;







 struct list_head local_addr_list;
 struct list_head addr_waitq;
 struct timer_list addr_wq_timer;
 struct list_head auto_asconf_splist;

 spinlock_t addr_wq_lock;


 spinlock_t local_addr_lock;
# 59 "./include/net/netns/sctp.h"
 unsigned int rto_initial;
 unsigned int rto_min;
 unsigned int rto_max;




 int rto_alpha;
 int rto_beta;


 int max_burst;


 int cookie_preserve_enable;


 char *sctp_hmac_alg;


 unsigned int valid_cookie_life;


 unsigned int sack_timeout;


 unsigned int hb_interval;


 unsigned int probe_interval;





 int max_retrans_association;
 int max_retrans_path;
 int max_retrans_init;




 int pf_retrans;





 int ps_retrans;






 int pf_enable;







 int pf_expose;






 int sndbuf_policy;






 int rcvbuf_policy;

 int default_auto_asconf;


 int addip_enable;
 int addip_noauth;


 int prsctp_enable;


 int reconf_enable;


 int auth_enable;


 int intl_enable;


 int ecn_enable;
# 166 "./include/net/netns/sctp.h"
 int scope_policy;




 int rwnd_upd_shift;


 unsigned long max_autoclose;
};
# 25 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/netfilter.h" 1




# 1 "./include/linux/netfilter_defs.h" 1




# 1 "./include/uapi/linux/netfilter.h" 1






# 1 "./include/linux/in.h" 1
# 19 "./include/linux/in.h"
# 1 "./include/uapi/linux/in.h" 1
# 24 "./include/uapi/linux/in.h"
# 1 "./include/linux/socket.h" 1
# 25 "./include/uapi/linux/in.h" 2



enum {
  IPPROTO_IP = 0,

  IPPROTO_ICMP = 1,

  IPPROTO_IGMP = 2,

  IPPROTO_IPIP = 4,

  IPPROTO_TCP = 6,

  IPPROTO_EGP = 8,

  IPPROTO_PUP = 12,

  IPPROTO_UDP = 17,

  IPPROTO_IDP = 22,

  IPPROTO_TP = 29,

  IPPROTO_DCCP = 33,

  IPPROTO_IPV6 = 41,

  IPPROTO_RSVP = 46,

  IPPROTO_GRE = 47,

  IPPROTO_ESP = 50,

  IPPROTO_AH = 51,

  IPPROTO_MTP = 92,

  IPPROTO_BEETPH = 94,

  IPPROTO_ENCAP = 98,

  IPPROTO_PIM = 103,

  IPPROTO_COMP = 108,

  IPPROTO_SCTP = 132,

  IPPROTO_UDPLITE = 136,

  IPPROTO_MPLS = 137,

  IPPROTO_ETHERNET = 143,

  IPPROTO_RAW = 255,

  IPPROTO_MPTCP = 262,

  IPPROTO_MAX
};




struct in_addr {
 __be32 s_addr;
};
# 173 "./include/uapi/linux/in.h"
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};

struct ip_mreqn {
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;
};

struct ip_mreq_source {
 __be32 imr_multiaddr;
 __be32 imr_interface;
 __be32 imr_sourceaddr;
};

struct ip_msfilter {
 union {
  struct {
   __be32 imsf_multiaddr_aux;
   __be32 imsf_interface_aux;
   __u32 imsf_fmode_aux;
   __u32 imsf_numsrc_aux;
   __be32 imsf_slist[1];
  };
  struct {
   __be32 imsf_multiaddr;
   __be32 imsf_interface;
   __u32 imsf_fmode;
   __u32 imsf_numsrc;
   __be32 imsf_slist_flex[];
  };
 };
};





struct group_req {
 __u32 gr_interface;
 struct __kernel_sockaddr_storage gr_group;
};

struct group_source_req {
 __u32 gsr_interface;
 struct __kernel_sockaddr_storage gsr_group;
 struct __kernel_sockaddr_storage gsr_source;
};

struct group_filter {
 union {
  struct {
   __u32 gf_interface_aux;
   struct __kernel_sockaddr_storage gf_group_aux;
   __u32 gf_fmode_aux;
   __u32 gf_numsrc_aux;
   struct __kernel_sockaddr_storage gf_slist[1];
  };
  struct {
   __u32 gf_interface;
   struct __kernel_sockaddr_storage gf_group;
   __u32 gf_fmode;
   __u32 gf_numsrc;
   struct __kernel_sockaddr_storage gf_slist_flex[];
  };
 };
};







struct in_pktinfo {
 int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;
};





struct sockaddr_in {
  __kernel_sa_family_t sin_family;
  __be16 sin_port;
  struct in_addr sin_addr;


  unsigned char __pad[16 - sizeof(short int) -
   sizeof(unsigned short int) - sizeof(struct in_addr)];
};
# 20 "./include/linux/in.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int proto_ports_offset(int proto)
{
 switch (proto) {
 case IPPROTO_TCP:
 case IPPROTO_UDP:
 case IPPROTO_DCCP:
 case IPPROTO_ESP:
 case IPPROTO_SCTP:
 case IPPROTO_UDPLITE:
  return 0;
 case IPPROTO_AH:
  return 4;
 default:
  return -22;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_loopback(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x7f000000))) ? ((__u32)( (((__u32)((0x7f000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x7f000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x7f000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x7f000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x7f000000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_multicast(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xf0000000))) ? ((__u32)( (((__u32)((0xf0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xf0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xf0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xf0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xf0000000))))) == (( __be32)(__builtin_constant_p((__u32)((0xe0000000))) ? ((__u32)( (((__u32)((0xe0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xe0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xe0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xe0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xe0000000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_local_multicast(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xe0000000))) ? ((__u32)( (((__u32)((0xe0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xe0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xe0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xe0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xe0000000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_lbcast(__be32 addr)
{

 return addr == (( __be32)(__builtin_constant_p((__u32)((((unsigned long int) 0xffffffff)))) ? ((__u32)( (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x000000ffUL) << 24) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x0000ff00UL) << 8) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0xff000000UL) >> 24))) : __fswab32((((unsigned long int) 0xffffffff)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_all_snoopers(__be32 addr)
{
 return addr == (( __be32)(__builtin_constant_p((__u32)((0xe000006aU))) ? ((__u32)( (((__u32)((0xe000006aU)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xe000006aU)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xe000006aU)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xe000006aU)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xe000006aU))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_zeronet(__be32 addr)
{
 return (addr == 0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_private_10(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x0a000000))) ? ((__u32)( (((__u32)((0x0a000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0a000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0a000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0a000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0a000000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_private_172(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xfff00000))) ? ((__u32)( (((__u32)((0xfff00000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfff00000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfff00000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfff00000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfff00000))))) == (( __be32)(__builtin_constant_p((__u32)((0xac100000))) ? ((__u32)( (((__u32)((0xac100000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xac100000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xac100000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xac100000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xac100000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_private_192(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffff0000))) ? ((__u32)( (((__u32)((0xffff0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffff0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffff0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffff0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffff0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0a80000))) ? ((__u32)( (((__u32)((0xc0a80000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0a80000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0a80000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0a80000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0a80000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_linklocal_169(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffff0000))) ? ((__u32)( (((__u32)((0xffff0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffff0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffff0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffff0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffff0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xa9fe0000))) ? ((__u32)( (((__u32)((0xa9fe0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xa9fe0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xa9fe0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xa9fe0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xa9fe0000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_anycast_6to4(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0586300))) ? ((__u32)( (((__u32)((0xc0586300)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0586300)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0586300)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0586300)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0586300))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_test_192(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0000200))) ? ((__u32)( (((__u32)((0xc0000200)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0000200)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0000200)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0000200)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0000200))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv4_is_test_198(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xfffe0000))) ? ((__u32)( (((__u32)((0xfffe0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfffe0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfffe0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfffe0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfffe0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xc6120000))) ? ((__u32)( (((__u32)((0xc6120000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc6120000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc6120000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc6120000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc6120000))));
}
# 8 "./include/uapi/linux/netfilter.h" 2
# 42 "./include/uapi/linux/netfilter.h"
enum nf_inet_hooks {
 NF_INET_PRE_ROUTING,
 NF_INET_LOCAL_IN,
 NF_INET_FORWARD,
 NF_INET_LOCAL_OUT,
 NF_INET_POST_ROUTING,
 NF_INET_NUMHOOKS,
 NF_INET_INGRESS = NF_INET_NUMHOOKS,
};

enum nf_dev_hooks {
 NF_NETDEV_INGRESS,
 NF_NETDEV_EGRESS,
 NF_NETDEV_NUMHOOKS
};

enum {
 NFPROTO_UNSPEC = 0,
 NFPROTO_INET = 1,
 NFPROTO_IPV4 = 2,
 NFPROTO_ARP = 3,
 NFPROTO_NETDEV = 5,
 NFPROTO_BRIDGE = 7,
 NFPROTO_IPV6 = 10,
 NFPROTO_DECNET = 12,
 NFPROTO_NUMPROTO,
};

union nf_inet_addr {
 __u32 all[4];
 __be32 ip;
 __be32 ip6[4];
 struct in_addr in;
 struct in6_addr in6;
};
# 6 "./include/linux/netfilter_defs.h" 2
# 6 "./include/net/netns/netfilter.h" 2

struct proc_dir_entry;
struct nf_logger;
struct nf_queue_handler;

struct netns_nf {

 struct proc_dir_entry *proc_netfilter;

 const struct nf_logger *nf_loggers[NFPROTO_NUMPROTO];

 struct ctl_table_header *nf_log_dir_header;

 struct nf_hook_entries *hooks_ipv4[NF_INET_NUMHOOKS];
 struct nf_hook_entries *hooks_ipv6[NF_INET_NUMHOOKS];
# 31 "./include/net/netns/netfilter.h"
 unsigned int defrag_ipv4_users;


 unsigned int defrag_ipv6_users;

};
# 26 "./include/net/net_namespace_types.h" 2

# 1 "./include/net/netns/conntrack.h" 1





# 1 "./include/linux/list_nulls.h" 1
# 21 "./include/linux/list_nulls.h"
struct hlist_nulls_head {
 struct hlist_nulls_node *first;
};

struct hlist_nulls_node {
 struct hlist_nulls_node *next, **pprev;
};
# 43 "./include/linux/list_nulls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_a_nulls(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr & 1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_nulls_value(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr) >> 1;
}
# 67 "./include/linux/list_nulls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_nulls_unhashed(const struct hlist_nulls_node *h)
{
 return !h->pprev;
}
# 81 "./include/linux/list_nulls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_nulls_unhashed_lockless(const struct hlist_nulls_node *h)
{
 return !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_191(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->pprev) == sizeof(char) || sizeof(h->pprev) == sizeof(short) || sizeof(h->pprev) == sizeof(int) || sizeof(h->pprev) == sizeof(long)) || sizeof(h->pprev) == sizeof(long long))) __compiletime_assert_191(); } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_nulls_empty(const struct hlist_nulls_head *h)
{
 return is_a_nulls(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_192(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_192(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_nulls_add_head(struct hlist_nulls_node *n,
     struct hlist_nulls_head *h)
{
 struct hlist_nulls_node *first = h->first;

 n->next = first;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_193(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_193(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
 h->first = n;
 if (!is_a_nulls(first))
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_194(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_194(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_nulls_del(struct hlist_nulls_node *n)
{
 struct hlist_nulls_node *next = n->next;
 struct hlist_nulls_node **pprev = n->pprev;

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_195(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_195(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
 if (!is_a_nulls(next))
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_196(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_196(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_nulls_del(struct hlist_nulls_node *n)
{
 __hlist_nulls_del(n);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_197(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_197(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *) 0x122 + (0xdead000000000000UL))); } while (0); } while (0);
}
# 7 "./include/net/netns/conntrack.h" 2

# 1 "./include/linux/workqueue.h" 1
# 9 "./include/net/netns/conntrack.h" 2
# 1 "./include/linux/netfilter/nf_conntrack_tcp.h" 1




# 1 "./include/uapi/linux/netfilter/nf_conntrack_tcp.h" 1








enum tcp_conntrack {
 TCP_CONNTRACK_NONE,
 TCP_CONNTRACK_SYN_SENT,
 TCP_CONNTRACK_SYN_RECV,
 TCP_CONNTRACK_ESTABLISHED,
 TCP_CONNTRACK_FIN_WAIT,
 TCP_CONNTRACK_CLOSE_WAIT,
 TCP_CONNTRACK_LAST_ACK,
 TCP_CONNTRACK_TIME_WAIT,
 TCP_CONNTRACK_CLOSE,
 TCP_CONNTRACK_LISTEN,

 TCP_CONNTRACK_MAX,
 TCP_CONNTRACK_IGNORE,
 TCP_CONNTRACK_RETRANS,
 TCP_CONNTRACK_UNACK,
 TCP_CONNTRACK_TIMEOUT_MAX
};
# 52 "./include/uapi/linux/netfilter/nf_conntrack_tcp.h"
struct nf_ct_tcp_flags {
 __u8 flags;
 __u8 mask;
};
# 6 "./include/linux/netfilter/nf_conntrack_tcp.h" 2


struct ip_ct_tcp_state {
 u_int32_t td_end;
 u_int32_t td_maxend;
 u_int32_t td_maxwin;
 u_int32_t td_maxack;
 u_int8_t td_scale;
 u_int8_t flags;
};

struct ip_ct_tcp {
 struct ip_ct_tcp_state seen[2];
 u_int8_t state;

 u_int8_t last_dir;
 u_int8_t retrans;
 u_int8_t last_index;
 u_int32_t last_seq;
 u_int32_t last_ack;
 u_int32_t last_end;
 u_int16_t last_win;

 u_int8_t last_wscale;
 u_int8_t last_flags;
};
# 10 "./include/net/netns/conntrack.h" 2

# 1 "./include/linux/netfilter/nf_conntrack_dccp.h" 1





enum ct_dccp_states {
 CT_DCCP_NONE,
 CT_DCCP_REQUEST,
 CT_DCCP_RESPOND,
 CT_DCCP_PARTOPEN,
 CT_DCCP_OPEN,
 CT_DCCP_CLOSEREQ,
 CT_DCCP_CLOSING,
 CT_DCCP_TIMEWAIT,
 CT_DCCP_IGNORE,
 CT_DCCP_INVALID,
 __CT_DCCP_MAX
};


enum ct_dccp_roles {
 CT_DCCP_ROLE_CLIENT,
 CT_DCCP_ROLE_SERVER,
 __CT_DCCP_ROLE_MAX
};


# 1 "./include/uapi/linux/netfilter/nf_conntrack_tuple_common.h" 1
# 11 "./include/uapi/linux/netfilter/nf_conntrack_tuple_common.h"
enum ip_conntrack_dir {
 IP_CT_DIR_ORIGINAL,
 IP_CT_DIR_REPLY,
 IP_CT_DIR_MAX
};




union nf_conntrack_man_proto {

 __be16 all;

 struct {
  __be16 port;
 } tcp;
 struct {
  __be16 port;
 } udp;
 struct {
  __be16 id;
 } icmp;
 struct {
  __be16 port;
 } dccp;
 struct {
  __be16 port;
 } sctp;
 struct {
  __be16 key;
 } gre;
};
# 29 "./include/linux/netfilter/nf_conntrack_dccp.h" 2

struct nf_ct_dccp {
 u_int8_t role[IP_CT_DIR_MAX];
 u_int8_t state;
 u_int8_t last_pkt;
 u_int8_t last_dir;
 u_int64_t handshake_seq;
};
# 12 "./include/net/netns/conntrack.h" 2


# 1 "./include/linux/netfilter/nf_conntrack_sctp.h" 1





# 1 "./include/uapi/linux/netfilter/nf_conntrack_sctp.h" 1







enum sctp_conntrack {
 SCTP_CONNTRACK_NONE,
 SCTP_CONNTRACK_CLOSED,
 SCTP_CONNTRACK_COOKIE_WAIT,
 SCTP_CONNTRACK_COOKIE_ECHOED,
 SCTP_CONNTRACK_ESTABLISHED,
 SCTP_CONNTRACK_SHUTDOWN_SENT,
 SCTP_CONNTRACK_SHUTDOWN_RECD,
 SCTP_CONNTRACK_SHUTDOWN_ACK_SENT,
 SCTP_CONNTRACK_HEARTBEAT_SENT,
 SCTP_CONNTRACK_HEARTBEAT_ACKED,
 SCTP_CONNTRACK_MAX
};
# 7 "./include/linux/netfilter/nf_conntrack_sctp.h" 2

struct ip_ct_sctp {
 enum sctp_conntrack state;

 __be32 vtag[IP_CT_DIR_MAX];
 u8 last_dir;
 u8 flags;
};
# 15 "./include/net/netns/conntrack.h" 2

# 1 "./include/linux/seqlock.h" 1
# 17 "./include/net/netns/conntrack.h" 2

struct ctl_table_header;
struct nf_conntrack_ecache;

struct nf_generic_net {
 unsigned int timeout;
};

struct nf_tcp_net {
 unsigned int timeouts[TCP_CONNTRACK_TIMEOUT_MAX];
 u8 tcp_loose;
 u8 tcp_be_liberal;
 u8 tcp_max_retrans;
 u8 tcp_ignore_invalid_rst;



};

enum udp_conntrack {
 UDP_CT_UNREPLIED,
 UDP_CT_REPLIED,
 UDP_CT_MAX
};

struct nf_udp_net {
 unsigned int timeouts[UDP_CT_MAX];



};

struct nf_icmp_net {
 unsigned int timeout;
};


struct nf_dccp_net {
 u8 dccp_loose;
 unsigned int dccp_timeout[(__CT_DCCP_MAX - 1) + 1];
};



struct nf_sctp_net {
 unsigned int timeouts[SCTP_CONNTRACK_MAX];
};
# 79 "./include/net/netns/conntrack.h"
struct nf_ip_net {
 struct nf_generic_net generic;
 struct nf_tcp_net tcp;
 struct nf_udp_net udp;
 struct nf_icmp_net icmp;
 struct nf_icmp_net icmpv6;

 struct nf_dccp_net dccp;


 struct nf_sctp_net sctp;




};

struct ct_pcpu {
 spinlock_t lock;
 struct hlist_nulls_head unconfirmed;
 struct hlist_nulls_head dying;
};

struct netns_ct {

 bool ecache_dwork_pending;

 u8 sysctl_log_invalid;
 u8 sysctl_events;
 u8 sysctl_acct;
 u8 sysctl_auto_assign_helper;
 u8 sysctl_tstamp;
 u8 sysctl_checksum;

 struct ct_pcpu *pcpu_lists;
 struct ip_conntrack_stat *stat;
 struct nf_ct_event_notifier *nf_conntrack_event_cb;
 struct nf_ip_net nf_ct_proto;



};
# 28 "./include/net/net_namespace_types.h" 2

# 1 "./include/net/netns/nftables.h" 1






struct netns_nftables {
 u8 gencursor;
};
# 30 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/xfrm.h" 1
# 11 "./include/net/netns/xfrm.h"
# 1 "./include/uapi/linux/xfrm.h" 1
# 15 "./include/uapi/linux/xfrm.h"
typedef union {
 __be32 a4;
 __be32 a6[4];
 struct in6_addr in6;
} xfrm_address_t;





struct xfrm_id {
 xfrm_address_t daddr;
 __be32 spi;
 __u8 proto;
};

struct xfrm_sec_ctx {
 __u8 ctx_doi;
 __u8 ctx_alg;
 __u16 ctx_len;
 __u32 ctx_sid;
 char ctx_str[0];
};
# 49 "./include/uapi/linux/xfrm.h"
struct xfrm_selector {
 xfrm_address_t daddr;
 xfrm_address_t saddr;
 __be16 dport;
 __be16 dport_mask;
 __be16 sport;
 __be16 sport_mask;
 __u16 family;
 __u8 prefixlen_d;
 __u8 prefixlen_s;
 __u8 proto;
 int ifindex;
 __kernel_uid32_t user;
};



struct xfrm_lifetime_cfg {
 __u64 soft_byte_limit;
 __u64 hard_byte_limit;
 __u64 soft_packet_limit;
 __u64 hard_packet_limit;
 __u64 soft_add_expires_seconds;
 __u64 hard_add_expires_seconds;
 __u64 soft_use_expires_seconds;
 __u64 hard_use_expires_seconds;
};

struct xfrm_lifetime_cur {
 __u64 bytes;
 __u64 packets;
 __u64 add_time;
 __u64 use_time;
};

struct xfrm_replay_state {
 __u32 oseq;
 __u32 seq;
 __u32 bitmap;
};



struct xfrm_replay_state_esn {
 unsigned int bmp_len;
 __u32 oseq;
 __u32 seq;
 __u32 oseq_hi;
 __u32 seq_hi;
 __u32 replay_window;
 __u32 bmp[0];
};

struct xfrm_algo {
 char alg_name[64];
 unsigned int alg_key_len;
 char alg_key[0];
};

struct xfrm_algo_auth {
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_trunc_len;
 char alg_key[0];
};

struct xfrm_algo_aead {
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_icv_len;
 char alg_key[0];
};

struct xfrm_stats {
 __u32 replay_window;
 __u32 replay;
 __u32 integrity_failed;
};

enum {
 XFRM_POLICY_TYPE_MAIN = 0,
 XFRM_POLICY_TYPE_SUB = 1,
 XFRM_POLICY_TYPE_MAX = 2,
 XFRM_POLICY_TYPE_ANY = 255
};

enum {
 XFRM_POLICY_IN = 0,
 XFRM_POLICY_OUT = 1,
 XFRM_POLICY_FWD = 2,
 XFRM_POLICY_MASK = 3,
 XFRM_POLICY_MAX = 3
};

enum {
 XFRM_SHARE_ANY,
 XFRM_SHARE_SESSION,
 XFRM_SHARE_USER,
 XFRM_SHARE_UNIQUE
};
# 158 "./include/uapi/linux/xfrm.h"
enum {
 XFRM_MSG_BASE = 0x10,

 XFRM_MSG_NEWSA = 0x10,

 XFRM_MSG_DELSA,

 XFRM_MSG_GETSA,


 XFRM_MSG_NEWPOLICY,

 XFRM_MSG_DELPOLICY,

 XFRM_MSG_GETPOLICY,


 XFRM_MSG_ALLOCSPI,

 XFRM_MSG_ACQUIRE,

 XFRM_MSG_EXPIRE,


 XFRM_MSG_UPDPOLICY,

 XFRM_MSG_UPDSA,


 XFRM_MSG_POLEXPIRE,


 XFRM_MSG_FLUSHSA,

 XFRM_MSG_FLUSHPOLICY,


 XFRM_MSG_NEWAE,

 XFRM_MSG_GETAE,


 XFRM_MSG_REPORT,


 XFRM_MSG_MIGRATE,


 XFRM_MSG_NEWSADINFO,

 XFRM_MSG_GETSADINFO,


 XFRM_MSG_NEWSPDINFO,

 XFRM_MSG_GETSPDINFO,


 XFRM_MSG_MAPPING,


 XFRM_MSG_SETDEFAULT,

 XFRM_MSG_GETDEFAULT,

 __XFRM_MSG_MAX
};
# 233 "./include/uapi/linux/xfrm.h"
struct xfrm_user_sec_ctx {
 __u16 len;
 __u16 exttype;
 __u8 ctx_alg;
 __u8 ctx_doi;
 __u16 ctx_len;
};

struct xfrm_user_tmpl {
 struct xfrm_id id;
 __u16 family;
 xfrm_address_t saddr;
 __u32 reqid;
 __u8 mode;
 __u8 share;
 __u8 optional;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
};

struct xfrm_encap_tmpl {
 __u16 encap_type;
 __be16 encap_sport;
 __be16 encap_dport;
 xfrm_address_t encap_oa;
};


enum xfrm_ae_ftype_t {
 XFRM_AE_UNSPEC,
 XFRM_AE_RTHR=1,
 XFRM_AE_RVAL=2,
 XFRM_AE_LVAL=4,
 XFRM_AE_ETHR=8,
 XFRM_AE_CR=16,
 XFRM_AE_CE=32,
 XFRM_AE_CU=64,
 __XFRM_AE_MAX


};

struct xfrm_userpolicy_type {
 __u8 type;
 __u16 reserved1;
 __u8 reserved2;
};


enum xfrm_attr_type_t {
 XFRMA_UNSPEC,
 XFRMA_ALG_AUTH,
 XFRMA_ALG_CRYPT,
 XFRMA_ALG_COMP,
 XFRMA_ENCAP,
 XFRMA_TMPL,
 XFRMA_SA,
 XFRMA_POLICY,
 XFRMA_SEC_CTX,
 XFRMA_LTIME_VAL,
 XFRMA_REPLAY_VAL,
 XFRMA_REPLAY_THRESH,
 XFRMA_ETIMER_THRESH,
 XFRMA_SRCADDR,
 XFRMA_COADDR,
 XFRMA_LASTUSED,
 XFRMA_POLICY_TYPE,
 XFRMA_MIGRATE,
 XFRMA_ALG_AEAD,
 XFRMA_KMADDRESS,
 XFRMA_ALG_AUTH_TRUNC,
 XFRMA_MARK,
 XFRMA_TFCPAD,
 XFRMA_REPLAY_ESN_VAL,
 XFRMA_SA_EXTRA_FLAGS,
 XFRMA_PROTO,
 XFRMA_ADDRESS_FILTER,
 XFRMA_PAD,
 XFRMA_OFFLOAD_DEV,
 XFRMA_SET_MARK,
 XFRMA_SET_MARK_MASK,
 XFRMA_IF_ID,
 __XFRMA_MAX



};

struct xfrm_mark {
 __u32 v;
 __u32 m;
};

enum xfrm_sadattr_type_t {
 XFRMA_SAD_UNSPEC,
 XFRMA_SAD_CNT,
 XFRMA_SAD_HINFO,
 __XFRMA_SAD_MAX


};

struct xfrmu_sadhinfo {
 __u32 sadhcnt;
 __u32 sadhmcnt;
};

enum xfrm_spdattr_type_t {
 XFRMA_SPD_UNSPEC,
 XFRMA_SPD_INFO,
 XFRMA_SPD_HINFO,
 XFRMA_SPD_IPV4_HTHRESH,
 XFRMA_SPD_IPV6_HTHRESH,
 __XFRMA_SPD_MAX


};

struct xfrmu_spdinfo {
 __u32 incnt;
 __u32 outcnt;
 __u32 fwdcnt;
 __u32 inscnt;
 __u32 outscnt;
 __u32 fwdscnt;
};

struct xfrmu_spdhinfo {
 __u32 spdhcnt;
 __u32 spdhmcnt;
};

struct xfrmu_spdhthresh {
 __u8 lbits;
 __u8 rbits;
};

struct xfrm_usersa_info {
 struct xfrm_selector sel;
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 struct xfrm_stats stats;
 __u32 seq;
 __u32 reqid;
 __u16 family;
 __u8 mode;
 __u8 replay_window;
 __u8 flags;
# 392 "./include/uapi/linux/xfrm.h"
};




struct xfrm_usersa_id {
 xfrm_address_t daddr;
 __be32 spi;
 __u16 family;
 __u8 proto;
};

struct xfrm_aevent_id {
 struct xfrm_usersa_id sa_id;
 xfrm_address_t saddr;
 __u32 flags;
 __u32 reqid;
};

struct xfrm_userspi_info {
 struct xfrm_usersa_info info;
 __u32 min;
 __u32 max;
};

struct xfrm_userpolicy_info {
 struct xfrm_selector sel;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 __u32 priority;
 __u32 index;
 __u8 dir;
 __u8 action;


 __u8 flags;



 __u8 share;
};

struct xfrm_userpolicy_id {
 struct xfrm_selector sel;
 __u32 index;
 __u8 dir;
};

struct xfrm_user_acquire {
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_selector sel;
 struct xfrm_userpolicy_info policy;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
 __u32 seq;
};

struct xfrm_user_expire {
 struct xfrm_usersa_info state;
 __u8 hard;
};

struct xfrm_user_polexpire {
 struct xfrm_userpolicy_info pol;
 __u8 hard;
};

struct xfrm_usersa_flush {
 __u8 proto;
};

struct xfrm_user_report {
 __u8 proto;
 struct xfrm_selector sel;
};



struct xfrm_user_kmaddress {
 xfrm_address_t local;
 xfrm_address_t remote;
 __u32 reserved;
 __u16 family;
};

struct xfrm_user_migrate {
 xfrm_address_t old_daddr;
 xfrm_address_t old_saddr;
 xfrm_address_t new_daddr;
 xfrm_address_t new_saddr;
 __u8 proto;
 __u8 mode;
 __u16 reserved;
 __u32 reqid;
 __u16 old_family;
 __u16 new_family;
};

struct xfrm_user_mapping {
 struct xfrm_usersa_id id;
 __u32 reqid;
 xfrm_address_t old_saddr;
 xfrm_address_t new_saddr;
 __be16 old_sport;
 __be16 new_sport;
};

struct xfrm_address_filter {
 xfrm_address_t saddr;
 xfrm_address_t daddr;
 __u16 family;
 __u8 splen;
 __u8 dplen;
};

struct xfrm_user_offload {
 int ifindex;
 __u8 flags;
};



struct xfrm_userpolicy_default {



 __u8 in;
 __u8 fwd;
 __u8 out;
};
# 534 "./include/uapi/linux/xfrm.h"
enum xfrm_nlgroups {
 XFRMNLGRP_NONE,

 XFRMNLGRP_ACQUIRE,

 XFRMNLGRP_EXPIRE,

 XFRMNLGRP_SA,

 XFRMNLGRP_POLICY,

 XFRMNLGRP_AEVENTS,

 XFRMNLGRP_REPORT,

 XFRMNLGRP_MIGRATE,

 XFRMNLGRP_MAPPING,

 __XFRMNLGRP_MAX
};
# 12 "./include/net/netns/xfrm.h" 2

struct ctl_table_header;

struct xfrm_policy_hash {
 struct hlist_head *table;
 unsigned int hmask;
 u8 dbits4;
 u8 sbits4;
 u8 dbits6;
 u8 sbits6;
};

struct xfrm_policy_hthresh {
 struct work_struct work;
 seqlock_t lock;
 u8 lbits4;
 u8 rbits4;
 u8 lbits6;
 u8 rbits6;
};

struct netns_xfrm {
 struct list_head state_all;
# 43 "./include/net/netns/xfrm.h"
 struct hlist_head *state_bydst;
 struct hlist_head *state_bysrc;
 struct hlist_head *state_byspi;
 struct hlist_head *state_byseq;
 unsigned int state_hmask;
 unsigned int state_num;
 struct work_struct state_hash_work;

 struct list_head policy_all;
 struct hlist_head *policy_byidx;
 unsigned int policy_idx_hmask;
 struct hlist_head policy_inexact[XFRM_POLICY_MAX];
 struct xfrm_policy_hash policy_bydst[XFRM_POLICY_MAX];
 unsigned int policy_count[XFRM_POLICY_MAX * 2];
 struct work_struct policy_hash_work;
 struct xfrm_policy_hthresh policy_hthresh;
 struct list_head inexact_bins;


 struct sock *nlsk;
 struct sock *nlsk_stash;

 u32 sysctl_aevent_etime;
 u32 sysctl_aevent_rseqth;
 int sysctl_larval_drop;
 u32 sysctl_acq_expires;

 u8 policy_default;






 struct ctl_table_header *sysctl_hdr;


 struct dst_ops xfrm4_dst_ops;

 struct dst_ops xfrm6_dst_ops;

 spinlock_t xfrm_state_lock;
 seqcount_spinlock_t xfrm_state_hash_generation;
 seqcount_spinlock_t xfrm_policy_hash_generation;

 spinlock_t xfrm_policy_lock;
 struct mutex xfrm_cfg_mutex;
};
# 31 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/mpls.h" 1








struct mpls_route;
struct ctl_table_header;

struct netns_mpls {
 int ip_ttl_propagate;
 int default_ttl;
 size_t platform_labels;
 struct mpls_route * *platform_label;

 struct ctl_table_header *ctl;
};
# 32 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/can.h" 1








# 1 "./include/linux/spinlock.h" 1
# 10 "./include/net/netns/can.h" 2

struct can_dev_rcv_lists;
struct can_pkg_stats;
struct can_rcv_lists_stats;

struct netns_can {

 struct proc_dir_entry *proc_dir;
 struct proc_dir_entry *pde_stats;
 struct proc_dir_entry *pde_reset_stats;
 struct proc_dir_entry *pde_rcvlist_all;
 struct proc_dir_entry *pde_rcvlist_fil;
 struct proc_dir_entry *pde_rcvlist_inv;
 struct proc_dir_entry *pde_rcvlist_sff;
 struct proc_dir_entry *pde_rcvlist_eff;
 struct proc_dir_entry *pde_rcvlist_err;
 struct proc_dir_entry *bcmproc_dir;



 struct can_dev_rcv_lists *rx_alldev_list;
 spinlock_t rcvlists_lock;
 struct timer_list stattimer;
 struct can_pkg_stats *pkg_stats;
 struct can_rcv_lists_stats *rcv_lists_stats;


 struct hlist_head cgw_list;
};
# 33 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/xdp.h" 1






struct netns_xdp {
 struct mutex lock;
 struct hlist_head list;
};
# 34 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/smc.h" 1



# 1 "./include/linux/mutex.h" 1
# 5 "./include/net/netns/smc.h" 2


struct smc_stats_rsn;
struct smc_stats;
struct netns_smc {

 struct smc_stats *smc_stats;

 struct mutex mutex_fback_rsn;
 struct smc_stats_rsn *fback_rsn;
};
# 35 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/bpf.h" 1








# 1 "./include/linux/bpf-netns.h" 1




# 1 "./include/linux/mutex.h" 1
# 6 "./include/linux/bpf-netns.h" 2
# 1 "./include/uapi/linux/bpf.h" 1
# 12 "./include/uapi/linux/bpf.h"
# 1 "./include/uapi/linux/bpf_common.h" 1
# 13 "./include/uapi/linux/bpf.h" 2
# 53 "./include/uapi/linux/bpf.h"
enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};




struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};

struct bpf_cgroup_storage_key {
 __u64 cgroup_inode_id;
 __u32 attach_type;
};

union bpf_iter_link_info {
 struct {
  __u32 map_fd;
 } map;
};
# 838 "./include/uapi/linux/bpf.h"
enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_RUN = BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
 BPF_PROG_QUERY,
 BPF_RAW_TRACEPOINT_OPEN,
 BPF_BTF_LOAD,
 BPF_BTF_GET_FD_BY_ID,
 BPF_TASK_FD_QUERY,
 BPF_MAP_LOOKUP_AND_DELETE_ELEM,
 BPF_MAP_FREEZE,
 BPF_BTF_GET_NEXT_ID,
 BPF_MAP_LOOKUP_BATCH,
 BPF_MAP_LOOKUP_AND_DELETE_BATCH,
 BPF_MAP_UPDATE_BATCH,
 BPF_MAP_DELETE_BATCH,
 BPF_LINK_CREATE,
 BPF_LINK_UPDATE,
 BPF_LINK_GET_FD_BY_ID,
 BPF_LINK_GET_NEXT_ID,
 BPF_ENABLE_STATS,
 BPF_ITER_CREATE,
 BPF_LINK_DETACH,
 BPF_PROG_BIND_MAP,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
 BPF_MAP_TYPE_CPUMAP,
 BPF_MAP_TYPE_XSKMAP,
 BPF_MAP_TYPE_SOCKHASH,
 BPF_MAP_TYPE_CGROUP_STORAGE,
 BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
 BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
 BPF_MAP_TYPE_QUEUE,
 BPF_MAP_TYPE_STACK,
 BPF_MAP_TYPE_SK_STORAGE,
 BPF_MAP_TYPE_DEVMAP_HASH,
 BPF_MAP_TYPE_STRUCT_OPS,
 BPF_MAP_TYPE_RINGBUF,
 BPF_MAP_TYPE_INODE_STORAGE,
 BPF_MAP_TYPE_TASK_STORAGE,
 BPF_MAP_TYPE_BLOOM_FILTER,
};
# 920 "./include/uapi/linux/bpf.h"
enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
 BPF_PROG_TYPE_CGROUP_DEVICE,
 BPF_PROG_TYPE_SK_MSG,
 BPF_PROG_TYPE_RAW_TRACEPOINT,
 BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
 BPF_PROG_TYPE_LWT_SEG6LOCAL,
 BPF_PROG_TYPE_LIRC_MODE2,
 BPF_PROG_TYPE_SK_REUSEPORT,
 BPF_PROG_TYPE_FLOW_DISSECTOR,
 BPF_PROG_TYPE_CGROUP_SYSCTL,
 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
 BPF_PROG_TYPE_CGROUP_SOCKOPT,
 BPF_PROG_TYPE_TRACING,
 BPF_PROG_TYPE_STRUCT_OPS,
 BPF_PROG_TYPE_EXT,
 BPF_PROG_TYPE_LSM,
 BPF_PROG_TYPE_SK_LOOKUP,
 BPF_PROG_TYPE_SYSCALL,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 BPF_CGROUP_DEVICE,
 BPF_SK_MSG_VERDICT,
 BPF_CGROUP_INET4_BIND,
 BPF_CGROUP_INET6_BIND,
 BPF_CGROUP_INET4_CONNECT,
 BPF_CGROUP_INET6_CONNECT,
 BPF_CGROUP_INET4_POST_BIND,
 BPF_CGROUP_INET6_POST_BIND,
 BPF_CGROUP_UDP4_SENDMSG,
 BPF_CGROUP_UDP6_SENDMSG,
 BPF_LIRC_MODE2,
 BPF_FLOW_DISSECTOR,
 BPF_CGROUP_SYSCTL,
 BPF_CGROUP_UDP4_RECVMSG,
 BPF_CGROUP_UDP6_RECVMSG,
 BPF_CGROUP_GETSOCKOPT,
 BPF_CGROUP_SETSOCKOPT,
 BPF_TRACE_RAW_TP,
 BPF_TRACE_FENTRY,
 BPF_TRACE_FEXIT,
 BPF_MODIFY_RETURN,
 BPF_LSM_MAC,
 BPF_TRACE_ITER,
 BPF_CGROUP_INET4_GETPEERNAME,
 BPF_CGROUP_INET6_GETPEERNAME,
 BPF_CGROUP_INET4_GETSOCKNAME,
 BPF_CGROUP_INET6_GETSOCKNAME,
 BPF_XDP_DEVMAP,
 BPF_CGROUP_INET_SOCK_RELEASE,
 BPF_XDP_CPUMAP,
 BPF_SK_LOOKUP,
 BPF_XDP,
 BPF_SK_SKB_VERDICT,
 BPF_SK_REUSEPORT_SELECT,
 BPF_SK_REUSEPORT_SELECT_OR_MIGRATE,
 BPF_PERF_EVENT,
 __MAX_BPF_ATTACH_TYPE
};



enum bpf_link_type {
 BPF_LINK_TYPE_UNSPEC = 0,
 BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
 BPF_LINK_TYPE_TRACING = 2,
 BPF_LINK_TYPE_CGROUP = 3,
 BPF_LINK_TYPE_ITER = 4,
 BPF_LINK_TYPE_NETNS = 5,
 BPF_LINK_TYPE_XDP = 6,
 BPF_LINK_TYPE_PERF_EVENT = 7,

 MAX_BPF_LINK_TYPE,
};
# 1169 "./include/uapi/linux/bpf.h"
enum {
 BPF_ANY = 0,
 BPF_NOEXIST = 1,
 BPF_EXIST = 2,
 BPF_F_LOCK = 4,
};


enum {
 BPF_F_NO_PREALLOC = (1U << 0),






 BPF_F_NO_COMMON_LRU = (1U << 1),

 BPF_F_NUMA_NODE = (1U << 2),


 BPF_F_RDONLY = (1U << 3),
 BPF_F_WRONLY = (1U << 4),


 BPF_F_STACK_BUILD_ID = (1U << 5),


 BPF_F_ZERO_SEED = (1U << 6),


 BPF_F_RDONLY_PROG = (1U << 7),
 BPF_F_WRONLY_PROG = (1U << 8),


 BPF_F_CLONE = (1U << 9),


 BPF_F_MMAPABLE = (1U << 10),


 BPF_F_PRESERVE_ELEMS = (1U << 11),


 BPF_F_INNER_MAP = (1U << 12),
};
# 1230 "./include/uapi/linux/bpf.h"
enum bpf_stats_type {

 BPF_STATS_RUN_TIME = 0,
};

enum bpf_stack_build_id_status {

 BPF_STACK_BUILD_ID_EMPTY = 0,

 BPF_STACK_BUILD_ID_VALID = 1,

 BPF_STACK_BUILD_ID_IP = 2,
};


struct bpf_stack_build_id {
 __s32 status;
 unsigned char build_id[20];
 union {
  __u64 offset;
  __u64 ip;
 };
};



union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


  char map_name[16U];
  __u32 map_ifindex;
  __u32 btf_fd;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
  __u32 btf_vmlinux_value_type_id;
# 1284 "./include/uapi/linux/bpf.h"
  __u64 map_extra;
 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u64 __attribute__((aligned(8))) in_batch;


  __u64 __attribute__((aligned(8))) out_batch;
  __u64 __attribute__((aligned(8))) keys;
  __u64 __attribute__((aligned(8))) values;
  __u32 count;




  __u32 map_fd;
  __u64 elem_flags;
  __u64 flags;
 } batch;

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
  char prog_name[16U];
  __u32 prog_ifindex;




  __u32 expected_attach_type;
  __u32 prog_btf_fd;
  __u32 func_info_rec_size;
  __u64 __attribute__((aligned(8))) func_info;
  __u32 func_info_cnt;
  __u32 line_info_rec_size;
  __u64 __attribute__((aligned(8))) line_info;
  __u32 line_info_cnt;
  __u32 attach_btf_id;
  union {

   __u32 attach_prog_fd;

   __u32 attach_btf_obj_fd;
  };
  __u32 :32;
  __u64 __attribute__((aligned(8))) fd_array;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
  __u32 replace_bpf_fd;



 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;



  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
  __u32 ctx_size_in;
  __u32 ctx_size_out;



  __u64 __attribute__((aligned(8))) ctx_in;
  __u64 __attribute__((aligned(8))) ctx_out;
  __u32 flags;
  __u32 cpu;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
   __u32 btf_id;
   __u32 link_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;

 struct {
  __u32 target_fd;
  __u32 attach_type;
  __u32 query_flags;
  __u32 attach_flags;
  __u64 __attribute__((aligned(8))) prog_ids;
  __u32 prog_cnt;
 } query;

 struct {
  __u64 name;
  __u32 prog_fd;
 } raw_tracepoint;

 struct {
  __u64 __attribute__((aligned(8))) btf;
  __u64 __attribute__((aligned(8))) btf_log_buf;
  __u32 btf_size;
  __u32 btf_log_size;
  __u32 btf_log_level;
 };

 struct {
  __u32 pid;
  __u32 fd;
  __u32 flags;
  __u32 buf_len;
  __u64 __attribute__((aligned(8))) buf;




  __u32 prog_id;
  __u32 fd_type;
  __u64 probe_offset;
  __u64 probe_addr;
 } task_fd_query;

 struct {
  __u32 prog_fd;
  union {
   __u32 target_fd;
   __u32 target_ifindex;
  };
  __u32 attach_type;
  __u32 flags;
  union {
   __u32 target_btf_id;
   struct {
    __u64 __attribute__((aligned(8))) iter_info;
    __u32 iter_info_len;
   };
   struct {




    __u64 bpf_cookie;
   } perf_event;
  };
 } link_create;

 struct {
  __u32 link_fd;

  __u32 new_prog_fd;
  __u32 flags;


  __u32 old_prog_fd;
 } link_update;

 struct {
  __u32 link_fd;
 } link_detach;

 struct {
  __u32 type;
 } enable_stats;

 struct {
  __u32 link_fd;
  __u32 flags;
 } iter_create;

 struct {
  __u32 prog_fd;
  __u32 map_fd;
  __u32 flags;
 } prog_bind_map;

} __attribute__((aligned(8)));
# 5129 "./include/uapi/linux/bpf.h"
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update, BPF_FUNC_xdp_adjust_meta, BPF_FUNC_perf_event_read_value, BPF_FUNC_perf_prog_read_value, BPF_FUNC_getsockopt, BPF_FUNC_override_return, BPF_FUNC_sock_ops_cb_flags_set, BPF_FUNC_msg_redirect_map, BPF_FUNC_msg_apply_bytes, BPF_FUNC_msg_cork_bytes, BPF_FUNC_msg_pull_data, BPF_FUNC_bind, BPF_FUNC_xdp_adjust_tail, BPF_FUNC_skb_get_xfrm_state, BPF_FUNC_get_stack, BPF_FUNC_skb_load_bytes_relative, BPF_FUNC_fib_lookup, BPF_FUNC_sock_hash_update, BPF_FUNC_msg_redirect_hash, BPF_FUNC_sk_redirect_hash, BPF_FUNC_lwt_push_encap, BPF_FUNC_lwt_seg6_store_bytes, BPF_FUNC_lwt_seg6_adjust_srh, BPF_FUNC_lwt_seg6_action, BPF_FUNC_rc_repeat, BPF_FUNC_rc_keydown, BPF_FUNC_skb_cgroup_id, BPF_FUNC_get_current_cgroup_id, BPF_FUNC_get_local_storage, BPF_FUNC_sk_select_reuseport, BPF_FUNC_skb_ancestor_cgroup_id, BPF_FUNC_sk_lookup_tcp, BPF_FUNC_sk_lookup_udp, BPF_FUNC_sk_release, BPF_FUNC_map_push_elem, BPF_FUNC_map_pop_elem, BPF_FUNC_map_peek_elem, BPF_FUNC_msg_push_data, BPF_FUNC_msg_pop_data, BPF_FUNC_rc_pointer_rel, BPF_FUNC_spin_lock, BPF_FUNC_spin_unlock, BPF_FUNC_sk_fullsock, BPF_FUNC_tcp_sock, BPF_FUNC_skb_ecn_set_ce, BPF_FUNC_get_listener_sock, BPF_FUNC_skc_lookup_tcp, BPF_FUNC_tcp_check_syncookie, BPF_FUNC_sysctl_get_name, BPF_FUNC_sysctl_get_current_value, BPF_FUNC_sysctl_get_new_value, BPF_FUNC_sysctl_set_new_value, BPF_FUNC_strtol, BPF_FUNC_strtoul, BPF_FUNC_sk_storage_get, BPF_FUNC_sk_storage_delete, BPF_FUNC_send_signal, BPF_FUNC_tcp_gen_syncookie, BPF_FUNC_skb_output, BPF_FUNC_probe_read_user, BPF_FUNC_probe_read_kernel, BPF_FUNC_probe_read_user_str, BPF_FUNC_probe_read_kernel_str, BPF_FUNC_tcp_send_ack, BPF_FUNC_send_signal_thread, BPF_FUNC_jiffies64, BPF_FUNC_read_branch_records, BPF_FUNC_get_ns_current_pid_tgid, BPF_FUNC_xdp_output, BPF_FUNC_get_netns_cookie, BPF_FUNC_get_current_ancestor_cgroup_id, BPF_FUNC_sk_assign, BPF_FUNC_ktime_get_boot_ns, BPF_FUNC_seq_printf, BPF_FUNC_seq_write, BPF_FUNC_sk_cgroup_id, BPF_FUNC_sk_ancestor_cgroup_id, BPF_FUNC_ringbuf_output, BPF_FUNC_ringbuf_reserve, BPF_FUNC_ringbuf_submit, BPF_FUNC_ringbuf_discard, BPF_FUNC_ringbuf_query, BPF_FUNC_csum_level, BPF_FUNC_skc_to_tcp6_sock, BPF_FUNC_skc_to_tcp_sock, BPF_FUNC_skc_to_tcp_timewait_sock, BPF_FUNC_skc_to_tcp_request_sock, BPF_FUNC_skc_to_udp6_sock, BPF_FUNC_get_task_stack, BPF_FUNC_load_hdr_opt, BPF_FUNC_store_hdr_opt, BPF_FUNC_reserve_hdr_opt, BPF_FUNC_inode_storage_get, BPF_FUNC_inode_storage_delete, BPF_FUNC_d_path, BPF_FUNC_copy_from_user, BPF_FUNC_snprintf_btf, BPF_FUNC_seq_printf_btf, BPF_FUNC_skb_cgroup_classid, BPF_FUNC_redirect_neigh, BPF_FUNC_per_cpu_ptr, BPF_FUNC_this_cpu_ptr, BPF_FUNC_redirect_peer, BPF_FUNC_task_storage_get, BPF_FUNC_task_storage_delete, BPF_FUNC_get_current_task_btf, BPF_FUNC_bprm_opts_set, BPF_FUNC_ktime_get_coarse_ns, BPF_FUNC_ima_inode_hash, BPF_FUNC_sock_from_file, BPF_FUNC_check_mtu, BPF_FUNC_for_each_map_elem, BPF_FUNC_snprintf, BPF_FUNC_sys_bpf, BPF_FUNC_btf_find_by_name_kind, BPF_FUNC_sys_close, BPF_FUNC_timer_init, BPF_FUNC_timer_set_callback, BPF_FUNC_timer_start, BPF_FUNC_timer_cancel, BPF_FUNC_get_func_ip, BPF_FUNC_get_attach_cookie, BPF_FUNC_task_pt_regs, BPF_FUNC_get_branch_snapshot, BPF_FUNC_trace_vprintk, BPF_FUNC_skc_to_unix_sock, BPF_FUNC_kallsyms_lookup_name,
 __BPF_FUNC_MAX_ID,
};





enum {
 BPF_F_RECOMPUTE_CSUM = (1ULL << 0),
 BPF_F_INVALIDATE_HASH = (1ULL << 1),
};




enum {
 BPF_F_HDR_FIELD_MASK = 0xfULL,
};


enum {
 BPF_F_PSEUDO_HDR = (1ULL << 4),
 BPF_F_MARK_MANGLED_0 = (1ULL << 5),
 BPF_F_MARK_ENFORCE = (1ULL << 6),
};


enum {
 BPF_F_INGRESS = (1ULL << 0),
};


enum {
 BPF_F_TUNINFO_IPV6 = (1ULL << 0),
};


enum {
 BPF_F_SKIP_FIELD_MASK = 0xffULL,
 BPF_F_USER_STACK = (1ULL << 8),

 BPF_F_FAST_STACK_CMP = (1ULL << 9),
 BPF_F_REUSE_STACKID = (1ULL << 10),

 BPF_F_USER_BUILD_ID = (1ULL << 11),
};


enum {
 BPF_F_ZERO_CSUM_TX = (1ULL << 1),
 BPF_F_DONT_FRAGMENT = (1ULL << 2),
 BPF_F_SEQ_NUMBER = (1ULL << 3),
};




enum {
 BPF_F_INDEX_MASK = 0xffffffffULL,
 BPF_F_CURRENT_CPU = BPF_F_INDEX_MASK,

 BPF_F_CTXLEN_MASK = (0xfffffULL << 32),
};


enum {
 BPF_F_CURRENT_NETNS = (-1L),
};


enum {
 BPF_CSUM_LEVEL_QUERY,
 BPF_CSUM_LEVEL_INC,
 BPF_CSUM_LEVEL_DEC,
 BPF_CSUM_LEVEL_RESET,
};


enum {
 BPF_F_ADJ_ROOM_FIXED_GSO = (1ULL << 0),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV4 = (1ULL << 1),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV6 = (1ULL << 2),
 BPF_F_ADJ_ROOM_ENCAP_L4_GRE = (1ULL << 3),
 BPF_F_ADJ_ROOM_ENCAP_L4_UDP = (1ULL << 4),
 BPF_F_ADJ_ROOM_NO_CSUM_RESET = (1ULL << 5),
 BPF_F_ADJ_ROOM_ENCAP_L2_ETH = (1ULL << 6),
};

enum {
 BPF_ADJ_ROOM_ENCAP_L2_MASK = 0xff,
 BPF_ADJ_ROOM_ENCAP_L2_SHIFT = 56,
};






enum {
 BPF_F_SYSCTL_BASE_NAME = (1ULL << 0),
};


enum {
 BPF_LOCAL_STORAGE_GET_F_CREATE = (1ULL << 0),



 BPF_SK_STORAGE_GET_F_CREATE = BPF_LOCAL_STORAGE_GET_F_CREATE,
};


enum {
 BPF_F_GET_BRANCH_RECORDS_SIZE = (1ULL << 0),
};




enum {
 BPF_RB_NO_WAKEUP = (1ULL << 0),
 BPF_RB_FORCE_WAKEUP = (1ULL << 1),
};


enum {
 BPF_RB_AVAIL_DATA = 0,
 BPF_RB_RING_SIZE = 1,
 BPF_RB_CONS_POS = 2,
 BPF_RB_PROD_POS = 3,
};


enum {
 BPF_RINGBUF_BUSY_BIT = (1U << 31),
 BPF_RINGBUF_DISCARD_BIT = (1U << 30),
 BPF_RINGBUF_HDR_SZ = 8,
};


enum {
 BPF_SK_LOOKUP_F_REPLACE = (1ULL << 0),
 BPF_SK_LOOKUP_F_NO_REUSEPORT = (1ULL << 1),
};


enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
 BPF_ADJ_ROOM_MAC,
};


enum bpf_hdr_start_off {
 BPF_HDR_START_MAC,
 BPF_HDR_START_NET,
};


enum bpf_lwt_encap_mode {
 BPF_LWT_ENCAP_SEG6,
 BPF_LWT_ENCAP_SEG6_INLINE,
 BPF_LWT_ENCAP_IP,
};


enum {
 BPF_F_BPRM_SECUREEXEC = (1ULL << 0),
};


enum {
 BPF_F_BROADCAST = (1ULL << 3),
 BPF_F_EXCLUDE_INGRESS = (1ULL << 4),
};
# 5315 "./include/uapi/linux/bpf.h"
struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;


 __u32 data_meta;
 union { struct bpf_flow_keys * flow_keys; __u64 :64; } __attribute__((aligned(8)));
 __u64 tstamp;
 __u32 wire_len;
 __u32 gso_segs;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 __u32 gso_size;
 __u32 :32;
 __u64 hwtstamp;
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};




struct bpf_xfrm_state {
 __u32 reqid;
 __u32 spi;
 __u16 family;
 __u16 ext;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
};
# 5389 "./include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,
# 5403 "./include/uapi/linux/bpf.h"
 BPF_LWT_REROUTE = 128,
};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;

 __u32 src_ip4;
 __u32 src_ip6[4];
 __u32 src_port;
 __u32 dst_port;
 __u32 dst_ip4;
 __u32 dst_ip6[4];
 __u32 state;
 __s32 rx_queue_mapping;
};

struct bpf_tcp_sock {
 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;


 __u32 data_segs_in;


 __u32 segs_out;


 __u32 data_segs_out;


 __u32 lost_out;
 __u32 sacked_out;
 __u64 bytes_received;



 __u64 bytes_acked;



 __u32 dsack_dups;


 __u32 delivered;
 __u32 delivered_ce;
 __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
 union {
  struct {
   __be32 saddr;
   __be32 daddr;
   __be16 sport;
   __be16 dport;
  } ipv4;
  struct {
   __be32 saddr[4];
   __be32 daddr[4];
   __be16 sport;
   __be16 dport;
  } ipv6;
 };
};

struct bpf_xdp_sock {
 __u32 queue_id;
};
# 5497 "./include/uapi/linux/bpf.h"
enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
 __u32 data_meta;

 __u32 ingress_ifindex;
 __u32 rx_queue_index;

 __u32 egress_ifindex;
};






struct bpf_devmap_val {
 __u32 ifindex;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};






struct bpf_cpumap_val {
 __u32 qsize;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};




struct sk_msg_md {
 union { void * data; __u64 :64; } __attribute__((aligned(8)));
 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));

 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 size;

 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};

struct sk_reuseport_md {




 union { void * data; __u64 :64; } __attribute__((aligned(8)));

 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));






 __u32 len;




 __u32 eth_protocol;
 __u32 ip_protocol;
 __u32 bind_inany;
 __u32 hash;
# 5604 "./include/uapi/linux/bpf.h"
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_sock * migrating_sk; __u64 :64; } __attribute__((aligned(8)));
};



struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
 __u64 load_time;
 __u32 created_by_uid;
 __u32 nr_map_ids;
 __u64 __attribute__((aligned(8))) map_ids;
 char name[16U];
 __u32 ifindex;
 __u32 gpl_compatible:1;
 __u32 :31;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 nr_jited_ksyms;
 __u32 nr_jited_func_lens;
 __u64 __attribute__((aligned(8))) jited_ksyms;
 __u64 __attribute__((aligned(8))) jited_func_lens;
 __u32 btf_id;
 __u32 func_info_rec_size;
 __u64 __attribute__((aligned(8))) func_info;
 __u32 nr_func_info;
 __u32 nr_line_info;
 __u64 __attribute__((aligned(8))) line_info;
 __u64 __attribute__((aligned(8))) jited_line_info;
 __u32 nr_jited_line_info;
 __u32 line_info_rec_size;
 __u32 jited_line_info_rec_size;
 __u32 nr_prog_tags;
 __u64 __attribute__((aligned(8))) prog_tags;
 __u64 run_time_ns;
 __u64 run_cnt;
 __u64 recursion_misses;
 __u32 verified_insns;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
 char name[16U];
 __u32 ifindex;
 __u32 btf_vmlinux_value_type_id;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 btf_id;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
 __u32 :32;
 __u64 map_extra;
} __attribute__((aligned(8)));

struct bpf_btf_info {
 __u64 __attribute__((aligned(8))) btf;
 __u32 btf_size;
 __u32 id;
 __u64 __attribute__((aligned(8))) name;
 __u32 name_len;
 __u32 kernel_btf;
} __attribute__((aligned(8)));

struct bpf_link_info {
 __u32 type;
 __u32 id;
 __u32 prog_id;
 union {
  struct {
   __u64 __attribute__((aligned(8))) tp_name;
   __u32 tp_name_len;
  } raw_tracepoint;
  struct {
   __u32 attach_type;
   __u32 target_obj_id;
   __u32 target_btf_id;
  } tracing;
  struct {
   __u64 cgroup_id;
   __u32 attach_type;
  } cgroup;
  struct {
   __u64 __attribute__((aligned(8))) target_name;
   __u32 target_name_len;
   union {
    struct {
     __u32 map_id;
    } map;
   };
  } iter;
  struct {
   __u32 netns_ino;
   __u32 attach_type;
  } netns;
  struct {
   __u32 ifindex;
  } xdp;
 };
} __attribute__((aligned(8)));





struct bpf_sock_addr {
 __u32 user_family;
 __u32 user_ip4;


 __u32 user_ip6[4];


 __u32 user_port;


 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 msg_src_ip4;


 __u32 msg_src_ip6[4];


 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 args[4];
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 is_fullsock;



 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 bpf_sock_ops_cb_flags;
 __u32 state;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;
 __u32 data_segs_in;
 __u32 segs_out;
 __u32 data_segs_out;
 __u32 lost_out;
 __u32 sacked_out;
 __u32 sk_txhash;
 __u64 bytes_received;
 __u64 bytes_acked;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
# 5806 "./include/uapi/linux/bpf.h"
 union { void * skb_data; __u64 :64; } __attribute__((aligned(8)));
 union { void * skb_data_end; __u64 :64; } __attribute__((aligned(8)));
 __u32 skb_len;



 __u32 skb_tcp_flags;
# 5822 "./include/uapi/linux/bpf.h"
};


enum {
 BPF_SOCK_OPS_RTO_CB_FLAG = (1<<0),
 BPF_SOCK_OPS_RETRANS_CB_FLAG = (1<<1),
 BPF_SOCK_OPS_STATE_CB_FLAG = (1<<2),
 BPF_SOCK_OPS_RTT_CB_FLAG = (1<<3),
# 5848 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG = (1<<4),
# 5857 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG = (1<<5),
# 5872 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG = (1<<6),

 BPF_SOCK_OPS_ALL_CB_FLAGS = 0x7F,
};




enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


 BPF_SOCK_OPS_BASE_RTT,






 BPF_SOCK_OPS_RTO_CB,




 BPF_SOCK_OPS_RETRANS_CB,





 BPF_SOCK_OPS_STATE_CB,



 BPF_SOCK_OPS_TCP_LISTEN_CB,


 BPF_SOCK_OPS_RTT_CB,

 BPF_SOCK_OPS_PARSE_HDR_OPT_CB,
# 5944 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_HDR_OPT_LEN_CB,
# 5961 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB,
# 5987 "./include/uapi/linux/bpf.h"
};






enum {
 BPF_TCP_ESTABLISHED = 1,
 BPF_TCP_SYN_SENT,
 BPF_TCP_SYN_RECV,
 BPF_TCP_FIN_WAIT1,
 BPF_TCP_FIN_WAIT2,
 BPF_TCP_TIME_WAIT,
 BPF_TCP_CLOSE,
 BPF_TCP_CLOSE_WAIT,
 BPF_TCP_LAST_ACK,
 BPF_TCP_LISTEN,
 BPF_TCP_CLOSING,
 BPF_TCP_NEW_SYN_RECV,

 BPF_TCP_MAX_STATES
};

enum {
 TCP_BPF_IW = 1001,
 TCP_BPF_SNDCWND_CLAMP = 1002,
 TCP_BPF_DELACK_MAX = 1003,
 TCP_BPF_RTO_MIN = 1004,
# 6048 "./include/uapi/linux/bpf.h"
 TCP_BPF_SYN = 1005,
 TCP_BPF_SYN_IP = 1006,
 TCP_BPF_SYN_MAC = 1007,
};

enum {
 BPF_LOAD_HDR_OPT_TCP_SYN = (1ULL << 0),
};




enum {
 BPF_WRITE_HDR_TCP_CURRENT_MSS = 1,






 BPF_WRITE_HDR_TCP_SYNACK_COOKIE = 2,


};

struct bpf_perf_event_value {
 __u64 counter;
 __u64 enabled;
 __u64 running;
};

enum {
 BPF_DEVCG_ACC_MKNOD = (1ULL << 0),
 BPF_DEVCG_ACC_READ = (1ULL << 1),
 BPF_DEVCG_ACC_WRITE = (1ULL << 2),
};

enum {
 BPF_DEVCG_DEV_BLOCK = (1ULL << 0),
 BPF_DEVCG_DEV_CHAR = (1ULL << 1),
};

struct bpf_cgroup_dev_ctx {

 __u32 access_type;
 __u32 major;
 __u32 minor;
};

struct bpf_raw_tracepoint_args {
 __u64 args[0];
};




enum {
 BPF_FIB_LOOKUP_DIRECT = (1U << 0),
 BPF_FIB_LOOKUP_OUTPUT = (1U << 1),
};

enum {
 BPF_FIB_LKUP_RET_SUCCESS,
 BPF_FIB_LKUP_RET_BLACKHOLE,
 BPF_FIB_LKUP_RET_UNREACHABLE,
 BPF_FIB_LKUP_RET_PROHIBIT,
 BPF_FIB_LKUP_RET_NOT_FWDED,
 BPF_FIB_LKUP_RET_FWD_DISABLED,
 BPF_FIB_LKUP_RET_UNSUPP_LWT,
 BPF_FIB_LKUP_RET_NO_NEIGH,
 BPF_FIB_LKUP_RET_FRAG_NEEDED,
};

struct bpf_fib_lookup {



 __u8 family;


 __u8 l4_protocol;
 __be16 sport;
 __be16 dport;

 union {

  __u16 tot_len;


  __u16 mtu_result;
 };



 __u32 ifindex;

 union {

  __u8 tos;
  __be32 flowinfo;


  __u32 rt_metric;
 };

 union {
  __be32 ipv4_src;
  __u32 ipv6_src[4];
 };





 union {
  __be32 ipv4_dst;
  __u32 ipv6_dst[4];
 };


 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __u8 smac[6];
 __u8 dmac[6];
};

struct bpf_redir_neigh {

 __u32 nh_family;

 union {
  __be32 ipv4_nh;
  __u32 ipv6_nh[4];
 };
};


enum bpf_check_mtu_flags {
 BPF_MTU_CHK_SEGS = (1U << 0),
};

enum bpf_check_mtu_ret {
 BPF_MTU_CHK_RET_SUCCESS,
 BPF_MTU_CHK_RET_FRAG_NEEDED,
 BPF_MTU_CHK_RET_SEGS_TOOBIG,
};

enum bpf_task_fd_type {
 BPF_FD_TYPE_RAW_TRACEPOINT,
 BPF_FD_TYPE_TRACEPOINT,
 BPF_FD_TYPE_KPROBE,
 BPF_FD_TYPE_KRETPROBE,
 BPF_FD_TYPE_UPROBE,
 BPF_FD_TYPE_URETPROBE,
};

enum {
 BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG = (1U << 0),
 BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL = (1U << 1),
 BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP = (1U << 2),
};

struct bpf_flow_keys {
 __u16 nhoff;
 __u16 thoff;
 __u16 addr_proto;
 __u8 is_frag;
 __u8 is_first_frag;
 __u8 is_encap;
 __u8 ip_proto;
 __be16 n_proto;
 __be16 sport;
 __be16 dport;
 union {
  struct {
   __be32 ipv4_src;
   __be32 ipv4_dst;
  };
  struct {
   __u32 ipv6_src[4];
   __u32 ipv6_dst[4];
  };
 };
 __u32 flags;
 __be32 flow_label;
};

struct bpf_func_info {
 __u32 insn_off;
 __u32 type_id;
};




struct bpf_line_info {
 __u32 insn_off;
 __u32 file_name_off;
 __u32 line_off;
 __u32 line_col;
};

struct bpf_spin_lock {
 __u32 val;
};

struct bpf_timer {
 __u64 :64;
 __u64 :64;
} __attribute__((aligned(8)));

struct bpf_sysctl {
 __u32 write;


 __u32 file_pos;


};

struct bpf_sockopt {
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval_end; __u64 :64; } __attribute__((aligned(8)));

 __s32 level;
 __s32 optname;
 __s32 optlen;
 __s32 retval;
};

struct bpf_pidns_info {
 __u32 pid;
 __u32 tgid;
};


struct bpf_sk_lookup {
 union {
  union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
  __u64 cookie;
 };

 __u32 family;
 __u32 protocol;
 __u32 remote_ip4;
 __u32 remote_ip6[4];
 __u32 remote_port;
 __u32 local_ip4;
 __u32 local_ip6[4];
 __u32 local_port;
};
# 6309 "./include/uapi/linux/bpf.h"
struct btf_ptr {
 void *ptr;
 __u32 type_id;
 __u32 flags;
};
# 6324 "./include/uapi/linux/bpf.h"
enum {
 BTF_F_COMPACT = (1ULL << 0),
 BTF_F_NONAME = (1ULL << 1),
 BTF_F_PTR_RAW = (1ULL << 2),
 BTF_F_ZERO = (1ULL << 3),
};
# 7 "./include/linux/bpf-netns.h" 2

enum netns_bpf_attach_type {
 NETNS_BPF_INVALID = -1,
 NETNS_BPF_FLOW_DISSECTOR = 0,
 NETNS_BPF_SK_LOOKUP,
 MAX_NETNS_BPF_ATTACH_TYPE
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum netns_bpf_attach_type
to_netns_bpf_attach_type(enum bpf_attach_type attach_type)
{
 switch (attach_type) {
 case BPF_FLOW_DISSECTOR:
  return NETNS_BPF_FLOW_DISSECTOR;
 case BPF_SK_LOOKUP:
  return NETNS_BPF_SK_LOOKUP;
 default:
  return NETNS_BPF_INVALID;
 }
}


extern struct mutex netns_bpf_mutex;

union bpf_attr;
struct bpf_prog;


int netns_bpf_prog_query(const union bpf_attr *attr,
    union bpf_attr *uattr);
int netns_bpf_prog_attach(const union bpf_attr *attr,
     struct bpf_prog *prog);
int netns_bpf_prog_detach(const union bpf_attr *attr, enum bpf_prog_type ptype);
int netns_bpf_link_create(const union bpf_attr *attr,
     struct bpf_prog *prog);
# 10 "./include/net/netns/bpf.h" 2

struct bpf_prog;
struct bpf_prog_array;

struct netns_bpf {

 struct bpf_prog_array *run_array[MAX_NETNS_BPF_ATTACH_TYPE];
 struct bpf_prog *progs[MAX_NETNS_BPF_ATTACH_TYPE];
 struct list_head links[MAX_NETNS_BPF_ATTACH_TYPE];
};
# 36 "./include/net/net_namespace_types.h" 2
# 1 "./include/net/netns/mctp.h" 1
# 11 "./include/net/netns/mctp.h"
struct netns_mctp {

 struct list_head routes;





 struct mutex bind_lock;
 struct hlist_head binds;




 spinlock_t keys_lock;
 struct hlist_head keys;


 unsigned int default_net;


 struct mutex neigh_lock;
 struct list_head neighbours;
};
# 37 "./include/net/net_namespace_types.h" 2

# 1 "./include/linux/ns_common.h" 1




# 1 "./include/linux/refcount.h" 1
# 6 "./include/linux/ns_common.h" 2

struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
 refcount_t count;
};
# 39 "./include/net/net_namespace_types.h" 2
# 1 "./include/linux/idr_types.h" 1
# 15 "./include/linux/idr_types.h"
# 1 "./include/linux/radix-tree.h" 1
# 11 "./include/linux/radix-tree.h"
# 1 "./include/linux/xarray_types.h" 1
# 52 "./include/linux/xarray_types.h"
struct xa_limit {
 u32 max;
 u32 min;
};







typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 109 "./include/linux/xarray_types.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 175 "./include/linux/xarray_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { spinlock_check(&xa->xa_lock); *(&xa->xa_lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 xa->xa_flags = flags;
 xa->xa_head = ((void *)0);
}
# 190 "./include/linux/xarray_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 202 "./include/linux/xarray_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == ((void *)0);
}
# 234 "./include/linux/xarray_types.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
 };
};
# 12 "./include/linux/radix-tree.h" 2
# 16 "./include/linux/idr_types.h" 2

struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 64 "./include/linux/idr_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((25 + 0)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 78 "./include/linux/idr_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}

struct ida {
 struct xarray xa;
};
# 40 "./include/net/net_namespace_types.h" 2


struct user_namespace;
struct proc_dir_entry;
struct net_device;
struct sock;
struct ctl_table_header;
struct net_generic;
struct uevent_sock;
struct netns_ipvs;
struct bpf_prog;





struct net {



 refcount_t passive;


 spinlock_t rules_mod_lock;

 unsigned int dev_unreg_count;

 unsigned int dev_base_seq;
 int ifindex;

 spinlock_t nsid_lock;
 atomic_t fnhe_genid;

 struct list_head list;
 struct list_head exit_list;





 struct llist_node cleanup_list;


 struct key_tag *key_domain;

 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct idr netns_ids;

 struct ns_common ns;

 struct list_head dev_base_head;
 struct proc_dir_entry *proc_net;
 struct proc_dir_entry *proc_net_stat;


 struct ctl_table_set sysctls;


 struct sock *rtnl;
 struct sock *genl_sock;

 struct uevent_sock *uevent_sock;

 struct hlist_head *dev_name_head;
 struct hlist_head *dev_index_head;
 struct raw_notifier_head netdev_chain;




 u32 hash_mix;

 struct net_device *loopback_dev;


 struct list_head rules_ops;

 struct netns_core core;
 struct netns_mib mib;
 struct netns_packet packet;
 struct netns_unix unx;
 struct netns_nexthop nexthop;
 struct netns_ipv4 ipv4;

 struct netns_ipv6 ipv6;
# 134 "./include/net/net_namespace_types.h"
 struct netns_nf nf;

 struct netns_ct ct;
# 145 "./include/net/net_namespace_types.h"
 struct net_generic *gen;


 struct netns_bpf bpf;






 u64 net_cookie;
# 164 "./include/net/net_namespace_types.h"
 struct netns_can can;
# 175 "./include/net/net_namespace_types.h"
 struct sock *diag_nlsk;



} ;
# 193 "./include/net/net_namespace_types.h"
struct pernet_operations {
 struct list_head list;
# 217 "./include/net/net_namespace_types.h"
 int (*init)(struct net *net);
 void (*pre_exit)(struct net *net);
 void (*exit)(struct net *net);
 void (*exit_batch)(struct list_head *net_exit_list);
 unsigned int *id;
 size_t size;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int net_eq(const struct net *net1, const struct net *net2)
{
 return net1 == net2;
}
# 243 "./include/net/net_namespace_types.h"
extern struct list_head net_namespace_list;
# 9 "./include/net/net_namespace_api.h" 2







struct user_namespace;
struct proc_dir_entry;
struct net_device;
struct sock;
struct ctl_table_header;
struct net_generic;
struct uevent_sock;
struct netns_ipvs;
struct bpf_prog;


struct net *copy_net_ns(unsigned long flags, struct user_namespace *user_ns,
   struct net *old_net);

void net_ns_get_ownership(const struct net *net, kuid_t *uid, kgid_t *gid);

void net_ns_barrier(void);

struct ns_common *get_net_ns(struct ns_common *ns);
struct net *get_net_ns_by_fd(int fd);
# 66 "./include/net/net_namespace_api.h"
struct net *get_net_ns_by_pid(pid_t pid);


void ipx_register_sysctl(void);
void ipx_unregister_sysctl(void);






void __put_net(struct net *net);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net *get_net(struct net *net)
{
 refcount_inc(&net->ns.count);
 return net;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net *maybe_get_net(struct net *net)
{





 if (!refcount_inc_not_zero(&net->ns.count))
  net = ((void *)0);
 return net;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_net(struct net *net)
{
 if (refcount_dec_and_test(&net->ns.count))
  __put_net(net);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_net(const struct net *net)
{
 return refcount_read(&net->ns.count) != 0;
}

void net_drop_ns(void *);
# 134 "./include/net/net_namespace_api.h"
int peernet2id_alloc(struct net *net, struct net *peer, gfp_t gfp);
int peernet2id(const struct net *net, struct net *peer);
bool peernet_has_id(const struct net *net, struct net *peer);
struct net *get_net_ns_by_id(const struct net *net, int id);
# 158 "./include/net/net_namespace_api.h"
int register_pernet_subsys(struct pernet_operations *);
void unregister_pernet_subsys(struct pernet_operations *);
int register_pernet_device(struct pernet_operations *);
void unregister_pernet_device(struct pernet_operations *);

struct ctl_table;


int net_sysctl_init(void);
struct ctl_table_header *register_net_sysctl(struct net *net, const char *path,
          struct ctl_table *table);
void unregister_net_sysctl_table(struct ctl_table_header *header);
# 182 "./include/net/net_namespace_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_genid_ipv4(const struct net *net)
{
 return atomic_read(&net->ipv4.rt_genid);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_genid_ipv6(const struct net *net)
{
 return atomic_read(&net->ipv6.fib6_sernum);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rt_genid_bump_ipv4(struct net *net)
{
 atomic_inc(&net->ipv4.rt_genid);
}

extern void (*__fib6_flush_trees)(struct net *net);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rt_genid_bump_ipv6(struct net *net)
{
 if (__fib6_flush_trees)
  __fib6_flush_trees(net);
}
# 215 "./include/net/net_namespace_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rt_genid_bump_all(struct net *net)
{
 rt_genid_bump_ipv4(net);
 rt_genid_bump_ipv6(net);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fnhe_genid(const struct net *net)
{
 return atomic_read(&net->fnhe_genid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fnhe_genid_bump(struct net *net)
{
 atomic_inc(&net->fnhe_genid);
}
# 18 "net/core/neighbour.c" 2

# 1 "./include/net/neighbour_api_seqlock.h" 1




# 1 "./include/net/neighbour_api.h" 1




# 1 "./include/net/neighbour_types.h" 1
# 34 "./include/net/neighbour_types.h"
struct neighbour;

enum {
 NEIGH_VAR_MCAST_PROBES,
 NEIGH_VAR_UCAST_PROBES,
 NEIGH_VAR_APP_PROBES,
 NEIGH_VAR_MCAST_REPROBES,
 NEIGH_VAR_RETRANS_TIME,
 NEIGH_VAR_BASE_REACHABLE_TIME,
 NEIGH_VAR_DELAY_PROBE_TIME,
 NEIGH_VAR_GC_STALETIME,
 NEIGH_VAR_QUEUE_LEN_BYTES,
 NEIGH_VAR_PROXY_QLEN,
 NEIGH_VAR_ANYCAST_DELAY,
 NEIGH_VAR_PROXY_DELAY,
 NEIGH_VAR_LOCKTIME,


 NEIGH_VAR_QUEUE_LEN,
 NEIGH_VAR_RETRANS_TIME_MS,
 NEIGH_VAR_BASE_REACHABLE_TIME_MS,

 NEIGH_VAR_GC_INTERVAL,
 NEIGH_VAR_GC_THRESH1,
 NEIGH_VAR_GC_THRESH2,
 NEIGH_VAR_GC_THRESH3,
 NEIGH_VAR_MAX
};

struct neigh_parms {
 possible_net_t net;
 struct net_device *dev;
 struct list_head list;
 int (*neigh_setup)(struct neighbour *);
 struct neigh_table *tbl;

 void *sysctl_table;

 int dead;
 refcount_t refcnt;
 struct callback_head callback_head;

 int reachable_time;
 int data[(NEIGH_VAR_LOCKTIME + 1)];
 unsigned long data_state[((((NEIGH_VAR_LOCKTIME + 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};

struct neigh_statistics {
 unsigned long allocs;
 unsigned long destroys;
 unsigned long hash_grows;

 unsigned long res_failed;

 unsigned long lookups;
 unsigned long hits;

 unsigned long rcv_probes_mcast;
 unsigned long rcv_probes_ucast;

 unsigned long periodic_gc_runs;
 unsigned long forced_gc_runs;

 unsigned long unres_discards;
 unsigned long table_fulls;
};
# 6 "./include/net/neighbour_api.h" 2
# 24 "./include/net/neighbour_api.h"
# 1 "./include/linux/refcount.h" 1
# 25 "./include/net/neighbour_api.h" 2
# 1 "./include/linux/skbuff.h" 1
# 26 "./include/net/neighbour_api.h" 2

# 1 "./include/linux/seq_file.h" 1





# 1 "./include/linux/string_helpers.h" 1





# 1 "./include/linux/ctype.h" 1
# 21 "./include/linux/ctype.h"
extern const unsigned char _ctype[];
# 43 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isdigit(int c)
{
 return '0' <= c && c <= '9';
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __tolower(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x01)) != 0))
  c -= 'A'-'a';
 return c;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __toupper(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x02)) != 0))
  c -= 'a'-'A';
 return c;
}
# 70 "./include/linux/ctype.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char _tolower(const char c)
{
 return c | 0x20;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isodigit(const char c)
{
 return c >= '0' && c <= '7';
}
# 7 "./include/linux/string_helpers.h" 2



struct file;
struct task_struct;



enum string_size_units {
 STRING_UNITS_10,
 STRING_UNITS_2,
};

void string_get_size(u64 size, u64 blk_size, enum string_size_units units,
       char *buf, int len);
# 32 "./include/linux/string_helpers.h"
int string_unescape(char *src, char *dst, size_t size, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_unescape_inplace(char *buf, unsigned int flags)
{
 return string_unescape(buf, buf, 0, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_unescape_any(char *src, char *dst, size_t size)
{
 return string_unescape(src, dst, size, (((((1UL))) << (0)) | ((((1UL))) << (1)) | ((((1UL))) << (2)) | ((((1UL))) << (3))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_unescape_any_inplace(char *buf)
{
 return string_unescape_any(buf, buf, 0);
}
# 64 "./include/linux/string_helpers.h"
int string_escape_mem(const char *src, size_t isz, char *dst, size_t osz,
  unsigned int flags, const char *only);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_escape_mem_any_np(const char *src, size_t isz,
  char *dst, size_t osz, const char *only)
{
 return string_escape_mem(src, isz, dst, osz, ((((((1UL))) << (0)) | ((((1UL))) << (3)) | ((((1UL))) << (1)) | ((((1UL))) << (2))) | ((((1UL))) << (4))), only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_escape_str(const char *src, char *dst, size_t sz,
  unsigned int flags, const char *only)
{
 return string_escape_mem(src, strlen(src), dst, sz, flags, only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int string_escape_str_any_np(const char *src, char *dst,
  size_t sz, const char *only)
{
 return string_escape_str(src, dst, sz, ((((((1UL))) << (0)) | ((((1UL))) << (3)) | ((((1UL))) << (1)) | ((((1UL))) << (2))) | ((((1UL))) << (4))), only);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void string_upper(char *dst, const char *src)
{
 do {
  *dst++ = __toupper(*src);
 } while (*src++);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void string_lower(char *dst, const char *src)
{
 do {
  *dst++ = __tolower(*src);
 } while (*src++);
}

char *kstrdup_quotable(const char *src, gfp_t gfp);
char *kstrdup_quotable_cmdline(struct task_struct *task, gfp_t gfp);
char *kstrdup_quotable_file(struct file *file, gfp_t gfp);

void kfree_strarray(char **array, size_t n);
# 7 "./include/linux/seq_file.h" 2

# 1 "./include/linux/mutex.h" 1
# 9 "./include/linux/seq_file.h" 2

struct seq_operations;
struct iov_iter;
struct kiocb;
struct path;
struct inode;
struct dentry;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 51 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 64 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_expect(!!(m->count > m->size), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/seq_file.h\"; .popsection; .long 14472b - 14470b; .short 66; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 84 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_expect(!!(m->count + num > m->size), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/seq_file.h\"; .popsection; .long 14472b - 14470b; .short 89; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
  m->count += num;
 }
}
# 102 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
ssize_t seq_read_iter(struct kiocb *iocb, struct iov_iter *iter);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((__format__(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((__format__(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull_width(struct seq_file *m, const char *delimiter,
          unsigned long long num, unsigned int width);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_put_hex_ll(struct seq_file *m, const char *delimiter,
      unsigned long long v, unsigned int width);

void seq_escape_mem(struct seq_file *m, const char *src, size_t len,
      unsigned int flags, const char *esc);

void seq_escape_str(struct seq_file *m, const char *src, unsigned int flags, const char *esc);
# 146 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_escape(struct seq_file *m, const char *s, const char *esc)
{
 seq_escape_str(m, s, ((((1UL))) << (3)), esc);
}

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);
# 218 "./include/linux/seq_file.h"
extern struct user_namespace *seq_user_ns(struct seq_file *seq);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 260 "./include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);

void seq_file_init(void);
# 28 "./include/net/neighbour_api.h" 2

# 1 "./include/linux/seq_file_net.h" 1






struct net;
extern struct net init_net;

struct seq_net_private {

 struct net *net;

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net *seq_file_net(struct seq_file *seq)
{

 return ((struct seq_net_private *)seq->private)->net;



}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net *seq_file_single_net(struct seq_file *seq)
{

 return (struct net *)seq->private;



}
# 30 "./include/net/neighbour_api.h" 2





# 1 "./include/linux/workqueue.h" 1
# 36 "./include/net/neighbour_api.h" 2

# 1 "./include/net/rtnetlink.h" 1
# 38 "./include/net/neighbour_api.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void neigh_var_set(struct neigh_parms *p, int index, int val)
{
 set_bit(index, p->data_state);
 p->data[index] = val;
}
# 53 "./include/net/neighbour_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void neigh_parms_data_state_setall(struct neigh_parms *p)
{
 bitmap_fill(p->data_state, (NEIGH_VAR_LOCKTIME + 1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void neigh_parms_data_state_cleanall(struct neigh_parms *p)
{
 bitmap_zero(p->data_state, (NEIGH_VAR_LOCKTIME + 1));
}



struct neighbour {
 struct neighbour *next;
 struct neigh_table *tbl;
 struct neigh_parms *parms;
 unsigned long confirmed;
 unsigned long updated;
 rwlock_t lock;
 refcount_t refcnt;
 unsigned int arp_queue_len_bytes;
 struct sk_buff_head arp_queue;
 struct timer_list timer;
 unsigned long used;
 atomic_t probes;
 u8 nud_state;
 u8 type;
 u8 dead;
 u8 protocol;
 u32 flags;
 seqlock_t ha_lock;
 unsigned char ha[((((32)) + ((typeof((32)))((sizeof(unsigned long))) - 1)) & ~((typeof((32)))((sizeof(unsigned long))) - 1))] __attribute__((__aligned__(8)));
 struct hh_cache hh;
 int (*output)(struct neighbour *, struct sk_buff *);
 const struct neigh_ops *ops;
 struct list_head gc_list;
 struct list_head managed_list;
 struct callback_head rcu;
 struct net_device *dev;
 u8 primary_key[0];
} ;

struct neigh_ops {
 int family;
 void (*solicit)(struct neighbour *, struct sk_buff *);
 void (*error_report)(struct neighbour *, struct sk_buff *);
 int (*output)(struct neighbour *, struct sk_buff *);
 int (*connected_output)(struct neighbour *, struct sk_buff *);
};

struct pneigh_entry {
 struct pneigh_entry *next;
 possible_net_t net;
 struct net_device *dev;
 u32 flags;
 u8 protocol;
 u8 key[];
};







struct neigh_hash_table {
 struct neighbour **hash_buckets;
 unsigned int hash_shift;
 __u32 hash_rnd[4];
 struct callback_head rcu;
};


struct neigh_table {
 int family;
 unsigned int entry_size;
 unsigned int key_len;
 __be16 protocol;
 __u32 (*hash)(const void *pkey,
     const struct net_device *dev,
     __u32 *hash_rnd);
 bool (*key_eq)(const struct neighbour *, const void *pkey);
 int (*constructor)(struct neighbour *);
 int (*pconstructor)(struct pneigh_entry *);
 void (*pdestructor)(struct pneigh_entry *);
 void (*proxy_redo)(struct sk_buff *skb);
 int (*is_multicast)(const void *pkey);
 bool (*allow_add)(const struct net_device *dev,
          struct netlink_ext_ack *extack);
 char *id;
 struct neigh_parms parms;
 struct list_head parms_list;
 int gc_interval;
 int gc_thresh1;
 int gc_thresh2;
 int gc_thresh3;
 unsigned long last_flush;
 struct delayed_work gc_work;
 struct delayed_work managed_work;
 struct timer_list proxy_timer;
 struct sk_buff_head proxy_queue;
 atomic_t entries;
 atomic_t gc_entries;
 struct list_head gc_list;
 struct list_head managed_list;
 rwlock_t lock;
 unsigned long last_rand;
 struct neigh_statistics *stats;
 struct neigh_hash_table *nht;
 struct pneigh_entry **phash_buckets;
};

enum {
 NEIGH_ARP_TABLE = 0,
 NEIGH_ND_TABLE = 1,
 NEIGH_DN_TABLE = 2,
 NEIGH_NR_TABLES,
 NEIGH_LINK_TABLE = NEIGH_NR_TABLES
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int neigh_parms_family(struct neigh_parms *p)
{
 return p->tbl->family;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *neighbour_priv(const struct neighbour *n)
{
 return (char *)n + n->tbl->entry_size;
}
# 203 "./include/net/neighbour_api.h"
extern const struct nla_policy nda_policy[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool neigh_key_eq16(const struct neighbour *n, const void *pkey)
{
 return *(const u16 *)n->primary_key == *(const u16 *)pkey;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool neigh_key_eq32(const struct neighbour *n, const void *pkey)
{
 return *(const u32 *)n->primary_key == *(const u32 *)pkey;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool neigh_key_eq128(const struct neighbour *n, const void *pkey)
{
 const u32 *n32 = (const u32 *)n->primary_key;
 const u32 *p32 = pkey;

 return ((n32[0] ^ p32[0]) | (n32[1] ^ p32[1]) |
  (n32[2] ^ p32[2]) | (n32[3] ^ p32[3])) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *___neigh_lookup_noref(
 struct neigh_table *tbl,
 bool (*key_eq)(const struct neighbour *n, const void *pkey),
 __u32 (*hash)(const void *pkey,
        const struct net_device *dev,
        __u32 *hash_rnd),
 const void *pkey,
 struct net_device *dev)
{
 struct neigh_hash_table *nht = ({ typeof(*(tbl->nht)) *________p1 = (typeof(*(tbl->nht)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_198(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tbl->nht)) == sizeof(char) || sizeof((tbl->nht)) == sizeof(short) || sizeof((tbl->nht)) == sizeof(int) || sizeof((tbl->nht)) == sizeof(long)) || sizeof((tbl->nht)) == sizeof(long long))) __compiletime_assert_198(); } while (0); (*(const volatile typeof( _Generic(((tbl->nht)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tbl->nht)))) *)&((tbl->nht))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(tbl->nht)) *)(________p1)); });
 struct neighbour *n;
 u32 hash_val;

 hash_val = hash(pkey, dev, nht->hash_rnd) >> (32 - nht->hash_shift);
 for (n = ({ typeof(*(nht->hash_buckets[hash_val])) *________p1 = (typeof(*(nht->hash_buckets[hash_val])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_199(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((nht->hash_buckets[hash_val])) == sizeof(char) || sizeof((nht->hash_buckets[hash_val])) == sizeof(short) || sizeof((nht->hash_buckets[hash_val])) == sizeof(int) || sizeof((nht->hash_buckets[hash_val])) == sizeof(long)) || sizeof((nht->hash_buckets[hash_val])) == sizeof(long long))) __compiletime_assert_199(); } while (0); (*(const volatile typeof( _Generic(((nht->hash_buckets[hash_val])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((nht->hash_buckets[hash_val])))) *)&((nht->hash_buckets[hash_val]))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(nht->hash_buckets[hash_val])) *)(________p1)); });
      n != ((void *)0);
      n = ({ typeof(*(n->next)) *________p1 = (typeof(*(n->next)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_200(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_200(); } while (0); (*(const volatile typeof( _Generic(((n->next)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((n->next)))) *)&((n->next))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(n->next)) *)(________p1)); })) {
  if (n->dev == dev && key_eq(n, pkey))
   return n;
 }

 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *__neigh_lookup_noref(struct neigh_table *tbl,
           const void *pkey,
           struct net_device *dev)
{
 return ___neigh_lookup_noref(tbl, tbl->key_eq, tbl->hash, pkey, dev);
}

void neigh_table_init(int index, struct neigh_table *tbl);
int neigh_table_clear(int index, struct neigh_table *tbl);
struct neighbour *neigh_lookup(struct neigh_table *tbl, const void *pkey,
          struct net_device *dev);
struct neighbour *neigh_lookup_nodev(struct neigh_table *tbl, struct net *net,
         const void *pkey);
struct neighbour *__neigh_create(struct neigh_table *tbl, const void *pkey,
     struct net_device *dev, bool want_ref);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *neigh_create(struct neigh_table *tbl,
          const void *pkey,
          struct net_device *dev)
{
 return __neigh_create(tbl, pkey, dev, true);
}
void neigh_destroy(struct neighbour *neigh);
int __neigh_event_send(struct neighbour *neigh, struct sk_buff *skb);
int neigh_update(struct neighbour *neigh, const u8 *lladdr, u8 new, u32 flags,
   u32 nlmsg_pid);
void __neigh_set_probe_once(struct neighbour *neigh);
bool neigh_remove_one(struct neighbour *ndel, struct neigh_table *tbl);
void neigh_changeaddr(struct neigh_table *tbl, struct net_device *dev);
int neigh_ifdown(struct neigh_table *tbl, struct net_device *dev);
int neigh_carrier_down(struct neigh_table *tbl, struct net_device *dev);
int neigh_resolve_output(struct neighbour *neigh, struct sk_buff *skb);
int neigh_connected_output(struct neighbour *neigh, struct sk_buff *skb);
int neigh_direct_output(struct neighbour *neigh, struct sk_buff *skb);
struct neighbour *neigh_event_ns(struct neigh_table *tbl,
      u8 *lladdr, void *saddr,
      struct net_device *dev);

struct neigh_parms *neigh_parms_alloc(struct net_device *dev,
          struct neigh_table *tbl);
void neigh_parms_release(struct neigh_table *tbl, struct neigh_parms *parms);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct net *neigh_parms_net(const struct neigh_parms *parms)
{
 return read_pnet(&parms->net);
}

unsigned long neigh_rand_reach_time(unsigned long base);

void pneigh_enqueue(struct neigh_table *tbl, struct neigh_parms *p,
      struct sk_buff *skb);
struct pneigh_entry *pneigh_lookup(struct neigh_table *tbl, struct net *net,
       const void *key, struct net_device *dev,
       int creat);
struct pneigh_entry *__pneigh_lookup(struct neigh_table *tbl, struct net *net,
         const void *key, struct net_device *dev);
int pneigh_delete(struct neigh_table *tbl, struct net *net, const void *key,
    struct net_device *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net *pneigh_net(const struct pneigh_entry *pneigh)
{
 return read_pnet(&pneigh->net);
}

void neigh_app_ns(struct neighbour *n);
void neigh_for_each(struct neigh_table *tbl,
      void (*cb)(struct neighbour *, void *), void *cookie);
void __neigh_for_each_release(struct neigh_table *tbl,
         int (*cb)(struct neighbour *));
int neigh_xmit(int fam, struct net_device *, const void *, struct sk_buff *);
void pneigh_for_each(struct neigh_table *tbl,
       void (*cb)(struct pneigh_entry *));

struct neigh_seq_state {
 struct seq_net_private p;
 struct neigh_table *tbl;
 struct neigh_hash_table *nht;
 void *(*neigh_sub_iter)(struct neigh_seq_state *state,
    struct neighbour *n, loff_t *pos);
 unsigned int bucket;
 unsigned int flags;



};
void *neigh_seq_start(struct seq_file *, loff_t *, struct neigh_table *,
        unsigned int);
void *neigh_seq_next(struct seq_file *, void *, loff_t *);
void neigh_seq_stop(struct seq_file *, void *);

int neigh_proc_dointvec(struct ctl_table *ctl, int write,
   void *buffer, size_t *lenp, loff_t *ppos);
int neigh_proc_dointvec_jiffies(struct ctl_table *ctl, int write,
    void *buffer,
    size_t *lenp, loff_t *ppos);
int neigh_proc_dointvec_ms_jiffies(struct ctl_table *ctl, int write,
       void *buffer, size_t *lenp, loff_t *ppos);

int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
     proc_handler *proc_handler);
void neigh_sysctl_unregister(struct neigh_parms *p);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __neigh_parms_put(struct neigh_parms *parms)
{
 refcount_dec(&parms->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neigh_parms *neigh_parms_clone(struct neigh_parms *parms)
{
 refcount_inc(&parms->refcnt);
 return parms;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void neigh_release(struct neighbour *neigh)
{
 if (refcount_dec_and_test(&neigh->refcnt))
  neigh_destroy(neigh);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour * neigh_clone(struct neighbour *neigh)
{
 if (neigh)
  refcount_inc(&neigh->refcnt);
 return neigh;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int neigh_event_send(struct neighbour *neigh, struct sk_buff *skb)
{
 unsigned long now = jiffies;

 if (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_201(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(neigh->used) == sizeof(char) || sizeof(neigh->used) == sizeof(short) || sizeof(neigh->used) == sizeof(int) || sizeof(neigh->used) == sizeof(long)) || sizeof(neigh->used) == sizeof(long long))) __compiletime_assert_201(); } while (0); (*(const volatile typeof( _Generic((neigh->used), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (neigh->used))) *)&(neigh->used)); }) != now)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_202(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(neigh->used) == sizeof(char) || sizeof(neigh->used) == sizeof(short) || sizeof(neigh->used) == sizeof(int) || sizeof(neigh->used) == sizeof(long)) || sizeof(neigh->used) == sizeof(long long))) __compiletime_assert_202(); } while (0); do { *(volatile typeof(neigh->used) *)&(neigh->used) = (now); } while (0); } while (0);
 if (!(neigh->nud_state&((0x80|0x40|0x02)|0x08|0x10)))
  return __neigh_event_send(neigh, skb);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *
__neigh_lookup(struct neigh_table *tbl, const void *pkey, struct net_device *dev, int creat)
{
 struct neighbour *n = neigh_lookup(tbl, pkey, dev);

 if (n || !creat)
  return n;

 n = neigh_create(tbl, pkey, dev);
 return IS_ERR(n) ? ((void *)0) : n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *
__neigh_lookup_errno(struct neigh_table *tbl, const void *pkey,
  struct net_device *dev)
{
 struct neighbour *n = neigh_lookup(tbl, pkey, dev);

 if (n)
  return n;

 return neigh_create(tbl, pkey, dev);
}

struct neighbour_cb {
 unsigned long sched_next;
 unsigned int flags;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void neigh_update_is_router(struct neighbour *neigh, u32 flags,
       int *notify)
{
 u8 ndm_flags = 0;

 ndm_flags |= (flags & ((((1UL))) << (6))) ? (1 << 7) : 0;
 if ((neigh->flags ^ ndm_flags) & (1 << 7)) {
  if (ndm_flags & (1 << 7))
   neigh->flags |= (1 << 7);
  else
   neigh->flags &= ~(1 << 7);
  *notify = 1;
 }
}
# 6 "./include/net/neighbour_api_seqlock.h" 2

# 1 "./include/linux/seqlock_api.h" 1





# 1 "./include/linux/spinlock_api.h" 1
# 58 "./include/linux/spinlock_api.h"
# 1 "./include/linux/irqflags.h" 1
# 16 "./include/linux/irqflags.h"
# 1 "./arch/arm64/include/asm/irqflags.h" 1
# 27 "./arch/arm64/include/asm/irqflags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_enable(void)
{
 if (system_has_prio_mask_debugging()) {
  u32 pmr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });

  ({ int __ret_warn_on = !!(pmr != 0xe0 && pmr != ({ extern struct static_key_false gic_nonsecure_priorities; u8 __prio = (0xe0 & ~0x80); if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_true)) branch = arch_static_branch_jump(&(&gic_nonsecure_priorities)->key, false); else if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_false)) branch = arch_static_branch(&(&gic_nonsecure_priorities)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); })) __prio = 0xa0; __prio; })); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/irqflags.h\"; .popsection; .long 14472b - 14470b; .short 32; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 }

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daifclr, #3		// arch_local_irq_enable" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "20" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  :
  : "r" ((unsigned long) 0xe0)
  : "memory");

 do {} while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_disable(void)
{
 if (system_has_prio_mask_debugging()) {
  u32 pmr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });

  ({ int __ret_warn_on = !!(pmr != 0xe0 && pmr != ({ extern struct static_key_false gic_nonsecure_priorities; u8 __prio = (0xe0 & ~0x80); if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_true)) branch = arch_static_branch_jump(&(&gic_nonsecure_priorities)->key, false); else if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_false)) branch = arch_static_branch(&(&gic_nonsecure_priorities)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); })) __prio = 0xa0; __prio; })); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/irqflags.h\"; .popsection; .long 14472b - 14470b; .short 51; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 }

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daifset, #3		// arch_local_irq_disable" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "20" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  :
  : "r" ((unsigned long) ({ extern struct static_key_false gic_nonsecure_priorities; u8 __prio = (0xe0 & ~0x80); if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_true)) branch = arch_static_branch_jump(&(&gic_nonsecure_priorities)->key, false); else if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_false)) branch = arch_static_branch(&(&gic_nonsecure_priorities)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); })) __prio = 0xa0; __prio; }))
  : "memory");
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_save_flags(void)
{
 unsigned long flags;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "mrs	%0, daif" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "20" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  : "=&r" (flags)
  :
  : "memory");

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled_flags(unsigned long flags)
{
 int res;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "and	%w0, %w1, #" "0x00000080" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "20" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "eor	%w0, %w1, #" "0xe0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  : "=&r" (res)
  : "r" ((int) flags)
  : "memory");

 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled(void)
{
 return arch_irqs_disabled_flags(arch_local_save_flags());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_irq_save(void)
{
 unsigned long flags;

 flags = arch_local_save_flags();





 if (!arch_irqs_disabled_flags(flags))
  arch_local_irq_disable();

 return flags;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_restore(unsigned long flags)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daif, %0" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "20" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__gpr_num_x\\num, \\num\n" "	.equ	.L__gpr_num_w\\num, \\num\n" "	.endr\n" "	.equ	.L__gpr_num_xzr, 31\n" "	.equ	.L__gpr_num_wzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__gpr_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  :
  : "r" (flags)
  : "memory");

 do {} while (0);
}
# 17 "./include/linux/irqflags.h" 2
# 27 "./include/linux/irqflags.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_off(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on_prepare(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_off(unsigned long ip) { }
# 59 "./include/linux/spinlock_api.h" 2


# 1 "./include/linux/lockdep.h" 1
# 62 "./include/linux/spinlock_api.h" 2

# 1 "./arch/arm64/include/generated/asm/mmiowb.h" 1
# 1 "./include/asm-generic/mmiowb.h" 1
# 2 "./arch/arm64/include/generated/asm/mmiowb.h" 2
# 64 "./include/linux/spinlock_api.h" 2
# 92 "./include/linux/spinlock_api.h"
# 1 "./arch/arm64/include/asm/spinlock.h" 1







# 1 "./arch/arm64/include/generated/asm/qspinlock.h" 1
# 1 "./include/asm-generic/qspinlock.h" 1
# 23 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_locked(struct qspinlock *lock)
{




 return atomic_read(&lock->val);
}
# 43 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_value_unlocked(struct qspinlock lock)
{
 return !atomic_read(&lock.val);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_contended(struct qspinlock *lock)
{
 return atomic_read(&lock->val) & ~(((1U << 8) - 1) << 0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_trylock(struct qspinlock *lock)
{
 int val = atomic_read(&lock->val);

 if (__builtin_expect(!!(val), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))), 1);
}

extern void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void queued_spin_lock(struct qspinlock *lock)
{
 int val = 0;

 if (__builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))), 1))
  return;

 queued_spin_lock_slowpath(lock, val);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void queued_spin_unlock(struct qspinlock *lock)
{



 do { typeof(&lock->locked) __p = (&lock->locked); union { typeof( _Generic((*&lock->locked), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&lock->locked))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&lock->locked), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&lock->locked)))) (0) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_203(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&lock->locked) == sizeof(char) || sizeof(*&lock->locked) == sizeof(short) || sizeof(*&lock->locked) == sizeof(int) || sizeof(*&lock->locked) == sizeof(long)))) __compiletime_assert_203(); } while (0); kasan_check_write(__p, sizeof(*&lock->locked)); switch (sizeof(*&lock->locked)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool virt_spin_lock(struct qspinlock *lock)
{
 return false;
}
# 2 "./arch/arm64/include/generated/asm/qspinlock.h" 2
# 9 "./arch/arm64/include/asm/spinlock.h" 2
# 1 "./arch/arm64/include/generated/asm/qrwlock.h" 1
# 1 "./include/asm-generic/qrwlock.h" 1
# 16 "./include/asm-generic/qrwlock.h"
# 1 "./arch/arm64/include/generated/asm/qspinlock.h" 1
# 17 "./include/asm-generic/qrwlock.h" 2
# 30 "./include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock);
extern void queued_write_lock_slowpath(struct qrwlock *lock);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_read_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1)) {
  cnts = (u32)atomic_add_return_acquire((1U << 9), &lock->cnts);
  if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
   return 1;
  atomic_sub((1U << 9), &lock->cnts);
 }
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_write_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(cnts), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_lock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_add_return_acquire((1U << 9), &lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
  return;


 queued_read_lock_slowpath(lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_lock(struct qrwlock *lock)
{
 int cnts = 0;

 if (__builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1))
  return;

 queued_write_lock_slowpath(lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return_release((1U << 9), &lock->cnts);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_unlock(struct qrwlock *lock)
{
 do { typeof(&lock->wlocked) __p = (&lock->wlocked); union { typeof( _Generic((*&lock->wlocked), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&lock->wlocked))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&lock->wlocked), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&lock->wlocked)))) (0) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_204(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&lock->wlocked) == sizeof(char) || sizeof(*&lock->wlocked) == sizeof(short) || sizeof(*&lock->wlocked) == sizeof(int) || sizeof(*&lock->wlocked) == sizeof(long)))) __compiletime_assert_204(); } while (0); kasan_check_write(__p, sizeof(*&lock->wlocked)); switch (sizeof(*&lock->wlocked)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_rwlock_is_contended(struct qrwlock *lock)
{
 return queued_spin_is_locked(&lock->wait_lock);
}
# 2 "./arch/arm64/include/generated/asm/qrwlock.h" 2
# 10 "./arch/arm64/include/asm/spinlock.h" 2
# 22 "./arch/arm64/include/asm/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vcpu_is_preempted(int cpu)
{
 return false;
}
# 93 "./include/linux/spinlock_api.h" 2
# 165 "./include/linux/spinlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 do { } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 int ret = queued_spin_trylock(&(lock)->raw_lock);

 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 queued_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 286 "./include/linux/spinlock_api.h"
# 1 "./include/linux/rwlock.h" 1







# 1 "./include/linux/spinlock_api.h" 1
# 9 "./include/linux/rwlock.h" 2
# 287 "./include/linux/spinlock_api.h" 2






# 1 "./include/linux/spinlock_api_smp.h" 1
# 21 "./include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 89 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}
# 107 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}



# 1 "./include/linux/rwlock_api_smp.h" 1







# 1 "./include/linux/spinlock_api.h" 1
# 9 "./include/linux/rwlock_api_smp.h" 2
# 22 "./include/linux/rwlock_api_smp.h"
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((__section__(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((__section__(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 121 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_read_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { if (0) do { } while (0); else do { } while (0); } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_write_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}
# 150 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)(void *)((((unsigned long)__builtin_return_address(0) & ((((1ULL))) << (55))) ? ((unsigned long)__builtin_return_address(0) | ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (63)) * 0l)) : (int *)8))), (vabits_actual) > (63), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (63)))))) : ((unsigned long)__builtin_return_address(0) & ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((vabits_actual) > (54)) * 0l)) : (int *)8))), (vabits_actual) > (54), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (vabits_actual)) + 1) & (~(((0ULL))) >> (64 - 1 - (54)))))))), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 187 "./include/linux/spinlock_api_smp.h" 2
# 294 "./include/linux/spinlock_api.h" 2
# 305 "./include/linux/spinlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 330 "./include/linux/spinlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 345 "./include/linux/spinlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}
# 398 "./include/linux/spinlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
{
 return queued_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
{
 return queued_spin_is_contended(&(&lock->rlock)->raw_lock);
}
# 427 "./include/linux/spinlock_api.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 451 "./include/linux/spinlock_api.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 7 "./include/linux/seqlock_api.h" 2

# 1 "./include/linux/seqlock.h" 1
# 9 "./include/linux/seqlock_api.h" 2
# 1 "./include/linux/lockdep.h" 1
# 10 "./include/linux/seqlock_api.h" 2
# 1 "./include/linux/spinlock.h" 1
# 11 "./include/linux/seqlock_api.h" 2
# 1 "./include/linux/mutex.h" 1
# 12 "./include/linux/seqlock_api.h" 2
# 1 "./include/linux/ww_mutex.h" 1
# 20 "./include/linux/ww_mutex.h"
# 1 "./include/linux/mutex_api.h" 1
# 29 "./include/linux/mutex_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mutex_destroy(struct mutex *lock) {}
# 59 "./include/linux/mutex_api.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







extern bool mutex_is_locked(struct mutex *lock);
# 123 "./include/linux/mutex_api.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 141 "./include/linux/mutex_api.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
# 21 "./include/linux/ww_mutex.h" 2


# 1 "./include/linux/rtmutex.h" 1
# 21 "./include/linux/rtmutex.h"
extern int max_lock_depth;

struct rt_mutex_base {
 raw_spinlock_t wait_lock;
 struct rb_root_cached waiters;
 struct task_struct *owner;
};
# 42 "./include/linux/rtmutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rt_mutex_base_is_locked(struct rt_mutex_base *lock)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_205(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(lock->owner) == sizeof(char) || sizeof(lock->owner) == sizeof(short) || sizeof(lock->owner) == sizeof(int) || sizeof(lock->owner) == sizeof(long)) || sizeof(lock->owner) == sizeof(long long))) __compiletime_assert_205(); } while (0); (*(const volatile typeof( _Generic((lock->owner), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (lock->owner))) *)&(lock->owner)); }) != ((void *)0);
}

extern void rt_mutex_base_init(struct rt_mutex_base *rtb);
# 57 "./include/linux/rtmutex.h"
struct rt_mutex {
 struct rt_mutex_base rtmutex;



};

struct rt_mutex_waiter;
struct hrtimer_sleeper;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rt_mutex_debug_task_free(struct task_struct *tsk) { }
# 98 "./include/linux/rtmutex.h"
extern void __rt_mutex_init(struct rt_mutex *lock, const char *name, struct lock_class_key *key);





extern void rt_mutex_lock(struct rt_mutex *lock);



extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);
# 24 "./include/linux/ww_mutex.h" 2
# 48 "./include/linux/ww_mutex.h"
struct ww_class {
 atomic_long_t stamp;
 struct lock_class_key acquire_key;
 struct lock_class_key mutex_key;
 const char *acquire_name;
 const char *mutex_name;
 unsigned int is_wait_die;
};

struct ww_mutex {
 struct mutex base;
 struct ww_acquire_ctx *ctx;



};

struct ww_acquire_ctx {
 struct task_struct *task;
 unsigned long stamp;
 unsigned int acquired;
 unsigned short wounded;
 unsigned short is_wait_die;
# 83 "./include/linux/ww_mutex.h"
};
# 108 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_init(struct ww_mutex *lock,
     struct ww_class *ww_class)
{
 __mutex_init(&lock->base,ww_class->mutex_name,&ww_class->mutex_key);
 lock->ctx = ((void *)0);



}
# 142 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_init(struct ww_acquire_ctx *ctx,
       struct ww_class *ww_class)
{
 ctx->task = get_current();
 ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
 ctx->acquired = 0;
 ctx->wounded = false;
 ctx->is_wait_die = ww_class->is_wait_die;
# 165 "./include/linux/ww_mutex.h"
}
# 178 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_done(struct ww_acquire_ctx *ctx)
{






}
# 195 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_fini(struct ww_acquire_ctx *ctx)
{
# 213 "./include/linux/ww_mutex.h"
}
# 244 "./include/linux/ww_mutex.h"
extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
# 276 "./include/linux/ww_mutex.h"
extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
          struct ww_acquire_ctx *ctx);
# 302 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
{
 int ret;



 ret = ww_mutex_lock(lock, ctx);
 (void)ret;
}
# 338 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
     struct ww_acquire_ctx *ctx)
{



 return ww_mutex_lock_interruptible(lock, ctx);
}

extern void ww_mutex_unlock(struct ww_mutex *lock);

extern int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock,
      struct ww_acquire_ctx *ctx);
# 361 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_destroy(struct ww_mutex *lock)
{

 mutex_destroy(&lock->base);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ww_mutex_is_locked(struct ww_mutex *lock)
{
 return mutex_is_locked((&lock->base));
}
# 13 "./include/linux/seqlock_api.h" 2
# 29 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) seqcount_t *__seqprop_ptr(seqcount_t *s)
{
 return s;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __seqprop_sequence(const seqcount_t *s)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_206(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_206(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __seqprop_preemptible(const seqcount_t *s)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqprop_assert(const seqcount_t *s)
{
 do { } while (0);
}
# 179 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do___read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 kcsan_atomic_next(0);
 return __builtin_expect(!!(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_207(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_207(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); }) != start), 0);
}
# 199 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 asm volatile("dmb " "ishld" : : : "memory");
 return do___read_seqcount_retry(s, start);
}
# 219 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_begin(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 asm volatile("dmb " "ishst" : : : "memory");
}
# 240 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_end(seqcount_t *s)
{
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 266 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 do_raw_write_seqcount_begin(s);
 do { } while (0);
}
# 292 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin(seqcount_t *s)
{
 do_write_seqcount_begin_nested(s, 0);
}
# 312 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 do_raw_write_seqcount_end(s);
}
# 362 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_barrier(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 382 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_invalidate(seqcount_t *s)
{
 asm volatile("dmb " "ishst" : : : "memory");
 kcsan_nestable_atomic_begin();
 s->sequence+=2;
 kcsan_nestable_atomic_end();
}
# 407 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount_latch(const seqcount_latch_t *s)
{




 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_208(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_208(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); });
}
# 423 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
read_seqcount_latch_retry(const seqcount_latch_t *s, unsigned start)
{
 return do_read_seqcount_retry(_Generic(*(&s->seqcount), seqcount_t: __seqprop_ptr((void *)(&s->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&s->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&s->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&s->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&s->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&s->seqcount)))), start);
}
# 510 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_latch(seqcount_latch_t *s)
{
 asm volatile("dmb " "ishst" : : : "memory");
 s->seqcount.sequence++;
 asm volatile("dmb " "ishst" : : : "memory");
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqbegin(const seqlock_t *sl)
{
 unsigned ret = ({ ; ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&sl->seqcount), seqcount_t: __seqprop_sequence((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&sl->seqcount))))) & 1) cpu_relax(); kcsan_atomic_next(1000); __seq; }); asm volatile("dmb " "ishld" : : : "memory"); _seq; }); });

 kcsan_atomic_next(0);
 kcsan_flat_atomic_begin();
 return ret;
}
# 543 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{




 kcsan_flat_atomic_end();

 return do_read_seqcount_retry(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount)))), start);
}
# 573 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 586 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock(&sl->lock);
}
# 599 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 613 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_bh(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_bh(&sl->lock);
}
# 626 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 639 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_irq(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
 return flags;
}
# 676 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 699 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 722 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}
# 746 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}
# 789 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 826 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}
# 841 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}
# 854 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}
# 880 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}
# 905 "./include/linux/seqlock_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 8 "./include/net/neighbour_api_seqlock.h" 2
# 23 "./include/net/neighbour_api_seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void neigh_ha_snapshot(char *dst, const struct neighbour *n,
         const struct net_device *dev)
{
 unsigned int seq;

 do {
  seq = read_seqbegin(&n->ha_lock);
  memcpy(dst, n->ha, dev->addr_len);
 } while (read_seqretry(&n->ha_lock, seq));
}
# 20 "net/core/neighbour.c" 2

# 1 "./include/net/dst_api.h" 1
# 12 "./include/net/dst_api.h"
# 1 "./include/net/dst_types.h" 1
# 14 "./include/net/dst_types.h"
struct sk_buff;
struct dst_ops;
struct sock;
struct net;

struct dst_entry {
 struct net_device *dev;
 struct dst_ops *ops;
 unsigned long _metrics;
 unsigned long expires;



 void *__pad1;

 int (*input)(struct sk_buff *);
 int (*output)(struct net *net, struct sock *sk, struct sk_buff *skb);

 unsigned short flags;
# 49 "./include/net/dst_types.h"
 short obsolete;




 unsigned short header_len;
 unsigned short trailer_len;






 atomic_t __refcnt;

 int __use;
 unsigned long lastuse;
 struct lwtunnel_state *lwtstate;
 struct callback_head callback_head;
 short error;
 short __pad;
 __u32 tclassid;



};
# 13 "./include/net/dst_api.h" 2






# 1 "./include/linux/indirect_call_wrapper.h" 1
# 20 "./include/net/dst_api.h" 2




struct dst_metrics {
 u32 metrics[(__RTAX_MAX - 1)];
 refcount_t refcnt;
} __attribute__((__aligned__(4)));
extern const struct dst_metrics dst_default_metrics;

u32 *dst_cow_metrics_generic(struct dst_entry *dst, unsigned long old);
# 39 "./include/net/dst_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dst_metrics_read_only(const struct dst_entry *dst)
{
 return dst->_metrics & 0x1UL;
}

void __dst_destroy_metrics_generic(struct dst_entry *dst, unsigned long old);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_destroy_metrics_generic(struct dst_entry *dst)
{
 unsigned long val = dst->_metrics;
 if (!(val & 0x1UL))
  __dst_destroy_metrics_generic(dst, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 *dst_metrics_write_ptr(struct dst_entry *dst)
{
 unsigned long p = dst->_metrics;

 do { if (__builtin_expect(!!(!p), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/net/dst_api.h\"; .popsection; .long 14472b - 14470b; .short 57; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 if (p & 0x1UL)
  return dst->ops->cow_metrics(dst, p);
 return ((u32 *)((p) & ~0x3UL));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_init_metrics(struct dst_entry *dst,
        const u32 *src_metrics,
        bool read_only)
{
 dst->_metrics = ((unsigned long) src_metrics) |
  (read_only ? 0x1UL : 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_copy_metrics(struct dst_entry *dest, const struct dst_entry *src)
{
 u32 *dst_metrics = dst_metrics_write_ptr(dest);

 if (dst_metrics) {
  u32 *src_metrics = ((u32 *)(((src)->_metrics) & ~0x3UL));

  memcpy(dst_metrics, src_metrics, (__RTAX_MAX - 1) * sizeof(u32));
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 *dst_metrics_ptr(struct dst_entry *dst)
{
 return ((u32 *)(((dst)->_metrics) & ~0x3UL));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32
dst_metric_raw(const struct dst_entry *dst, const int metric)
{
 u32 *p = ((u32 *)(((dst)->_metrics) & ~0x3UL));

 return p[metric-1];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32
dst_metric(const struct dst_entry *dst, const int metric)
{
 ({ int __ret_warn_on = !!(metric == RTAX_HOPLIMIT || metric == RTAX_ADVMSS || metric == RTAX_MTU); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/net/dst_api.h\"; .popsection; .long 14472b - 14470b; .short 104; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });


 return dst_metric_raw(dst, metric);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32
dst_metric_advmss(const struct dst_entry *dst)
{
 u32 advmss = dst_metric_raw(dst, RTAX_ADVMSS);

 if (!advmss)
  advmss = dst->ops->default_advmss(dst);

 return advmss;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_metric_set(struct dst_entry *dst, int metric, u32 val)
{
 u32 *p = dst_metrics_write_ptr(dst);

 if (p)
  p[metric-1] = val;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32
dst_feature(const struct dst_entry *dst, u32 feature)
{
 return dst_metric(dst, RTAX_FEATURES) & feature;
}

                                                                         ;
                                                                          ;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dst_mtu(const struct dst_entry *dst)
{
 return dst->ops->mtu(dst);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dst_metric_rtt(const struct dst_entry *dst, int metric)
{
 return msecs_to_jiffies(dst_metric(dst, metric));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32
dst_allfrag(const struct dst_entry *dst)
{
 int ret = dst_feature(dst, (1 << 3));
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
dst_metric_locked(const struct dst_entry *dst, int metric)
{
 return dst_metric(dst, RTAX_LOCK) & (1 << metric);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_hold(struct dst_entry *dst)
{




 do { __attribute__((__noreturn__)) extern void __compiletime_assert_209(void) __attribute__((__error__("BUILD_BUG_ON failed: " "offsetof(struct dst_entry, __refcnt) & 63"))); if (!(!(__builtin_offsetof(struct dst_entry, __refcnt) & 63))) __compiletime_assert_209(); } while (0);
 ({ int __ret_warn_on = !!(atomic_inc_not_zero(&dst->__refcnt) == 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/net/dst_api.h\"; .popsection; .long 14472b - 14470b; .short 172; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_use_noref(struct dst_entry *dst, unsigned long time)
{
 if (__builtin_expect(!!(time != dst->lastuse), 0)) {
  dst->__use++;
  dst->lastuse = time;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_hold_and_use(struct dst_entry *dst, unsigned long time)
{
 dst_hold(dst);
 dst_use_noref(dst, time);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dst_entry *dst_clone(struct dst_entry *dst)
{
 if (dst)
  dst_hold(dst);
 return dst;
}

void dst_release(struct dst_entry *dst);

void dst_release_immediate(struct dst_entry *dst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refdst_drop(unsigned long refdst)
{
 if (!(refdst & 1UL))
  dst_release((struct dst_entry *)(refdst & ~(1UL)));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_dst_drop(struct sk_buff *skb)
{
 if (skb->_skb_refdst) {
  refdst_drop(skb->_skb_refdst);
  skb->_skb_refdst = 0UL;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_dst_copy(struct sk_buff *nskb, unsigned long refdst)
{
 nskb->slow_gro |= !!refdst;
 nskb->_skb_refdst = refdst;
 if (!(nskb->_skb_refdst & 1UL))
  dst_clone(skb_dst(nskb));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_dst_copy(struct sk_buff *nskb, const struct sk_buff *oskb)
{
 __skb_dst_copy(nskb, oskb->_skb_refdst);
}
# 240 "./include/net/dst_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dst_hold_safe(struct dst_entry *dst)
{
 return atomic_inc_not_zero(&dst->__refcnt);
}
# 252 "./include/net/dst_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_dst_force(struct sk_buff *skb)
{
 if (skb_dst_is_noref(skb)) {
  struct dst_entry *dst = skb_dst(skb);

  ({ int __ret_warn_on = !!(!rcu_read_lock_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/net/dst_api.h\"; .popsection; .long 14472b - 14470b; .short 257; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
  if (!dst_hold_safe(dst))
   dst = ((void *)0);

  skb->_skb_refdst = (unsigned long)dst;
  skb->slow_gro |= !!dst;
 }

 return skb->_skb_refdst != 0UL;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dst_tclassid(const struct sk_buff *skb)
{







 return 0;
}

extern struct net init_net;

int dst_discard_out(struct net *net, struct sock *sk, struct sk_buff *skb);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dst_discard(struct sk_buff *skb)
{
 return dst_discard_out(&init_net, skb->sk, skb);
}
void *dst_alloc(struct dst_ops *ops, struct net_device *dev, int initial_ref,
  int initial_obsolete, unsigned short flags);
void dst_init(struct dst_entry *dst, struct dst_ops *ops,
       struct net_device *dev, int initial_ref, int initial_obsolete,
       unsigned short flags);
struct dst_entry *dst_destroy(struct dst_entry *dst);
void dst_dev_put(struct dst_entry *dst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_confirm(struct dst_entry *dst)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *dst_neigh_lookup(const struct dst_entry *dst, const void *daddr)
{
 struct neighbour *n = dst->ops->neigh_lookup(dst, ((void *)0), daddr);
 return IS_ERR(n) ? ((void *)0) : n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *dst_neigh_lookup_skb(const struct dst_entry *dst,
           struct sk_buff *skb)
{
 struct neighbour *n;

 if (({ int __ret_warn_on = !!(!dst->ops->neigh_lookup); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/net/dst_api.h\"; .popsection; .long 14472b - 14470b; .short 311; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return ((void *)0);

 n = dst->ops->neigh_lookup(dst, skb, ((void *)0));

 return IS_ERR(n) ? ((void *)0) : n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_confirm_neigh(const struct dst_entry *dst,
         const void *daddr)
{
 if (dst->ops->confirm_neigh)
  dst->ops->confirm_neigh(dst, daddr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_link_failure(struct sk_buff *skb)
{
 struct dst_entry *dst = skb_dst(skb);
 if (dst && dst->ops && dst->ops->link_failure)
  dst->ops->link_failure(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dst_set_expires(struct dst_entry *dst, int timeout)
{
 unsigned long expires = jiffies + timeout;

 if (expires == 0)
  expires = 1;

 if (dst->expires == 0 || (({ unsigned long __dummy; typeof(dst->expires) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(expires) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((expires) - (dst->expires)) < 0)))
  dst->expires = expires;
}


                        ;

                        ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dst_output(struct net *net, struct sock *sk, struct sk_buff *skb)
{
 return skb_dst(skb)->output(net, sk, skb);


}

                                                          ;
                                                                 ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dst_input(struct sk_buff *skb)
{
 return skb_dst(skb)->input(skb);

}


              ;

               ;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dst_entry *dst_check(struct dst_entry *dst, u32 cookie)
{
 if (dst->obsolete)
  dst = dst->ops->check(dst, cookie);

 return dst;
}


enum {
 XFRM_LOOKUP_ICMP = 1 << 0,
 XFRM_LOOKUP_QUEUE = 1 << 1,
 XFRM_LOOKUP_KEEP_DST_REF = 1 << 2,
};

struct flowi;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dst_entry *xfrm_lookup(struct net *net,
         struct dst_entry *dst_orig,
         const struct flowi *fl,
         const struct sock *sk,
         int flags)
{
 return dst_orig;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dst_entry *
xfrm_lookup_with_ifid(struct net *net, struct dst_entry *dst_orig,
        const struct flowi *fl, const struct sock *sk,
        int flags, u32 if_id)
{
 return dst_orig;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dst_entry *xfrm_lookup_route(struct net *net,
        struct dst_entry *dst_orig,
        const struct flowi *fl,
        const struct sock *sk,
        int flags)
{
 return dst_orig;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xfrm_state *dst_xfrm(const struct dst_entry *dst)
{
 return ((void *)0);
}
# 439 "./include/net/dst_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_dst_update_pmtu(struct sk_buff *skb, u32 mtu)
{
 struct dst_entry *dst = skb_dst(skb);

 if (dst && dst->ops->update_pmtu)
  dst->ops->update_pmtu(dst, ((void *)0), skb, mtu, true);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_dst_update_pmtu_no_confirm(struct sk_buff *skb, u32 mtu)
{
 struct dst_entry *dst = skb_dst(skb);

 if (dst && dst->ops->update_pmtu)
  dst->ops->update_pmtu(dst, ((void *)0), skb, mtu, false);
}

struct dst_entry *dst_blackhole_check(struct dst_entry *dst, u32 cookie);
void dst_blackhole_update_pmtu(struct dst_entry *dst, struct sock *sk,
          struct sk_buff *skb, u32 mtu, bool confirm_neigh);
void dst_blackhole_redirect(struct dst_entry *dst, struct sock *sk,
       struct sk_buff *skb);
u32 *dst_blackhole_cow_metrics(struct dst_entry *dst, unsigned long old);
struct neighbour *dst_blackhole_neigh_lookup(const struct dst_entry *dst,
          struct sk_buff *skb,
          const void *daddr);
unsigned int dst_blackhole_mtu(const struct dst_entry *dst);
# 22 "net/core/neighbour.c" 2
# 1 "./include/linux/workqueue_api.h" 1
# 22 "./include/linux/workqueue_api.h"
struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 40 "./include/linux/workqueue_api.h"
 bool no_numa;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
}
# 96 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __init_work(struct work_struct *work, int onstack) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int work_static(struct work_struct *work) { return 0; }
# 213 "./include/linux/workqueue_api.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 235 "./include/linux/workqueue_api.h"
__attribute__((__format__(printf, 1, 4))) struct workqueue_struct *
alloc_workqueue(const char *fmt, unsigned int flags, int max_active, ...);
# 263 "./include/linux/workqueue_api.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(void);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_all_workqueues(void);
extern void show_one_workqueue(struct workqueue_struct *wq);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 332 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 346 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 361 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 375 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 394 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 423 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 437 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 451 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 467 "./include/linux/workqueue_api.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 487 "./include/linux/workqueue_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wq_watchdog_touch(int cpu) { }



int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


void workqueue_init_early(void);
void workqueue_init(void);
# 23 "net/core/neighbour.c" 2






# 1 "./include/linux/net.h" 1
# 20 "./include/linux/net.h"
# 1 "./include/linux/page_ref.h" 1







# 1 "./include/linux/page-flags.h" 1
# 22 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _compound_head(const struct page *page)
{
 unsigned long head = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_210(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_210(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); });

 if (__builtin_expect(!!(head & 1), 0))
  return head - 1;
 return (unsigned long)page;
}
# 61 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTail(struct page *page)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_211(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_211(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); }) & 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
{
 return arch_test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PagePoisoned(const struct page *page)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_212(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->flags) == sizeof(char) || sizeof(page->flags) == sizeof(short) || sizeof(page->flags) == sizeof(int) || sizeof(page->flags) == sizeof(long)) || sizeof(page->flags) == sizeof(long long))) __compiletime_assert_212(); } while (0); (*(const volatile typeof( _Generic((page->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->flags))) *)&(page->flags)); }) == -1l;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_init_poison(struct page *page, size_t size)
{
}


static unsigned long *folio_flags(struct folio *folio, unsigned n)
{
 struct page *page = &folio->page;

 ((void)(sizeof(( long)(PageTail(page)))));
 ((void)(sizeof(( long)(n > 0 && !arch_test_bit(PG_head, &page->flags)))));
 return &page[n].flags;
}

# 1 "././include/linux/page-flags-helper-macros-define.h" 1
# 95 "./include/linux/page-flags.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_locked(struct folio *folio) { return arch_test_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return arch_test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_locked(struct folio *folio) { arch___set_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { arch___set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_locked(struct folio *folio) { arch___clear_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { arch___clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_waiters(struct folio *folio) { return arch_test_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return arch_test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_waiters(struct folio *folio) { set_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_waiters(struct folio *folio) { clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_waiters(struct folio *folio) { arch___clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { arch___clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_error(struct folio *folio) { return arch_test_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageError(struct page *page) { return arch_test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_error(struct folio *folio) { set_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_error(struct folio *folio) { clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_error(struct folio *folio) { return test_and_clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_referenced(struct folio *folio) { return arch_test_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return arch_test_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_referenced(struct folio *folio) { set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_referenced(struct folio *folio) { clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_referenced(struct folio *folio) { return test_and_clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_referenced(struct folio *folio) { arch___set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { arch___set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_dirty(struct folio *folio) { return arch_test_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return arch_test_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_dirty(struct folio *folio) { set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_dirty(struct folio *folio) { clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_dirty(struct folio *folio) { return test_and_set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_dirty(struct folio *folio) { return test_and_clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_dirty(struct folio *folio) { arch___clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { arch___clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_lru(struct folio *folio) { return arch_test_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return arch_test_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_lru(struct folio *folio) { set_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_lru(struct folio *folio) { clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_lru(struct folio *folio) { arch___clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { arch___clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_lru(struct folio *folio) { return test_and_clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageLRU(struct page *page) { return test_and_clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_active(struct folio *folio) { return arch_test_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return arch_test_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_active(struct folio *folio) { set_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { set_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_active(struct folio *folio) { clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_active(struct folio *folio) { arch___clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { arch___clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_active(struct folio *folio) { return test_and_clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_workingset(struct folio *folio) { return arch_test_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return arch_test_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_workingset(struct folio *folio) { set_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_workingset(struct folio *folio) { clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_workingset(struct folio *folio) { return test_and_clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_slab(struct folio *folio) { return arch_test_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return arch_test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_slab(struct folio *folio) { arch___set_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { arch___set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_slab(struct folio *folio) { arch___clear_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { arch___clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_slob_free(struct folio *folio) { return arch_test_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return arch_test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_slob_free(struct folio *folio) { arch___set_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { arch___set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_slob_free(struct folio *folio) { arch___clear_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { arch___clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_checked(struct folio *folio) { return arch_test_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return arch_test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_checked(struct folio *folio) { set_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_checked(struct folio *folio) { clear_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_pinned(struct folio *folio) { return arch_test_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return arch_test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_pinned(struct folio *folio) { set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_pinned(struct folio *folio) { clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_pinned(struct folio *folio) { return test_and_set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_pinned(struct folio *folio) { return test_and_clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_savepinned(struct folio *folio) { return arch_test_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return arch_test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_savepinned(struct folio *folio) { set_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_savepinned(struct folio *folio) { clear_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_foreign(struct folio *folio) { return arch_test_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return arch_test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_foreign(struct folio *folio) { set_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_foreign(struct folio *folio) { clear_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_xen_remapped(struct folio *folio) { return arch_test_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageXenRemapped(struct page *page) { return arch_test_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_xen_remapped(struct folio *folio) { set_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_xen_remapped(struct folio *folio) { clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_xen_remapped(struct folio *folio) { return test_and_clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reserved(struct folio *folio) { return arch_test_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return arch_test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_reserved(struct folio *folio) { set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_reserved(struct folio *folio) { clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_reserved(struct folio *folio) { arch___clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { arch___clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_reserved(struct folio *folio) { arch___set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { arch___set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_swapbacked(struct folio *folio) { return arch_test_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return arch_test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_swapbacked(struct folio *folio) { set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_swapbacked(struct folio *folio) { clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_swapbacked(struct folio *folio) { arch___clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { arch___clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_swapbacked(struct folio *folio) { arch___set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { arch___set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_private(struct folio *folio) { return arch_test_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return arch_test_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_private(struct folio *folio) { set_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_private(struct folio *folio) { clear_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_private_2(struct folio *folio) { return arch_test_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return arch_test_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_private_2(struct folio *folio) { set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_private_2(struct folio *folio) { clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_private_2(struct folio *folio) { return test_and_set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_private_2(struct folio *folio) { return test_and_clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_owner_priv_1(struct folio *folio) { return arch_test_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return arch_test_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_owner_priv_1(struct folio *folio) { set_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_owner_priv_1(struct folio *folio) { clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_owner_priv_1(struct folio *folio) { return test_and_clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_writeback(struct folio *folio) { return arch_test_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return arch_test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_writeback(struct folio *folio) { return test_and_set_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_writeback(struct folio *folio) { return test_and_clear_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_mappedtodisk(struct folio *folio) { return arch_test_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return arch_test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_mappedtodisk(struct folio *folio) { set_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_mappedtodisk(struct folio *folio) { clear_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reclaim(struct folio *folio) { return arch_test_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return arch_test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_reclaim(struct folio *folio) { set_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_reclaim(struct folio *folio) { clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_reclaim(struct folio *folio) { return test_and_clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_readahead(struct folio *folio) { return arch_test_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return arch_test_bit(PG_readahead, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_readahead(struct folio *folio) { set_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { set_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_readahead(struct folio *folio) { clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_readahead(struct folio *folio) { return test_and_clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 160 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_highmem(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHighMem(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHighMem(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_swapcache(struct folio *folio)
{
 return folio_test_swapbacked(folio) &&
   arch_test_bit(PG_swapcache, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageSwapCache(struct page *page)
{
 return folio_test_swapcache((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_swapcache(struct folio *folio) { set_bit(PG_swapcache, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_swapcache(struct folio *folio) { clear_bit(PG_swapcache, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_unevictable(struct folio *folio) { return arch_test_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return arch_test_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_unevictable(struct folio *folio) { set_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_unevictable(struct folio *folio) { clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_unevictable(struct folio *folio) { arch___clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { arch___clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_unevictable(struct folio *folio) { return test_and_clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_mlocked(struct folio *folio) { return arch_test_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return arch_test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_mlocked(struct folio *folio) { set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_mlocked(struct folio *folio) { clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_mlocked(struct folio *folio) { arch___clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { arch___clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_mlocked(struct folio *folio) { return test_and_set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_mlocked(struct folio *folio) { return test_and_clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
# 197 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_uncached(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_uncached(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageUncached(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_uncached(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageUncached(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_hwpoison(struct folio *folio) { return arch_test_bit(PG_hwpoison, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHWPoison(struct page *page) { return arch_test_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_hwpoison(struct folio *folio) { set_bit(PG_hwpoison, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageHWPoison(struct page *page) { set_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_hwpoison(struct folio *folio) { clear_bit(PG_hwpoison, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHWPoison(struct page *page) { clear_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_hwpoison(struct folio *folio) { return test_and_set_bit(PG_hwpoison, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageHWPoison(struct page *page) { return test_and_set_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_hwpoison(struct folio *folio) { return test_and_clear_bit(PG_hwpoison, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageHWPoison(struct page *page) { return test_and_clear_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }

extern bool take_page_off_buddy(struct page *page);
# 220 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_skip_kasan_poison(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSkipKASanPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSkipKASanPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSkipKASanPoison(struct page *page) { }
# 229 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reported(struct folio *folio) { return arch_test_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReported(struct page *page) { return arch_test_bit(PG_reported, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_reported(struct folio *folio) { arch___set_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReported(struct page *page) { arch___set_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_reported(struct folio *folio) { arch___clear_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReported(struct page *page) { arch___clear_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 253 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_anon(struct folio *folio)
{
 return ((unsigned long)folio->mapping & 0x1) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageAnon(struct page *page)
{
 return folio_test_anon((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 281 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_ksm(struct folio *folio)
{
 return ((unsigned long)folio->mapping & (0x1 | 0x2)) ==
    (0x1 | 0x2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageKsm(struct page *page)
{
 return folio_test_ksm((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}




u64 stable_page_flags(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_uptodate(struct folio *folio)
{
 bool ret = arch_test_bit(PG_uptodate, folio_flags(folio, 0));
# 308 "./include/linux/page-flags.h"
 if (ret)
  asm volatile("dmb " "ishld" : : : "memory");

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUptodate(struct page *page)
{
 return folio_test_uptodate((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_mark_uptodate(struct folio *folio)
{
 asm volatile("dmb " "ishst" : : : "memory");
 arch___set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_mark_uptodate(struct folio *folio)
{





 asm volatile("dmb " "ishst" : : : "memory");
 set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
{
 __folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
{
 folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_uptodate(struct folio *folio) { clear_bit(PG_uptodate, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }

bool __folio_start_writeback(struct folio *folio, bool keep_write);
bool set_page_writeback(struct page *page);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback_keepwrite(struct page *page)
{
 __folio_start_writeback((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_set_page_writeback(struct page *page)
{
 return set_page_writeback(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_head(struct folio *folio) { return arch_test_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return arch_test_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_head(struct folio *folio) { arch___set_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { arch___set_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_head(struct folio *folio) { arch___clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { arch___clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_head(struct folio *folio) { clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_large(struct folio *folio)
{
 return folio_test_head(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_213(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_213(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = ((unsigned long)head + 1); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_214(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_214(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = (0); } while (0); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageCompound(struct page *page)
{
 do { if (__builtin_expect(!!(!PageHead(page)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/page-flags.h\"; .popsection; .long 14472b - 14470b; .short 392; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 ClearPageHead(page);
}





int PageHuge(struct page *page);
int PageHeadHuge(struct page *page);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_hugetlb(struct folio *folio)
{
 return PageHeadHuge(&folio->page);
}
# 418 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_has_hwpoisoned(struct folio *folio) { return arch_test_bit(PG_has_hwpoisoned, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHasHWPoisoned(struct page *page) { return arch_test_bit(PG_has_hwpoisoned, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_has_hwpoisoned(struct folio *folio) { set_bit(PG_has_hwpoisoned, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageHasHWPoisoned(struct page *page) { set_bit(PG_has_hwpoisoned, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_has_hwpoisoned(struct folio *folio) { clear_bit(PG_has_hwpoisoned, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHasHWPoisoned(struct page *page) { clear_bit(PG_has_hwpoisoned, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_has_hwpoisoned(struct folio *folio) { return test_and_set_bit(PG_has_hwpoisoned, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageHasHWPoisoned(struct page *page) { return test_and_set_bit(PG_has_hwpoisoned, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_has_hwpoisoned(struct folio *folio) { return test_and_clear_bit(PG_has_hwpoisoned, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageHasHWPoisoned(struct page *page) { return test_and_clear_bit(PG_has_hwpoisoned, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); }
# 430 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_page_hwpoison(struct page *page)
{
 if (PageHWPoison(page))
  return true;
 return PageHuge(page) && PageHWPoison(((typeof(page))_compound_head(page)));
}
# 457 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 482 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000080; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { ((void)(sizeof(( long)(!PageBuddy(page))))); page->page_type |= 0x00000080; }
# 506 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000100; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { ((void)(sizeof(( long)(!PageOffline(page))))); page->page_type |= 0x00000100; }

extern void page_offline_freeze(void);
extern void page_offline_thaw(void);
extern void page_offline_begin(void);
extern void page_offline_end(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000200; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { ((void)(sizeof(( long)(!PageTable(page))))); page->page_type |= 0x00000200; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000400; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { ((void)(sizeof(( long)(!PageGuard(page))))); page->page_type |= 0x00000400; }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_isolated(struct folio *folio) { return arch_test_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return arch_test_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_isolated(struct folio *folio) { arch___set_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { arch___set_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_isolated(struct folio *folio) { arch___clear_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { arch___clear_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); };





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 return PageActive(page);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __PageSlabPfmemalloc(struct page *page)
{
 return PageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 SetPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 __ClearPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 ClearPageActive(page);
}
# 601 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_has_private(struct folio *folio)
{
 return page_has_private(&folio->page);
}

# 1 "././include/linux/page-flags-helper-macros-undefine.h" 1
# 612 "./include/linux/page-flags.h" 2
# 9 "./include/linux/page_ref.h" 2
# 1 "./include/linux/tracepoint-defs.h" 1
# 12 "./include/linux/tracepoint-defs.h"
# 1 "./include/linux/static_key.h" 1
# 13 "./include/linux/tracepoint-defs.h" 2

struct static_call_key;

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 struct static_call_key *static_call_key;
 void *static_call_tramp;
 void *iterator;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};


typedef const int tracepoint_ptr_t;




struct bpf_raw_event_map {
 struct tracepoint *tp;
 void *bpf_func;
 u32 num_args;
 u32 writable_size;
} __attribute__((__aligned__(32)));
# 10 "./include/linux/page_ref.h" 2

extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 42 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_count(const struct page *page)
{
 return atomic_read(&page->_refcount);
}
# 88 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_count(const struct folio *folio)
{
 return page_ref_count(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_count(const struct page *page)
{
 return folio_ref_count((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_count(struct page *page, int v)
{
 atomic_set(&page->_refcount, v);
 if (false)
  __page_ref_set(page, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_count(struct folio *folio, int v)
{
 set_page_count(&folio->page, v);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_add(struct folio *folio, int nr)
{
 page_ref_add(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_sub(struct folio *folio, int nr)
{
 page_ref_sub(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_return(struct page *page, int nr)
{
 int ret = atomic_sub_return(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_sub_return(struct folio *folio, int nr)
{
 return page_ref_sub_return(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_inc(struct page *page)
{
 atomic_inc(&page->_refcount);
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_inc(struct folio *folio)
{
 page_ref_inc(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_dec(struct page *page)
{
 atomic_dec(&page->_refcount);
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_dec(struct folio *folio)
{
 page_ref_dec(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = atomic_sub_and_test(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_sub_and_test(struct folio *folio, int nr)
{
 return page_ref_sub_and_test(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_inc_return(struct page *page)
{
 int ret = atomic_inc_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, 1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_inc_return(struct folio *folio)
{
 return page_ref_inc_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_and_test(struct page *page)
{
 int ret = atomic_dec_and_test(&page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_dec_and_test(struct folio *folio)
{
 return page_ref_dec_and_test(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_return(struct page *page)
{
 int ret = atomic_dec_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_dec_return(struct folio *folio)
{
 return page_ref_dec_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_ref_add_unless(struct page *page, int nr, int u)
{
 bool ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_ref_add_unless(struct folio *folio, int nr, int u)
{
 return page_ref_add_unless(&folio->page, nr, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(atomic_cmpxchg(&page->_refcount, count, 0) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_freeze(struct folio *folio, int count)
{
 return page_ref_freeze(&folio->page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_unfreeze(struct page *page, int count)
{
 ((void)(sizeof(( long)(page_count(page) != 0))));
 ((void)(sizeof(( long)(count == 0))));

 atomic_set_release(&page->_refcount, count);
 if (false)
  __page_ref_unfreeze(page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_unfreeze(struct folio *folio, int count)
{
 page_ref_unfreeze(&folio->page, count);
}
# 21 "./include/linux/net.h" 2

# 1 "./include/uapi/linux/net.h" 1
# 22 "./include/uapi/linux/net.h"
# 1 "./include/linux/socket.h" 1
# 23 "./include/uapi/linux/net.h" 2
# 1 "./arch/arm64/include/generated/uapi/asm/socket.h" 1
# 24 "./include/uapi/linux/net.h" 2
# 48 "./include/uapi/linux/net.h"
typedef enum {
 SS_FREE = 0,
 SS_UNCONNECTED,
 SS_CONNECTING,
 SS_CONNECTED,
 SS_DISCONNECTING
} socket_state;
# 23 "./include/linux/net.h" 2

struct poll_table_struct;
struct pipe_inode_info;
struct inode;
struct file;
struct net;
struct sockptr_struct;
# 57 "./include/linux/net.h"
enum sock_type {
 SOCK_STREAM = 1,
 SOCK_DGRAM = 2,
 SOCK_RAW = 3,
 SOCK_RDM = 4,
 SOCK_SEQPACKET = 5,
 SOCK_DCCP = 6,
 SOCK_PACKET = 10,
};
# 86 "./include/linux/net.h"
enum sock_shutdown_cmd {
 SHUT_RD,
 SHUT_WR,
 SHUT_RDWR,
};

struct socket_wq {

 wait_queue_head_t wait;
 struct fasync_struct *fasync_list;
 unsigned long flags;
 struct callback_head rcu;
} __attribute__((__aligned__((1 << (6)))));
# 110 "./include/linux/net.h"
struct socket {
 socket_state state;

 short type;

 unsigned long flags;

 struct file *file;
 struct sock *sk;
 const struct proto_ops *ops;

 struct socket_wq wq;
};

struct vm_area_struct;
struct page;
struct sockaddr;
struct msghdr;
struct module;
struct sk_buff;
struct read_descriptor;
struct seq_file;

typedef int (*sk_read_actor_t)(struct read_descriptor *, struct sk_buff *,
          unsigned int, size_t);

struct proto_ops {
 int family;
 struct module *owner;
 int (*release) (struct socket *sock);
 int (*bind) (struct socket *sock,
          struct sockaddr *myaddr,
          int sockaddr_len);
 int (*connect) (struct socket *sock,
          struct sockaddr *vaddr,
          int sockaddr_len, int flags);
 int (*socketpair)(struct socket *sock1,
          struct socket *sock2);
 int (*accept) (struct socket *sock,
          struct socket *newsock, int flags, bool kern);
 int (*getname) (struct socket *sock,
          struct sockaddr *addr,
          int peer);
 __poll_t (*poll) (struct file *file, struct socket *sock,
          struct poll_table_struct *wait);
 int (*ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*compat_ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*gettstamp) (struct socket *sock, void *userstamp,
          bool timeval, bool time32);
 int (*listen) (struct socket *sock, int len);
 int (*shutdown) (struct socket *sock, int flags);
 int (*setsockopt)(struct socket *sock, int level,
          int optname, struct sockptr_struct optval,
          unsigned int optlen);
 int (*getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);
 void (*show_fdinfo)(struct seq_file *m, struct socket *sock);
 int (*sendmsg) (struct socket *sock, struct msghdr *m,
          size_t total_len);
# 181 "./include/linux/net.h"
 int (*recvmsg) (struct socket *sock, struct msghdr *m,
          size_t total_len, int flags);
 int (*mmap) (struct file *file, struct socket *sock,
          struct vm_area_struct * vma);
 ssize_t (*sendpage) (struct socket *sock, struct page *page,
          int offset, size_t size, int flags);
 ssize_t (*splice_read)(struct socket *sock, loff_t *ppos,
           struct pipe_inode_info *pipe, size_t len, unsigned int flags);
 int (*set_peek_off)(struct sock *sk, int val);
 int (*peek_len)(struct socket *sock);




 int (*read_sock)(struct sock *sk, struct read_descriptor *desc,
         sk_read_actor_t recv_actor);
 int (*sendpage_locked)(struct sock *sk, struct page *page,
        int offset, size_t size, int flags);
 int (*sendmsg_locked)(struct sock *sk, struct msghdr *msg,
       size_t size);
 int (*set_rcvlowat)(struct sock *sk, int val);
};




struct net_proto_family {
 int family;
 int (*create)(struct net *net, struct socket *sock,
      int protocol, int kern);
 struct module *owner;
};

struct iovec;
struct kvec;

enum {
 SOCK_WAKE_IO,
 SOCK_WAKE_WAITD,
 SOCK_WAKE_SPACE,
 SOCK_WAKE_URG,
};

int sock_wake_async(struct socket_wq *sk_wq, int how, int band);
int sock_register(const struct net_proto_family *fam);
void sock_unregister(int family);
bool sock_is_registered(int family);
int __sock_create(struct net *net, int family, int type, int proto,
    struct socket **res, int kern);
int sock_create(int family, int type, int proto, struct socket **res);
int sock_create_kern(struct net *net, int family, int type, int proto, struct socket **res);
int sock_create_lite(int family, int type, int proto, struct socket **res);
struct socket *sock_alloc(void);
void sock_release(struct socket *sock);
int sock_sendmsg(struct socket *sock, struct msghdr *msg);
int sock_recvmsg(struct socket *sock, struct msghdr *msg, int flags);
struct file *sock_alloc_file(struct socket *sock, int flags, const char *dname);
struct socket *sockfd_lookup(int fd, int *err);
struct socket *sock_from_file(struct file *file);

int net_ratelimit(void);
# 301 "./include/linux/net.h"
int kernel_sendmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len);
int kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg,
     struct kvec *vec, size_t num, size_t len);
int kernel_recvmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len, int flags);

int kernel_bind(struct socket *sock, struct sockaddr *addr, int addrlen);
int kernel_listen(struct socket *sock, int backlog);
int kernel_accept(struct socket *sock, struct socket **newsock, int flags);
int kernel_connect(struct socket *sock, struct sockaddr *addr, int addrlen,
     int flags);
int kernel_getsockname(struct socket *sock, struct sockaddr *addr);
int kernel_getpeername(struct socket *sock, struct sockaddr *addr);
int kernel_sendpage(struct socket *sock, struct page *page, int offset,
      size_t size, int flags);
int kernel_sendpage_locked(struct sock *sk, struct page *page, int offset,
      size_t size, int flags);
int kernel_sock_shutdown(struct socket *sock, enum sock_shutdown_cmd how);


u32 kernel_sock_ip_overhead(struct sock *sk);
# 30 "net/core/neighbour.c" 2
# 1 "./include/linux/netdevice_api.h" 1
# 32 "./include/linux/netdevice_api.h"
# 1 "./include/linux/dynamic_queue_limits_api.h" 1
# 52 "./include/linux/dynamic_queue_limits_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dql_queued(struct dql *dql, unsigned int count)
{
 do { if (__builtin_expect(!!(count > ((~0U) / 16)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/dynamic_queue_limits_api.h\"; .popsection; .long 14472b - 14470b; .short 54; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 dql->last_obj_cnt = count;






 __asm__ __volatile__("": : :"memory");

 dql->num_queued += count;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dql_avail(const struct dql *dql)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_215(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dql->adj_limit) == sizeof(char) || sizeof(dql->adj_limit) == sizeof(short) || sizeof(dql->adj_limit) == sizeof(int) || sizeof(dql->adj_limit) == sizeof(long)) || sizeof(dql->adj_limit) == sizeof(long long))) __compiletime_assert_215(); } while (0); (*(const volatile typeof( _Generic((dql->adj_limit), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dql->adj_limit))) *)&(dql->adj_limit)); }) - ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_216(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dql->num_queued) == sizeof(char) || sizeof(dql->num_queued) == sizeof(short) || sizeof(dql->num_queued) == sizeof(int) || sizeof(dql->num_queued) == sizeof(long)) || sizeof(dql->num_queued) == sizeof(long long))) __compiletime_assert_216(); } while (0); (*(const volatile typeof( _Generic((dql->num_queued), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dql->num_queued))) *)&(dql->num_queued)); });
}


void dql_completed(struct dql *dql, unsigned int count);


void dql_reset(struct dql *dql);


void dql_init(struct dql *dql, unsigned int hold_time);
# 33 "./include/linux/netdevice_api.h" 2




# 1 "./include/net/xdp.h" 1




# 1 "./include/net/xdp_types.h" 1
# 39 "./include/net/xdp_types.h"
enum xdp_mem_type {
 MEM_TYPE_PAGE_SHARED = 0,
 MEM_TYPE_PAGE_ORDER0,
 MEM_TYPE_PAGE_POOL,
 MEM_TYPE_XSK_BUFF_POOL,
 MEM_TYPE_MAX,
};





struct xdp_mem_info {
 u32 type;
 u32 id;
};

struct page_pool;


struct __attribute__((__aligned__((1 << (6))))) xdp_rxq_info {
 struct net_device *dev;
 u32 queue_index;
 u32 reg_state;
 struct xdp_mem_info mem;
 unsigned int napi_id;
};

struct xdp_txq_info {
 struct net_device *dev;
};

struct xdp_buff {
 void *data;
 void *data_end;
 void *data_meta;
 void *data_hard_start;
 struct xdp_rxq_info *rxq;
 struct xdp_txq_info *txq;
 u32 frame_sz;
};

struct xdp_frame {
 void *data;
 u16 len;
 u16 headroom;
 u32 metasize:8;
 u32 frame_sz:24;



 struct xdp_mem_info mem;
 struct net_device *dev_rx;
};


struct xdp_frame_bulk {
 int count;
 void *xa;
 void *q[16];
};

struct xdp_cpumap_stats {
 unsigned int redirect;
 unsigned int pass;
 unsigned int drop;
};

struct xdp_attachment_info {
 struct bpf_prog *prog;
 u32 flags;
};
# 6 "./include/net/xdp.h" 2
# 38 "./include/linux/netdevice_api.h" 2


# 1 "./include/uapi/linux/if_bonding.h" 1
# 47 "./include/uapi/linux/if_bonding.h"
# 1 "./include/uapi/linux/sockios.h" 1
# 23 "./include/uapi/linux/sockios.h"
# 1 "./arch/arm64/include/generated/uapi/asm/sockios.h" 1
# 24 "./include/uapi/linux/sockios.h" 2
# 48 "./include/uapi/linux/if_bonding.h" 2
# 109 "./include/uapi/linux/if_bonding.h"
typedef struct ifbond {
 __s32 bond_mode;
 __s32 num_slaves;
 __s32 miimon;
} ifbond;

typedef struct ifslave {
 __s32 slave_id;
 char slave_name[16];
 __s8 link;
 __s8 state;
 __u32 link_failure_count;
} ifslave;

struct ad_info {
 __u16 aggregator_id;
 __u16 ports;
 __u16 actor_key;
 __u16 partner_key;
 __u8 partner_system[6];
};


enum {
 BOND_XSTATS_UNSPEC,
 BOND_XSTATS_3AD,
 __BOND_XSTATS_MAX
};



enum {
 BOND_3AD_STAT_LACPDU_RX,
 BOND_3AD_STAT_LACPDU_TX,
 BOND_3AD_STAT_LACPDU_UNKNOWN_RX,
 BOND_3AD_STAT_LACPDU_ILLEGAL_RX,
 BOND_3AD_STAT_MARKER_RX,
 BOND_3AD_STAT_MARKER_TX,
 BOND_3AD_STAT_MARKER_RESP_RX,
 BOND_3AD_STAT_MARKER_RESP_TX,
 BOND_3AD_STAT_MARKER_UNKNOWN_RX,
 BOND_3AD_STAT_PAD,
 __BOND_3AD_STAT_MAX
};
# 41 "./include/linux/netdevice_api.h" 2

# 1 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 1
# 43 "./include/linux/netdevice_api.h" 2
# 52 "./include/linux/netdevice_api.h"
struct __attribute__((__aligned__((1 << (6))))) netdev_rx_queue {
 struct xdp_rxq_info xdp_rxq;

 struct rps_map *rps_map;
 struct rps_dev_flow_table *rps_flow_table;

 struct kobject kobj;
 struct net_device *dev;



};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_xmit_complete(int rc)
{






 if (__builtin_expect(!!(rc < 0x0f), 1))
  return true;

 return false;
}

void __napi_schedule(struct napi_struct *n);
void __napi_schedule_irqoff(struct napi_struct *n);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool napi_disable_pending(struct napi_struct *n)
{
 return arch_test_bit(NAPI_STATE_DISABLE, &n->state);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool napi_prefer_busy_poll(struct napi_struct *n)
{
 return arch_test_bit(NAPI_STATE_PREFER_BUSY_POLL, &n->state);
}

bool napi_schedule_prep(struct napi_struct *n);
# 105 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void napi_schedule(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule(n);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void napi_schedule_irqoff(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule_irqoff(n);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool napi_reschedule(struct napi_struct *napi)
{
 if (napi_schedule_prep(napi)) {
  __napi_schedule(napi);
  return true;
 }
 return false;
}

bool napi_complete_done(struct napi_struct *n, int work_done);
# 142 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool napi_complete(struct napi_struct *n)
{
 return napi_complete_done(n, 0);
}

int dev_set_threaded(struct net_device *dev, bool threaded);
# 156 "./include/linux/netdevice_api.h"
void napi_disable(struct napi_struct *n);

void napi_enable(struct napi_struct *n);
# 168 "./include/linux/netdevice_api.h"
void napi_synchronize(const struct napi_struct *n);

extern int sysctl_fb_tunnels_only_for_init_net;
extern int sysctl_devconf_inherit_init_net;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool net_has_fallback_tunnels(const struct net *net)
{
 return !1 ||
        !sysctl_fb_tunnels_only_for_init_net ||
        (net == &init_net && sysctl_fb_tunnels_only_for_init_net == 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int netdev_queue_numa_node_read(const struct netdev_queue *q)
{

 return q->numa_node;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_queue_numa_node_write(struct netdev_queue *q, int node)
{

 q->numa_node = node;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_elide_gro(const struct net_device *dev)
{
 if (!(dev->features & ((netdev_features_t)1 << (NETIF_F_GRO_BIT))) || dev->xdp_prog)
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int netdev_get_prio_tc_map(const struct net_device *dev, u32 prio)
{
 return dev->prio_tc_map[prio & 15];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
 if (tc >= dev->num_tc)
  return -22;

 dev->prio_tc_map[prio & 15] = tc & 15;
 return 0;
}

int netdev_txq_to_tc(struct net_device *dev, unsigned int txq);
void netdev_reset_tc(struct net_device *dev);
int netdev_set_tc_queue(struct net_device *dev, u8 tc, u16 count, u16 offset);
int netdev_set_num_tc(struct net_device *dev, u8 num_tc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int netdev_get_num_tc(struct net_device *dev)
{
 return dev->num_tc;
}

void netdev_unbind_sb_channel(struct net_device *dev,
         struct net_device *sb_dev);
int netdev_bind_sb_channel_queue(struct net_device *dev,
     struct net_device *sb_dev,
     u8 tc, u16 count, u16 offset);
int netdev_set_sb_channel(struct net_device *dev, u16 channel);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int netdev_get_sb_channel(struct net_device *dev)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)(-dev->num_tc)) *)1 == (typeof((int)(0)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(-dev->num_tc)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(0)) * 0l)) : (int *)8))))), (((int)(-dev->num_tc)) > ((int)(0)) ? ((int)(-dev->num_tc)) : ((int)(0))), ({ typeof((int)(-dev->num_tc)) __UNIQUE_ID___x217 = ((int)(-dev->num_tc)); typeof((int)(0)) __UNIQUE_ID___y218 = ((int)(0)); ((__UNIQUE_ID___x217) > (__UNIQUE_ID___y218) ? (__UNIQUE_ID___x217) : (__UNIQUE_ID___y218)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct netdev_queue *netdev_get_tx_queue(const struct net_device *dev,
      unsigned int index)
{
 return &dev->_tx[index];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_for_each_tx_queue(struct net_device *dev,
         void (*f)(struct net_device *,
            struct netdev_queue *,
            void *),
         void *arg)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++)
  f(dev, &dev->_tx[i], arg);
}
# 280 "./include/linux/netdevice_api.h"
u16 netdev_pick_tx(struct net_device *dev, struct sk_buff *skb,
       struct net_device *sb_dev);
struct netdev_queue *netdev_core_pick_tx(struct net_device *dev,
      struct sk_buff *skb,
      struct net_device *sb_dev);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned netdev_get_fwd_headroom(struct net_device *dev)
{
 return dev->priv_flags & IFF_PHONY_HEADROOM ? 0 : dev->needed_headroom;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_set_rx_headroom(struct net_device *dev, int new_hr)
{
 if (dev->netdev_ops->ndo_set_rx_headroom)
  dev->netdev_ops->ndo_set_rx_headroom(dev, new_hr);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_reset_rx_headroom(struct net_device *dev)
{
 netdev_set_rx_headroom(dev, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *netdev_get_ml_priv(struct net_device *dev,
           enum netdev_ml_priv_type type)
{
 if (dev->ml_priv_type != type)
  return ((void *)0);

 return dev->ml_priv;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_set_ml_priv(struct net_device *dev,
          void *ml_priv,
          enum netdev_ml_priv_type type)
{
 ({ int __ret_warn_on = !!(dev->ml_priv_type && dev->ml_priv_type != type); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Overwriting already set ml_priv_type (%u) with different ml_priv_type (%u)!\n", dev->ml_priv_type, type); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/netdevice_api.h\"; .popsection; .long 14472b - 14470b; .short 321; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });


 ({ int __ret_warn_on = !!(!dev->ml_priv_type && dev->ml_priv); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Overwriting already set ml_priv and ml_priv_type is ML_PRIV_NONE!\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/netdevice_api.h\"; .popsection; .long 14472b - 14470b; .short 323; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });


 dev->ml_priv = ml_priv;
 dev->ml_priv_type = type;
}
# 355 "./include/linux/netdevice_api.h"
void netif_napi_add(struct net_device *dev, struct napi_struct *napi,
      int (*poll)(struct napi_struct *, int), int weight);
# 369 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_tx_napi_add(struct net_device *dev,
         struct napi_struct *napi,
         int (*poll)(struct napi_struct *, int),
         int weight)
{
 set_bit(NAPI_STATE_NO_BUSY_POLL, &napi->state);
 netif_napi_add(dev, napi, poll, weight);
}
# 386 "./include/linux/netdevice_api.h"
void __netif_napi_del(struct napi_struct *napi);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_napi_del(struct napi_struct *napi)
{
 __netif_napi_del(napi);
 synchronize_net();
}

struct napi_gro_cb {

 void *frag0;


 unsigned int frag0_len;


 int data_offset;


 u16 flush;


 u16 flush_id;


 u16 count;


 u16 gro_remcsum_start;


 unsigned long age;


 u16 proto;


 u8 same_flow:1;


 u8 encap_mark:1;


 u8 csum_valid:1;


 u8 csum_cnt:3;


 u8 free:2;




 u8 is_ipv6:1;


 u8 is_fou:1;


 u8 is_atomic:1;


 u8 recursion_counter:4;


 u8 is_flist:1;


 __wsum csum;


 struct sk_buff *last;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gro_recursion_inc_test(struct sk_buff *skb)
{
 return ++((struct napi_gro_cb *)(skb)->cb)->recursion_counter == 15;
}

typedef struct sk_buff *(*gro_receive_t)(struct list_head *, struct sk_buff *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *call_gro_receive(gro_receive_t cb,
            struct list_head *head,
            struct sk_buff *skb)
{
 if (__builtin_expect(!!(gro_recursion_inc_test(skb)), 0)) {
  ((struct napi_gro_cb *)(skb)->cb)->flush |= 1;
  return ((void *)0);
 }

 return cb(head, skb);
}

typedef struct sk_buff *(*gro_receive_sk_t)(struct sock *, struct list_head *,
         struct sk_buff *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *call_gro_receive_sk(gro_receive_sk_t cb,
        struct sock *sk,
        struct list_head *head,
        struct sk_buff *skb)
{
 if (__builtin_expect(!!(gro_recursion_inc_test(skb)), 0)) {
  ((struct napi_gro_cb *)(skb)->cb)->flush |= 1;
  return ((void *)0);
 }

 return cb(sk, head, skb);
}

void dev_lstats_read(struct net_device *dev, u64 *packets, u64 *bytes);

enum netdev_lag_tx_type {
 NETDEV_LAG_TX_TYPE_UNKNOWN,
 NETDEV_LAG_TX_TYPE_RANDOM,
 NETDEV_LAG_TX_TYPE_BROADCAST,
 NETDEV_LAG_TX_TYPE_ROUNDROBIN,
 NETDEV_LAG_TX_TYPE_ACTIVEBACKUP,
 NETDEV_LAG_TX_TYPE_HASH,
};

enum netdev_lag_hash {
 NETDEV_LAG_HASH_NONE,
 NETDEV_LAG_HASH_L2,
 NETDEV_LAG_HASH_L34,
 NETDEV_LAG_HASH_L23,
 NETDEV_LAG_HASH_E23,
 NETDEV_LAG_HASH_E34,
 NETDEV_LAG_HASH_VLAN_SRCMAC,
 NETDEV_LAG_HASH_UNKNOWN,
};

struct netdev_lag_upper_info {
 enum netdev_lag_tx_type tx_type;
 enum netdev_lag_hash hash_type;
};

struct netdev_lag_lower_state_info {
 u8 link_up : 1,
    tx_enabled : 1;
};





enum netdev_cmd {
 NETDEV_UP = 1,
 NETDEV_DOWN,
 NETDEV_REBOOT,



 NETDEV_CHANGE,
 NETDEV_REGISTER,
 NETDEV_UNREGISTER,
 NETDEV_CHANGEMTU,
 NETDEV_CHANGEADDR,
 NETDEV_PRE_CHANGEADDR,
 NETDEV_GOING_DOWN,
 NETDEV_CHANGENAME,
 NETDEV_FEAT_CHANGE,
 NETDEV_BONDING_FAILOVER,
 NETDEV_PRE_UP,
 NETDEV_PRE_TYPE_CHANGE,
 NETDEV_POST_TYPE_CHANGE,
 NETDEV_POST_INIT,
 NETDEV_RELEASE,
 NETDEV_NOTIFY_PEERS,
 NETDEV_JOIN,
 NETDEV_CHANGEUPPER,
 NETDEV_RESEND_IGMP,
 NETDEV_PRECHANGEMTU,
 NETDEV_CHANGEINFODATA,
 NETDEV_BONDING_INFO,
 NETDEV_PRECHANGEUPPER,
 NETDEV_CHANGELOWERSTATE,
 NETDEV_UDP_TUNNEL_PUSH_INFO,
 NETDEV_UDP_TUNNEL_DROP_INFO,
 NETDEV_CHANGE_TX_QUEUE_LEN,
 NETDEV_CVLAN_FILTER_PUSH_INFO,
 NETDEV_CVLAN_FILTER_DROP_INFO,
 NETDEV_SVLAN_FILTER_PUSH_INFO,
 NETDEV_SVLAN_FILTER_DROP_INFO,
};
const char *netdev_cmd_to_name(enum netdev_cmd cmd);

int register_netdevice_notifier(struct notifier_block *nb);
int unregister_netdevice_notifier(struct notifier_block *nb);
int register_netdevice_notifier_net(struct net *net, struct notifier_block *nb);
int unregister_netdevice_notifier_net(struct net *net,
          struct notifier_block *nb);
int register_netdevice_notifier_dev_net(struct net_device *dev,
     struct notifier_block *nb,
     struct netdev_net_notifier *nn);
int unregister_netdevice_notifier_dev_net(struct net_device *dev,
       struct notifier_block *nb,
       struct netdev_net_notifier *nn);

struct netdev_notifier_info {
 struct net_device *dev;
 struct netlink_ext_ack *extack;
};

struct netdev_notifier_info_ext {
 struct netdev_notifier_info info;
 union {
  u32 mtu;
 } ext;
};

struct netdev_notifier_change_info {
 struct netdev_notifier_info info;
 unsigned int flags_changed;
};

struct netdev_notifier_changeupper_info {
 struct netdev_notifier_info info;
 struct net_device *upper_dev;
 bool master;
 bool linking;
 void *upper_info;
};

struct netdev_notifier_changelowerstate_info {
 struct netdev_notifier_info info;
 void *lower_state_info;
};

struct netdev_notifier_pre_changeaddr_info {
 struct netdev_notifier_info info;
 const unsigned char *dev_addr;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_notifier_info_init(struct netdev_notifier_info *info,
          struct net_device *dev)
{
 info->dev = dev;
 info->extack = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net_device *
netdev_notifier_info_to_dev(const struct netdev_notifier_info *info)
{
 return info->dev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct netlink_ext_ack *
netdev_notifier_info_to_extack(const struct netdev_notifier_info *info)
{
 return info->extack;
}

int call_netdevice_notifiers(unsigned long val, struct net_device *dev);


extern rwlock_t dev_base_lock;

int netdev_boot_setup_check(struct net_device *dev);
struct net_device *dev_getbyhwaddr_rcu(struct net *net, unsigned short type,
           const char *hwaddr);
struct net_device *dev_getfirstbyhwtype(struct net *net, unsigned short type);
void dev_add_pack(struct packet_type *pt);
void dev_remove_pack(struct packet_type *pt);
void __dev_remove_pack(struct packet_type *pt);
void dev_add_offload(struct packet_offload *po);
void dev_remove_offload(struct packet_offload *po);

int dev_get_iflink(const struct net_device *dev);
int dev_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb);
int dev_fill_forward_path(const struct net_device *dev, const u8 *daddr,
     struct net_device_path_stack *stack);
struct net_device *__dev_get_by_flags(struct net *net, unsigned short flags,
          unsigned short mask);
struct net_device *dev_get_by_name(struct net *net, const char *name);
struct net_device *dev_get_by_name_rcu(struct net *net, const char *name);
struct net_device *__dev_get_by_name(struct net *net, const char *name);
bool netdev_name_in_use(struct net *net, const char *name);
int dev_alloc_name(struct net_device *dev, const char *name);
int dev_open(struct net_device *dev, struct netlink_ext_ack *extack);
void dev_close(struct net_device *dev);
void dev_close_many(struct list_head *head, bool unlink);
void dev_disable_lro(struct net_device *dev);
int dev_loopback_xmit(struct net *net, struct sock *sk, struct sk_buff *newskb);
u16 dev_pick_tx_zero(struct net_device *dev, struct sk_buff *skb,
       struct net_device *sb_dev);
u16 dev_pick_tx_cpu_id(struct net_device *dev, struct sk_buff *skb,
         struct net_device *sb_dev);

int dev_queue_xmit(struct sk_buff *skb);
int dev_queue_xmit_accel(struct sk_buff *skb, struct net_device *sb_dev);

int register_netdevice(struct net_device *dev);
void unregister_netdevice_queue(struct net_device *dev, struct list_head *head);
void unregister_netdevice_many(struct list_head *head);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_netdevice(struct net_device *dev)
{
 unregister_netdevice_queue(dev, ((void *)0));
}

int netdev_refcnt_read(const struct net_device *dev);
void free_netdev(struct net_device *dev);
void netdev_freemem(struct net_device *dev);
int init_dummy_netdev(struct net_device *dev);

struct net_device *netdev_get_xmit_slave(struct net_device *dev,
      struct sk_buff *skb,
      bool all_slaves);
struct net_device *netdev_sk_get_lowest_dev(struct net_device *dev,
         struct sock *sk);
struct net_device *dev_get_by_index(struct net *net, int ifindex);
struct net_device *__dev_get_by_index(struct net *net, int ifindex);
struct net_device *dev_get_by_index_rcu(struct net *net, int ifindex);
struct net_device *dev_get_by_napi_id(unsigned int napi_id);
int netdev_get_name(struct net *net, char *name, int ifindex);
int dev_restart(struct net_device *dev);
int skb_gro_receive(struct sk_buff *p, struct sk_buff *skb);
int skb_gro_receive_list(struct sk_buff *p, struct sk_buff *skb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int skb_gro_offset(const struct sk_buff *skb)
{
 return ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int skb_gro_len(const struct sk_buff *skb)
{
 return skb->len - ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_pull(struct sk_buff *skb, unsigned int len)
{
 ((struct napi_gro_cb *)(skb)->cb)->data_offset += len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_gro_header_fast(struct sk_buff *skb,
     unsigned int offset)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0 + offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int skb_gro_header_hard(struct sk_buff *skb, unsigned int hlen)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0_len < hlen;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_frag0_invalidate(struct sk_buff *skb)
{
 ((struct napi_gro_cb *)(skb)->cb)->frag0 = ((void *)0);
 ((struct napi_gro_cb *)(skb)->cb)->frag0_len = 0;
}

struct gro_remcsum {
 int offset;
 __wsum delta;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_hard_header(struct sk_buff *skb, struct net_device *dev,
      unsigned short type,
      const void *daddr, const void *saddr,
      unsigned int len)
{
 if (!dev->header_ops || !dev->header_ops->create)
  return 0;

 return dev->header_ops->create(skb, dev, type, daddr, saddr, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_parse_header(const struct sk_buff *skb,
       unsigned char *haddr)
{
 const struct net_device *dev = skb->dev;

 if (!dev->header_ops || !dev->header_ops->parse)
  return 0;
 return dev->header_ops->parse(skb, haddr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be16 dev_parse_header_protocol(const struct sk_buff *skb)
{
 const struct net_device *dev = skb->dev;

 if (!dev->header_ops || !dev->header_ops->parse_protocol)
  return 0;
 return dev->header_ops->parse_protocol(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_has_header(const struct net_device *dev)
{
 return dev->header_ops && dev->header_ops->create;
}



struct sd_flow_limit {
 u64 count;
 unsigned int num_buckets;
 unsigned int history_head;
 u16 history[(1 << 7)];
 u8 buckets[];
};

extern int netdev_flow_limit_table_len;





struct softnet_data {
 struct list_head poll_list;
 struct sk_buff_head process_queue;


 unsigned int processed;
 unsigned int time_squeeze;
 unsigned int received_rps;

 struct softnet_data *rps_ipi_list;


 struct sd_flow_limit *flow_limit;

 struct Qdisc *output_queue;
 struct Qdisc **output_queue_tailp;
 struct sk_buff *completion_queue;




 struct {
  u16 recursion;
  u8 more;
 } xmit;




 unsigned int input_queue_head __attribute__((__aligned__((1 << (6)))));


 call_single_data_t csd __attribute__((__aligned__((1 << (6)))));
 struct softnet_data *rps_ipi_next;
 unsigned int cpu;
 unsigned int input_queue_tail;

 unsigned int dropped;
 struct sk_buff_head input_pkt_queue;
 struct napi_struct backlog;

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void input_queue_head_incr(struct softnet_data *sd)
{

 sd->input_queue_head++;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void input_queue_tail_incr_save(struct softnet_data *sd,
           unsigned int *qtail)
{

 *qtail = ++sd->input_queue_tail;

}

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(struct softnet_data) softnet_data __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_recursion_level(void)
{
 return ({ typeof(softnet_data.xmit.recursion) pscr_ret__; do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(softnet_data.xmit.recursion)) { case 1: pscr_ret__ = ({ typeof(softnet_data.xmit.recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(softnet_data.xmit.recursion))__percpu_read_8(({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; case 2: pscr_ret__ = ({ typeof(softnet_data.xmit.recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(softnet_data.xmit.recursion))__percpu_read_16(({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; case 4: pscr_ret__ = ({ typeof(softnet_data.xmit.recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(softnet_data.xmit.recursion))__percpu_read_32(({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; case 8: pscr_ret__ = ({ typeof(softnet_data.xmit.recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(softnet_data.xmit.recursion))__percpu_read_64(({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); })); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_xmit_recursion(void)
{
 return __builtin_expect(!!(({ __this_cpu_preempt_check("read"); ({ typeof(softnet_data.xmit.recursion) pscr_ret__; do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(softnet_data.xmit.recursion)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }) > 8), 0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_xmit_recursion_inc(void)
{
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(softnet_data.xmit.recursion)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_xmit_recursion_dec(void)
{
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(softnet_data.xmit.recursion)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += -(typeof(softnet_data.xmit.recursion))(1); } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += -(typeof(softnet_data.xmit.recursion))(1); } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += -(typeof(softnet_data.xmit.recursion))(1); } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion))); (typeof((typeof(*(&(softnet_data.xmit.recursion))) *)(&(softnet_data.xmit.recursion)))) (__ptr + ((__kern_my_cpu_offset()))); }); }) += -(typeof(softnet_data.xmit.recursion))(1); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

void __netif_schedule(struct Qdisc *q);
void netif_schedule_queue(struct netdev_queue *txq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_tx_schedule_all(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++)
  netif_schedule_queue(netdev_get_tx_queue(dev, i));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
 clear_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_start_queue(struct net_device *dev)
{
 netif_tx_start_queue(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_tx_start_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_start_queue(txq);
 }
}

void netif_tx_wake_queue(struct netdev_queue *dev_queue);
# 928 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_wake_queue(struct net_device *dev)
{
 netif_tx_wake_queue(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_tx_wake_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_wake_queue(txq);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
 set_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}
# 955 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_stop_queue(struct net_device *dev)
{
 netif_tx_stop_queue(netdev_get_tx_queue(dev, 0));
}

void netif_tx_stop_all_queues(struct net_device *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_tx_queue_stopped(const struct netdev_queue *dev_queue)
{
 return arch_test_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_queue_stopped(const struct net_device *dev)
{
 return netif_tx_queue_stopped(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_xmit_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
netif_xmit_frozen_or_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & (((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF)) | (1 << __QUEUE_STATE_FROZEN));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
netif_xmit_frozen_or_drv_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_FROZEN));
}
# 1005 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_queue_set_dql_min_limit(struct netdev_queue *dev_queue,
        unsigned int min_limit)
{

 dev_queue->dql.min_limit = min_limit;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_tx_sent_queue(struct netdev_queue *dev_queue,
     unsigned int bytes)
{

 dql_queued(&dev_queue->dql, bytes);

 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 1))
  return;

 set_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);






 asm volatile("dmb " "ish" : : : "memory");


 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 0))
  clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __netdev_tx_sent_queue(struct netdev_queue *dev_queue,
       unsigned int bytes,
       bool xmit_more)
{
 if (xmit_more) {

  dql_queued(&dev_queue->dql, bytes);

  return netif_tx_queue_stopped(dev_queue);
 }
 netdev_tx_sent_queue(dev_queue, bytes);
 return true;
}
# 1066 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
 netdev_tx_sent_queue(netdev_get_tx_queue(dev, 0), bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __netdev_sent_queue(struct net_device *dev,
           unsigned int bytes,
           bool xmit_more)
{
 return __netdev_tx_sent_queue(netdev_get_tx_queue(dev, 0), bytes,
          xmit_more);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_tx_completed_queue(struct netdev_queue *dev_queue,
          unsigned int pkts, unsigned int bytes)
{

 if (__builtin_expect(!!(!bytes), 0))
  return;

 dql_completed(&dev_queue->dql, bytes);






 asm volatile("dmb " "ish" : : : "memory");

 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) < 0), 0))
  return;

 if (test_and_clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state))
  netif_schedule_queue(dev_queue);

}
# 1113 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_completed_queue(struct net_device *dev,
       unsigned int pkts, unsigned int bytes)
{
 netdev_tx_completed_queue(netdev_get_tx_queue(dev, 0), pkts, bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_tx_reset_queue(struct netdev_queue *q)
{

 clear_bit(__QUEUE_STATE_STACK_XOFF, &q->state);
 dql_reset(&q->dql);

}
# 1134 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netdev_reset_queue(struct net_device *dev_queue)
{
 netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue, 0));
}

extern int net_ratelimit(void);
# 1149 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 netdev_cap_txqueue(struct net_device *dev, u16 queue_index)
{
 if (__builtin_expect(!!(queue_index >= dev->real_num_tx_queues), 0)) {

  if (net_ratelimit())
   ({ do {} while (0); _printk("\001" "4" "neighbour" ": " "%s selects TX queue %d, but real number of TX queues is %d\n", dev->name, queue_index, dev->real_num_tx_queues); });


  return 0;
 }

 return queue_index;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_running(const struct net_device *dev)
{
 return arch_test_bit(__LINK_STATE_START, &dev->state);
}
# 1188 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 netif_tx_start_queue(txq);
}
# 1202 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
 netif_tx_stop_queue(txq);
}
# 1215 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __netif_subqueue_stopped(const struct net_device *dev,
         u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 return netif_tx_queue_stopped(txq);
}
# 1230 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 netif_tx_wake_queue(txq);
}


int netif_set_xps_queue(struct net_device *dev, const struct cpumask *mask,
   u16 index);
int __netif_set_xps_queue(struct net_device *dev, const unsigned long *mask,
     u16 index, enum xps_map_type type);
# 1251 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_attr_test_mask(unsigned long j,
     const unsigned long *mask,
     unsigned int nr_bits)
{
 cpu_max_bits_warn(j, nr_bits);
 return arch_test_bit(j, mask);
}
# 1267 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_attr_test_online(unsigned long j,
       const unsigned long *online_mask,
       unsigned int nr_bits)
{
 cpu_max_bits_warn(j, nr_bits);

 if (online_mask)
  return arch_test_bit(j, online_mask);

 return (j < nr_bits);
}
# 1287 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int netif_attrmask_next(int n, const unsigned long *srcp,
            unsigned int nr_bits)
{

 if (n != -1)
  cpu_max_bits_warn(n, nr_bits);

 if (srcp)
  return find_next_bit(srcp, nr_bits, n + 1);

 return n + 1;
}
# 1309 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int netif_attrmask_next_and(int n, const unsigned long *src1p,
       const unsigned long *src2p,
       unsigned int nr_bits)
{

 if (n != -1)
  cpu_max_bits_warn(n, nr_bits);

 if (src1p && src2p)
  return find_next_and_bit(src1p, src2p, nr_bits, n + 1);
 else if (src1p)
  return find_next_bit(src1p, nr_bits, n + 1);
 else if (src2p)
  return find_next_bit(src2p, nr_bits, n + 1);

 return n + 1;
}
# 1348 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_is_multiqueue(const struct net_device *dev)
{
 return dev->num_tx_queues > 1;
}

int netif_set_real_num_tx_queues(struct net_device *dev, unsigned int txq);


int netif_set_real_num_rx_queues(struct net_device *dev, unsigned int rxq);
# 1365 "./include/linux/netdevice_api.h"
int netif_set_real_num_queues(struct net_device *dev,
         unsigned int txq, unsigned int rxq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct netdev_rx_queue *
__netif_get_rx_queue(struct net_device *dev, unsigned int rxq)
{
 return dev->_rx + rxq;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int get_netdev_rx_queue_index(
  struct netdev_rx_queue *queue)
{
 struct net_device *dev = queue->dev;
 int index = queue - dev->_rx;

 do { if (__builtin_expect(!!(index >= dev->num_rx_queues), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/netdevice_api.h\"; .popsection; .long 14472b - 14470b; .short 1381; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return index;
}



int netif_get_num_default_rss_queues(void);

enum skb_free_reason {
 SKB_REASON_CONSUMED,
 SKB_REASON_DROPPED,
};

void __dev_kfree_skb_irq(struct sk_buff *skb, enum skb_free_reason reason);
void __dev_kfree_skb_any(struct sk_buff *skb, enum skb_free_reason reason);
# 1416 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_kfree_skb_irq(struct sk_buff *skb)
{
 __dev_kfree_skb_irq(skb, SKB_REASON_DROPPED);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_consume_skb_irq(struct sk_buff *skb)
{
 __dev_kfree_skb_irq(skb, SKB_REASON_CONSUMED);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_kfree_skb_any(struct sk_buff *skb)
{
 __dev_kfree_skb_any(skb, SKB_REASON_DROPPED);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_consume_skb_any(struct sk_buff *skb)
{
 __dev_kfree_skb_any(skb, SKB_REASON_CONSUMED);
}

u32 bpf_prog_run_generic_xdp(struct sk_buff *skb, struct xdp_buff *xdp,
        struct bpf_prog *xdp_prog);
void generic_xdp_tx(struct sk_buff *skb, struct bpf_prog *xdp_prog);
int do_xdp_generic(struct bpf_prog *xdp_prog, struct sk_buff *skb);
int netif_rx(struct sk_buff *skb);
int netif_rx_ni(struct sk_buff *skb);
int netif_rx_any_context(struct sk_buff *skb);
int netif_receive_skb(struct sk_buff *skb);
int netif_receive_skb_core(struct sk_buff *skb);
void netif_receive_skb_list(struct list_head *head);
gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb);
void napi_gro_flush(struct napi_struct *napi, bool flush_old);
struct sk_buff *napi_get_frags(struct napi_struct *napi);
gro_result_t napi_gro_frags(struct napi_struct *napi);
struct packet_offload *gro_find_receive_by_type(__be16 type);
struct packet_offload *gro_find_complete_by_type(__be16 type);

bool netdev_is_rx_handler_busy(struct net_device *dev);
int netdev_rx_handler_register(struct net_device *dev,
          rx_handler_func_t *rx_handler,
          void *rx_handler_data);
void netdev_rx_handler_unregister(struct net_device *dev);

bool dev_valid_name(const char *name);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_socket_ioctl_cmd(unsigned int cmd)
{
 return (((cmd) >> (0 +8)) & ((1 << 8)-1)) == 0x89;
}
int get_user_ifreq(struct ifreq *ifr, void **ifrdata, void *arg);
int put_user_ifreq(struct ifreq *ifr, void *arg);
int dev_ioctl(struct net *net, unsigned int cmd, struct ifreq *ifr,
  void *data, bool *need_copyout);
int dev_ifconf(struct net *net, struct ifconf *ifc);
int dev_ethtool(struct net *net, struct ifreq *ifr, void *userdata);
unsigned int dev_get_flags(const struct net_device *);
int __dev_change_flags(struct net_device *dev, unsigned int flags,
         struct netlink_ext_ack *extack);
int dev_change_flags(struct net_device *dev, unsigned int flags,
       struct netlink_ext_ack *extack);
void __dev_notify_flags(struct net_device *, unsigned int old_flags,
   unsigned int gchanges);
int dev_change_name(struct net_device *, const char *);
int dev_set_alias(struct net_device *, const char *, size_t);
int dev_get_alias(const struct net_device *, char *, size_t);
int __dev_change_net_namespace(struct net_device *dev, struct net *net,
          const char *pat, int new_ifindex);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int dev_change_net_namespace(struct net_device *dev, struct net *net,
        const char *pat)
{
 return __dev_change_net_namespace(dev, net, pat, 0);
}
int __dev_set_mtu(struct net_device *, int);
int dev_validate_mtu(struct net_device *dev, int mtu,
       struct netlink_ext_ack *extack);
int dev_set_mtu_ext(struct net_device *dev, int mtu,
      struct netlink_ext_ack *extack);
int dev_set_mtu(struct net_device *, int);
int dev_change_tx_queue_len(struct net_device *, unsigned long);
void dev_set_group(struct net_device *, int);
int dev_pre_changeaddr_notify(struct net_device *dev, const char *addr,
         struct netlink_ext_ack *extack);
int dev_set_mac_address(struct net_device *dev, struct sockaddr *sa,
   struct netlink_ext_ack *extack);
int dev_set_mac_address_user(struct net_device *dev, struct sockaddr *sa,
        struct netlink_ext_ack *extack);
int dev_get_mac_address(struct sockaddr *sa, struct net *net, char *dev_name);
int dev_change_carrier(struct net_device *, bool new_carrier);
int dev_get_phys_port_id(struct net_device *dev,
    struct netdev_phys_item_id *ppid);
int dev_get_phys_port_name(struct net_device *dev,
      char *name, size_t len);
int dev_get_port_parent_id(struct net_device *dev,
      struct netdev_phys_item_id *ppid, bool recurse);
bool netdev_port_same_parent_id(struct net_device *a, struct net_device *b);
int dev_change_proto_down(struct net_device *dev, bool proto_down);
int dev_change_proto_down_generic(struct net_device *dev, bool proto_down);
void dev_change_proto_down_reason(struct net_device *dev, unsigned long mask,
      u32 value);
struct sk_buff *validate_xmit_skb_list(struct sk_buff *skb, struct net_device *dev, bool *again);
struct sk_buff *dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
        struct netdev_queue *txq, int *ret);

typedef int (*bpf_op_t)(struct net_device *dev, struct netdev_bpf *bpf);
int dev_change_xdp_fd(struct net_device *dev, struct netlink_ext_ack *extack,
        int fd, int expected_fd, u32 flags);
int bpf_xdp_link_attach(const union bpf_attr *attr, struct bpf_prog *prog);
u8 dev_xdp_prog_count(struct net_device *dev);
u32 dev_xdp_prog_id(struct net_device *dev, enum bpf_xdp_mode mode);

bool dev_nit_active(struct net_device *dev);
void dev_queue_xmit_nit(struct sk_buff *skb, struct net_device *dev);

extern int netdev_budget;
extern unsigned int netdev_budget_usecs;


void netdev_run_todo(void);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_put(struct net_device *dev)
{
 if (dev) {

  do { do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*dev->pcpu_refcnt)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), -(typeof(*dev->pcpu_refcnt))(1)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), -(typeof(*dev->pcpu_refcnt))(1)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), -(typeof(*dev->pcpu_refcnt))(1)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), -(typeof(*dev->pcpu_refcnt))(1)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);



 }
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_hold(struct net_device *dev)
{
 if (dev) {

  do { do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*dev->pcpu_refcnt)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);



 }
}
# 1578 "./include/linux/netdevice_api.h"
void linkwatch_init_dev(struct net_device *dev);
void linkwatch_fire_event(struct net_device *dev);
void linkwatch_forget_dev(struct net_device *dev);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_carrier_ok(const struct net_device *dev)
{
 return !arch_test_bit(__LINK_STATE_NOCARRIER, &dev->state);
}

unsigned long dev_trans_start(struct net_device *dev);

void __netdev_watchdog_up(struct net_device *dev);

void netif_carrier_on(struct net_device *dev);
void netif_carrier_off(struct net_device *dev);
void netif_carrier_event(struct net_device *dev);
# 1613 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_dormant_on(struct net_device *dev)
{
 if (!test_and_set_bit(__LINK_STATE_DORMANT, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_dormant_off(struct net_device *dev)
{
 if (test_and_clear_bit(__LINK_STATE_DORMANT, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_dormant(const struct net_device *dev)
{
 return arch_test_bit(__LINK_STATE_DORMANT, &dev->state);
}
# 1653 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_testing_on(struct net_device *dev)
{
 if (!test_and_set_bit(__LINK_STATE_TESTING, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_testing_off(struct net_device *dev)
{
 if (test_and_clear_bit(__LINK_STATE_TESTING, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_testing(const struct net_device *dev)
{
 return arch_test_bit(__LINK_STATE_TESTING, &dev->state);
}
# 1689 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_oper_up(const struct net_device *dev)
{
 return (dev->operstate == IF_OPER_UP ||
  dev->operstate == IF_OPER_UNKNOWN );
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_device_present(const struct net_device *dev)
{
 return arch_test_bit(__LINK_STATE_PRESENT, &dev->state);
}

void netif_device_detach(struct net_device *dev);

void netif_device_attach(struct net_device *dev);





enum {
 NETIF_MSG_DRV_BIT,
 NETIF_MSG_PROBE_BIT,
 NETIF_MSG_LINK_BIT,
 NETIF_MSG_TIMER_BIT,
 NETIF_MSG_IFDOWN_BIT,
 NETIF_MSG_IFUP_BIT,
 NETIF_MSG_RX_ERR_BIT,
 NETIF_MSG_TX_ERR_BIT,
 NETIF_MSG_TX_QUEUED_BIT,
 NETIF_MSG_INTR_BIT,
 NETIF_MSG_TX_DONE_BIT,
 NETIF_MSG_RX_STATUS_BIT,
 NETIF_MSG_PKTDATA_BIT,
 NETIF_MSG_HW_BIT,
 NETIF_MSG_WOL_BIT,




 NETIF_MSG_CLASS_COUNT,
};

_Static_assert(NETIF_MSG_CLASS_COUNT <= 32, "NETIF_MSG_CLASS_COUNT <= 32");
# 1774 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{

 if (debug_value < 0 || debug_value >= (sizeof(u32) * 8))
  return default_msg_enable_bits;
 if (debug_value == 0)
  return 0;

 return (1U << debug_value) - 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool net_gso_ok(netdev_features_t features, int gso_type)
{
 netdev_features_t feature = (netdev_features_t)gso_type << NETIF_F_GSO_SHIFT;


 do { __attribute__((__noreturn__)) extern void __compiletime_assert_219(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_TCPV4 != (NETIF_F_TSO >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_TCPV4 != (((netdev_features_t)1 << (NETIF_F_TSO_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_219(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_220(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_DODGY != (NETIF_F_GSO_ROBUST >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_DODGY != (((netdev_features_t)1 << (NETIF_F_GSO_ROBUST_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_220(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_221(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_TCP_ECN != (NETIF_F_TSO_ECN >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_TCP_ECN != (((netdev_features_t)1 << (NETIF_F_TSO_ECN_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_221(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_222(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_TCP_FIXEDID != (NETIF_F_TSO_MANGLEID >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_TCP_FIXEDID != (((netdev_features_t)1 << (NETIF_F_TSO_MANGLEID_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_222(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_223(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_TCPV6 != (NETIF_F_TSO6 >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_TCPV6 != (((netdev_features_t)1 << (NETIF_F_TSO6_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_223(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_224(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_FCOE != (NETIF_F_FSO >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_FCOE != (((netdev_features_t)1 << (NETIF_F_FSO_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_224(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_225(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_GRE != (NETIF_F_GSO_GRE >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_GRE != (((netdev_features_t)1 << (NETIF_F_GSO_GRE_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_225(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_226(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_GRE_CSUM != (NETIF_F_GSO_GRE_CSUM >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_GRE_CSUM != (((netdev_features_t)1 << (NETIF_F_GSO_GRE_CSUM_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_226(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_227(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_IPXIP4 != (NETIF_F_GSO_IPXIP4 >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_IPXIP4 != (((netdev_features_t)1 << (NETIF_F_GSO_IPXIP4_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_227(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_228(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_IPXIP6 != (NETIF_F_GSO_IPXIP6 >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_IPXIP6 != (((netdev_features_t)1 << (NETIF_F_GSO_IPXIP6_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_228(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_229(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_UDP_TUNNEL != (NETIF_F_GSO_UDP_TUNNEL >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_UDP_TUNNEL != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_TUNNEL_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_229(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_230(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_UDP_TUNNEL_CSUM != (NETIF_F_GSO_UDP_TUNNEL_CSUM >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_UDP_TUNNEL_CSUM != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_230(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_231(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_PARTIAL != (NETIF_F_GSO_PARTIAL >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_PARTIAL != (((netdev_features_t)1 << (NETIF_F_GSO_PARTIAL_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_231(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_232(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_TUNNEL_REMCSUM != (NETIF_F_GSO_TUNNEL_REMCSUM >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_TUNNEL_REMCSUM != (((netdev_features_t)1 << (NETIF_F_GSO_TUNNEL_REMCSUM_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_232(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_233(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_SCTP != (NETIF_F_GSO_SCTP >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_SCTP != (((netdev_features_t)1 << (NETIF_F_GSO_SCTP_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_233(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_234(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_ESP != (NETIF_F_GSO_ESP >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_ESP != (((netdev_features_t)1 << (NETIF_F_GSO_ESP_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_234(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_235(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_UDP != (NETIF_F_GSO_UDP >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_UDP != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_235(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_236(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_UDP_L4 != (NETIF_F_GSO_UDP_L4 >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_UDP_L4 != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_L4_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_236(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_237(void) __attribute__((__error__("BUILD_BUG_ON failed: " "SKB_GSO_FRAGLIST != (NETIF_F_GSO_FRAGLIST >> NETIF_F_GSO_SHIFT)"))); if (!(!(SKB_GSO_FRAGLIST != (((netdev_features_t)1 << (NETIF_F_GSO_FRAGLIST_BIT)) >> NETIF_F_GSO_SHIFT)))) __compiletime_assert_237(); } while (0);

 return (features & feature) == feature;
}



void ether_setup(struct net_device *dev);


struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
        unsigned char name_assign_type,
        void (*setup)(struct net_device *),
        unsigned int txqs, unsigned int rxqs);







int register_netdev(struct net_device *dev);
void unregister_netdev(struct net_device *dev);

int devm_register_netdev(struct device *dev, struct net_device *ndev);


int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
     struct netdev_hw_addr_list *from_list, int addr_len);
void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
        struct netdev_hw_addr_list *from_list, int addr_len);
int __hw_addr_sync_dev(struct netdev_hw_addr_list *list,
         struct net_device *dev,
         int (*sync)(struct net_device *, const unsigned char *),
         int (*unsync)(struct net_device *,
         const unsigned char *));
int __hw_addr_ref_sync_dev(struct netdev_hw_addr_list *list,
      struct net_device *dev,
      int (*sync)(struct net_device *,
           const unsigned char *, int),
      int (*unsync)(struct net_device *,
      const unsigned char *, int));
void __hw_addr_ref_unsync_dev(struct netdev_hw_addr_list *list,
         struct net_device *dev,
         int (*unsync)(struct net_device *,
         const unsigned char *, int));
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *list,
     struct net_device *dev,
     int (*unsync)(struct net_device *,
     const unsigned char *));
void __hw_addr_init(struct netdev_hw_addr_list *list);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__dev_addr_set(struct net_device *dev, const void *addr, size_t len)
{
 memcpy(dev->dev_addr, addr, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_addr_set(struct net_device *dev, const u8 *addr)
{
 __dev_addr_set(dev, addr, dev->addr_len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
dev_addr_mod(struct net_device *dev, unsigned int offset,
      const void *addr, size_t len)
{
 memcpy(&dev->dev_addr[offset], addr, len);
}

int dev_addr_add(struct net_device *dev, const unsigned char *addr,
   unsigned char addr_type);
int dev_addr_del(struct net_device *dev, const unsigned char *addr,
   unsigned char addr_type);
void dev_addr_flush(struct net_device *dev);
int dev_addr_init(struct net_device *dev);


int dev_uc_add(struct net_device *dev, const unsigned char *addr);
int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr);
int dev_uc_del(struct net_device *dev, const unsigned char *addr);
int dev_uc_sync(struct net_device *to, struct net_device *from);
int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_uc_unsync(struct net_device *to, struct net_device *from);
void dev_uc_flush(struct net_device *dev);
void dev_uc_init(struct net_device *dev);
# 1905 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __dev_uc_sync(struct net_device *dev,
    int (*sync)(struct net_device *,
         const unsigned char *),
    int (*unsync)(struct net_device *,
           const unsigned char *))
{
 return __hw_addr_sync_dev(&dev->uc, dev, sync, unsync);
}
# 1921 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dev_uc_unsync(struct net_device *dev,
       int (*unsync)(struct net_device *,
       const unsigned char *))
{
 __hw_addr_unsync_dev(&dev->uc, dev, unsync);
}


int dev_mc_add(struct net_device *dev, const unsigned char *addr);
int dev_mc_add_global(struct net_device *dev, const unsigned char *addr);
int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr);
int dev_mc_del(struct net_device *dev, const unsigned char *addr);
int dev_mc_del_global(struct net_device *dev, const unsigned char *addr);
int dev_mc_sync(struct net_device *to, struct net_device *from);
int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_mc_unsync(struct net_device *to, struct net_device *from);
void dev_mc_flush(struct net_device *dev);
void dev_mc_init(struct net_device *dev);
# 1949 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __dev_mc_sync(struct net_device *dev,
    int (*sync)(struct net_device *,
         const unsigned char *),
    int (*unsync)(struct net_device *,
           const unsigned char *))
{
 return __hw_addr_sync_dev(&dev->mc, dev, sync, unsync);
}
# 1965 "./include/linux/netdevice_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dev_mc_unsync(struct net_device *dev,
       int (*unsync)(struct net_device *,
       const unsigned char *))
{
 __hw_addr_unsync_dev(&dev->mc, dev, unsync);
}


void dev_set_rx_mode(struct net_device *dev);
void __dev_set_rx_mode(struct net_device *dev);
int dev_set_promiscuity(struct net_device *dev, int inc);
int dev_set_allmulti(struct net_device *dev, int inc);
void netdev_state_change(struct net_device *dev);
void __netdev_notify_peers(struct net_device *dev);
void netdev_notify_peers(struct net_device *dev);
void netdev_features_change(struct net_device *dev);

void dev_load(struct net *net, const char *name);
struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
     struct rtnl_link_stats64 *storage);
void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
        const struct net_device_stats *netdev_stats);
void dev_fetch_sw_netstats(struct rtnl_link_stats64 *s,
      const struct pcpu_sw_netstats *netstats);
void dev_get_tstats64(struct net_device *dev, struct rtnl_link_stats64 *s);

extern int netdev_max_backlog;
extern int netdev_tstamp_prequeue;
extern int netdev_unregister_timeout_secs;
extern int weight_p;
extern int dev_weight_rx_bias;
extern int dev_weight_tx_bias;
extern int dev_rx_weight;
extern int dev_tx_weight;
extern int gro_normal_batch;

enum {
 NESTED_SYNC_IMM_BIT,
 NESTED_SYNC_TODO_BIT,
};







struct netdev_nested_priv {
 unsigned char flags;
 void *data;
};

bool netdev_has_upper_dev(struct net_device *dev, struct net_device *upper_dev);
struct net_device *netdev_upper_get_next_dev_rcu(struct net_device *dev,
           struct list_head **iter);
# 2038 "./include/linux/netdevice_api.h"
int netdev_walk_all_upper_dev_rcu(struct net_device *dev,
      int (*fn)(struct net_device *upper_dev,
         struct netdev_nested_priv *priv),
      struct netdev_nested_priv *priv);

bool netdev_has_upper_dev_all_rcu(struct net_device *dev,
      struct net_device *upper_dev);

bool netdev_has_any_upper_dev(struct net_device *dev);

void *netdev_lower_get_next_private(struct net_device *dev,
        struct list_head **iter);
void *netdev_lower_get_next_private_rcu(struct net_device *dev,
     struct list_head **iter);
# 2065 "./include/linux/netdevice_api.h"
void *netdev_lower_get_next(struct net_device *dev,
    struct list_head **iter);







struct net_device *netdev_next_lower_dev_rcu(struct net_device *dev,
          struct list_head **iter);
int netdev_walk_all_lower_dev(struct net_device *dev,
         int (*fn)(struct net_device *lower_dev,
     struct netdev_nested_priv *priv),
         struct netdev_nested_priv *priv);
int netdev_walk_all_lower_dev_rcu(struct net_device *dev,
      int (*fn)(struct net_device *lower_dev,
         struct netdev_nested_priv *priv),
      struct netdev_nested_priv *priv);

void *netdev_adjacent_get_private(struct list_head *adj_list);
void *netdev_lower_get_first_private_rcu(struct net_device *dev);
struct net_device *netdev_master_upper_dev_get(struct net_device *dev);
struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev);
int netdev_upper_dev_link(struct net_device *dev, struct net_device *upper_dev,
     struct netlink_ext_ack *extack);
int netdev_master_upper_dev_link(struct net_device *dev,
     struct net_device *upper_dev,
     void *upper_priv, void *upper_info,
     struct netlink_ext_ack *extack);
void netdev_upper_dev_unlink(struct net_device *dev,
        struct net_device *upper_dev);
int netdev_adjacent_change_prepare(struct net_device *old_dev,
       struct net_device *new_dev,
       struct net_device *dev,
       struct netlink_ext_ack *extack);
void netdev_adjacent_change_commit(struct net_device *old_dev,
       struct net_device *new_dev,
       struct net_device *dev);
void netdev_adjacent_change_abort(struct net_device *old_dev,
      struct net_device *new_dev,
      struct net_device *dev);
void netdev_adjacent_rename_links(struct net_device *dev, char *oldname);
void *netdev_lower_dev_get_private(struct net_device *dev,
       struct net_device *lower_dev);
void netdev_lower_state_changed(struct net_device *lower_dev,
    void *lower_state_info);



extern u8 netdev_rss_key[52] __attribute__((__section__(".data..read_mostly")));
void netdev_rss_key_fill(void *buffer, size_t len);

int skb_checksum_help(struct sk_buff *skb);
int skb_crc32c_csum_help(struct sk_buff *skb);
int skb_csum_hwoffload_help(struct sk_buff *skb,
       const netdev_features_t features);

struct sk_buff *__skb_gso_segment(struct sk_buff *skb,
      netdev_features_t features, bool tx_path);
struct sk_buff *skb_mac_gso_segment(struct sk_buff *skb,
        netdev_features_t features);

struct netdev_bonding_info {
 ifslave slave;
 ifbond master;
};

struct netdev_notifier_bonding_info {
 struct netdev_notifier_info info;
 struct netdev_bonding_info bonding_info;
};

void netdev_bonding_info_change(struct net_device *dev,
    struct netdev_bonding_info *bonding_info);


void ethtool_notify(struct net_device *dev, unsigned int cmd, const void *data);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct sk_buff *skb_gso_segment(struct sk_buff *skb, netdev_features_t features)
{
 return __skb_gso_segment(skb, features, true);
}
__be16 skb_network_protocol(struct sk_buff *skb, int *depth);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool can_checksum_protocol(netdev_features_t features,
      __be16 protocol)
{
 if (protocol == (( __be16)(__builtin_constant_p((__u16)((0x8906))) ? ((__u16)( (((__u16)((0x8906)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8906)) & (__u16)0xff00U) >> 8))) : __fswab16((0x8906)))))
  return !!(features & ((netdev_features_t)1 << (NETIF_F_FCOE_CRC_BIT)));



 if (features & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT))) {

  return true;
 }

 switch (protocol) {
 case (( __be16)(__builtin_constant_p((__u16)((0x0800))) ? ((__u16)( (((__u16)((0x0800)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0800)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0800)))):
  return !!(features & ((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT)));
 case (( __be16)(__builtin_constant_p((__u16)((0x86DD))) ? ((__u16)( (((__u16)((0x86DD)) & (__u16)0x00ffU) << 8) | (((__u16)((0x86DD)) & (__u16)0xff00U) >> 8))) : __fswab16((0x86DD)))):
  return !!(features & ((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
 default:
  return false;
 }
}


void netdev_rx_csum_fault(struct net_device *dev, struct sk_buff *skb);







void net_enable_timestamp(void);
void net_disable_timestamp(void);


int dev_proc_init(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netdev_xmit_more(void)
{
 return ({ __this_cpu_preempt_check("read"); ({ typeof(softnet_data.xmit.more) pscr_ret__; do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.more)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(softnet_data.xmit.more)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.more)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more))); (typeof((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.more)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more))); (typeof((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.more)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more))); (typeof((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(softnet_data.xmit.more)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more))); (typeof((typeof(*(&(softnet_data.xmit.more))) *)(&(softnet_data.xmit.more)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
}

struct class_attribute;

int netdev_class_create_file_ns(const struct class_attribute *class_attr,
    const void *ns);
void netdev_class_remove_file_ns(const struct class_attribute *class_attr,
     const void *ns);

extern const struct kobj_ns_type_operations net_ns_type_operations;

const char *netdev_drivername(const struct net_device *dev);

void linkwatch_run_queue(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) netdev_features_t netdev_intersect_features(netdev_features_t f1,
         netdev_features_t f2)
{
 if ((f1 ^ f2) & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT))) {
  if (f1 & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT)))
   f1 |= (((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT))|((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
  else
   f2 |= (((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT))|((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
 }

 return f1 & f2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) netdev_features_t netdev_get_wanted_features(
 struct net_device *dev)
{
 return (dev->features & ~dev->hw_features) | dev->wanted_features;
}
netdev_features_t netdev_increment_features(netdev_features_t all,
 netdev_features_t one, netdev_features_t mask);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) netdev_features_t netdev_add_tso_features(netdev_features_t features,
       netdev_features_t mask)
{
 return netdev_increment_features(features, (((netdev_features_t)1 << (NETIF_F_TSO_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO6_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO_ECN_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO_MANGLEID_BIT))), mask);
}

int __netdev_update_features(struct net_device *dev);
void netdev_update_features(struct net_device *dev);
void netdev_change_features(struct net_device *dev);

void netif_stacked_transfer_operstate(const struct net_device *rootdev,
     struct net_device *dev);

netdev_features_t passthru_features_check(struct sk_buff *skb,
       struct net_device *dev,
       netdev_features_t features);
netdev_features_t netif_skb_features(struct sk_buff *skb);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_keep_dst(struct net_device *dev)
{
 dev->priv_flags &= ~(IFF_XMIT_DST_RELEASE | IFF_XMIT_DST_RELEASE_PERM);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_reduces_vlan_mtu(struct net_device *dev)
{

 return netif_is_macsec(dev);
}

extern struct pernet_operations loopback_net_ops;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netdev_unregistering(const struct net_device *dev)
{
 return dev->reg_state == NETREG_UNREGISTERING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *netdev_reg_state(const struct net_device *dev)
{
 switch (dev->reg_state) {
 case NETREG_UNINITIALIZED: return " (uninitialized)";
 case NETREG_REGISTERED: return "";
 case NETREG_UNREGISTERING: return " (unregistering)";
 case NETREG_UNREGISTERED: return " (unregistered)";
 case NETREG_RELEASED: return " (released)";
 case NETREG_DUMMY: return " (dummy)";
 }

 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(1); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("%s: unknown reg_state %d\n", dev->name, dev->reg_state); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/netdevice_api.h\"; .popsection; .long 14472b - 14470b; .short 2294; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 return " (unknown)";
}

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void netdev_printk(const char *level, const struct net_device *dev,
     const char *format, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void netdev_emerg(const struct net_device *dev, const char *format, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void netdev_alert(const struct net_device *dev, const char *format, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void netdev_crit(const struct net_device *dev, const char *format, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void netdev_err(const struct net_device *dev, const char *format, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void netdev_warn(const struct net_device *dev, const char *format, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void netdev_notice(const struct net_device *dev, const char *format, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void netdev_info(const struct net_device *dev, const char *format, ...);
# 2463 "./include/linux/netdevice_api.h"
extern struct list_head ptype_all __attribute__((__section__(".data..read_mostly")));
extern struct list_head ptype_base[(16)] __attribute__((__section__(".data..read_mostly")));

extern struct net_device *blackhole_netdev;
# 31 "net/core/neighbour.c" 2
# 1 "./include/linux/netdevice_api_extra.h" 1
# 26 "./include/linux/netdevice_api_extra.h"
# 1 "./include/linux/rculist.h" 1
# 22 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_238(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_238(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_239(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->prev) == sizeof(char) || sizeof(list->prev) == sizeof(short) || sizeof(list->prev) == sizeof(int) || sizeof(list->prev) == sizeof(long)) || sizeof(list->prev) == sizeof(long long))) __compiletime_assert_239(); } while (0); do { *(volatile typeof(list->prev) *)&(list->prev) = (list); } while (0); } while (0);
}
# 76 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_240(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_240(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&(*((struct list_head **)(&(prev)->next)))) __p = (&(*((struct list_head **)(&(prev)->next)))); union { typeof( _Generic((*&(*((struct list_head **)(&(prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct list_head **)(&(prev)->next)))))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(*((struct list_head **)(&(prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct list_head **)(&(prev)->next))))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_241(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_241(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct list_head **)(&(prev)->next))))); switch (sizeof(*&(*((struct list_head **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 next->prev = new;
}
# 104 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 125 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 155 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 181 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_242(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_242(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *)0)); } while (0); } while (0);
 }
}
# 197 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_243(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long long))) __compiletime_assert_243(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(new->prev)->next))))) *)&(((*((struct list_head **)(&(new->prev)->next))))) = ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&(*((struct list_head **)(&(new->prev)->next)))) __p = (&(*((struct list_head **)(&(new->prev)->next)))); union { typeof( _Generic((*&(*((struct list_head **)(&(new->prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct list_head **)(&(new->prev)->next)))))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(*((struct list_head **)(&(new->prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct list_head **)(&(new->prev)->next))))))) ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_244(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_244(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct list_head **)(&(new->prev)->next))))); switch (sizeof(*&(*((struct list_head **)(&(new->prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 226 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 249 "./include/linux/rculist.h"
 sync();
 __kcsan_check_access(&(*first), sizeof(*first), (1 << 0) | (1 << 3));
 __kcsan_check_access(&(*last), sizeof(*last), (1 << 0) | (1 << 3));
# 261 "./include/linux/rculist.h"
 last->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_245(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_245(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&(*((struct list_head **)(&(prev)->next)))) __p = (&(*((struct list_head **)(&(prev)->next)))); union { typeof( _Generic((*&(*((struct list_head **)(&(prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct list_head **)(&(prev)->next)))))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(*((struct list_head **)(&(prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct list_head **)(&(prev)->next))))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_246(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_246(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct list_head **)(&(prev)->next))))); switch (sizeof(*&(*((struct list_head **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 274 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 289 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 511 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_247(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_247(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *) 0x122 + (0xdead000000000000UL))); } while (0); } while (0);
}
# 524 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_248(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->pprev) == sizeof(char) || sizeof(new->pprev) == sizeof(short) || sizeof(new->pprev) == sizeof(int) || sizeof(new->pprev) == sizeof(long)) || sizeof(new->pprev) == sizeof(long long))) __compiletime_assert_248(); } while (0); do { *(volatile typeof(new->pprev) *)&(new->pprev) = (old->pprev); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_249(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*(struct hlist_node **)new->pprev)) == sizeof(char) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(short) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(int) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long)) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long long))) __compiletime_assert_249(); } while (0); do { *(volatile typeof((*(struct hlist_node **)new->pprev)) *)&((*(struct hlist_node **)new->pprev)) = ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&*(struct hlist_node **)new->pprev) __p = (&*(struct hlist_node **)new->pprev); union { typeof( _Generic((*&*(struct hlist_node **)new->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*(struct hlist_node **)new->pprev))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&*(struct hlist_node **)new->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*(struct hlist_node **)new->pprev)))) ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_250(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_250(); } while (0); kasan_check_write(__p, sizeof(*&*(struct hlist_node **)new->pprev)); switch (sizeof(*&*(struct hlist_node **)new->pprev)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 if (next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_251(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->next->pprev) == sizeof(char) || sizeof(new->next->pprev) == sizeof(short) || sizeof(new->next->pprev) == sizeof(int) || sizeof(new->next->pprev) == sizeof(long)) || sizeof(new->next->pprev) == sizeof(long long))) __compiletime_assert_251(); } while (0); do { *(volatile typeof(new->next->pprev) *)&(new->next->pprev) = (&new->next); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_252(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(old->pprev) == sizeof(char) || sizeof(old->pprev) == sizeof(short) || sizeof(old->pprev) == sizeof(int) || sizeof(old->pprev) == sizeof(long)) || sizeof(old->pprev) == sizeof(long long))) __compiletime_assert_252(); } while (0); do { *(volatile typeof(old->pprev) *)&(old->pprev) = (((void *) 0x122 + (0xdead000000000000UL))); } while (0); } while (0);
}
# 547 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlists_swap_heads_rcu(struct hlist_head *left, struct hlist_head *right)
{
 struct hlist_node *node1 = left->first;
 struct hlist_node *node2 = right->first;

 do { uintptr_t _r_a_p__v = (uintptr_t)(node2); ; if (__builtin_constant_p(node2) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_253(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((left->first)) == sizeof(char) || sizeof((left->first)) == sizeof(short) || sizeof((left->first)) == sizeof(int) || sizeof((left->first)) == sizeof(long)) || sizeof((left->first)) == sizeof(long long))) __compiletime_assert_253(); } while (0); do { *(volatile typeof((left->first)) *)&((left->first)) = ((typeof(left->first))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&left->first) __p = (&left->first); union { typeof( _Generic((*&left->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&left->first))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&left->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&left->first)))) ((typeof(*((typeof(left->first))_r_a_p__v)) *)((typeof(left->first))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_254(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)))) __compiletime_assert_254(); } while (0); kasan_check_write(__p, sizeof(*&left->first)); switch (sizeof(*&left->first)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(node1); ; if (__builtin_constant_p(node1) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_255(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((right->first)) == sizeof(char) || sizeof((right->first)) == sizeof(short) || sizeof((right->first)) == sizeof(int) || sizeof((right->first)) == sizeof(long)) || sizeof((right->first)) == sizeof(long long))) __compiletime_assert_255(); } while (0); do { *(volatile typeof((right->first)) *)&((right->first)) = ((typeof(right->first))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&right->first) __p = (&right->first); union { typeof( _Generic((*&right->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&right->first))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&right->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&right->first)))) ((typeof(*((typeof(right->first))_r_a_p__v)) *)((typeof(right->first))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_256(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)))) __compiletime_assert_256(); } while (0); kasan_check_write(__p, sizeof(*&right->first)); switch (sizeof(*&right->first)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_257(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node2->pprev) == sizeof(char) || sizeof(node2->pprev) == sizeof(short) || sizeof(node2->pprev) == sizeof(int) || sizeof(node2->pprev) == sizeof(long)) || sizeof(node2->pprev) == sizeof(long long))) __compiletime_assert_257(); } while (0); do { *(volatile typeof(node2->pprev) *)&(node2->pprev) = (&left->first); } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_258(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node1->pprev) == sizeof(char) || sizeof(node1->pprev) == sizeof(short) || sizeof(node1->pprev) == sizeof(int) || sizeof(node1->pprev) == sizeof(long)) || sizeof(node1->pprev) == sizeof(long long))) __compiletime_assert_258(); } while (0); do { *(volatile typeof(node1->pprev) *)&(node1->pprev) = (&right->first); } while (0); } while (0);
}
# 584 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_259(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_259(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_260(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long long))) __compiletime_assert_260(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(h)->first))))) *)&(((*((struct hlist_node **)(&(h)->first))))) = ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&(*((struct hlist_node **)(&(h)->first)))) __p = (&(*((struct hlist_node **)(&(h)->first)))); union { typeof( _Generic((*&(*((struct hlist_node **)(&(h)->first)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)(&(h)->first)))))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(*((struct hlist_node **)(&(h)->first)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)(&(h)->first))))))) ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_261(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_261(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)(&(h)->first))))); switch (sizeof(*&(*((struct hlist_node **)(&(h)->first))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 if (first)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_262(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_262(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
}
# 615 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_263(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_263(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&last->next); } while (0); } while (0);
  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_264(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long long))) __compiletime_assert_264(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(last)->next))))) *)&(((*((struct hlist_node **)(&(last)->next))))) = ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&(*((struct hlist_node **)(&(last)->next)))) __p = (&(*((struct hlist_node **)(&(last)->next)))); union { typeof( _Generic((*&(*((struct hlist_node **)(&(last)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)(&(last)->next)))))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(*((struct hlist_node **)(&(last)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)(&(last)->next))))))) ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_265(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_265(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)(&(last)->next))))); switch (sizeof(*&(*((struct hlist_node **)(&(last)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 651 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_266(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_266(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 n->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_267(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(char) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(short) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(int) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long long))) __compiletime_assert_267(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)((n)->pprev))))) *)&(((*((struct hlist_node **)((n)->pprev))))) = ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&(*((struct hlist_node **)((n)->pprev)))) __p = (&(*((struct hlist_node **)((n)->pprev)))); union { typeof( _Generic((*&(*((struct hlist_node **)((n)->pprev)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)((n)->pprev)))))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(*((struct hlist_node **)((n)->pprev)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)((n)->pprev))))))) ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_268(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_268(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)((n)->pprev))))); switch (sizeof(*&(*((struct hlist_node **)((n)->pprev))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_269(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_269(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
}
# 678 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_270(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_270(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_271(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_271(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(prev)->next))))) *)&(((*((struct hlist_node **)(&(prev)->next))))) = ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&(*((struct hlist_node **)(&(prev)->next)))) __p = (&(*((struct hlist_node **)(&(prev)->next)))); union { typeof( _Generic((*&(*((struct hlist_node **)(&(prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)(&(prev)->next)))))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&(*((struct hlist_node **)(&(prev)->next)))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(*((struct hlist_node **)(&(prev)->next))))))) ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_272(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_272(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)(&(prev)->next))))); switch (sizeof(*&(*((struct hlist_node **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 if (n->next)
  do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_273(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_273(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 27 "./include/linux/netdevice_api_extra.h" 2


# 1 "./include/net/net_namespace.h" 1
# 30 "./include/linux/netdevice_api_extra.h" 2
# 1 "./include/net/checksum.h" 1
# 20 "./include/net/checksum.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 21 "./include/net/checksum.h" 2

# 1 "./include/linux/uaccess.h" 1





# 1 "./include/linux/fault-inject-usercopy.h" 1
# 18 "./include/linux/fault-inject-usercopy.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool should_fail_usercopy(void) { return false; }
# 7 "./include/linux/uaccess.h" 2




# 1 "./arch/arm64/include/asm/uaccess.h" 1
# 12 "./arch/arm64/include/asm/uaccess.h"
# 1 "./include/linux/sched/task_flags.h" 1




# 1 "./include/linux/sched.h" 1
# 6 "./include/linux/sched/task_flags.h" 2
# 43 "./include/linux/sched/task_flags.h"
extern __typeof__(unsigned int) per_task__flags;
# 75 "./include/linux/sched/task_flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_percpu_thread(void)
{

 return ((*((__typeof__(per_task__flags) *)((get_current())->per_task_area + ((unsigned long)36)))) & 0x04000000) &&
  (get_current()->nr_cpus_allowed == 1);



}
# 107 "./include/linux/sched/task_flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_no_new_privs(struct task_struct *p) { return arch_test_bit(0, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_page(struct task_struct *p) { return arch_test_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_slab(struct task_struct *p) { return arch_test_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_disable(struct task_struct *p) { return arch_test_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_noexec(struct task_struct *p) { return arch_test_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_force_disable(struct task_struct *p) { return arch_test_bit(4, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_disable(struct task_struct *p) { return arch_test_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_force_disable(struct task_struct *p) { return arch_test_bit(6, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 (*((__typeof__(per_task__flags) *)((get_current())->per_task_area + ((unsigned long)36)))) &= ~flags;
 (*((__typeof__(per_task__flags) *)((get_current())->per_task_area + ((unsigned long)36)))) |= orig_flags & flags;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_idle_task(const struct task_struct *p)
{
 return !!((*((__typeof__(per_task__flags) *)((p)->per_task_area + ((unsigned long)36)))) & 0x00000002);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int current_is_kswapd(void)
{
 return (*((__typeof__(per_task__flags) *)((get_current())->per_task_area + ((unsigned long)36)))) & 0x00020000;
}
# 13 "./arch/arm64/include/asm/uaccess.h" 2

# 1 "./arch/arm64/include/asm/kernel-pgtable.h" 1
# 15 "./arch/arm64/include/asm/uaccess.h" 2
# 24 "./arch/arm64/include/asm/uaccess.h"
# 1 "./arch/arm64/include/asm/asm-extable.h" 1
# 25 "./arch/arm64/include/asm/uaccess.h" 2


# 1 "./arch/arm64/include/asm/mte.h" 1
# 13 "./arch/arm64/include/asm/mte.h"
# 1 "./include/linux/bitfield.h" 1
# 112 "./include/linux/bitfield.h"
extern void __attribute__((__error__("value doesn't fit into mask")))
__field_overflow(void);
extern void __attribute__((__error__("bad bitfield mask")))
__bad_mask(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 field_multiplier(u64 field)
{
 if ((field | (field - 1)) & ((field | (field - 1)) + 1))
  __bad_mask();
 return field & -field;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 field_mask(u64 field)
{
 return field / field_multiplier(field);
}
# 152 "./include/linux/bitfield.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u8 u8_encode_bits(u8 v, u8 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u8 u8_replace_bits(__u8 old, u8 val, u8 field) { return (old & ~(field)) | u8_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u8p_replace_bits(__u8 *p, u8 val, u8 field) { *p = (*p & ~(field)) | u8_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u8 u8_get_bits(__u8 v, u8 field) { return ((v) & field)/field_multiplier(field); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 le16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le16)(__u16)((v & field_mask(field)) * field_multiplier(field))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 le16_replace_bits(__le16 old, u16 val, u16 field) { return (old & ~(( __le16)(__u16)(field))) | le16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void le16p_replace_bits(__le16 *p, u16 val, u16 field) { *p = (*p & ~(( __le16)(__u16)(field))) | le16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 le16_get_bits(__le16 v, u16 field) { return ((( __u16)(__le16)(v)) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 be16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be16)(__builtin_constant_p((__u16)(((v & field_mask(field)) * field_multiplier(field)))) ? ((__u16)( (((__u16)(((v & field_mask(field)) * field_multiplier(field))) & (__u16)0x00ffU) << 8) | (((__u16)(((v & field_mask(field)) * field_multiplier(field))) & (__u16)0xff00U) >> 8))) : __fswab16(((v & field_mask(field)) * field_multiplier(field))))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 be16_replace_bits(__be16 old, u16 val, u16 field) { return (old & ~(( __be16)(__builtin_constant_p((__u16)((field))) ? ((__u16)( (((__u16)((field)) & (__u16)0x00ffU) << 8) | (((__u16)((field)) & (__u16)0xff00U) >> 8))) : __fswab16((field))))) | be16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void be16p_replace_bits(__be16 *p, u16 val, u16 field) { *p = (*p & ~(( __be16)(__builtin_constant_p((__u16)((field))) ? ((__u16)( (((__u16)((field)) & (__u16)0x00ffU) << 8) | (((__u16)((field)) & (__u16)0xff00U) >> 8))) : __fswab16((field))))) | be16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 be16_get_bits(__be16 v, u16 field) { return ((__builtin_constant_p((__u16)(( __u16)(__be16)(v))) ? ((__u16)( (((__u16)(( __u16)(__be16)(v)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(v)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(v))) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 u16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 u16_replace_bits(__u16 old, u16 val, u16 field) { return (old & ~(field)) | u16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u16p_replace_bits(__u16 *p, u16 val, u16 field) { *p = (*p & ~(field)) | u16_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 u16_get_bits(__u16 v, u16 field) { return ((v) & field)/field_multiplier(field); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 le32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le32)(__u32)((v & field_mask(field)) * field_multiplier(field))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 le32_replace_bits(__le32 old, u32 val, u32 field) { return (old & ~(( __le32)(__u32)(field))) | le32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void le32p_replace_bits(__le32 *p, u32 val, u32 field) { *p = (*p & ~(( __le32)(__u32)(field))) | le32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 le32_get_bits(__le32 v, u32 field) { return ((( __u32)(__le32)(v)) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 be32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be32)(__builtin_constant_p((__u32)(((v & field_mask(field)) * field_multiplier(field)))) ? ((__u32)( (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0x000000ffUL) << 24) | (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0xff000000UL) >> 24))) : __fswab32(((v & field_mask(field)) * field_multiplier(field))))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 be32_replace_bits(__be32 old, u32 val, u32 field) { return (old & ~(( __be32)(__builtin_constant_p((__u32)((field))) ? ((__u32)( (((__u32)((field)) & (__u32)0x000000ffUL) << 24) | (((__u32)((field)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((field)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((field)) & (__u32)0xff000000UL) >> 24))) : __fswab32((field))))) | be32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void be32p_replace_bits(__be32 *p, u32 val, u32 field) { *p = (*p & ~(( __be32)(__builtin_constant_p((__u32)((field))) ? ((__u32)( (((__u32)((field)) & (__u32)0x000000ffUL) << 24) | (((__u32)((field)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((field)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((field)) & (__u32)0xff000000UL) >> 24))) : __fswab32((field))))) | be32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 be32_get_bits(__be32 v, u32 field) { return ((__builtin_constant_p((__u32)(( __u32)(__be32)(v))) ? ((__u32)( (((__u32)(( __u32)(__be32)(v)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(v)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(v)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(v)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(v))) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 u32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 u32_replace_bits(__u32 old, u32 val, u32 field) { return (old & ~(field)) | u32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u32p_replace_bits(__u32 *p, u32 val, u32 field) { *p = (*p & ~(field)) | u32_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 u32_get_bits(__u32 v, u32 field) { return ((v) & field)/field_multiplier(field); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 le64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le64)(__u64)((v & field_mask(field)) * field_multiplier(field))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 le64_replace_bits(__le64 old, u64 val, u64 field) { return (old & ~(( __le64)(__u64)(field))) | le64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void le64p_replace_bits(__le64 *p, u64 val, u64 field) { *p = (*p & ~(( __le64)(__u64)(field))) | le64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 le64_get_bits(__le64 v, u64 field) { return ((( __u64)(__le64)(v)) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 be64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be64)(__builtin_constant_p((__u64)(((v & field_mask(field)) * field_multiplier(field)))) ? ((__u64)( (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((v & field_mask(field)) * field_multiplier(field))))); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 be64_replace_bits(__be64 old, u64 val, u64 field) { return (old & ~(( __be64)(__builtin_constant_p((__u64)((field))) ? ((__u64)( (((__u64)((field)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((field)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((field)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((field)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((field)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((field)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((field)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((field)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((field))))) | be64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void be64p_replace_bits(__be64 *p, u64 val, u64 field) { *p = (*p & ~(( __be64)(__builtin_constant_p((__u64)((field))) ? ((__u64)( (((__u64)((field)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((field)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((field)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((field)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((field)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((field)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((field)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((field)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((field))))) | be64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 be64_get_bits(__be64 v, u64 field) { return ((__builtin_constant_p((__u64)(( __u64)(__be64)(v))) ? ((__u64)( (((__u64)(( __u64)(__be64)(v)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(v))) & field)/field_multiplier(field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 u64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 u64_replace_bits(__u64 old, u64 val, u64 field) { return (old & ~(field)) | u64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void u64p_replace_bits(__u64 *p, u64 val, u64 field) { *p = (*p & ~(field)) | u64_encode_bits(val, field); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 u64_get_bits(__u64 v, u64 field) { return ((v) & field)/field_multiplier(field); }
# 14 "./arch/arm64/include/asm/mte.h" 2





void mte_clear_page_tags(void *addr);
unsigned long mte_copy_tags_from_user(void *to, const void *from,
          unsigned long n);
unsigned long mte_copy_tags_to_user(void *to, void *from,
        unsigned long n);
int mte_save_tags(struct page *page);
void mte_save_page_tags(const void *page_addr, void *tag_storage);
bool mte_restore_tags(swp_entry_t entry, struct page *page);
void mte_restore_page_tags(void *page_addr, const void *tag_storage);
void mte_invalidate_tags(int type, unsigned long offset);
void mte_invalidate_tags_area(int type);
void *mte_allocate_tag_storage(void);
void mte_free_tag_storage(char *storage);






void mte_zero_clear_page_tags(void *addr);
void mte_sync_tags(pte_t old_pte, pte_t pte);
void mte_copy_page_tags(void *kto, const void *kfrom);
void mte_thread_init_user(void);
void mte_thread_switch(struct task_struct *next);
void mte_suspend_enter(void);
long set_mte_ctrl(struct task_struct *task, unsigned long arg);
long get_mte_ctrl(struct task_struct *task);
int mte_ptrace_copy_tags(struct task_struct *child, long request,
    unsigned long addr, unsigned long data);
# 124 "./arch/arm64/include/asm/mte.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_uses_mte_async_or_asymm_mode(void)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mte_check_tfsr_el1(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mte_check_tfsr_entry(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mte_check_tfsr_exit(void)
{
}
# 28 "./arch/arm64/include/asm/uaccess.h" 2


# 1 "./arch/arm64/include/asm/extable.h" 1
# 18 "./arch/arm64/include/asm/extable.h"
struct exception_table_entry
{
 int insn, fixup;
 short type, data;
};
# 36 "./arch/arm64/include/asm/extable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_bpf_jit(struct pt_regs *regs)
{
 if (!1)
  return false;

 return regs->pc >= ((-((((1UL))) << ((((48))) - 1)))) &&
        regs->pc < (((-((((1UL))) << ((((48))) - 1)))) + (0x08000000));
}


bool ex_handler_bpf(const struct exception_table_entry *ex,
      struct pt_regs *regs);
# 57 "./arch/arm64/include/asm/extable.h"
bool fixup_exception(struct pt_regs *regs);
# 31 "./arch/arm64/include/asm/uaccess.h" 2
# 41 "./arch/arm64/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __range_ok(const void *addr, unsigned long size)
{
 unsigned long ret, limit = ((((1UL))) << (48)) - 1;






 if (1 &&
     ((*((__typeof__(per_task__flags) *)((get_current())->per_task_area + ((unsigned long)36)))) & 0x00200000 || test_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0))))), 26)))
  addr = ({ u64 __addr = ( u64)(addr); __addr &= (( __typeof__(__addr))sign_extend64(( u64)(__addr), 55)); ( __typeof__(addr))__addr; });

 (void)0;
 asm volatile(


 "	adds	%0, %3, %2\n"

 "	csel	%1, xzr, %1, hi\n"



 "	csinv	%0, %0, xzr, cc\n"



 "	sbcs	xzr, %0, %1\n"
 "	cset	%0, ls\n"
 : "=&r" (ret), "+r" (limit) : "Ir" (size), "0" (addr) : "cc");

 return ret;
}
# 141 "./arch/arm64/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uaccess_ttbr0_disable(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uaccess_ttbr0_enable(void)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_disable_hw_pan(void)
{
 asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "25" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n");

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_enable_hw_pan(void)
{
 asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "25" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n");

}
# 181 "./arch/arm64/include/asm/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_disable_tco(void)
{
 asm volatile(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "36" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((3) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n");

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_enable_tco(void)
{
 asm volatile(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "36" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((3) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n");

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_disable_tco_async(void)
{
 if (system_uses_mte_async_or_asymm_mode())
   __uaccess_disable_tco();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_enable_tco_async(void)
{
 if (system_uses_mte_async_or_asymm_mode())
  __uaccess_enable_tco();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uaccess_disable_privileged(void)
{
 __uaccess_disable_tco();

 if (uaccess_ttbr0_disable())
  return;

 __uaccess_enable_hw_pan();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uaccess_enable_privileged(void)
{
 __uaccess_enable_tco();

 if (uaccess_ttbr0_enable())
  return;

 __uaccess_disable_hw_pan();
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *__uaccess_mask_ptr(const void *ptr)
{
 void *safe_ptr;

 asm volatile(
 "	bics	xzr, %3, %2\n"
 "	csel	%0, %1, xzr, eq\n"
 : "=&r" (safe_ptr)
 : "r" (ptr), "r" (((((1UL))) << (48)) - 1),
   "r" (({ u64 __addr = ( u64)(ptr); __addr &= (( __typeof__(__addr))sign_extend64(( u64)(__addr), 55)); ( __typeof__(ptr))__addr; }))
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return safe_ptr;
}
# 435 "./arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_from_user(void *to, const void *from, unsigned long n);
# 446 "./arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_to_user(void *to, const void *from, unsigned long n);
# 460 "./arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_clear_user(void *to, unsigned long n);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __attribute__((__warn_unused_result__)) __clear_user(void *to, unsigned long n)
{
 if (__range_ok(to, n)) {
  uaccess_ttbr0_enable();
  n = __arch_clear_user(__uaccess_mask_ptr(to), n);
  uaccess_ttbr0_disable();
 }
 return n;
}


extern long strncpy_from_user(char *dest, const char *src, long count);

extern __attribute__((__warn_unused_result__)) long strnlen_user(const char *str, long n);
# 12 "./include/linux/uaccess.h" 2
# 32 "./include/linux/uaccess.h"
typedef struct {

} mm_segment_t;
# 43 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mm_segment_t force_uaccess_begin(void)
{
 return (mm_segment_t) { };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void force_uaccess_end(mm_segment_t oldfs)
{
}
# 98 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return ({ unsigned long __acfu_ret; uaccess_ttbr0_enable(); __acfu_ret = __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); uaccess_ttbr0_disable(); __acfu_ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return ({ unsigned long __acfu_ret; uaccess_ttbr0_enable(); __acfu_ret = __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); uaccess_ttbr0_disable(); __acfu_ret; });
}
# 130 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return ({ unsigned long __actu_ret; uaccess_ttbr0_enable(); __actu_ret = __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); uaccess_ttbr0_disable(); __actu_ret; });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return ({ unsigned long __actu_ret; uaccess_ttbr0_enable(); __actu_ret = __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); uaccess_ttbr0_disable(); __actu_ret; });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
_copy_from_user(void *to, const void *from, unsigned long n)
{
 unsigned long res = n;
 might_fault();
 if (!should_fail_usercopy() && __builtin_expect(!!(__range_ok(from, n)), 1)) {
  instrument_copy_from_user(to, from, n);
  res = ({ unsigned long __acfu_ret; uaccess_ttbr0_enable(); __acfu_ret = __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); uaccess_ttbr0_disable(); __acfu_ret; });
 }
 if (__builtin_expect(!!(res), 0))
  memset(to + (n - res), 0, res);
 return res;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
_copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 if (__range_ok(to, n)) {
  instrument_copy_to_user(to, from, n);
  n = ({ unsigned long __actu_ret; uaccess_ttbr0_enable(); __actu_ret = __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); uaccess_ttbr0_disable(); __actu_ret; });
 }
 return n;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_kernel(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
 return 0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic_nocache(void *to, const void *from,
      unsigned long n)
{
 return __copy_from_user_inatomic(to, from, n);
}



extern __attribute__((__warn_unused_result__)) int check_zeroed_user(const void *from, size_t size);
# 277 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) int
copy_struct_from_user(void *dst, size_t ksize, const void *src,
        size_t usize)
{
 size_t size = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) < (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x274 = (ksize); typeof(usize) __UNIQUE_ID___y275 = (usize); ((__UNIQUE_ID___x274) < (__UNIQUE_ID___y275) ? (__UNIQUE_ID___x274) : (__UNIQUE_ID___y275)); }));
 size_t rest = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) > (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x276 = (ksize); typeof(usize) __UNIQUE_ID___y277 = (usize); ((__UNIQUE_ID___x276) > (__UNIQUE_ID___y277) ? (__UNIQUE_ID___x276) : (__UNIQUE_ID___y277)); })) - size;


 if (usize < ksize) {
  memset(dst + size, 0, rest);
 } else if (usize > ksize) {
  int ret = check_zeroed_user(src + size, rest);
  if (ret <= 0)
   return ret ?: -7;
 }

 if (copy_from_user(dst, src, size))
  return -14;
 return 0;
}

bool copy_from_kernel_nofault_allowed(const void *unsafe_src, size_t size);

long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_kernel_nofault(void *dst, const void *src, size_t size);

long copy_from_user_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_user_nofault(void *dst, const void *src,
  size_t size);

long strncpy_from_kernel_nofault(char *dst, const void *unsafe_addr,
  long count);

long strncpy_from_user_nofault(char *dst, const void *unsafe_addr,
  long count);
long strnlen_user_nofault(const void *unsafe_addr, long count);
# 334 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_access_save(void) { return 0UL; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_access_restore(unsigned long flags) { }
# 23 "./include/net/checksum.h" 2
# 1 "./arch/arm64/include/asm/checksum.h" 1
# 11 "./arch/arm64/include/asm/checksum.h"
__sum16 csum_ipv6_magic(const struct in6_addr *saddr,
   const struct in6_addr *daddr,
   __u32 len, __u8 proto, __wsum sum);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 csum_fold(__wsum csum)
{
 u32 sum = ( u32)csum;
 sum += (sum >> 16) | (sum << 16);
 return ~( __sum16)(sum >> 16);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
{
 __uint128_t tmp;
 u64 sum;
 int n = ihl;

 tmp = *(const __uint128_t *)iph;
 iph += 16;
 n -= 4;
 tmp += ((tmp >> 64) | (tmp << 64));
 sum = tmp >> 64;
 do {
  sum += *(const u32 *)iph;
  iph += 4;
 } while (--n > 0);

 sum += ((sum >> 32) | (sum << 32));
 return csum_fold(( __wsum)(sum >> 32));
}


extern unsigned int do_csum(const unsigned char *buff, int len);


# 1 "./include/asm-generic/checksum.h" 1
# 17 "./include/asm-generic/checksum.h"
extern __wsum csum_partial(const void *buff, int len, __wsum sum);
# 45 "./include/asm-generic/checksum.h"
extern __wsum
csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len,
     __u8 proto, __wsum sum);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16
csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len,
    __u8 proto, __wsum sum)
{
 return csum_fold(csum_tcpudp_nofold(saddr, daddr, len, proto, sum));
}






extern __sum16 ip_compute_csum(const void *buff, int len);
# 48 "./arch/arm64/include/asm/checksum.h" 2
# 24 "./include/net/checksum.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
__wsum csum_and_copy_from_user (const void *src, void *dst,
          int len)
{
 if (copy_from_user(dst, src, len))
  return 0;
 return csum_partial(dst, len, ~0U);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum csum_and_copy_to_user
(const void *src, void *dst, int len)
{
 __wsum sum = csum_partial(src, len, ~0U);

 if (copy_to_user(dst, src, len) == 0)
  return sum;
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum
csum_partial_copy_nocheck(const void *src, void *dst, int len)
{
 memcpy(dst, src, len);
 return csum_partial(dst, len, 0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum csum_add(__wsum csum, __wsum addend)
{
 u32 res = ( u32)csum;
 res += ( u32)addend;
 return ( __wsum)(res + (res < ( u32)addend));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum csum_sub(__wsum csum, __wsum addend)
{
 return csum_add(csum, ~addend);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 csum16_add(__sum16 csum, __be16 addend)
{
 u16 res = ( u16)csum;

 res += ( u16)addend;
 return ( __sum16)(res + (res < ( u16)addend));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 csum16_sub(__sum16 csum, __be16 addend)
{
 return csum16_add(csum, ~addend);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum csum_shift(__wsum sum, int offset)
{

 if (offset & 1)
  return ( __wsum)ror32(( u32)sum, 8);
 return sum;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum
csum_block_add(__wsum csum, __wsum csum2, int offset)
{
 return csum_add(csum, csum_shift(csum2, offset));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum
csum_block_add_ext(__wsum csum, __wsum csum2, int offset, int len)
{
 return csum_block_add(csum, csum2, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum
csum_block_sub(__wsum csum, __wsum csum2, int offset)
{
 return csum_block_add(csum, ~csum2, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum csum_unfold(__sum16 n)
{
 return ( __wsum)n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum csum_partial_ext(const void *buff, int len, __wsum sum)
{
 return csum_partial(buff, len, sum);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void csum_replace_by_diff(__sum16 *sum, __wsum diff)
{
 *sum = csum_fold(csum_add(diff, ~csum_unfold(*sum)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void csum_replace4(__sum16 *sum, __be32 from, __be32 to)
{
 __wsum tmp = csum_sub(~csum_unfold(*sum), ( __wsum)from);

 *sum = csum_fold(csum_add(tmp, ( __wsum)to));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void csum_replace2(__sum16 *sum, __be16 old, __be16 new)
{
 *sum = ~csum16_add(csum16_sub(~(*sum), old), new);
}

struct sk_buff;
void inet_proto_csum_replace4(__sum16 *sum, struct sk_buff *skb,
         __be32 from, __be32 to, bool pseudohdr);
void inet_proto_csum_replace16(__sum16 *sum, struct sk_buff *skb,
          const __be32 *from, const __be32 *to,
          bool pseudohdr);
void inet_proto_csum_replace_by_diff(__sum16 *sum, struct sk_buff *skb,
         __wsum diff, bool pseudohdr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inet_proto_csum_replace2(__sum16 *sum, struct sk_buff *skb,
         __be16 from, __be16 to,
         bool pseudohdr)
{
 inet_proto_csum_replace4(sum, skb, ( __be32)from,
     ( __be32)to, pseudohdr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum remcsum_adjust(void *ptr, __wsum csum,
        int start, int offset)
{
 __sum16 *psum = (__sum16 *)(ptr + offset);
 __wsum delta;


 csum = csum_sub(csum, csum_partial(ptr, start, 0));


 delta = csum_sub(( __wsum)csum_fold(csum),
    ( __wsum)*psum);
 *psum = csum_fold(csum);

 return delta;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void remcsum_unadjust(__sum16 *psum, __wsum delta)
{
 *psum = csum_fold(csum_sub(delta, ( __wsum)*psum));
}
# 31 "./include/linux/netdevice_api_extra.h" 2
# 40 "./include/linux/netdevice_api_extra.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool napi_if_scheduled_mark_missed(struct napi_struct *n)
{
 unsigned long val, new;

 do {
  val = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_278(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->state) == sizeof(char) || sizeof(n->state) == sizeof(short) || sizeof(n->state) == sizeof(int) || sizeof(n->state) == sizeof(long)) || sizeof(n->state) == sizeof(long long))) __compiletime_assert_278(); } while (0); (*(const volatile typeof( _Generic((n->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (n->state))) *)&(n->state)); });
  if (val & NAPIF_STATE_DISABLE)
   return true;

  if (!(val & NAPIF_STATE_SCHED))
   return false;

  new = val | NAPIF_STATE_MISSED;
 } while (({ typeof(&n->state) __ai_ptr = (&n->state); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __cmpxchg_mb((__ai_ptr), (unsigned long)(val), (unsigned long)(new), sizeof(*(__ai_ptr))); __ret; }); }) != val);

 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netdev_phys_item_id_same(struct netdev_phys_item_id *a,
         struct netdev_phys_item_id *b)
{
 return a->id_len == b->id_len &&
        memcmp(a->id, b->id, a->id_len) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct netdev_queue *skb_get_tx_queue(const struct net_device *dev,
          const struct sk_buff *skb)
{
 return netdev_get_tx_queue(dev, skb_get_queue_mapping(skb));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net_device *next_net_device_rcu(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = ({ typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *________p1 = (typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_279(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) == sizeof(long long))) __compiletime_assert_279(); } while (0); (*(const volatile typeof( _Generic((((*((struct list_head **)(&(&dev->dev_list)->next))))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((*((struct list_head **)(&(&dev->dev_list)->next))))))) *)&(((*((struct list_head **)(&(&dev->dev_list)->next)))))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *)(________p1)); });
 return lh == &net->dev_base_head ? ((void *)0) : ({ void *__mptr = (void *)(lh); _Static_assert(__builtin_types_compatible_p(typeof(*(lh)), typeof(((struct net_device *)0)->dev_list)) || __builtin_types_compatible_p(typeof(*(lh)), typeof(void)), "pointer type mismatch in container_of()"); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net_device *first_net_device_rcu(struct net *net)
{
 struct list_head *lh = ({ typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *________p1 = (typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_280(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) == sizeof(long long))) __compiletime_assert_280(); } while (0); (*(const volatile typeof( _Generic((((*((struct list_head **)(&(&net->dev_base_head)->next))))), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((*((struct list_head **)(&(&net->dev_base_head)->next))))))) *)&(((*((struct list_head **)(&(&net->dev_base_head)->next)))))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *)(________p1)); });

 return lh == &net->dev_base_head ? ((void *)0) : ({ void *__mptr = (void *)(lh); _Static_assert(__builtin_types_compatible_p(typeof(*(lh)), typeof(((struct net_device *)0)->dev_list)) || __builtin_types_compatible_p(typeof(*(lh)), typeof(void)), "pointer type mismatch in container_of()"); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net_device *next_net_device(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = dev->dev_list.next;
 return lh == &net->dev_base_head ? ((void *)0) : ({ void *__mptr = (void *)(lh); _Static_assert(__builtin_types_compatible_p(typeof(*(lh)), typeof(((struct net_device *)0)->dev_list)) || __builtin_types_compatible_p(typeof(*(lh)), typeof(void)), "pointer type mismatch in container_of()"); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net_device *first_net_device(struct net *net)
{
 return list_empty(&net->dev_base_head) ? ((void *)0) :
  ({ void *__mptr = (void *)(net->dev_base_head.next); _Static_assert(__builtin_types_compatible_p(typeof(*(net->dev_base_head.next)), typeof(((struct net_device *)0)->dev_list)) || __builtin_types_compatible_p(typeof(*(net->dev_base_head.next)), typeof(void)), "pointer type mismatch in container_of()"); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

int __dev_direct_xmit(struct sk_buff *skb, u16 queue_id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
{
 int ret;

 ret = __dev_direct_xmit(skb, queue_id);
 if (!dev_xmit_complete(ret))
  kfree_skb(skb);
 return ret;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_gro_header_slow(struct sk_buff *skb, unsigned int hlen,
     unsigned int offset)
{
 if (!pskb_may_pull(skb, hlen))
  return ((void *)0);

 skb_gro_frag0_invalidate(skb);
 return skb->data + offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_gro_network_header(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->frag0 ?: skb->data) +
        skb_network_offset(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_postpull_rcsum(struct sk_buff *skb,
     const void *start, unsigned int len)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_valid)
  ((struct napi_gro_cb *)(skb)->cb)->csum = csum_sub(((struct napi_gro_cb *)(skb)->cb)->csum,
        csum_partial(start, len, 0));
}






__sum16 __skb_gro_checksum_complete(struct sk_buff *skb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_at_gro_remcsum_start(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->gro_remcsum_start == skb_gro_offset(skb));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __skb_gro_checksum_validate_needed(struct sk_buff *skb,
            bool zero_okay,
            __sum16 check)
{
 return ((skb->ip_summed != 3 ||
  skb_checksum_start_offset(skb) <
   skb_gro_offset(skb)) &&
  !skb_at_gro_remcsum_start(skb) &&
  ((struct napi_gro_cb *)(skb)->cb)->csum_cnt == 0 &&
  (!zero_okay || check));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 __skb_gro_checksum_validate_complete(struct sk_buff *skb,
          __wsum psum)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_valid &&
     !csum_fold(csum_add(psum, ((struct napi_gro_cb *)(skb)->cb)->csum)))
  return 0;

 ((struct napi_gro_cb *)(skb)->cb)->csum = psum;

 return __skb_gro_checksum_complete(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_incr_csum_unnecessary(struct sk_buff *skb)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_cnt > 0) {

  ((struct napi_gro_cb *)(skb)->cb)->csum_cnt--;
 } else {




  __skb_incr_checksum_unnecessary(skb);
 }
}
# 213 "./include/linux/netdevice_api_extra.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __skb_gro_checksum_convert_check(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->csum_cnt == 0 &&
  !((struct napi_gro_cb *)(skb)->cb)->csum_valid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __skb_gro_checksum_convert(struct sk_buff *skb,
           __wsum pseudo)
{
 ((struct napi_gro_cb *)(skb)->cb)->csum = ~pseudo;
 ((struct napi_gro_cb *)(skb)->cb)->csum_valid = 1;
}
# 233 "./include/linux/netdevice_api_extra.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_remcsum_init(struct gro_remcsum *grc)
{
 grc->offset = 0;
 grc->delta = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_gro_remcsum_process(struct sk_buff *skb, void *ptr,
         unsigned int off, size_t hdrlen,
         int start, int offset,
         struct gro_remcsum *grc,
         bool nopartial)
{
 __wsum delta;
 size_t plen = hdrlen + __builtin_choose_expr(((!!(sizeof((typeof((size_t)(offset + sizeof(u16))) *)1 == (typeof((size_t)(start)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((size_t)(offset + sizeof(u16))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((size_t)(start)) * 0l)) : (int *)8))))), (((size_t)(offset + sizeof(u16))) > ((size_t)(start)) ? ((size_t)(offset + sizeof(u16))) : ((size_t)(start))), ({ typeof((size_t)(offset + sizeof(u16))) __UNIQUE_ID___x281 = ((size_t)(offset + sizeof(u16))); typeof((size_t)(start)) __UNIQUE_ID___y282 = ((size_t)(start)); ((__UNIQUE_ID___x281) > (__UNIQUE_ID___y282) ? (__UNIQUE_ID___x281) : (__UNIQUE_ID___y282)); }));

 do { if (__builtin_expect(!!(!((struct napi_gro_cb *)(skb)->cb)->csum_valid), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/netdevice_api_extra.h\"; .popsection; .long 14472b - 14470b; .short 248; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 if (!nopartial) {
  ((struct napi_gro_cb *)(skb)->cb)->gro_remcsum_start = off + hdrlen + start;
  return ptr;
 }

 ptr = skb_gro_header_fast(skb, off);
 if (skb_gro_header_hard(skb, off + plen)) {
  ptr = skb_gro_header_slow(skb, off + plen, off);
  if (!ptr)
   return ((void *)0);
 }

 delta = remcsum_adjust(ptr + hdrlen, ((struct napi_gro_cb *)(skb)->cb)->csum,
          start, offset);


 ((struct napi_gro_cb *)(skb)->cb)->csum = csum_add(((struct napi_gro_cb *)(skb)->cb)->csum, delta);

 grc->offset = off + hdrlen + offset;
 grc->delta = delta;

 return ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_remcsum_cleanup(struct sk_buff *skb,
        struct gro_remcsum *grc)
{
 void *ptr;
 size_t plen = grc->offset + sizeof(u16);

 if (!grc->delta)
  return;

 ptr = skb_gro_header_fast(skb, grc->offset);
 if (skb_gro_header_hard(skb, grc->offset + sizeof(u16))) {
  ptr = skb_gro_header_slow(skb, plen, grc->offset);
  if (!ptr)
   return;
 }

 remcsum_unadjust((__sum16 *)ptr, grc->delta);
}
# 311 "./include/linux/netdevice_api_extra.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_flush_final(struct sk_buff *skb, struct sk_buff *pp, int flush)
{
 ((struct napi_gro_cb *)(skb)->cb)->flush |= flush;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gro_flush_final_remcsum(struct sk_buff *skb,
            struct sk_buff *pp,
            int flush,
            struct gro_remcsum *grc)
{
 ((struct napi_gro_cb *)(skb)->cb)->flush |= flush;
 skb_gro_remcsum_cleanup(skb, grc);
 skb->remcsum_offload = 0;
}
# 333 "./include/linux/netdevice_api_extra.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_subqueue_stopped(const struct net_device *dev,
       struct sk_buff *skb)
{
 return __netif_subqueue_stopped(dev, skb_get_queue_mapping(skb));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void napi_free_frags(struct napi_struct *napi)
{
 kfree_skb(napi->skb);
 napi->skb = ((void *)0);
}

int __dev_forward_skb(struct net_device *dev, struct sk_buff *skb);
int dev_forward_skb(struct net_device *dev, struct sk_buff *skb);
int dev_forward_skb_nomtu(struct net_device *dev, struct sk_buff *skb);
bool is_skb_forwardable(const struct net_device *dev,
   const struct sk_buff *skb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __is_skb_forwardable(const struct net_device *dev,
       const struct sk_buff *skb,
       const bool check_mtu)
{
 const u32 vlan_hdr_len = 4;
 unsigned int len;

 if (!(dev->flags & IFF_UP))
  return false;

 if (!check_mtu)
  return true;

 len = dev->mtu + dev->hard_header_len + vlan_hdr_len;
 if (skb->len <= len)
  return true;




 if (skb_is_gso(skb))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int ____dev_forward_skb(struct net_device *dev,
            struct sk_buff *skb,
            const bool check_mtu)
{
 if (skb_orphan_frags(skb, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u))) ||
     __builtin_expect(!!(!__is_skb_forwardable(dev, skb, check_mtu)), 0)) {
  atomic_long_inc(&dev->rx_dropped);
  kfree_skb(skb);
  return 1;
 }

 skb_scrub_packet(skb, !net_eq(dev_net(dev), dev_net(skb->dev)));
 skb->priority = 0;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool skb_gso_ok(struct sk_buff *skb, netdev_features_t features)
{
 return net_gso_ok(features, ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type) &&
        (!skb_has_frag_list(skb) || (features & ((netdev_features_t)1 << (NETIF_F_FRAGLIST_BIT))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool netif_needs_gso(struct sk_buff *skb,
       netdev_features_t features)
{
 return skb_is_gso(skb) && (!skb_gso_ok(skb, features) ||
  __builtin_expect(!!((skb->ip_summed != 3) && (skb->ip_summed != 1)), 0));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void netif_set_gso_max_size(struct net_device *dev,
       unsigned int size)
{
 dev->gso_max_size = size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void skb_gso_error_unwind(struct sk_buff *skb, __be16 protocol,
     int pulled_hlen, u16 mac_offset,
     int mac_len)
{
 skb->protocol = protocol;
 skb->encapsulation = 1;
 skb_push(skb, pulled_hlen);
 skb_reset_transport_header(skb);
 skb->mac_header = mac_offset;
 skb->network_header = skb->mac_header + mac_len;
 skb->mac_len = mac_len;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *netdev_name(const struct net_device *dev)
{
 if (!dev->name[0] || strchr(dev->name, '%'))
  return "(unnamed net_device)";
 return dev->name;
}
# 32 "net/core/neighbour.c" 2
# 1 "./include/linux/mm_api.h" 1
# 11 "./include/linux/mm_api.h"
# 1 "./include/linux/spinlock.h" 1
# 12 "./include/linux/mm_api.h" 2
# 1 "./include/linux/rbtree.h" 1
# 13 "./include/linux/mm_api.h" 2
# 1 "./include/linux/rwsem.h" 1
# 14 "./include/linux/mm_api.h" 2




# 1 "./include/linux/workqueue.h" 1
# 19 "./include/linux/mm_api.h" 2
# 1 "./include/linux/seqlock.h" 1
# 20 "./include/linux/mm_api.h" 2
# 30 "./include/linux/mm_api.h"
# 1 "./include/linux/mmzone_types.h" 1




enum zone_type {
# 17 "./include/linux/mmzone_types.h"
 ZONE_DMA,


 ZONE_DMA32,






 ZONE_NORMAL,
# 88 "./include/linux/mmzone_types.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES
};
# 105 "./include/linux/mmzone_types.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 125 "./include/linux/mmzone_types.h"
 MIGRATE_CMA,


 MIGRATE_ISOLATE,

 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];

extern int page_group_by_mobility_disabled;



struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

struct pglist_data;







struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << ((6)))));






enum numa_stat_item {
 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,
 NR_VM_NUMA_EVENT_ITEMS
};




enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,

 NR_BOUNCE,



 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE_B,
 NR_SLAB_UNRECLAIMABLE_B,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_ANON = WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_FILE,
 WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_ANON = WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_FILE,
 WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_ANON = WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_FILE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_FILE_THPS,
 NR_FILE_PMDMAPPED,
 NR_ANON_THPS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_THROTTLED_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_FOLL_PIN_ACQUIRED,
 NR_FOLL_PIN_RELEASED,
 NR_KERNEL_STACK_KB,



 NR_PAGETABLE,

 NR_SWAPCACHE,

 NR_VM_NODE_STAT_ITEMS
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_print_in_thp(enum node_stat_item item)
{
 if (!1)
  return false;

 return item == NR_ANON_THPS ||
        item == NR_FILE_THPS ||
        item == NR_SHMEM_THPS ||
        item == NR_SHMEM_PMDMAPPED ||
        item == NR_FILE_PMDMAPPED;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_in_bytes(int idx)
{
# 281 "./include/linux/mmzone_types.h"
 return (idx == NR_SLAB_RECLAIMABLE_B ||
  idx == NR_SLAB_UNRECLAIMABLE_B);
}
# 298 "./include/linux/mmzone_types.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};



enum lruvec_flags {
 LRUVEC_CONGESTED,


};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];

 spinlock_t lru_lock;





 unsigned long anon_cost;
 unsigned long file_cost;

 atomic_long_t nonresident_age;

 unsigned long refaults[2];

 unsigned long flags;

 struct pglist_data *pgdat;

};
# 344 "./include/linux/mmzone_types.h"
enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};
# 375 "./include/linux/mmzone_types.h"
struct per_cpu_pages {
 int count;
 int high;
 int batch;
 short free_factor;

 short expire;



 struct list_head lists[(MIGRATE_PCPTYPES * (3 + 1 + 1))];
};

struct per_cpu_zonestat {

 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];
 s8 stat_threshold;







 unsigned long vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 428 "./include/linux/mmzone_types.h"
 long lowmem_reserve[4];


 int node;

 struct pglist_data *zone_pgdat;
 struct per_cpu_pages *per_cpu_pageset;
 struct per_cpu_zonestat *per_cpu_zonestats;




 int pageset_high;
 int pageset_batch;
# 452 "./include/linux/mmzone_types.h"
 unsigned long zone_start_pfn;
# 496 "./include/linux/mmzone_types.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;




 unsigned long cma_pages;


 const char *name;







 unsigned long nr_isolate_pageblock;







 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[11];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
 unsigned long compact_init_migrate_pfn;
 unsigned long compact_init_free_pfn;
# 562 "./include/linux/mmzone_types.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];
} __attribute__((__aligned__(1 << ((6)))));

enum pgdat_flags {
 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


 ZONE_RECLAIM_ACTIVE,
};
# 608 "./include/linux/mmzone_types.h"
enum {
 ZONELIST_FALLBACK,





 ZONELIST_NOFALLBACK,

 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 643 "./include/linux/mmzone_types.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 4) * 4) + 1];
};


struct deferred_split {
 spinlock_t split_queue_lock;
 struct list_head split_queue;
 unsigned long split_queue_len;
};


enum vmscan_throttle_state {
 VMSCAN_THROTTLE_WRITEBACK,
 VMSCAN_THROTTLE_ISOLATED,
 VMSCAN_THROTTLE_NOPROGRESS,
 VMSCAN_THROTTLE_CONGESTED,
 NR_VMSCAN_THROTTLE,
};
# 671 "./include/linux/mmzone_types.h"
typedef struct pglist_data {





 struct zone node_zones[4];






 struct zonelist node_zonelists[MAX_ZONELISTS];

 int nr_zones;
# 708 "./include/linux/mmzone_types.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;


 wait_queue_head_t reclaim_wait[NR_VMSCAN_THROTTLE];

 atomic_t nr_writeback_throttled;
 unsigned long nr_reclaim_start;

 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_highest_zoneidx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_highest_zoneidx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;
 bool proactive_compact_trigger;





 unsigned long totalreserve_pages;





 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;



 struct zone_padding _pad1_;
# 762 "./include/linux/mmzone_types.h"
 struct deferred_split deferred_split_queue;
# 772 "./include/linux/mmzone_types.h"
 struct lruvec __lruvec;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 808 "./include/linux/mmzone_types.h"
enum meminit_context {
 MEMINIT_EARLY,
 MEMINIT_HOTPLUG,
};

extern int movable_zone;
# 823 "./include/linux/mmzone_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_max_mapnr(unsigned long limit) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}
# 31 "./include/linux/mm_api.h" 2
# 1 "./arch/arm64/include/asm/mmzone.h" 1






# 1 "./arch/arm64/include/asm/numa.h" 1




# 1 "./arch/arm64/include/asm/topology.h" 1




# 1 "./include/linux/cpumask.h" 1
# 6 "./arch/arm64/include/asm/topology.h" 2



struct pci_bus;
int pcibus_to_node(struct pci_bus *bus);






# 1 "./include/linux/arch_topology.h" 1







# 1 "./include/linux/cpumask.h" 1
# 9 "./include/linux/arch_topology.h" 2



void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_scale)))) *)((&(cpu_scale)))); (typeof((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) arch_freq_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(arch_freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale)))); (typeof((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_freq_scale(const struct cpumask *cpus, unsigned long cur_freq,
        unsigned long max_freq);
bool topology_scale_freq_invariant(void);

enum scale_freq_source {
 SCALE_FREQ_SOURCE_CPUFREQ = 0,
 SCALE_FREQ_SOURCE_ARCH,
 SCALE_FREQ_SOURCE_CPPC,
};

struct scale_freq_data {
 enum scale_freq_source source;
 void (*set_freq_scale)(void);
};

void topology_scale_freq_tick(void);
void topology_set_scale_freq_source(struct scale_freq_data *data, const struct cpumask *cpus);
void topology_clear_scale_freq_source(enum scale_freq_source source, const struct cpumask *cpus);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) thermal_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_thermal_pressure(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(thermal_pressure)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure)))); (typeof((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_thermal_pressure(const struct cpumask *cpus,
       unsigned long th_pressure);

struct cpu_topology {
 int thread_id;
 int core_id;
 int cluster_id;
 int package_id;
 int llc_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
 cpumask_t cluster_sibling;
 cpumask_t llc_sibling;
};


extern struct cpu_topology cpu_topology[256];
# 85 "./include/linux/arch_topology.h"
void init_cpu_topology(void);
void store_cpu_topology(unsigned int cpuid);
const struct cpumask *cpu_coregroup_mask(int cpu);
const struct cpumask *cpu_clustergroup_mask(int cpu);
void update_siblings_masks(unsigned int cpu);
void remove_cpu_topology(unsigned int cpuid);
void reset_cpu_topology(void);
int parse_acpi_topology(void);
# 18 "./arch/arm64/include/asm/topology.h" 2

void update_freq_counters_refs(void);
# 37 "./arch/arm64/include/asm/topology.h"
# 1 "./include/asm-generic/topology.h" 1
# 38 "./arch/arm64/include/asm/topology.h" 2
# 6 "./arch/arm64/include/asm/numa.h" 2
# 1 "./include/asm-generic/numa.h" 1








int __node_distance(int from, int to);


struct nodemask_struct;

extern struct nodemask_struct numa_nodes_parsed __attribute__((__section__(".init.data")));

extern bool numa_off;


extern cpumask_var_t node_to_cpumask_map[(1 << 4)];
void numa_clear_node(unsigned int cpu);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpumask_of_node(int node)
{
 if (node == (-1))
  return ((struct cpumask *)(1 ? (cpu_all_bits) : (void *)sizeof(__check_is_bitmap(cpu_all_bits))));

 return node_to_cpumask_map[node];
}


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) arch_numa_init(void);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) numa_add_memblk(int nodeid, u64 start, u64 end);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) numa_set_distance(int from, int to, int distance);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) numa_free_distance(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) early_map_cpu_to_node(unsigned int cpu, int nid);
void numa_store_cpu_info(unsigned int cpu);
void numa_add_cpu(unsigned int cpu);
void numa_remove_cpu(unsigned int cpu);
# 7 "./arch/arm64/include/asm/numa.h" 2
# 8 "./arch/arm64/include/asm/mmzone.h" 2

extern struct pglist_data *node_data[];
# 32 "./include/linux/mm_api.h" 2
# 1 "./include/linux/nodemask.h" 1
# 99 "./include/linux/nodemask.h"
typedef struct nodemask_struct { unsigned long bits[((((1 << 4)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 110 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 4) : 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : ((void *)0);
}
# 129 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 4))) *)1 == (typeof((int)(find_first_bit(srcp->bits, (1 << 4)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 4))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_bit(srcp->bits, (1 << 4)))) * 0l)) : (int *)8))))), (((int)((1 << 4))) < ((int)(find_first_bit(srcp->bits, (1 << 4)))) ? ((int)((1 << 4))) : ((int)(find_first_bit(srcp->bits, (1 << 4))))), ({ typeof((int)((1 << 4))) __UNIQUE_ID___x283 = ((int)((1 << 4))); typeof((int)(find_first_bit(srcp->bits, (1 << 4)))) __UNIQUE_ID___y284 = ((int)(find_first_bit(srcp->bits, (1 << 4)))); ((__UNIQUE_ID___x283) < (__UNIQUE_ID___y284) ? (__UNIQUE_ID___x283) : (__UNIQUE_ID___y284)); }));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 4))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 4))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 4))) < ((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) ? ((int)((1 << 4))) : ((int)(find_next_bit(srcp->bits, (1 << 4), n+1)))), ({ typeof((int)((1 << 4))) __UNIQUE_ID___x285 = ((int)((1 << 4))); typeof((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) __UNIQUE_ID___y286 = ((int)(find_next_bit(srcp->bits, (1 << 4), n+1))); ((__UNIQUE_ID___x285) < (__UNIQUE_ID___y286) ? (__UNIQUE_ID___x285) : (__UNIQUE_ID___y286)); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 4));
 __node_set((node), &(*mask));
}
# 300 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 4))) *)1 == (typeof((int)(find_first_zero_bit(maskp->bits, (1 << 4)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 4))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_zero_bit(maskp->bits, (1 << 4)))) * 0l)) : (int *)8))))), (((int)((1 << 4))) < ((int)(find_first_zero_bit(maskp->bits, (1 << 4)))) ? ((int)((1 << 4))) : ((int)(find_first_zero_bit(maskp->bits, (1 << 4))))), ({ typeof((int)((1 << 4))) __UNIQUE_ID___x287 = ((int)((1 << 4))); typeof((int)(find_first_zero_bit(maskp->bits, (1 << 4)))) __UNIQUE_ID___y288 = ((int)(find_first_zero_bit(maskp->bits, (1 << 4)))); ((__UNIQUE_ID___x287) < (__UNIQUE_ID___y288) ? (__UNIQUE_ID___x287) : (__UNIQUE_ID___y288)); }));

}
# 334 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 392 "./include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 N_GENERIC_INITIATOR,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_state(int node, enum node_states state)
{
 return arch_test_bit((node), (node_states[state]).bits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 4));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_online_node(int nid)
{
 return __next_node((nid), &(node_states[N_ONLINE]));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_memory_node(int nid)
{
 return __next_node((nid), &(node_states[N_MEMORY]));
}

extern unsigned int nr_node_ids;
extern unsigned int nr_online_nodes;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_online(int nid)
{
 node_set_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_offline(int nid)
{
 node_clear_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}
# 499 "./include/linux/nodemask.h"
extern int node_random(const nodemask_t *maskp);
# 533 "./include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 33 "./include/linux/mm_api.h" 2

# 1 "./include/linux/rbtree.h" 1
# 35 "./include/linux/mm_api.h" 2

# 1 "./include/linux/debug_locks.h" 1




struct task_struct;

extern int debug_locks;
extern int debug_locks_silent;






extern int debug_locks_off(void);
# 49 "./include/linux/debug_locks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_all_locks(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_held(void)
{
}
# 37 "./include/linux/mm_api.h" 2
# 1 "./include/linux/range.h" 1





struct range {
 u64 start;
 u64 end;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 range_len(const struct range *range)
{
 return range->end - range->start + 1;
}

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 38 "./include/linux/mm_api.h" 2

# 1 "./include/linux/shrinker.h" 1
# 15 "./include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 63 "./include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;


 int id;


 atomic_long_t *nr_deferred;
};
# 94 "./include/linux/shrinker.h"
extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
extern void synchronize_shrinkers(void);
# 40 "./include/linux/mm_api.h" 2
# 1 "./include/linux/resource.h" 1




# 1 "./include/uapi/linux/resource.h" 1
# 24 "./include/uapi/linux/resource.h"
struct rusage {
 struct __kernel_old_timeval ru_utime;
 struct __kernel_old_timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 85 "./include/uapi/linux/resource.h"
# 1 "./arch/arm64/include/generated/uapi/asm/resource.h" 1
# 1 "./include/asm-generic/resource.h" 1




# 1 "./include/uapi/asm-generic/resource.h" 1
# 6 "./include/asm-generic/resource.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/resource.h" 2
# 86 "./include/uapi/linux/resource.h" 2
# 6 "./include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 41 "./include/linux/mm_api.h" 2
# 1 "./include/linux/page_ext.h" 1





# 1 "./include/linux/stacktrace.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 7 "./include/linux/stacktrace.h" 2

struct task_struct;
struct pt_regs;
# 102 "./include/linux/stacktrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_trace_save_tsk_reliable(struct task_struct *tsk,
      unsigned long *store,
      unsigned int size)
{
 return -38;
}
# 7 "./include/linux/page_ext.h" 2
# 1 "./include/linux/stackdepot.h" 1
# 14 "./include/linux/stackdepot.h"
# 1 "./include/linux/gfp.h" 1
# 15 "./include/linux/stackdepot.h" 2

typedef u32 depot_stack_handle_t;

depot_stack_handle_t __stack_depot_save(unsigned long *entries,
     unsigned int nr_entries,
     gfp_t gfp_flags, bool can_alloc);

depot_stack_handle_t stack_depot_save(unsigned long *entries,
          unsigned int nr_entries, gfp_t gfp_flags);

unsigned int stack_depot_fetch(depot_stack_handle_t handle,
          unsigned long **entries);

int stack_depot_snprint(depot_stack_handle_t handle, char *buf, size_t size,
         int spaces);

void stack_depot_print(depot_stack_handle_t stack);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_depot_init(void)
{
 return 0;
}
# 8 "./include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 size_t offset;
 size_t size;
 bool (*need)(void);
 void (*init)(void);
};
# 68 "./include/linux/page_ext.h"
struct page_ext;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_page_ext_init(struct pglist_data *pgdat)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page_ext *lookup_page_ext(const struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem_late(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem(void)
{
}
# 42 "./include/linux/mm_api.h" 2



# 1 "./include/linux/overflow.h" 1
# 50 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) __must_check_overflow(bool overflow)
{
 return __builtin_expect(!!(overflow), 0);
}
# 132 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 154 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 46 "./include/linux/mm_api.h" 2

# 1 "./include/linux/kasan.h" 1







struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 70 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_enable_current(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_disable_current(void) {}
# 102 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_enabled(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_hw_tags_enabled(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_alloc_pages(struct page *page,
           unsigned int order, gfp_t flags)
{

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_289(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_289(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_free_pages(struct page *page,
          unsigned int order)
{

 do { __attribute__((__noreturn__)) extern void __compiletime_assert_290(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_290(); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_has_integrated_init(void)
{
 return kasan_hw_tags_enabled();
}
# 311 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) slab_flags_t kasan_never_merge(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_range(const void *address, size_t size) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_pages(struct page *page, unsigned int order,
          bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_pages(struct page *page, unsigned int order,
     bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          slab_flags_t *flags) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create_kmalloc(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_slab_free(struct kmem_cache *s, void *object, bool init)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_kfree_large(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_slab_free_mempool(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags, bool init)
{
 return object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
{
 return (void *)ptr;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_byte(const void *address)
{
 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_task_stack(struct task_struct *task) {}
# 382 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_record_aux_stack(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_record_aux_stack_noalloc(void *ptr) {}
# 408 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 424 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_sw_tags(void) { }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags_cpu(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags(void) { }
# 448 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_populate_vmalloc(unsigned long start,
     unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_release_vmalloc(unsigned long start,
      unsigned long end,
      unsigned long free_region_start,
      unsigned long free_region_end) {}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_populate_early_vm_area_shadow(void *start,
             unsigned long size)
{ }
# 482 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_free_shadow(const struct vm_struct *vm) {}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_non_canonical_hook(unsigned long addr) { }
# 48 "./include/linux/mm_api.h" 2
# 1 "./include/linux/fcntl.h" 1




# 1 "./include/uapi/linux/fcntl.h" 1




# 1 "./arch/arm64/include/uapi/asm/fcntl.h" 1
# 28 "./arch/arm64/include/uapi/asm/fcntl.h"
# 1 "./include/uapi/asm-generic/fcntl.h" 1
# 156 "./include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 200 "./include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 29 "./arch/arm64/include/uapi/asm/fcntl.h" 2
# 6 "./include/uapi/linux/fcntl.h" 2
# 1 "./include/uapi/linux/openat2.h" 1
# 19 "./include/uapi/linux/openat2.h"
struct open_how {
 __u64 flags;
 __u64 mode;
 __u64 resolve;
};
# 7 "./include/uapi/linux/fcntl.h" 2
# 6 "./include/linux/fcntl.h" 2
# 49 "./include/linux/mm_api.h" 2

extern void mm_init_cpumask(struct mm_struct *mm);

struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct vmem_altmap;
struct user_struct;
struct pt_regs;
struct task_struct;
struct ucounts;

extern int sysctl_page_lock_unfairness;

void init_mm_internals(void);

extern atomic_long_t _totalram_pages;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalram_pages(void)
{
 return (unsigned long)atomic_long_read(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_inc(void)
{
 atomic_long_inc(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_dec(void)
{
 atomic_long_dec(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_add(long count)
{
 atomic_long_add(count, &_totalram_pages);
}

extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits __attribute__((__section__(".data..read_mostly")));


extern const int mmap_rnd_compat_bits_min;
extern const int mmap_rnd_compat_bits_max;
extern int mmap_rnd_compat_bits __attribute__((__section__(".data..read_mostly")));
# 131 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mm_zero_struct_page(struct page *page)
{
 unsigned long *_pp = (void *)page;


 do { __attribute__((__noreturn__)) extern void __compiletime_assert_291(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) & 7"))); if (!(!(sizeof(struct page) & 7))) __compiletime_assert_291(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_292(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) < 56"))); if (!(!(sizeof(struct page) < 56))) __compiletime_assert_292(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_293(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(struct page) > 80"))); if (!(!(sizeof(struct page) > 80))) __compiletime_assert_293(); } while (0);

 switch (sizeof(struct page)) {
 case 80:
  _pp[9] = 0;
  __attribute__((__fallthrough__));
 case 72:
  _pp[8] = 0;
  __attribute__((__fallthrough__));
 case 64:
  _pp[7] = 0;
  __attribute__((__fallthrough__));
 case 56:
  _pp[6] = 0;
  _pp[5] = 0;
  _pp[4] = 0;
  _pp[3] = 0;
  _pp[2] = 0;
  _pp[1] = 0;
  _pp[0] = 0;
 }
}
# 183 "./include/linux/mm_api.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);



void setup_initial_init_mm(void *start_code, void *end_code,
      void *end_data, void *brk);
# 213 "./include/linux/mm_api.h"
struct vm_area_struct *vm_area_alloc(struct mm_struct *);
struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
void vm_area_free(struct vm_area_struct *);
# 228 "./include/linux/mm_api.h"
extern pgprot_t protection_map[16];
# 243 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fault_flag_allow_retry_first(enum fault_flag flags)
{
 return (flags & FAULT_FLAG_ALLOW_RETRY) &&
     (!(flags & FAULT_FLAG_TRIED));
}
# 262 "./include/linux/mm_api.h"
enum page_entry_size {
 PE_SIZE_PTE = 0,
 PE_SIZE_PMD,
 PE_SIZE_PUD,
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);

 int (*may_split)(struct vm_area_struct *area, unsigned long addr);
 int (*mremap)(struct vm_area_struct *area);





 int (*mprotect)(struct vm_area_struct *vma, unsigned long start,
   unsigned long end, unsigned long newflags);
 vm_fault_t (*fault)(struct vm_fault *vmf);
 vm_fault_t (*huge_fault)(struct vm_fault *vmf,
   enum page_entry_size pe_size);
 vm_fault_t (*map_pages)(struct vm_fault *vmf,
   unsigned long start_pgoff, unsigned long end_pgoff);
 unsigned long (*pagesize)(struct vm_area_struct * area);



 vm_fault_t (*page_mkwrite)(struct vm_fault *vmf);


 vm_fault_t (*pfn_mkwrite)(struct vm_fault *vmf);





 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 320 "./include/linux/mm_api.h"
 int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
# 332 "./include/linux/mm_api.h"
 struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
     unsigned long addr);






 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
{
 static const struct vm_operations_struct dummy_vm_ops = {};

 memset(vma, 0, sizeof(*vma));
 vma->vm_mm = mm;
 vma->vm_ops = &dummy_vm_ops;
 INIT_LIST_HEAD(&vma->anon_vma_chain);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_set_anonymous(struct vm_area_struct *vma)
{
 vma->vm_ops = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_temporary_stack(struct vm_area_struct *vma)
{
 int maybe_stack = vma->vm_flags & (0x00000100 | 0x00000000);

 if (!maybe_stack)
  return false;

 if ((vma->vm_flags & (0x00010000 | 0x00008000)) ==
      (0x00010000 | 0x00008000))
  return true;

 return false;
}

extern bool vma_is_foreign(struct vm_area_struct *vma);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_accessible(struct vm_area_struct *vma)
{
 return vma->vm_flags & (0x00000001 | 0x00000002 | 0x00000004);
}






bool vma_is_shmem(struct vm_area_struct *vma);




int vma_is_stack_for_current(struct vm_area_struct *vma);




struct mmu_gather;
struct inode;
# 419 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int put_page_testzero(struct page *page)
{
 ((void)(sizeof(( long)(page_ref_count(page) == 0))));
 return page_ref_dec_and_test(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_put_testzero(struct folio *folio)
{
 return put_page_testzero(&folio->page);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_mapcount(struct page *head)
{
 return atomic_read(compound_mapcount_ptr(head)) + 1;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(!PageCompound(page)))));
 page = ((typeof(page))_compound_head(page));
 return head_compound_mapcount(page);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_mapcount_reset(struct page *page)
{
 atomic_set(&(page)->_mapcount, -1);
}

int __page_mapcount(struct page *page);
# 489 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mapcount(struct page *page)
{
 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return atomic_read(&page->_mapcount) + 1;
}


int total_mapcount(struct page *page);
int page_trans_huge_mapcount(struct page *page, int *total_mapcount);
# 514 "./include/linux/mm_api.h"
void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);
void folio_copy(struct folio *dst, struct folio *src);

unsigned long nr_free_buffer_pages(void);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,

 HUGETLB_PAGE_DTOR,


 TRANSHUGE_PAGE_DTOR,

 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[NR_COMPOUND_DTORS];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 ((void)(sizeof(( long)(compound_dtor >= NR_COMPOUND_DTORS))));
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_compound_page(struct page *page)
{
 ((void)(sizeof(( long)(page[1].compound_dtor >= NR_COMPOUND_DTORS))));
 compound_page_dtors[page[1].compound_dtor](page);
}
# 566 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int folio_order(struct folio *folio)
{
 return compound_order(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hpage_pincount_available(struct page *page)
{





 page = ((typeof(page))_compound_head(page));
 return PageCompound(page) && compound_order(page) > 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_pincount(struct page *head)
{
 return atomic_read(compound_pincount_ptr(head));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_pincount(struct page *page)
{
 ((void)(sizeof(( long)(!hpage_pincount_available(page)))));
 page = ((typeof(page))_compound_head(page));
 return head_compound_pincount(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
 page[1].compound_nr = 1U << order;
}

void free_compound_page(struct page *page);
# 662 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type page_zonenum(const struct page *page)
{
 do { kcsan_set_access_mask(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 4) - 2) * (2 != 0))); __kcsan_check_access(&(page->flags), sizeof(page->flags), (1 << 3)); kcsan_set_access_mask(0); kcsan_atomic_next(1); } while (0);
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 4) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type folio_zonenum(const struct folio *folio)
{
 return page_zonenum(&folio->page);
}
# 681 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_device_page(const struct page *page)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_movable_page(const struct page *page)
{
 return page_zonenum(page) == ZONE_MOVABLE;
}
# 704 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_get(struct folio *folio)
{
 ((void)(sizeof(( long)(((unsigned int) folio_ref_count(folio) + 127u <= 127u)))));
 folio_ref_inc(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_page(struct page *page)
{
 folio_get((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

bool __attribute__((__warn_unused_result__)) try_grab_page(struct page *page, unsigned int flags);
struct page *try_grab_compound_head(struct page *page, int refs,
        unsigned int flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool try_get_page(struct page *page)
{
 page = ((typeof(page))_compound_head(page));
 if (({ int __ret_warn_on = !!(page_ref_count(page) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/mm_api.h\"; .popsection; .long 14472b - 14470b; .short 723; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 page_ref_inc(page);
 return true;
}
# 742 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_put(struct folio *folio)
{
 if (folio_put_testzero(folio))
  __put_page(&folio->page);
}

void put_page(struct page *page);
# 783 "./include/linux/mm_api.h"
void unpin_user_page(struct page *page);
void unpin_user_pages_dirty_lock(struct page **pages, unsigned long npages,
     bool make_dirty);
void unpin_user_page_range_dirty_lock(struct page *page, unsigned long npages,
          bool make_dirty);
void unpin_user_pages(struct page **pages, unsigned long npages);
# 816 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_maybe_dma_pinned(struct page *page)
{
 if (hpage_pincount_available(page))
  return compound_pincount(page) > 0;
# 829 "./include/linux/mm_api.h"
 return ((unsigned int)page_ref_count(((typeof(page))_compound_head(page)))) >=
  (1U << 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_cow_mapping(vm_flags_t flags)
{
 return (flags & (0x00000008 | 0x00000020)) == 0x00000020;
}
# 846 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 4) < ((((sizeof(unsigned long)*8) - 0) - 4) - 2))? (((sizeof(unsigned long)*8) - 0) - 4) : ((((sizeof(unsigned long)*8) - 0) - 4) - 2)) * ((4 + 2) != 0))) & ((1UL << (4 + 2)) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_to_nid(const struct page *page)
{
 struct page *p = (struct page *)page;

 return (({ ((void)(sizeof(( long)(PagePoisoned(p))))); p; })->flags >> ((((sizeof(unsigned long)*8) - 0) - 4) * (4 != 0))) & ((1UL << 4) - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_nid(const struct folio *folio)
{
 return page_to_nid(&folio->page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_pid_to_cpupid(int cpu, int pid)
{
 return ((cpu & ((1 << 8)-1)) << 8) | (pid & ((1 << 8)-1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_pid(int cpupid)
{
 return cpupid & ((1 << 8)-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_cpu(int cpupid)
{
 return (cpupid >> 8) & ((1 << 8)-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_pid_unset(int cpupid)
{
 return cpupid_to_pid(cpupid) == (-1 & ((1 << 8)-1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_cpu_unset(int cpupid)
{
 return cpupid_to_cpu(cpupid) == (-1 & ((1 << 8)-1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __cpupid_match_pid(pid_t task_pid, int cpupid)
{
 return (task_pid & ((1 << 8)-1)) == cpupid_to_pid(cpupid);
}
# 914 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cpupid_last(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 4) - 2) - (8 +8)) * ((8 +8) != 0))) & ((1UL << (8 +8)) - 1);
}

extern int page_cpupid_xchg_last(struct page *page, int cpupid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_cpupid_reset_last(struct page *page)
{
 page->flags |= ((1UL << (8 +8)) - 1) << ((((((sizeof(unsigned long)*8) - 0) - 4) - 2) - (8 +8)) * ((8 +8) != 0));
}
# 972 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *page_zone(const struct page *page)
{
 return &(node_data[(page_to_nid(page))])->node_zones[page_zonenum(page)];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *page_pgdat(const struct page *page)
{
 return (node_data[(page_to_nid(page))]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *folio_zone(const struct folio *folio)
{
 return page_zone(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *folio_pgdat(const struct folio *folio)
{
 return page_pgdat(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 4) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 4) - 2) * (2 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 4) - 1) << ((((sizeof(unsigned long)*8) - 0) - 4) * (4 != 0)));
 page->flags |= (node & ((1UL << 4) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 4) * (4 != 0));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long folio_nr_pages(struct folio *folio)
{
 return compound_nr(&folio->page);
}
# 1027 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int folio_shift(struct folio *folio)
{
 return 12 + folio_order(folio);
}
# 1040 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t folio_size(struct folio *folio)
{
 return ((1UL) << 12) << folio_order(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_make_page_accessible(struct page *page)
{
 return 0;
}


extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);
 return page->index;
}

bool page_mapped(struct page *page);
bool folio_mapped(struct folio *folio);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_pfmemalloc(const struct page *page)
{





 return (uintptr_t)page->lru.next & ((((1UL))) << (1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_pfmemalloc(struct page *page)
{
 page->lru.next = (void *)((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_page_pfmemalloc(struct page *page)
{
 page->lru.next = ((void *)0);
}




extern void pagefault_out_of_memory(void);







extern void show_free_areas(unsigned int flags, nodemask_t *nodemask);


extern bool can_do_mlock(void);



extern int user_shm_lock(size_t, struct ucounts *);
extern void user_shm_unlock(size_t, struct ucounts *);




struct zap_details {
 struct address_space *zap_mapping;
 struct page *single_page;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
zap_skip_check_mapping(struct zap_details *details, struct page *page)
{
 if (!details || !page)
  return false;

 return details->zap_mapping &&
     (details->zap_mapping != page_rmapping(page));
}

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
        pte_t pte);
struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

void zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
    unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
      unsigned long size);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);

struct mmu_notifier_range;

void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int
copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
int follow_invalidate_pte(struct mm_struct *mm, unsigned long address,
     struct mmu_notifier_range *range, pte_t **ptepp,
     pmd_t **pmdpp, spinlock_t **ptlp);
int follow_pte(struct mm_struct *mm, unsigned long address,
        pte_t **ptepp, spinlock_t **ptlp);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);


extern vm_fault_t handle_mm_fault(struct vm_area_struct *vma,
      unsigned long address, unsigned int flags,
      struct pt_regs *regs);
extern int fixup_user_fault(struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
void unmap_mapping_page(struct page *page);
void unmap_mapping_pages(struct address_space *mapping,
  unsigned long start, unsigned long nr, bool even_cows);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
# 1207 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern int access_process_vm(struct task_struct *tsk, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int __access_remote_vm(struct mm_struct *mm, unsigned long addr,
         void *buf, int len, unsigned int gup_flags);

long get_user_pages_remote(struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas, int *locked);
long pin_user_pages_remote(struct mm_struct *mm,
      unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas, int *locked);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas);
long pin_user_pages(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);
long pin_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);

int get_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);

int account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc);
int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,
   struct task_struct *task, bool bypass_rlim);

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

bool folio_mark_dirty(struct folio *folio);
bool set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
# 1288 "./include/linux/mm_api.h"
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         unsigned long cp_flags);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int get_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool get_user_page_fast_only(unsigned long addr,
   unsigned int gup_flags, struct page **pagep)
{
 return get_user_pages_fast_only(addr, 1, gup_flags, pagep) == 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}

void mm_trace_rss_stat(struct mm_struct *mm, int member, long count);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 long count = atomic_long_add_return(value, &mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_inc_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_dec_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_rss) *)1 == (typeof(get_mm_rss(mm)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_rss) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(get_mm_rss(mm)) * 0l)) : (int *)8))))), ((mm->hiwater_rss) > (get_mm_rss(mm)) ? (mm->hiwater_rss) : (get_mm_rss(mm))), ({ typeof(mm->hiwater_rss) __UNIQUE_ID___x294 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) __UNIQUE_ID___y295 = (get_mm_rss(mm)); ((__UNIQUE_ID___x294) > (__UNIQUE_ID___y295) ? (__UNIQUE_ID___x294) : (__UNIQUE_ID___y295)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_vm) *)1 == (typeof(mm->total_vm) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_vm) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->total_vm) * 0l)) : (int *)8))))), ((mm->hiwater_vm) > (mm->total_vm) ? (mm->hiwater_vm) : (mm->total_vm)), ({ typeof(mm->hiwater_vm) __UNIQUE_ID___x296 = (mm->hiwater_vm); typeof(mm->total_vm) __UNIQUE_ID___y297 = (mm->total_vm); ((__UNIQUE_ID___x296) > (__UNIQUE_ID___y297) ? (__UNIQUE_ID___x296) : (__UNIQUE_ID___y297)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);
# 1436 "./include/linux/mm_api.h"
int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
      unsigned long address)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_pgtables_bytes_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->pgtables_bytes, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mm_pgtables_bytes(const struct mm_struct *mm)
{
 return atomic_long_read(&mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_ptes(struct mm_struct *mm)
{
 atomic_long_add((1 << (12 - 3)) * sizeof(pte_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_ptes(struct mm_struct *mm)
{
 atomic_long_sub((1 << (12 - 3)) * sizeof(pte_t), &mm->pgtables_bytes);
}
# 1490 "./include/linux/mm_api.h"
int __pte_alloc(struct mm_struct *mm, pmd_t *pmd);
int __pte_alloc_kernel(pmd_t *pmd);

extern void pagecache_init(void);
extern void free_area_init_memoryless_node(int nid);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, const char *s);

extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(void);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


void free_reserved_page(struct page *page);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel image (initmem)");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for (((nid)) = __first_node(&(node_states[N_ONLINE])); ((nid)) < (1 << 4); ((nid)) = __next_node((((nid))), &((node_states[N_ONLINE]))))
  phys_pages += ((node_data[(nid)])->node_present_pages);

 return phys_pages;
}
# 1563 "./include/linux/mm_api.h"
void free_area_init(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);
# 1580 "./include/linux/mm_api.h"
extern int early_pfn_to_nid(unsigned long pfn);


extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_range(unsigned long, int, unsigned long,
  unsigned long, unsigned long, enum meminit_context,
  struct vmem_altmap *, int migratetype);
extern void setup_per_zone_wmarks(void);
extern void calculate_min_free_kbytes(void);
extern int init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void mmap_init(void);
extern void show_mem(unsigned int flags, nodemask_t *nodemask);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);




extern __attribute__((__format__(printf, 3, 4)))
void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...);

extern void setup_per_cpu_pageset(void);


extern int min_free_kbytes;
extern int watermark_boost_factor;
extern int watermark_scale_factor;
extern bool arch_has_descending_max_zone_pfns(void);


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root_cached *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root_cached *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root_cached *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root_cached *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root_cached *root);
struct anon_vma_chain *
anon_vma_interval_tree_iter_first(struct rb_root_cached *root,
      unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
# 1650 "./include/linux/mm_api.h"
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert,
 struct vm_area_struct *expand);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert)
{
 return __vma_adjust(vma, start, end, pgoff, insert, ((void *)0));
}
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *, struct vm_userfaultfd_ctx);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int __split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern bool vma_is_special_mapping(const struct vm_area_struct *vma,
       const struct vm_special_mapping *sm);
extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

unsigned long randomize_stack_top(unsigned long stack_top);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
 struct list_head *uf);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate, struct list_head *uf);
extern int __do_munmap(struct mm_struct *, unsigned long, size_t,
         struct list_head *uf, bool downgrade);
extern int do_munmap(struct mm_struct *, unsigned long, size_t,
       struct list_head *uf);
extern int do_madvise(struct mm_struct *mm, unsigned long start, size_t len_in, int behavior);


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((__warn_unused_result__)) vm_brk(unsigned long, unsigned long);
extern int __attribute__((__warn_unused_result__)) vm_brk_flags(unsigned long, unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((__warn_unused_result__)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long vm_unmapped_area(struct vm_unmapped_area_info *info);


extern vm_fault_t filemap_fault(struct vm_fault *vmf);
extern vm_fault_t filemap_map_pages(struct vm_fault *vmf,
  unsigned long start_pgoff, unsigned long end_pgoff);
extern vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf);

extern unsigned long stack_guard_gap;

extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);
# 1789 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *find_vma_intersection(struct mm_struct *mm,
          unsigned long start_addr,
          unsigned long end_addr)
{
 struct vm_area_struct *vma = find_vma(mm, start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}
# 1808 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *vma_lookup(struct mm_struct *mm, unsigned long addr)
{
 struct vm_area_struct *vma = find_vma(mm, addr);

 if (vma && addr < vma->vm_start)
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_start_gap(struct vm_area_struct *vma)
{
 unsigned long vm_start = vma->vm_start;

 if (vma->vm_flags & 0x00000100) {
  vm_start -= stack_guard_gap;
  if (vm_start > vma->vm_start)
   vm_start = 0;
 }
 return vm_start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_end_gap(struct vm_area_struct *vma)
{
 unsigned long vm_end = vma->vm_end;

 if (vma->vm_flags & 0x00000000) {
  vm_end += stack_guard_gap;
  if (vm_end < vma->vm_end)
   vm_end = -((1UL) << 12);
 }
 return vm_end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> 12;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool range_in_vma(struct vm_area_struct *vma,
    unsigned long start, unsigned long end)
{
 return (vma && vma->vm_start <= start && end <= vma->vm_end);
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 1880 "./include/linux/mm_api.h"
void vma_set_file(struct vm_area_struct *vma, struct file *file);


unsigned long change_prot_numa(struct vm_area_struct *vma,
   unsigned long start, unsigned long end);


struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int remap_pfn_range_notrack(struct vm_area_struct *vma, unsigned long addr,
  unsigned long pfn, unsigned long size, pgprot_t prot);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pages(struct vm_area_struct *vma, unsigned long addr,
   struct page **pages, unsigned long *num);
int vm_map_pages(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
vm_fault_t vmf_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *vma,
  unsigned long addr, pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_page(struct vm_area_struct *vma,
    unsigned long addr, struct page *page)
{
 int err = vm_insert_page(vma, addr, page);

 if (err == -12)
  return VM_FAULT_OOM;
 if (err < 0 && err != -16)
  return VM_FAULT_SIGBUS;

 return VM_FAULT_NOPAGE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_error(int err)
{
 if (err == -12)
  return VM_FAULT_OOM;
 return VM_FAULT_SIGBUS;
}

struct page *follow_page(struct vm_area_struct *vma, unsigned long address,
    unsigned int foll_flags);
# 2012 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vm_fault_to_errno(vm_fault_t vm_fault, int foll_flags)
{
 if (vm_fault & VM_FAULT_OOM)
  return -12;
 if (vm_fault & (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))
  return (foll_flags & 0x100) ? -133 : -14;
 if (vm_fault & (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))
  return -14;
 return 0;
}

typedef int (*pte_fn_t)(pte_t *pte, unsigned long addr, void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);
extern int apply_to_existing_page_range(struct mm_struct *mm,
       unsigned long address, unsigned long size,
       pte_fn_t fn, void *data);

extern void init_mem_debugging_and_hardening(void);
# 2059 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled_static(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kernel_poison_pages(struct page *page, int nunmpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_poison_pages(struct page *page, int numpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_unpoison_pages(struct page *page, int numpages) { }


extern struct static_key_false init_on_alloc;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_alloc(gfp_t flags)
{
 if ((0 ? ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_true)) branch = !arch_static_branch(&(&init_on_alloc)->key, true); else if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_false)) branch = !arch_static_branch_jump(&(&init_on_alloc)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }) : ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_alloc)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_false)) branch = arch_static_branch(&(&init_on_alloc)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); })))

  return true;
 return flags & (( gfp_t)0x100u);
}

extern struct static_key_false init_on_free;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_free(void)
{
 return (0 ? ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_true)) branch = !arch_static_branch(&(&init_on_free)->key, true); else if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_false)) branch = !arch_static_branch_jump(&(&init_on_free)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }) : ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_free)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_false)) branch = arch_static_branch(&(&init_on_free)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }));

}

extern bool _debug_pagealloc_enabled_early;
extern struct static_key_false _debug_pagealloc_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled(void)
{
 return 0 &&
  _debug_pagealloc_enabled_early;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled_static(void)
{
 if (!0)
  return false;

 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_true)) branch = arch_static_branch_jump(&(&_debug_pagealloc_enabled)->key, false); else if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_false)) branch = arch_static_branch(&(&_debug_pagealloc_enabled)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}
# 2122 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_map_pages(struct page *page, int numpages) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_unmap_pages(struct page *page, int numpages) {}


extern bool process_shares_mm(struct task_struct *p, struct mm_struct *mm);


extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);

void print_vma_addr(char *prefix, unsigned long rip);






int vmemmap_remap_free(unsigned long start, unsigned long end,
         unsigned long reuse);
int vmemmap_remap_alloc(unsigned long start, unsigned long end,
   unsigned long reuse, gfp_t gfp_mask);

void *sparse_buffer_alloc(unsigned long size);
struct page * __populate_section_memmap(unsigned long pfn,
  unsigned long nr_pages, int nid, struct vmem_altmap *altmap);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
p4d_t *vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node);
pud_t *vmemmap_pud_populate(p4d_t *p4d, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node,
       struct vmem_altmap *altmap);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *vmemmap_alloc_block_buf(unsigned long size, int node,
         struct vmem_altmap *altmap);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node, struct vmem_altmap *altmap);
int vmemmap_populate(unsigned long start, unsigned long end, int node,
  struct vmem_altmap *altmap);
void vmemmap_populate_print_last(void);




void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long nr_pages);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int flags);
extern void memory_failure_queue(unsigned long pfn, int flags);
extern void memory_failure_queue_kick(int cpu);
extern int unpoison_memory(unsigned long pfn);
extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p);
extern atomic_long_t num_poisoned_pages __attribute__((__section__(".data..read_mostly")));
extern int soft_offline_page(unsigned long pfn, int flags);





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_NON_PMD_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_DAX,
 MF_MSG_UNSPLIT_THP,
 MF_MSG_UNKNOWN,
};


extern void clear_huge_page(struct page *page,
       unsigned long addr_hint,
       unsigned int pages_per_huge_page);
extern void copy_user_huge_page(struct page *dst, struct page *src,
    unsigned long addr_hint,
    struct vm_area_struct *vma,
    unsigned int pages_per_huge_page);
extern long copy_huge_page_from_user(struct page *dst_page,
    const void *usr_src,
    unsigned int pages_per_huge_page,
    bool allow_pagefault);

extern bool vma_is_dax(const struct vm_area_struct *vma);
# 2261 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_special_huge(const struct vm_area_struct *vma)
{
 return vma_is_dax(vma) || (vma->vm_file &&
       (vma->vm_flags & (0x00000400 | 0x10000000)));
}
# 2291 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int debug_guardpage_minorder(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_guardpage_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_guard(struct page *page) { return false; }



void setup_nr_node_ids(void);




extern int memcmp_pages(struct page *page1, struct page *page2);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pages_identical(struct page *page1, struct page *page2)
{
 return !memcmp_pages(page1, page2);
}
# 2321 "./include/linux/mm_api.h"
extern int sysctl_nr_trim_pages;


void mem_dump_obj(void *object);
# 2337 "./include/linux/mm_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seal_check_future_write(int seals, struct vm_area_struct *vma)
{
 if (seals & 0x0010) {




  if ((vma->vm_flags & 0x00000008) && (vma->vm_flags & 0x00000002))
   return -1;
# 2354 "./include/linux/mm_api.h"
  if (vma->vm_flags & 0x00000008)
   vma->vm_flags &= ~(0x00000020);
 }

 return 0;
}
# 33 "net/core/neighbour.c" 2


# 1 "./include/linux/gfp_api.h" 1







# 1 "./include/linux/topology.h" 1
# 49 "./include/linux/topology.h"
int topology_update_cpu_topology(void);
# 79 "./include/linux/topology.h"
extern int node_reclaim_distance;






extern __attribute__((section(".data..percpu" ""))) __typeof__(int) numa_node;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_node_id(void)
{
 return ({ typeof(numa_node) pscr_ret__; do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_to_node(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(numa_node)))) *)((&(numa_node)))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_numa_node(int node)
{
 do { do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_write_8(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), (unsigned long)node); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_write_16(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), (unsigned long)node); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_write_32(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), (unsigned long)node); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_write_64(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), (unsigned long)node); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpu_numa_node(int cpu, int node)
{
 (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(numa_node)))) *)((&(numa_node)))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })) = node;
}
# 171 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_mem_id(void)
{
 return numa_node_id();
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_to_mem(int cpu)
{
 return cpu_to_node(cpu);
}
# 212 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_smt_mask(int cpu)
{
 return (&cpu_topology[cpu].thread_sibling);
}
# 225 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return cpumask_of_node(cpu_to_node(cpu));
}
# 9 "./include/linux/gfp_api.h" 2



struct vm_area_struct;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_298(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(1UL << GFP_MOVABLE_SHIFT) != ___GFP_MOVABLE"))); if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_298(); } while (0);
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_299(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(___GFP_MOVABLE >> GFP_MOVABLE_SHIFT) != MIGRATE_MOVABLE"))); if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_299(); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}
# 50 "./include/linux/gfp_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400u) | (( gfp_t)0x20000u))) ==
  (( gfp_t)0x400u);
}
# 146 "./include/linux/gfp_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_DMA << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_DMA << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 164 "./include/linux/gfp_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_zonelist(gfp_t flags)
{

 if (__builtin_expect(!!(flags & (( gfp_t)0x200000u)), 0))
  return ZONELIST_NOFALLBACK;

 return ZONELIST_FALLBACK;
}
# 182 "./include/linux/gfp_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (node_data[(nid)])->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_alloc_page(struct page *page, int order) { }


struct page *__alloc_pages(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);
struct folio *__folio_alloc(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);

unsigned long __alloc_pages_bulk(gfp_t gfp, int preferred_nid,
    nodemask_t *nodemask, int nr_pages,
    struct list_head *page_list,
    struct page **page_array);

unsigned long alloc_pages_bulk_array_mempolicy(gfp_t gfp,
    unsigned long nr_pages,
    struct page **page_array);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_list(gfp_t gfp, unsigned long nr_pages, struct list_head *list)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, list, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array(gfp_t gfp, unsigned long nr_pages, struct page **page_array)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, ((void *)0), page_array);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_bulk(gfp, nid, ((void *)0), nr_pages, ((void *)0), page_array);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 4)))));
 ((void)(sizeof(( long)((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, nid, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct folio *__folio_alloc_node(gfp_t gfp, unsigned int order, int nid)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 4)))));
 ((void)(sizeof(( long)((gfp & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __folio_alloc(gfp, order, nid, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}


struct page *alloc_pages(gfp_t gfp, unsigned int order);
struct folio *folio_alloc(gfp_t gfp, unsigned order);
extern struct page *alloc_pages_vma(gfp_t gfp_mask, int order,
   struct vm_area_struct *vma, unsigned long addr,
   int node, bool hugepage);
# 292 "./include/linux/gfp_api.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void free_pages_exact(void *virt, size_t size);
void *alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask) __attribute__((__alloc_size__(2))) __attribute__((__malloc__));







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc_align(struct page_frag_cache *nc,
       unsigned int fragsz, gfp_t gfp_mask,
       unsigned int align_mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask)
{
 return page_frag_alloc_align(nc, fragsz, gfp_mask, ~0u);
}

extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 339 "./include/linux/gfp_api.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);

extern gfp_t vma_thp_gfp_mask(struct vm_area_struct *vma);


extern bool pm_suspended_storage(void);
# 360 "./include/linux/gfp_api.h"
extern int alloc_contig_range(unsigned long start, unsigned long end,
         unsigned migratetype, gfp_t gfp_mask);
extern struct page *alloc_contig_pages(unsigned long nr_pages, gfp_t gfp_mask,
           int nid, nodemask_t *nodemask);

void free_contig_range(unsigned long pfn, unsigned long nr_pages);



extern void init_cma_reserved_pageblock(struct page *page);
# 36 "net/core/neighbour.c" 2
# 1 "./include/linux/fs_api.h" 1




# 1 "./include/linux/fs_types.h" 1






# 1 "./include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 8 "./include/linux/fs_types.h" 2



# 1 "./include/linux/migrate_mode.h" 1
# 15 "./include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};

enum migrate_reason {
 MR_COMPACTION,
 MR_MEMORY_FAILURE,
 MR_MEMORY_HOTPLUG,
 MR_SYSCALL,
 MR_MEMPOLICY_MBIND,
 MR_NUMA_MISPLACED,
 MR_CONTIG_RANGE,
 MR_LONGTERM_PIN,
 MR_DEMOTION,
 MR_TYPES
};
# 12 "./include/linux/fs_types.h" 2
# 1 "./include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 13 "./include/linux/fs_types.h" 2
# 1 "./include/linux/quota_types.h" 1






# 1 "./include/linux/rwsem.h" 1
# 8 "./include/linux/quota_types.h" 2


# 1 "./include/linux/projid.h" 1
# 17 "./include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
# 11 "./include/linux/quota_types.h" 2

# 1 "./include/uapi/linux/quota.h" 1
# 90 "./include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "./include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "./include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "./include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 13 "./include/linux/quota_types.h" 2





enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};




struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};
# 14 "./include/linux/fs_types.h" 2






# 1 "./include/uapi/linux/fs.h" 1
# 54 "./include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 287 "./include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 21 "./include/linux/fs_types.h" 2
# 39 "./include/linux/fs_types.h"
# 1 "./include/linux/nfs_fs_i.h" 1






struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 40 "./include/linux/fs_types.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct io_comp_batch;
struct export_operations;
struct fiemap_extent_info;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstat;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;
struct fs_context;
struct fs_parameter_spec;
struct fileattr;
struct delayed_call;
struct shrink_control;

extern struct files_stat_struct files_stat;
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 213 "./include/linux/fs_types.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};
# 263 "./include/linux/fs_types.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 276 "./include/linux/fs_types.h"
struct page;
struct address_space;
struct writeback_control;
struct readahead_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 311 "./include/linux/fs_types.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 struct wait_page_queue *ki_waitq;

};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 341 "./include/linux/fs_types.h"
typedef struct read_descriptor {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);
 void (*readahead)(struct readahead_control *);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;
# 429 "./include/linux/fs_types.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 struct rw_semaphore invalidate_lock;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;




 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) ;
# 461 "./include/linux/fs_types.h"
struct posix_acl;
# 476 "./include/linux/fs_types.h"
struct fsnotify_mark_connector;
struct super_block;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;

 struct bdi_writeback *i_wb;


 int i_wb_frn_winner;
 u16 i_wb_frn_avg_time;
 u16 i_wb_frn_history;

 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;
# 593 "./include/linux/fs_types.h"
 void *i_private;
} ;
# 606 "./include/linux/fs_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t i_size_read(const struct inode *inode)
{
# 625 "./include/linux/fs_types.h"
 return inode->i_size;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}
# 650 "./include/linux/fs_types.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};
# 677 "./include/linux/fs_types.h"
struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;
 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct hlist_head *f_ep;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
 errseq_t f_sb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[];
};
# 767 "./include/linux/fs_types.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
 bool (*lm_breaker_owns_lease)(struct file_lock *);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};
# 813 "./include/linux/fs_types.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 865 "./include/linux/fs_types.h"
struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};
# 887 "./include/linux/fs_types.h"
struct renamedata {
 struct user_namespace *old_mnt_userns;
 struct inode *old_dir;
 struct dentry *old_dentry;
 struct user_namespace *new_mnt_userns;
 struct inode *new_dir;
 struct dentry *new_dentry;
 struct inode **delegated_inode;
 unsigned int flags;
} ;







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};
# 952 "./include/linux/fs_types.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, struct io_comp_batch *,
   unsigned int flags);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} ;

struct __attribute__((__aligned__((1 << (6))))) inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct user_namespace *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int, bool);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct user_namespace *, struct inode *,struct dentry *,
         umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct user_namespace *, struct inode *,struct dentry *,
   const char *);
 int (*mkdir) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t,dev_t);
 int (*rename) (struct user_namespace *, struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct user_namespace *, struct dentry *,
   struct iattr *);
 int (*getattr) (struct user_namespace *, const struct path *,
   struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct user_namespace *, struct inode *,
   struct dentry *, umode_t);
 int (*set_acl)(struct user_namespace *, struct inode *,
         struct posix_acl *, int);
 int (*fileattr_set)(struct user_namespace *mnt_userns,
       struct dentry *dentry, struct fileattr *fa);
 int (*fileattr_get)(struct dentry *dentry, struct fileattr *fa);
};

struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 1175 "./include/linux/fs_types.h"
enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};


enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct file_system_type {
 const char *name;
 int fs_flags;







 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_spec *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key invalidate_lock_key;
 struct lock_class_key i_mutex_dir_key;
};


struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
# 6 "./include/linux/fs_api.h" 2


# 1 "./include/linux/stat.h" 1





# 1 "./arch/arm64/include/asm/stat.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/stat.h" 1
# 1 "./include/uapi/asm-generic/stat.h" 1
# 24 "./include/uapi/asm-generic/stat.h"
struct stat {
 unsigned long st_dev;
 unsigned long st_ino;
 unsigned int st_mode;
 unsigned int st_nlink;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned long st_rdev;
 unsigned long __pad1;
 long st_size;
 int st_blksize;
 int __pad2;
 long st_blocks;
 long st_atime;
 unsigned long st_atime_nsec;
 long st_mtime;
 unsigned long st_mtime_nsec;
 long st_ctime;
 unsigned long st_ctime_nsec;
 unsigned int __unused4;
 unsigned int __unused5;
};
# 2 "./arch/arm64/include/generated/uapi/asm/stat.h" 2
# 9 "./arch/arm64/include/asm/stat.h" 2




# 1 "./arch/arm64/include/asm/compat.h" 1
# 14 "./arch/arm64/include/asm/compat.h"
typedef u16 compat_mode_t;

# 1 "./include/asm-generic/compat.h" 1





typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u32 compat_ino_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef s32 compat_daddr_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;
typedef s16 compat_short_t;
typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef u16 compat_ushort_t;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u32 compat_uptr_t;
typedef u32 compat_caddr_t;
typedef u32 compat_aio_context_t;
typedef u32 compat_old_sigset_t;


typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
# 40 "./include/asm-generic/compat.h"
typedef s64 compat_s64;
typedef u64 compat_u64;



typedef u32 compat_sigset_word;
# 17 "./arch/arm64/include/asm/compat.h" 2






# 1 "./include/linux/sched.h" 1
# 24 "./arch/arm64/include/asm/compat.h" 2
# 1 "./include/linux/sched/task_stack.h" 1
# 12 "./include/linux/sched/task_stack.h"
# 1 "./include/linux/sched.h" 1
# 13 "./include/linux/sched/task_stack.h" 2
# 1 "./include/uapi/linux/magic.h" 1
# 14 "./include/linux/sched/task_stack.h" 2
# 1 "./include/linux/refcount.h" 1
# 15 "./include/linux/sched/task_stack.h" 2




extern __typeof__(struct vm_struct *) per_task__stack_vm_area;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_struct *task_stack_vm_area(const struct task_struct *t)
{
 return (*((__typeof__(per_task__stack_vm_area) *)((t)->per_task_area + ((unsigned long)1400))));
}
# 35 "./include/linux/sched/task_stack.h"
extern __typeof__(refcount_t) per_task__stack_refcount;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *task_stack_page(const struct task_struct *task)
{
 return (*((__typeof__(per_task__stack) *)((task)->per_task_area + ((unsigned long)24))));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *end_of_stack(const struct task_struct *task)
{



 return (*((__typeof__(per_task__stack) *)((task)->per_task_area + ((unsigned long)24))));

}
# 89 "./include/linux/sched/task_stack.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *try_get_task_stack(struct task_struct *tsk)
{
 return refcount_inc_not_zero(&(*((__typeof__(per_task__stack_refcount) *)((tsk)->per_task_area + ((unsigned long)1408))))) ?
  task_stack_page(tsk) : ((void *)0);
}

extern void put_task_stack(struct task_struct *tsk);
# 108 "./include/linux/sched/task_stack.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int object_is_on_stack(const void *obj)
{
 void *stack = task_stack_page(get_current());

 return (obj >= stack) && (obj < (stack + ((((1UL))) << (14 + 0))));
}

extern void thread_stack_cache_init(void);
# 137 "./include/linux/sched/task_stack.h"
extern void set_task_stack_end_magic(struct task_struct *tsk);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & (((((1UL))) << (14 + 0))-sizeof(void*)));
}
# 25 "./arch/arm64/include/asm/compat.h" 2








typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u16 __compat_uid16_t;
typedef u16 __compat_gid16_t;
typedef u32 compat_dev_t;
typedef s32 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef __kernel_fsid_t compat_fsid_t;

struct compat_stat {




 compat_dev_t st_dev;

 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_ushort_t st_nlink;
 __compat_uid16_t st_uid;
 __compat_gid16_t st_gid;




 compat_dev_t st_rdev;

 compat_off_t st_size;
 compat_off_t st_blksize;
 compat_off_t st_blocks;
 old_time32_t st_atime;
 compat_ulong_t st_atime_nsec;
 old_time32_t st_mtime;
 compat_ulong_t st_mtime_nsec;
 old_time32_t st_ctime;
 compat_ulong_t st_ctime_nsec;
 compat_ulong_t __unused4[2];
};

struct compat_flock {
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;
};





struct compat_flock64 {
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;
};

struct compat_statfs {
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];
};
# 114 "./arch/arm64/include/asm/compat.h"
struct compat_ipc64_perm {
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;
};

struct compat_semid64_ds {
 struct compat_ipc64_perm sem_perm;
 compat_ulong_t sem_otime;
 compat_ulong_t sem_otime_high;
 compat_ulong_t sem_ctime;
 compat_ulong_t sem_ctime_high;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;
};

struct compat_msqid64_ds {
 struct compat_ipc64_perm msg_perm;
 compat_ulong_t msg_stime;
 compat_ulong_t msg_stime_high;
 compat_ulong_t msg_rtime;
 compat_ulong_t msg_rtime_high;
 compat_ulong_t msg_ctime;
 compat_ulong_t msg_ctime_high;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

struct compat_shmid64_ds {
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_ulong_t shm_atime;
 compat_ulong_t shm_atime_high;
 compat_ulong_t shm_dtime;
 compat_ulong_t shm_dtime_high;
 compat_ulong_t shm_ctime;
 compat_ulong_t shm_ctime_high;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_compat_task(void)
{
 return test_ti_thread_flag((&(*((__typeof__(per_task__ti) *)((get_current())->per_task_area + ((unsigned long)0))))), 22);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_compat_thread(struct thread_info *thread)
{
 return test_ti_thread_flag(thread, 22);
}
# 14 "./arch/arm64/include/asm/stat.h" 2





struct stat64 {
 compat_u64 st_dev;
 unsigned char __pad0[4];


 compat_ulong_t __st_ino;
 compat_uint_t st_mode;
 compat_uint_t st_nlink;

 compat_ulong_t st_uid;
 compat_ulong_t st_gid;

 compat_u64 st_rdev;
 unsigned char __pad3[4];

 compat_s64 st_size;
 compat_ulong_t st_blksize;
 compat_u64 st_blocks;

 compat_ulong_t st_atime;
 compat_ulong_t st_atime_nsec;

 compat_ulong_t st_mtime;
 compat_ulong_t st_mtime_nsec;

 compat_ulong_t st_ctime;
 compat_ulong_t st_ctime_nsec;

 compat_u64 st_ino;
};
# 7 "./include/linux/stat.h" 2
# 1 "./include/uapi/linux/stat.h" 1
# 56 "./include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "./include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 8 "./include/linux/stat.h" 2
# 22 "./include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 41 "./include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
 u64 mnt_id;
};
# 9 "./include/linux/fs_api.h" 2
# 1 "./include/linux/rwsem_api.h" 1
# 15 "./include/linux/rwsem_api.h"
extern int rwsem_is_locked(struct rw_semaphore *sem);

extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 27 "./include/linux/rwsem_api.h"
extern int rwsem_is_contended(struct rw_semaphore *sem);
# 63 "./include/linux/rwsem_api.h"
extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_interruptible(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 10 "./include/linux/fs_api.h" 2
# 1 "./include/linux/kdev_t.h" 1






# 1 "./include/uapi/linux/kdev_t.h" 1
# 8 "./include/linux/kdev_t.h" 2
# 26 "./include/linux/kdev_t.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 11 "./include/linux/fs_api.h" 2
# 1 "./include/linux/dcache.h" 1





# 1 "./include/linux/list_bl_types.h" 1
# 33 "./include/linux/list_bl_types.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}
# 7 "./include/linux/dcache.h" 2
# 1 "./include/linux/seqlock.h" 1
# 8 "./include/linux/dcache.h" 2
# 1 "./include/linux/lockref.h" 1
# 18 "./include/linux/lockref.h"
# 1 "./include/linux/spinlock.h" 1
# 19 "./include/linux/lockref.h" 2






struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 9 "./include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 41 "./include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;
extern const struct qstr dotdot_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 84 "./include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_spinlock_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct __attribute__((__aligned__((1 << (6))))) dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
};
# 218 "./include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);

extern struct dentry *d_find_alias_rcu(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(const struct dentry *, char *, int);
extern char *dentry_path(const struct dentry *, char *, int);
# 310 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 333 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

extern void dont_mount(struct dentry *dentry);

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

extern void d_lookup_done(struct dentry *dentry);

extern void dput(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_flags_negative(unsigned flags)
{
 return (flags & 0x00700000) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 455 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 473 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}
# 497 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 509 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_300(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dentry->d_inode) == sizeof(char) || sizeof(dentry->d_inode) == sizeof(short) || sizeof(dentry->d_inode) == sizeof(int) || sizeof(dentry->d_inode) == sizeof(long)) || sizeof(dentry->d_inode) == sizeof(long long))) __compiletime_assert_300(); } while (0); (*(const volatile typeof( _Generic((dentry->d_inode), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dentry->d_inode))) *)&(dentry->d_inode)); });
}
# 524 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 541 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 556 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 572 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 12 "./include/linux/fs_api.h" 2
# 1 "./include/linux/mount.h" 1
# 15 "./include/linux/mount.h"
struct super_block;
struct vfsmount;
struct dentry;
struct mnt_namespace;
struct fs_context;
# 66 "./include/linux/mount.h"
struct vfsmount {
 struct dentry *mnt_root;
 struct super_block *mnt_sb;
 int mnt_flags;
 struct user_namespace *mnt_userns;
} ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *mnt_user_ns(const struct vfsmount *mnt)
{

 return ({ union { typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) __val; char __c[1]; } __u; typeof(&mnt->mnt_userns) __p = (&mnt->mnt_userns); do { __attribute__((__noreturn__)) extern void __compiletime_assert_301(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)))) __compiletime_assert_301(); } while (0); kasan_check_read(__p, sizeof(*&mnt->mnt_userns)); switch (sizeof(*&mnt->mnt_userns)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*__p) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*__p) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*__p) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*__p) : "memory"); break; } (typeof(*&mnt->mnt_userns))__u.__val; });
}

struct file;
struct path;

extern int mnt_want_write(struct vfsmount *mnt);
extern int mnt_want_write_file(struct file *file);
extern void mnt_drop_write(struct vfsmount *mnt);
extern void mnt_drop_write_file(struct file *file);
extern void mntput(struct vfsmount *mnt);
extern struct vfsmount *mntget(struct vfsmount *mnt);
extern struct vfsmount *mnt_clone_internal(const struct path *path);
extern bool __mnt_is_readonly(struct vfsmount *mnt);
extern bool mnt_may_suid(struct vfsmount *mnt);

struct path;
extern struct vfsmount *clone_private_mount(const struct path *path);
extern int __mnt_want_write(struct vfsmount *);
extern void __mnt_drop_write(struct vfsmount *);

struct file_system_type;
extern struct vfsmount *fc_mount(struct fs_context *fc);
extern struct vfsmount *vfs_create_mount(struct fs_context *fc);
extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
          int flags, const char *name,
          void *data);
extern struct vfsmount *vfs_submount(const struct dentry *mountpoint,
         struct file_system_type *type,
         const char *name, void *data);

extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
extern void mark_mounts_for_expiry(struct list_head *mounts);

extern dev_t name_to_dev_t(const char *name);

extern unsigned int sysctl_mount_max;

extern bool path_is_mountpoint(const struct path *path);

extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
# 13 "./include/linux/fs_api.h" 2



extern void inode_init(void);
extern void inode_init_early(void);
extern void files_init(void);
extern void files_maxfiles_init(void);

extern unsigned long get_max_files(void);




int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i_mmap_trylock_write(struct address_space *mapping)
{
 return down_write_trylock(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_write_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_302(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(char) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(short) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(int) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long)) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long long))) __compiletime_assert_302(); } while (0); (*(const volatile typeof( _Generic(((&mapping->i_mmap.rb_root)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&mapping->i_mmap.rb_root)->rb_node))) *)&((&mapping->i_mmap.rb_root)->rb_node)); }) == ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}

struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock(struct address_space *mapping)
{
 down_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock(struct address_space *mapping)
{
 up_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock_shared(struct address_space *mapping)
{
 down_read(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_invalidate_trylock_shared(
     struct address_space *mapping)
{
 return down_read_trylock(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock_shared(
     struct address_space *mapping)
{
 up_read(&mapping->invalidate_lock);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);

void filemap_invalidate_lock_two(struct address_space *mapping1,
     struct address_space *mapping2);
void filemap_invalidate_unlock_two(struct address_space *mapping1,
       struct address_space *mapping2);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 211 "./include/linux/fs_api.h"
 inode->i_size = i_size;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);




extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);

struct notifier_block;
extern int lease_register_notifier(struct notifier_block *);
extern void lease_unregister_notifier(struct notifier_block *);

struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 428 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}


extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 467 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_into_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return make_kuid(mnt_userns, __kuid_val(kuid));
}
# 481 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_into_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return make_kgid(mnt_userns, __kgid_val(kgid));
}
# 495 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t i_uid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kuid_into_mnt(mnt_userns, inode->i_uid);
}
# 509 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t i_gid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kgid_into_mnt(mnt_userns, inode->i_gid);
}
# 523 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_from_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return (kuid_t){ from_kuid(mnt_userns, kuid) };
}
# 537 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_from_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return (kgid_t){ from_kgid(mnt_userns, kgid) };
}
# 555 "./include/linux/fs_api.h"
extern kuid_t mapped_fsuid(struct user_namespace *mnt_userns);
# 569 "./include/linux/fs_api.h"
extern kgid_t mapped_fsgid(struct user_namespace *mnt_userns);
# 579 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsuid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_uid = mapped_fsuid(mnt_userns);
}
# 593 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsgid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_gid = mapped_fsgid(mnt_userns);
}

extern struct timespec64 current_time(struct inode *inode);

bool inode_owner_or_capable(struct user_namespace *mnt_userns,
       const struct inode *inode);




int vfs_create(struct user_namespace *, struct inode *,
        struct dentry *, umode_t, bool);
int vfs_mkdir(struct user_namespace *, struct inode *,
       struct dentry *, umode_t);
int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *,
              umode_t, dev_t);
int vfs_symlink(struct user_namespace *, struct inode *,
  struct dentry *, const char *);
int vfs_link(struct dentry *, struct user_namespace *, struct inode *,
      struct dentry *, struct inode **);
int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *,
        struct inode **);

int vfs_rename(struct renamedata *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_whiteout(struct user_namespace *mnt_userns,
          struct inode *dir, struct dentry *dentry)
{
 return vfs_mknod(mnt_userns, dir, dentry, 0020000 | 0,
    0);
}

struct dentry *vfs_tmpfile(struct user_namespace *mnt_userns,
      struct dentry *dentry, umode_t mode, int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

int vfs_fchown(struct file *file, uid_t user, gid_t group);
int vfs_fchmod(struct file *file, umode_t mode);
int vfs_utimes(const struct path *path, struct timespec64 *times);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);


extern long compat_ptr_ioctl(struct file *file, unsigned int cmd,
     unsigned long arg);







void inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode,
        const struct inode *dir, umode_t mode);
extern bool may_open_dev(const struct path *path);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool HAS_UNMAPPED_ID(struct user_namespace *mnt_userns,
       struct inode *inode)
{
 return !uid_valid(i_uid_into_mnt(mnt_userns, inode)) ||
        !gid_valid(i_gid_into_mnt(mnt_userns, inode));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

extern void init_sync_kiocb(struct kiocb *kiocb, struct file *filp);
extern void kiocb_clone(struct kiocb *kiocb, struct kiocb *kiocb_src, struct file *filp);

extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}
# 745 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_dirtytime_only(struct inode *inode)
{
 return (inode->i_state & ((1 << 11) | (1 << 3) |
      (1 << 5) | (1 << 4))) == (1 << 11);
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
int inode_update_time(struct inode *inode, struct timespec64 *time, int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode_metadata(struct inode *inode, int wait);



extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 829 "./include/linux/fs_api.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_lease(struct inode *inode, unsigned int mode)
{






 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg(struct inode *inode, unsigned int mode)
{






 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_layout(struct inode *inode, bool wait)
{
 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 952 "./include/linux/fs_api.h"
_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *file_mnt_user_ns(struct file *file)
{
 return mnt_user_ns(file->f_path.mnt);
}
extern long vfs_truncate(const struct path *, loff_t);
int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
  unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(const struct path *,
       const char *, int, umode_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_open_root_mnt(struct vfsmount *mnt,
       const char *name, int flags, umode_t mode)
{
 return file_open_root(&(struct path){.mnt = mnt, .dentry = mnt->mnt_root},
         name, flags, mode);
}
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname_uflags(const char *, int);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);


extern void vfs_caches_init_early(void);
extern void vfs_caches_init(void);

extern struct kmem_cache *names_cachep;




extern struct super_block *blockdev_superblock;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return 1 && sb == blockdev_superblock;
}

void emergency_thaw_all(void);
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;

extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}

extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

void invalidate_mapping_pagevec(struct address_space *mapping,
    unsigned long start, unsigned long end,
    unsigned long *nr_pagevec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern bool filemap_range_needs_writeback(struct address_space *,
       loff_t lstart, loff_t lend);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);
int filemap_fdatawrite_wbc(struct address_space *mapping,
      struct writeback_control *wbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_write_and_wait(struct address_space *mapping)
{
 return filemap_write_and_wait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 1116 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 1133 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 1146 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000002)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000004)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);


extern int bmap(struct inode *inode, sector_t *block);







int notify_change(struct user_namespace *, struct dentry *,
    struct iattr *, struct inode **);
int inode_permission(struct user_namespace *, struct inode *, int);
int generic_permission(struct user_namespace *, struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_permission(struct file *file, int mask)
{
 return inode_permission(file_mnt_user_ns(file),
    file_inode(file), mask);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_permission(const struct path *path, int mask)
{
 return inode_permission(mnt_user_ns(path->mnt),
    d_inode(path->dentry), mask);
}
int __check_sticky(struct user_namespace *mnt_userns, struct inode *dir,
     struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_wrong_type(const struct inode *inode, umode_t mode)
{
 return (inode->i_mode ^ mode) & 00170000;
}

extern int do_pipe_flags(int *, int);

extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
ssize_t __kernel_read(struct file *file, void *buf, size_t count, loff_t *pos);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);


extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}
extern void d_mark_dontcache(struct inode *inode);

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern struct inode *find_inode_rcu(struct super_block *, unsigned long,
        int (*)(struct inode *, void *), void *);
extern struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);
# 1290 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zero_ino(ino_t ino)
{
 return (u32)ino == 0;
}

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);
extern void inode_add_lru(struct inode *inode);

extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_write_check_limits(struct file *file, loff_t pos,
  loff_t *count);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
ssize_t filemap_read(struct kiocb *iocb, struct iov_iter *to,
  ssize_t already_read);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iocb_iter_read(struct file *file, struct kiocb *iocb,
      struct iov_iter *iter);
ssize_t vfs_iocb_iter_write(struct file *file, struct kiocb *iocb,
       struct iov_iter *iter);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
void generic_fill_statx_attr(struct inode *inode, struct kstat *stat);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

int vfs_fstatat(int dfd, const char *filename, struct kstat *stat,
  int flags);
int vfs_fstat(int fd, struct kstat *stat);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_fstatat(-100, filename, stat, 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_fstatat(-100, name, stat, 0x100);
}

extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

struct block_device;

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct user_namespace *, struct dentry *,
     struct iattr *);
extern int simple_getattr(struct user_namespace *, const struct path *,
     struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename_exchange(struct inode *old_dir, struct dentry *old_dentry,
      struct inode *new_dir, struct dentry *new_dentry);
extern int simple_rename(struct user_namespace *, struct inode *,
    struct dentry *, struct inode *, struct dentry *,
    unsigned int);
extern void simple_recursive_removal(struct dentry *,
                              void (*callback)(struct dentry *));
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern const struct address_space_operations ram_aops;
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);

extern void generic_set_encrypted_ci_d_ops(struct dentry *dentry);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);
extern int buffer_migrate_page_norefs(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);





int may_setattr(struct user_namespace *mnt_userns, struct inode *inode,
  unsigned int ia_valid);
int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
void setattr_copy(struct user_namespace *, struct inode *inode,
    const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 int kiocb_flags = 0;


 do { __attribute__((__noreturn__)) extern void __compiletime_assert_303(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(__force int) RWF_SUPPORTED & IOCB_EVENTFD"))); if (!(!(( int) ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)) & (1 << 16)))) __compiletime_assert_303(); } while (0);

 if (!flags)
  return 0;
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  kiocb_flags |= (1 << 20);
 }
 kiocb_flags |= ( int) (flags & ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)));
 if (flags & (( __kernel_rwf_t)0x00000004))
  kiocb_flags |= ( int) (( __kernel_rwf_t)0x00000002);

 ki->ki_flags |= kiocb_flags;
 return 0;
}

extern ino_t parent_ino(struct dentry *dentry);







struct simple_transaction_argresp {
 ssize_t size;
 char data[];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 1599 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int list_bdev_fs_names(char *buf, size_t size);
# 1630 "./include/linux/fs_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_sticky(struct user_namespace *mnt_userns,
          struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(mnt_userns, dir, inode);
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);
extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
      int advice);
# 37 "net/core/neighbour.c" 2
# 1 "./include/linux/cpumask_api.h" 1
# 28 "./include/linux/cpumask_api.h"
extern atomic_t __num_online_cpus;

extern cpumask_t cpus_booted_once_mask;
# 106 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_first_bit(((srcp)->bits), ((unsigned int)256));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_last(const struct cpumask *srcp)
{
 return find_last_bit(((srcp)->bits), ((unsigned int)256));
}

unsigned int __attribute__((__pure__)) cpumask_next(int n, const struct cpumask *srcp);
# 131 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)256), n+1);
}

int __attribute__((__pure__)) cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int __attribute__((__pure__)) cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
int cpumask_any_and_distribute(const struct cpumask *src1p,
          const struct cpumask *src2p);
int cpumask_any_distribute(const struct cpumask *srcp);
# 170 "./include/linux/cpumask_api.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 222 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 arch___set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 arch___clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 255 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return arch_test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 269 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 283 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)256));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)256));
}
# 314 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)256));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)256));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)256));
}
# 357 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)256));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)256));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)256));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_or_equal(const struct cpumask *src1p,
        const struct cpumask *src2p,
        const struct cpumask *src3p)
{
 return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
          ((src3p)->bits), ((unsigned int)256));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)256));
}
# 422 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)256));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)256));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)256));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)256));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)256));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)256));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)256));
}
# 533 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)256));
}
# 547 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)256));
}
# 561 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parse(buf, (~0U), ((dstp)->bits), ((unsigned int)256));
}
# 573 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)256));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_size(void)
{
 return (((((unsigned int)256)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 609 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}







void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 256);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

void set_cpu_online(unsigned int cpu, bool online);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_dying(unsigned int cpu, bool dying)
{
 if (dying)
  cpumask_set_cpu(cpu, &__cpu_dying_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_dying_mask);
}
# 710 "./include/linux/cpumask_api.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 729 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int num_online_cpus(void)
{
 return atomic_read(&__num_online_cpus);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_online(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_online_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_possible(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_possible_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_present(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_present_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_active(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_active_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_dying(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_dying_mask));
}
# 823 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 846 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_bitmask_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_bitmask_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count) - 1;
}
# 861 "./include/linux/cpumask_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_list_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_list_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count) - 1;
}
# 38 "net/core/neighbour.c" 2

# 1 "./include/linux/sched/cond_resched.h" 1
# 10 "./include/linux/sched/cond_resched.h"
# 1 "./include/linux/sched.h" 1
# 11 "./include/linux/sched/cond_resched.h" 2
# 1 "./include/linux/spinlock.h" 1
# 12 "./include/linux/sched/cond_resched.h" 2
# 1 "./include/linux/seqlock.h" 1
# 13 "./include/linux/sched/cond_resched.h" 2
# 44 "./include/linux/sched/cond_resched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int _cond_resched(void) { return 0; }
# 53 "./include/linux/sched/cond_resched.h"
extern int __cond_resched_lock(spinlock_t *lock);
extern int __cond_resched_rwlock_read(rwlock_t *lock);
extern int __cond_resched_rwlock_write(rwlock_t *lock);
# 91 "./include/linux/sched/cond_resched.h"
extern void __cond_resched_rcu(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cond_resched_rcu(void)
{



}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int spin_needbreak(spinlock_t *lock)
{

 return spin_is_contended(lock);



}
# 122 "./include/linux/sched/cond_resched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwlock_needbreak(rwlock_t *lock)
{

 return queued_rwlock_is_contended(&(lock)->raw_lock);



}
# 40 "net/core/neighbour.c" 2
# 1 "./include/linux/slab.h" 1
# 22 "./include/linux/slab.h"
# 1 "./arch/arm64/include/asm/page_types.h" 1
# 23 "./include/linux/slab.h" 2
# 144 "./include/linux/slab.h"
struct mem_cgroup;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init(void);
bool slab_is_available(void);

struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
   unsigned int align, slab_flags_t flags,
   void (*ctor)(void *));
struct kmem_cache *kmem_cache_create_usercopy(const char *name,
   unsigned int size, unsigned int align,
   slab_flags_t flags,
   unsigned int useroffset, unsigned int usersize,
   void (*ctor)(void *));
void kmem_cache_destroy(struct kmem_cache *s);
int kmem_cache_shrink(struct kmem_cache *s);
# 188 "./include/linux/slab.h"
void * __attribute__((__warn_unused_result__)) krealloc(const void *objp, size_t new_size, gfp_t flags) __attribute__((__alloc_size__(2))) __attribute__((__malloc__));
void kfree(const void *objp);
void kfree_sensitive(const void *objp);
size_t __ksize(const void *objp);
size_t ksize(const void *objp);

bool kmem_valid_obj(void *object);
void kmem_dump_obj(void *object);



void __check_heap_object(const void *ptr, unsigned long n, struct page *page,
   bool to_user);
# 317 "./include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,






 KMALLOC_CGROUP,

 KMALLOC_RECLAIM,

 KMALLOC_DMA,

 NR_KMALLOC_TYPES
};


extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][(12 + 1) + 1];
# 346 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{




 if (__builtin_expect(!!((flags & ((( gfp_t)0x10u) | (1 ? (( gfp_t)0x01u) : 0) | (1 ? (( gfp_t)0x400000u) : 0))) == 0), 1))
  return KMALLOC_NORMAL;
# 362 "./include/linux/slab.h"
 if (1 && (flags & (( gfp_t)0x01u)))
  return KMALLOC_DMA;
 if (!1 || (flags & (( gfp_t)0x10u)))
  return KMALLOC_RECLAIM;
 else
  return KMALLOC_CGROUP;
}
# 383 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int __kmalloc_index(size_t size,
          bool size_is_constant)
{
 if (!size)
  return 0;

 if (size <= (128))
  return ( __builtin_constant_p((128)) ? (((128)) < 2 ? 0 : 63 - __builtin_clzll((128))) : (sizeof((128)) <= 4) ? __ilog2_u32((128)) : __ilog2_u64((128)) );

 if ((128) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((128) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;

 if ((0 || 150000 >= 110000)
     && !0 && size_is_constant)
  do { __attribute__((__noreturn__)) extern void __compiletime_assert_304(void) __attribute__((__error__("unexpected size in kmalloc_index()"))); if (!(!(1))) __compiletime_assert_304(); } while (0);
 else
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/slab.h\"; .popsection; .long 14472b - 14470b; .short 424; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);


 return -1;
}



void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__((128)))) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *s, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *s, void *objp);
# 443 "./include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *s, size_t size, void **p);
int kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size, void **p);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}


void *__kmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__assume_aligned__((128))))
        __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node) __attribute__((__assume_aligned__(__alignof__(unsigned long long))))
          __attribute__((__malloc__));
# 489 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(3))) __attribute__((__malloc__)) void *kmem_cache_alloc_trace(struct kmem_cache *s,
            gfp_t flags, size_t size)
{
 void *ret = kmem_cache_alloc(s, flags);

 ret = kasan_kmalloc(s, ret, size, flags);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmem_cache_alloc_node_trace(struct kmem_cache *s, gfp_t gfpflags,
        int node, size_t size)
{
 void *ret = kmem_cache_alloc_node(s, gfpflags, node);

 ret = kasan_kmalloc(s, ret, size, gfpflags);
 return ret;
}


extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << 12))))
          __attribute__((__alloc_size__(1))) __attribute__((__malloc__));





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc_order_trace(size_t size, gfp_t flags,
         unsigned int order)
{
 return kmalloc_order(size, flags, order);
}


extern void *kmalloc_large(size_t size, gfp_t flags);
# 578 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << (12 + 1)))
   return kmalloc_large(size, flags);

  index = __kmalloc_index(size, true);

  if (!index)
   return ((void *)16);

  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (12 + 1))) {
  unsigned int i = __kmalloc_index(size, true);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(bytes, flags);
 return __kmalloc(bytes, flags);
}
# 642 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(2, 3))) __attribute__((__malloc__)) void * __attribute__((__warn_unused_result__)) krealloc_array(void *p,
            size_t new_n,
            size_t new_size,
            gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return krealloc(p, bytes, flags);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
}
# 674 "./include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)
       __attribute__((__alloc_size__(1))) __attribute__((__malloc__));



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
         int node)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc_node(bytes, flags, node);
 return __kmalloc_node(bytes, flags, node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1, 2))) __attribute__((__malloc__)) void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
{
 return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
}



extern void *__kmalloc_node_track_caller(size_t size, gfp_t flags, int node,
      unsigned long caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
# 714 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x100u));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__alloc_size__(1))) __attribute__((__malloc__)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
}

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init_late(void);
# 41 "net/core/neighbour.c" 2
# 1 "./include/linux/kmemleak.h" 1
# 13 "./include/linux/kmemleak.h"
# 1 "./include/linux/vmalloc.h" 1




# 1 "./include/linux/spinlock.h" 1
# 6 "./include/linux/vmalloc.h" 2


# 1 "./include/linux/llist.h" 1
# 9 "./include/linux/vmalloc.h" 2

# 1 "./include/linux/rbtree.h" 1
# 11 "./include/linux/vmalloc.h" 2


# 1 "./arch/arm64/include/asm/vmalloc.h" 1




# 1 "./arch/arm64/include/asm/pgtable.h" 1








# 1 "./arch/arm64/include/asm/proc-fns.h" 1
# 16 "./arch/arm64/include/asm/proc-fns.h"
struct cpu_suspend_ctx;

extern void cpu_do_idle(void);
extern void cpu_do_suspend(struct cpu_suspend_ctx *ptr);
extern u64 cpu_do_resume(phys_addr_t ptr, u64 idmap_ttbr);
# 10 "./arch/arm64/include/asm/pgtable.h" 2





# 1 "./arch/arm64/include/asm/tlbflush.h" 1
# 16 "./arch/arm64/include/asm/tlbflush.h"
# 1 "./include/linux/sched.h" 1
# 17 "./arch/arm64/include/asm/tlbflush.h" 2
# 77 "./arch/arm64/include/asm/tlbflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_trans_granule(void)
{
 switch (((1UL) << 12)) {
 case 0x00001000:
  return 1;
 case 0x00004000:
  return 2;
 case 0x00010000:
  return 3;
 default:
  return 0;
 }
}
# 231 "./arch/arm64/include/asm/tlbflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_tlb_all(void)
{
 asm volatile("dsb " "nshst" : : : "memory");
 asm (".arch " "armv8.5-a" "\n" "tlbi " "vmalle1" "\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vmalle1" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : );
 asm volatile("dsb " "nsh" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_all(void)
{
 asm volatile("dsb " "ishst" : : : "memory");
 asm (".arch " "armv8.5-a" "\n" "tlbi " "vmalle1is" "\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vmalle1is" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : );
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_mm(struct mm_struct *mm)
{
 unsigned long asid;

 asm volatile("dsb " "ishst" : : : "memory");
 asid = ({ unsigned long __ta = (0) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43))))); __ta |= (unsigned long)((atomic64_read(&(mm)->context.id) & 0xffff)) << 48; __ta; });
 asm (".arch " "armv8.5-a" "\n" "tlbi " "aside1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "aside1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (asid));
 do { if (arm64_kernel_unmapped_at_el0()) asm (".arch " "armv8.5-a" "\n" "tlbi " "aside1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "aside1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((asid) | ((((1UL))) << 48))); } while (0);
 asm volatile("dsb " "ish" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_page_nosync(struct vm_area_struct *vma,
      unsigned long uaddr)
{
 unsigned long addr;

 asm volatile("dsb " "ishst" : : : "memory");
 addr = ({ unsigned long __ta = (uaddr) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43))))); __ta |= (unsigned long)((atomic64_read(&(vma->vm_mm)->context.id) & 0xffff)) << 48; __ta; });
 asm (".arch " "armv8.5-a" "\n" "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
 do { if (arm64_kernel_unmapped_at_el0()) asm (".arch " "armv8.5-a" "\n" "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_page(struct vm_area_struct *vma,
      unsigned long uaddr)
{
 flush_tlb_page_nosync(vma, uaddr);
 asm volatile("dsb " "ish" : : : "memory");
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __flush_tlb_range(struct vm_area_struct *vma,
         unsigned long start, unsigned long end,
         unsigned long stride, bool last_level,
         int tlb_level)
{
 int num = 0;
 int scale = 0;
 unsigned long asid, addr, pages;

 start = ((start) & ~((__typeof__(start))((stride)-1)));
 end = ((((end)-1) | ((__typeof__(end))((stride)-1)))+1);
 pages = (end - start) >> 12;







 if ((!system_supports_tlb_range() &&
      (end - start) >= ((1 << (12 - 3)) * stride)) ||
     pages >= ((unsigned long)((31) + 1) << (5 * (3) + 1))) {
  flush_tlb_mm(vma->vm_mm);
  return;
 }

 asm volatile("dsb " "ishst" : : : "memory");
 asid = (atomic64_read(&(vma->vm_mm)->context.id) & 0xffff);
# 329 "./arch/arm64/include/asm/tlbflush.h"
 while (pages > 0) {
  if (!system_supports_tlb_range() ||
      pages % 2 == 1) {
   addr = ({ unsigned long __ta = (start) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43))))); __ta |= (unsigned long)(asid) << 48; __ta; });
   if (last_level) {
    do { u64 arg = addr; if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))); arg |= ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_305(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))))))) __compiletime_assert_305(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_306(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) == 0))) __compiletime_assert_306(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_307(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(ttl) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (ttl) : 0))) __compiletime_assert_307(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_308(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_308(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_309(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0))) __compiletime_assert_309(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))); }); } asm (".arch " "armv8.5-a" "\n" "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0);
    do { if (arm64_kernel_unmapped_at_el0()) do { u64 arg = (addr | ((((1UL))) << 48)); if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))); arg |= ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_310(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))))))) __compiletime_assert_310(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_311(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) == 0))) __compiletime_assert_311(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_312(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(ttl) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (ttl) : 0))) __compiletime_assert_312(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_313(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_313(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_314(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0))) __compiletime_assert_314(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))); }); } asm (".arch " "armv8.5-a" "\n" "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0); } while (0);
   } else {
    do { u64 arg = addr; if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))); arg |= ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_315(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))))))) __compiletime_assert_315(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_316(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) == 0))) __compiletime_assert_316(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_317(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(ttl) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (ttl) : 0))) __compiletime_assert_317(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_318(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_318(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_319(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0))) __compiletime_assert_319(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))); }); } asm (".arch " "armv8.5-a" "\n" "tlbi " "vae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0);
    do { if (arm64_kernel_unmapped_at_el0()) do { u64 arg = (addr | ((((1UL))) << 48)); if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))); arg |= ({ ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_320(void) __attribute__((__error__("FIELD_PREP: " "mask is not constant"))); if (!(!(!__builtin_constant_p(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47))))))))) __compiletime_assert_320(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_321(void) __attribute__((__error__("FIELD_PREP: " "mask is zero"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) == 0))) __compiletime_assert_321(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_322(void) __attribute__((__error__("FIELD_PREP: " "value too large for the field"))); if (!(!(__builtin_constant_p(ttl) ? ~((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) >> (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (ttl) : 0))) __compiletime_assert_322(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_323(void) __attribute__((__error__("FIELD_PREP: " "type of reg too small for mask"))); if (!(!((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) > (typeof(0ULL))~0ull))) __compiletime_assert_323(); } while (0); do { __attribute__((__noreturn__)) extern void __compiletime_assert_324(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0"))); if (!(!((((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) & (((((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) + (1ULL << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1))) - 1)) != 0))) __compiletime_assert_324(); } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (64 - 1 - (47)))))); }); } asm (".arch " "armv8.5-a" "\n" "tlbi " "vae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0); } while (0);
   }
   start += stride;
   pages -= stride >> 12;
   continue;
  }

  num = ((((pages) >> (5 * (scale) + 1)) & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (4)) * 0l)) : (int *)8))), (0) > (4), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (4)))))) - 1);
  if (num >= 0) {
   addr = ({ unsigned long __ta = (start) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (36)) * 0l)) : (int *)8))), (0) > (36), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (36))))); __ta |= (unsigned long)(tlb_level) << 37; __ta |= (unsigned long)(num) << 39; __ta |= (unsigned long)(scale) << 44; __ta |= get_trans_granule() << 46; __ta |= (unsigned long)(asid) << 48; __ta; });

   if (last_level) {
    asm (".arch " "armv8.5-a" "\n" "tlbi " "rvale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
    do { if (arm64_kernel_unmapped_at_el0()) asm (".arch " "armv8.5-a" "\n" "tlbi " "rvale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
   } else {
    asm (".arch " "armv8.5-a" "\n" "tlbi " "rvae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
    do { if (arm64_kernel_unmapped_at_el0()) asm (".arch " "armv8.5-a" "\n" "tlbi " "rvae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
   }
   start += ((unsigned long)((num) + 1) << (5 * (scale) + 1)) << 12;
   pages -= ((unsigned long)((num) + 1) << (5 * (scale) + 1));
  }
  scale++;
 }
 asm volatile("dsb " "ish" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_range(struct vm_area_struct *vma,
       unsigned long start, unsigned long end)
{





 __flush_tlb_range(vma, start, end, ((1UL) << 12), false, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_kernel_range(unsigned long start, unsigned long end)
{
 unsigned long addr;

 if ((end - start) > ((1 << (12 - 3)) * ((1UL) << 12))) {
  flush_tlb_all();
  return;
 }

 start = ({ unsigned long __ta = (start) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43))))); __ta |= (unsigned long)(0) << 48; __ta; });
 end = ({ unsigned long __ta = (end) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43))))); __ta |= (unsigned long)(0) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 for (addr = start; addr < end; addr += 1 << (12 - 12))
  asm (".arch " "armv8.5-a" "\n" "tlbi " "vaale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vaale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __flush_tlb_kernel_pgtable(unsigned long kaddr)
{
 unsigned long addr = ({ unsigned long __ta = (kaddr) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43))))); __ta |= (unsigned long)(0) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 asm (".arch " "armv8.5-a" "\n" "tlbi " "vaae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "64" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vaae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}
# 16 "./arch/arm64/include/asm/pgtable.h" 2




# 1 "./arch/arm64/include/asm/fixmap.h" 1
# 21 "./arch/arm64/include/asm/fixmap.h"
# 1 "./arch/arm64/include/asm/boot.h" 1
# 22 "./arch/arm64/include/asm/fixmap.h" 2
# 35 "./arch/arm64/include/asm/fixmap.h"
enum fixed_addresses {
 FIX_HOLE,
# 48 "./arch/arm64/include/asm/fixmap.h"
 FIX_FDT_END,
 FIX_FDT = FIX_FDT_END + (0x00200000 + 0x00200000) / ((1UL) << 12) - 1,

 FIX_EARLYCON_MEM_BASE,
 FIX_TEXT_POKE0,



 FIX_APEI_GHES_IRQ,
 FIX_APEI_GHES_SEA,







 FIX_ENTRY_TRAMP_DATA,
 FIX_ENTRY_TRAMP_TEXT,


 __end_of_permanent_fixed_addresses,
# 79 "./arch/arm64/include/asm/fixmap.h"
 FIX_BTMAP_END = __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + ((0x00040000 / ((1UL) << 12)) * 7) - 1,





 FIX_PTE,
 FIX_PMD,
 FIX_PUD,
 FIX_PGD,

 __end_of_fixed_addresses
};






void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) early_fixmap_init(void);






extern void __set_fixmap(enum fixed_addresses idx, phys_addr_t phys, pgprot_t prot);

# 1 "./include/asm-generic/fixmap.h" 1
# 29 "./include/asm-generic/fixmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long fix_to_virt(const unsigned int idx)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_325(void) __attribute__((__error__("BUILD_BUG_ON failed: " "idx >= __end_of_fixed_addresses"))); if (!(!(idx >= __end_of_fixed_addresses))) __compiletime_assert_325(); } while (0);
 return (((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) - ((idx) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long virt_to_fix(const unsigned long vaddr)
{
 do { if (__builtin_expect(!!(vaddr >= ((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) || vaddr < (((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) - (__end_of_permanent_fixed_addresses << 12))), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/asm-generic/fixmap.h\"; .popsection; .long 14472b - 14470b; .short 37; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return ((((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}
# 109 "./arch/arm64/include/asm/fixmap.h" 2
# 21 "./arch/arm64/include/asm/pgtable.h" 2


# 1 "./include/linux/sched.h" 1
# 24 "./arch/arm64/include/asm/pgtable.h" 2
# 47 "./arch/arm64/include/asm/pgtable.h"
extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)];
# 139 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t clear_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) &= ~((prot).pgprot);
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t set_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) |= ((prot).pgprot);
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t clear_pmd_bit(pmd_t pmd, pgprot_t prot)
{
 ((pmd).pmd) &= ~((prot).pgprot);
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t set_pmd_bit(pmd_t pmd, pgprot_t prot)
{
 ((pmd).pmd) |= ((prot).pgprot);
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkwrite(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkclean(pte_t pte)
{
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdirty(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));

 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))))
  pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_wrprotect(pte_t pte)
{




 if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
  pte = pte_mkdirty(pte);

 pte = clear_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkold(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkyoung(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkspecial(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 56)) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkcont(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(3)) << 0)) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mknoncont(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkpresent(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 0)) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkcont(pmd_t pmd)
{
 return ((pmd_t) { (((pmd).pmd) | (((pmdval_t)(1)) << 52)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdevmap(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 57) | (((pteval_t)(1)) << 56)) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte(pte_t *ptep, pte_t pte)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_326(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_326(); } while (0); do { *(volatile typeof(*ptep) *)&(*ptep) = (pte); } while (0); } while (0);





 if (((((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 54))) == ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 54)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

extern void __sync_icache_dcache(pte_t pteval);
# 275 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __check_racy_pte_update(struct mm_struct *mm, pte_t *ptep,
        pte_t pte)
{
 pte_t old_pte;

 if (!0)
  return;

 old_pte = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_327(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_327(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });

 if (!(!!(((old_pte).pte) & (((pteval_t)(1)) << 0))) || !(!!(((pte).pte) & (((pteval_t)(1)) << 0))))
  return;
 if (mm != get_current()->active_mm && atomic_read(&mm->mm_users) <= 1)
  return;






 ((void)(sizeof(( long)(!(!!(((pte).pte) & (((pteval_t)(1)) << 10)))))));


 ((void)(sizeof(( long)((!!(((old_pte).pte) & ((((pteval_t)(1)) << 51)))) && !((!!(((pte).pte) & (((pteval_t)(1)) << 55))) || ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))))));


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))) && (!(((pte).pte) & (((pteval_t)(1)) << 54))) && !(!!(((pte).pte) & (((pteval_t)(1)) << 56))))
  __sync_icache_dcache(pte);







 if (system_supports_mte() && (((((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 6))) == ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 6))) && (!(false) || (!!(((pte).pte) & ((((pteval_t)(1)) << 51)))))) &&
     !(!!(((pte).pte) & (((pteval_t)(1)) << 56)))) {
  pte_t old_pte = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_328(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_328(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });







  if (((((pte).pte) & (((pteval_t)(7)) << 2)) == (((pteval_t)((1))) << 2)) || (!(!((old_pte).pte)) && !(!!(((old_pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58))))))
   mte_sync_tags(old_pte, pte);
 }

 __check_racy_pte_update(mm, ptep, pte);

 set_pte(ptep, pte);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pgd_pte(pgd_t pgd)
{
 return ((pte_t) { (((pgd).pgd)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t p4d_pte(p4d_t p4d)
{
 return ((pte_t) { (((((p4d).pgd).pgd))) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pud_pte(pud_t pud)
{
 return ((pte_t) { (((pud).pud)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t pte_pud(pte_t pte)
{
 return ((pud_t) { (((pte).pte)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pud_pmd(pud_t pud)
{
 return ((pmd_t) { (((pud).pud)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pmd_pte(pmd_t pmd)
{
 return ((pte_t) { (((pmd).pmd)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pte_pmd(pte_t pte)
{
 return ((pmd_t) { (((pte).pte)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t mk_pud_sect_prot(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(((pudval_t)(1)) << 1)) | (((pudval_t)(1)) << 0)) } );
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t mk_pmd_sect_prot(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(((pmdval_t)(1)) << 1)) | (((pmdval_t)(1)) << 0)) } );
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_protnone(pte_t pte)
{
 return (((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58))) == (((pteval_t)(1)) << 58);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_protnone(pmd_t pmd)
{
 return pte_protnone(pmd_pte(pmd));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_present(pmd_t pmd)
{
 return (!!(((pmd_pte(pmd)).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))) || (!!(((pmd).pmd) & (((pteval_t)(1)) << 59)));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_huge(pmd_t pmd)
{
 return ((pmd).pmd) && pmd_present(pmd) && !(((pmd).pmd) & (((pmdval_t)(1)) << 1));
}
# 428 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkinvalid(pmd_t pmd)
{
 pmd = set_pmd_bit(pmd, ((pgprot_t) { ((((pteval_t)(1)) << 59)) } ));
 pmd = clear_pmd_bit(pmd, ((pgprot_t) { ((((pmdval_t)(1)) << 0)) } ));

 return pmd;
}
# 445 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkdevmap(pmd_t pmd)
{
 return pte_pmd(set_pte_bit(pmd_pte(pmd), ((pgprot_t) { ((((pteval_t)(1)) << 57)) } )));
}
# 507 "./arch/arm64/include/asm/pgtable.h"
struct file;
extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
         unsigned long size, pgprot_t vma_prot);
# 533 "./arch/arm64/include/asm/pgtable.h"
extern pgd_t init_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t init_pg_end[];
extern pgd_t swapper_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t idmap_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t idmap_pg_end[];
extern pgd_t tramp_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t reserved_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];

extern void set_swapper_pgd(pgd_t *pgdp, pgd_t pgd);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_swapper_pgdir(void *addr)
{
 return ((unsigned long)addr & (~(((1UL) << 12)-1))) ==
         ((unsigned long)swapper_pg_dir & (~(((1UL) << 12)-1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pmd(pmd_t *pmdp, pmd_t pmd)
{







 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_329(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pmdp) == sizeof(char) || sizeof(*pmdp) == sizeof(short) || sizeof(*pmdp) == sizeof(int) || sizeof(*pmdp) == sizeof(long)) || sizeof(*pmdp) == sizeof(long long))) __compiletime_assert_329(); } while (0); do { *(volatile typeof(*pmdp) *)&(*pmdp) = (pmd); } while (0); } while (0);

 if ((!!(((pmd_pte(pmd)).pte) & (((pteval_t)(1)) << 0)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, ((pmd_t) { (0) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t pmd_page_paddr(pmd_t pmd)
{
 return (((pmd_pte(pmd)).pte) & (((((pteval_t)(1)) << (48 - 12)) - 1) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long)((void *)((unsigned long)(((phys_addr_t)(pmd_page_paddr(pmd))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 610 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pud(pud_t *pudp, pud_t pud)
{







 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_330(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pudp) == sizeof(char) || sizeof(*pudp) == sizeof(short) || sizeof(*pudp) == sizeof(int) || sizeof(*pudp) == sizeof(long)) || sizeof(*pudp) == sizeof(long long))) __compiletime_assert_330(); } while (0); do { *(volatile typeof(*pudp) *)&(*pudp) = (pud); } while (0); } while (0);

 if ((!!(((pud_pte(pud)).pte) & (((pteval_t)(1)) << 0)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pud_clear(pud_t *pudp)
{
 set_pud(pudp, ((pud_t) { (0) } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t pud_page_paddr(pud_t pud)
{
 return (((pud_pte(pud)).pte) & (((((pteval_t)(1)) << (48 - 12)) - 1) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pud_pgtable(pud_t pud)
{
 return (pmd_t *)((void *)((unsigned long)(((phys_addr_t)(pud_page_paddr(pud))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 676 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_p4d(p4d_t *p4dp, p4d_t p4d)
{
 if (in_swapper_pgdir(p4dp)) {
  set_swapper_pgd((pgd_t *)p4dp, ((pgd_t) { (((((p4d).pgd).pgd))) } ));
  return;
 }

 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_331(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p4dp) == sizeof(char) || sizeof(*p4dp) == sizeof(short) || sizeof(*p4dp) == sizeof(int) || sizeof(*p4dp) == sizeof(long)) || sizeof(*p4dp) == sizeof(long long))) __compiletime_assert_331(); } while (0); do { *(volatile typeof(*p4dp) *)&(*p4dp) = (p4d); } while (0); } while (0);
 asm volatile("dsb " "ishst" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void p4d_clear(p4d_t *p4dp)
{
 set_p4d(p4dp, ((p4d_t) { ((pgd_t) { (0) } ) }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t p4d_page_paddr(p4d_t p4d)
{
 return (((p4d_pte(p4d)).pte) & (((((pteval_t)(1)) << (48 - 12)) - 1) << 12));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *p4d_pgtable(p4d_t p4d)
{
 return (pud_t *)((void *)((unsigned long)(((phys_addr_t)(p4d_page_paddr(p4d))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 735 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{




 const pteval_t mask = (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54) | (((pteval_t)(1)) << 7) |
         (((pteval_t)(1)) << 58) | (((pteval_t)(1)) << 0) | ((((pteval_t)(1)) << 51)) | (((pteval_t)(1)) << 50) |
         (((pteval_t)(7)) << 2);

 if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
  pte = pte_mkdirty(pte);
 ((pte).pte) = (((pte).pte) & ~mask) | (((newprot).pgprot) & mask);
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 return pte_pmd(pte_modify(pmd_pte(pmd), newprot));
}


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty)
{
 return ptep_set_access_flags(vma, address, (pte_t *)pmdp, pmd_pte(entry), dirty);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_devmap(pud_t pud)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_devmap(pgd_t pgd)
{
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ptep_test_and_clear_young(pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_332(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_332(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
 do {
  old_pte = pte;
  pte = pte_mkold(pte);
  ((pte).pte) = ({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __cmpxchg((__ai_ptr), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(__ai_ptr))); __ret; }); });

 } while (((pte).pte) != ((old_pte).pte));

 return (!!(((pte).pte) & (((pteval_t)(1)) << 10)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep)
{
 return __ptep_test_and_clear_young(ptep);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep)
{
 int young = ptep_test_and_clear_young(vma, address, ptep);

 if (young) {
# 822 "./arch/arm64/include/asm/pgtable.h"
  flush_tlb_page_nosync(vma, address);
 }

 return young;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp)
{
 return ptep_test_and_clear_young(vma, address, (pte_t *)pmdp);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear(struct mm_struct *mm,
           unsigned long address, pte_t *ptep)
{
 return ((pte_t) { (({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg((unsigned long)(0), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); })) } );
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,
         unsigned long address, pmd_t *pmdp)
{
 return pte_pmd(ptep_get_and_clear(mm, address, (pte_t *)pmdp));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_set_wrprotect(struct mm_struct *mm, unsigned long address, pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_333(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_333(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
 do {
  old_pte = pte;
  pte = pte_wrprotect(pte);
  ((pte).pte) = ({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __cmpxchg((__ai_ptr), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(__ai_ptr))); __ret; }); });

 } while (((pte).pte) != ((old_pte).pte));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pmd_t *pmdp)
{
 ptep_set_wrprotect(mm, address, (pte_t *)pmdp);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_establish(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp, pmd_t pmd)
{
 return ((pmd_t) { (({ typeof(&((*pmdp).pmd)) __ai_ptr = (&((*pmdp).pmd)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg((unsigned long)(((pmd).pmd)), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); })) } );
}
# 920 "./arch/arm64/include/asm/pgtable.h"
extern int kern_addr_valid(unsigned long addr);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_prepare_to_swap(struct page *page)
{
 if (system_supports_mte())
  return mte_save_tags(page);
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_page(int type, unsigned long offset)
{
 if (system_supports_mte())
  mte_invalidate_tags(type, offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_area(int type)
{
 if (system_supports_mte())
  mte_invalidate_tags_area(type);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_restore(swp_entry_t entry, struct page *page)
{
 if (system_supports_mte() && mte_restore_tags(entry, page))
  set_bit(PG_arch_2, &page->flags);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_cache(struct vm_area_struct *vma,
        unsigned long addr, pte_t *ptep)
{





}
# 975 "./arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pud_sect_supported(void)
{
 return ((1UL) << 12) == 0x00001000;
}
# 6 "./arch/arm64/include/asm/vmalloc.h" 2




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pud_supported(pgprot_t prot)
{



 return pud_sect_supported() &&
        !0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pmd_supported(pgprot_t prot)
{

 return !0;
}
# 14 "./include/linux/vmalloc.h" 2

struct vm_area_struct;
struct notifier_block;
# 52 "./include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;



 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;

 struct rb_node rb_node;
 struct list_head list;







 union {
  unsigned long subtree_max_size;
  struct vm_struct *vm;
 };
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_p4d_supported(pgprot_t prot)
{
 return false;
}
# 108 "./include/linux/vmalloc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_vmap_pte_range_map_size(unsigned long addr, unsigned long end,
        u64 pfn, unsigned int max_page_shift)
{
 return ((1UL) << 12);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_vmap_pte_supported_shift(unsigned long size)
{
 return 12;
}





extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count, int node);
extern void vm_unmap_aliases(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vzalloc(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_user(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_node(unsigned long size, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vzalloc_node(unsigned long size, int node) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_32(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *vmalloc_32_user(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *__vmalloc_node(unsigned long size, unsigned long align, gfp_t gfp_mask,
  int node, const void *caller) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));
void *vmalloc_no_huge(unsigned long size) __attribute__((__alloc_size__(1))) __attribute__((__malloc__));

extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
void *vmap_pfn(unsigned long *pfns, unsigned int count, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long pgoff, unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
# 184 "./include/linux/vmalloc.h"
void arch_sync_kernel_mappings(unsigned long start, unsigned long end);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << 12);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
void free_vm_area(struct vm_struct *area);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_area_hugepages(const void *addr)
{
# 223 "./include/linux/vmalloc.h"
 return false;

}


void vunmap_range(unsigned long addr, unsigned long end);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_vm_flush_reset_perms(void *addr)
{
 struct vm_struct *vm = find_vm_area(addr);

 if (vm)
  vm->flags |= 0x00000100;
}
# 244 "./include/linux/vmalloc.h"
extern long vread(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 282 "./include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);


bool vmalloc_dump_obj(void *object);
# 14 "./include/linux/kmemleak.h" 2
# 59 "./include/linux/kmemleak.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_init(void)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_alloc(const void *ptr, size_t size, int min_count,
      gfp_t gfp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_alloc_recursive(const void *ptr, size_t size,
         int min_count, slab_flags_t flags,
         gfp_t gfp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_alloc_percpu(const void *ptr, size_t size,
      gfp_t gfp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_vmalloc(const struct vm_struct *area, size_t size,
        gfp_t gfp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_free(const void *ptr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_free_part(const void *ptr, size_t size)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_free_recursive(const void *ptr, slab_flags_t flags)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_free_percpu(const void *ptr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_update_trace(const void *ptr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_not_leak(const void *ptr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_ignore(const void *ptr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_erase(void **ptr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_no_scan(const void *ptr)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_alloc_phys(phys_addr_t phys, size_t size,
           int min_count, gfp_t gfp)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_free_part_phys(phys_addr_t phys, size_t size)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_not_leak_phys(phys_addr_t phys)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmemleak_ignore_phys(phys_addr_t phys)
{
}
# 42 "net/core/neighbour.c" 2


# 1 "./include/linux/module.h" 1
# 13 "./include/linux/module.h"
# 1 "./include/linux/buildid.h" 1






struct vm_area_struct;



int build_id_parse(struct vm_area_struct *vma, unsigned char *build_id,
     __u32 *size);
int build_id_parse_buf(const void *buf, unsigned char *build_id, u32 buf_size);


extern unsigned char vmlinux_build_id[20];
void init_vmlinux_build_id(void);
# 14 "./include/linux/module.h" 2
# 1 "./include/linux/elf.h" 1





# 1 "./arch/arm64/include/asm/elf.h" 1
# 14 "./arch/arm64/include/asm/elf.h"
# 1 "./arch/arm64/include/generated/asm/user.h" 1
# 1 "./include/asm-generic/user.h" 1
# 2 "./arch/arm64/include/generated/asm/user.h" 2
# 15 "./arch/arm64/include/asm/elf.h" 2
# 138 "./arch/arm64/include/asm/elf.h"
# 1 "./include/uapi/linux/elf.h" 1





# 1 "./include/uapi/linux/elf-em.h" 1
# 7 "./include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 139 "./include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 162 "./include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 304 "./include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 440 "./include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 139 "./arch/arm64/include/asm/elf.h" 2


# 1 "./include/linux/fs.h" 1
# 142 "./arch/arm64/include/asm/elf.h" 2



typedef unsigned long elf_greg_t;





typedef elf_greg_t elf_gregset_t[(sizeof(struct user_pt_regs) / sizeof(elf_greg_t))];
typedef struct user_fpsimd_state elf_fpregset_t;
# 185 "./arch/arm64/include/asm/elf.h"
struct linux_binprm;
extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
# 211 "./arch/arm64/include/asm/elf.h"
typedef unsigned int compat_elf_greg_t;
typedef compat_elf_greg_t compat_elf_gregset_t[18];



int compat_elf_check_arch(const struct elf32_hdr *);
# 243 "./arch/arm64/include/asm/elf.h"
extern int aarch32_setup_additional_pages(struct linux_binprm *bprm,
       int uses_interp);





struct arch_elf_state {
 int flags;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_parse_elf_property(u32 type, const void *data,
       size_t datasz, bool compat,
       struct arch_elf_state *arch)
{

 if (1 && compat)
  return 0;

 if (type == 0xc0000000) {
  const u32 *p = data;

  if (datasz != sizeof(*p))
   return -8;

  if (system_supports_bti() &&
      (*p & (1U << 0)))
   arch->flags |= (1 << 0);
 }

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_elf_pt_proc(void *ehdr, void *phdr,
       struct file *f, bool is_interp,
       struct arch_elf_state *state)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_check_elf(void *ehdr, bool has_interp,
     void *interp_ehdr,
     struct arch_elf_state *state)
{
 return 0;
}
# 7 "./include/linux/elf.h" 2
# 52 "./include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 65 "./include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 81 "./include/linux/elf.h"
struct gnu_property {
 u32 pr_type;
 u32 pr_datasz;
};

struct arch_elf_state;
# 96 "./include/linux/elf.h"
extern int arch_parse_elf_property(u32 type, const void *data, size_t datasz,
       bool compat, struct arch_elf_state *arch);



int arch_elf_adjust_prot(int prot, const struct arch_elf_state *state,
    bool has_interp, bool is_interp);
# 15 "./include/linux/module.h" 2
# 1 "./include/linux/cfi.h" 1
# 16 "./include/linux/module.h" 2
# 1 "./include/linux/rbtree_latch_types.h" 1
# 36 "./include/linux/rbtree_latch_types.h"
# 1 "./include/linux/rbtree.h" 1
# 37 "./include/linux/rbtree_latch_types.h" 2

struct latch_tree_node {
 struct rb_node node[2];
};
# 17 "./include/linux/module.h" 2



# 1 "./include/linux/mutex.h" 1
# 21 "./include/linux/module.h" 2
# 1 "./include/linux/moduleparam.h" 1
# 33 "./include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 301 "./include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 369 "./include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 379 "./include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 408 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);
int param_set_uint_minmax(const char *val, const struct kernel_param *kp,
  unsigned int min, unsigned int max);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_hexint;
extern int param_set_hexint(const char *val, const struct kernel_param *kp);
extern int param_get_hexint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 523 "./include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 584 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 22 "./include/linux/module.h" 2





# 1 "./arch/arm64/include/asm/module.h" 1







# 1 "./include/asm-generic/module.h" 1
# 9 "./arch/arm64/include/asm/module.h" 2


struct mod_plt_sec {
 int plt_shndx;
 int plt_num_entries;
 int plt_max_entries;
};

struct mod_arch_specific {
 struct mod_plt_sec core;
 struct mod_plt_sec init;


 struct plt_entry *ftrace_trampolines;
};


u64 module_emit_plt_entry(struct module *mod, Elf64_Shdr *sechdrs,
     void *loc, const Elf64_Rela *rela,
     Elf64_Sym *sym);

u64 module_emit_veneer_for_adrp(struct module *mod, Elf64_Shdr *sechdrs,
    void *loc, u64 val);


extern u64 module_alloc_base;




struct plt_entry {
# 48 "./arch/arm64/include/asm/module.h"
 __le32 adrp;
 __le32 add;
 __le32 br;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_forbidden_offset_for_adrp(void *place)
{
 return 1 &&
        cpus_have_const_cap(45) &&
        ((u64)place & 0xfff) >= 0xff8;
}

struct plt_entry get_plt_entry(u64 dst, void *pc);
bool plt_entries_equal(const struct plt_entry *a, const struct plt_entry *b);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool plt_entry_is_initialized(const struct plt_entry *e)
{
 return e->adrp || e->add || e->br;
}
# 28 "./include/linux/module.h" 2






struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;
struct srcu_struct;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
};

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 293 "./include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 346 "./include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
 char *typetab;
};
# 362 "./include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];







 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;







 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
 bool using_gplonly_symbols;






 bool async_probe_requested;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << (6)))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;

 void *noinstr_text_start;
 unsigned int noinstr_text_size;






 unsigned int num_srcu_structs;
 struct srcu_struct **srcu_struct_ptrs;
# 476 "./include/linux/module.h"
 struct jump_entry *jump_entries;
 unsigned int num_jump_entries;
# 519 "./include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;
# 539 "./include/linux/module.h"
} __attribute__((__aligned__((1 << (6))))) ;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
{
 return sym->st_value;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 640 "./include/linux/module.h"
void *dereference_module_function_descriptor(struct module *mod, void *ptr);




const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, const unsigned char **modbuildid,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_livepatch_module(struct module *mod)
{
 return false;
}


bool is_module_sig_enforced(void);
void set_module_sig_enforced(void);
# 821 "./include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 833 "./include/linux/module.h"
void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 850 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}
# 862 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_sig_ok(struct module *module)
{
 return true;
}


int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);
# 45 "net/core/neighbour.c" 2
# 1 "./include/linux/socket.h" 1
# 46 "net/core/neighbour.c" 2
# 1 "./include/linux/netdevice.h" 1
# 47 "net/core/neighbour.c" 2
# 1 "./include/linux/proc_fs.h" 1







# 1 "./include/linux/fs_types_sb.h" 1






# 1 "./include/linux/percpu_rwsem_types.h" 1





# 1 "./include/linux/rcuwait_types.h" 1







struct task_struct;
# 18 "./include/linux/rcuwait_types.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}
# 7 "./include/linux/percpu_rwsem_types.h" 2

# 1 "./include/linux/rcu_sync_types.h" 1
# 16 "./include/linux/rcu_sync_types.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 33 "./include/linux/rcu_sync_types.h"
extern void rcu_sync_init(struct rcu_sync *);
# 9 "./include/linux/percpu_rwsem_types.h" 2
# 1 "./include/linux/lockdep.h" 1
# 10 "./include/linux/percpu_rwsem_types.h" 2

struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rcuwait writer;
 wait_queue_head_t waiters;
 atomic_t block;



};
# 44 "./include/linux/percpu_rwsem_types.h"
extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);
# 8 "./include/linux/fs_types_sb.h" 2

# 1 "./include/linux/list_lru_types.h" 1
# 14 "./include/linux/list_lru_types.h"
struct mem_cgroup;
struct lock_class_key;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
};

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 int shrinker_id;
 bool memcg_aware;

};

struct shrinker;

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 10 "./include/linux/fs_types_sb.h" 2


# 1 "./include/linux/uuid.h" 1
# 11 "./include/linux/uuid.h"
# 1 "./include/linux/uuid_types.h" 1




# 1 "./include/uapi/linux/uuid.h" 1
# 23 "./include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "./include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 6 "./include/linux/uuid_types.h" 2



typedef struct {
 __u8 b[16];
} uuid_t;
# 12 "./include/linux/uuid.h" 2
# 13 "./include/linux/fs_types_sb.h" 2
# 72 "./include/linux/fs_types_sb.h"
struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;
# 111 "./include/linux/fs_types_sb.h"
 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 time64_t s_time_min;
 time64_t s_time_max;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;





 atomic_long_t s_fsnotify_connectors;


 int s_readonly_remount;


 errseq_t s_wb_err;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << (6)))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;
# 257 "./include/linux/fs_types_sb.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 9 "./include/linux/proc_fs.h" 2




# 1 "./include/linux/fs.h" 1
# 14 "./include/linux/proc_fs.h" 2

struct proc_dir_entry;
struct seq_file;
struct seq_operations;

enum {
# 28 "./include/linux/proc_fs.h"
 PROC_ENTRY_PERMANENT = 1U << 0,

};

struct proc_ops {
 unsigned int proc_flags;
 int (*proc_open)(struct inode *, struct file *);
 ssize_t (*proc_read)(struct file *, char *, size_t, loff_t *);
 ssize_t (*proc_read_iter)(struct kiocb *, struct iov_iter *);
 ssize_t (*proc_write)(struct file *, const char *, size_t, loff_t *);

 loff_t (*proc_lseek)(struct file *, loff_t, int);
 int (*proc_release)(struct inode *, struct file *);
 __poll_t (*proc_poll)(struct file *, struct poll_table_struct *);
 long (*proc_ioctl)(struct file *, unsigned int, unsigned long);

 long (*proc_compat_ioctl)(struct file *, unsigned int, unsigned long);

 int (*proc_mmap)(struct file *, struct vm_area_struct *);
 unsigned long (*proc_get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
} ;


enum proc_hidepid {
 HIDEPID_OFF = 0,
 HIDEPID_NO_ACCESS = 1,
 HIDEPID_INVISIBLE = 2,
 HIDEPID_NOT_PTRACEABLE = 4,
};


enum proc_pidonly {
 PROC_PIDONLY_OFF = 0,
 PROC_PIDONLY_ON = 1,
};

struct proc_fs_info {
 struct pid_namespace *pid_ns;
 struct dentry *proc_self;
 struct dentry *proc_thread_self;
 kgid_t pid_gid;
 enum proc_hidepid hide_pid;
 enum proc_pidonly pidonly;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct proc_fs_info *proc_sb_info(struct super_block *sb)
{
 return sb->s_fs_info;
}



typedef int (*proc_write_t)(struct file *, char *, size_t);

extern void proc_root_init(void);
extern void proc_flush_pid(struct pid *);

extern struct proc_dir_entry *proc_symlink(const char *,
  struct proc_dir_entry *, const char *);
struct proc_dir_entry *_proc_mkdir(const char *, umode_t, struct proc_dir_entry *, void *, bool);
extern struct proc_dir_entry *proc_mkdir(const char *, struct proc_dir_entry *);
extern struct proc_dir_entry *proc_mkdir_data(const char *, umode_t,
           struct proc_dir_entry *, void *);
extern struct proc_dir_entry *proc_mkdir_mode(const char *, umode_t,
           struct proc_dir_entry *);
struct proc_dir_entry *proc_create_mount_point(const char *name);

struct proc_dir_entry *proc_create_seq_private(const char *name, umode_t mode,
  struct proc_dir_entry *parent, const struct seq_operations *ops,
  unsigned int state_size, void *data);




struct proc_dir_entry *proc_create_single_data(const char *name, umode_t mode,
  struct proc_dir_entry *parent,
  int (*show)(struct seq_file *, void *), void *data);



extern struct proc_dir_entry *proc_create_data(const char *, umode_t,
            struct proc_dir_entry *,
            const struct proc_ops *,
            void *);

struct proc_dir_entry *proc_create(const char *name, umode_t mode, struct proc_dir_entry *parent, const struct proc_ops *proc_ops);
extern void proc_set_size(struct proc_dir_entry *, loff_t);
extern void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
extern void *PDE_DATA(const struct inode *);
extern void *proc_get_parent_data(const struct inode *);
extern void proc_remove(struct proc_dir_entry *);
extern void remove_proc_entry(const char *, struct proc_dir_entry *);
extern int remove_proc_subtree(const char *, struct proc_dir_entry *);

struct proc_dir_entry *proc_create_net_data(const char *name, umode_t mode,
  struct proc_dir_entry *parent, const struct seq_operations *ops,
  unsigned int state_size, void *data);


struct proc_dir_entry *proc_create_net_single(const char *name, umode_t mode,
  struct proc_dir_entry *parent,
  int (*show)(struct seq_file *, void *), void *data);
struct proc_dir_entry *proc_create_net_data_write(const char *name, umode_t mode,
        struct proc_dir_entry *parent,
        const struct seq_operations *ops,
        proc_write_t write,
        unsigned int state_size, void *data);
struct proc_dir_entry *proc_create_net_single_write(const char *name, umode_t mode,
          struct proc_dir_entry *parent,
          int (*show)(struct seq_file *, void *),
          proc_write_t write,
          void *data);
extern struct pid *tgid_pidfd_to_pid(const struct file *file);

struct bpf_iter_aux_info;
extern int bpf_iter_init_seq_net(void *priv_data, struct bpf_iter_aux_info *aux);
extern void bpf_iter_fini_seq_net(void *priv_data);
# 207 "./include/linux/proc_fs.h"
struct net;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct proc_dir_entry *proc_net_mkdir(
 struct net *net, const char *name, struct proc_dir_entry *parent)
{
 return _proc_mkdir(name, 0, parent, net, true);
}

struct ns_common;
int open_related_ns(struct ns_common *ns,
     struct ns_common *(*get_ns)(struct ns_common *ns));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *proc_pid_ns(struct super_block *sb)
{
 return proc_sb_info(sb)->pid_ns;
}

bool proc_ns_file(const struct file *file);
# 48 "net/core/neighbour.c" 2



# 1 "./include/uapi/linux/times.h" 1






struct tms {
 __kernel_clock_t tms_utime;
 __kernel_clock_t tms_stime;
 __kernel_clock_t tms_cutime;
 __kernel_clock_t tms_cstime;
};
# 52 "net/core/neighbour.c" 2
# 1 "./include/net/net_namespace.h" 1
# 53 "net/core/neighbour.c" 2
# 1 "./include/net/neighbour.h" 1
# 54 "net/core/neighbour.c" 2
# 1 "./include/net/arp.h" 1







# 1 "./include/linux/if_arp.h" 1
# 23 "./include/linux/if_arp.h"
# 1 "./include/linux/skbuff.h" 1
# 24 "./include/linux/if_arp.h" 2
# 1 "./include/uapi/linux/if_arp.h" 1
# 27 "./include/uapi/linux/if_arp.h"
# 1 "./include/linux/netdevice.h" 1
# 28 "./include/uapi/linux/if_arp.h" 2
# 117 "./include/uapi/linux/if_arp.h"
struct arpreq {
 struct sockaddr arp_pa;
 struct sockaddr arp_ha;
 int arp_flags;
 struct sockaddr arp_netmask;
 char arp_dev[16];
};

struct arpreq_old {
 struct sockaddr arp_pa;
 struct sockaddr arp_ha;
 int arp_flags;
 struct sockaddr arp_netmask;
};
# 145 "./include/uapi/linux/if_arp.h"
struct arphdr {
 __be16 ar_hrd;
 __be16 ar_pro;
 unsigned char ar_hln;
 unsigned char ar_pln;
 __be16 ar_op;
# 162 "./include/uapi/linux/if_arp.h"
};
# 25 "./include/linux/if_arp.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct arphdr *arp_hdr(const struct sk_buff *skb)
{
 return (struct arphdr *)skb_network_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int arp_hdr_len(const struct net_device *dev)
{
 switch (dev->type) {





 default:

  return sizeof(struct arphdr) + (dev->addr_len + sizeof(u32)) * 2;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_is_mac_header_xmit(const struct net_device *dev)
{
 switch (dev->type) {
 case 768:
 case 769:
 case 776:
 case 778:
 case 823:
 case 0xFFFF:
 case 0xFFFE:
 case 519:
  return false;
 default:
  return true;
 }
}
# 9 "./include/net/arp.h" 2
# 1 "./include/linux/hash.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 7 "./include/linux/hash.h" 2
# 60 "./include/linux/hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 10 "./include/net/arp.h" 2
# 1 "./include/net/neighbour.h" 1
# 11 "./include/net/arp.h" 2


extern struct neigh_table arp_tbl;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 arp_hashfn(const void *pkey, const struct net_device *dev, u32 *hash_rnd)
{
 u32 key = *(const u32 *)pkey;
 u32 val = key ^ hash32_ptr(dev);

 return val * hash_rnd[0];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *__ipv4_neigh_lookup_noref(struct net_device *dev, u32 key)
{
 if (dev->flags & (IFF_LOOPBACK | IFF_POINTOPOINT))
  key = ((unsigned long int) 0x00000000);

 return ___neigh_lookup_noref(&arp_tbl, neigh_key_eq32, arp_hashfn, &key, dev);
}
# 39 "./include/net/arp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neighbour *__ipv4_neigh_lookup(struct net_device *dev, u32 key)
{
 struct neighbour *n;

 rcu_read_lock_bh();
 n = __ipv4_neigh_lookup_noref(dev, key);
 if (n && !refcount_inc_not_zero(&n->refcnt))
  n = ((void *)0);
 rcu_read_unlock_bh();

 return n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ipv4_confirm_neigh(struct net_device *dev, u32 key)
{
 struct neighbour *n;

 rcu_read_lock_bh();
 n = __ipv4_neigh_lookup_noref(dev, key);
 if (n) {
  unsigned long now = jiffies;


  if (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_334(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->confirmed) == sizeof(char) || sizeof(n->confirmed) == sizeof(short) || sizeof(n->confirmed) == sizeof(int) || sizeof(n->confirmed) == sizeof(long)) || sizeof(n->confirmed) == sizeof(long long))) __compiletime_assert_334(); } while (0); (*(const volatile typeof( _Generic((n->confirmed), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (n->confirmed))) *)&(n->confirmed)); }) != now)
   do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_335(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->confirmed) == sizeof(char) || sizeof(n->confirmed) == sizeof(short) || sizeof(n->confirmed) == sizeof(int) || sizeof(n->confirmed) == sizeof(long)) || sizeof(n->confirmed) == sizeof(long long))) __compiletime_assert_335(); } while (0); do { *(volatile typeof(n->confirmed) *)&(n->confirmed) = (now); } while (0); } while (0);
 }
 rcu_read_unlock_bh();
}

void arp_init(void);
int arp_ioctl(struct net *net, unsigned int cmd, void *arg);
void arp_send(int type, int ptype, __be32 dest_ip,
       struct net_device *dev, __be32 src_ip,
       const unsigned char *dest_hw,
       const unsigned char *src_hw, const unsigned char *th);
int arp_mc_map(__be32 addr, u8 *haddr, struct net_device *dev, int dir);
void arp_ifdown(struct net_device *dev);

struct sk_buff *arp_create(int type, int ptype, __be32 dest_ip,
      struct net_device *dev, __be32 src_ip,
      const unsigned char *dest_hw,
      const unsigned char *src_hw,
      const unsigned char *target_hw);
void arp_xmit(struct sk_buff *skb);
# 55 "net/core/neighbour.c" 2
# 1 "./include/net/dst.h" 1
# 56 "net/core/neighbour.c" 2
# 1 "./include/net/sock.h" 1




# 1 "./include/net/sock_types.h" 1
# 48 "./include/net/sock_types.h"
# 1 "./include/linux/cgroup_types_sock.h" 1
# 37 "./include/linux/cgroup_types_sock.h"
struct sock_cgroup_data {
};
# 49 "./include/net/sock_types.h" 2

# 1 "./include/net/tcp_states.h" 1
# 12 "./include/net/tcp_states.h"
enum {
 TCP_ESTABLISHED = 1,
 TCP_SYN_SENT,
 TCP_SYN_RECV,
 TCP_FIN_WAIT1,
 TCP_FIN_WAIT2,
 TCP_TIME_WAIT,
 TCP_CLOSE,
 TCP_CLOSE_WAIT,
 TCP_LAST_ACK,
 TCP_LISTEN,
 TCP_CLOSING,
 TCP_NEW_SYN_RECV,

 TCP_MAX_STATES
};





enum {
 TCPF_ESTABLISHED = (1 << TCP_ESTABLISHED),
 TCPF_SYN_SENT = (1 << TCP_SYN_SENT),
 TCPF_SYN_RECV = (1 << TCP_SYN_RECV),
 TCPF_FIN_WAIT1 = (1 << TCP_FIN_WAIT1),
 TCPF_FIN_WAIT2 = (1 << TCP_FIN_WAIT2),
 TCPF_TIME_WAIT = (1 << TCP_TIME_WAIT),
 TCPF_CLOSE = (1 << TCP_CLOSE),
 TCPF_CLOSE_WAIT = (1 << TCP_CLOSE_WAIT),
 TCPF_LAST_ACK = (1 << TCP_LAST_ACK),
 TCPF_LISTEN = (1 << TCP_LISTEN),
 TCPF_CLOSING = (1 << TCP_CLOSING),
 TCPF_NEW_SYN_RECV = (1 << TCP_NEW_SYN_RECV),
};
# 51 "./include/net/sock_types.h" 2





# 1 "./arch/arm64/include/asm/page_types.h" 1
# 57 "./include/net/sock_types.h" 2





struct net_device;
struct sockaddr;

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};
# 99 "./include/net/sock_types.h"
typedef struct {
 spinlock_t slock;
 int owned;
 wait_queue_head_t wq;
# 112 "./include/net/sock_types.h"
} socket_lock_t;

struct sock;
struct proto;
struct net;

typedef __u32 __portpair;
typedef __u64 __addrpair;
# 166 "./include/net/sock_types.h"
struct sock_common {



 union {
  __addrpair skc_addrpair;
  struct {
   __be32 skc_daddr;
   __be32 skc_rcv_saddr;
  };
 };
 union {
  unsigned int skc_hash;
  __u16 skc_u16hashes[2];
 };

 union {
  __portpair skc_portpair;
  struct {
   __be16 skc_dport;
   __u16 skc_num;
  };
 };

 unsigned short skc_family;
 volatile unsigned char skc_state;
 unsigned char skc_reuse:4;
 unsigned char skc_reuseport:1;
 unsigned char skc_ipv6only:1;
 unsigned char skc_net_refcnt:1;
 int skc_bound_dev_if;
 union {
  struct hlist_node skc_bind_node;
  struct hlist_node skc_portaddr_node;
 };
 struct proto *skc_prot;
 possible_net_t skc_net;


 struct in6_addr skc_v6_daddr;
 struct in6_addr skc_v6_rcv_saddr;


 atomic64_t skc_cookie;






 union {
  unsigned long skc_flags;
  struct sock *skc_listener;
  struct inet_timewait_death_row *skc_tw_dr;
 };





 int skc_dontcopy_begin[0];

 union {
  struct hlist_node skc_node;
  struct hlist_nulls_node skc_nulls_node;
 };
 unsigned short skc_tx_queue_mapping;

 unsigned short skc_rx_queue_mapping;

 union {
  int skc_incoming_cpu;
  u32 skc_rcv_wnd;
  u32 skc_tw_rcv_nxt;
 };

 refcount_t skc_refcnt;

 int skc_dontcopy_end[0];
 union {
  u32 skc_rxhash;
  u32 skc_window_clamp;
  u32 skc_tw_snd_nxt;
 };

};

struct bpf_local_storage;
# 357 "./include/net/sock_types.h"
struct sock {




 struct sock_common __sk_common;
# 397 "./include/net/sock_types.h"
 socket_lock_t sk_lock;
 atomic_t sk_drops;
 int sk_rcvlowat;
 struct sk_buff_head sk_error_queue;
 struct sk_buff_head sk_receive_queue;
# 410 "./include/net/sock_types.h"
 struct {
  atomic_t rmem_alloc;
  int len;
  struct sk_buff *head;
  struct sk_buff *tail;
 } sk_backlog;


 int sk_forward_alloc;
 u32 sk_reserved_mem;

 unsigned int sk_ll_usec;

 unsigned int sk_napi_id;

 int sk_rcvbuf;

 struct sk_filter *sk_filter;
 union {
  struct socket_wq *sk_wq;

  struct socket_wq *sk_wq_raw;

 };



 struct dst_entry *sk_rx_dst;
 int sk_rx_dst_ifindex;
 u32 sk_rx_dst_cookie;

 struct dst_entry *sk_dst_cache;
 atomic_t sk_omem_alloc;
 int sk_sndbuf;


 int sk_wmem_queued;
 refcount_t sk_wmem_alloc;
 unsigned long sk_tsq_flags;
 union {
  struct sk_buff *sk_send_head;
  struct rb_root tcp_rtx_queue;
 };
 struct sk_buff_head sk_write_queue;
 __s32 sk_peek_off;
 int sk_write_pending;
 __u32 sk_dst_pending_confirm;
 u32 sk_pacing_status;
 long sk_sndtimeo;
 struct timer_list sk_timer;
 __u32 sk_priority;
 __u32 sk_mark;
 unsigned long sk_pacing_rate;
 unsigned long sk_max_pacing_rate;
 struct page_frag sk_frag;
 netdev_features_t sk_route_caps;
 netdev_features_t sk_route_nocaps;
 netdev_features_t sk_route_forced_caps;
 int sk_gso_type;
 unsigned int sk_gso_max_size;
 gfp_t sk_allocation;
 __u32 sk_txhash;





 u8 sk_padding : 1,
    sk_kern_sock : 1,
    sk_no_check_tx : 1,
    sk_no_check_rx : 1,
    sk_userlocks : 4;
 u8 sk_pacing_shift;
 u16 sk_type;
 u16 sk_protocol;
 u16 sk_gso_max_segs;
 unsigned long sk_lingertime;
 struct proto *sk_prot_creator;
 rwlock_t sk_callback_lock;
 int sk_err,
    sk_err_soft;
 u32 sk_ack_backlog;
 u32 sk_max_ack_backlog;
 kuid_t sk_uid;

 u8 sk_prefer_busy_poll;
 u16 sk_busy_poll_budget;

 spinlock_t sk_peer_lock;
 struct pid *sk_peer_pid;
 const struct cred *sk_peer_cred;

 long sk_rcvtimeo;
 ktime_t sk_stamp;



 u16 sk_tsflags;
 int sk_bind_phc;
 u8 sk_shutdown;
 u32 sk_tskey;
 atomic_t sk_zckey;

 u8 sk_clockid;
 u8 sk_txtime_deadline_mode : 1,
    sk_txtime_report_errors : 1,
    sk_txtime_unused : 6;

 struct socket *sk_socket;
 void *sk_user_data;

 void *sk_security;

 struct sock_cgroup_data sk_cgrp_data;
 struct mem_cgroup *sk_memcg;
 void (*sk_state_change)(struct sock *sk);
 void (*sk_data_ready)(struct sock *sk);
 void (*sk_write_space)(struct sock *sk);
 void (*sk_error_report)(struct sock *sk);
 int (*sk_backlog_rcv)(struct sock *sk,
        struct sk_buff *skb);





 void (*sk_destruct)(struct sock *sk);
 struct sock_reuseport *sk_reuseport_cb;



 struct callback_head sk_rcu;
};

enum sk_pacing {
 SK_PACING_NONE = 0,
 SK_PACING_NEEDED = 1,
 SK_PACING_FQ = 2,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct net *sock_net(const struct sock *sk)
{
 return read_pnet(&sk->__sk_common.skc_net);
}

struct request_sock_ops;
struct timewait_sock_ops;
struct inet_hashinfo;
struct raw_hashinfo;
struct smc_hashinfo;
struct module;
struct sk_psock;
struct sockptr_struct;
struct msghdr;




struct proto {
 void (*close)(struct sock *sk,
     long timeout);
 int (*pre_connect)(struct sock *sk,
     struct sockaddr *uaddr,
     int addr_len);
 int (*connect)(struct sock *sk,
     struct sockaddr *uaddr,
     int addr_len);
 int (*disconnect)(struct sock *sk, int flags);

 struct sock * (*accept)(struct sock *sk, int flags, int *err,
       bool kern);

 int (*ioctl)(struct sock *sk, int cmd,
      unsigned long arg);
 int (*init)(struct sock *sk);
 void (*destroy)(struct sock *sk);
 void (*shutdown)(struct sock *sk, int how);
 int (*setsockopt)(struct sock *sk, int level,
     int optname, struct sockptr_struct optval,
     unsigned int optlen);
 int (*getsockopt)(struct sock *sk, int level,
     int optname, char *optval,
     int *option);
 void (*keepalive)(struct sock *sk, int valbool);

 int (*compat_ioctl)(struct sock *sk,
     unsigned int cmd, unsigned long arg);

 int (*sendmsg)(struct sock *sk, struct msghdr *msg,
        size_t len);
 int (*recvmsg)(struct sock *sk, struct msghdr *msg,
        size_t len, int noblock, int flags,
        int *addr_len);
 int (*sendpage)(struct sock *sk, struct page *page,
     int offset, size_t size, int flags);
 int (*bind)(struct sock *sk,
     struct sockaddr *addr, int addr_len);
 int (*bind_add)(struct sock *sk,
     struct sockaddr *addr, int addr_len);

 int (*backlog_rcv) (struct sock *sk,
      struct sk_buff *skb);
 bool (*bpf_bypass_getsockopt)(int level,
        int optname);

 void (*release_cb)(struct sock *sk);


 int (*hash)(struct sock *sk);
 void (*unhash)(struct sock *sk);
 void (*rehash)(struct sock *sk);
 int (*get_port)(struct sock *sk, unsigned short snum);
# 631 "./include/net/sock_types.h"
 unsigned int inuse_idx;


 int (*forward_alloc_get)(const struct sock *sk);

 bool (*stream_memory_free)(const struct sock *sk, int wake);
 bool (*sock_is_readable)(struct sock *sk);

 void (*enter_memory_pressure)(struct sock *sk);
 void (*leave_memory_pressure)(struct sock *sk);
 atomic_long_t *memory_allocated;
 struct percpu_counter *sockets_allocated;







 unsigned long *memory_pressure;
 long *sysctl_mem;

 int *sysctl_wmem;
 int *sysctl_rmem;
 u32 sysctl_wmem_offset;
 u32 sysctl_rmem_offset;

 int max_header;
 bool no_autobind;

 struct kmem_cache *slab;
 unsigned int obj_size;
 slab_flags_t slab_flags;
 unsigned int useroffset;
 unsigned int usersize;

 unsigned int *orphan_count;

 struct request_sock_ops *rsk_prot;
 struct timewait_sock_ops *twsk_prot;

 union {
  struct inet_hashinfo *hashinfo;
  struct udp_table *udp_table;
  struct raw_hashinfo *raw_hash;
  struct smc_hashinfo *smc_hash;
 } h;

 struct module *owner;

 char name[32];

 struct list_head node;



 int (*diag_destroy)(struct sock *sk, int err);
} ;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sk_fullsock(const struct sock *sk)
{
 return (1 << sk->__sk_common.skc_state) & ~(TCPF_TIME_WAIT | TCPF_NEW_SYN_RECV);
}

struct sockcm_cookie {
 u64 transmit_time;
 u32 mark;
 u16 tsflags;
};
# 6 "./include/net/sock.h" 2
# 57 "net/core/neighbour.c" 2
# 1 "./include/net/netevent.h" 1
# 15 "./include/net/netevent.h"
struct dst_entry;
struct neighbour;
struct notifier_block;

struct netevent_redirect {
 struct dst_entry *old;
 struct dst_entry *new;
 struct neighbour *neigh;
 const void *daddr;
};

enum netevent_notif_type {
 NETEVENT_NEIGH_UPDATE = 1,
 NETEVENT_REDIRECT,
 NETEVENT_DELAY_PROBE_TIME_UPDATE,
 NETEVENT_IPV4_MPATH_HASH_UPDATE,
 NETEVENT_IPV6_MPATH_HASH_UPDATE,
 NETEVENT_IPV4_FWD_UPDATE_PRIORITY_UPDATE,
};

int register_netevent_notifier(struct notifier_block *nb);
int unregister_netevent_notifier(struct notifier_block *nb);
int call_netevent_notifiers(unsigned long val, void *v);
# 58 "net/core/neighbour.c" 2
# 1 "./include/net/netlink.h" 1
# 59 "net/core/neighbour.c" 2




# 1 "./include/linux/inetdevice.h" 1
# 11 "./include/linux/inetdevice.h"
# 1 "./include/linux/ip.h" 1
# 16 "./include/linux/ip.h"
# 1 "./include/linux/skbuff.h" 1
# 17 "./include/linux/ip.h" 2
# 1 "./include/uapi/linux/ip.h" 1
# 86 "./include/uapi/linux/ip.h"
struct iphdr {

 __u8 ihl:4,
  version:4;






 __u8 tos;
 __be16 tot_len;
 __be16 id;
 __be16 frag_off;
 __u8 ttl;
 __u8 protocol;
 __sum16 check;
 __be32 saddr;
 __be32 daddr;

};


struct ip_auth_hdr {
 __u8 nexthdr;
 __u8 hdrlen;
 __be16 reserved;
 __be32 spi;
 __be32 seq_no;
 __u8 auth_data[0];
};

struct ip_esp_hdr {
 __be32 spi;
 __be32 seq_no;
 __u8 enc_data[0];
};

struct ip_comp_hdr {
 __u8 nexthdr;
 __u8 flags;
 __be16 cpi;
};

struct ip_beet_phdr {
 __u8 nexthdr;
 __u8 hdrlen;
 __u8 padlen;
 __u8 reserved;
};


enum
{
 IPV4_DEVCONF_FORWARDING=1,
 IPV4_DEVCONF_MC_FORWARDING,
 IPV4_DEVCONF_PROXY_ARP,
 IPV4_DEVCONF_ACCEPT_REDIRECTS,
 IPV4_DEVCONF_SECURE_REDIRECTS,
 IPV4_DEVCONF_SEND_REDIRECTS,
 IPV4_DEVCONF_SHARED_MEDIA,
 IPV4_DEVCONF_RP_FILTER,
 IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE,
 IPV4_DEVCONF_BOOTP_RELAY,
 IPV4_DEVCONF_LOG_MARTIANS,
 IPV4_DEVCONF_TAG,
 IPV4_DEVCONF_ARPFILTER,
 IPV4_DEVCONF_MEDIUM_ID,
 IPV4_DEVCONF_NOXFRM,
 IPV4_DEVCONF_NOPOLICY,
 IPV4_DEVCONF_FORCE_IGMP_VERSION,
 IPV4_DEVCONF_ARP_ANNOUNCE,
 IPV4_DEVCONF_ARP_IGNORE,
 IPV4_DEVCONF_PROMOTE_SECONDARIES,
 IPV4_DEVCONF_ARP_ACCEPT,
 IPV4_DEVCONF_ARP_NOTIFY,
 IPV4_DEVCONF_ACCEPT_LOCAL,
 IPV4_DEVCONF_SRC_VMARK,
 IPV4_DEVCONF_PROXY_ARP_PVLAN,
 IPV4_DEVCONF_ROUTE_LOCALNET,
 IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL,
 IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL,
 IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN,
 IPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST,
 IPV4_DEVCONF_DROP_GRATUITOUS_ARP,
 IPV4_DEVCONF_BC_FORWARDING,
 IPV4_DEVCONF_ARP_EVICT_NOCARRIER,
 __IPV4_DEVCONF_MAX
};
# 18 "./include/linux/ip.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct iphdr *ip_hdr(const struct sk_buff *skb)
{
 return (struct iphdr *)skb_network_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct iphdr *inner_ip_hdr(const struct sk_buff *skb)
{
 return (struct iphdr *)skb_inner_network_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct iphdr *ipip_hdr(const struct sk_buff *skb)
{
 return (struct iphdr *)skb_transport_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ip_transport_len(const struct sk_buff *skb)
{
 return (__builtin_constant_p((__u16)(( __u16)(__be16)(ip_hdr(skb)->tot_len))) ? ((__u16)( (((__u16)(( __u16)(__be16)(ip_hdr(skb)->tot_len)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(ip_hdr(skb)->tot_len)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(ip_hdr(skb)->tot_len))) - skb_network_header_len(skb);
}
# 12 "./include/linux/inetdevice.h" 2
# 1 "./include/linux/netdevice.h" 1
# 13 "./include/linux/inetdevice.h" 2






struct ipv4_devconf {
 void *sysctl;
 int data[(__IPV4_DEVCONF_MAX - 1)];
 unsigned long state[((((__IPV4_DEVCONF_MAX - 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};



struct in_device {
 struct net_device *dev;
 refcount_t refcnt;
 int dead;
 struct in_ifaddr *ifa_list;

 struct ip_mc_list *mc_list;
 struct ip_mc_list * *mc_hash;

 int mc_count;
 spinlock_t mc_tomb_lock;
 struct ip_mc_list *mc_tomb;
 unsigned long mr_v1_seen;
 unsigned long mr_v2_seen;
 unsigned long mr_maxdelay;
 unsigned long mr_qi;
 unsigned long mr_qri;
 unsigned char mr_qrv;
 unsigned char mr_gq_running;
 u32 mr_ifc_count;
 struct timer_list mr_gq_timer;
 struct timer_list mr_ifc_timer;

 struct neigh_parms *arp_parms;
 struct ipv4_devconf cnf;
 struct callback_head callback_head;
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ipv4_devconf_get(struct in_device *in_dev, int index)
{
 index--;
 return in_dev->cnf.data[index];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv4_devconf_set(struct in_device *in_dev, int index,
        int val)
{
 index--;
 set_bit(index, in_dev->cnf.state);
 in_dev->cnf.data[index] = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv4_devconf_setall(struct in_device *in_dev)
{
 bitmap_fill(in_dev->cnf.state, (__IPV4_DEVCONF_MAX - 1));
}
# 141 "./include/linux/inetdevice.h"
struct in_ifaddr {
 struct hlist_node hash;
 struct in_ifaddr *ifa_next;
 struct in_device *ifa_dev;
 struct callback_head callback_head;
 __be32 ifa_local;
 __be32 ifa_address;
 __be32 ifa_mask;
 __u32 ifa_rt_priority;
 __be32 ifa_broadcast;
 unsigned char ifa_scope;
 unsigned char ifa_prefixlen;
 __u32 ifa_flags;
 char ifa_label[16];


 __u32 ifa_valid_lft;
 __u32 ifa_preferred_lft;
 unsigned long ifa_cstamp;
 unsigned long ifa_tstamp;
};

struct in_validator_info {
 __be32 ivi_addr;
 struct in_device *ivi_dev;
 struct netlink_ext_ack *extack;
};

int register_inetaddr_notifier(struct notifier_block *nb);
int unregister_inetaddr_notifier(struct notifier_block *nb);
int register_inetaddr_validator_notifier(struct notifier_block *nb);
int unregister_inetaddr_validator_notifier(struct notifier_block *nb);

void inet_netconf_notify_devconf(struct net *net, int event, int type,
     int ifindex, struct ipv4_devconf *devconf);

struct net_device *__ip_dev_find(struct net *net, __be32 addr, bool devref);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct net_device *ip_dev_find(struct net *net, __be32 addr)
{
 return __ip_dev_find(net, addr, true);
}

int inet_addr_onlink(struct in_device *in_dev, __be32 a, __be32 b);
int devinet_ioctl(struct net *net, unsigned int cmd, struct ifreq *);

int inet_gifconf(struct net_device *dev, char *buf, int len, int size);







void devinet_init(void);
struct in_device *inetdev_by_index(struct net *, int);
__be32 inet_select_addr(const struct net_device *dev, __be32 dst, int scope);
__be32 inet_confirm_addr(struct net *net, struct in_device *in_dev, __be32 dst,
    __be32 local, int scope);
struct in_ifaddr *inet_ifa_byprefix(struct in_device *in_dev, __be32 prefix,
        __be32 mask);
struct in_ifaddr *inet_lookup_ifaddr_rcu(struct net *net, __be32 addr);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inet_ifa_match(__be32 addr, const struct in_ifaddr *ifa)
{
 return !((addr^ifa->ifa_address)&ifa->ifa_mask);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bad_mask(__be32 mask, __be32 addr)
{
 __u32 hmask;
 if (addr & (mask = ~mask))
  return true;
 hmask = (__builtin_constant_p((__u32)(( __u32)(__be32)(mask))) ? ((__u32)( (((__u32)(( __u32)(__be32)(mask)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(mask)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(mask)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(mask)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(mask)));
 if (hmask & (hmask+1))
  return true;
 return false;
}
# 230 "./include/linux/inetdevice.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct in_device *__in_dev_get_rcu(const struct net_device *dev)
{
 return ({ typeof(*(dev->ip_ptr)) *________p1 = (typeof(*(dev->ip_ptr)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_336(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((dev->ip_ptr)) == sizeof(char) || sizeof((dev->ip_ptr)) == sizeof(short) || sizeof((dev->ip_ptr)) == sizeof(int) || sizeof((dev->ip_ptr)) == sizeof(long)) || sizeof((dev->ip_ptr)) == sizeof(long long))) __compiletime_assert_336(); } while (0); (*(const volatile typeof( _Generic(((dev->ip_ptr)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((dev->ip_ptr)))) *)&((dev->ip_ptr))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(dev->ip_ptr)) *)(________p1)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct in_device *in_dev_get(const struct net_device *dev)
{
 struct in_device *in_dev;

 rcu_read_lock();
 in_dev = __in_dev_get_rcu(dev);
 if (in_dev)
  refcount_inc(&in_dev->refcnt);
 rcu_read_unlock();
 return in_dev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct in_device *__in_dev_get_rtnl(const struct net_device *dev)
{
 return ({ do { } while (0 && (!((lockdep_rtnl_is_held())))); ; ((typeof(*(dev->ip_ptr)) *)((dev->ip_ptr))); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ip_ignore_linkdown(const struct net_device *dev)
{
 struct in_device *in_dev;
 bool rc = false;

 in_dev = ({ typeof(*(dev->ip_ptr)) *________p1 = (typeof(*(dev->ip_ptr)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_337(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((dev->ip_ptr)) == sizeof(char) || sizeof((dev->ip_ptr)) == sizeof(short) || sizeof((dev->ip_ptr)) == sizeof(int) || sizeof((dev->ip_ptr)) == sizeof(long)) || sizeof((dev->ip_ptr)) == sizeof(long long))) __compiletime_assert_337(); } while (0); (*(const volatile typeof( _Generic(((dev->ip_ptr)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((dev->ip_ptr)))) *)&((dev->ip_ptr))); }); do { } while (0 && (!((lockdep_rtnl_is_held()) || rcu_read_lock_held()))); ; ((typeof(*(dev->ip_ptr)) *)(________p1)); });
 if (in_dev &&
     ((((*(dev_net((in_dev)->dev))->ipv4.devconf_all)).data[IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN - 1]) || ipv4_devconf_get((((in_dev))), IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN)))
  rc = true;

 return rc;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neigh_parms *__in_dev_arp_parms_get_rcu(const struct net_device *dev)
{
 struct in_device *in_dev = __in_dev_get_rcu(dev);

 return in_dev ? in_dev->arp_parms : ((void *)0);
}

void in_dev_finish_destroy(struct in_device *idev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void in_dev_put(struct in_device *idev)
{
 if (refcount_dec_and_test(&idev->refcnt))
  in_dev_finish_destroy(idev);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 inet_make_mask(int logmask)
{
 if (logmask)
  return (( __be32)(__builtin_constant_p((__u32)((~((1U<<(32-logmask))-1)))) ? ((__u32)( (((__u32)((~((1U<<(32-logmask))-1))) & (__u32)0x000000ffUL) << 24) | (((__u32)((~((1U<<(32-logmask))-1))) & (__u32)0x0000ff00UL) << 8) | (((__u32)((~((1U<<(32-logmask))-1))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((~((1U<<(32-logmask))-1))) & (__u32)0xff000000UL) >> 24))) : __fswab32((~((1U<<(32-logmask))-1)))));
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inet_mask_len(__be32 mask)
{
 __u32 hmask = (__builtin_constant_p((__u32)(( __u32)(__be32)(mask))) ? ((__u32)( (((__u32)(( __u32)(__be32)(mask)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(mask)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(mask)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(mask)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(mask)));
 if (!hmask)
  return 0;
 return 32 - __ffs(~(~hmask));
}
# 64 "net/core/neighbour.c" 2
# 1 "./include/net/addrconf.h" 1
# 24 "./include/net/addrconf.h"
# 1 "./include/net/ipv6_api.h" 1
# 12 "./include/net/ipv6_api.h"
# 1 "./include/net/ipv6_types.h" 1
# 138 "./include/net/ipv6_types.h"
struct frag_hdr {
 __u8 nexthdr;
 __u8 reserved;
 __be16 frag_off;
 __be32 identification;
};




struct ip6_fraglist_iter {
 struct ipv6hdr *tmp_hdr;
 struct sk_buff *frag;
 int offset;
 unsigned int hlen;
 __be32 frag_id;
 u8 nexthdr;
};

struct ip6_frag_state {
 u8 *prevhdr;
 unsigned int hlen;
 unsigned int mtu;
 unsigned int left;
 int offset;
 int ptr;
 int hroom;
 int troom;
 __be32 frag_id;
 u8 nexthdr;
};

struct ip6_ra_chain {
 struct ip6_ra_chain *next;
 struct sock *sk;
 int sel;
 void (*destructor)(struct sock *);
};






struct ipv6_txoptions {
 refcount_t refcnt;

 int tot_len;



 __u16 opt_flen;
 __u16 opt_nflen;

 struct ipv6_opt_hdr *hopopt;
 struct ipv6_opt_hdr *dst0opt;
 struct ipv6_rt_hdr *srcrt;
 struct ipv6_opt_hdr *dst1opt;
 struct callback_head rcu;

};


enum flowlabel_reflect {
 FLOWLABEL_REFLECT_ESTABLISHED = 1,
 FLOWLABEL_REFLECT_TCP_RESET = 2,
 FLOWLABEL_REFLECT_ICMPV6_ECHO_REPLIES = 4,
};

struct ip6_flowlabel {
 struct ip6_flowlabel *next;
 __be32 label;
 atomic_t users;
 struct in6_addr dst;
 struct ipv6_txoptions *opt;
 unsigned long linger;
 struct callback_head rcu;
 u8 share;
 union {
  struct pid *pid;
  kuid_t uid;
 } owner;
 unsigned long lastuse;
 unsigned long expires;
 struct net *fl_net;
};
# 232 "./include/net/ipv6_types.h"
struct ipv6_fl_socklist {
 struct ipv6_fl_socklist *next;
 struct ip6_flowlabel *fl;
 struct callback_head rcu;
};

enum {
 IP6_FH_F_FRAG = (1 << 0),
 IP6_FH_F_AUTH = (1 << 1),
 IP6_FH_F_SKIP_RH = (1 << 2),
};
# 13 "./include/net/ipv6_api.h" 2



# 1 "./include/linux/ipv6.h" 1





# 1 "./include/linux/tcp.h" 1
# 17 "./include/linux/tcp.h"
# 1 "./include/linux/win_minmax.h" 1
# 12 "./include/linux/win_minmax.h"
struct minmax_sample {
 u32 t;
 u32 v;
};


struct minmax {
 struct minmax_sample s[3];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 minmax_get(const struct minmax *m)
{
 return m->s[0].v;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 minmax_reset(struct minmax *m, u32 t, u32 meas)
{
 struct minmax_sample val = { .t = t, .v = meas };

 m->s[2] = m->s[1] = m->s[0] = val;
 return m->s[0].v;
}

u32 minmax_running_max(struct minmax *m, u32 win, u32 t, u32 meas);
u32 minmax_running_min(struct minmax *m, u32 win, u32 t, u32 meas);
# 18 "./include/linux/tcp.h" 2



# 1 "./include/net/inet_connection_sock_types.h" 1
# 14 "./include/net/inet_connection_sock_types.h"
# 1 "./include/net/inet_sock_types.h" 1
# 15 "./include/net/inet_sock_types.h"
# 1 "./include/net/request_sock_types.h" 1
# 16 "./include/net/request_sock_types.h"
struct request_sock;
struct sk_buff;
struct dst_entry;
struct proto;

struct request_sock_ops {
 int family;
 unsigned int obj_size;
 struct kmem_cache *slab;
 char *slab_name;
 int (*rtx_syn_ack)(const struct sock *sk,
           struct request_sock *req);
 void (*send_ack)(const struct sock *sk, struct sk_buff *skb,
        struct request_sock *req);
 void (*send_reset)(const struct sock *sk,
          struct sk_buff *skb);
 void (*destructor)(struct request_sock *req);
 void (*syn_ack_timeout)(const struct request_sock *req);
};

int inet_rtx_syn_ack(const struct sock *parent, struct request_sock *req);

struct saved_syn {
 u32 mac_hdrlen;
 u32 network_hdrlen;
 u32 tcp_hdrlen;
 u8 data[];
};



struct request_sock {
 struct sock_common __req_common;






 struct request_sock *dl_next;
 u16 mss;
 u8 num_retrans;
 u8 syncookie:1;
 u8 num_timeout:7;
 u32 ts_recent;
 struct timer_list rsk_timer;
 const struct request_sock_ops *rsk_ops;
 struct sock *sk;
 struct saved_syn *saved_syn;
 u32 secid;
 u32 peer_secid;
};
# 86 "./include/net/request_sock_types.h"
struct fastopen_queue {
 struct request_sock *rskq_rst_head;
 struct request_sock *rskq_rst_tail;



 spinlock_t lock;
 int qlen;
 int max_qlen;

 struct tcp_fastopen_context *ctx;
};
# 106 "./include/net/request_sock_types.h"
struct request_sock_queue {
 spinlock_t rskq_lock;
 u8 rskq_defer_accept;

 u32 synflood_warned;
 atomic_t qlen;
 atomic_t young;

 struct request_sock *rskq_accept_head;
 struct request_sock *rskq_accept_tail;
 struct fastopen_queue fastopenq;


};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct request_sock *inet_reqsk(const struct sock *sk)
{
 return (struct request_sock *)sk;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sock *req_to_sk(struct request_sock *req)
{
 return (struct sock *)req;
}
# 16 "./include/net/inet_sock_types.h" 2
# 1 "./include/net/flow.h" 1
# 13 "./include/net/flow.h"
# 1 "./include/linux/socket.h" 1
# 14 "./include/net/flow.h" 2



# 1 "./include/net/flow_dissector.h" 1
# 10 "./include/net/flow_dissector.h"
struct bpf_prog;
struct net;
struct sk_buff;





struct flow_dissector_key_control {
 u16 thoff;
 u16 addr_type;
 u32 flags;
};





enum flow_dissect_ret {
 FLOW_DISSECT_RET_OUT_GOOD,
 FLOW_DISSECT_RET_OUT_BAD,
 FLOW_DISSECT_RET_PROTO_AGAIN,
 FLOW_DISSECT_RET_IPPROTO_AGAIN,
 FLOW_DISSECT_RET_CONTINUE,
};






struct flow_dissector_key_basic {
 __be16 n_proto;
 u8 ip_proto;
 u8 padding;
};

struct flow_dissector_key_tags {
 u32 flow_label;
};

struct flow_dissector_key_vlan {
 union {
  struct {
   u16 vlan_id:12,
    vlan_dei:1,
    vlan_priority:3;
  };
  __be16 vlan_tci;
 };
 __be16 vlan_tpid;
};

struct flow_dissector_mpls_lse {
 u32 mpls_ttl:8,
  mpls_bos:1,
  mpls_tc:3,
  mpls_label:20;
};


struct flow_dissector_key_mpls {
 struct flow_dissector_mpls_lse ls[7];
 u8 used_lses;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dissector_set_mpls_lse(struct flow_dissector_key_mpls *mpls,
       int lse_index)
{
 mpls->used_lses |= 1 << lse_index;
}
# 89 "./include/net/flow_dissector.h"
struct flow_dissector_key_enc_opts {
 u8 data[255];


 u8 len;
 __be16 dst_opt_type;
};

struct flow_dissector_key_keyid {
 __be32 keyid;
};






struct flow_dissector_key_ipv4_addrs {

 __be32 src;
 __be32 dst;
};






struct flow_dissector_key_ipv6_addrs {

 struct in6_addr src;
 struct in6_addr dst;
};





struct flow_dissector_key_tipc {
 __be32 key;
};






struct flow_dissector_key_addrs {
 union {
  struct flow_dissector_key_ipv4_addrs v4addrs;
  struct flow_dissector_key_ipv6_addrs v6addrs;
  struct flow_dissector_key_tipc tipckey;
 };
};
# 154 "./include/net/flow_dissector.h"
struct flow_dissector_key_arp {
 __u32 sip;
 __u32 tip;
 __u8 op;
 unsigned char sha[6];
 unsigned char tha[6];
};







struct flow_dissector_key_ports {
 union {
  __be32 ports;
  struct {
   __be16 src;
   __be16 dst;
  };
 };
};







struct flow_dissector_key_icmp {
 struct {
  u8 type;
  u8 code;
 };
 u16 id;
};






struct flow_dissector_key_eth_addrs {

 unsigned char dst[6];
 unsigned char src[6];
};





struct flow_dissector_key_tcp {
 __be16 flags;
};






struct flow_dissector_key_ip {
 __u8 tos;
 __u8 ttl;
};






struct flow_dissector_key_meta {
 int ingress_ifindex;
 u16 ingress_iftype;
};
# 238 "./include/net/flow_dissector.h"
struct flow_dissector_key_ct {
 u16 ct_state;
 u16 ct_zone;
 u32 ct_mark;
 u32 ct_labels[4];
};





struct flow_dissector_key_hash {
 u32 hash;
};

enum flow_dissector_key_id {
 FLOW_DISSECTOR_KEY_CONTROL,
 FLOW_DISSECTOR_KEY_BASIC,
 FLOW_DISSECTOR_KEY_IPV4_ADDRS,
 FLOW_DISSECTOR_KEY_IPV6_ADDRS,
 FLOW_DISSECTOR_KEY_PORTS,
 FLOW_DISSECTOR_KEY_PORTS_RANGE,
 FLOW_DISSECTOR_KEY_ICMP,
 FLOW_DISSECTOR_KEY_ETH_ADDRS,
 FLOW_DISSECTOR_KEY_TIPC,
 FLOW_DISSECTOR_KEY_ARP,
 FLOW_DISSECTOR_KEY_VLAN,
 FLOW_DISSECTOR_KEY_FLOW_LABEL,
 FLOW_DISSECTOR_KEY_GRE_KEYID,
 FLOW_DISSECTOR_KEY_MPLS_ENTROPY,
 FLOW_DISSECTOR_KEY_ENC_KEYID,
 FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS,
 FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS,
 FLOW_DISSECTOR_KEY_ENC_CONTROL,
 FLOW_DISSECTOR_KEY_ENC_PORTS,
 FLOW_DISSECTOR_KEY_MPLS,
 FLOW_DISSECTOR_KEY_TCP,
 FLOW_DISSECTOR_KEY_IP,
 FLOW_DISSECTOR_KEY_CVLAN,
 FLOW_DISSECTOR_KEY_ENC_IP,
 FLOW_DISSECTOR_KEY_ENC_OPTS,
 FLOW_DISSECTOR_KEY_META,
 FLOW_DISSECTOR_KEY_CT,
 FLOW_DISSECTOR_KEY_HASH,

 FLOW_DISSECTOR_KEY_MAX,
};






struct flow_dissector_key {
 enum flow_dissector_key_id key_id;
 size_t offset;

};

struct flow_dissector {
 unsigned int used_keys;
 unsigned short int offset[FLOW_DISSECTOR_KEY_MAX];
};

struct flow_keys_basic {
 struct flow_dissector_key_control control;
 struct flow_dissector_key_basic basic;
};

struct flow_keys {
 struct flow_dissector_key_control control;

 struct flow_dissector_key_basic basic __attribute__((__aligned__(__alignof__(u64))));
 struct flow_dissector_key_tags tags;
 struct flow_dissector_key_vlan vlan;
 struct flow_dissector_key_vlan cvlan;
 struct flow_dissector_key_keyid keyid;
 struct flow_dissector_key_ports ports;
 struct flow_dissector_key_icmp icmp;

 struct flow_dissector_key_addrs addrs;
};




__be32 flow_get_u32_src(const struct flow_keys *flow);
__be32 flow_get_u32_dst(const struct flow_keys *flow);

extern struct flow_dissector flow_keys_dissector;
extern struct flow_dissector flow_keys_basic_dissector;
# 338 "./include/net/flow_dissector.h"
struct flow_keys_digest {
 u8 data[16];
};

void make_flow_keys_digest(struct flow_keys_digest *digest,
      const struct flow_keys *flow);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool flow_keys_have_l4(const struct flow_keys *keys)
{
 return (keys->ports.ports || keys->tags.flow_label);
}

u32 flow_hash_from_keys(struct flow_keys *keys);
void skb_flow_get_icmp_tci(const struct sk_buff *skb,
      struct flow_dissector_key_icmp *key_icmp,
      const void *data, int thoff, int hlen);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dissector_uses_key(const struct flow_dissector *flow_dissector,
          enum flow_dissector_key_id key_id)
{
 return flow_dissector->used_keys & (1 << key_id);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *skb_flow_dissector_target(struct flow_dissector *flow_dissector,
           enum flow_dissector_key_id key_id,
           void *target_container)
{
 return ((char *)target_container) + flow_dissector->offset[key_id];
}

struct bpf_flow_dissector {
 struct bpf_flow_keys *flow_keys;
 const struct sk_buff *skb;
 const void *data;
 const void *data_end;
};
# 18 "./include/net/flow.h" 2
# 27 "./include/net/flow.h"
struct flowi_tunnel {
 __be64 tun_id;
};

struct flowi_common {
 int flowic_oif;
 int flowic_iif;
 __u32 flowic_mark;
 __u8 flowic_tos;
 __u8 flowic_scope;
 __u8 flowic_proto;
 __u8 flowic_flags;



 __u32 flowic_secid;
 kuid_t flowic_uid;
 struct flowi_tunnel flowic_tun_key;
 __u32 flowic_multipath_hash;
};

union flowi_uli {
 struct {
  __be16 dport;
  __be16 sport;
 } ports;

 struct {
  __u8 type;
  __u8 code;
 } icmpt;

 struct {
  __le16 dport;
  __le16 sport;
 } dnports;

 __be32 gre_key;

 struct {
  __u8 type;
 } mht;
};

struct flowi4 {
 struct flowi_common __fl_common;
# 86 "./include/net/flow.h"
 __be32 saddr;
 __be32 daddr;

 union flowi_uli uli;






} __attribute__((__aligned__(64/8)));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flowi4_init_output(struct flowi4 *fl4, int oif,
          __u32 mark, __u8 tos, __u8 scope,
          __u8 proto, __u8 flags,
          __be32 daddr, __be32 saddr,
          __be16 dport, __be16 sport,
          kuid_t uid)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_iif = 1;
 fl4->__fl_common.flowic_mark = mark;
 fl4->__fl_common.flowic_tos = tos;
 fl4->__fl_common.flowic_scope = scope;
 fl4->__fl_common.flowic_proto = proto;
 fl4->__fl_common.flowic_flags = flags;
 fl4->__fl_common.flowic_secid = 0;
 fl4->__fl_common.flowic_tun_key.tun_id = 0;
 fl4->__fl_common.flowic_uid = uid;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
 fl4->uli.ports.dport = dport;
 fl4->uli.ports.sport = sport;
 fl4->__fl_common.flowic_multipath_hash = 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flowi4_update_output(struct flowi4 *fl4, int oif, __u8 tos,
     __be32 daddr, __be32 saddr)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_tos = tos;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
}


struct flowi6 {
 struct flowi_common __fl_common;
# 144 "./include/net/flow.h"
 struct in6_addr daddr;
 struct in6_addr saddr;

 __be32 flowlabel;
 union flowi_uli uli;






 __u32 mp_hash;
} __attribute__((__aligned__(64/8)));

struct flowidn {
 struct flowi_common __fl_common;






 __le16 daddr;
 __le16 saddr;
 union flowi_uli uli;


} __attribute__((__aligned__(64/8)));

struct flowi {
 union {
  struct flowi_common __fl_common;
  struct flowi4 ip4;
  struct flowi6 ip6;
  struct flowidn dn;
 } u;
# 190 "./include/net/flow.h"
} __attribute__((__aligned__(64/8)));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct flowi *flowi4_to_flowi(struct flowi4 *fl4)
{
 return ({ void *__mptr = (void *)(fl4); _Static_assert(__builtin_types_compatible_p(typeof(*(fl4)), typeof(((struct flowi *)0)->u.ip4)) || __builtin_types_compatible_p(typeof(*(fl4)), typeof(void)), "pointer type mismatch in container_of()"); ((struct flowi *)(__mptr - __builtin_offsetof(struct flowi, u.ip4))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct flowi_common *flowi4_to_flowi_common(struct flowi4 *fl4)
{
 return &(fl4->__fl_common);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct flowi *flowi6_to_flowi(struct flowi6 *fl6)
{
 return ({ void *__mptr = (void *)(fl6); _Static_assert(__builtin_types_compatible_p(typeof(*(fl6)), typeof(((struct flowi *)0)->u.ip6)) || __builtin_types_compatible_p(typeof(*(fl6)), typeof(void)), "pointer type mismatch in container_of()"); ((struct flowi *)(__mptr - __builtin_offsetof(struct flowi, u.ip6))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct flowi_common *flowi6_to_flowi_common(struct flowi6 *fl6)
{
 return &(fl6->__fl_common);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct flowi *flowidn_to_flowi(struct flowidn *fldn)
{
 return ({ void *__mptr = (void *)(fldn); _Static_assert(__builtin_types_compatible_p(typeof(*(fldn)), typeof(((struct flowi *)0)->u.dn)) || __builtin_types_compatible_p(typeof(*(fldn)), typeof(void)), "pointer type mismatch in container_of()"); ((struct flowi *)(__mptr - __builtin_offsetof(struct flowi, u.dn))); });
}

__u32 __get_hash_from_flowi6(const struct flowi6 *fl6, struct flow_keys *keys);
# 17 "./include/net/inet_sock_types.h" 2
# 31 "./include/net/inet_sock_types.h"
struct ip_options {
 __be32 faddr;
 __be32 nexthop;
 unsigned char optlen;
 unsigned char srr;
 unsigned char rr;
 unsigned char ts;
 unsigned char is_strictroute:1,
   srr_is_hit:1,
   is_changed:1,
   rr_needaddr:1,
   ts_needtime:1,
   ts_needaddr:1;
 unsigned char router_alert;
 unsigned char cipso;
 unsigned char __pad2;
 unsigned char __data[];
};

struct ip_options_rcu {
 struct callback_head rcu;
 struct ip_options opt;
};

struct ip_options_data {
 struct ip_options_rcu opt;
 char data[40];
};

struct inet_request_sock {
 struct request_sock req;
# 74 "./include/net/inet_sock_types.h"
 u16 snd_wscale : 4,
    rcv_wscale : 4,
    tstamp_ok : 1,
    sack_ok : 1,
    wscale_ok : 1,
    ecn_ok : 1,
    acked : 1,
    no_srccheck: 1,
    smc_ok : 1;
 u32 ir_mark;
 union {
  struct ip_options_rcu *ireq_opt;

  struct {
   struct ipv6_txoptions *ipv6_opt;
   struct sk_buff *pktopts;
  };

 };
};

struct inet_cork {
 unsigned int flags;
 __be32 addr;
 struct ip_options *opt;
 unsigned int fragsize;
 int length;
 struct dst_entry *dst;
 u8 tx_flags;
 __u8 ttl;
 __s16 tos;
 char priority;
 __u16 gso_size;
 u64 transmit_time;
 u32 mark;
};

struct inet_cork_full {
 struct inet_cork base;
 struct flowi fl;
};

struct ip_mc_socklist;
struct ipv6_pinfo;
struct rtable;
# 140 "./include/net/inet_sock_types.h"
struct inet_sock {

 struct sock sk;

 struct ipv6_pinfo *pinet6;







 __be32 inet_saddr;
 __s16 uc_ttl;
 __u16 cmsg_flags;
 struct ip_options_rcu *inet_opt;
 __be16 inet_sport;
 __u16 inet_id;

 __u8 tos;
 __u8 min_ttl;
 __u8 mc_ttl;
 __u8 pmtudisc;
 __u8 recverr:1,
    is_icsk:1,
    freebind:1,
    hdrincl:1,
    mc_loop:1,
    transparent:1,
    mc_all:1,
    nodefrag:1;
 __u8 bind_address_no_port:1,
    recverr_rfc4884:1,
    defer_connect:1;



 __u8 rcv_tos;
 __u8 convert_csum;
 int uc_index;
 int mc_index;
 __be32 mc_addr;
 struct ip_mc_socklist *mc_list;
 struct inet_cork_full cork;
};
# 200 "./include/net/inet_sock_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inet_sock *inet_sk(const struct sock *sk)
{
 return (struct inet_sock *)sk;
}
# 212 "./include/net/inet_sock_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sock *sk_to_full_sk(struct sock *sk)
{

 if (sk && sk->__sk_common.skc_state == TCP_NEW_SYN_RECV)
  sk = inet_reqsk(sk)->__req_common.skc_listener;

 return sk;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct sock *sk_const_to_full_sk(const struct sock *sk)
{

 if (sk && sk->__sk_common.skc_state == TCP_NEW_SYN_RECV)
  sk = ((const struct request_sock *)sk)->__req_common.skc_listener;

 return sk;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sock *skb_to_full_sk(const struct sk_buff *skb)
{
 return sk_to_full_sk(skb->sk);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inet_bound_dev_eq(bool l3mdev_accept, int bound_dev_if,
         int dif, int sdif)
{
 if (!bound_dev_if)
  return !sdif || l3mdev_accept;
 return bound_dev_if == dif || bound_dev_if == sdif;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inet_inc_convert_csum(struct sock *sk)
{
 inet_sk(sk)->convert_csum++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inet_dec_convert_csum(struct sock *sk)
{
 if (inet_sk(sk)->convert_csum > 0)
  inet_sk(sk)->convert_csum--;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inet_get_convert_csum(struct sock *sk)
{
 return !!inet_sk(sk)->convert_csum;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 inet_sk_flowi_flags(const struct sock *sk)
{
 __u8 flags = 0;

 if (inet_sk(sk)->transparent || inet_sk(sk)->hdrincl)
  flags |= 0x01;
 return flags;
}
# 15 "./include/net/inet_connection_sock_types.h" 2





struct inet_bind_bucket;
struct tcp_congestion_ops;





struct inet_connection_sock_af_ops {
 int (*queue_xmit)(struct sock *sk, struct sk_buff *skb, struct flowi *fl);
 void (*send_check)(struct sock *sk, struct sk_buff *skb);
 int (*rebuild_header)(struct sock *sk);
 void (*sk_rx_dst_set)(struct sock *sk, const struct sk_buff *skb);
 int (*conn_request)(struct sock *sk, struct sk_buff *skb);
 struct sock *(*syn_recv_sock)(const struct sock *sk, struct sk_buff *skb,
          struct request_sock *req,
          struct dst_entry *dst,
          struct request_sock *req_unhash,
          bool *own_req);
 u16 net_header_len;
 u16 net_frag_header_len;
 u16 sockaddr_len;
 int (*setsockopt)(struct sock *sk, int level, int optname,
      struct sockptr_struct optval, unsigned int optlen);
 int (*getsockopt)(struct sock *sk, int level, int optname,
      char *optval, int *optlen);
 void (*addr2sockaddr)(struct sock *sk, struct sockaddr *);
 void (*mtu_reduced)(struct sock *sk);
};
# 75 "./include/net/inet_connection_sock_types.h"
struct inet_connection_sock {

 struct inet_sock icsk_inet;
 struct request_sock_queue icsk_accept_queue;
 struct inet_bind_bucket *icsk_bind_hash;
 unsigned long icsk_timeout;
 struct timer_list icsk_retransmit_timer;
 struct timer_list icsk_delack_timer;
 __u32 icsk_rto;
 __u32 icsk_rto_min;
 __u32 icsk_delack_max;
 __u32 icsk_pmtu_cookie;
 const struct tcp_congestion_ops *icsk_ca_ops;
 const struct inet_connection_sock_af_ops *icsk_af_ops;
 const struct tcp_ulp_ops *icsk_ulp_ops;
 void *icsk_ulp_data;
 void (*icsk_clean_acked)(struct sock *sk, u32 acked_seq);
 struct hlist_node icsk_listen_portaddr_node;
 unsigned int (*icsk_sync_mss)(struct sock *sk, u32 pmtu);
 __u8 icsk_ca_state:5,
      icsk_ca_initialized:1,
      icsk_ca_setsockopt:1,
      icsk_ca_dst_locked:1;
 __u8 icsk_retransmits;
 __u8 icsk_pending;
 __u8 icsk_backoff;
 __u8 icsk_syn_retries;
 __u8 icsk_probes_out;
 __u16 icsk_ext_hdr_len;
 struct {
  __u8 pending;
  __u8 quick;
  __u8 pingpong;
  __u8 retry;
  __u32 ato;
  unsigned long timeout;
  __u32 lrcvtime;
  __u16 last_seg_size;
  __u16 rcv_mss;
 } icsk_ack;
 struct {

  int search_high;
  int search_low;


  u32 probe_size:31,

      enabled:1;

  u32 probe_timestamp;
 } icsk_mtup;
 u32 icsk_probes_tstamp;
 u32 icsk_user_timeout;

 u64 icsk_ca_priv[104 / sizeof(u64)];

};
# 22 "./include/linux/tcp.h" 2
# 1 "./include/net/inet_timewait_sock_types.h" 1
# 16 "./include/net/inet_timewait_sock_types.h"
struct inet_bind_bucket;






struct inet_timewait_sock {




 struct sock_common __tw_common;
# 50 "./include/net/inet_timewait_sock_types.h"
 __u32 tw_mark;
 volatile unsigned char tw_substate;
 unsigned char tw_rcv_wscale;



 __be16 tw_sport;

 unsigned int tw_kill : 1,
    tw_transparent : 1,
    tw_flowlabel : 20,
    tw_pad : 2,
    tw_tos : 8;
 u32 tw_txhash;
 u32 tw_priority;
 struct timer_list tw_timer;
 struct inet_bind_bucket *tw_tb;
};
# 23 "./include/linux/tcp.h" 2




# 1 "./include/uapi/linux/tcp.h" 1
# 23 "./include/uapi/linux/tcp.h"
# 1 "./include/linux/socket.h" 1
# 24 "./include/uapi/linux/tcp.h" 2

struct tcphdr {
 __be16 source;
 __be16 dest;
 __be32 seq;
 __be32 ack_seq;

 __u16 res1:4,
  doff:4,
  fin:1,
  syn:1,
  rst:1,
  psh:1,
  ack:1,
  urg:1,
  ece:1,
  cwr:1;
# 55 "./include/uapi/linux/tcp.h"
 __be16 window;
 __sum16 check;
 __be16 urg_ptr;
};






union tcp_word_hdr {
 struct tcphdr hdr;
 __be32 words[5];
};



enum {
 TCP_FLAG_CWR = (( __be32)((__u32)( (((__u32)((0x00800000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00800000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00800000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00800000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_ECE = (( __be32)((__u32)( (((__u32)((0x00400000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00400000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00400000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00400000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_URG = (( __be32)((__u32)( (((__u32)((0x00200000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00200000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00200000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00200000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_ACK = (( __be32)((__u32)( (((__u32)((0x00100000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00100000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00100000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00100000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_PSH = (( __be32)((__u32)( (((__u32)((0x00080000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00080000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00080000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00080000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_RST = (( __be32)((__u32)( (((__u32)((0x00040000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00040000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00040000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00040000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_SYN = (( __be32)((__u32)( (((__u32)((0x00020000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00020000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00020000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00020000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_FIN = (( __be32)((__u32)( (((__u32)((0x00010000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00010000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00010000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00010000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_RESERVED_BITS = (( __be32)((__u32)( (((__u32)((0x0F000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0F000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0F000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0F000000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_DATA_OFFSET = (( __be32)((__u32)( (((__u32)((0xF0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xF0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xF0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xF0000000)) & (__u32)0xff000000UL) >> 24))))
};
# 137 "./include/uapi/linux/tcp.h"
struct tcp_repair_opt {
 __u32 opt_code;
 __u32 opt_val;
};

struct tcp_repair_window {
 __u32 snd_wl1;
 __u32 snd_wnd;
 __u32 max_window;

 __u32 rcv_wnd;
 __u32 rcv_wup;
};

enum {
 TCP_NO_QUEUE,
 TCP_RECV_QUEUE,
 TCP_SEND_QUEUE,
 TCP_QUEUES_NR,
};


enum tcp_fastopen_client_fail {
 TFO_STATUS_UNSPEC,
 TFO_COOKIE_UNAVAILABLE,
 TFO_DATA_NOT_ACKED,
 TFO_SYN_RETRANSMITTED,
};
# 179 "./include/uapi/linux/tcp.h"
enum tcp_ca_state {




 TCP_CA_Open = 0,







 TCP_CA_Disorder = 1,






 TCP_CA_CWR = 2,





 TCP_CA_Recovery = 3,




 TCP_CA_Loss = 4

};

struct tcp_info {
 __u8 tcpi_state;
 __u8 tcpi_ca_state;
 __u8 tcpi_retransmits;
 __u8 tcpi_probes;
 __u8 tcpi_backoff;
 __u8 tcpi_options;
 __u8 tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;
 __u8 tcpi_delivery_rate_app_limited:1, tcpi_fastopen_client_fail:2;

 __u32 tcpi_rto;
 __u32 tcpi_ato;
 __u32 tcpi_snd_mss;
 __u32 tcpi_rcv_mss;

 __u32 tcpi_unacked;
 __u32 tcpi_sacked;
 __u32 tcpi_lost;
 __u32 tcpi_retrans;
 __u32 tcpi_fackets;


 __u32 tcpi_last_data_sent;
 __u32 tcpi_last_ack_sent;
 __u32 tcpi_last_data_recv;
 __u32 tcpi_last_ack_recv;


 __u32 tcpi_pmtu;
 __u32 tcpi_rcv_ssthresh;
 __u32 tcpi_rtt;
 __u32 tcpi_rttvar;
 __u32 tcpi_snd_ssthresh;
 __u32 tcpi_snd_cwnd;
 __u32 tcpi_advmss;
 __u32 tcpi_reordering;

 __u32 tcpi_rcv_rtt;
 __u32 tcpi_rcv_space;

 __u32 tcpi_total_retrans;

 __u64 tcpi_pacing_rate;
 __u64 tcpi_max_pacing_rate;
 __u64 tcpi_bytes_acked;
 __u64 tcpi_bytes_received;
 __u32 tcpi_segs_out;
 __u32 tcpi_segs_in;

 __u32 tcpi_notsent_bytes;
 __u32 tcpi_min_rtt;
 __u32 tcpi_data_segs_in;
 __u32 tcpi_data_segs_out;

 __u64 tcpi_delivery_rate;

 __u64 tcpi_busy_time;
 __u64 tcpi_rwnd_limited;
 __u64 tcpi_sndbuf_limited;

 __u32 tcpi_delivered;
 __u32 tcpi_delivered_ce;

 __u64 tcpi_bytes_sent;
 __u64 tcpi_bytes_retrans;
 __u32 tcpi_dsack_dups;
 __u32 tcpi_reord_seen;

 __u32 tcpi_rcv_ooopack;

 __u32 tcpi_snd_wnd;


};


enum {
 TCP_NLA_PAD,
 TCP_NLA_BUSY,
 TCP_NLA_RWND_LIMITED,
 TCP_NLA_SNDBUF_LIMITED,
 TCP_NLA_DATA_SEGS_OUT,
 TCP_NLA_TOTAL_RETRANS,
 TCP_NLA_PACING_RATE,
 TCP_NLA_DELIVERY_RATE,
 TCP_NLA_SND_CWND,
 TCP_NLA_REORDERING,
 TCP_NLA_MIN_RTT,
 TCP_NLA_RECUR_RETRANS,
 TCP_NLA_DELIVERY_RATE_APP_LMT,
 TCP_NLA_SNDQ_SIZE,
 TCP_NLA_CA_STATE,
 TCP_NLA_SND_SSTHRESH,
 TCP_NLA_DELIVERED,
 TCP_NLA_DELIVERED_CE,
 TCP_NLA_BYTES_SENT,
 TCP_NLA_BYTES_RETRANS,
 TCP_NLA_DSACK_DUPS,
 TCP_NLA_REORD_SEEN,
 TCP_NLA_SRTT,
 TCP_NLA_TIMEOUT_REHASH,
 TCP_NLA_BYTES_NOTSENT,
 TCP_NLA_EDT,
 TCP_NLA_TTL,
};
# 327 "./include/uapi/linux/tcp.h"
struct tcp_md5sig {
 struct __kernel_sockaddr_storage tcpm_addr;
 __u8 tcpm_flags;
 __u8 tcpm_prefixlen;
 __u16 tcpm_keylen;
 int tcpm_ifindex;
 __u8 tcpm_key[80];
};


struct tcp_diag_md5sig {
 __u8 tcpm_family;
 __u8 tcpm_prefixlen;
 __u16 tcpm_keylen;
 __be32 tcpm_addr[4];
 __u8 tcpm_key[80];
};




struct tcp_zerocopy_receive {
 __u64 address;
 __u32 length;
 __u32 recv_skip_hint;
 __u32 inq;
 __s32 err;
 __u64 copybuf_address;
 __s32 copybuf_len;
 __u32 flags;
 __u64 msg_control;
 __u64 msg_controllen;
 __u32 msg_flags;
 __u32 reserved;
};
# 28 "./include/linux/tcp.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tcphdr *tcp_hdr(const struct sk_buff *skb)
{
 return (struct tcphdr *)skb_transport_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __tcp_hdrlen(const struct tcphdr *th)
{
 return th->doff * 4;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int tcp_hdrlen(const struct sk_buff *skb)
{
 return __tcp_hdrlen(tcp_hdr(skb));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tcphdr *inner_tcp_hdr(const struct sk_buff *skb)
{
 return (struct tcphdr *)skb_inner_transport_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int inner_tcp_hdrlen(const struct sk_buff *skb)
{
 return inner_tcp_hdr(skb)->doff * 4;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int tcp_optlen(const struct sk_buff *skb)
{
 return (tcp_hdr(skb)->doff - 5) * 4;
}







struct tcp_fastopen_cookie {
 __le64 val[(((16) + (sizeof(u64)) - 1) / (sizeof(u64)))];
 s8 len;
 bool exp;
};


struct tcp_sack_block_wire {
 __be32 start_seq;
 __be32 end_seq;
};

struct tcp_sack_block {
 u32 start_seq;
 u32 end_seq;
};





struct tcp_options_received {

 int ts_recent_stamp;
 u32 ts_recent;
 u32 rcv_tsval;
 u32 rcv_tsecr;
 u16 saw_tstamp : 1,
  tstamp_ok : 1,
  dsack : 1,
  wscale_ok : 1,
  sack_ok : 3,
  smc_ok : 1,
  snd_wscale : 4,
  rcv_wscale : 4;
 u8 saw_unknown:1,
  unused:7;
 u8 num_sacks;
 u16 user_mss;
 u16 mss_clamp;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tcp_clear_options(struct tcp_options_received *rx_opt)
{
 rx_opt->tstamp_ok = rx_opt->sack_ok = 0;
 rx_opt->wscale_ok = rx_opt->snd_wscale = 0;



}







struct tcp_request_sock_ops;

struct tcp_request_sock {
 struct inet_request_sock req;
 const struct tcp_request_sock_ops *af_specific;
 u64 snt_synack;
 bool tfo_listener;
 bool is_mptcp;



 u32 txhash;
 u32 rcv_isn;
 u32 snt_isn;
 u32 ts_off;
 u32 last_oow_ack_time;
 u32 rcv_nxt;



 u8 syn_tos;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tcp_request_sock *tcp_rsk(const struct request_sock *req)
{
 return (struct tcp_request_sock *)req;
}

struct tcp_sock {

 struct inet_connection_sock inet_conn;
 u16 tcp_header_len;
 u16 gso_segs;





 __be32 pred_flags;






 u64 bytes_received;



 u32 segs_in;


 u32 data_segs_in;


  u32 rcv_nxt;
 u32 copied_seq;
 u32 rcv_wup;
  u32 snd_nxt;
 u32 segs_out;


 u32 data_segs_out;


 u64 bytes_sent;


 u64 bytes_acked;



 u32 dsack_dups;


  u32 snd_una;
  u32 snd_sml;
 u32 rcv_tstamp;
 u32 lsndtime;
 u32 last_oow_ack_time;
 u32 compressed_ack_rcv_nxt;

 u32 tsoffset;

 struct list_head tsq_node;
 struct list_head tsorted_sent_queue;

 u32 snd_wl1;
 u32 snd_wnd;
 u32 max_window;
 u32 mss_cache;

 u32 window_clamp;
 u32 rcv_ssthresh;


 struct tcp_rack {
  u64 mstamp;
  u32 rtt_us;
  u32 end_seq;
  u32 last_delivered;
  u8 reo_wnd_steps;

  u8 reo_wnd_persist:5,
     dsack_seen:1,
     advanced:1;
 } rack;
 u16 advmss;
 u8 compressed_ack;
 u8 dup_ack_counter:2,
  tlp_retrans:1,
  unused:5;
 u32 chrono_start;
 u32 chrono_stat[3];
 u8 chrono_type:2,
  rate_app_limited:1,
  fastopen_connect:1,
  fastopen_no_cookie:1,
  is_sack_reneg:1,
  fastopen_client_fail:2;
 u8 nonagle : 4,
  thin_lto : 1,
  recvmsg_inq : 1,
  repair : 1,
  frto : 1;
 u8 repair_queue;
 u8 save_syn:2,
  syn_data:1,
  syn_fastopen:1,
  syn_fastopen_exp:1,
  syn_fastopen_ch:1,
  syn_data_acked:1,
  is_cwnd_limited:1;
 u32 tlp_high_seq;

 u32 tcp_tx_delay;
 u64 tcp_wstamp_ns;
 u64 tcp_clock_cache;


 u64 tcp_mstamp;
 u32 srtt_us;
 u32 mdev_us;
 u32 mdev_max_us;
 u32 rttvar_us;
 u32 rtt_seq;
 struct minmax rtt_min;

 u32 packets_out;
 u32 retrans_out;
 u32 max_packets_out;
 u32 max_packets_seq;

 u16 urg_data;
 u8 ecn_flags;
 u8 keepalive_probes;
 u32 reordering;
 u32 reord_seen;
 u32 snd_up;




 struct tcp_options_received rx_opt;




  u32 snd_ssthresh;
  u32 snd_cwnd;
 u32 snd_cwnd_cnt;
 u32 snd_cwnd_clamp;
 u32 snd_cwnd_used;
 u32 snd_cwnd_stamp;
 u32 prior_cwnd;
 u32 prr_delivered;

 u32 prr_out;
 u32 delivered;
 u32 delivered_ce;
 u32 lost;
 u32 app_limited;
 u64 first_tx_mstamp;
 u64 delivered_mstamp;
 u32 rate_delivered;
 u32 rate_interval_us;

  u32 rcv_wnd;
 u32 write_seq;
 u32 notsent_lowat;
 u32 pushed_seq;
 u32 lost_out;
 u32 sacked_out;

 struct hrtimer pacing_timer;
 struct hrtimer compressed_ack_timer;


 struct sk_buff* lost_skb_hint;
 struct sk_buff *retransmit_skb_hint;


 struct rb_root out_of_order_queue;
 struct sk_buff *ooo_last_skb;


 struct tcp_sack_block duplicate_sack[1];
 struct tcp_sack_block selective_acks[4];

 struct tcp_sack_block recv_sack_cache[4];

 struct sk_buff *highest_sack;





 int lost_cnt_hint;

 u32 prior_ssthresh;
 u32 high_seq;

 u32 retrans_stamp;


 u32 undo_marker;
 int undo_retrans;
 u64 bytes_retrans;


 u32 total_retrans;

 u32 urg_seq;
 unsigned int keepalive_time;
 unsigned int keepalive_intvl;

 int linger2;




 u8 bpf_sock_ops_cb_flags;







 u16 timeout_rehash;

 u32 rcv_ooopack;


 u32 rcv_rtt_last_tsecr;
 struct {
  u32 rtt_us;
  u32 seq;
  u64 time;
 } rcv_rtt_est;


 struct {
  u32 space;
  u32 seq;
  u64 time;
 } rcvq_space;


 struct {
  u32 probe_seq_start;
  u32 probe_seq_end;
 } mtu_probe;
 u32 mtu_info;
# 414 "./include/linux/tcp.h"
 struct tcp_fastopen_request *fastopen_req;



 struct request_sock *fastopen_rsk;
 struct saved_syn *saved_syn;
};

enum tsq_enum {
 TSQ_THROTTLED,
 TSQ_QUEUED,
 TCP_TSQ_DEFERRED,
 TCP_WRITE_TIMER_DEFERRED,
 TCP_DELACK_TIMER_DEFERRED,
 TCP_MTU_REDUCED_DEFERRED,


};

enum tsq_flags {
 TSQF_THROTTLED = (1UL << TSQ_THROTTLED),
 TSQF_QUEUED = (1UL << TSQ_QUEUED),
 TCPF_TSQ_DEFERRED = (1UL << TCP_TSQ_DEFERRED),
 TCPF_WRITE_TIMER_DEFERRED = (1UL << TCP_WRITE_TIMER_DEFERRED),
 TCPF_DELACK_TIMER_DEFERRED = (1UL << TCP_DELACK_TIMER_DEFERRED),
 TCPF_MTU_REDUCED_DEFERRED = (1UL << TCP_MTU_REDUCED_DEFERRED),
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tcp_sock *tcp_sk(const struct sock *sk)
{
 return (struct tcp_sock *)sk;
}

struct tcp_timewait_sock {
 struct inet_timewait_sock tw_sk;


 u32 tw_rcv_wnd;
 u32 tw_ts_offset;
 u32 tw_ts_recent;


 u32 tw_last_oow_ack_time;

 int tw_ts_recent_stamp;
 u32 tw_tx_delay;



};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tcp_timewait_sock *tcp_twsk(const struct sock *sk)
{
 return (struct tcp_timewait_sock *)sk;
}

bool tcp_passive_fastopen(const struct sock *sk);

void fastopen_queue_tune(struct sock *sk, int backlog);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tcp_move_syn(struct tcp_sock *tp,
    struct request_sock *req)
{
 tp->saved_syn = req->saved_syn;
 req->saved_syn = ((void *)0);
}

void tcp_saved_syn_free(struct tcp_sock *tp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 tcp_saved_syn_len(const struct saved_syn *saved_syn)
{
 return saved_syn->mac_hdrlen + saved_syn->network_hdrlen +
  saved_syn->tcp_hdrlen;
}

struct sk_buff *tcp_get_timestamping_opt_stats(const struct sock *sk,
            const struct sk_buff *orig_skb,
            const struct sk_buff *ack_skb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 tcp_mss_clamp(const struct tcp_sock *tp, u16 mss)
{



 u16 user_mss = ({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_338(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(tp->rx_opt.user_mss) == sizeof(char) || sizeof(tp->rx_opt.user_mss) == sizeof(short) || sizeof(tp->rx_opt.user_mss) == sizeof(int) || sizeof(tp->rx_opt.user_mss) == sizeof(long)) || sizeof(tp->rx_opt.user_mss) == sizeof(long long))) __compiletime_assert_338(); } while (0); (*(const volatile typeof( _Generic((tp->rx_opt.user_mss), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (tp->rx_opt.user_mss))) *)&(tp->rx_opt.user_mss)); });

 return (user_mss && user_mss < mss) ? user_mss : mss;
}

int tcp_skb_shift(struct sk_buff *to, struct sk_buff *from, int pcount,
    int shiftlen);

void tcp_sock_set_cork(struct sock *sk, bool on);
int tcp_sock_set_keepcnt(struct sock *sk, int val);
int tcp_sock_set_keepidle_locked(struct sock *sk, int val);
int tcp_sock_set_keepidle(struct sock *sk, int val);
int tcp_sock_set_keepintvl(struct sock *sk, int val);
void tcp_sock_set_nodelay(struct sock *sk);
void tcp_sock_set_quickack(struct sock *sk, int val);
int tcp_sock_set_syncnt(struct sock *sk, int val);
void tcp_sock_set_user_timeout(struct sock *sk, u32 val);
# 7 "./include/linux/ipv6.h" 2
# 1 "./include/linux/udp.h" 1
# 20 "./include/linux/udp.h"
# 1 "./include/uapi/linux/udp.h" 1
# 23 "./include/uapi/linux/udp.h"
struct udphdr {
 __be16 source;
 __be16 dest;
 __be16 len;
 __sum16 check;
};
# 21 "./include/linux/udp.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct udphdr *udp_hdr(const struct sk_buff *skb)
{
 return (struct udphdr *)skb_transport_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct udphdr *inner_udp_hdr(const struct sk_buff *skb)
{
 return (struct udphdr *)skb_inner_transport_header(skb);
}

struct udp_sock {

 struct inet_sock inet;



 int pending;
 unsigned int corkflag;
 __u8 encap_type;
 unsigned char no_check6_tx:1,
    no_check6_rx:1,
    encap_enabled:1,




    gro_enabled:1,
    accept_udp_l4:1,
    accept_udp_fraglist:1;




 __u16 len;
 __u16 gso_size;



 __u16 pcslen;
 __u16 pcrlen;




 __u8 pcflag;
 __u8 unused[3];



 int (*encap_rcv)(struct sock *sk, struct sk_buff *skb);
 int (*encap_err_lookup)(struct sock *sk, struct sk_buff *skb);
 void (*encap_destroy)(struct sock *sk);


 struct sk_buff * (*gro_receive)(struct sock *sk,
            struct list_head *head,
            struct sk_buff *skb);
 int (*gro_complete)(struct sock *sk,
      struct sk_buff *skb,
      int nhoff);


 struct sk_buff_head reader_queue __attribute__((__aligned__((1 << (6)))));


 int forward_deficit;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct udp_sock *udp_sk(const struct sock *sk)
{
 return (struct udp_sock *)sk;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void udp_set_no_check6_tx(struct sock *sk, bool val)
{
 udp_sk(sk)->no_check6_tx = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void udp_set_no_check6_rx(struct sock *sk, bool val)
{
 udp_sk(sk)->no_check6_rx = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool udp_get_no_check6_tx(struct sock *sk)
{
 return udp_sk(sk)->no_check6_tx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool udp_get_no_check6_rx(struct sock *sk)
{
 return udp_sk(sk)->no_check6_rx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void udp_allow_gso(struct sock *sk)
{
 udp_sk(sk)->accept_udp_l4 = 1;
 udp_sk(sk)->accept_udp_fraglist = 1;
}
# 8 "./include/linux/ipv6.h" 2

# 1 "./include/net/inet_sock.h" 1
# 10 "./include/linux/ipv6.h" 2


# 1 "./include/uapi/linux/ipv6.h" 1
# 21 "./include/uapi/linux/ipv6.h"
struct in6_pktinfo {
 struct in6_addr ipi6_addr;
 int ipi6_ifindex;
};



struct ip6_mtuinfo {
 struct sockaddr_in6 ip6m_addr;
 __u32 ip6m_mtu;
};


struct in6_ifreq {
 struct in6_addr ifr6_addr;
 __u32 ifr6_prefixlen;
 int ifr6_ifindex;
};
# 49 "./include/uapi/linux/ipv6.h"
struct ipv6_rt_hdr {
 __u8 nexthdr;
 __u8 hdrlen;
 __u8 type;
 __u8 segments_left;





};


struct ipv6_opt_hdr {
 __u8 nexthdr;
 __u8 hdrlen;



} __attribute__((packed));
# 80 "./include/uapi/linux/ipv6.h"
struct rt0_hdr {
 struct ipv6_rt_hdr rt_hdr;
 __u32 reserved;
 struct in6_addr addr[0];


};





struct rt2_hdr {
 struct ipv6_rt_hdr rt_hdr;
 __u32 reserved;
 struct in6_addr addr;


};





struct ipv6_destopt_hao {
 __u8 type;
 __u8 length;
 struct in6_addr addr;
} __attribute__((packed));
# 117 "./include/uapi/linux/ipv6.h"
struct ipv6hdr {

 __u8 priority:4,
    version:4;






 __u8 flow_lbl[3];

 __be16 payload_len;
 __u8 nexthdr;
 __u8 hop_limit;

 struct in6_addr saddr;
 struct in6_addr daddr;
};



enum {
 DEVCONF_FORWARDING = 0,
 DEVCONF_HOPLIMIT,
 DEVCONF_MTU6,
 DEVCONF_ACCEPT_RA,
 DEVCONF_ACCEPT_REDIRECTS,
 DEVCONF_AUTOCONF,
 DEVCONF_DAD_TRANSMITS,
 DEVCONF_RTR_SOLICITS,
 DEVCONF_RTR_SOLICIT_INTERVAL,
 DEVCONF_RTR_SOLICIT_DELAY,
 DEVCONF_USE_TEMPADDR,
 DEVCONF_TEMP_VALID_LFT,
 DEVCONF_TEMP_PREFERED_LFT,
 DEVCONF_REGEN_MAX_RETRY,
 DEVCONF_MAX_DESYNC_FACTOR,
 DEVCONF_MAX_ADDRESSES,
 DEVCONF_FORCE_MLD_VERSION,
 DEVCONF_ACCEPT_RA_DEFRTR,
 DEVCONF_ACCEPT_RA_PINFO,
 DEVCONF_ACCEPT_RA_RTR_PREF,
 DEVCONF_RTR_PROBE_INTERVAL,
 DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN,
 DEVCONF_PROXY_NDP,
 DEVCONF_OPTIMISTIC_DAD,
 DEVCONF_ACCEPT_SOURCE_ROUTE,
 DEVCONF_MC_FORWARDING,
 DEVCONF_DISABLE_IPV6,
 DEVCONF_ACCEPT_DAD,
 DEVCONF_FORCE_TLLAO,
 DEVCONF_NDISC_NOTIFY,
 DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL,
 DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL,
 DEVCONF_SUPPRESS_FRAG_NDISC,
 DEVCONF_ACCEPT_RA_FROM_LOCAL,
 DEVCONF_USE_OPTIMISTIC,
 DEVCONF_ACCEPT_RA_MTU,
 DEVCONF_STABLE_SECRET,
 DEVCONF_USE_OIF_ADDRS_ONLY,
 DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT,
 DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN,
 DEVCONF_DROP_UNICAST_IN_L2_MULTICAST,
 DEVCONF_DROP_UNSOLICITED_NA,
 DEVCONF_KEEP_ADDR_ON_DOWN,
 DEVCONF_RTR_SOLICIT_MAX_INTERVAL,
 DEVCONF_SEG6_ENABLED,
 DEVCONF_SEG6_REQUIRE_HMAC,
 DEVCONF_ENHANCED_DAD,
 DEVCONF_ADDR_GEN_MODE,
 DEVCONF_DISABLE_POLICY,
 DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN,
 DEVCONF_NDISC_TCLASS,
 DEVCONF_RPL_SEG_ENABLED,
 DEVCONF_RA_DEFRTR_METRIC,
 DEVCONF_IOAM6_ENABLED,
 DEVCONF_IOAM6_ID,
 DEVCONF_IOAM6_ID_WIDE,
 DEVCONF_NDISC_EVICT_NOCARRIER,
 DEVCONF_MAX
};
# 13 "./include/linux/ipv6.h" 2






struct ipv6_devconf {
 __s32 forwarding;
 __s32 hop_limit;
 __s32 mtu6;
 __s32 accept_ra;
 __s32 accept_redirects;
 __s32 autoconf;
 __s32 dad_transmits;
 __s32 rtr_solicits;
 __s32 rtr_solicit_interval;
 __s32 rtr_solicit_max_interval;
 __s32 rtr_solicit_delay;
 __s32 force_mld_version;
 __s32 mldv1_unsolicited_report_interval;
 __s32 mldv2_unsolicited_report_interval;
 __s32 use_tempaddr;
 __s32 temp_valid_lft;
 __s32 temp_prefered_lft;
 __s32 regen_max_retry;
 __s32 max_desync_factor;
 __s32 max_addresses;
 __s32 accept_ra_defrtr;
 __u32 ra_defrtr_metric;
 __s32 accept_ra_min_hop_limit;
 __s32 accept_ra_pinfo;
 __s32 ignore_routes_with_linkdown;
# 53 "./include/linux/ipv6.h"
 __s32 proxy_ndp;
 __s32 accept_source_route;
 __s32 accept_ra_from_local;







 __s32 disable_ipv6;
 __s32 drop_unicast_in_l2_multicast;
 __s32 accept_dad;
 __s32 force_tllao;
 __s32 ndisc_notify;
 __s32 suppress_frag_ndisc;
 __s32 accept_ra_mtu;
 __s32 drop_unsolicited_na;
 struct ipv6_stable_secret {
  bool initialized;
  struct in6_addr secret;
 } stable_secret;
 __s32 use_oif_addrs_only;
 __s32 keep_addr_on_down;
 __s32 seg6_enabled;



 __u32 enhanced_dad;
 __u32 addr_gen_mode;
 __s32 disable_policy;
 __s32 ndisc_tclass;
 __s32 rpl_seg_enabled;
 __u32 ioam6_id;
 __u32 ioam6_id_wide;
 __u8 ioam6_enabled;
 __u8 ndisc_evict_nocarrier;

 struct ctl_table_header *sysctl_header;
};

struct ipv6_params {
 __s32 disable_ipv6;
 __s32 autoconf;
};
extern struct ipv6_params ipv6_defaults;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ipv6hdr *ipv6_hdr(const struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_network_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ipv6hdr *inner_ipv6_hdr(const struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_inner_network_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ipv6hdr *ipipv6_hdr(const struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_transport_header(skb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ipv6_transport_len(const struct sk_buff *skb)
{
 return (__builtin_constant_p((__u16)(( __u16)(__be16)(ipv6_hdr(skb)->payload_len))) ? ((__u16)( (((__u16)(( __u16)(__be16)(ipv6_hdr(skb)->payload_len)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(ipv6_hdr(skb)->payload_len)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(ipv6_hdr(skb)->payload_len))) + sizeof(struct ipv6hdr) -
        skb_network_header_len(skb);
}






struct inet6_skb_parm {
 int iif;
 __be16 ra;
 __u16 dst0;
 __u16 srcrt;
 __u16 dst1;
 __u16 lastopt;
 __u16 nhoff;
 __u16 flags;



 __u16 frag_max_size;
# 148 "./include/linux/ipv6.h"
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_l3mdev_skb(__u16 flags)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inet6_iif(const struct sk_buff *skb)
{
 bool l3_slave = ipv6_l3mdev_skb(((struct inet6_skb_parm*)((skb)->cb))->flags);

 return l3_slave ? skb->skb_iif : ((struct inet6_skb_parm*)((skb)->cb))->iif;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inet6_is_jumbogram(const struct sk_buff *skb)
{
 return !!(((struct inet6_skb_parm*)((skb)->cb))->flags & 128);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inet6_sdif(const struct sk_buff *skb)
{




 return 0;
}

struct tcp6_request_sock {
 struct tcp_request_sock tcp6rsk_tcp;
};

struct ipv6_mc_socklist;
struct ipv6_ac_socklist;
struct ipv6_fl_socklist;

struct inet6_cork {
 struct ipv6_txoptions *opt;
 u8 hop_limit;
 u8 tclass;
};
# 209 "./include/linux/ipv6.h"
struct ipv6_pinfo {
 struct in6_addr saddr;
 struct in6_pktinfo sticky_pktinfo;
 const struct in6_addr *daddr_cache;




 __be32 flow_label;
 __u32 frag_size;
# 228 "./include/linux/ipv6.h"
 __u16 __unused_1:7;
 __s16 hop_limit:9;
# 238 "./include/linux/ipv6.h"
 __u16 mc_loop:1,
    __unused_2:6;
 __s16 mcast_hops:9;

 int ucast_oif;
 int mcast_oif;


 union {
  struct {
   __u16 srcrt:1,
    osrcrt:1,
           rxinfo:1,
           rxoinfo:1,
    rxhlim:1,
    rxohlim:1,
    hopopts:1,
    ohopopts:1,
    dstopts:1,
    odstopts:1,
                                rxflow:1,
    rxtclass:1,
    rxpmtu:1,
    rxorigdstaddr:1,
    recvfragsize:1;

  } bits;
  __u16 all;
 } rxopt;


 __u16 recverr:1,
                         sndflow:1,
    repflow:1,
    pmtudisc:3,
    padding:1,
    srcprefs:3,



    dontfrag:1,
    autoflowlabel:1,
    autoflowlabel_set:1,
    mc_all:1,
    recverr_rfc4884:1,
    rtalert_isolate:1;
 __u8 min_hopcount;
 __u8 tclass;
 __be32 rcv_flowinfo;

 __u32 dst_cookie;

 struct ipv6_mc_socklist *ipv6_mc_list;
 struct ipv6_ac_socklist *ipv6_ac_list;
 struct ipv6_fl_socklist *ipv6_fl_list;

 struct ipv6_txoptions *opt;
 struct sk_buff *pktoptions;
 struct sk_buff *rxpmtu;
 struct inet6_cork cork;
};


struct raw6_sock {

 struct inet_sock inet;
 __u32 checksum;
 __u32 offset;
 struct icmp6_filter filter;
 __u32 ip6mr_table;

 struct ipv6_pinfo inet6;
};

struct udp6_sock {
 struct udp_sock udp;

 struct ipv6_pinfo inet6;
};

struct tcp6_sock {
 struct tcp_sock tcp;

 struct ipv6_pinfo inet6;
};

extern int inet6_sk_rebuild_header(struct sock *sk);

struct tcp6_timewait_sock {
 struct tcp_timewait_sock tcp6tw_tcp;
};


bool ipv6_mod_enabled(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ipv6_pinfo *inet6_sk(const struct sock *__sk)
{
 return sk_fullsock(__sk) ? inet_sk(__sk)->pinet6 : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct raw6_sock *raw6_sk(const struct sock *sk)
{
 return (struct raw6_sock *)sk;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct in6_addr *inet6_rcv_saddr(const struct sock *sk)
{
 if (sk->__sk_common.skc_family == 10)
  return &sk->__sk_common.skc_v6_rcv_saddr;
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inet_v6_ipv6only(const struct sock *sk)
{

 return ((sk->__sk_common.skc_ipv6only));
}
# 17 "./include/net/ipv6_api.h" 2
# 1 "./include/linux/jhash.h" 1
# 27 "./include/linux/jhash.h"
# 1 "./include/linux/unaligned/packed_struct.h" 1





struct __una_u16 { u16 x; } __attribute__((__packed__));
struct __una_u32 { u32 x; } __attribute__((__packed__));
struct __una_u64 { u64 x; } __attribute__((__packed__));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __get_unaligned_cpu16(const void *p)
{
 const struct __una_u16 *ptr = (const struct __una_u16 *)p;
 return ptr->x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __get_unaligned_cpu32(const void *p)
{
 const struct __una_u32 *ptr = (const struct __una_u32 *)p;
 return ptr->x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __get_unaligned_cpu64(const void *p)
{
 const struct __una_u64 *ptr = (const struct __una_u64 *)p;
 return ptr->x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __put_unaligned_cpu16(u16 val, void *p)
{
 struct __una_u16 *ptr = (struct __una_u16 *)p;
 ptr->x = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __put_unaligned_cpu32(u32 val, void *p)
{
 struct __una_u32 *ptr = (struct __una_u32 *)p;
 ptr->x = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __put_unaligned_cpu64(u64 val, void *p)
{
 struct __una_u64 *ptr = (struct __una_u64 *)p;
 ptr->x = val;
}
# 28 "./include/linux/jhash.h" 2
# 70 "./include/linux/jhash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 jhash(const void *key, u32 length, u32 initval)
{
 u32 a, b, c;
 const u8 *k = key;


 a = b = c = 0xdeadbeef + length + initval;


 while (length > 12) {
  a += __get_unaligned_cpu32(k);
  b += __get_unaligned_cpu32(k + 4);
  c += __get_unaligned_cpu32(k + 8);
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 12;
  k += 12;
 }

 switch (length) {
 case 12: c += (u32)k[11]<<24; __attribute__((__fallthrough__));
 case 11: c += (u32)k[10]<<16; __attribute__((__fallthrough__));
 case 10: c += (u32)k[9]<<8; __attribute__((__fallthrough__));
 case 9: c += k[8]; __attribute__((__fallthrough__));
 case 8: b += (u32)k[7]<<24; __attribute__((__fallthrough__));
 case 7: b += (u32)k[6]<<16; __attribute__((__fallthrough__));
 case 6: b += (u32)k[5]<<8; __attribute__((__fallthrough__));
 case 5: b += k[4]; __attribute__((__fallthrough__));
 case 4: a += (u32)k[3]<<24; __attribute__((__fallthrough__));
 case 3: a += (u32)k[2]<<16; __attribute__((__fallthrough__));
 case 2: a += (u32)k[1]<<8; __attribute__((__fallthrough__));
 case 1: a += k[0];
   { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
   break;
 case 0:
  break;
 }

 return c;
}
# 117 "./include/linux/jhash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 jhash2(const u32 *k, u32 length, u32 initval)
{
 u32 a, b, c;


 a = b = c = 0xdeadbeef + (length<<2) + initval;


 while (length > 3) {
  a += k[0];
  b += k[1];
  c += k[2];
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 3;
  k += 3;
 }


 switch (length) {
 case 3: c += k[2]; __attribute__((__fallthrough__));
 case 2: b += k[1]; __attribute__((__fallthrough__));
 case 1: a += k[0];
  { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
  break;
 case 0:
  break;
 }

 return c;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __jhash_nwords(u32 a, u32 b, u32 c, u32 initval)
{
 a += initval;
 b += initval;
 c += initval;

 { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };

 return c;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 jhash_3words(u32 a, u32 b, u32 c, u32 initval)
{
 return __jhash_nwords(a, b, c, initval + 0xdeadbeef + (3 << 2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 jhash_2words(u32 a, u32 b, u32 initval)
{
 return __jhash_nwords(a, b, 0, initval + 0xdeadbeef + (2 << 2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 jhash_1word(u32 a, u32 initval)
{
 return __jhash_nwords(a, 0, 0, initval + 0xdeadbeef + (1 << 2));
}
# 18 "./include/net/ipv6_api.h" 2
# 1 "./include/linux/refcount.h" 1
# 19 "./include/net/ipv6_api.h" 2
# 1 "./include/linux/jump_label_ratelimit.h" 1





# 1 "./include/linux/workqueue.h" 1
# 7 "./include/linux/jump_label_ratelimit.h" 2


struct static_key_deferred {
 struct static_key key;
 unsigned long timeout;
 struct delayed_work work;
};

struct static_key_true_deferred {
 struct static_key_true key;
 unsigned long timeout;
 struct delayed_work work;
};

struct static_key_false_deferred {
 struct static_key_false key;
 unsigned long timeout;
 struct delayed_work work;
};
# 35 "./include/linux/jump_label_ratelimit.h"
extern void
__static_key_slow_dec_deferred(struct static_key *key,
          struct delayed_work *work,
          unsigned long timeout);
extern void __static_key_deferred_flush(void *key, struct delayed_work *work);
extern void
jump_label_rate_limit(struct static_key_deferred *key, unsigned long rl);

extern void jump_label_update_timeout(struct work_struct *work);
# 20 "./include/net/ipv6_api.h" 2
# 1 "./include/net/if_inet6.h" 1
# 18 "./include/net/if_inet6.h"
# 1 "./include/linux/refcount.h" 1
# 19 "./include/net/if_inet6.h" 2
# 32 "./include/net/if_inet6.h"
enum {
 INET6_IFADDR_STATE_PREDAD,
 INET6_IFADDR_STATE_DAD,
 INET6_IFADDR_STATE_POSTDAD,
 INET6_IFADDR_STATE_ERRDAD,
 INET6_IFADDR_STATE_DEAD,
};

struct inet6_ifaddr {
 struct in6_addr addr;
 __u32 prefix_len;
 __u32 rt_priority;


 __u32 valid_lft;
 __u32 prefered_lft;
 refcount_t refcnt;
 spinlock_t lock;

 int state;

 __u32 flags;
 __u8 dad_probes;
 __u8 stable_privacy_retry;

 __u16 scope;
 __u64 dad_nonce;

 unsigned long cstamp;
 unsigned long tstamp;

 struct delayed_work dad_work;

 struct inet6_dev *idev;
 struct fib6_info *rt;

 struct hlist_node addr_lst;
 struct list_head if_list;

 struct list_head tmp_list;
 struct inet6_ifaddr *ifpub;
 int regen_count;

 bool tokenized;

 struct callback_head rcu;
 struct in6_addr peer_addr;
};

struct ip6_sf_socklist {
 unsigned int sl_max;
 unsigned int sl_count;
 struct callback_head rcu;
 struct in6_addr sl_addr[];
};



struct ipv6_mc_socklist {
 struct in6_addr addr;
 int ifindex;
 unsigned int sfmode;
 struct ipv6_mc_socklist *next;
 struct ip6_sf_socklist *sflist;
 struct callback_head rcu;
};

struct ip6_sf_list {
 struct ip6_sf_list *sf_next;
 struct in6_addr sf_addr;
 unsigned long sf_count[2];
 unsigned char sf_gsresp;
 unsigned char sf_oldin;
 unsigned char sf_crcount;
 struct callback_head rcu;
};







struct ifmcaddr6 {
 struct in6_addr mca_addr;
 struct inet6_dev *idev;
 struct ifmcaddr6 *next;
 struct ip6_sf_list *mca_sources;
 struct ip6_sf_list *mca_tomb;
 unsigned int mca_sfmode;
 unsigned char mca_crcount;
 unsigned long mca_sfcount[2];
 struct delayed_work mca_work;
 unsigned int mca_flags;
 int mca_users;
 refcount_t mca_refcnt;
 unsigned long mca_cstamp;
 unsigned long mca_tstamp;
 struct callback_head rcu;
};



struct ipv6_ac_socklist {
 struct in6_addr acl_addr;
 int acl_ifindex;
 struct ipv6_ac_socklist *acl_next;
};

struct ifacaddr6 {
 struct in6_addr aca_addr;
 struct fib6_info *aca_rt;
 struct ifacaddr6 *aca_next;
 struct hlist_node aca_addr_lst;
 int aca_users;
 refcount_t aca_refcnt;
 unsigned long aca_cstamp;
 unsigned long aca_tstamp;
 struct callback_head rcu;
};





struct ipv6_devstat {
 struct proc_dir_entry *proc_dir_entry;
 __typeof__(struct ipstats_mib) *ipv6;
 __typeof__(struct icmpv6_mib_device) *icmpv6dev;
 __typeof__(struct icmpv6msg_mib_device) *icmpv6msgdev;
};

struct inet6_dev {
 struct net_device *dev;

 struct list_head addr_list;

 struct ifmcaddr6 *mc_list;
 struct ifmcaddr6 *mc_tomb;

 unsigned char mc_qrv;
 unsigned char mc_gq_running;
 unsigned char mc_ifc_count;
 unsigned char mc_dad_count;

 unsigned long mc_v1_seen;
 unsigned long mc_qi;
 unsigned long mc_qri;
 unsigned long mc_maxdelay;

 struct delayed_work mc_gq_work;
 struct delayed_work mc_ifc_work;
 struct delayed_work mc_dad_work;
 struct delayed_work mc_query_work;
 struct delayed_work mc_report_work;

 struct sk_buff_head mc_query_queue;
 struct sk_buff_head mc_report_queue;

 spinlock_t mc_query_lock;
 spinlock_t mc_report_lock;
 struct mutex mc_lock;

 struct ifacaddr6 *ac_list;
 rwlock_t lock;
 refcount_t refcnt;
 __u32 if_flags;
 int dead;

 u32 desync_factor;
 struct list_head tempaddr_list;

 struct in6_addr token;

 struct neigh_parms *nd_parms;
 struct ipv6_devconf cnf;
 struct ipv6_devstat stats;

 struct timer_list rs_timer;
 __s32 rs_interval;
 __u8 rs_probes;

 unsigned long tstamp;
 struct callback_head rcu;

 unsigned int ra_mtu;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv6_eth_mc_map(const struct in6_addr *addr, char *buf)
{






 buf[0]= 0x33;
 buf[1]= 0x33;

 memcpy(buf + 2, &addr->in6_u.u6_addr32[3], sizeof(__u32));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv6_arcnet_mc_map(const struct in6_addr *addr, char *buf)
{
 buf[0] = 0x00;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv6_ib_mc_map(const struct in6_addr *addr,
      const unsigned char *broadcast, char *buf)
{
 unsigned char scope = broadcast[5] & 0xF;

 buf[0] = 0;
 buf[1] = 0xff;
 buf[2] = 0xff;
 buf[3] = 0xff;
 buf[4] = 0xff;
 buf[5] = 0x10 | scope;
 buf[6] = 0x60;
 buf[7] = 0x1b;
 buf[8] = broadcast[8];
 buf[9] = broadcast[9];
 memcpy(buf + 10, addr->in6_u.u6_addr8 + 6, 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ipv6_ipgre_mc_map(const struct in6_addr *addr,
        const unsigned char *broadcast, char *buf)
{
 if ((broadcast[0] | broadcast[1] | broadcast[2] | broadcast[3]) != 0) {
  memcpy(buf, broadcast, 4);
 } else {

  if ((addr->in6_u.u6_addr32[0] | addr->in6_u.u6_addr32[1] |
       (addr->in6_u.u6_addr32[2] ^ (( __be32)(__builtin_constant_p((__u32)((0x0000ffff))) ? ((__u32)( (((__u32)((0x0000ffff)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0000ffff)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0000ffff)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0000ffff)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0000ffff)))))) != 0)
   return -22;
  memcpy(buf, &addr->in6_u.u6_addr32[3], 4);
 }
 return 0;
}
# 21 "./include/net/ipv6_api.h" 2
# 1 "./include/net/ndisc.h" 1




# 1 "./include/net/ndisc_types.h" 1
# 6 "./include/net/ndisc.h" 2
# 22 "./include/net/ipv6_api.h" 2



# 1 "./include/net/netns/hash.h" 1




# 1 "./include/net/net_namespace.h" 1
# 6 "./include/net/netns/hash.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 net_hash_mix(const struct net *net)
{
 return net->hash_mix;
}
# 26 "./include/net/ipv6_api.h" 2

struct ipcm6_cookie {
 struct sockcm_cookie sockc;
 __s16 hlimit;
 __s16 tclass;
 __s8 dontfrag;
 struct ipv6_txoptions *opt;
 __u16 gso_size;
};

int ip6_fraglist_init(struct sk_buff *skb, unsigned int hlen, u8 *prevhdr,
        u8 nexthdr, __be32 frag_id,
        struct ip6_fraglist_iter *iter);
void ip6_fraglist_prepare(struct sk_buff *skb, struct ip6_fraglist_iter *iter);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *ip6_fraglist_next(struct ip6_fraglist_iter *iter)
{
 struct sk_buff *skb = iter->frag;

 iter->frag = skb->next;
 skb_mark_not_on_list(skb);

 return skb;
}

void ip6_frag_init(struct sk_buff *skb, unsigned int hlen, unsigned int mtu,
     unsigned short needed_tailroom, int hdr_room, u8 *prevhdr,
     u8 nexthdr, __be32 frag_id, struct ip6_frag_state *state);
struct sk_buff *ip6_frag_next(struct sk_buff *skb,
         struct ip6_frag_state *state);




# 1 "./include/net/sock.h" 1
# 61 "./include/net/ipv6_api.h" 2


extern int sysctl_mld_max_msf;
extern int sysctl_mld_qrv;
# 132 "./include/net/ipv6_api.h"
extern struct ip6_ra_chain *ip6_ra_chain;
extern rwlock_t ip6_ra_lock;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipcm6_init(struct ipcm6_cookie *ipc6)
{
 *ipc6 = (struct ipcm6_cookie) {
  .hlimit = -1,
  .tclass = -1,
  .dontfrag = -1,
 };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipcm6_init_sk(struct ipcm6_cookie *ipc6,
     const struct ipv6_pinfo *np)
{
 *ipc6 = (struct ipcm6_cookie) {
  .hlimit = -1,
  .tclass = np->tclass,
  .dontfrag = np->dontfrag,
 };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ipv6_txoptions *txopt_get(const struct ipv6_pinfo *np)
{
 struct ipv6_txoptions *opt;

 rcu_read_lock();
 opt = ({ typeof(*(np->opt)) *________p1 = (typeof(*(np->opt)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_339(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((np->opt)) == sizeof(char) || sizeof((np->opt)) == sizeof(short) || sizeof((np->opt)) == sizeof(int) || sizeof((np->opt)) == sizeof(long)) || sizeof((np->opt)) == sizeof(long long))) __compiletime_assert_339(); } while (0); (*(const volatile typeof( _Generic(((np->opt)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((np->opt)))) *)&((np->opt))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(np->opt)) *)(________p1)); });
 if (opt) {
  if (!refcount_inc_not_zero(&opt->refcnt))
   opt = ((void *)0);
  else
   opt = (opt);
 }
 rcu_read_unlock();
 return opt;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void txopt_put(struct ipv6_txoptions *opt)
{
 if (opt && refcount_dec_and_test(&opt->refcnt))
  do { typeof (opt) ___p = (opt); if (___p) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_340(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__is_kvfree_rcu_offset(offsetof(typeof(*(opt)), rcu))"))); if (!(!(!((__builtin_offsetof(typeof(*(opt)), rcu)) < 4096)))) __compiletime_assert_340(); } while (0); kvfree_call_rcu(&((___p)->rcu), (rcu_callback_t)(unsigned long) (__builtin_offsetof(typeof(*(opt)), rcu))); } } while (0);
}

struct ip6_flowlabel *__fl6_sock_lookup(struct sock *sk, __be32 label);

extern struct static_key_false_deferred ipv6_flowlabel_exclusive;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ip6_flowlabel *fl6_sock_lookup(struct sock *sk,
          __be32 label)
{
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&ipv6_flowlabel_exclusive.key), struct static_key_true)) branch = arch_static_branch_jump(&(&ipv6_flowlabel_exclusive.key)->key, false); else if (__builtin_types_compatible_p(typeof(*&ipv6_flowlabel_exclusive.key), struct static_key_false)) branch = arch_static_branch(&(&ipv6_flowlabel_exclusive.key)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }))
  return __fl6_sock_lookup(sk, label) ? : ERR_PTR(-2);

 return ((void *)0);
}

struct sockptr_struct;

struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *opt_space,
      struct ip6_flowlabel *fl,
      struct ipv6_txoptions *fopt);
void fl6_free_socklist(struct sock *sk);
int ipv6_flowlabel_opt(struct sock *sk, struct sockptr_struct optval, int optlen);
int ipv6_flowlabel_opt_get(struct sock *sk, struct in6_flowlabel_req *freq,
      int flags);
int ip6_flowlabel_init(void);
void ip6_flowlabel_cleanup(void);
bool ip6_autoflowlabel(struct net *net, const struct ipv6_pinfo *np);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fl6_sock_release(struct ip6_flowlabel *fl)
{
 if (fl)
  atomic_dec(&fl->users);
}

void icmpv6_notify(struct sk_buff *skb, u8 type, u8 code, __be32 info);

void icmpv6_push_pending_frames(struct sock *sk, struct flowi6 *fl6,
    struct icmp6hdr *thdr, int len);

int ip6_ra_control(struct sock *sk, int sel);

int ipv6_parse_hopopts(struct sk_buff *skb);

struct ipv6_txoptions *ipv6_dup_options(struct sock *sk,
     struct ipv6_txoptions *opt);
struct ipv6_txoptions *ipv6_renew_options(struct sock *sk,
       struct ipv6_txoptions *opt,
       int newtype,
       struct ipv6_opt_hdr *newopt);
struct ipv6_txoptions *ipv6_fixup_options(struct ipv6_txoptions *opt_space,
       struct ipv6_txoptions *opt);

bool ipv6_opt_accepted(const struct sock *sk, const struct sk_buff *skb,
         const struct inet6_skb_parm *opt);
struct ipv6_txoptions *ipv6_update_options(struct sock *sk,
        struct ipv6_txoptions *opt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_accept_ra(struct inet6_dev *idev)
{



 return idev->cnf.forwarding ? idev->cnf.accept_ra == 2 :
     idev->cnf.accept_ra;
}





int __ipv6_addr_type(const struct in6_addr *addr);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ipv6_addr_type(const struct in6_addr *addr)
{
 return __ipv6_addr_type(addr) & 0xffff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ipv6_addr_scope(const struct in6_addr *addr)
{
 return __ipv6_addr_type(addr) & 0x00f0U;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ipv6_addr_src_scope(int type)
{
 return (type == 0x0000U) ? -1 : (type >> 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ipv6_addr_src_scope(const struct in6_addr *addr)
{
 return __ipv6_addr_src_scope(__ipv6_addr_type(addr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __ipv6_addr_needs_scope_id(int type)
{
 return type & 0x0020U ||
        (type & 0x0002U &&
  (type & (0x0010U|0x0020U)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 ipv6_iface_scope_id(const struct in6_addr *addr, int iface)
{
 return __ipv6_addr_needs_scope_id(__ipv6_addr_type(addr)) ? iface : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ipv6_addr_cmp(const struct in6_addr *a1, const struct in6_addr *a2)
{
 return memcmp(a1, a2, sizeof(struct in6_addr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
ipv6_masked_addr_cmp(const struct in6_addr *a1, const struct in6_addr *m,
       const struct in6_addr *a2)
{

 const unsigned long *ul1 = (const unsigned long *)a1;
 const unsigned long *ulm = (const unsigned long *)m;
 const unsigned long *ul2 = (const unsigned long *)a2;

 return !!(((ul1[0] ^ ul2[0]) & ulm[0]) |
    ((ul1[1] ^ ul2[1]) & ulm[1]));






}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv6_addr_prefix(struct in6_addr *pfx,
        const struct in6_addr *addr,
        int plen)
{

 int o = plen >> 3,
     b = plen & 0x7;

 memset(pfx->in6_u.u6_addr8, 0, sizeof(pfx->in6_u.u6_addr8));
 memcpy(pfx->in6_u.u6_addr8, addr, o);
 if (b != 0)
  pfx->in6_u.u6_addr8[o] = addr->in6_u.u6_addr8[o] & (0xff00 >> b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv6_addr_prefix_copy(struct in6_addr *addr,
      const struct in6_addr *pfx,
      int plen)
{

 int o = plen >> 3,
     b = plen & 0x7;

 memcpy(addr->in6_u.u6_addr8, pfx, o);
 if (b != 0) {
  addr->in6_u.u6_addr8[o] &= ~(0xff00 >> b);
  addr->in6_u.u6_addr8[o] |= (pfx->in6_u.u6_addr8[o] & (0xff00 >> b));
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ipv6_addr_set_half(__be32 *addr,
     __be32 wh, __be32 wl)
{







 if (__builtin_constant_p(wl) && __builtin_constant_p(wh)) {
  *( u64 *)addr = (( u64)(wl) << 32 | ( u64)(wh));
  return;
 }


 addr[0] = wh;
 addr[1] = wl;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv6_addr_set(struct in6_addr *addr,
         __be32 w1, __be32 w2,
         __be32 w3, __be32 w4)
{
 __ipv6_addr_set_half(&addr->in6_u.u6_addr32[0], w1, w2);
 __ipv6_addr_set_half(&addr->in6_u.u6_addr32[2], w3, w4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_equal(const struct in6_addr *a1,
       const struct in6_addr *a2)
{

 const unsigned long *ul1 = (const unsigned long *)a1;
 const unsigned long *ul2 = (const unsigned long *)a2;

 return ((ul1[0] ^ ul2[0]) | (ul1[1] ^ ul2[1])) == 0UL;






}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __ipv6_prefix_equal64_half(const __be64 *a1,
           const __be64 *a2,
           unsigned int len)
{
 if (len && ((*a1 ^ *a2) & (( __be64)(__builtin_constant_p((__u64)(((~0UL) << (64 - len)))) ? ((__u64)( (((__u64)(((~0UL) << (64 - len))) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((~0UL) << (64 - len)))))))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_prefix_equal(const struct in6_addr *addr1,
         const struct in6_addr *addr2,
         unsigned int prefixlen)
{
 const __be64 *a1 = (const __be64 *)addr1;
 const __be64 *a2 = (const __be64 *)addr2;

 if (prefixlen >= 64) {
  if (a1[0] ^ a2[0])
   return false;
  return __ipv6_prefix_equal64_half(a1 + 1, a2 + 1, prefixlen - 64);
 }
 return __ipv6_prefix_equal64_half(a1, a2, prefixlen);
}
# 420 "./include/net/ipv6_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_any(const struct in6_addr *a)
{

 const unsigned long *ul = (const unsigned long *)a;

 return (ul[0] | ul[1]) == 0UL;




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ipv6_addr_hash(const struct in6_addr *a)
{

 const unsigned long *ul = (const unsigned long *)a;
 unsigned long x = ul[0] ^ ul[1];

 return (u32)(x ^ (x >> 32));




}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ipv6_addr_jhash(const struct in6_addr *a, const u32 initval)
{
 u32 v = ( u32)a->in6_u.u6_addr32[0] ^ ( u32)a->in6_u.u6_addr32[1];

 return jhash_3words(v,
       ( u32)a->in6_u.u6_addr32[2],
       ( u32)a->in6_u.u6_addr32[3],
       initval);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_loopback(const struct in6_addr *a)
{

 const __be64 *be = (const __be64 *)a;

 return (be[0] | (be[1] ^ (( __be64)(__builtin_constant_p((__u64)((1))) ? ((__u64)( (((__u64)((1)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((1)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((1)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((1)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((1)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((1)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((1)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((1)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((1)))))) == 0UL;




}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_v4mapped(const struct in6_addr *a)
{
 return (

  *(unsigned long *)a |



  ( unsigned long)(a->in6_u.u6_addr32[2] ^
     (( __be32)(__builtin_constant_p((__u32)((0x0000ffff))) ? ((__u32)( (((__u32)((0x0000ffff)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0000ffff)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0000ffff)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0000ffff)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0000ffff)))))) == 0UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_v4mapped_loopback(const struct in6_addr *a)
{
 return ipv6_addr_v4mapped(a) && ipv4_is_loopback(a->in6_u.u6_addr32[3]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ipv6_portaddr_hash(const struct net *net,
         const struct in6_addr *addr6,
         unsigned int port)
{
 unsigned int hash, mix = net_hash_mix(net);

 if (ipv6_addr_any(addr6))
  hash = jhash_1word(0, mix);
 else if (ipv6_addr_v4mapped(addr6))
  hash = jhash_1word(( u32)addr6->in6_u.u6_addr32[3], mix);
 else
  hash = jhash2(( u32 *)addr6->in6_u.u6_addr32, 4, mix);

 return hash ^ port;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_orchid(const struct in6_addr *a)
{
 return (a->in6_u.u6_addr32[0] & (( __be32)(__builtin_constant_p((__u32)((0xfffffff0))) ? ((__u32)( (((__u32)((0xfffffff0)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfffffff0)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfffffff0)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfffffff0)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfffffff0))))) == (( __be32)(__builtin_constant_p((__u32)((0x20010010))) ? ((__u32)( (((__u32)((0x20010010)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x20010010)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x20010010)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x20010010)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x20010010))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_is_multicast(const struct in6_addr *addr)
{
 return (addr->in6_u.u6_addr32[0] & (( __be32)(__builtin_constant_p((__u32)((0xFF000000))) ? ((__u32)( (((__u32)((0xFF000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xFF000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xFF000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xFF000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xFF000000))))) == (( __be32)(__builtin_constant_p((__u32)((0xFF000000))) ? ((__u32)( (((__u32)((0xFF000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xFF000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xFF000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xFF000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xFF000000))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ipv6_addr_set_v4mapped(const __be32 addr,
       struct in6_addr *v4mapped)
{
 ipv6_addr_set(v4mapped,
   0, 0,
   (( __be32)(__builtin_constant_p((__u32)((0x0000FFFF))) ? ((__u32)( (((__u32)((0x0000FFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0000FFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0000FFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0000FFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0000FFFF)))),
   addr);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ipv6_addr_diff32(const void *token1, const void *token2, int addrlen)
{
 const __be32 *a1 = token1, *a2 = token2;
 int i;

 addrlen >>= 2;

 for (i = 0; i < addrlen; i++) {
  __be32 xb = a1[i] ^ a2[i];
  if (xb)
   return i * 32 + 31 - __fls((__builtin_constant_p((__u32)(( __u32)(__be32)(xb))) ? ((__u32)( (((__u32)(( __u32)(__be32)(xb)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(xb)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(xb)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(xb)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(xb))));
 }
# 561 "./include/net/ipv6_api.h"
 return addrlen << 5;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ipv6_addr_diff64(const void *token1, const void *token2, int addrlen)
{
 const __be64 *a1 = token1, *a2 = token2;
 int i;

 addrlen >>= 3;

 for (i = 0; i < addrlen; i++) {
  __be64 xb = a1[i] ^ a2[i];
  if (xb)
   return i * 64 + 63 - __fls((__builtin_constant_p((__u64)(( __u64)(__be64)(xb))) ? ((__u64)( (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(xb))));
 }

 return addrlen << 6;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ipv6_addr_diff(const void *token1, const void *token2, int addrlen)
{

 if (__builtin_constant_p(addrlen) && !(addrlen & 7))
  return __ipv6_addr_diff64(token1, token2, addrlen);

 return __ipv6_addr_diff32(token1, token2, addrlen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ipv6_addr_diff(const struct in6_addr *a1, const struct in6_addr *a2)
{
 return __ipv6_addr_diff(a1, a2, sizeof(struct in6_addr));
}

__be32 ipv6_select_ident(struct net *net,
    const struct in6_addr *daddr,
    const struct in6_addr *saddr);
__be32 ipv6_proxy_select_ident(struct net *net, struct sk_buff *skb);

int ip6_dst_hoplimit(struct dst_entry *dst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ip6_sk_dst_hoplimit(struct ipv6_pinfo *np, struct flowi6 *fl6,
          struct dst_entry *dst)
{
 int hlimit;

 if (ipv6_addr_is_multicast(&fl6->daddr))
  hlimit = np->mcast_hops;
 else
  hlimit = np->hop_limit;
 if (hlimit < 0)
  hlimit = ip6_dst_hoplimit(dst);
 return hlimit;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iph_to_flow_copy_v6addrs(struct flow_keys *flow,
         const struct ipv6hdr *iph)
{
 do { __attribute__((__noreturn__)) extern void __compiletime_assert_341(void) __attribute__((__error__("BUILD_BUG_ON failed: " "offsetof(typeof(flow->addrs), v6addrs.dst) != offsetof(typeof(flow->addrs), v6addrs.src) + sizeof(flow->addrs.v6addrs.src)"))); if (!(!(__builtin_offsetof(typeof(flow->addrs), v6addrs.dst) != __builtin_offsetof(typeof(flow->addrs), v6addrs.src) + sizeof(flow->addrs.v6addrs.src)))) __compiletime_assert_341(); } while (0);


 memcpy(&flow->addrs.v6addrs, &iph->saddr, sizeof(flow->addrs.v6addrs));
 flow->control.addr_type = FLOW_DISSECTOR_KEY_IPV6_ADDRS;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_can_nonlocal_bind(struct net *net,
       struct inet_sock *inet)
{
 return net->ipv6.sysctl.ip_nonlocal_bind ||
  inet->freebind || inet->transparent;
}
# 650 "./include/net/ipv6_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 ip6_make_flowlabel(struct net *net, struct sk_buff *skb,
     __be32 flowlabel, bool autolabel,
     struct flowi6 *fl6)
{
 u32 hash;




 flowlabel &= (( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))));

 if (flowlabel ||
     net->ipv6.sysctl.auto_flowlabels == 0 ||
     (!autolabel &&
      net->ipv6.sysctl.auto_flowlabels != 3))
  return flowlabel;

 hash = skb_get_hash_flowi6(skb, fl6);





 hash = rol32(hash, 16);

 flowlabel = ( __be32)hash & (( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))));

 if (net->ipv6.sysctl.flowlabel_state_ranges)
  flowlabel |= (( __be32)(__builtin_constant_p((__u32)((0x00080000))) ? ((__u32)( (((__u32)((0x00080000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00080000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00080000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00080000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x00080000))));

 return flowlabel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ip6_default_np_autolabel(struct net *net)
{
 switch (net->ipv6.sysctl.auto_flowlabels) {
 case 0:
 case 2:
 default:
  return 0;
 case 1:
 case 3:
  return 1;
 }
}
# 709 "./include/net/ipv6_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ip6_multipath_hash_policy(const struct net *net)
{
 return net->ipv6.sysctl.multipath_hash_policy;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ip6_multipath_hash_fields(const struct net *net)
{
 return net->ipv6.sysctl.multipath_hash_fields;
}
# 731 "./include/net/ipv6_api.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ip6_flow_hdr(struct ipv6hdr *hdr, unsigned int tclass,
    __be32 flowlabel)
{
 *(__be32 *)hdr = (( __be32)(__builtin_constant_p((__u32)((0x60000000 | (tclass << 20)))) ? ((__u32)( (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x60000000 | (tclass << 20))))) | flowlabel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 ip6_flowinfo(const struct ipv6hdr *hdr)
{
 return *(__be32 *)hdr & (( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 ip6_flowlabel(const struct ipv6hdr *hdr)
{
 return *(__be32 *)hdr & (( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 ip6_tclass(__be32 flowinfo)
{
 return (__builtin_constant_p((__u32)(( __u32)(__be32)(flowinfo & ((( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF)))) & ~(( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF)))))))) ? ((__u32)( (((__u32)(( __u32)(__be32)(flowinfo & ((( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF)))) & ~(( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))))))) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(flowinfo & ((( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF)))) & ~(( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))))))) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(flowinfo & ((( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF)))) & ~(( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))))))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(flowinfo & ((( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF)))) & ~(( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))))))) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(flowinfo & ((( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF)))) & ~(( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF)))))))) >> 20;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 ip6_make_flowinfo(unsigned int tclass, __be32 flowlabel)
{
 return (( __be32)(__builtin_constant_p((__u32)((tclass << 20))) ? ((__u32)( (((__u32)((tclass << 20)) & (__u32)0x000000ffUL) << 24) | (((__u32)((tclass << 20)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((tclass << 20)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((tclass << 20)) & (__u32)0xff000000UL) >> 24))) : __fswab32((tclass << 20)))) | flowlabel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be32 flowi6_get_flowlabel(const struct flowi6 *fl6)
{
 return fl6->flowlabel & (( __be32)(__builtin_constant_p((__u32)((0x000FFFFF))) ? ((__u32)( (((__u32)((0x000FFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x000FFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x000FFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x000FFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x000FFFFF))));
}
# 770 "./include/net/ipv6_api.h"
struct packet_type;

int ipv6_rcv(struct sk_buff *skb, struct net_device *dev,
      struct packet_type *pt, struct net_device *orig_dev);
void ipv6_list_rcv(struct list_head *head, struct packet_type *pt,
     struct net_device *orig_dev);

int ip6_rcv_finish(struct net *net, struct sock *sk, struct sk_buff *skb);




int ip6_xmit(const struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,
      __u32 mark, struct ipv6_txoptions *opt, int tclass, u32 priority);

int ip6_find_1stfragopt(struct sk_buff *skb, u8 **nexthdr);

int ip6_append_data(struct sock *sk,
      int getfrag(void *from, char *to, int offset, int len,
    int odd, struct sk_buff *skb),
      void *from, int length, int transhdrlen,
      struct ipcm6_cookie *ipc6, struct flowi6 *fl6,
      struct rt6_info *rt, unsigned int flags);

int ip6_push_pending_frames(struct sock *sk);

void ip6_flush_pending_frames(struct sock *sk);

int ip6_send_skb(struct sk_buff *skb);

struct sk_buff *__ip6_make_skb(struct sock *sk, struct sk_buff_head *queue,
          struct inet_cork_full *cork,
          struct inet6_cork *v6_cork);
struct sk_buff *ip6_make_skb(struct sock *sk,
        int getfrag(void *from, char *to, int offset,
      int len, int odd, struct sk_buff *skb),
        void *from, int length, int transhdrlen,
        struct ipcm6_cookie *ipc6, struct flowi6 *fl6,
        struct rt6_info *rt, unsigned int flags,
        struct inet_cork_full *cork);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sk_buff *ip6_finish_skb(struct sock *sk)
{
 return __ip6_make_skb(sk, &sk->sk_write_queue, &inet_sk(sk)->cork,
         &inet6_sk(sk)->cork);
}

int ip6_dst_lookup(struct net *net, struct sock *sk, struct dst_entry **dst,
     struct flowi6 *fl6);
struct dst_entry *ip6_dst_lookup_flow(struct net *net, const struct sock *sk, struct flowi6 *fl6,
          const struct in6_addr *final_dst);
struct dst_entry *ip6_sk_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,
      const struct in6_addr *final_dst,
      bool connected);

struct ip_tunnel_info;

struct dst_entry *ip6_dst_lookup_tunnel(struct sk_buff *skb,
     struct net_device *dev,
     struct net *net, struct socket *sock,
     struct in6_addr *saddr,
     const struct ip_tunnel_info *info,
     u8 protocol, bool use_cache);
struct dst_entry *ip6_blackhole_route(struct net *net,
          struct dst_entry *orig_dst);





int ip6_output(struct net *net, struct sock *sk, struct sk_buff *skb);
int ip6_forward(struct sk_buff *skb);
int ip6_input(struct sk_buff *skb);
int ip6_mc_input(struct sk_buff *skb);
void ip6_protocol_deliver_rcu(struct net *net, struct sk_buff *skb, int nexthdr,
         bool have_final);

int __ip6_local_out(struct net *net, struct sock *sk, struct sk_buff *skb);
int ip6_local_out(struct net *net, struct sock *sk, struct sk_buff *skb);





void ipv6_push_nfrag_opts(struct sk_buff *skb, struct ipv6_txoptions *opt,
     u8 *proto, struct in6_addr **daddr_p,
     struct in6_addr *saddr);
void ipv6_push_frag_opts(struct sk_buff *skb, struct ipv6_txoptions *opt,
    u8 *proto);

int ipv6_skip_exthdr(const struct sk_buff *, int start, u8 *nexthdrp,
       __be16 *frag_offp);

bool ipv6_ext_hdr(u8 nexthdr);


int ipv6_find_hdr(const struct sk_buff *skb, unsigned int *offset, int target,
    unsigned short *fragoff, int *fragflg);

int ipv6_find_tlv(const struct sk_buff *skb, int offset, int type);

struct in6_addr *fl6_update_dst(struct flowi6 *fl6,
    const struct ipv6_txoptions *opt,
    struct in6_addr *orig);




extern struct static_key_false ip6_min_hopcount;

struct sockptr_struct;

int ipv6_setsockopt(struct sock *sk, int level, int optname, struct sockptr_struct optval,
      unsigned int optlen);
int ipv6_getsockopt(struct sock *sk, int level, int optname,
      char *optval, int *optlen);

int __ip6_datagram_connect(struct sock *sk, struct sockaddr *addr,
      int addr_len);
int ip6_datagram_connect(struct sock *sk, struct sockaddr *addr, int addr_len);
int ip6_datagram_connect_v6_only(struct sock *sk, struct sockaddr *addr,
     int addr_len);
int ip6_datagram_dst_update(struct sock *sk, bool fix_sk_saddr);
void ip6_datagram_release_cb(struct sock *sk);

int ipv6_recv_error(struct sock *sk, struct msghdr *msg, int len,
      int *addr_len);
int ipv6_recv_rxpmtu(struct sock *sk, struct msghdr *msg, int len,
       int *addr_len);
void ipv6_icmp_error(struct sock *sk, struct sk_buff *skb, int err, __be16 port,
       u32 info, u8 *payload);
void ipv6_local_error(struct sock *sk, int err, struct flowi6 *fl6, u32 info);
void ipv6_local_rxpmtu(struct sock *sk, struct flowi6 *fl6, u32 mtu);

int inet6_release(struct socket *sock);
int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len);
int inet6_getname(struct socket *sock, struct sockaddr *uaddr,
    int peer);
int inet6_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg);
int inet6_compat_ioctl(struct socket *sock, unsigned int cmd,
  unsigned long arg);

int inet6_hash_connect(struct inet_timewait_death_row *death_row,
         struct sock *sk);
int inet6_sendmsg(struct socket *sock, struct msghdr *msg, size_t size);
int inet6_recvmsg(struct socket *sock, struct msghdr *msg, size_t size,
    int flags);




extern const struct proto_ops inet6_stream_ops;
extern const struct proto_ops inet6_dgram_ops;
extern const struct proto_ops inet6_sockraw_ops;

struct group_source_req;
struct group_filter;

int ip6_mc_source(int add, int omode, struct sock *sk,
    struct group_source_req *pgsr);
int ip6_mc_msfilter(struct sock *sk, struct group_filter *gsf,
    struct __kernel_sockaddr_storage *list);
int ip6_mc_msfget(struct sock *sk, struct group_filter *gsf,
    struct __kernel_sockaddr_storage *p);


int ac6_proc_init(struct net *net);
void ac6_proc_exit(struct net *net);
int raw6_proc_init(void);
void raw6_proc_exit(void);
int tcp6_proc_init(struct net *net);
void tcp6_proc_exit(struct net *net);
int udp6_proc_init(struct net *net);
void udp6_proc_exit(struct net *net);
int udplite6_proc_init(void);
void udplite6_proc_exit(void);
int ipv6_misc_proc_init(void);
void ipv6_misc_proc_exit(void);
int snmp6_register_dev(struct inet6_dev *idev);
int snmp6_unregister_dev(struct inet6_dev *idev);
# 959 "./include/net/ipv6_api.h"
struct ctl_table *ipv6_icmp_sysctl_init(struct net *net);
struct ctl_table *ipv6_route_sysctl_init(struct net *net);
int ipv6_sysctl_register(void);
void ipv6_sysctl_unregister(void);
# 25 "./include/net/addrconf.h" 2





struct prefix_info {
 __u8 type;
 __u8 length;
 __u8 prefix_len;






 __u8 reserved : 6,
    autoconf : 1,
    onlink : 1;



 __be32 valid;
 __be32 prefered;
 __be32 reserved2;

 struct in6_addr prefix;
};


# 1 "./include/linux/netdevice.h" 1
# 55 "./include/net/addrconf.h" 2

# 1 "./include/net/ipv6.h" 1
# 57 "./include/net/addrconf.h" 2

struct in6_validator_info {
 struct in6_addr i6vi_addr;
 struct inet6_dev *i6vi_dev;
 struct netlink_ext_ack *extack;
};

struct ifa6_config {
 const struct in6_addr *pfx;
 unsigned int plen;

 const struct in6_addr *peer_pfx;

 u32 rt_priority;
 u32 ifa_flags;
 u32 preferred_lft;
 u32 valid_lft;
 u16 scope;
};

int addrconf_init(void);
void addrconf_cleanup(void);

int addrconf_add_ifaddr(struct net *net, void *arg);
int addrconf_del_ifaddr(struct net *net, void *arg);
int addrconf_set_dstaddr(struct net *net, void *arg);

int ipv6_chk_addr(struct net *net, const struct in6_addr *addr,
    const struct net_device *dev, int strict);
int ipv6_chk_addr_and_flags(struct net *net, const struct in6_addr *addr,
       const struct net_device *dev, bool skip_dev_check,
       int strict, u32 banned_flags);





int ipv6_chk_rpl_srh_loop(struct net *net, const struct in6_addr *segs,
     unsigned char nsegs);

bool ipv6_chk_custom_prefix(const struct in6_addr *addr,
       const unsigned int prefix_len,
       struct net_device *dev);

int ipv6_chk_prefix(const struct in6_addr *addr, struct net_device *dev);

struct net_device *ipv6_dev_find(struct net *net, const struct in6_addr *addr,
     struct net_device *dev);

struct inet6_ifaddr *ipv6_get_ifaddr(struct net *net,
         const struct in6_addr *addr,
         struct net_device *dev, int strict);

int ipv6_dev_get_saddr(struct net *net, const struct net_device *dev,
         const struct in6_addr *daddr, unsigned int srcprefs,
         struct in6_addr *saddr);
int __ipv6_get_lladdr(struct inet6_dev *idev, struct in6_addr *addr,
        u32 banned_flags);
int ipv6_get_lladdr(struct net_device *dev, struct in6_addr *addr,
      u32 banned_flags);
bool inet_rcv_saddr_equal(const struct sock *sk, const struct sock *sk2,
     bool match_wildcard);
bool inet_rcv_saddr_any(const struct sock *sk);
void addrconf_join_solict(struct net_device *dev, const struct in6_addr *addr);
void addrconf_leave_solict(struct inet6_dev *idev, const struct in6_addr *addr);

void addrconf_add_linklocal(struct inet6_dev *idev,
       const struct in6_addr *addr, u32 flags);

int addrconf_prefix_rcv_add_addr(struct net *net, struct net_device *dev,
     const struct prefix_info *pinfo,
     struct inet6_dev *in6_dev,
     const struct in6_addr *addr, int addr_type,
     u32 addr_flags, bool sllao, bool tokenized,
     __u32 valid_lft, u32 prefered_lft);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void addrconf_addr_eui48_base(u8 *eui, const char *const addr)
{
 memcpy(eui, addr, 3);
 eui[3] = 0xFF;
 eui[4] = 0xFE;
 memcpy(eui + 5, addr + 3, 3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void addrconf_addr_eui48(u8 *eui, const char *const addr)
{
 addrconf_addr_eui48_base(eui, addr);
 eui[0] ^= 2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int addrconf_ifid_eui48(u8 *eui, struct net_device *dev)
{
 if (dev->addr_len != 6)
  return -1;
# 166 "./include/net/addrconf.h"
 addrconf_addr_eui48_base(eui, dev->dev_addr);

 if (dev->dev_id) {
  eui[3] = (dev->dev_id >> 8) & 0xFF;
  eui[4] = dev->dev_id & 0xFF;
 } else {
  eui[0] ^= 2;
 }

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long addrconf_timeout_fixup(u32 timeout,
         unsigned int unit)
{
 if (timeout == 0xffffffff)
  return ~0UL;






 if (0xfffffffe > ((long)(~0UL >> 1)) / unit && timeout > ((long)(~0UL >> 1)) / unit)
  return ((long)(~0UL >> 1)) / unit;

 return timeout;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int addrconf_finite_timeout(unsigned long timeout)
{
 return ~timeout;
}




int ipv6_addr_label_init(void);
void ipv6_addr_label_cleanup(void);
int ipv6_addr_label_rtnl_register(void);
u32 ipv6_addr_label(struct net *net, const struct in6_addr *addr,
      int type, int ifindex);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_mc_may_pull(struct sk_buff *skb,
        unsigned int len)
{
 if (skb_transport_offset(skb) + ipv6_transport_len(skb) < len)
  return false;

 return pskb_may_pull(skb, len);
}

int ipv6_sock_mc_join(struct sock *sk, int ifindex,
        const struct in6_addr *addr);
int ipv6_sock_mc_drop(struct sock *sk, int ifindex,
        const struct in6_addr *addr);
void __ipv6_sock_mc_close(struct sock *sk);
void ipv6_sock_mc_close(struct sock *sk);
bool inet6_mc_check(struct sock *sk, const struct in6_addr *mc_addr,
      const struct in6_addr *src_addr);

int ipv6_dev_mc_inc(struct net_device *dev, const struct in6_addr *addr);
int __ipv6_dev_mc_dec(struct inet6_dev *idev, const struct in6_addr *addr);
int ipv6_dev_mc_dec(struct net_device *dev, const struct in6_addr *addr);
void ipv6_mc_up(struct inet6_dev *idev);
void ipv6_mc_down(struct inet6_dev *idev);
void ipv6_mc_unmap(struct inet6_dev *idev);
void ipv6_mc_remap(struct inet6_dev *idev);
void ipv6_mc_init_dev(struct inet6_dev *idev);
void ipv6_mc_destroy_dev(struct inet6_dev *idev);
int ipv6_mc_check_mld(struct sk_buff *skb);
void addrconf_dad_failure(struct sk_buff *skb, struct inet6_ifaddr *ifp);

bool ipv6_chk_mcast_addr(struct net_device *dev, const struct in6_addr *group,
    const struct in6_addr *src_addr);

void ipv6_mc_dad_complete(struct inet6_dev *idev);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_is_mld(struct sk_buff *skb, int nexthdr, int offset)
{
 struct icmp6hdr *hdr;

 if (nexthdr != 58 ||
     !pskb_network_may_pull(skb, offset + sizeof(struct icmp6hdr)))
  return false;

 hdr = (struct icmp6hdr *)(skb_network_header(skb) + offset);

 switch (hdr->icmp6_type) {
 case 130:
 case 131:
 case 132:
 case 143:
  return true;
 default:
  break;
 }
 return false;
}

void addrconf_prefix_rcv(struct net_device *dev,
    u8 *opt, int len, bool sllao);




int ipv6_sock_ac_join(struct sock *sk, int ifindex,
        const struct in6_addr *addr);
int ipv6_sock_ac_drop(struct sock *sk, int ifindex,
        const struct in6_addr *addr);
void __ipv6_sock_ac_close(struct sock *sk);
void ipv6_sock_ac_close(struct sock *sk);

int __ipv6_dev_ac_inc(struct inet6_dev *idev, const struct in6_addr *addr);
int __ipv6_dev_ac_dec(struct inet6_dev *idev, const struct in6_addr *addr);
void ipv6_ac_destroy_dev(struct inet6_dev *idev);
bool ipv6_chk_acast_addr(struct net *net, struct net_device *dev,
    const struct in6_addr *addr);
bool ipv6_chk_acast_addr_src(struct net *net, struct net_device *dev,
        const struct in6_addr *addr);
int ipv6_anycast_init(void);
void ipv6_anycast_cleanup(void);


int register_inet6addr_notifier(struct notifier_block *nb);
int unregister_inet6addr_notifier(struct notifier_block *nb);
int inet6addr_notifier_call_chain(unsigned long val, void *v);

int register_inet6addr_validator_notifier(struct notifier_block *nb);
int unregister_inet6addr_validator_notifier(struct notifier_block *nb);
int inet6addr_validator_notifier_call_chain(unsigned long val, void *v);

void inet6_netconf_notify_devconf(struct net *net, int event, int type,
      int ifindex, struct ipv6_devconf *devconf);
# 314 "./include/net/addrconf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inet6_dev *__in6_dev_get(const struct net_device *dev)
{
 return ({ typeof(*(dev->ip6_ptr)) *________p1 = (typeof(*(dev->ip6_ptr)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_342(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((dev->ip6_ptr)) == sizeof(char) || sizeof((dev->ip6_ptr)) == sizeof(short) || sizeof((dev->ip6_ptr)) == sizeof(int) || sizeof((dev->ip6_ptr)) == sizeof(long)) || sizeof((dev->ip6_ptr)) == sizeof(long long))) __compiletime_assert_342(); } while (0); (*(const volatile typeof( _Generic(((dev->ip6_ptr)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((dev->ip6_ptr)))) *)&((dev->ip6_ptr))); }); do { } while (0 && (!((lockdep_rtnl_is_held()) || rcu_read_lock_held()))); ; ((typeof(*(dev->ip6_ptr)) *)(________p1)); });
}
# 327 "./include/net/addrconf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inet6_dev *__in6_dev_stats_get(const struct net_device *dev,
          const struct sk_buff *skb)
{
 if (netif_is_l3_master(dev))
  dev = dev_get_by_index_rcu(dev_net(dev), inet6_iif(skb));
 return __in6_dev_get(dev);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inet6_dev *__in6_dev_get_safely(const struct net_device *dev)
{
 if (__builtin_expect(!!(dev), 1))
  return ({ typeof(*(dev->ip6_ptr)) *________p1 = (typeof(*(dev->ip6_ptr)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_343(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((dev->ip6_ptr)) == sizeof(char) || sizeof((dev->ip6_ptr)) == sizeof(short) || sizeof((dev->ip6_ptr)) == sizeof(int) || sizeof((dev->ip6_ptr)) == sizeof(long)) || sizeof((dev->ip6_ptr)) == sizeof(long long))) __compiletime_assert_343(); } while (0); (*(const volatile typeof( _Generic(((dev->ip6_ptr)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((dev->ip6_ptr)))) *)&((dev->ip6_ptr))); }); do { } while (0 && (!((lockdep_rtnl_is_held()) || rcu_read_lock_held()))); ; ((typeof(*(dev->ip6_ptr)) *)(________p1)); });
 else
  return ((void *)0);
}
# 357 "./include/net/addrconf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inet6_dev *in6_dev_get(const struct net_device *dev)
{
 struct inet6_dev *idev;

 rcu_read_lock();
 idev = ({ typeof(*(dev->ip6_ptr)) *________p1 = (typeof(*(dev->ip6_ptr)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_344(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((dev->ip6_ptr)) == sizeof(char) || sizeof((dev->ip6_ptr)) == sizeof(short) || sizeof((dev->ip6_ptr)) == sizeof(int) || sizeof((dev->ip6_ptr)) == sizeof(long)) || sizeof((dev->ip6_ptr)) == sizeof(long long))) __compiletime_assert_344(); } while (0); (*(const volatile typeof( _Generic(((dev->ip6_ptr)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((dev->ip6_ptr)))) *)&((dev->ip6_ptr))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(dev->ip6_ptr)) *)(________p1)); });
 if (idev)
  refcount_inc(&idev->refcnt);
 rcu_read_unlock();
 return idev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neigh_parms *__in6_dev_nd_parms_get_rcu(const struct net_device *dev)
{
 struct inet6_dev *idev = __in6_dev_get(dev);

 return idev ? idev->nd_parms : ((void *)0);
}

void in6_dev_finish_destroy(struct inet6_dev *idev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void in6_dev_put(struct inet6_dev *idev)
{
 if (refcount_dec_and_test(&idev->refcnt))
  in6_dev_finish_destroy(idev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void in6_dev_put_clear(struct inet6_dev **pidev)
{
 struct inet6_dev *idev = *pidev;

 if (idev) {
  in6_dev_put(idev);
  *pidev = ((void *)0);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __in6_dev_put(struct inet6_dev *idev)
{
 refcount_dec(&idev->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void in6_dev_hold(struct inet6_dev *idev)
{
 refcount_inc(&idev->refcnt);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ip6_ignore_linkdown(const struct net_device *dev)
{
 const struct inet6_dev *idev = __in6_dev_get(dev);

 return !!idev->cnf.ignore_routes_with_linkdown;
}

void inet6_ifa_finish_destroy(struct inet6_ifaddr *ifp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void in6_ifa_put(struct inet6_ifaddr *ifp)
{
 if (refcount_dec_and_test(&ifp->refcnt))
  inet6_ifa_finish_destroy(ifp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __in6_ifa_put(struct inet6_ifaddr *ifp)
{
 refcount_dec(&ifp->refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void in6_ifa_hold(struct inet6_ifaddr *ifp)
{
 refcount_inc(&ifp->refcnt);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void addrconf_addr_solict_mult(const struct in6_addr *addr,
          struct in6_addr *solicited)
{
 ipv6_addr_set(solicited,
        (( __be32)(__builtin_constant_p((__u32)((0xFF020000))) ? ((__u32)( (((__u32)((0xFF020000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xFF020000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xFF020000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xFF020000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xFF020000)))), 0,
        (( __be32)(__builtin_constant_p((__u32)((0x1))) ? ((__u32)( (((__u32)((0x1)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x1)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x1)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x1)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x1)))),
        (( __be32)(__builtin_constant_p((__u32)((0xFF000000))) ? ((__u32)( (((__u32)((0xFF000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xFF000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xFF000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xFF000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xFF000000)))) | addr->in6_u.u6_addr32[3]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_is_ll_all_nodes(const struct in6_addr *addr)
{

 __be64 *p = ( __be64 *)addr;
 return ((p[0] ^ (( __be64)(__builtin_constant_p((__u64)((0xff02000000000000UL))) ? ((__u64)( (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((0xff02000000000000UL))))) | (p[1] ^ (( __be64)(__builtin_constant_p((__u64)((1))) ? ((__u64)( (((__u64)((1)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((1)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((1)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((1)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((1)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((1)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((1)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((1)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((1)))))) == 0UL;





}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_is_ll_all_routers(const struct in6_addr *addr)
{

 __be64 *p = ( __be64 *)addr;
 return ((p[0] ^ (( __be64)(__builtin_constant_p((__u64)((0xff02000000000000UL))) ? ((__u64)( (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((0xff02000000000000UL))))) | (p[1] ^ (( __be64)(__builtin_constant_p((__u64)((2))) ? ((__u64)( (((__u64)((2)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((2)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((2)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((2)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((2)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((2)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((2)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((2)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((2)))))) == 0UL;





}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_is_isatap(const struct in6_addr *addr)
{
 return (addr->in6_u.u6_addr32[2] | (( __be32)(__builtin_constant_p((__u32)((0x02000000))) ? ((__u32)( (((__u32)((0x02000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x02000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x02000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x02000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x02000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x02005EFE))) ? ((__u32)( (((__u32)((0x02005EFE)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x02005EFE)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x02005EFE)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x02005EFE)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x02005EFE))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_is_solict_mult(const struct in6_addr *addr)
{

 __be64 *p = ( __be64 *)addr;
 return ((p[0] ^ (( __be64)(__builtin_constant_p((__u64)((0xff02000000000000UL))) ? ((__u64)( (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((0xff02000000000000UL))))) |
  ((p[1] ^ (( __be64)(__builtin_constant_p((__u64)((0x00000001ff000000UL))) ? ((__u64)( (((__u64)((0x00000001ff000000UL)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((0x00000001ff000000UL)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((0x00000001ff000000UL)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((0x00000001ff000000UL)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((0x00000001ff000000UL)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((0x00000001ff000000UL)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((0x00000001ff000000UL)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((0x00000001ff000000UL)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((0x00000001ff000000UL))))) &
   (( __be64)(__builtin_constant_p((__u64)((0xffffffffff000000UL))) ? ((__u64)( (((__u64)((0xffffffffff000000UL)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((0xffffffffff000000UL)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((0xffffffffff000000UL)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((0xffffffffff000000UL)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((0xffffffffff000000UL)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((0xffffffffff000000UL)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((0xffffffffff000000UL)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((0xffffffffff000000UL)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((0xffffffffff000000UL)))))) == 0UL;






}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ipv6_addr_is_all_snoopers(const struct in6_addr *addr)
{

 __be64 *p = ( __be64 *)addr;

 return ((p[0] ^ (( __be64)(__builtin_constant_p((__u64)((0xff02000000000000UL))) ? ((__u64)( (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((0xff02000000000000UL)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((0xff02000000000000UL)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((0xff02000000000000UL)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((0xff02000000000000UL))))) |
  (p[1] ^ (( __be64)(__builtin_constant_p((__u64)((0x6a))) ? ((__u64)( (((__u64)((0x6a)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((0x6a)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((0x6a)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((0x6a)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((0x6a)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((0x6a)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((0x6a)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((0x6a)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((0x6a)))))) == 0UL;





}


int if6_proc_init(void);
void if6_proc_exit(void);
# 65 "net/core/neighbour.c" 2

# 1 "./include/trace/events/neigh.h" 1
# 10 "./include/trace/events/neigh.h"
# 1 "./include/linux/skbuff.h" 1
# 11 "./include/trace/events/neigh.h" 2
# 1 "./include/linux/netdevice.h" 1
# 12 "./include/trace/events/neigh.h" 2
# 1 "./include/linux/tracepoint.h" 1
# 16 "./include/linux/tracepoint.h"
# 1 "./include/linux/smp.h" 1
# 17 "./include/linux/tracepoint.h" 2
# 1 "./include/linux/srcu.h" 1
# 22 "./include/linux/srcu.h"
# 1 "./include/linux/mutex.h" 1
# 23 "./include/linux/srcu.h" 2

# 1 "./include/linux/workqueue.h" 1
# 25 "./include/linux/srcu.h" 2
# 40 "./include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *ssp);



void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
unsigned long get_state_synchronize_srcu(struct srcu_struct *ssp);
unsigned long start_poll_synchronize_srcu(struct srcu_struct *ssp);
bool poll_state_synchronize_srcu(struct srcu_struct *ssp, unsigned long cookie);


void srcu_init(void);
# 87 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 return 1;
}
# 146 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 do { } while (0);
 return retval;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 172 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ int __ret_warn_on = !!(idx & ~0x1); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/srcu.h\"; .popsection; .long 14472b - 14470b; .short 175; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 do { } while (0);
 __srcu_read_unlock(ssp, idx);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 196 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 18 "./include/linux/tracepoint.h" 2


# 1 "./include/linux/cpumask.h" 1
# 21 "./include/linux/tracepoint.h" 2


# 1 "./include/linux/static_call.h" 1
# 135 "./include/linux/static_call.h"
# 1 "./include/linux/cpu.h" 1
# 19 "./include/linux/cpu.h"
# 1 "./include/linux/node.h" 1
# 19 "./include/linux/node.h"
# 1 "./include/linux/cpumask.h" 1
# 20 "./include/linux/node.h" 2

# 1 "./include/linux/workqueue.h" 1
# 22 "./include/linux/node.h" 2
# 32 "./include/linux/node.h"
struct node_hmem_attrs {
 unsigned int read_bandwidth;
 unsigned int write_bandwidth;
 unsigned int read_latency;
 unsigned int write_latency;
};

enum cache_indexing {
 NODE_CACHE_DIRECT_MAP,
 NODE_CACHE_INDEXED,
 NODE_CACHE_OTHER,
};

enum cache_write_policy {
 NODE_CACHE_WRITE_BACK,
 NODE_CACHE_WRITE_THROUGH,
 NODE_CACHE_WRITE_OTHER,
};
# 60 "./include/linux/node.h"
struct node_cache_attrs {
 enum cache_indexing indexing;
 enum cache_write_policy write_policy;
 u64 size;
 u16 line_size;
 u8 level;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_add_cache(unsigned int nid,
      struct node_cache_attrs *cache_attrs)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_perf_attrs(unsigned int nid,
           struct node_hmem_attrs *hmem_attrs,
           unsigned access)
{
}


struct node {
 struct device dev;
 struct list_head access_list;
# 96 "./include/linux/node.h"
};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void link_mem_sections(int nid, unsigned long start_pfn,
         unsigned long end_pfn,
         enum meminit_context context)
{
}


extern void unregister_node(struct node *node);


extern int __register_one_node(int nid);
extern int register_one_node(int nid);
extern void unregister_one_node(int nid);
extern int register_cpu_under_node(unsigned int cpu, unsigned int nid);
extern int unregister_cpu_under_node(unsigned int cpu, unsigned int nid);
extern void unregister_memory_block_under_nodes(struct memory_block *mem_blk);

extern int register_memory_node_under_compute_node(unsigned int mem_nid,
         unsigned int cpu_nid,
         unsigned access);


extern void register_hugetlbfs_with_node(node_registration_func_t doregister,
      node_registration_func_t unregister);
# 20 "./include/linux/cpu.h" 2

# 1 "./include/linux/cpumask.h" 1
# 22 "./include/linux/cpu.h" 2
# 1 "./include/linux/cpuhotplug.h" 1
# 57 "./include/linux/cpuhotplug.h"
enum cpuhp_state {
 CPUHP_INVALID = -1,


 CPUHP_OFFLINE = 0,
 CPUHP_CREATE_THREADS,
 CPUHP_PERF_PREPARE,
 CPUHP_PERF_X86_PREPARE,
 CPUHP_PERF_X86_AMD_UNCORE_PREP,
 CPUHP_PERF_POWER,
 CPUHP_PERF_SUPERH,
 CPUHP_X86_HPET_DEAD,
 CPUHP_X86_APB_DEAD,
 CPUHP_X86_MCE_DEAD,
 CPUHP_VIRT_NET_DEAD,
 CPUHP_SLUB_DEAD,
 CPUHP_DEBUG_OBJ_DEAD,
 CPUHP_MM_WRITEBACK_DEAD,

 CPUHP_MM_DEMOTION_DEAD,
 CPUHP_MM_VMSTAT_DEAD,
 CPUHP_SOFTIRQ_DEAD,
 CPUHP_NET_MVNETA_DEAD,
 CPUHP_CPUIDLE_DEAD,
 CPUHP_ARM64_FPSIMD_DEAD,
 CPUHP_ARM_OMAP_WAKE_DEAD,
 CPUHP_IRQ_POLL_DEAD,
 CPUHP_BLOCK_SOFTIRQ_DEAD,
 CPUHP_BIO_DEAD,
 CPUHP_ACPI_CPUDRV_DEAD,
 CPUHP_S390_PFAULT_DEAD,
 CPUHP_BLK_MQ_DEAD,
 CPUHP_FS_BUFF_DEAD,
 CPUHP_PRINTK_DEAD,
 CPUHP_MM_MEMCQ_DEAD,
 CPUHP_XFS_DEAD,
 CPUHP_PERCPU_CNT_DEAD,
 CPUHP_RADIX_DEAD,
 CPUHP_PAGE_ALLOC,
 CPUHP_NET_DEV_DEAD,
 CPUHP_PCI_XGENE_DEAD,
 CPUHP_IOMMU_IOVA_DEAD,
 CPUHP_LUSTRE_CFS_DEAD,
 CPUHP_AP_ARM_CACHE_B15_RAC_DEAD,
 CPUHP_PADATA_DEAD,
 CPUHP_AP_DTPM_CPU_DEAD,
 CPUHP_WORKQUEUE_PREP,
 CPUHP_POWER_NUMA_PREPARE,
 CPUHP_HRTIMERS_PREPARE,
 CPUHP_PROFILE_PREPARE,
 CPUHP_X2APIC_PREPARE,
 CPUHP_SMPCFD_PREPARE,
 CPUHP_RELAY_PREPARE,
 CPUHP_SLAB_PREPARE,
 CPUHP_MD_RAID5_PREPARE,
 CPUHP_RCUTREE_PREP,
 CPUHP_CPUIDLE_COUPLED_PREPARE,
 CPUHP_POWERPC_PMAC_PREPARE,
 CPUHP_POWERPC_MMU_CTX_PREPARE,
 CPUHP_XEN_PREPARE,
 CPUHP_XEN_EVTCHN_PREPARE,
 CPUHP_ARM_SHMOBILE_SCU_PREPARE,
 CPUHP_SH_SH3X_PREPARE,
 CPUHP_NET_FLOW_PREPARE,
 CPUHP_TOPOLOGY_PREPARE,
 CPUHP_NET_IUCV_PREPARE,
 CPUHP_ARM_BL_PREPARE,
 CPUHP_TRACE_RB_PREPARE,
 CPUHP_MM_ZS_PREPARE,
 CPUHP_MM_ZSWP_MEM_PREPARE,
 CPUHP_MM_ZSWP_POOL_PREPARE,
 CPUHP_KVM_PPC_BOOK3S_PREPARE,
 CPUHP_ZCOMP_PREPARE,
 CPUHP_TIMERS_PREPARE,
 CPUHP_MIPS_SOC_PREPARE,
 CPUHP_BP_PREPARE_DYN,
 CPUHP_BP_PREPARE_DYN_END = CPUHP_BP_PREPARE_DYN + 20,
 CPUHP_BRINGUP_CPU,





 CPUHP_AP_IDLE_DEAD,
 CPUHP_AP_OFFLINE,
 CPUHP_AP_SCHED_STARTING,
 CPUHP_AP_RCUTREE_DYING,
 CPUHP_AP_CPU_PM_STARTING,
 CPUHP_AP_IRQ_GIC_STARTING,
 CPUHP_AP_IRQ_HIP04_STARTING,
 CPUHP_AP_IRQ_APPLE_AIC_STARTING,
 CPUHP_AP_IRQ_ARMADA_XP_STARTING,
 CPUHP_AP_IRQ_BCM2836_STARTING,
 CPUHP_AP_IRQ_MIPS_GIC_STARTING,
 CPUHP_AP_IRQ_RISCV_STARTING,
 CPUHP_AP_IRQ_SIFIVE_PLIC_STARTING,
 CPUHP_AP_ARM_MVEBU_COHERENCY,
 CPUHP_AP_MICROCODE_LOADER,
 CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING,
 CPUHP_AP_PERF_X86_STARTING,
 CPUHP_AP_PERF_X86_AMD_IBS_STARTING,
 CPUHP_AP_PERF_X86_CQM_STARTING,
 CPUHP_AP_PERF_X86_CSTATE_STARTING,
 CPUHP_AP_PERF_XTENSA_STARTING,
 CPUHP_AP_MIPS_OP_LOONGSON3_STARTING,
 CPUHP_AP_ARM_SDEI_STARTING,
 CPUHP_AP_ARM_VFP_STARTING,
 CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING,
 CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING,
 CPUHP_AP_PERF_ARM_ACPI_STARTING,
 CPUHP_AP_PERF_ARM_STARTING,
 CPUHP_AP_ARM_L2X0_STARTING,
 CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING,
 CPUHP_AP_ARM_ARCH_TIMER_STARTING,
 CPUHP_AP_ARM_GLOBAL_TIMER_STARTING,
 CPUHP_AP_JCORE_TIMER_STARTING,
 CPUHP_AP_ARM_TWD_STARTING,
 CPUHP_AP_QCOM_TIMER_STARTING,
 CPUHP_AP_TEGRA_TIMER_STARTING,
 CPUHP_AP_ARMADA_TIMER_STARTING,
 CPUHP_AP_MARCO_TIMER_STARTING,
 CPUHP_AP_MIPS_GIC_TIMER_STARTING,
 CPUHP_AP_ARC_TIMER_STARTING,
 CPUHP_AP_RISCV_TIMER_STARTING,
 CPUHP_AP_CLINT_TIMER_STARTING,
 CPUHP_AP_CSKY_TIMER_STARTING,
 CPUHP_AP_TI_GP_TIMER_STARTING,
 CPUHP_AP_HYPERV_TIMER_STARTING,
 CPUHP_AP_KVM_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_STARTING,
 CPUHP_AP_KVM_ARM_TIMER_STARTING,

 CPUHP_AP_DUMMY_TIMER_STARTING,
 CPUHP_AP_ARM_XEN_STARTING,
 CPUHP_AP_ARM_CORESIGHT_STARTING,
 CPUHP_AP_ARM_CORESIGHT_CTI_STARTING,
 CPUHP_AP_ARM64_ISNDEP_STARTING,
 CPUHP_AP_SMPCFD_DYING,
 CPUHP_AP_X86_TBOOT_DYING,
 CPUHP_AP_ARM_CACHE_B15_RAC_DYING,
 CPUHP_AP_ONLINE,
 CPUHP_TEARDOWN_CPU,


 CPUHP_AP_ONLINE_IDLE,
 CPUHP_AP_SCHED_WAIT_EMPTY,
 CPUHP_AP_SMPBOOT_THREADS,
 CPUHP_AP_X86_VDSO_VMA_ONLINE,
 CPUHP_AP_IRQ_AFFINITY_ONLINE,
 CPUHP_AP_BLK_MQ_ONLINE,
 CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS,
 CPUHP_AP_X86_INTEL_EPB_ONLINE,
 CPUHP_AP_PERF_ONLINE,
 CPUHP_AP_PERF_X86_ONLINE,
 CPUHP_AP_PERF_X86_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_POWER_ONLINE,
 CPUHP_AP_PERF_X86_RAPL_ONLINE,
 CPUHP_AP_PERF_X86_CQM_ONLINE,
 CPUHP_AP_PERF_X86_CSTATE_ONLINE,
 CPUHP_AP_PERF_X86_IDXD_ONLINE,
 CPUHP_AP_PERF_S390_CF_ONLINE,
 CPUHP_AP_PERF_S390_SF_ONLINE,
 CPUHP_AP_PERF_ARM_CCI_ONLINE,
 CPUHP_AP_PERF_ARM_CCN_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_L3_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_PA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_SLLC_ONLINE,
 CPUHP_AP_PERF_ARM_L2X0_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE,
 CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE,
 CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE,
 CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_24x7_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_GPCI_ONLINE,
 CPUHP_AP_PERF_CSKY_ONLINE,
 CPUHP_AP_WATCHDOG_ONLINE,
 CPUHP_AP_WORKQUEUE_ONLINE,
 CPUHP_AP_RCUTREE_ONLINE,
 CPUHP_AP_BASE_CACHEINFO_ONLINE,
 CPUHP_AP_ONLINE_DYN,
 CPUHP_AP_ONLINE_DYN_END = CPUHP_AP_ONLINE_DYN + 30,

 CPUHP_AP_MM_DEMOTION_ONLINE,
 CPUHP_AP_X86_HPET_ONLINE,
 CPUHP_AP_X86_KVM_CLK_ONLINE,
 CPUHP_AP_ACTIVE,
 CPUHP_ONLINE,
};

int __cpuhp_setup_state(enum cpuhp_state state, const char *name, bool invoke,
   int (*startup)(unsigned int cpu),
   int (*teardown)(unsigned int cpu), bool multi_instance);

int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char *name,
       bool invoke,
       int (*startup)(unsigned int cpu),
       int (*teardown)(unsigned int cpu),
       bool multi_instance);
# 274 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state(enum cpuhp_state state,
        const char *name,
        int (*startup)(unsigned int cpu),
        int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, true, startup, teardown, false);
}
# 294 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_cpuslocked(enum cpuhp_state state,
            const char *name,
            int (*startup)(unsigned int cpu),
            int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, true, startup,
           teardown, false);
}
# 314 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_nocalls(enum cpuhp_state state,
         const char *name,
         int (*startup)(unsigned int cpu),
         int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, false, startup, teardown,
       false);
}
# 336 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_nocalls_cpuslocked(enum cpuhp_state state,
           const char *name,
           int (*startup)(unsigned int cpu),
           int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, false, startup,
         teardown, false);
}
# 357 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_multi(enum cpuhp_state state,
       const char *name,
       int (*startup)(unsigned int cpu,
        struct hlist_node *node),
       int (*teardown)(unsigned int cpu,
         struct hlist_node *node))
{
 return __cpuhp_setup_state(state, name, false,
       (void *) startup,
       (void *) teardown, true);
}

int __cpuhp_state_add_instance(enum cpuhp_state state, struct hlist_node *node,
          bool invoke);
int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state state,
       struct hlist_node *node, bool invoke);
# 385 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_add_instance(enum cpuhp_state state,
        struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, true);
}
# 401 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_add_instance_nocalls(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, false);
}
# 418 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
cpuhp_state_add_instance_nocalls_cpuslocked(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance_cpuslocked(state, node, false);
}

void __cpuhp_remove_state(enum cpuhp_state state, bool invoke);
void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke);
# 435 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, true);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state_nocalls(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}
# 458 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state_nocalls_cpuslocked(enum cpuhp_state state)
{
 __cpuhp_remove_state_cpuslocked(state, false);
}
# 471 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_multi_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

int __cpuhp_state_remove_instance(enum cpuhp_state state,
      struct hlist_node *node, bool invoke);
# 488 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_remove_instance(enum cpuhp_state state,
           struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, true);
}
# 502 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_remove_instance_nocalls(enum cpuhp_state state,
            struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, false);
}


void cpuhp_online_idle(enum cpuhp_state state);
# 23 "./include/linux/cpu.h" 2

struct device;
struct device_node;
struct attribute_group;

struct cpu {
 int node_id;
 int hotpluggable;
 struct device dev;
};

extern void boot_cpu_init(void);
extern void boot_cpu_hotplug_init(void);
extern void cpu_init(void);
extern void trap_init(void);

extern int register_cpu(struct cpu *cpu, int num);
extern struct device *get_cpu_device(unsigned cpu);
extern bool cpu_is_hotpluggable(unsigned cpu);
extern bool arch_match_cpu_phys_id(int cpu, u64 phys_id);
extern bool arch_find_n_match_cpu_physical_id(struct device_node *cpun,
           int cpu, unsigned int *thread);

extern int cpu_add_dev_attr(struct device_attribute *attr);
extern void cpu_remove_dev_attr(struct device_attribute *attr);

extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);

extern ssize_t cpu_show_meltdown(struct device *dev,
     struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v1(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v2(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spec_store_bypass(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_l1tf(struct device *dev,
        struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_mds(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_tsx_async_abort(struct device *dev,
     struct device_attribute *attr,
     char *buf);
extern ssize_t cpu_show_itlb_multihit(struct device *dev,
          struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_srbds(struct device *dev, struct device_attribute *attr, char *buf);

extern __attribute__((__format__(printf, 4, 5)))
struct device *cpu_device_create(struct device *parent, void *drvdata,
     const struct attribute_group **groups,
     const char *fmt, ...);

extern void unregister_cpu(struct cpu *cpu);
extern ssize_t arch_cpu_probe(const char *, size_t);
extern ssize_t arch_cpu_release(const char *, size_t);
# 93 "./include/linux/cpu.h"
extern bool cpuhp_tasks_frozen;
int add_cpu(unsigned int cpu);
int cpu_device_up(struct device *dev);
void notify_cpu_starting(unsigned int cpu);
extern void cpu_maps_update_begin(void);
extern void cpu_maps_update_done(void);
int bringup_hibernate_cpu(unsigned int sleep_cpu);
void bringup_nonboot_cpus(unsigned int setup_max_cpus);
# 116 "./include/linux/cpu.h"
extern struct bus_type cpu_subsys;

extern int lockdep_is_cpus_held(void);


extern void cpus_write_lock(void);
extern void cpus_write_unlock(void);
extern void cpus_read_lock(void);
extern void cpus_read_unlock(void);
extern int cpus_read_trylock(void);
extern void lockdep_assert_cpus_held(void);
extern void cpu_hotplug_disable(void);
extern void cpu_hotplug_enable(void);
void clear_tasks_mm_cpumask(int cpu);
int remove_cpu(unsigned int cpu);
int cpu_device_down(struct device *dev);
extern void smp_shutdown_nonboot_cpus(unsigned int primary_cpu);
# 149 "./include/linux/cpu.h"
extern int freeze_secondary_cpus(int primary);
extern void thaw_secondary_cpus(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int suspend_disable_secondary_cpus(void)
{
 int cpu = 0;

 if (0)
  cpu = -1;

 return freeze_secondary_cpus(cpu);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void suspend_enable_secondary_cpus(void)
{
 return thaw_secondary_cpus();
}







void cpu_startup_entry(enum cpuhp_state state);

void cpu_idle_poll_ctrl(bool enable);




bool cpu_in_idle(unsigned long pc);

void arch_cpu_idle(void);
void arch_cpu_idle_prepare(void);
void arch_cpu_idle_enter(void);
void arch_cpu_idle_exit(void);
void arch_cpu_idle_dead(void);

int cpu_report_state(int cpu);
int cpu_check_up_prepare(int cpu);
void cpu_set_state_online(int cpu);
void play_idle_precise(u64 duration_ns, u64 latency_ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void play_idle(unsigned long duration_us)
{
 play_idle_precise(duration_us * 1000L, ((u64)~0ULL));
}


bool cpu_wait_death(unsigned int cpu, int seconds);
bool cpu_report_death(void);
void cpuhp_report_idle_dead(void);




enum cpuhp_smt_control {
 CPU_SMT_ENABLED,
 CPU_SMT_DISABLED,
 CPU_SMT_FORCE_DISABLED,
 CPU_SMT_NOT_SUPPORTED,
 CPU_SMT_NOT_IMPLEMENTED,
};
# 222 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_smt_disable(bool force) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_smt_check_topology(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_smt_possible(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_smt_enable(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval) { return 0; }


extern bool cpu_mitigations_off(void);
extern bool cpu_mitigations_auto_nosmt(void);
# 136 "./include/linux/static_call.h" 2
# 271 "./include/linux/static_call.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int static_call_init(void) { return 0; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __static_call_return0(void)
{
 return 0;
}
# 290 "./include/linux/static_call.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __static_call_nop(void) { }
# 314 "./include/linux/static_call.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void __static_call_update(struct static_call_key *key, void *tramp, void *func)
{
 do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_345(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(key->func) == sizeof(char) || sizeof(key->func) == sizeof(short) || sizeof(key->func) == sizeof(int) || sizeof(key->func) == sizeof(long)) || sizeof(key->func) == sizeof(long long))) __compiletime_assert_345(); } while (0); do { *(volatile typeof(key->func) *)&(key->func) = (func); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int static_call_text_reserved(void *start, void *end)
{
 return 0;
}
# 24 "./include/linux/tracepoint.h" 2


struct module;
struct tracepoint;
struct notifier_block;

struct trace_eval_map {
 const char *system;
 const char *eval_string;
 unsigned long eval_value;
};



extern struct srcu_struct tracepoint_srcu;

extern int
tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data);
extern int
tracepoint_probe_register_prio(struct tracepoint *tp, void *probe, void *data,
          int prio);
extern int
tracepoint_probe_register_prio_may_exist(struct tracepoint *tp, void *probe, void *data,
      int prio);
extern int
tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
tracepoint_probe_register_may_exist(struct tracepoint *tp, void *probe,
        void *data)
{
 return tracepoint_probe_register_prio_may_exist(tp, probe, data,
       10);
}
extern void
for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),
  void *priv);


struct tp_module {
 struct list_head list;
 struct module *mod;
};

bool trace_module_has_bad_taint(struct module *mod);
extern int register_tracepoint_module_notifier(struct notifier_block *nb);
extern int unregister_tracepoint_module_notifier(struct notifier_block *nb);
# 99 "./include/linux/tracepoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracepoint_synchronize_unregister(void)
{ }



extern int syscall_regfunc(void);
extern void syscall_unregfunc(void);
# 116 "./include/linux/tracepoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tracepoint *tracepoint_ptr_deref(tracepoint_ptr_t *p)
{
 return offset_to_ptr(p);
}
# 13 "./include/trace/events/neigh.h" 2
# 1 "./include/net/neighbour.h" 1
# 14 "./include/trace/events/neigh.h" 2
# 26 "./include/trace/events/neigh.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_create(struct neigh_table *tbl, struct net_device *dev, const void *pkey, const struct neighbour *n, bool exempt_from_gc) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_create_rcuidle(struct neigh_table *tbl, struct net_device *dev, const void *pkey, const struct neighbour *n, bool exempt_from_gc) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_neigh_create(void (*probe)(void *__data, struct neigh_table *tbl, struct net_device *dev, const void *pkey, const struct neighbour *n, bool exempt_from_gc), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_neigh_create(void (*probe)(void *__data, struct neigh_table *tbl, struct net_device *dev, const void *pkey, const struct neighbour *n, bool exempt_from_gc), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_neigh_create(void (*cb)(void *__data, struct neigh_table *tbl, struct net_device *dev, const void *pkey, const struct neighbour *n, bool exempt_from_gc)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_neigh_create_enabled(void) { return false; };
# 75 "./include/trace/events/neigh.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_update(struct neighbour *n, const u8 *lladdr, u8 new, u32 flags, u32 nlmsg_pid) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_update_rcuidle(struct neighbour *n, const u8 *lladdr, u8 new, u32 flags, u32 nlmsg_pid) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_neigh_update(void (*probe)(void *__data, struct neighbour *n, const u8 *lladdr, u8 new, u32 flags, u32 nlmsg_pid), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_neigh_update(void (*probe)(void *__data, struct neighbour *n, const u8 *lladdr, u8 new, u32 flags, u32 nlmsg_pid), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_neigh_update(void (*cb)(void *__data, struct neighbour *n, const u8 *lladdr, u8 new, u32 flags, u32 nlmsg_pid)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_neigh_update_enabled(void) { return false; };
# 228 "./include/trace/events/neigh.h"
 ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_update_done(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_update_done_rcuidle(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_neigh_update_done(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_neigh_update_done(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_neigh_update_done(void (*cb)(void *__data, struct neighbour *neigh, int err)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_neigh_update_done_enabled(void) { return false; };




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_timer_handler(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_timer_handler_rcuidle(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_neigh_timer_handler(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_neigh_timer_handler(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_neigh_timer_handler(void (*cb)(void *__data, struct neighbour *neigh, int err)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_neigh_timer_handler_enabled(void) { return false; };




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_event_send_done(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_event_send_done_rcuidle(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_neigh_event_send_done(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_neigh_event_send_done(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_neigh_event_send_done(void (*cb)(void *__data, struct neighbour *neigh, int err)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_neigh_event_send_done_enabled(void) { return false; };




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_event_send_dead(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_event_send_dead_rcuidle(struct neighbour *neigh, int err) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_neigh_event_send_dead(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_neigh_event_send_dead(void (*probe)(void *__data, struct neighbour *neigh, int err), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_neigh_event_send_dead(void (*cb)(void *__data, struct neighbour *neigh, int err)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_neigh_event_send_dead_enabled(void) { return false; };




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_cleanup_and_release(struct neighbour *neigh, int rc) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_neigh_cleanup_and_release_rcuidle(struct neighbour *neigh, int rc) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_neigh_cleanup_and_release(void (*probe)(void *__data, struct neighbour *neigh, int rc), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_neigh_cleanup_and_release(void (*probe)(void *__data, struct neighbour *neigh, int rc), void *data) { return -38; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_neigh_cleanup_and_release(void (*cb)(void *__data, struct neighbour *neigh, int rc)) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_neigh_cleanup_and_release_enabled(void) { return false; };







# 1 "./include/trace/define_trace.h" 1
# 259 "./include/trace/events/neigh.h" 2
# 67 "net/core/neighbour.c" 2
# 77 "net/core/neighbour.c"
static void neigh_timer_handler(struct timer_list *t);
static void __neigh_notify(struct neighbour *n, int type, int flags,
      u32 pid);
static void neigh_update_notify(struct neighbour *neigh, u32 nlmsg_pid);
static int pneigh_ifdown_and_unlock(struct neigh_table *tbl,
        struct net_device *dev);


static const struct seq_operations neigh_stat_seq_ops;
# 116 "net/core/neighbour.c"
static int neigh_blackhole(struct neighbour *neigh, struct sk_buff *skb)
{
 kfree_skb(skb);
 return -100;
}

static void neigh_cleanup_and_release(struct neighbour *neigh)
{
 trace_neigh_cleanup_and_release(neigh, 0);
 __neigh_notify(neigh, RTM_DELNEIGH, 0, 0);
 call_netevent_notifiers(NETEVENT_NEIGH_UPDATE, neigh);
 neigh_release(neigh);
}







unsigned long neigh_rand_reach_time(unsigned long base)
{
 return base ? (prandom_u32() % base) + (base >> 1) : 0;
}
extern typeof(neigh_rand_reach_time) neigh_rand_reach_time; extern const char __kstrtab_neigh_rand_reach_time[]; extern const char __kstrtabns_neigh_rand_reach_time[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_rand_reach_time" ":					\n" "	.asciz 	\"" "neigh_rand_reach_time" "\"					\n" "__kstrtabns_" "neigh_rand_reach_time" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_rand_reach_time346 = (void *)&neigh_rand_reach_time; asm("	.section \"___ksymtab" "" "+" "neigh_rand_reach_time" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_rand_reach_time" ":				\n" "	.long	" "neigh_rand_reach_time" "- .				\n" "	.long	__kstrtab_" "neigh_rand_reach_time" "- .			\n" "	.long	__kstrtabns_" "neigh_rand_reach_time" "- .			\n" "	.previous					\n");

static void neigh_mark_dead(struct neighbour *n)
{
 n->dead = 1;
 if (!list_empty(&n->gc_list)) {
  list_del_init(&n->gc_list);
  atomic_dec(&n->tbl->gc_entries);
 }
 if (!list_empty(&n->managed_list))
  list_del_init(&n->managed_list);
}

static void neigh_update_gc_list(struct neighbour *n)
{
 bool on_gc_list, exempt_from_gc;

 _raw_write_lock_bh(&n->tbl->lock);
 _raw_write_lock(&n->lock);
 if (n->dead)
  goto out;




 exempt_from_gc = n->nud_state & 0x80 ||
    n->flags & (1 << 4);
 on_gc_list = !list_empty(&n->gc_list);

 if (exempt_from_gc && on_gc_list) {
  list_del_init(&n->gc_list);
  atomic_dec(&n->tbl->gc_entries);
 } else if (!exempt_from_gc && !on_gc_list) {

  list_add_tail(&n->gc_list, &n->tbl->gc_list);
  atomic_inc(&n->tbl->gc_entries);
 }
out:
 _raw_write_unlock(&n->lock);
 _raw_write_unlock_bh(&n->tbl->lock);
}

static void neigh_update_managed_list(struct neighbour *n)
{
 bool on_managed_list, add_to_managed;

 _raw_write_lock_bh(&n->tbl->lock);
 _raw_write_lock(&n->lock);
 if (n->dead)
  goto out;

 add_to_managed = n->flags & ((1 << 0) << 8);
 on_managed_list = !list_empty(&n->managed_list);

 if (!add_to_managed && on_managed_list)
  list_del_init(&n->managed_list);
 else if (add_to_managed && !on_managed_list)
  list_add_tail(&n->managed_list, &n->tbl->managed_list);
out:
 _raw_write_unlock(&n->lock);
 _raw_write_unlock_bh(&n->tbl->lock);
}

static void neigh_update_flags(struct neighbour *neigh, u32 flags, int *notify,
          bool *gc_update, bool *managed_update)
{
 u32 ndm_flags, old_flags = neigh->flags;

 if (!(flags & ((((1UL))) << (7))))
  return;

 ndm_flags = (flags & ((((1UL))) << (5))) ? (1 << 4) : 0;
 ndm_flags |= (flags & ((((1UL))) << (4))) ? ((1 << 0) << 8) : 0;

 if ((old_flags ^ ndm_flags) & (1 << 4)) {
  if (ndm_flags & (1 << 4))
   neigh->flags |= (1 << 4);
  else
   neigh->flags &= ~(1 << 4);
  *notify = 1;
  *gc_update = true;
 }
 if ((old_flags ^ ndm_flags) & ((1 << 0) << 8)) {
  if (ndm_flags & ((1 << 0) << 8))
   neigh->flags |= ((1 << 0) << 8);
  else
   neigh->flags &= ~((1 << 0) << 8);
  *notify = 1;
  *managed_update = true;
 }
}

static bool neigh_del(struct neighbour *n, struct neighbour **np,
        struct neigh_table *tbl)
{
 bool retval = false;

 _raw_write_lock(&n->lock);
 if (refcount_read(&n->refcnt) == 1) {
  struct neighbour *neigh;

  neigh = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(n->next)) *)((n->next))); });

  do { uintptr_t _r_a_p__v = (uintptr_t)(neigh); ; if (__builtin_constant_p(neigh) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_347(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*np)) == sizeof(char) || sizeof((*np)) == sizeof(short) || sizeof((*np)) == sizeof(int) || sizeof((*np)) == sizeof(long)) || sizeof((*np)) == sizeof(long long))) __compiletime_assert_347(); } while (0); do { *(volatile typeof((*np)) *)&((*np)) = ((typeof(*np))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&*np) __p = (&*np); union { typeof( _Generic((*&*np), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*np))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&*np), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*np)))) ((typeof(*((typeof(*np))_r_a_p__v)) *)((typeof(*np))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_348(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*np) == sizeof(char) || sizeof(*&*np) == sizeof(short) || sizeof(*&*np) == sizeof(int) || sizeof(*&*np) == sizeof(long)))) __compiletime_assert_348(); } while (0); kasan_check_write(__p, sizeof(*&*np)); switch (sizeof(*&*np)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
  neigh_mark_dead(n);
  retval = true;
 }
 _raw_write_unlock(&n->lock);
 if (retval)
  neigh_cleanup_and_release(n);
 return retval;
}

bool neigh_remove_one(struct neighbour *ndel, struct neigh_table *tbl)
{
 struct neigh_hash_table *nht;
 void *pkey = ndel->primary_key;
 u32 hash_val;
 struct neighbour *n;
 struct neighbour **np;

 nht = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); });

 hash_val = tbl->hash(pkey, ndel->dev, nht->hash_rnd);
 hash_val = hash_val >> (32 - nht->hash_shift);

 np = &nht->hash_buckets[hash_val];
 while ((n = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(*np)) *)((*np))); }))) {

  if (n == ndel)
   return neigh_del(n, np, tbl);
  np = &n->next;
 }
 return false;
}

static int neigh_forced_gc(struct neigh_table *tbl)
{
 int max_clean = atomic_read(&tbl->gc_entries) - tbl->gc_thresh2;
 unsigned long tref = jiffies - 5 * 250;
 struct neighbour *n, *tmp;
 int shrunk = 0;

 do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->forced_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->forced_gc_runs)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->forced_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs))); (typeof((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->forced_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs))); (typeof((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->forced_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs))); (typeof((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->forced_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs))); (typeof((typeof(*(&((tbl)->stats->forced_gc_runs))) *)(&((tbl)->stats->forced_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);

 _raw_write_lock_bh(&tbl->lock);

 for (n = ({ void *__mptr = (void *)((&tbl->gc_list)->next); _Static_assert(__builtin_types_compatible_p(typeof(*((&tbl->gc_list)->next)), typeof(((typeof(*n) *)0)->gc_list)) || __builtin_types_compatible_p(typeof(*((&tbl->gc_list)->next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*n) *)(__mptr - __builtin_offsetof(typeof(*n), gc_list))); }), tmp = ({ void *__mptr = (void *)((n)->gc_list.next); _Static_assert(__builtin_types_compatible_p(typeof(*((n)->gc_list.next)), typeof(((typeof(*(n)) *)0)->gc_list)) || __builtin_types_compatible_p(typeof(*((n)->gc_list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(n)) *)(__mptr - __builtin_offsetof(typeof(*(n)), gc_list))); }); !(&n->gc_list == (&tbl->gc_list)); n = tmp, tmp = ({ void *__mptr = (void *)((tmp)->gc_list.next); _Static_assert(__builtin_types_compatible_p(typeof(*((tmp)->gc_list.next)), typeof(((typeof(*(tmp)) *)0)->gc_list)) || __builtin_types_compatible_p(typeof(*((tmp)->gc_list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(tmp)) *)(__mptr - __builtin_offsetof(typeof(*(tmp)), gc_list))); })) {
  if (refcount_read(&n->refcnt) == 1) {
   bool remove = false;

   _raw_write_lock(&n->lock);
   if ((n->nud_state == 0x20) ||
       (n->nud_state == 0x40) ||
       (tbl->is_multicast &&
        tbl->is_multicast(n->primary_key)) ||
       (({ unsigned long __dummy; typeof(tref) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(n->updated) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((n->updated) - (tref)) < 0)))
    remove = true;
   _raw_write_unlock(&n->lock);

   if (remove && neigh_remove_one(n, tbl))
    shrunk++;
   if (shrunk >= max_clean)
    break;
  }
 }

 tbl->last_flush = jiffies;

 _raw_write_unlock_bh(&tbl->lock);

 return shrunk;
}

static void neigh_add_timer(struct neighbour *n, unsigned long when)
{
 refcount_inc(&(n)->refcnt);
 if (__builtin_expect(!!(mod_timer(&n->timer, when)), 0)) {
  ({ do {} while (0); _printk("NEIGH: BUG, double timer add, state is %x\n", n->nud_state); });

  dump_stack();
 }
}

static int neigh_del_timer(struct neighbour *n)
{
 if ((n->nud_state & (0x01|0x02|0x08|0x10)) &&
     del_timer(&n->timer)) {
  neigh_release(n);
  return 1;
 }
 return 0;
}

static void pneigh_queue_purge(struct sk_buff_head *list)
{
 struct sk_buff *skb;

 while ((skb = skb_dequeue(list)) != ((void *)0)) {
  dev_put(skb->dev);
  kfree_skb(skb);
 }
}

static void neigh_flush_dev(struct neigh_table *tbl, struct net_device *dev,
       bool skip_perm)
{
 int i;
 struct neigh_hash_table *nht;

 nht = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); });


 for (i = 0; i < (1 << nht->hash_shift); i++) {
  struct neighbour *n;
  struct neighbour **np = &nht->hash_buckets[i];

  while ((n = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(*np)) *)((*np))); })) != ((void *)0)) {

   if (dev && n->dev != dev) {
    np = &n->next;
    continue;
   }
   if (skip_perm && n->nud_state & 0x80) {
    np = &n->next;
    continue;
   }
   do { uintptr_t _r_a_p__v = (uintptr_t)(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(n->next)) *)((n->next))); })); ; if (__builtin_constant_p(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(n->next)) *)((n->next))); })) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_349(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*np)) == sizeof(char) || sizeof((*np)) == sizeof(short) || sizeof((*np)) == sizeof(int) || sizeof((*np)) == sizeof(long)) || sizeof((*np)) == sizeof(long long))) __compiletime_assert_349(); } while (0); do { *(volatile typeof((*np)) *)&((*np)) = ((typeof(*np))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&*np) __p = (&*np); union { typeof( _Generic((*&*np), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*np))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&*np), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*np)))) ((typeof(*((typeof(*np))_r_a_p__v)) *)((typeof(*np))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_350(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*np) == sizeof(char) || sizeof(*&*np) == sizeof(short) || sizeof(*&*np) == sizeof(int) || sizeof(*&*np) == sizeof(long)))) __compiletime_assert_350(); } while (0); kasan_check_write(__p, sizeof(*&*np)); switch (sizeof(*&*np)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);


   _raw_write_lock(&n->lock);
   neigh_del_timer(n);
   neigh_mark_dead(n);
   if (refcount_read(&n->refcnt) != 1) {
# 383 "net/core/neighbour.c"
    __skb_queue_purge(&n->arp_queue);
    n->arp_queue_len_bytes = 0;
    n->output = neigh_blackhole;
    if (n->nud_state & (0x80|0x40|0x02|0x10|0x04|0x08))
     n->nud_state = 0x40;
    else
     n->nud_state = 0x00;
    do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is stray\n", n); }); 0; }); } while (0);
   }
   _raw_write_unlock(&n->lock);
   neigh_cleanup_and_release(n);
  }
 }
}

void neigh_changeaddr(struct neigh_table *tbl, struct net_device *dev)
{
 _raw_write_lock_bh(&tbl->lock);
 neigh_flush_dev(tbl, dev, false);
 _raw_write_unlock_bh(&tbl->lock);
}
extern typeof(neigh_changeaddr) neigh_changeaddr; extern const char __kstrtab_neigh_changeaddr[]; extern const char __kstrtabns_neigh_changeaddr[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_changeaddr" ":					\n" "	.asciz 	\"" "neigh_changeaddr" "\"					\n" "__kstrtabns_" "neigh_changeaddr" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_changeaddr351 = (void *)&neigh_changeaddr; asm("	.section \"___ksymtab" "" "+" "neigh_changeaddr" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_changeaddr" ":				\n" "	.long	" "neigh_changeaddr" "- .				\n" "	.long	__kstrtab_" "neigh_changeaddr" "- .			\n" "	.long	__kstrtabns_" "neigh_changeaddr" "- .			\n" "	.previous					\n");

static int __neigh_ifdown(struct neigh_table *tbl, struct net_device *dev,
     bool skip_perm)
{
 _raw_write_lock_bh(&tbl->lock);
 neigh_flush_dev(tbl, dev, skip_perm);
 pneigh_ifdown_and_unlock(tbl, dev);

 del_timer_sync(&tbl->proxy_timer);
 pneigh_queue_purge(&tbl->proxy_queue);
 return 0;
}

int neigh_carrier_down(struct neigh_table *tbl, struct net_device *dev)
{
 __neigh_ifdown(tbl, dev, true);
 return 0;
}
extern typeof(neigh_carrier_down) neigh_carrier_down; extern const char __kstrtab_neigh_carrier_down[]; extern const char __kstrtabns_neigh_carrier_down[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_carrier_down" ":					\n" "	.asciz 	\"" "neigh_carrier_down" "\"					\n" "__kstrtabns_" "neigh_carrier_down" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_carrier_down352 = (void *)&neigh_carrier_down; asm("	.section \"___ksymtab" "" "+" "neigh_carrier_down" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_carrier_down" ":				\n" "	.long	" "neigh_carrier_down" "- .				\n" "	.long	__kstrtab_" "neigh_carrier_down" "- .			\n" "	.long	__kstrtabns_" "neigh_carrier_down" "- .			\n" "	.previous					\n");

int neigh_ifdown(struct neigh_table *tbl, struct net_device *dev)
{
 __neigh_ifdown(tbl, dev, false);
 return 0;
}
extern typeof(neigh_ifdown) neigh_ifdown; extern const char __kstrtab_neigh_ifdown[]; extern const char __kstrtabns_neigh_ifdown[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_ifdown" ":					\n" "	.asciz 	\"" "neigh_ifdown" "\"					\n" "__kstrtabns_" "neigh_ifdown" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_ifdown353 = (void *)&neigh_ifdown; asm("	.section \"___ksymtab" "" "+" "neigh_ifdown" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_ifdown" ":				\n" "	.long	" "neigh_ifdown" "- .				\n" "	.long	__kstrtab_" "neigh_ifdown" "- .			\n" "	.long	__kstrtabns_" "neigh_ifdown" "- .			\n" "	.previous					\n");

static struct neighbour *neigh_alloc(struct neigh_table *tbl,
         struct net_device *dev,
         u32 flags, bool exempt_from_gc)
{
 struct neighbour *n = ((void *)0);
 unsigned long now = jiffies;
 int entries;

 if (exempt_from_gc)
  goto do_alloc;

 entries = atomic_inc_return(&tbl->gc_entries) - 1;
 if (entries >= tbl->gc_thresh3 ||
     (entries >= tbl->gc_thresh2 &&
      (({ unsigned long __dummy; typeof(now) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(tbl->last_flush + 5 * 250) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((tbl->last_flush + 5 * 250) - (now)) < 0)))) {
  if (!neigh_forced_gc(tbl) &&
      entries >= tbl->gc_thresh3) {
   do { if (net_ratelimit()) ({ do {} while (0); _printk("\001" "6" "neighbour" ": " "%s: neighbor table overflow!\n", tbl->id); }); } while (0);

   do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->table_fulls)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->table_fulls)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->table_fulls)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls))); (typeof((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->table_fulls)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls))); (typeof((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->table_fulls)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls))); (typeof((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->table_fulls)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls))); (typeof((typeof(*(&((tbl)->stats->table_fulls))) *)(&((tbl)->stats->table_fulls)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
   goto out_entries;
  }
 }

do_alloc:
 n = kzalloc(tbl->entry_size + dev->neigh_priv_len, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 if (!n)
  goto out_entries;

 __skb_queue_head_init(&n->arp_queue);
 do { *(&n->lock) = (rwlock_t) { .raw_lock = { { .cnts = { (0) }, }, .wait_lock = { { .val = { (0) } } }, }, }; } while (0);
 do { do { spinlock_check(&(&n->ha_lock)->lock); *(&(&n->ha_lock)->lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0); do { seqcount_spinlock_t *____s = (&(&n->ha_lock)->seqcount); __seqcount_init(&____s->seqcount, ((void *)0), ((void *)0)); ; } while (0); } while (0);
 n->updated = n->used = now;
 n->nud_state = 0x00;
 n->output = neigh_blackhole;
 n->flags = flags;
 do { do { spinlock_check(&(&n->hh.hh_lock)->lock); *(&(&n->hh.hh_lock)->lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0); do { seqcount_spinlock_t *____s = (&(&n->hh.hh_lock)->seqcount); __seqcount_init(&____s->seqcount, ((void *)0), ((void *)0)); ; } while (0); } while (0);
 n->parms = neigh_parms_clone(&tbl->parms);
 init_timer_key(((&n->timer)), ((neigh_timer_handler)), ((0)), ((void *)0), ((void *)0));

 do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->allocs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->allocs)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->allocs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs))); (typeof((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->allocs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs))); (typeof((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->allocs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs))); (typeof((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->allocs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs))); (typeof((typeof(*(&((tbl)->stats->allocs))) *)(&((tbl)->stats->allocs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 n->tbl = tbl;
 refcount_set(&n->refcnt, 1);
 n->dead = 1;
 INIT_LIST_HEAD(&n->gc_list);
 INIT_LIST_HEAD(&n->managed_list);

 atomic_inc(&tbl->entries);
out:
 return n;

out_entries:
 if (!exempt_from_gc)
  atomic_dec(&tbl->gc_entries);
 goto out;
}

static void neigh_get_hash_rnd(u32 *x)
{
 *x = get_random_u32() | 1;
}

static struct neigh_hash_table *neigh_hash_alloc(unsigned int shift)
{
 size_t size = (1 << shift) * sizeof(struct neighbour *);
 struct neigh_hash_table *ret;
 struct neighbour **buckets;
 int i;

 ret = kmalloc(sizeof(*ret), ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 if (!ret)
  return ((void *)0);
 if (size <= ((1UL) << 12)) {
  buckets = kzalloc(size, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 } else {
  buckets = (struct neighbour **)
     __get_free_pages(((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)) | (( gfp_t)0x100u),
        get_order(size));
  kmemleak_alloc(buckets, size, 1, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 }
 if (!buckets) {
  kfree(ret);
  return ((void *)0);
 }
 ret->hash_buckets = buckets;
 ret->hash_shift = shift;
 for (i = 0; i < 4; i++)
  neigh_get_hash_rnd(&ret->hash_rnd[i]);
 return ret;
}

static void neigh_hash_free_rcu(struct callback_head *head)
{
 struct neigh_hash_table *nht = ({ void *__mptr = (void *)(head); _Static_assert(__builtin_types_compatible_p(typeof(*(head)), typeof(((struct neigh_hash_table *)0)->rcu)) || __builtin_types_compatible_p(typeof(*(head)), typeof(void)), "pointer type mismatch in container_of()"); ((struct neigh_hash_table *)(__mptr - __builtin_offsetof(struct neigh_hash_table, rcu))); });


 size_t size = (1 << nht->hash_shift) * sizeof(struct neighbour *);
 struct neighbour **buckets = nht->hash_buckets;

 if (size <= ((1UL) << 12)) {
  kfree(buckets);
 } else {
  kmemleak_free(buckets);
  free_pages((unsigned long)buckets, get_order(size));
 }
 kfree(nht);
}

static struct neigh_hash_table *neigh_hash_grow(struct neigh_table *tbl,
      unsigned long new_shift)
{
 unsigned int i, hash;
 struct neigh_hash_table *new_nht, *old_nht;

 do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->hash_grows)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->hash_grows)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hash_grows)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows))); (typeof((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hash_grows)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows))); (typeof((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hash_grows)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows))); (typeof((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hash_grows)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows))); (typeof((typeof(*(&((tbl)->stats->hash_grows))) *)(&((tbl)->stats->hash_grows)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);

 old_nht = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); });

 new_nht = neigh_hash_alloc(new_shift);
 if (!new_nht)
  return old_nht;

 for (i = 0; i < (1 << old_nht->hash_shift); i++) {
  struct neighbour *n, *next;

  for (n = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(old_nht->hash_buckets[i])) *)((old_nht->hash_buckets[i]))); });

       n != ((void *)0);
       n = next) {
   hash = tbl->hash(n->primary_key, n->dev,
      new_nht->hash_rnd);

   hash >>= (32 - new_nht->hash_shift);
   next = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(n->next)) *)((n->next))); });


   do { uintptr_t _r_a_p__v = (uintptr_t)(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(new_nht->hash_buckets[hash])) *)((new_nht->hash_buckets[hash]))); })); ; if (__builtin_constant_p(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(new_nht->hash_buckets[hash])) *)((new_nht->hash_buckets[hash]))); })) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_354(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_354(); } while (0); do { *(volatile typeof((n->next)) *)&((n->next)) = ((typeof(n->next))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&n->next) __p = (&n->next); union { typeof( _Generic((*&n->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&n->next))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&n->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&n->next)))) ((typeof(*((typeof(n->next))_r_a_p__v)) *)((typeof(n->next))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_355(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&n->next) == sizeof(char) || sizeof(*&n->next) == sizeof(short) || sizeof(*&n->next) == sizeof(int) || sizeof(*&n->next) == sizeof(long)))) __compiletime_assert_355(); } while (0); kasan_check_write(__p, sizeof(*&n->next)); switch (sizeof(*&n->next)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);



   do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_356(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((new_nht->hash_buckets[hash])) == sizeof(char) || sizeof((new_nht->hash_buckets[hash])) == sizeof(short) || sizeof((new_nht->hash_buckets[hash])) == sizeof(int) || sizeof((new_nht->hash_buckets[hash])) == sizeof(long)) || sizeof((new_nht->hash_buckets[hash])) == sizeof(long long))) __compiletime_assert_356(); } while (0); do { *(volatile typeof((new_nht->hash_buckets[hash])) *)&((new_nht->hash_buckets[hash])) = ((typeof(new_nht->hash_buckets[hash]))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&new_nht->hash_buckets[hash]) __p = (&new_nht->hash_buckets[hash]); union { typeof( _Generic((*&new_nht->hash_buckets[hash]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&new_nht->hash_buckets[hash]))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&new_nht->hash_buckets[hash]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&new_nht->hash_buckets[hash])))) ((typeof(*((typeof(new_nht->hash_buckets[hash]))_r_a_p__v)) *)((typeof(new_nht->hash_buckets[hash]))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_357(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&new_nht->hash_buckets[hash]) == sizeof(char) || sizeof(*&new_nht->hash_buckets[hash]) == sizeof(short) || sizeof(*&new_nht->hash_buckets[hash]) == sizeof(int) || sizeof(*&new_nht->hash_buckets[hash]) == sizeof(long)))) __compiletime_assert_357(); } while (0); kasan_check_write(__p, sizeof(*&new_nht->hash_buckets[hash])); switch (sizeof(*&new_nht->hash_buckets[hash])) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
  }
 }

 do { uintptr_t _r_a_p__v = (uintptr_t)(new_nht); ; if (__builtin_constant_p(new_nht) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_358(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tbl->nht)) == sizeof(char) || sizeof((tbl->nht)) == sizeof(short) || sizeof((tbl->nht)) == sizeof(int) || sizeof((tbl->nht)) == sizeof(long)) || sizeof((tbl->nht)) == sizeof(long long))) __compiletime_assert_358(); } while (0); do { *(volatile typeof((tbl->nht)) *)&((tbl->nht)) = ((typeof(tbl->nht))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&tbl->nht) __p = (&tbl->nht); union { typeof( _Generic((*&tbl->nht), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&tbl->nht))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&tbl->nht), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&tbl->nht)))) ((typeof(*((typeof(tbl->nht))_r_a_p__v)) *)((typeof(tbl->nht))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_359(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&tbl->nht) == sizeof(char) || sizeof(*&tbl->nht) == sizeof(short) || sizeof(*&tbl->nht) == sizeof(int) || sizeof(*&tbl->nht) == sizeof(long)))) __compiletime_assert_359(); } while (0); kasan_check_write(__p, sizeof(*&tbl->nht)); switch (sizeof(*&tbl->nht)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 call_rcu(&old_nht->rcu, neigh_hash_free_rcu);
 return new_nht;
}

struct neighbour *neigh_lookup(struct neigh_table *tbl, const void *pkey,
          struct net_device *dev)
{
 struct neighbour *n;

 do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->lookups)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);

 rcu_read_lock_bh();
 n = __neigh_lookup_noref(tbl, pkey, dev);
 if (n) {
  if (!refcount_inc_not_zero(&n->refcnt))
   n = ((void *)0);
  do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->hits)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 }

 rcu_read_unlock_bh();
 return n;
}
extern typeof(neigh_lookup) neigh_lookup; extern const char __kstrtab_neigh_lookup[]; extern const char __kstrtabns_neigh_lookup[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_lookup" ":					\n" "	.asciz 	\"" "neigh_lookup" "\"					\n" "__kstrtabns_" "neigh_lookup" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_lookup360 = (void *)&neigh_lookup; asm("	.section \"___ksymtab" "" "+" "neigh_lookup" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_lookup" ":				\n" "	.long	" "neigh_lookup" "- .				\n" "	.long	__kstrtab_" "neigh_lookup" "- .			\n" "	.long	__kstrtabns_" "neigh_lookup" "- .			\n" "	.previous					\n");

struct neighbour *neigh_lookup_nodev(struct neigh_table *tbl, struct net *net,
         const void *pkey)
{
 struct neighbour *n;
 unsigned int key_len = tbl->key_len;
 u32 hash_val;
 struct neigh_hash_table *nht;

 do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->lookups)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->lookups)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups))); (typeof((typeof(*(&((tbl)->stats->lookups))) *)(&((tbl)->stats->lookups)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);

 rcu_read_lock_bh();
 nht = ({ typeof(*(tbl->nht)) *________p1 = (typeof(*(tbl->nht)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_361(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tbl->nht)) == sizeof(char) || sizeof((tbl->nht)) == sizeof(short) || sizeof((tbl->nht)) == sizeof(int) || sizeof((tbl->nht)) == sizeof(long)) || sizeof((tbl->nht)) == sizeof(long long))) __compiletime_assert_361(); } while (0); (*(const volatile typeof( _Generic(((tbl->nht)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tbl->nht)))) *)&((tbl->nht))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(tbl->nht)) *)(________p1)); });
 hash_val = tbl->hash(pkey, ((void *)0), nht->hash_rnd) >> (32 - nht->hash_shift);

 for (n = ({ typeof(*(nht->hash_buckets[hash_val])) *________p1 = (typeof(*(nht->hash_buckets[hash_val])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_362(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((nht->hash_buckets[hash_val])) == sizeof(char) || sizeof((nht->hash_buckets[hash_val])) == sizeof(short) || sizeof((nht->hash_buckets[hash_val])) == sizeof(int) || sizeof((nht->hash_buckets[hash_val])) == sizeof(long)) || sizeof((nht->hash_buckets[hash_val])) == sizeof(long long))) __compiletime_assert_362(); } while (0); (*(const volatile typeof( _Generic(((nht->hash_buckets[hash_val])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((nht->hash_buckets[hash_val])))) *)&((nht->hash_buckets[hash_val]))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(nht->hash_buckets[hash_val])) *)(________p1)); });
      n != ((void *)0);
      n = ({ typeof(*(n->next)) *________p1 = (typeof(*(n->next)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_363(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_363(); } while (0); (*(const volatile typeof( _Generic(((n->next)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((n->next)))) *)&((n->next))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(n->next)) *)(________p1)); })) {
  if (!memcmp(n->primary_key, pkey, key_len) &&
      net_eq(dev_net(n->dev), net)) {
   if (!refcount_inc_not_zero(&n->refcnt))
    n = ((void *)0);
   do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->hits)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->hits)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits))); (typeof((typeof(*(&((tbl)->stats->hits))) *)(&((tbl)->stats->hits)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
   break;
  }
 }

 rcu_read_unlock_bh();
 return n;
}
extern typeof(neigh_lookup_nodev) neigh_lookup_nodev; extern const char __kstrtab_neigh_lookup_nodev[]; extern const char __kstrtabns_neigh_lookup_nodev[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_lookup_nodev" ":					\n" "	.asciz 	\"" "neigh_lookup_nodev" "\"					\n" "__kstrtabns_" "neigh_lookup_nodev" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_lookup_nodev364 = (void *)&neigh_lookup_nodev; asm("	.section \"___ksymtab" "" "+" "neigh_lookup_nodev" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_lookup_nodev" ":				\n" "	.long	" "neigh_lookup_nodev" "- .				\n" "	.long	__kstrtab_" "neigh_lookup_nodev" "- .			\n" "	.long	__kstrtabns_" "neigh_lookup_nodev" "- .			\n" "	.previous					\n");

static struct neighbour *
___neigh_create(struct neigh_table *tbl, const void *pkey,
  struct net_device *dev, u32 flags,
  bool exempt_from_gc, bool want_ref)
{
 u32 hash_val, key_len = tbl->key_len;
 struct neighbour *n1, *rc, *n;
 struct neigh_hash_table *nht;
 int error;

 n = neigh_alloc(tbl, dev, flags, exempt_from_gc);
 trace_neigh_create(tbl, dev, pkey, n, exempt_from_gc);
 if (!n) {
  rc = ERR_PTR(-105);
  goto out;
 }

 memcpy(n->primary_key, pkey, key_len);
 n->dev = dev;
 dev_hold(dev);


 if (tbl->constructor && (error = tbl->constructor(n)) < 0) {
  rc = ERR_PTR(error);
  goto out_neigh_release;
 }

 if (dev->netdev_ops->ndo_neigh_construct) {
  error = dev->netdev_ops->ndo_neigh_construct(dev, n);
  if (error < 0) {
   rc = ERR_PTR(error);
   goto out_neigh_release;
  }
 }


 if (n->parms->neigh_setup &&
     (error = n->parms->neigh_setup(n)) < 0) {
  rc = ERR_PTR(error);
  goto out_neigh_release;
 }

 n->confirmed = jiffies - (((n->parms)->data[NEIGH_VAR_BASE_REACHABLE_TIME]) << 1);

 _raw_write_lock_bh(&tbl->lock);
 nht = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); });


 if (atomic_read(&tbl->entries) > (1 << nht->hash_shift))
  nht = neigh_hash_grow(tbl, nht->hash_shift + 1);

 hash_val = tbl->hash(n->primary_key, dev, nht->hash_rnd) >> (32 - nht->hash_shift);

 if (n->parms->dead) {
  rc = ERR_PTR(-22);
  goto out_tbl_unlock;
 }

 for (n1 = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(nht->hash_buckets[hash_val])) *)((nht->hash_buckets[hash_val]))); });

      n1 != ((void *)0);
      n1 = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(n1->next)) *)((n1->next))); })) {

  if (dev == n1->dev && !memcmp(n1->primary_key, n->primary_key, key_len)) {
   if (want_ref)
    refcount_inc(&(n1)->refcnt);
   rc = n1;
   goto out_tbl_unlock;
  }
 }

 n->dead = 0;
 if (!exempt_from_gc)
  list_add_tail(&n->gc_list, &n->tbl->gc_list);
 if (n->flags & ((1 << 0) << 8))
  list_add_tail(&n->managed_list, &n->tbl->managed_list);
 if (want_ref)
  refcount_inc(&(n)->refcnt);
 do { uintptr_t _r_a_p__v = (uintptr_t)(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(nht->hash_buckets[hash_val])) *)((nht->hash_buckets[hash_val]))); })); ; if (__builtin_constant_p(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(nht->hash_buckets[hash_val])) *)((nht->hash_buckets[hash_val]))); })) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_365(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_365(); } while (0); do { *(volatile typeof((n->next)) *)&((n->next)) = ((typeof(n->next))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&n->next) __p = (&n->next); union { typeof( _Generic((*&n->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&n->next))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&n->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&n->next)))) ((typeof(*((typeof(n->next))_r_a_p__v)) *)((typeof(n->next))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_366(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&n->next) == sizeof(char) || sizeof(*&n->next) == sizeof(short) || sizeof(*&n->next) == sizeof(int) || sizeof(*&n->next) == sizeof(long)))) __compiletime_assert_366(); } while (0); kasan_check_write(__p, sizeof(*&n->next)); switch (sizeof(*&n->next)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);


 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_367(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((nht->hash_buckets[hash_val])) == sizeof(char) || sizeof((nht->hash_buckets[hash_val])) == sizeof(short) || sizeof((nht->hash_buckets[hash_val])) == sizeof(int) || sizeof((nht->hash_buckets[hash_val])) == sizeof(long)) || sizeof((nht->hash_buckets[hash_val])) == sizeof(long long))) __compiletime_assert_367(); } while (0); do { *(volatile typeof((nht->hash_buckets[hash_val])) *)&((nht->hash_buckets[hash_val])) = ((typeof(nht->hash_buckets[hash_val]))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&nht->hash_buckets[hash_val]) __p = (&nht->hash_buckets[hash_val]); union { typeof( _Generic((*&nht->hash_buckets[hash_val]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&nht->hash_buckets[hash_val]))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&nht->hash_buckets[hash_val]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&nht->hash_buckets[hash_val])))) ((typeof(*((typeof(nht->hash_buckets[hash_val]))_r_a_p__v)) *)((typeof(nht->hash_buckets[hash_val]))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_368(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&nht->hash_buckets[hash_val]) == sizeof(char) || sizeof(*&nht->hash_buckets[hash_val]) == sizeof(short) || sizeof(*&nht->hash_buckets[hash_val]) == sizeof(int) || sizeof(*&nht->hash_buckets[hash_val]) == sizeof(long)))) __compiletime_assert_368(); } while (0); kasan_check_write(__p, sizeof(*&nht->hash_buckets[hash_val])); switch (sizeof(*&nht->hash_buckets[hash_val])) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 _raw_write_unlock_bh(&tbl->lock);
 do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is created\n", n); }); 0; }); } while (0);
 rc = n;
out:
 return rc;
out_tbl_unlock:
 _raw_write_unlock_bh(&tbl->lock);
out_neigh_release:
 if (!exempt_from_gc)
  atomic_dec(&tbl->gc_entries);
 neigh_release(n);
 goto out;
}

struct neighbour *__neigh_create(struct neigh_table *tbl, const void *pkey,
     struct net_device *dev, bool want_ref)
{
 return ___neigh_create(tbl, pkey, dev, 0, false, want_ref);
}
extern typeof(__neigh_create) __neigh_create; extern const char __kstrtab___neigh_create[]; extern const char __kstrtabns___neigh_create[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "__neigh_create" ":					\n" "	.asciz 	\"" "__neigh_create" "\"					\n" "__kstrtabns_" "__neigh_create" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___neigh_create369 = (void *)&__neigh_create; asm("	.section \"___ksymtab" "" "+" "__neigh_create" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "__neigh_create" ":				\n" "	.long	" "__neigh_create" "- .				\n" "	.long	__kstrtab_" "__neigh_create" "- .			\n" "	.long	__kstrtabns_" "__neigh_create" "- .			\n" "	.previous					\n");

static u32 pneigh_hash(const void *pkey, unsigned int key_len)
{
 u32 hash_val = *(u32 *)(pkey + key_len - 4);
 hash_val ^= (hash_val >> 16);
 hash_val ^= hash_val >> 8;
 hash_val ^= hash_val >> 4;
 hash_val &= 0xF;
 return hash_val;
}

static struct pneigh_entry *__pneigh_lookup_1(struct pneigh_entry *n,
           struct net *net,
           const void *pkey,
           unsigned int key_len,
           struct net_device *dev)
{
 while (n) {
  if (!memcmp(n->key, pkey, key_len) &&
      net_eq(pneigh_net(n), net) &&
      (n->dev == dev || !n->dev))
   return n;
  n = n->next;
 }
 return ((void *)0);
}

struct pneigh_entry *__pneigh_lookup(struct neigh_table *tbl,
  struct net *net, const void *pkey, struct net_device *dev)
{
 unsigned int key_len = tbl->key_len;
 u32 hash_val = pneigh_hash(pkey, key_len);

 return __pneigh_lookup_1(tbl->phash_buckets[hash_val],
     net, pkey, key_len, dev);
}
extern typeof(__pneigh_lookup) __pneigh_lookup; extern const char __kstrtab___pneigh_lookup[]; extern const char __kstrtabns___pneigh_lookup[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "__pneigh_lookup" ":					\n" "	.asciz 	\"" "__pneigh_lookup" "\"					\n" "__kstrtabns_" "__pneigh_lookup" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___pneigh_lookup370 = (void *)&__pneigh_lookup; asm("	.section \"___ksymtab" "_gpl" "+" "__pneigh_lookup" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "__pneigh_lookup" ":				\n" "	.long	" "__pneigh_lookup" "- .				\n" "	.long	__kstrtab_" "__pneigh_lookup" "- .			\n" "	.long	__kstrtabns_" "__pneigh_lookup" "- .			\n" "	.previous					\n");

struct pneigh_entry * pneigh_lookup(struct neigh_table *tbl,
        struct net *net, const void *pkey,
        struct net_device *dev, int creat)
{
 struct pneigh_entry *n;
 unsigned int key_len = tbl->key_len;
 u32 hash_val = pneigh_hash(pkey, key_len);

 _raw_read_lock_bh(&tbl->lock);
 n = __pneigh_lookup_1(tbl->phash_buckets[hash_val],
         net, pkey, key_len, dev);
 _raw_read_unlock_bh(&tbl->lock);

 if (n || !creat)
  goto out;

 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!rtnl_is_locked()); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("RTNL: assertion failed at %s (%d)\n", "net/core/neighbour.c", 788); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 788; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });

 n = kzalloc(sizeof(*n) + key_len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!n)
  goto out;

 write_pnet(&n->net, net);
 memcpy(n->key, pkey, key_len);
 n->dev = dev;
 dev_hold(dev);

 if (tbl->pconstructor && tbl->pconstructor(n)) {
  dev_put(dev);
  kfree(n);
  n = ((void *)0);
  goto out;
 }

 _raw_write_lock_bh(&tbl->lock);
 n->next = tbl->phash_buckets[hash_val];
 tbl->phash_buckets[hash_val] = n;
 _raw_write_unlock_bh(&tbl->lock);
out:
 return n;
}
extern typeof(pneigh_lookup) pneigh_lookup; extern const char __kstrtab_pneigh_lookup[]; extern const char __kstrtabns_pneigh_lookup[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "pneigh_lookup" ":					\n" "	.asciz 	\"" "pneigh_lookup" "\"					\n" "__kstrtabns_" "pneigh_lookup" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_pneigh_lookup371 = (void *)&pneigh_lookup; asm("	.section \"___ksymtab" "" "+" "pneigh_lookup" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "pneigh_lookup" ":				\n" "	.long	" "pneigh_lookup" "- .				\n" "	.long	__kstrtab_" "pneigh_lookup" "- .			\n" "	.long	__kstrtabns_" "pneigh_lookup" "- .			\n" "	.previous					\n");


int pneigh_delete(struct neigh_table *tbl, struct net *net, const void *pkey,
    struct net_device *dev)
{
 struct pneigh_entry *n, **np;
 unsigned int key_len = tbl->key_len;
 u32 hash_val = pneigh_hash(pkey, key_len);

 _raw_write_lock_bh(&tbl->lock);
 for (np = &tbl->phash_buckets[hash_val]; (n = *np) != ((void *)0);
      np = &n->next) {
  if (!memcmp(n->key, pkey, key_len) && n->dev == dev &&
      net_eq(pneigh_net(n), net)) {
   *np = n->next;
   _raw_write_unlock_bh(&tbl->lock);
   if (tbl->pdestructor)
    tbl->pdestructor(n);
   dev_put(n->dev);
   kfree(n);
   return 0;
  }
 }
 _raw_write_unlock_bh(&tbl->lock);
 return -2;
}

static int pneigh_ifdown_and_unlock(struct neigh_table *tbl,
        struct net_device *dev)
{
 struct pneigh_entry *n, **np, *freelist = ((void *)0);
 u32 h;

 for (h = 0; h <= 0xF; h++) {
  np = &tbl->phash_buckets[h];
  while ((n = *np) != ((void *)0)) {
   if (!dev || n->dev == dev) {
    *np = n->next;
    n->next = freelist;
    freelist = n;
    continue;
   }
   np = &n->next;
  }
 }
 _raw_write_unlock_bh(&tbl->lock);
 while ((n = freelist)) {
  freelist = n->next;
  n->next = ((void *)0);
  if (tbl->pdestructor)
   tbl->pdestructor(n);
  dev_put(n->dev);
  kfree(n);
 }
 return -2;
}

static void neigh_parms_destroy(struct neigh_parms *parms);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void neigh_parms_put(struct neigh_parms *parms)
{
 if (refcount_dec_and_test(&parms->refcnt))
  neigh_parms_destroy(parms);
}





void neigh_destroy(struct neighbour *neigh)
{
 struct net_device *dev = neigh->dev;

 do { do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->destroys)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((neigh->tbl)->stats->destroys)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->destroys)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys))); (typeof((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->destroys)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys))); (typeof((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->destroys)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys))); (typeof((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->destroys)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys))); (typeof((typeof(*(&((neigh->tbl)->stats->destroys))) *)(&((neigh->tbl)->stats->destroys)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);

 if (!neigh->dead) {
  ({ do {} while (0); _printk("\001" "4" "neighbour" ": " "Destroying alive neighbour %p\n", neigh); });
  dump_stack();
  return;
 }

 if (neigh_del_timer(neigh))
  ({ do {} while (0); _printk("\001" "4" "neighbour" ": " "Impossible event\n"); });

 _raw_write_lock_bh(&neigh->lock);
 __skb_queue_purge(&neigh->arp_queue);
 _raw_write_unlock_bh(&neigh->lock);
 neigh->arp_queue_len_bytes = 0;

 if (dev->netdev_ops->ndo_neigh_destroy)
  dev->netdev_ops->ndo_neigh_destroy(dev, neigh);

 dev_put(dev);
 neigh_parms_put(neigh->parms);

 do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is destroyed\n", neigh); }); 0; }); } while (0);

 atomic_dec(&neigh->tbl->entries);
 do { typeof (neigh) ___p = (neigh); if (___p) { do { __attribute__((__noreturn__)) extern void __compiletime_assert_372(void) __attribute__((__error__("BUILD_BUG_ON failed: " "!__is_kvfree_rcu_offset(offsetof(typeof(*(neigh)), rcu))"))); if (!(!(!((__builtin_offsetof(typeof(*(neigh)), rcu)) < 4096)))) __compiletime_assert_372(); } while (0); kvfree_call_rcu(&((___p)->rcu), (rcu_callback_t)(unsigned long) (__builtin_offsetof(typeof(*(neigh)), rcu))); } } while (0);
}
extern typeof(neigh_destroy) neigh_destroy; extern const char __kstrtab_neigh_destroy[]; extern const char __kstrtabns_neigh_destroy[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_destroy" ":					\n" "	.asciz 	\"" "neigh_destroy" "\"					\n" "__kstrtabns_" "neigh_destroy" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_destroy373 = (void *)&neigh_destroy; asm("	.section \"___ksymtab" "" "+" "neigh_destroy" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_destroy" ":				\n" "	.long	" "neigh_destroy" "- .				\n" "	.long	__kstrtab_" "neigh_destroy" "- .			\n" "	.long	__kstrtabns_" "neigh_destroy" "- .			\n" "	.previous					\n");






static void neigh_suspect(struct neighbour *neigh)
{
 do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is suspected\n", neigh); }); 0; }); } while (0);

 neigh->output = neigh->ops->output;
}






static void neigh_connect(struct neighbour *neigh)
{
 do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is connected\n", neigh); }); 0; }); } while (0);

 neigh->output = neigh->ops->connected_output;
}

static void neigh_periodic_work(struct work_struct *work)
{
 struct neigh_table *tbl = ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct neigh_table *)0)->gc_work.work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct neigh_table *)(__mptr - __builtin_offsetof(struct neigh_table, gc_work.work))); });
 struct neighbour *n;
 struct neighbour **np;
 unsigned int i;
 struct neigh_hash_table *nht;

 do { do { const void *__vpp_verify = (typeof((&((tbl)->stats->periodic_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((tbl)->stats->periodic_gc_runs)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->periodic_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs))); (typeof((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->periodic_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs))); (typeof((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->periodic_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs))); (typeof((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((tbl)->stats->periodic_gc_runs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs))); (typeof((typeof(*(&((tbl)->stats->periodic_gc_runs))) *)(&((tbl)->stats->periodic_gc_runs)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);

 _raw_write_lock_bh(&tbl->lock);
 nht = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); });






 if ((({ unsigned long __dummy; typeof(jiffies) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(tbl->last_rand + 300 * 250) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((tbl->last_rand + 300 * 250) - (jiffies)) < 0))) {
  struct neigh_parms *p;
  tbl->last_rand = jiffies;
  for (p = ({ void *__mptr = (void *)((&tbl->parms_list)->next); _Static_assert(__builtin_types_compatible_p(typeof(*((&tbl->parms_list)->next)), typeof(((typeof(*p) *)0)->list)) || __builtin_types_compatible_p(typeof(*((&tbl->parms_list)->next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*p) *)(__mptr - __builtin_offsetof(typeof(*p), list))); }); !(&p->list == (&tbl->parms_list)); p = ({ void *__mptr = (void *)((p)->list.next); _Static_assert(__builtin_types_compatible_p(typeof(*((p)->list.next)), typeof(((typeof(*(p)) *)0)->list)) || __builtin_types_compatible_p(typeof(*((p)->list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(p)) *)(__mptr - __builtin_offsetof(typeof(*(p)), list))); }))
   p->reachable_time =
    neigh_rand_reach_time(((p)->data[NEIGH_VAR_BASE_REACHABLE_TIME]));
 }

 if (atomic_read(&tbl->entries) < tbl->gc_thresh1)
  goto out;

 for (i = 0 ; i < (1 << nht->hash_shift); i++) {
  np = &nht->hash_buckets[i];

  while ((n = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(*np)) *)((*np))); })) != ((void *)0)) {

   unsigned int state;

   _raw_write_lock(&n->lock);

   state = n->nud_state;
   if ((state & (0x80 | (0x01|0x02|0x08|0x10))) ||
       (n->flags & (1 << 4))) {
    _raw_write_unlock(&n->lock);
    goto next_elt;
   }

   if ((({ unsigned long __dummy; typeof(n->confirmed) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(n->used) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((n->used) - (n->confirmed)) < 0)))
    n->used = n->confirmed;

   if (refcount_read(&n->refcnt) == 1 &&
       (state == 0x20 ||
        (({ unsigned long __dummy; typeof(jiffies) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(n->used + ((n->parms)->data[NEIGH_VAR_GC_STALETIME])) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((n->used + ((n->parms)->data[NEIGH_VAR_GC_STALETIME])) - (jiffies)) < 0)))) {
    *np = n->next;
    neigh_mark_dead(n);
    _raw_write_unlock(&n->lock);
    neigh_cleanup_and_release(n);
    continue;
   }
   _raw_write_unlock(&n->lock);

next_elt:
   np = &n->next;
  }




  _raw_write_unlock_bh(&tbl->lock);
  ({ __might_resched("net/core/neighbour.c", 1007, 0); _cond_resched(); });
  _raw_write_lock_bh(&tbl->lock);
  nht = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); });

 }
out:




 queue_delayed_work(system_power_efficient_wq, &tbl->gc_work,
         ((&tbl->parms)->data[NEIGH_VAR_BASE_REACHABLE_TIME]) >> 1);
 _raw_write_unlock_bh(&tbl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int neigh_max_probes(struct neighbour *n)
{
 struct neigh_parms *p = n->parms;
 return ((p)->data[NEIGH_VAR_UCAST_PROBES]) + ((p)->data[NEIGH_VAR_APP_PROBES]) +
        (n->nud_state & 0x10 ? ((p)->data[NEIGH_VAR_MCAST_REPROBES]) :
         ((p)->data[NEIGH_VAR_MCAST_PROBES]));
}

static void neigh_invalidate(struct neighbour *neigh)


{
 struct sk_buff *skb;

 do { do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->res_failed)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((neigh->tbl)->stats->res_failed)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->res_failed)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed))); (typeof((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->res_failed)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed))); (typeof((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->res_failed)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed))); (typeof((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->res_failed)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed))); (typeof((typeof(*(&((neigh->tbl)->stats->res_failed))) *)(&((neigh->tbl)->stats->res_failed)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is failed\n", neigh); }); 0; }); } while (0);
 neigh->updated = jiffies;






 while (neigh->nud_state == 0x20 &&
        (skb = __skb_dequeue(&neigh->arp_queue)) != ((void *)0)) {
  _raw_write_unlock(&neigh->lock);
  neigh->ops->error_report(neigh, skb);
  _raw_write_lock(&neigh->lock);
 }
 __skb_queue_purge(&neigh->arp_queue);
 neigh->arp_queue_len_bytes = 0;
}

static void neigh_probe(struct neighbour *neigh)

{
 struct sk_buff *skb = skb_peek_tail(&neigh->arp_queue);

 if (skb)
  skb = skb_clone(skb, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 _raw_write_unlock(&neigh->lock);
 if (neigh->ops->solicit)
  neigh->ops->solicit(neigh, skb);
 atomic_inc(&neigh->probes);
 consume_skb(skb);
}



static void neigh_timer_handler(struct timer_list *t)
{
 unsigned long now, next;
 struct neighbour *neigh = ({ void *__mptr = (void *)(t); _Static_assert(__builtin_types_compatible_p(typeof(*(t)), typeof(((typeof(*neigh) *)0)->timer)) || __builtin_types_compatible_p(typeof(*(t)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*neigh) *)(__mptr - __builtin_offsetof(typeof(*neigh), timer))); });
 unsigned int state;
 int notify = 0;

 _raw_write_lock(&neigh->lock);

 state = neigh->nud_state;
 now = jiffies;
 next = now + 250;

 if (!(state & (0x01|0x02|0x08|0x10)))
  goto out;

 if (state & 0x02) {
  if ((({ unsigned long __dummy; typeof(neigh->confirmed + neigh->parms->reachable_time) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(now) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((neigh->confirmed + neigh->parms->reachable_time) - (now)) >= 0))) {

   do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is still alive\n", neigh); }); 0; }); } while (0);
   next = neigh->confirmed + neigh->parms->reachable_time;
  } else if ((({ unsigned long __dummy; typeof(neigh->used + ((neigh->parms)->data[NEIGH_VAR_DELAY_PROBE_TIME])) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(now) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((neigh->used + ((neigh->parms)->data[NEIGH_VAR_DELAY_PROBE_TIME])) - (now)) >= 0))) {


   do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is delayed\n", neigh); }); 0; }); } while (0);
   neigh->nud_state = 0x08;
   neigh->updated = jiffies;
   neigh_suspect(neigh);
   next = now + ((neigh->parms)->data[NEIGH_VAR_DELAY_PROBE_TIME]);
  } else {
   do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is suspected\n", neigh); }); 0; }); } while (0);
   neigh->nud_state = 0x04;
   neigh->updated = jiffies;
   neigh_suspect(neigh);
   notify = 1;
  }
 } else if (state & 0x08) {
  if ((({ unsigned long __dummy; typeof(neigh->confirmed + ((neigh->parms)->data[NEIGH_VAR_DELAY_PROBE_TIME])) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(now) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((neigh->confirmed + ((neigh->parms)->data[NEIGH_VAR_DELAY_PROBE_TIME])) - (now)) >= 0))) {


   do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is now reachable\n", neigh); }); 0; }); } while (0);
   neigh->nud_state = 0x02;
   neigh->updated = jiffies;
   neigh_connect(neigh);
   notify = 1;
   next = neigh->confirmed + neigh->parms->reachable_time;
  } else {
   do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is probed\n", neigh); }); 0; }); } while (0);
   neigh->nud_state = 0x10;
   neigh->updated = jiffies;
   atomic_set(&neigh->probes, 0);
   notify = 1;
   next = now + __builtin_choose_expr(((!!(sizeof((typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) *)1 == (typeof(250/100) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(250/100) * 0l)) : (int *)8))))), ((((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) > (250/100) ? (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) : (250/100)), ({ typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) __UNIQUE_ID___x374 = (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])); typeof(250/100) __UNIQUE_ID___y375 = (250/100); ((__UNIQUE_ID___x374) > (__UNIQUE_ID___y375) ? (__UNIQUE_ID___x374) : (__UNIQUE_ID___y375)); }));

  }
 } else {

  next = now + __builtin_choose_expr(((!!(sizeof((typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) *)1 == (typeof(250/100) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(250/100) * 0l)) : (int *)8))))), ((((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) > (250/100) ? (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) : (250/100)), ({ typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) __UNIQUE_ID___x376 = (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])); typeof(250/100) __UNIQUE_ID___y377 = (250/100); ((__UNIQUE_ID___x376) > (__UNIQUE_ID___y377) ? (__UNIQUE_ID___x376) : (__UNIQUE_ID___y377)); }));
 }

 if ((neigh->nud_state & (0x01 | 0x10)) &&
     atomic_read(&neigh->probes) >= neigh_max_probes(neigh)) {
  neigh->nud_state = 0x20;
  notify = 1;
  neigh_invalidate(neigh);
  goto out;
 }

 if (neigh->nud_state & (0x01|0x02|0x08|0x10)) {
  if ((({ unsigned long __dummy; typeof(jiffies + 250/100) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(next) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((next) - (jiffies + 250/100)) < 0)))
   next = jiffies + 250/100;
  if (!mod_timer(&neigh->timer, next))
   refcount_inc(&(neigh)->refcnt);
 }
 if (neigh->nud_state & (0x01 | 0x10)) {
  neigh_probe(neigh);
 } else {
out:
  _raw_write_unlock(&neigh->lock);
 }

 if (notify)
  neigh_update_notify(neigh, 0);

 trace_neigh_timer_handler(neigh, 0);

 neigh_release(neigh);
}

int __neigh_event_send(struct neighbour *neigh, struct sk_buff *skb)
{
 int rc;
 bool immediate_probe = false;

 _raw_write_lock_bh(&neigh->lock);

 rc = 0;
 if (neigh->nud_state & ((0x80|0x40|0x02) | 0x08 | 0x10))
  goto out_unlock_bh;
 if (neigh->dead)
  goto out_dead;

 if (!(neigh->nud_state & (0x04 | 0x01))) {
  if (((neigh->parms)->data[NEIGH_VAR_MCAST_PROBES]) +
      ((neigh->parms)->data[NEIGH_VAR_APP_PROBES])) {
   unsigned long next, now = jiffies;

   atomic_set(&neigh->probes,
       ((neigh->parms)->data[NEIGH_VAR_UCAST_PROBES]));
   neigh_del_timer(neigh);
   neigh->nud_state = 0x01;
   neigh->updated = now;
   next = now + __builtin_choose_expr(((!!(sizeof((typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) *)1 == (typeof(250/100) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(250/100) * 0l)) : (int *)8))))), ((((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) > (250/100) ? (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) : (250/100)), ({ typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) __UNIQUE_ID___x378 = (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])); typeof(250/100) __UNIQUE_ID___y379 = (250/100); ((__UNIQUE_ID___x378) > (__UNIQUE_ID___y379) ? (__UNIQUE_ID___x378) : (__UNIQUE_ID___y379)); }));

   neigh_add_timer(neigh, next);
   immediate_probe = true;
  } else {
   neigh->nud_state = 0x20;
   neigh->updated = jiffies;
   _raw_write_unlock_bh(&neigh->lock);

   kfree_skb(skb);
   return 1;
  }
 } else if (neigh->nud_state & 0x04) {
  do { if (2 <= 1) ({ if (0) ({ do {} while (0); _printk("\001" "7" "neighbour" ": " "neigh %p is delayed\n", neigh); }); 0; }); } while (0);
  neigh_del_timer(neigh);
  neigh->nud_state = 0x08;
  neigh->updated = jiffies;
  neigh_add_timer(neigh, jiffies +
    ((neigh->parms)->data[NEIGH_VAR_DELAY_PROBE_TIME]));
 }

 if (neigh->nud_state == 0x01) {
  if (skb) {
   while (neigh->arp_queue_len_bytes + skb->truesize >
          ((neigh->parms)->data[NEIGH_VAR_QUEUE_LEN_BYTES])) {
    struct sk_buff *buff;

    buff = __skb_dequeue(&neigh->arp_queue);
    if (!buff)
     break;
    neigh->arp_queue_len_bytes -= buff->truesize;
    kfree_skb(buff);
    do { do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->unres_discards)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof((neigh->tbl)->stats->unres_discards)) { case 1: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->unres_discards)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards))); (typeof((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->unres_discards)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards))); (typeof((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->unres_discards)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards))); (typeof((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&((neigh->tbl)->stats->unres_discards)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards))); (typeof((typeof(*(&((neigh->tbl)->stats->unres_discards))) *)(&((neigh->tbl)->stats->unres_discards)))) (__ptr + ((__kern_my_cpu_offset()))); }); }), 1); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
   }
   skb_dst_force(skb);
   __skb_queue_tail(&neigh->arp_queue, skb);
   neigh->arp_queue_len_bytes += skb->truesize;
  }
  rc = 1;
 }
out_unlock_bh:
 if (immediate_probe)
  neigh_probe(neigh);
 else
  _raw_write_unlock(&neigh->lock);
 local_bh_enable();
 trace_neigh_event_send_done(neigh, rc);
 return rc;

out_dead:
 if (neigh->nud_state & 0x04)
  goto out_unlock_bh;
 _raw_write_unlock_bh(&neigh->lock);
 kfree_skb(skb);
 trace_neigh_event_send_dead(neigh, 1);
 return 1;
}
extern typeof(__neigh_event_send) __neigh_event_send; extern const char __kstrtab___neigh_event_send[]; extern const char __kstrtabns___neigh_event_send[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "__neigh_event_send" ":					\n" "	.asciz 	\"" "__neigh_event_send" "\"					\n" "__kstrtabns_" "__neigh_event_send" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___neigh_event_send380 = (void *)&__neigh_event_send; asm("	.section \"___ksymtab" "" "+" "__neigh_event_send" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "__neigh_event_send" ":				\n" "	.long	" "__neigh_event_send" "- .				\n" "	.long	__kstrtab_" "__neigh_event_send" "- .			\n" "	.long	__kstrtabns_" "__neigh_event_send" "- .			\n" "	.previous					\n");

static void neigh_update_hhs(struct neighbour *neigh)
{
 struct hh_cache *hh;
 void (*update)(struct hh_cache*, const struct net_device*, const unsigned char *)
  = ((void *)0);

 if (neigh->dev->header_ops)
  update = neigh->dev->header_ops->cache_update;

 if (update) {
  hh = &neigh->hh;
  if (({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_381(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(hh->hh_len) == sizeof(char) || sizeof(hh->hh_len) == sizeof(short) || sizeof(hh->hh_len) == sizeof(int) || sizeof(hh->hh_len) == sizeof(long)) || sizeof(hh->hh_len) == sizeof(long long))) __compiletime_assert_381(); } while (0); (*(const volatile typeof( _Generic((hh->hh_len), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (hh->hh_len))) *)&(hh->hh_len)); })) {
   write_seqlock_bh(&hh->hh_lock);
   update(hh, neigh->dev, neigh->ha);
   write_sequnlock_bh(&hh->hh_lock);
  }
 }
}
# 1280 "net/core/neighbour.c"
static int __neigh_update(struct neighbour *neigh, const u8 *lladdr,
     u8 new, u32 flags, u32 nlmsg_pid,
     struct netlink_ext_ack *extack)
{
 bool gc_update = false, managed_update = false;
 int update_isrouter = 0;
 struct net_device *dev;
 int err, notify = 0;
 u8 old;

 trace_neigh_update(neigh, lladdr, new, flags, nlmsg_pid);

 _raw_write_lock_bh(&neigh->lock);

 dev = neigh->dev;
 old = neigh->nud_state;
 err = -1;

 if (neigh->dead) {
  do { static const char __msg[] = "Neighbor entry is now dead"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  new = old;
  goto out;
 }
 if (!(flags & ((((1UL))) << (7))) &&
     (old & (0x40 | 0x80)))
  goto out;

 neigh_update_flags(neigh, flags, &notify, &gc_update, &managed_update);
 if (flags & (((((1UL))) << (3)) | ((((1UL))) << (4)))) {
  new = old & ~0x80;
  neigh->nud_state = new;
  err = 0;
  goto out;
 }

 if (!(new & (0x80|0x40|0x02|0x10|0x04|0x08))) {
  neigh_del_timer(neigh);
  if (old & (0x80|0x40|0x02))
   neigh_suspect(neigh);
  neigh->nud_state = new;
  err = 0;
  notify = old & (0x80|0x40|0x02|0x10|0x04|0x08);
  if ((old & (0x01 | 0x10)) &&
      (new & 0x20)) {
   neigh_invalidate(neigh);
   notify = 1;
  }
  goto out;
 }


 if (!dev->addr_len) {

  lladdr = neigh->ha;
 } else if (lladdr) {





  if ((old & (0x80|0x40|0x02|0x10|0x04|0x08)) &&
      !memcmp(lladdr, neigh->ha, dev->addr_len))
   lladdr = neigh->ha;
 } else {



  err = -22;
  if (!(old & (0x80|0x40|0x02|0x10|0x04|0x08))) {
   do { static const char __msg[] = "No link layer address given"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   goto out;
  }
  lladdr = neigh->ha;
 }




 if (new & (0x80|0x40|0x02))
  neigh->confirmed = jiffies;




 err = 0;
 update_isrouter = flags & ((((1UL))) << (2));
 if (old & (0x80|0x40|0x02|0x10|0x04|0x08)) {
  if (lladdr != neigh->ha && !(flags & ((((1UL))) << (0)))) {
   update_isrouter = 0;
   if ((flags & ((((1UL))) << (1))) &&
       (old & (0x80|0x40|0x02))) {
    lladdr = neigh->ha;
    new = 0x04;
   } else
    goto out;
  } else {
   if (lladdr == neigh->ha && new == 0x04 &&
       !(flags & ((((1UL))) << (7))))
    new = old;
  }
 }





 if (new != old || lladdr != neigh->ha)
  neigh->updated = jiffies;

 if (new != old) {
  neigh_del_timer(neigh);
  if (new & 0x10)
   atomic_set(&neigh->probes, 0);
  if (new & (0x01|0x02|0x08|0x10))
   neigh_add_timer(neigh, (jiffies +
      ((new & 0x02) ?
       neigh->parms->reachable_time :
       0)));
  neigh->nud_state = new;
  notify = 1;
 }

 if (lladdr != neigh->ha) {
  write_seqlock(&neigh->ha_lock);
  memcpy(&neigh->ha, lladdr, dev->addr_len);
  write_sequnlock(&neigh->ha_lock);
  neigh_update_hhs(neigh);
  if (!(new & (0x80|0x40|0x02)))
   neigh->confirmed = jiffies -
          (((neigh->parms)->data[NEIGH_VAR_BASE_REACHABLE_TIME]) << 1);
  notify = 1;
 }
 if (new == old)
  goto out;
 if (new & (0x80|0x40|0x02))
  neigh_connect(neigh);
 else
  neigh_suspect(neigh);
 if (!(old & (0x80|0x40|0x02|0x10|0x04|0x08))) {
  struct sk_buff *skb;



  while (neigh->nud_state & (0x80|0x40|0x02|0x10|0x04|0x08) &&
         (skb = __skb_dequeue(&neigh->arp_queue)) != ((void *)0)) {
   struct dst_entry *dst = skb_dst(skb);
   struct neighbour *n2, *n1 = neigh;
   _raw_write_unlock_bh(&neigh->lock);

   rcu_read_lock();
# 1438 "net/core/neighbour.c"
   n2 = ((void *)0);
   if (dst && dst->obsolete != 2) {
    n2 = dst_neigh_lookup_skb(dst, skb);
    if (n2)
     n1 = n2;
   }
   n1->output(n1, skb);
   if (n2)
    neigh_release(n2);
   rcu_read_unlock();

   _raw_write_lock_bh(&neigh->lock);
  }
  __skb_queue_purge(&neigh->arp_queue);
  neigh->arp_queue_len_bytes = 0;
 }
out:
 if (update_isrouter)
  neigh_update_is_router(neigh, flags, &notify);
 _raw_write_unlock_bh(&neigh->lock);
 if (((new ^ old) & 0x80) || gc_update)
  neigh_update_gc_list(neigh);
 if (managed_update)
  neigh_update_managed_list(neigh);
 if (notify)
  neigh_update_notify(neigh, nlmsg_pid);
 trace_neigh_update_done(neigh, err);
 return err;
}

int neigh_update(struct neighbour *neigh, const u8 *lladdr, u8 new,
   u32 flags, u32 nlmsg_pid)
{
 return __neigh_update(neigh, lladdr, new, flags, nlmsg_pid, ((void *)0));
}
extern typeof(neigh_update) neigh_update; extern const char __kstrtab_neigh_update[]; extern const char __kstrtabns_neigh_update[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_update" ":					\n" "	.asciz 	\"" "neigh_update" "\"					\n" "__kstrtabns_" "neigh_update" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_update382 = (void *)&neigh_update; asm("	.section \"___ksymtab" "" "+" "neigh_update" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_update" ":				\n" "	.long	" "neigh_update" "- .				\n" "	.long	__kstrtab_" "neigh_update" "- .			\n" "	.long	__kstrtabns_" "neigh_update" "- .			\n" "	.previous					\n");




void __neigh_set_probe_once(struct neighbour *neigh)
{
 if (neigh->dead)
  return;
 neigh->updated = jiffies;
 if (!(neigh->nud_state & 0x20))
  return;
 neigh->nud_state = 0x01;
 atomic_set(&neigh->probes, neigh_max_probes(neigh));
 neigh_add_timer(neigh,
   jiffies + __builtin_choose_expr(((!!(sizeof((typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) *)1 == (typeof(250/100) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(250/100) * 0l)) : (int *)8))))), ((((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) > (250/100) ? (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) : (250/100)), ({ typeof(((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])) __UNIQUE_ID___x383 = (((neigh->parms)->data[NEIGH_VAR_RETRANS_TIME])); typeof(250/100) __UNIQUE_ID___y384 = (250/100); ((__UNIQUE_ID___x383) > (__UNIQUE_ID___y384) ? (__UNIQUE_ID___x383) : (__UNIQUE_ID___y384)); })));

}
extern typeof(__neigh_set_probe_once) __neigh_set_probe_once; extern const char __kstrtab___neigh_set_probe_once[]; extern const char __kstrtabns___neigh_set_probe_once[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "__neigh_set_probe_once" ":					\n" "	.asciz 	\"" "__neigh_set_probe_once" "\"					\n" "__kstrtabns_" "__neigh_set_probe_once" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___neigh_set_probe_once385 = (void *)&__neigh_set_probe_once; asm("	.section \"___ksymtab" "" "+" "__neigh_set_probe_once" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "__neigh_set_probe_once" ":				\n" "	.long	" "__neigh_set_probe_once" "- .				\n" "	.long	__kstrtab_" "__neigh_set_probe_once" "- .			\n" "	.long	__kstrtabns_" "__neigh_set_probe_once" "- .			\n" "	.previous					\n");

struct neighbour *neigh_event_ns(struct neigh_table *tbl,
     u8 *lladdr, void *saddr,
     struct net_device *dev)
{
 struct neighbour *neigh = __neigh_lookup(tbl, saddr, dev,
       lladdr || !dev->addr_len);
 if (neigh)
  neigh_update(neigh, lladdr, 0x04,
        ((((1UL))) << (0)), 0);
 return neigh;
}
extern typeof(neigh_event_ns) neigh_event_ns; extern const char __kstrtab_neigh_event_ns[]; extern const char __kstrtabns_neigh_event_ns[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_event_ns" ":					\n" "	.asciz 	\"" "neigh_event_ns" "\"					\n" "__kstrtabns_" "neigh_event_ns" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_event_ns386 = (void *)&neigh_event_ns; asm("	.section \"___ksymtab" "" "+" "neigh_event_ns" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_event_ns" ":				\n" "	.long	" "neigh_event_ns" "- .				\n" "	.long	__kstrtab_" "neigh_event_ns" "- .			\n" "	.long	__kstrtabns_" "neigh_event_ns" "- .			\n" "	.previous					\n");


static void neigh_hh_init(struct neighbour *n)
{
 struct net_device *dev = n->dev;
 __be16 prot = n->tbl->protocol;
 struct hh_cache *hh = &n->hh;

 _raw_write_lock_bh(&n->lock);




 if (!hh->hh_len)
  dev->header_ops->cache(n, hh, prot);

 _raw_write_unlock_bh(&n->lock);
}



int neigh_resolve_output(struct neighbour *neigh, struct sk_buff *skb)
{
 int rc = 0;

 if (!neigh_event_send(neigh, skb)) {
  int err;
  struct net_device *dev = neigh->dev;
  unsigned int seq;

  if (dev->header_ops->cache && !({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_387(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(neigh->hh.hh_len) == sizeof(char) || sizeof(neigh->hh.hh_len) == sizeof(short) || sizeof(neigh->hh.hh_len) == sizeof(int) || sizeof(neigh->hh.hh_len) == sizeof(long)) || sizeof(neigh->hh.hh_len) == sizeof(long long))) __compiletime_assert_387(); } while (0); (*(const volatile typeof( _Generic((neigh->hh.hh_len), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (neigh->hh.hh_len))) *)&(neigh->hh.hh_len)); }))
   neigh_hh_init(neigh);

  do {
   __skb_pull(skb, skb_network_offset(skb));
   seq = read_seqbegin(&neigh->ha_lock);
   err = dev_hard_header(skb, dev, (__builtin_constant_p((__u16)(( __u16)(__be16)(skb->protocol))) ? ((__u16)( (((__u16)(( __u16)(__be16)(skb->protocol)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(skb->protocol)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(skb->protocol))),
           neigh->ha, ((void *)0), skb->len);
  } while (read_seqretry(&neigh->ha_lock, seq));

  if (err >= 0)
   rc = dev_queue_xmit(skb);
  else
   goto out_kfree_skb;
 }
out:
 return rc;
out_kfree_skb:
 rc = -22;
 kfree_skb(skb);
 goto out;
}
extern typeof(neigh_resolve_output) neigh_resolve_output; extern const char __kstrtab_neigh_resolve_output[]; extern const char __kstrtabns_neigh_resolve_output[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_resolve_output" ":					\n" "	.asciz 	\"" "neigh_resolve_output" "\"					\n" "__kstrtabns_" "neigh_resolve_output" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_resolve_output388 = (void *)&neigh_resolve_output; asm("	.section \"___ksymtab" "" "+" "neigh_resolve_output" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_resolve_output" ":				\n" "	.long	" "neigh_resolve_output" "- .				\n" "	.long	__kstrtab_" "neigh_resolve_output" "- .			\n" "	.long	__kstrtabns_" "neigh_resolve_output" "- .			\n" "	.previous					\n");



int neigh_connected_output(struct neighbour *neigh, struct sk_buff *skb)
{
 struct net_device *dev = neigh->dev;
 unsigned int seq;
 int err;

 do {
  __skb_pull(skb, skb_network_offset(skb));
  seq = read_seqbegin(&neigh->ha_lock);
  err = dev_hard_header(skb, dev, (__builtin_constant_p((__u16)(( __u16)(__be16)(skb->protocol))) ? ((__u16)( (((__u16)(( __u16)(__be16)(skb->protocol)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(skb->protocol)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(skb->protocol))),
          neigh->ha, ((void *)0), skb->len);
 } while (read_seqretry(&neigh->ha_lock, seq));

 if (err >= 0)
  err = dev_queue_xmit(skb);
 else {
  err = -22;
  kfree_skb(skb);
 }
 return err;
}
extern typeof(neigh_connected_output) neigh_connected_output; extern const char __kstrtab_neigh_connected_output[]; extern const char __kstrtabns_neigh_connected_output[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_connected_output" ":					\n" "	.asciz 	\"" "neigh_connected_output" "\"					\n" "__kstrtabns_" "neigh_connected_output" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_connected_output389 = (void *)&neigh_connected_output; asm("	.section \"___ksymtab" "" "+" "neigh_connected_output" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_connected_output" ":				\n" "	.long	" "neigh_connected_output" "- .				\n" "	.long	__kstrtab_" "neigh_connected_output" "- .			\n" "	.long	__kstrtabns_" "neigh_connected_output" "- .			\n" "	.previous					\n");

int neigh_direct_output(struct neighbour *neigh, struct sk_buff *skb)
{
 return dev_queue_xmit(skb);
}
extern typeof(neigh_direct_output) neigh_direct_output; extern const char __kstrtab_neigh_direct_output[]; extern const char __kstrtabns_neigh_direct_output[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_direct_output" ":					\n" "	.asciz 	\"" "neigh_direct_output" "\"					\n" "__kstrtabns_" "neigh_direct_output" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_direct_output390 = (void *)&neigh_direct_output; asm("	.section \"___ksymtab" "" "+" "neigh_direct_output" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_direct_output" ":				\n" "	.long	" "neigh_direct_output" "- .				\n" "	.long	__kstrtab_" "neigh_direct_output" "- .			\n" "	.long	__kstrtabns_" "neigh_direct_output" "- .			\n" "	.previous					\n");

static void neigh_managed_work(struct work_struct *work)
{
 struct neigh_table *tbl = ({ void *__mptr = (void *)(work); _Static_assert(__builtin_types_compatible_p(typeof(*(work)), typeof(((struct neigh_table *)0)->managed_work.work)) || __builtin_types_compatible_p(typeof(*(work)), typeof(void)), "pointer type mismatch in container_of()"); ((struct neigh_table *)(__mptr - __builtin_offsetof(struct neigh_table, managed_work.work))); });

 struct neighbour *neigh;

 _raw_write_lock_bh(&tbl->lock);
 for (neigh = ({ void *__mptr = (void *)((&tbl->managed_list)->next); _Static_assert(__builtin_types_compatible_p(typeof(*((&tbl->managed_list)->next)), typeof(((typeof(*neigh) *)0)->managed_list)) || __builtin_types_compatible_p(typeof(*((&tbl->managed_list)->next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*neigh) *)(__mptr - __builtin_offsetof(typeof(*neigh), managed_list))); }); !(&neigh->managed_list == (&tbl->managed_list)); neigh = ({ void *__mptr = (void *)((neigh)->managed_list.next); _Static_assert(__builtin_types_compatible_p(typeof(*((neigh)->managed_list.next)), typeof(((typeof(*(neigh)) *)0)->managed_list)) || __builtin_types_compatible_p(typeof(*((neigh)->managed_list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(neigh)) *)(__mptr - __builtin_offsetof(typeof(*(neigh)), managed_list))); }))
  neigh_event_send(neigh, ((void *)0));
 queue_delayed_work(system_power_efficient_wq, &tbl->managed_work,
      ((&tbl->parms)->data[NEIGH_VAR_DELAY_PROBE_TIME]));
 _raw_write_unlock_bh(&tbl->lock);
}

static void neigh_proxy_process(struct timer_list *t)
{
 struct neigh_table *tbl = ({ void *__mptr = (void *)(t); _Static_assert(__builtin_types_compatible_p(typeof(*(t)), typeof(((typeof(*tbl) *)0)->proxy_timer)) || __builtin_types_compatible_p(typeof(*(t)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*tbl) *)(__mptr - __builtin_offsetof(typeof(*tbl), proxy_timer))); });
 long sched_next = 0;
 unsigned long now = jiffies;
 struct sk_buff *skb, *n;

 spin_lock(&tbl->proxy_queue.lock);

 for (skb = (&tbl->proxy_queue)->next, n = skb->next; skb != (struct sk_buff *)(&tbl->proxy_queue); skb = n, n = skb->next) {
  long tdif = ((struct neighbour_cb *)(skb)->cb)->sched_next - now;

  if (tdif <= 0) {
   struct net_device *dev = skb->dev;

   __skb_unlink(skb, &tbl->proxy_queue);
   if (tbl->proxy_redo && netif_running(dev)) {
    rcu_read_lock();
    tbl->proxy_redo(skb);
    rcu_read_unlock();
   } else {
    kfree_skb(skb);
   }

   dev_put(dev);
  } else if (!sched_next || tdif < sched_next)
   sched_next = tdif;
 }
 del_timer(&tbl->proxy_timer);
 if (sched_next)
  mod_timer(&tbl->proxy_timer, jiffies + sched_next);
 spin_unlock(&tbl->proxy_queue.lock);
}

void pneigh_enqueue(struct neigh_table *tbl, struct neigh_parms *p,
      struct sk_buff *skb)
{
 unsigned long sched_next = jiffies +
   prandom_u32_max(((p)->data[NEIGH_VAR_PROXY_DELAY]));

 if (tbl->proxy_queue.qlen > ((p)->data[NEIGH_VAR_PROXY_QLEN])) {
  kfree_skb(skb);
  return;
 }

 ((struct neighbour_cb *)(skb)->cb)->sched_next = sched_next;
 ((struct neighbour_cb *)(skb)->cb)->flags |= 0x1;

 spin_lock(&tbl->proxy_queue.lock);
 if (del_timer(&tbl->proxy_timer)) {
  if ((({ unsigned long __dummy; typeof(sched_next) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(tbl->proxy_timer.expires) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((tbl->proxy_timer.expires) - (sched_next)) < 0)))
   sched_next = tbl->proxy_timer.expires;
 }
 skb_dst_drop(skb);
 dev_hold(skb->dev);
 __skb_queue_tail(&tbl->proxy_queue, skb);
 mod_timer(&tbl->proxy_timer, sched_next);
 spin_unlock(&tbl->proxy_queue.lock);
}
extern typeof(pneigh_enqueue) pneigh_enqueue; extern const char __kstrtab_pneigh_enqueue[]; extern const char __kstrtabns_pneigh_enqueue[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "pneigh_enqueue" ":					\n" "	.asciz 	\"" "pneigh_enqueue" "\"					\n" "__kstrtabns_" "pneigh_enqueue" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_pneigh_enqueue391 = (void *)&pneigh_enqueue; asm("	.section \"___ksymtab" "" "+" "pneigh_enqueue" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "pneigh_enqueue" ":				\n" "	.long	" "pneigh_enqueue" "- .				\n" "	.long	__kstrtab_" "pneigh_enqueue" "- .			\n" "	.long	__kstrtabns_" "pneigh_enqueue" "- .			\n" "	.previous					\n");

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct neigh_parms *lookup_neigh_parms(struct neigh_table *tbl,
            struct net *net, int ifindex)
{
 struct neigh_parms *p;

 for (p = ({ void *__mptr = (void *)((&tbl->parms_list)->next); _Static_assert(__builtin_types_compatible_p(typeof(*((&tbl->parms_list)->next)), typeof(((typeof(*p) *)0)->list)) || __builtin_types_compatible_p(typeof(*((&tbl->parms_list)->next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*p) *)(__mptr - __builtin_offsetof(typeof(*p), list))); }); !(&p->list == (&tbl->parms_list)); p = ({ void *__mptr = (void *)((p)->list.next); _Static_assert(__builtin_types_compatible_p(typeof(*((p)->list.next)), typeof(((typeof(*(p)) *)0)->list)) || __builtin_types_compatible_p(typeof(*((p)->list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(p)) *)(__mptr - __builtin_offsetof(typeof(*(p)), list))); })) {
  if ((p->dev && p->dev->ifindex == ifindex && net_eq(neigh_parms_net(p), net)) ||
      (!p->dev && !ifindex && net_eq(net, &init_net)))
   return p;
 }

 return ((void *)0);
}

struct neigh_parms *neigh_parms_alloc(struct net_device *dev,
          struct neigh_table *tbl)
{
 struct neigh_parms *p;
 struct net *net = dev_net(dev);
 const struct net_device_ops *ops = dev->netdev_ops;

 p = kmemdup(&tbl->parms, sizeof(*p), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (p) {
  p->tbl = tbl;
  refcount_set(&p->refcnt, 1);
  p->reachable_time =
    neigh_rand_reach_time(((p)->data[NEIGH_VAR_BASE_REACHABLE_TIME]));
  dev_hold(dev);
  p->dev = dev;
  write_pnet(&p->net, net);
  p->sysctl_table = ((void *)0);

  if (ops->ndo_neigh_setup && ops->ndo_neigh_setup(dev, p)) {
   dev_put(dev);
   kfree(p);
   return ((void *)0);
  }

  _raw_write_lock_bh(&tbl->lock);
  list_add(&p->list, &tbl->parms.list);
  _raw_write_unlock_bh(&tbl->lock);

  neigh_parms_data_state_cleanall(p);
 }
 return p;
}
extern typeof(neigh_parms_alloc) neigh_parms_alloc; extern const char __kstrtab_neigh_parms_alloc[]; extern const char __kstrtabns_neigh_parms_alloc[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_parms_alloc" ":					\n" "	.asciz 	\"" "neigh_parms_alloc" "\"					\n" "__kstrtabns_" "neigh_parms_alloc" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_parms_alloc392 = (void *)&neigh_parms_alloc; asm("	.section \"___ksymtab" "" "+" "neigh_parms_alloc" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_parms_alloc" ":				\n" "	.long	" "neigh_parms_alloc" "- .				\n" "	.long	__kstrtab_" "neigh_parms_alloc" "- .			\n" "	.long	__kstrtabns_" "neigh_parms_alloc" "- .			\n" "	.previous					\n");

static void neigh_rcu_free_parms(struct callback_head *head)
{
 struct neigh_parms *parms =
  ({ void *__mptr = (void *)(head); _Static_assert(__builtin_types_compatible_p(typeof(*(head)), typeof(((struct neigh_parms *)0)->callback_head)) || __builtin_types_compatible_p(typeof(*(head)), typeof(void)), "pointer type mismatch in container_of()"); ((struct neigh_parms *)(__mptr - __builtin_offsetof(struct neigh_parms, callback_head))); });

 neigh_parms_put(parms);
}

void neigh_parms_release(struct neigh_table *tbl, struct neigh_parms *parms)
{
 if (!parms || parms == &tbl->parms)
  return;
 _raw_write_lock_bh(&tbl->lock);
 list_del(&parms->list);
 parms->dead = 1;
 _raw_write_unlock_bh(&tbl->lock);
 dev_put(parms->dev);
 call_rcu(&parms->callback_head, neigh_rcu_free_parms);
}
extern typeof(neigh_parms_release) neigh_parms_release; extern const char __kstrtab_neigh_parms_release[]; extern const char __kstrtabns_neigh_parms_release[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_parms_release" ":					\n" "	.asciz 	\"" "neigh_parms_release" "\"					\n" "__kstrtabns_" "neigh_parms_release" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_parms_release393 = (void *)&neigh_parms_release; asm("	.section \"___ksymtab" "" "+" "neigh_parms_release" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_parms_release" ":				\n" "	.long	" "neigh_parms_release" "- .				\n" "	.long	__kstrtab_" "neigh_parms_release" "- .			\n" "	.long	__kstrtabns_" "neigh_parms_release" "- .			\n" "	.previous					\n");

static void neigh_parms_destroy(struct neigh_parms *parms)
{
 kfree(parms);
}

static struct lock_class_key neigh_table_proxy_queue_class;

static struct neigh_table *neigh_tables[NEIGH_NR_TABLES] __attribute__((__section__(".data..read_mostly")));

void neigh_table_init(int index, struct neigh_table *tbl)
{
 unsigned long now = jiffies;
 unsigned long phsize;

 INIT_LIST_HEAD(&tbl->parms_list);
 INIT_LIST_HEAD(&tbl->gc_list);
 INIT_LIST_HEAD(&tbl->managed_list);

 list_add(&tbl->parms.list, &tbl->parms_list);
 write_pnet(&tbl->parms.net, &init_net);
 refcount_set(&tbl->parms.refcnt, 1);
 tbl->parms.reachable_time =
     neigh_rand_reach_time(((&tbl->parms)->data[NEIGH_VAR_BASE_REACHABLE_TIME]));

 tbl->stats = (typeof(struct neigh_statistics) *)__alloc_percpu(sizeof(struct neigh_statistics), __alignof__(struct neigh_statistics));
 if (!tbl->stats)
  panic("cannot create neighbour cache statistics");


 if (!proc_create_seq_private(tbl->id, 0, init_net.proc_net_stat, &neigh_stat_seq_ops, 0, tbl))

  panic("cannot create neighbour proc dir entry");


 do { ; do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_394(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(tbl->nht) == sizeof(char) || sizeof(tbl->nht) == sizeof(short) || sizeof(tbl->nht) == sizeof(int) || sizeof(tbl->nht) == sizeof(long)) || sizeof(tbl->nht) == sizeof(long long))) __compiletime_assert_394(); } while (0); do { *(volatile typeof(tbl->nht) *)&(tbl->nht) = ((typeof(*(neigh_hash_alloc(3))) *)(neigh_hash_alloc(3))); } while (0); } while (0); } while (0);

 phsize = (0xF + 1) * sizeof(struct pneigh_entry *);
 tbl->phash_buckets = kzalloc(phsize, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));

 if (!tbl->nht || !tbl->phash_buckets)
  panic("cannot allocate neighbour cache hashes");

 if (!tbl->entry_size)
  tbl->entry_size = ((((__builtin_offsetof(struct neighbour, primary_key) + tbl->key_len)) + ((typeof((__builtin_offsetof(struct neighbour, primary_key) + tbl->key_len)))((sizeof(long long))) - 1)) & ~((typeof((__builtin_offsetof(struct neighbour, primary_key) + tbl->key_len)))((sizeof(long long))) - 1));

 else
  ({ int __ret_warn_on = !!(tbl->entry_size % sizeof(long long)); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 1780; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });

 do { *(&tbl->lock) = (rwlock_t) { .raw_lock = { { .cnts = { (0) }, }, .wait_lock = { { .val = { (0) } } }, }, }; } while (0);

 do { do { __init_work(((&(&tbl->gc_work)->work)), 0); ((&(&tbl->gc_work)->work))->data = (atomic_long_t) { ((unsigned long)WORK_STRUCT_NO_POOL) }; INIT_LIST_HEAD(&((&(&tbl->gc_work)->work))->entry); ((&(&tbl->gc_work)->work))->func = (((neigh_periodic_work))); } while (0); init_timer_key((&(&tbl->gc_work)->timer), (delayed_work_timer_fn), ((0x00080000) | 0x00200000), ((void *)0), ((void *)0)); } while (0);
 queue_delayed_work(system_power_efficient_wq, &tbl->gc_work,
   tbl->parms.reachable_time);
 do { do { __init_work(((&(&tbl->managed_work)->work)), 0); ((&(&tbl->managed_work)->work))->data = (atomic_long_t) { ((unsigned long)WORK_STRUCT_NO_POOL) }; INIT_LIST_HEAD(&((&(&tbl->managed_work)->work))->entry); ((&(&tbl->managed_work)->work))->func = (((neigh_managed_work))); } while (0); init_timer_key((&(&tbl->managed_work)->timer), (delayed_work_timer_fn), ((0x00080000) | 0x00200000), ((void *)0), ((void *)0)); } while (0);
 queue_delayed_work(system_power_efficient_wq, &tbl->managed_work, 0);

 init_timer_key(((&tbl->proxy_timer)), ((neigh_proxy_process)), ((0)), ((void *)0), ((void *)0));
 skb_queue_head_init_class(&tbl->proxy_queue,
   &neigh_table_proxy_queue_class);

 tbl->last_flush = now;
 tbl->last_rand = now + tbl->parms.reachable_time * 20;

 neigh_tables[index] = tbl;
}
extern typeof(neigh_table_init) neigh_table_init; extern const char __kstrtab_neigh_table_init[]; extern const char __kstrtabns_neigh_table_init[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_table_init" ":					\n" "	.asciz 	\"" "neigh_table_init" "\"					\n" "__kstrtabns_" "neigh_table_init" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_table_init395 = (void *)&neigh_table_init; asm("	.section \"___ksymtab" "" "+" "neigh_table_init" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_table_init" ":				\n" "	.long	" "neigh_table_init" "- .				\n" "	.long	__kstrtab_" "neigh_table_init" "- .			\n" "	.long	__kstrtabns_" "neigh_table_init" "- .			\n" "	.previous					\n");

int neigh_table_clear(int index, struct neigh_table *tbl)
{
 neigh_tables[index] = ((void *)0);

 cancel_delayed_work_sync(&tbl->managed_work);
 cancel_delayed_work_sync(&tbl->gc_work);
 del_timer_sync(&tbl->proxy_timer);
 pneigh_queue_purge(&tbl->proxy_queue);
 neigh_ifdown(tbl, ((void *)0));
 if (atomic_read(&tbl->entries))
  ({ do {} while (0); _printk("\001" "2" "neighbour" ": " "neighbour leakage\n"); });

 call_rcu(&({ do { } while (0 && (!((1)))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); })->rcu,
   neigh_hash_free_rcu);
 tbl->nht = ((void *)0);

 kfree(tbl->phash_buckets);
 tbl->phash_buckets = ((void *)0);

 remove_proc_entry(tbl->id, init_net.proc_net_stat);

 free_percpu(tbl->stats);
 tbl->stats = ((void *)0);

 return 0;
}
extern typeof(neigh_table_clear) neigh_table_clear; extern const char __kstrtab_neigh_table_clear[]; extern const char __kstrtabns_neigh_table_clear[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_table_clear" ":					\n" "	.asciz 	\"" "neigh_table_clear" "\"					\n" "__kstrtabns_" "neigh_table_clear" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_table_clear396 = (void *)&neigh_table_clear; asm("	.section \"___ksymtab" "" "+" "neigh_table_clear" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_table_clear" ":				\n" "	.long	" "neigh_table_clear" "- .				\n" "	.long	__kstrtab_" "neigh_table_clear" "- .			\n" "	.long	__kstrtabns_" "neigh_table_clear" "- .			\n" "	.previous					\n");

static struct neigh_table *neigh_find_table(int family)
{
 struct neigh_table *tbl = ((void *)0);

 switch (family) {
 case 2:
  tbl = neigh_tables[NEIGH_ARP_TABLE];
  break;
 case 10:
  tbl = neigh_tables[NEIGH_ND_TABLE];
  break;
 case 12:
  tbl = neigh_tables[NEIGH_DN_TABLE];
  break;
 }

 return tbl;
}

const struct nla_policy nda_policy[(__NDA_MAX - 1)+1] = {
 [NDA_UNSPEC] = { .strict_start_type = NDA_NH_ID },
 [NDA_DST] = { .type = NLA_BINARY, .len = 32 },
 [NDA_LLADDR] = { .type = NLA_BINARY, .len = 32 },
 [NDA_CACHEINFO] = { .len = sizeof(struct nda_cacheinfo) },
 [NDA_PROBES] = { .type = NLA_U32 },
 [NDA_VLAN] = { .type = NLA_U16 },
 [NDA_PORT] = { .type = NLA_U16 },
 [NDA_VNI] = { .type = NLA_U32 },
 [NDA_IFINDEX] = { .type = NLA_U32 },
 [NDA_MASTER] = { .type = NLA_U32 },
 [NDA_PROTOCOL] = { .type = NLA_U8 },
 [NDA_NH_ID] = { .type = NLA_U32 },
 [NDA_FLAGS_EXT] = { .type = (((int)(sizeof(struct { int:(-!!(!((NLA_U32 == NLA_U8 || NLA_U32 == NLA_U16 || NLA_U32 == NLA_U32 || NLA_U32 == NLA_U64)))); }))) + NLA_U32), .validation_type = NLA_VALIDATE_MASK, .mask = ((1 << 0)), },
 [NDA_FDB_EXT_ATTRS] = { .type = NLA_NESTED },
};

static int neigh_delete(struct sk_buff *skb, struct nlmsghdr *nlh,
   struct netlink_ext_ack *extack)
{
 struct net *net = sock_net(skb->sk);
 struct ndmsg *ndm;
 struct nlattr *dst_attr;
 struct neigh_table *tbl;
 struct neighbour *neigh;
 struct net_device *dev = ((void *)0);
 int err = -22;

 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!rtnl_is_locked()); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("RTNL: assertion failed at %s (%d)\n", "net/core/neighbour.c", 1876); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 1876; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 if (nlmsg_len(nlh) < sizeof(*ndm))
  goto out;

 dst_attr = nlmsg_find_attr(nlh, sizeof(*ndm), NDA_DST);
 if (!dst_attr) {
  do { static const char __msg[] = "Network address not specified"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  goto out;
 }

 ndm = nlmsg_data(nlh);
 if (ndm->ndm_ifindex) {
  dev = __dev_get_by_index(net, ndm->ndm_ifindex);
  if (dev == ((void *)0)) {
   err = -19;
   goto out;
  }
 }

 tbl = neigh_find_table(ndm->ndm_family);
 if (tbl == ((void *)0))
  return -97;

 if (nla_len(dst_attr) < (int)tbl->key_len) {
  do { static const char __msg[] = "Invalid network address"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  goto out;
 }

 if (ndm->ndm_flags & (1 << 3)) {
  err = pneigh_delete(tbl, net, nla_data(dst_attr), dev);
  goto out;
 }

 if (dev == ((void *)0))
  goto out;

 neigh = neigh_lookup(tbl, nla_data(dst_attr), dev);
 if (neigh == ((void *)0)) {
  err = -2;
  goto out;
 }

 err = __neigh_update(neigh, ((void *)0), 0x20,
        ((((1UL))) << (0)) | ((((1UL))) << (7)),
        (*(struct netlink_skb_parms*)&((skb)->cb)).portid, extack);
 _raw_write_lock_bh(&tbl->lock);
 neigh_release(neigh);
 neigh_remove_one(neigh, tbl);
 _raw_write_unlock_bh(&tbl->lock);

out:
 return err;
}

static int neigh_add(struct sk_buff *skb, struct nlmsghdr *nlh,
       struct netlink_ext_ack *extack)
{
 int flags = ((((1UL))) << (7)) | ((((1UL))) << (0)) |
      ((((1UL))) << (2));
 struct net *net = sock_net(skb->sk);
 struct ndmsg *ndm;
 struct nlattr *tb[(__NDA_MAX - 1)+1];
 struct neigh_table *tbl;
 struct net_device *dev = ((void *)0);
 struct neighbour *neigh;
 void *dst, *lladdr;
 u8 protocol = 0;
 u32 ndm_flags;
 int err;

 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(!rtnl_is_locked()); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("RTNL: assertion failed at %s (%d)\n", "net/core/neighbour.c", 1946); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 1946; .short (1 << 0)|((1 << 3) | ((9) << 8)); .popsection; 14471: brk 0x800");; do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_do_once), 0); });
 err = nlmsg_parse_deprecated(nlh, sizeof(*ndm), tb, (__NDA_MAX - 1),
         nda_policy, extack);
 if (err < 0)
  goto out;

 err = -22;
 if (!tb[NDA_DST]) {
  do { static const char __msg[] = "Network address not specified"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  goto out;
 }

 ndm = nlmsg_data(nlh);
 ndm_flags = ndm->ndm_flags;
 if (tb[NDA_FLAGS_EXT]) {
  u32 ext = nla_get_u32(tb[NDA_FLAGS_EXT]);

  do { __attribute__((__noreturn__)) extern void __compiletime_assert_397(void) __attribute__((__error__("BUILD_BUG_ON failed: " "sizeof(neigh->flags) * BITS_PER_BYTE < (sizeof(ndm->ndm_flags) * BITS_PER_BYTE + hweight32(NTF_EXT_MASK))"))); if (!(!(sizeof(neigh->flags) * 8 < (sizeof(ndm->ndm_flags) * 8 + (__builtin_constant_p(((1 << 0))) ? ((((unsigned int) ((!!((((1 << 0))) & (1ULL << 0))) + (!!((((1 << 0))) & (1ULL << 1))) + (!!((((1 << 0))) & (1ULL << 2))) + (!!((((1 << 0))) & (1ULL << 3))) + (!!((((1 << 0))) & (1ULL << 4))) + (!!((((1 << 0))) & (1ULL << 5))) + (!!((((1 << 0))) & (1ULL << 6))) + (!!((((1 << 0))) & (1ULL << 7))))) + ((unsigned int) ((!!(((((1 << 0))) >> 8) & (1ULL << 0))) + (!!(((((1 << 0))) >> 8) & (1ULL << 1))) + (!!(((((1 << 0))) >> 8) & (1ULL << 2))) + (!!(((((1 << 0))) >> 8) & (1ULL << 3))) + (!!(((((1 << 0))) >> 8) & (1ULL << 4))) + (!!(((((1 << 0))) >> 8) & (1ULL << 5))) + (!!(((((1 << 0))) >> 8) & (1ULL << 6))) + (!!(((((1 << 0))) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((1 << 0))) >> 16) & (1ULL << 0))) + (!!(((((1 << 0))) >> 16) & (1ULL << 1))) + (!!(((((1 << 0))) >> 16) & (1ULL << 2))) + (!!(((((1 << 0))) >> 16) & (1ULL << 3))) + (!!(((((1 << 0))) >> 16) & (1ULL << 4))) + (!!(((((1 << 0))) >> 16) & (1ULL << 5))) + (!!(((((1 << 0))) >> 16) & (1ULL << 6))) + (!!(((((1 << 0))) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 0))) + (!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 1))) + (!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 2))) + (!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 3))) + (!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 4))) + (!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 5))) + (!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 6))) + (!!((((((1 << 0))) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(((1 << 0)))))))) __compiletime_assert_397(); } while (0);


  ndm_flags |= (ext << 8);
 }
 if (ndm->ndm_ifindex) {
  dev = __dev_get_by_index(net, ndm->ndm_ifindex);
  if (dev == ((void *)0)) {
   err = -19;
   goto out;
  }

  if (tb[NDA_LLADDR] && nla_len(tb[NDA_LLADDR]) < dev->addr_len) {
   do { static const char __msg[] = "Invalid link address"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   goto out;
  }
 }

 tbl = neigh_find_table(ndm->ndm_family);
 if (tbl == ((void *)0))
  return -97;

 if (nla_len(tb[NDA_DST]) < (int)tbl->key_len) {
  do { static const char __msg[] = "Invalid network address"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  goto out;
 }

 dst = nla_data(tb[NDA_DST]);
 lladdr = tb[NDA_LLADDR] ? nla_data(tb[NDA_LLADDR]) : ((void *)0);

 if (tb[NDA_PROTOCOL])
  protocol = nla_get_u8(tb[NDA_PROTOCOL]);
 if (ndm_flags & (1 << 3)) {
  struct pneigh_entry *pn;

  if (ndm_flags & ((1 << 0) << 8)) {
   do { static const char __msg[] = "Invalid NTF_* flag combination"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   goto out;
  }

  err = -105;
  pn = pneigh_lookup(tbl, net, dst, dev, 1);
  if (pn) {
   pn->flags = ndm_flags;
   if (protocol)
    pn->protocol = protocol;
   err = 0;
  }
  goto out;
 }

 if (!dev) {
  do { static const char __msg[] = "Device not specified"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  goto out;
 }

 if (tbl->allow_add && !tbl->allow_add(dev, extack)) {
  err = -22;
  goto out;
 }

 neigh = neigh_lookup(tbl, dst, dev);
 if (neigh == ((void *)0)) {
  bool ndm_permanent = ndm->ndm_state & 0x80;
  bool exempt_from_gc = ndm_permanent ||
          ndm_flags & (1 << 4);

  if (!(nlh->nlmsg_flags & 0x400)) {
   err = -2;
   goto out;
  }
  if (ndm_permanent && (ndm_flags & ((1 << 0) << 8))) {
   do { static const char __msg[] = "Invalid NTF_* flag for permanent entry"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   err = -22;
   goto out;
  }

  neigh = ___neigh_create(tbl, dst, dev,
     ndm_flags &
     ((1 << 4) | ((1 << 0) << 8)),
     exempt_from_gc, true);
  if (IS_ERR(neigh)) {
   err = PTR_ERR(neigh);
   goto out;
  }
 } else {
  if (nlh->nlmsg_flags & 0x200) {
   err = -17;
   neigh_release(neigh);
   goto out;
  }

  if (!(nlh->nlmsg_flags & 0x100))
   flags &= ~(((((1UL))) << (0)) |
       ((((1UL))) << (2)));
 }

 if (protocol)
  neigh->protocol = protocol;
 if (ndm_flags & (1 << 4))
  flags |= ((((1UL))) << (5));
 if (ndm_flags & (1 << 7))
  flags |= ((((1UL))) << (6));
 if (ndm_flags & ((1 << 0) << 8))
  flags |= ((((1UL))) << (4));
 if (ndm_flags & (1 << 0))
  flags |= ((((1UL))) << (3));

 err = __neigh_update(neigh, lladdr, ndm->ndm_state, flags,
        (*(struct netlink_skb_parms*)&((skb)->cb)).portid, extack);
 if (!err && ndm_flags & ((1 << 0) | ((1 << 0) << 8))) {
  neigh_event_send(neigh, ((void *)0));
  err = 0;
 }
 neigh_release(neigh);
out:
 return err;
}

static int neightbl_fill_parms(struct sk_buff *skb, struct neigh_parms *parms)
{
 struct nlattr *nest;

 nest = nla_nest_start_noflag(skb, NDTA_PARMS);
 if (nest == ((void *)0))
  return -105;

 if ((parms->dev &&
      nla_put_u32(skb, NDTPA_IFINDEX, parms->dev->ifindex)) ||
     nla_put_u32(skb, NDTPA_REFCNT, refcount_read(&parms->refcnt)) ||
     nla_put_u32(skb, NDTPA_QUEUE_LENBYTES,
   ((parms)->data[NEIGH_VAR_QUEUE_LEN_BYTES])) ||

     nla_put_u32(skb, NDTPA_QUEUE_LEN,
   ((parms)->data[NEIGH_VAR_QUEUE_LEN_BYTES]) / ((1514) + ((((sizeof(struct sk_buff))) + ((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) + ((((sizeof(struct skb_shared_info))) + ((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)))) ||
     nla_put_u32(skb, NDTPA_PROXY_QLEN, ((parms)->data[NEIGH_VAR_PROXY_QLEN])) ||
     nla_put_u32(skb, NDTPA_APP_PROBES, ((parms)->data[NEIGH_VAR_APP_PROBES])) ||
     nla_put_u32(skb, NDTPA_UCAST_PROBES,
   ((parms)->data[NEIGH_VAR_UCAST_PROBES])) ||
     nla_put_u32(skb, NDTPA_MCAST_PROBES,
   ((parms)->data[NEIGH_VAR_MCAST_PROBES])) ||
     nla_put_u32(skb, NDTPA_MCAST_REPROBES,
   ((parms)->data[NEIGH_VAR_MCAST_REPROBES])) ||
     nla_put_msecs(skb, NDTPA_REACHABLE_TIME, parms->reachable_time,
     NDTPA_PAD) ||
     nla_put_msecs(skb, NDTPA_BASE_REACHABLE_TIME,
     ((parms)->data[NEIGH_VAR_BASE_REACHABLE_TIME]), NDTPA_PAD) ||
     nla_put_msecs(skb, NDTPA_GC_STALETIME,
     ((parms)->data[NEIGH_VAR_GC_STALETIME]), NDTPA_PAD) ||
     nla_put_msecs(skb, NDTPA_DELAY_PROBE_TIME,
     ((parms)->data[NEIGH_VAR_DELAY_PROBE_TIME]), NDTPA_PAD) ||
     nla_put_msecs(skb, NDTPA_RETRANS_TIME,
     ((parms)->data[NEIGH_VAR_RETRANS_TIME]), NDTPA_PAD) ||
     nla_put_msecs(skb, NDTPA_ANYCAST_DELAY,
     ((parms)->data[NEIGH_VAR_ANYCAST_DELAY]), NDTPA_PAD) ||
     nla_put_msecs(skb, NDTPA_PROXY_DELAY,
     ((parms)->data[NEIGH_VAR_PROXY_DELAY]), NDTPA_PAD) ||
     nla_put_msecs(skb, NDTPA_LOCKTIME,
     ((parms)->data[NEIGH_VAR_LOCKTIME]), NDTPA_PAD))
  goto nla_put_failure;
 return nla_nest_end(skb, nest);

nla_put_failure:
 nla_nest_cancel(skb, nest);
 return -90;
}

static int neightbl_fill_info(struct sk_buff *skb, struct neigh_table *tbl,
         u32 pid, u32 seq, int type, int flags)
{
 struct nlmsghdr *nlh;
 struct ndtmsg *ndtmsg;

 nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndtmsg), flags);
 if (nlh == ((void *)0))
  return -90;

 ndtmsg = nlmsg_data(nlh);

 _raw_read_lock_bh(&tbl->lock);
 ndtmsg->ndtm_family = tbl->family;
 ndtmsg->ndtm_pad1 = 0;
 ndtmsg->ndtm_pad2 = 0;

 if (nla_put_string(skb, NDTA_NAME, tbl->id) ||
     nla_put_msecs(skb, NDTA_GC_INTERVAL, tbl->gc_interval, NDTA_PAD) ||
     nla_put_u32(skb, NDTA_THRESH1, tbl->gc_thresh1) ||
     nla_put_u32(skb, NDTA_THRESH2, tbl->gc_thresh2) ||
     nla_put_u32(skb, NDTA_THRESH3, tbl->gc_thresh3))
  goto nla_put_failure;
 {
  unsigned long now = jiffies;
  long flush_delta = now - tbl->last_flush;
  long rand_delta = now - tbl->last_rand;
  struct neigh_hash_table *nht;
  struct ndt_config ndc = {
   .ndtc_key_len = tbl->key_len,
   .ndtc_entry_size = tbl->entry_size,
   .ndtc_entries = atomic_read(&tbl->entries),
   .ndtc_last_flush = jiffies_to_msecs(flush_delta),
   .ndtc_last_rand = jiffies_to_msecs(rand_delta),
   .ndtc_proxy_qlen = tbl->proxy_queue.qlen,
  };

  rcu_read_lock_bh();
  nht = ({ typeof(*(tbl->nht)) *________p1 = (typeof(*(tbl->nht)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_398(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tbl->nht)) == sizeof(char) || sizeof((tbl->nht)) == sizeof(short) || sizeof((tbl->nht)) == sizeof(int) || sizeof((tbl->nht)) == sizeof(long)) || sizeof((tbl->nht)) == sizeof(long long))) __compiletime_assert_398(); } while (0); (*(const volatile typeof( _Generic(((tbl->nht)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tbl->nht)))) *)&((tbl->nht))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(tbl->nht)) *)(________p1)); });
  ndc.ndtc_hash_rnd = nht->hash_rnd[0];
  ndc.ndtc_hash_mask = ((1 << nht->hash_shift) - 1);
  rcu_read_unlock_bh();

  if (nla_put(skb, NDTA_CONFIG, sizeof(ndc), &ndc))
   goto nla_put_failure;
 }

 {
  int cpu;
  struct ndt_stats ndst;

  memset(&ndst, 0, sizeof(ndst));

  for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_possible_mask))), ((cpu)) < nr_cpu_ids;) {
   struct neigh_statistics *st;

   st = ({ do { const void *__vpp_verify = (typeof((tbl->stats) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((tbl->stats))) *)((tbl->stats))); (typeof((typeof(*((tbl->stats))) *)((tbl->stats)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); });
   ndst.ndts_allocs += st->allocs;
   ndst.ndts_destroys += st->destroys;
   ndst.ndts_hash_grows += st->hash_grows;
   ndst.ndts_res_failed += st->res_failed;
   ndst.ndts_lookups += st->lookups;
   ndst.ndts_hits += st->hits;
   ndst.ndts_rcv_probes_mcast += st->rcv_probes_mcast;
   ndst.ndts_rcv_probes_ucast += st->rcv_probes_ucast;
   ndst.ndts_periodic_gc_runs += st->periodic_gc_runs;
   ndst.ndts_forced_gc_runs += st->forced_gc_runs;
   ndst.ndts_table_fulls += st->table_fulls;
  }

  if (nla_put_64bit(skb, NDTA_STATS, sizeof(ndst), &ndst,
      NDTA_PAD))
   goto nla_put_failure;
 }

 do { if (__builtin_expect(!!(tbl->parms.dev), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 2205; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (neightbl_fill_parms(skb, &tbl->parms) < 0)
  goto nla_put_failure;

 _raw_read_unlock_bh(&tbl->lock);
 nlmsg_end(skb, nlh);
 return 0;

nla_put_failure:
 _raw_read_unlock_bh(&tbl->lock);
 nlmsg_cancel(skb, nlh);
 return -90;
}

static int neightbl_fill_param_info(struct sk_buff *skb,
        struct neigh_table *tbl,
        struct neigh_parms *parms,
        u32 pid, u32 seq, int type,
        unsigned int flags)
{
 struct ndtmsg *ndtmsg;
 struct nlmsghdr *nlh;

 nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndtmsg), flags);
 if (nlh == ((void *)0))
  return -90;

 ndtmsg = nlmsg_data(nlh);

 _raw_read_lock_bh(&tbl->lock);
 ndtmsg->ndtm_family = tbl->family;
 ndtmsg->ndtm_pad1 = 0;
 ndtmsg->ndtm_pad2 = 0;

 if (nla_put_string(skb, NDTA_NAME, tbl->id) < 0 ||
     neightbl_fill_parms(skb, parms) < 0)
  goto errout;

 _raw_read_unlock_bh(&tbl->lock);
 nlmsg_end(skb, nlh);
 return 0;
errout:
 _raw_read_unlock_bh(&tbl->lock);
 nlmsg_cancel(skb, nlh);
 return -90;
}

static const struct nla_policy nl_neightbl_policy[(__NDTA_MAX - 1)+1] = {
 [NDTA_NAME] = { .type = NLA_STRING },
 [NDTA_THRESH1] = { .type = NLA_U32 },
 [NDTA_THRESH2] = { .type = NLA_U32 },
 [NDTA_THRESH3] = { .type = NLA_U32 },
 [NDTA_GC_INTERVAL] = { .type = NLA_U64 },
 [NDTA_PARMS] = { .type = NLA_NESTED },
};

static const struct nla_policy nl_ntbl_parm_policy[(__NDTPA_MAX - 1)+1] = {
 [NDTPA_IFINDEX] = { .type = NLA_U32 },
 [NDTPA_QUEUE_LEN] = { .type = NLA_U32 },
 [NDTPA_PROXY_QLEN] = { .type = NLA_U32 },
 [NDTPA_APP_PROBES] = { .type = NLA_U32 },
 [NDTPA_UCAST_PROBES] = { .type = NLA_U32 },
 [NDTPA_MCAST_PROBES] = { .type = NLA_U32 },
 [NDTPA_MCAST_REPROBES] = { .type = NLA_U32 },
 [NDTPA_BASE_REACHABLE_TIME] = { .type = NLA_U64 },
 [NDTPA_GC_STALETIME] = { .type = NLA_U64 },
 [NDTPA_DELAY_PROBE_TIME] = { .type = NLA_U64 },
 [NDTPA_RETRANS_TIME] = { .type = NLA_U64 },
 [NDTPA_ANYCAST_DELAY] = { .type = NLA_U64 },
 [NDTPA_PROXY_DELAY] = { .type = NLA_U64 },
 [NDTPA_LOCKTIME] = { .type = NLA_U64 },
};

static int neightbl_set(struct sk_buff *skb, struct nlmsghdr *nlh,
   struct netlink_ext_ack *extack)
{
 struct net *net = sock_net(skb->sk);
 struct neigh_table *tbl;
 struct ndtmsg *ndtmsg;
 struct nlattr *tb[(__NDTA_MAX - 1)+1];
 bool found = false;
 int err, tidx;

 err = nlmsg_parse_deprecated(nlh, sizeof(*ndtmsg), tb, (__NDTA_MAX - 1),
         nl_neightbl_policy, extack);
 if (err < 0)
  goto errout;

 if (tb[NDTA_NAME] == ((void *)0)) {
  err = -22;
  goto errout;
 }

 ndtmsg = nlmsg_data(nlh);

 for (tidx = 0; tidx < NEIGH_NR_TABLES; tidx++) {
  tbl = neigh_tables[tidx];
  if (!tbl)
   continue;
  if (ndtmsg->ndtm_family && tbl->family != ndtmsg->ndtm_family)
   continue;
  if (nla_strcmp(tb[NDTA_NAME], tbl->id) == 0) {
   found = true;
   break;
  }
 }

 if (!found)
  return -2;





 _raw_write_lock_bh(&tbl->lock);

 if (tb[NDTA_PARMS]) {
  struct nlattr *tbp[(__NDTPA_MAX - 1)+1];
  struct neigh_parms *p;
  int i, ifindex = 0;

  err = nla_parse_nested_deprecated(tbp, (__NDTPA_MAX - 1),
        tb[NDTA_PARMS],
        nl_ntbl_parm_policy, extack);
  if (err < 0)
   goto errout_tbl_lock;

  if (tbp[NDTPA_IFINDEX])
   ifindex = nla_get_u32(tbp[NDTPA_IFINDEX]);

  p = lookup_neigh_parms(tbl, net, ifindex);
  if (p == ((void *)0)) {
   err = -2;
   goto errout_tbl_lock;
  }

  for (i = 1; i <= (__NDTPA_MAX - 1); i++) {
   if (tbp[i] == ((void *)0))
    continue;

   switch (i) {
   case NDTPA_QUEUE_LEN:
    neigh_var_set(p, NEIGH_VAR_QUEUE_LEN_BYTES, nla_get_u32(tbp[i]) * ((1514) + ((((sizeof(struct sk_buff))) + ((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) + ((((sizeof(struct skb_shared_info))) + ((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1))));


    break;
   case NDTPA_QUEUE_LENBYTES:
    neigh_var_set(p, NEIGH_VAR_QUEUE_LEN_BYTES, nla_get_u32(tbp[i]));

    break;
   case NDTPA_PROXY_QLEN:
    neigh_var_set(p, NEIGH_VAR_PROXY_QLEN, nla_get_u32(tbp[i]));

    break;
   case NDTPA_APP_PROBES:
    neigh_var_set(p, NEIGH_VAR_APP_PROBES, nla_get_u32(tbp[i]));

    break;
   case NDTPA_UCAST_PROBES:
    neigh_var_set(p, NEIGH_VAR_UCAST_PROBES, nla_get_u32(tbp[i]));

    break;
   case NDTPA_MCAST_PROBES:
    neigh_var_set(p, NEIGH_VAR_MCAST_PROBES, nla_get_u32(tbp[i]));

    break;
   case NDTPA_MCAST_REPROBES:
    neigh_var_set(p, NEIGH_VAR_MCAST_REPROBES, nla_get_u32(tbp[i]));

    break;
   case NDTPA_BASE_REACHABLE_TIME:
    neigh_var_set(p, NEIGH_VAR_BASE_REACHABLE_TIME, nla_get_msecs(tbp[i]));





    p->reachable_time =
     neigh_rand_reach_time(((p)->data[NEIGH_VAR_BASE_REACHABLE_TIME]));
    break;
   case NDTPA_GC_STALETIME:
    neigh_var_set(p, NEIGH_VAR_GC_STALETIME, nla_get_msecs(tbp[i]));

    break;
   case NDTPA_DELAY_PROBE_TIME:
    neigh_var_set(p, NEIGH_VAR_DELAY_PROBE_TIME, nla_get_msecs(tbp[i]));

    call_netevent_notifiers(NETEVENT_DELAY_PROBE_TIME_UPDATE, p);
    break;
   case NDTPA_RETRANS_TIME:
    neigh_var_set(p, NEIGH_VAR_RETRANS_TIME, nla_get_msecs(tbp[i]));

    break;
   case NDTPA_ANYCAST_DELAY:
    neigh_var_set(p, NEIGH_VAR_ANYCAST_DELAY, nla_get_msecs(tbp[i]));

    break;
   case NDTPA_PROXY_DELAY:
    neigh_var_set(p, NEIGH_VAR_PROXY_DELAY, nla_get_msecs(tbp[i]));

    break;
   case NDTPA_LOCKTIME:
    neigh_var_set(p, NEIGH_VAR_LOCKTIME, nla_get_msecs(tbp[i]));

    break;
   }
  }
 }

 err = -2;
 if ((tb[NDTA_THRESH1] || tb[NDTA_THRESH2] ||
      tb[NDTA_THRESH3] || tb[NDTA_GC_INTERVAL]) &&
     !net_eq(net, &init_net))
  goto errout_tbl_lock;

 if (tb[NDTA_THRESH1])
  tbl->gc_thresh1 = nla_get_u32(tb[NDTA_THRESH1]);

 if (tb[NDTA_THRESH2])
  tbl->gc_thresh2 = nla_get_u32(tb[NDTA_THRESH2]);

 if (tb[NDTA_THRESH3])
  tbl->gc_thresh3 = nla_get_u32(tb[NDTA_THRESH3]);

 if (tb[NDTA_GC_INTERVAL])
  tbl->gc_interval = nla_get_msecs(tb[NDTA_GC_INTERVAL]);

 err = 0;

errout_tbl_lock:
 _raw_write_unlock_bh(&tbl->lock);
errout:
 return err;
}

static int neightbl_valid_dump_info(const struct nlmsghdr *nlh,
        struct netlink_ext_ack *extack)
{
 struct ndtmsg *ndtm;

 if (nlh->nlmsg_len < nlmsg_msg_size(sizeof(*ndtm))) {
  do { static const char __msg[] = "Invalid header for neighbor table dump request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 ndtm = nlmsg_data(nlh);
 if (ndtm->ndtm_pad1 || ndtm->ndtm_pad2) {
  do { static const char __msg[] = "Invalid values in header for neighbor table dump request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 if (nlmsg_attrlen(nlh, sizeof(*ndtm))) {
  do { static const char __msg[] = "Invalid data after header in neighbor table dump request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 return 0;
}

static int neightbl_dump_info(struct sk_buff *skb, struct netlink_callback *cb)
{
 const struct nlmsghdr *nlh = cb->nlh;
 struct net *net = sock_net(skb->sk);
 int family, tidx, nidx = 0;
 int tbl_skip = cb->args[0];
 int neigh_skip = cb->args[1];
 struct neigh_table *tbl;

 if (cb->strict_check) {
  int err = neightbl_valid_dump_info(nlh, cb->extack);

  if (err < 0)
   return err;
 }

 family = ((struct rtgenmsg *)nlmsg_data(nlh))->rtgen_family;

 for (tidx = 0; tidx < NEIGH_NR_TABLES; tidx++) {
  struct neigh_parms *p;

  tbl = neigh_tables[tidx];
  if (!tbl)
   continue;

  if (tidx < tbl_skip || (family && tbl->family != family))
   continue;

  if (neightbl_fill_info(skb, tbl, (*(struct netlink_skb_parms*)&((cb->skb)->cb)).portid,
           nlh->nlmsg_seq, RTM_NEWNEIGHTBL,
           0x02) < 0)
   break;

  nidx = 0;
  p = ({ void *__mptr = (void *)((&tbl->parms)->list.next); _Static_assert(__builtin_types_compatible_p(typeof(*((&tbl->parms)->list.next)), typeof(((typeof(*(&tbl->parms)) *)0)->list)) || __builtin_types_compatible_p(typeof(*((&tbl->parms)->list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(&tbl->parms)) *)(__mptr - __builtin_offsetof(typeof(*(&tbl->parms)), list))); });
  for (; !(&p->list == (&tbl->parms_list)); p = ({ void *__mptr = (void *)((p)->list.next); _Static_assert(__builtin_types_compatible_p(typeof(*((p)->list.next)), typeof(((typeof(*(p)) *)0)->list)) || __builtin_types_compatible_p(typeof(*((p)->list.next)), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*(p)) *)(__mptr - __builtin_offsetof(typeof(*(p)), list))); })) {
   if (!net_eq(neigh_parms_net(p), net))
    continue;

   if (nidx < neigh_skip)
    goto next;

   if (neightbl_fill_param_info(skb, tbl, p,
           (*(struct netlink_skb_parms*)&((cb->skb)->cb)).portid,
           nlh->nlmsg_seq,
           RTM_NEWNEIGHTBL,
           0x02) < 0)
    goto out;
  next:
   nidx++;
  }

  neigh_skip = 0;
 }
out:
 cb->args[0] = tidx;
 cb->args[1] = nidx;

 return skb->len;
}

static int neigh_fill_info(struct sk_buff *skb, struct neighbour *neigh,
      u32 pid, u32 seq, int type, unsigned int flags)
{
 u32 neigh_flags, neigh_flags_ext;
 unsigned long now = jiffies;
 struct nda_cacheinfo ci;
 struct nlmsghdr *nlh;
 struct ndmsg *ndm;

 nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndm), flags);
 if (nlh == ((void *)0))
  return -90;

 neigh_flags_ext = neigh->flags >> 8;
 neigh_flags = neigh->flags & 0xff;

 ndm = nlmsg_data(nlh);
 ndm->ndm_family = neigh->ops->family;
 ndm->ndm_pad1 = 0;
 ndm->ndm_pad2 = 0;
 ndm->ndm_flags = neigh_flags;
 ndm->ndm_type = neigh->type;
 ndm->ndm_ifindex = neigh->dev->ifindex;

 if (nla_put(skb, NDA_DST, neigh->tbl->key_len, neigh->primary_key))
  goto nla_put_failure;

 _raw_read_lock_bh(&neigh->lock);
 ndm->ndm_state = neigh->nud_state;
 if (neigh->nud_state & (0x80|0x40|0x02|0x10|0x04|0x08)) {
  char haddr[32];

  neigh_ha_snapshot(haddr, neigh, neigh->dev);
  if (nla_put(skb, NDA_LLADDR, neigh->dev->addr_len, haddr) < 0) {
   _raw_read_unlock_bh(&neigh->lock);
   goto nla_put_failure;
  }
 }

 ci.ndm_used = jiffies_to_clock_t(now - neigh->used);
 ci.ndm_confirmed = jiffies_to_clock_t(now - neigh->confirmed);
 ci.ndm_updated = jiffies_to_clock_t(now - neigh->updated);
 ci.ndm_refcnt = refcount_read(&neigh->refcnt) - 1;
 _raw_read_unlock_bh(&neigh->lock);

 if (nla_put_u32(skb, NDA_PROBES, atomic_read(&neigh->probes)) ||
     nla_put(skb, NDA_CACHEINFO, sizeof(ci), &ci))
  goto nla_put_failure;

 if (neigh->protocol && nla_put_u8(skb, NDA_PROTOCOL, neigh->protocol))
  goto nla_put_failure;
 if (neigh_flags_ext && nla_put_u32(skb, NDA_FLAGS_EXT, neigh_flags_ext))
  goto nla_put_failure;

 nlmsg_end(skb, nlh);
 return 0;

nla_put_failure:
 nlmsg_cancel(skb, nlh);
 return -90;
}

static int pneigh_fill_info(struct sk_buff *skb, struct pneigh_entry *pn,
       u32 pid, u32 seq, int type, unsigned int flags,
       struct neigh_table *tbl)
{
 u32 neigh_flags, neigh_flags_ext;
 struct nlmsghdr *nlh;
 struct ndmsg *ndm;

 nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ndm), flags);
 if (nlh == ((void *)0))
  return -90;

 neigh_flags_ext = pn->flags >> 8;
 neigh_flags = pn->flags & 0xff;

 ndm = nlmsg_data(nlh);
 ndm->ndm_family = tbl->family;
 ndm->ndm_pad1 = 0;
 ndm->ndm_pad2 = 0;
 ndm->ndm_flags = neigh_flags | (1 << 3);
 ndm->ndm_type = RTN_UNICAST;
 ndm->ndm_ifindex = pn->dev ? pn->dev->ifindex : 0;
 ndm->ndm_state = 0x00;

 if (nla_put(skb, NDA_DST, tbl->key_len, pn->key))
  goto nla_put_failure;

 if (pn->protocol && nla_put_u8(skb, NDA_PROTOCOL, pn->protocol))
  goto nla_put_failure;
 if (neigh_flags_ext && nla_put_u32(skb, NDA_FLAGS_EXT, neigh_flags_ext))
  goto nla_put_failure;

 nlmsg_end(skb, nlh);
 return 0;

nla_put_failure:
 nlmsg_cancel(skb, nlh);
 return -90;
}

static void neigh_update_notify(struct neighbour *neigh, u32 nlmsg_pid)
{
 call_netevent_notifiers(NETEVENT_NEIGH_UPDATE, neigh);
 __neigh_notify(neigh, RTM_NEWNEIGH, 0, nlmsg_pid);
}

static bool neigh_master_filtered(struct net_device *dev, int master_idx)
{
 struct net_device *master;

 if (!master_idx)
  return false;

 master = dev ? netdev_master_upper_dev_get(dev) : ((void *)0);




 if (master_idx == -1)
  return !!master;

 if (!master || master->ifindex != master_idx)
  return true;

 return false;
}

static bool neigh_ifindex_filtered(struct net_device *dev, int filter_idx)
{
 if (filter_idx && (!dev || dev->ifindex != filter_idx))
  return true;

 return false;
}

struct neigh_dump_filter {
 int master_idx;
 int dev_idx;
};

static int neigh_dump_table(struct neigh_table *tbl, struct sk_buff *skb,
       struct netlink_callback *cb,
       struct neigh_dump_filter *filter)
{
 struct net *net = sock_net(skb->sk);
 struct neighbour *n;
 int rc, h, s_h = cb->args[1];
 int idx, s_idx = idx = cb->args[2];
 struct neigh_hash_table *nht;
 unsigned int flags = 0x02;

 if (filter->dev_idx || filter->master_idx)
  flags |= 0x20;

 rcu_read_lock_bh();
 nht = ({ typeof(*(tbl->nht)) *________p1 = (typeof(*(tbl->nht)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_399(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tbl->nht)) == sizeof(char) || sizeof((tbl->nht)) == sizeof(short) || sizeof((tbl->nht)) == sizeof(int) || sizeof((tbl->nht)) == sizeof(long)) || sizeof((tbl->nht)) == sizeof(long long))) __compiletime_assert_399(); } while (0); (*(const volatile typeof( _Generic(((tbl->nht)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tbl->nht)))) *)&((tbl->nht))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(tbl->nht)) *)(________p1)); });

 for (h = s_h; h < (1 << nht->hash_shift); h++) {
  if (h > s_h)
   s_idx = 0;
  for (n = ({ typeof(*(nht->hash_buckets[h])) *________p1 = (typeof(*(nht->hash_buckets[h])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_400(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((nht->hash_buckets[h])) == sizeof(char) || sizeof((nht->hash_buckets[h])) == sizeof(short) || sizeof((nht->hash_buckets[h])) == sizeof(int) || sizeof((nht->hash_buckets[h])) == sizeof(long)) || sizeof((nht->hash_buckets[h])) == sizeof(long long))) __compiletime_assert_400(); } while (0); (*(const volatile typeof( _Generic(((nht->hash_buckets[h])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((nht->hash_buckets[h])))) *)&((nht->hash_buckets[h]))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(nht->hash_buckets[h])) *)(________p1)); }), idx = 0;
       n != ((void *)0);
       n = ({ typeof(*(n->next)) *________p1 = (typeof(*(n->next)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_401(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_401(); } while (0); (*(const volatile typeof( _Generic(((n->next)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((n->next)))) *)&((n->next))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(n->next)) *)(________p1)); })) {
   if (idx < s_idx || !net_eq(dev_net(n->dev), net))
    goto next;
   if (neigh_ifindex_filtered(n->dev, filter->dev_idx) ||
       neigh_master_filtered(n->dev, filter->master_idx))
    goto next;
   if (neigh_fill_info(skb, n, (*(struct netlink_skb_parms*)&((cb->skb)->cb)).portid,
         cb->nlh->nlmsg_seq,
         RTM_NEWNEIGH,
         flags) < 0) {
    rc = -1;
    goto out;
   }
next:
   idx++;
  }
 }
 rc = skb->len;
out:
 rcu_read_unlock_bh();
 cb->args[1] = h;
 cb->args[2] = idx;
 return rc;
}

static int pneigh_dump_table(struct neigh_table *tbl, struct sk_buff *skb,
        struct netlink_callback *cb,
        struct neigh_dump_filter *filter)
{
 struct pneigh_entry *n;
 struct net *net = sock_net(skb->sk);
 int rc, h, s_h = cb->args[3];
 int idx, s_idx = idx = cb->args[4];
 unsigned int flags = 0x02;

 if (filter->dev_idx || filter->master_idx)
  flags |= 0x20;

 _raw_read_lock_bh(&tbl->lock);

 for (h = s_h; h <= 0xF; h++) {
  if (h > s_h)
   s_idx = 0;
  for (n = tbl->phash_buckets[h], idx = 0; n; n = n->next) {
   if (idx < s_idx || pneigh_net(n) != net)
    goto next;
   if (neigh_ifindex_filtered(n->dev, filter->dev_idx) ||
       neigh_master_filtered(n->dev, filter->master_idx))
    goto next;
   if (pneigh_fill_info(skb, n, (*(struct netlink_skb_parms*)&((cb->skb)->cb)).portid,
         cb->nlh->nlmsg_seq,
         RTM_NEWNEIGH, flags, tbl) < 0) {
    _raw_read_unlock_bh(&tbl->lock);
    rc = -1;
    goto out;
   }
  next:
   idx++;
  }
 }

 _raw_read_unlock_bh(&tbl->lock);
 rc = skb->len;
out:
 cb->args[3] = h;
 cb->args[4] = idx;
 return rc;

}

static int neigh_valid_dump_req(const struct nlmsghdr *nlh,
    bool strict_check,
    struct neigh_dump_filter *filter,
    struct netlink_ext_ack *extack)
{
 struct nlattr *tb[(__NDA_MAX - 1) + 1];
 int err, i;

 if (strict_check) {
  struct ndmsg *ndm;

  if (nlh->nlmsg_len < nlmsg_msg_size(sizeof(*ndm))) {
   do { static const char __msg[] = "Invalid header for neighbor dump request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   return -22;
  }

  ndm = nlmsg_data(nlh);
  if (ndm->ndm_pad1 || ndm->ndm_pad2 || ndm->ndm_ifindex ||
      ndm->ndm_state || ndm->ndm_type) {
   do { static const char __msg[] = "Invalid values in header for neighbor dump request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   return -22;
  }

  if (ndm->ndm_flags & ~(1 << 3)) {
   do { static const char __msg[] = "Invalid flags in header for neighbor dump request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   return -22;
  }

  err = nlmsg_parse_deprecated_strict(nlh, sizeof(struct ndmsg),
          tb, (__NDA_MAX - 1), nda_policy,
          extack);
 } else {
  err = nlmsg_parse_deprecated(nlh, sizeof(struct ndmsg), tb,
          (__NDA_MAX - 1), nda_policy, extack);
 }
 if (err < 0)
  return err;

 for (i = 0; i <= (__NDA_MAX - 1); ++i) {
  if (!tb[i])
   continue;


  switch (i) {
  case NDA_IFINDEX:
   filter->dev_idx = nla_get_u32(tb[i]);
   break;
  case NDA_MASTER:
   filter->master_idx = nla_get_u32(tb[i]);
   break;
  default:
   if (strict_check) {
    do { static const char __msg[] = "Unsupported attribute in neighbor dump request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
    return -22;
   }
  }
 }

 return 0;
}

static int neigh_dump_info(struct sk_buff *skb, struct netlink_callback *cb)
{
 const struct nlmsghdr *nlh = cb->nlh;
 struct neigh_dump_filter filter = {};
 struct neigh_table *tbl;
 int t, family, s_t;
 int proxy = 0;
 int err;

 family = ((struct rtgenmsg *)nlmsg_data(nlh))->rtgen_family;




 if (nlmsg_len(nlh) >= sizeof(struct ndmsg) &&
     ((struct ndmsg *)nlmsg_data(nlh))->ndm_flags == (1 << 3))
  proxy = 1;

 err = neigh_valid_dump_req(nlh, cb->strict_check, &filter, cb->extack);
 if (err < 0 && cb->strict_check)
  return err;

 s_t = cb->args[0];

 for (t = 0; t < NEIGH_NR_TABLES; t++) {
  tbl = neigh_tables[t];

  if (!tbl)
   continue;
  if (t < s_t || (family && tbl->family != family))
   continue;
  if (t > s_t)
   memset(&cb->args[1], 0, sizeof(cb->args) -
      sizeof(cb->args[0]));
  if (proxy)
   err = pneigh_dump_table(tbl, skb, cb, &filter);
  else
   err = neigh_dump_table(tbl, skb, cb, &filter);
  if (err < 0)
   break;
 }

 cb->args[0] = t;
 return skb->len;
}

static int neigh_valid_get_req(const struct nlmsghdr *nlh,
          struct neigh_table **tbl,
          void **dst, int *dev_idx, u8 *ndm_flags,
          struct netlink_ext_ack *extack)
{
 struct nlattr *tb[(__NDA_MAX - 1) + 1];
 struct ndmsg *ndm;
 int err, i;

 if (nlh->nlmsg_len < nlmsg_msg_size(sizeof(*ndm))) {
  do { static const char __msg[] = "Invalid header for neighbor get request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 ndm = nlmsg_data(nlh);
 if (ndm->ndm_pad1 || ndm->ndm_pad2 || ndm->ndm_state ||
     ndm->ndm_type) {
  do { static const char __msg[] = "Invalid values in header for neighbor get request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 if (ndm->ndm_flags & ~(1 << 3)) {
  do { static const char __msg[] = "Invalid flags in header for neighbor get request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 err = nlmsg_parse_deprecated_strict(nlh, sizeof(struct ndmsg), tb,
         (__NDA_MAX - 1), nda_policy, extack);
 if (err < 0)
  return err;

 *ndm_flags = ndm->ndm_flags;
 *dev_idx = ndm->ndm_ifindex;
 *tbl = neigh_find_table(ndm->ndm_family);
 if (*tbl == ((void *)0)) {
  do { static const char __msg[] = "Unsupported family in header for neighbor get request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -97;
 }

 for (i = 0; i <= (__NDA_MAX - 1); ++i) {
  if (!tb[i])
   continue;

  switch (i) {
  case NDA_DST:
   if (nla_len(tb[i]) != (int)(*tbl)->key_len) {
    do { static const char __msg[] = "Invalid network address in neighbor get request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
    return -22;
   }
   *dst = nla_data(tb[i]);
   break;
  default:
   do { static const char __msg[] = "Unsupported attribute in neighbor get request"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   return -22;
  }
 }

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t neigh_nlmsg_size(void)
{
 return ( ((sizeof(struct ndmsg))+4U -1) & ~(4U -1) )
        + nla_total_size(32)
        + nla_total_size(32)
        + nla_total_size(sizeof(struct nda_cacheinfo))
        + nla_total_size(4)
        + nla_total_size(4)
        + nla_total_size(1);
}

static int neigh_get_reply(struct net *net, struct neighbour *neigh,
      u32 pid, u32 seq)
{
 struct sk_buff *skb;
 int err = 0;

 skb = nlmsg_new(neigh_nlmsg_size(), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!skb)
  return -105;

 err = neigh_fill_info(skb, neigh, pid, seq, RTM_NEWNEIGH, 0);
 if (err) {
  kfree_skb(skb);
  goto errout;
 }

 err = rtnl_unicast(skb, net, pid);
errout:
 return err;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t pneigh_nlmsg_size(void)
{
 return ( ((sizeof(struct ndmsg))+4U -1) & ~(4U -1) )
        + nla_total_size(32)
        + nla_total_size(4)
        + nla_total_size(1);
}

static int pneigh_get_reply(struct net *net, struct pneigh_entry *neigh,
       u32 pid, u32 seq, struct neigh_table *tbl)
{
 struct sk_buff *skb;
 int err = 0;

 skb = nlmsg_new(pneigh_nlmsg_size(), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!skb)
  return -105;

 err = pneigh_fill_info(skb, neigh, pid, seq, RTM_NEWNEIGH, 0, tbl);
 if (err) {
  kfree_skb(skb);
  goto errout;
 }

 err = rtnl_unicast(skb, net, pid);
errout:
 return err;
}

static int neigh_get(struct sk_buff *in_skb, struct nlmsghdr *nlh,
       struct netlink_ext_ack *extack)
{
 struct net *net = sock_net(in_skb->sk);
 struct net_device *dev = ((void *)0);
 struct neigh_table *tbl = ((void *)0);
 struct neighbour *neigh;
 void *dst = ((void *)0);
 u8 ndm_flags = 0;
 int dev_idx = 0;
 int err;

 err = neigh_valid_get_req(nlh, &tbl, &dst, &dev_idx, &ndm_flags,
      extack);
 if (err < 0)
  return err;

 if (dev_idx) {
  dev = __dev_get_by_index(net, dev_idx);
  if (!dev) {
   do { static const char __msg[] = "Unknown device ifindex"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   return -19;
  }
 }

 if (!dst) {
  do { static const char __msg[] = "Network address not specified"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 if (ndm_flags & (1 << 3)) {
  struct pneigh_entry *pn;

  pn = pneigh_lookup(tbl, net, dst, dev, 0);
  if (!pn) {
   do { static const char __msg[] = "Proxy neighbour entry not found"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
   return -2;
  }
  return pneigh_get_reply(net, pn, (*(struct netlink_skb_parms*)&((in_skb)->cb)).portid,
     nlh->nlmsg_seq, tbl);
 }

 if (!dev) {
  do { static const char __msg[] = "No device specified"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -22;
 }

 neigh = neigh_lookup(tbl, dst, dev);
 if (!neigh) {
  do { static const char __msg[] = "Neighbour entry not found"; struct netlink_ext_ack *__extack = (extack); do_trace_netlink_extack(__msg); if (__extack) __extack->_msg = __msg; } while (0);
  return -2;
 }

 err = neigh_get_reply(net, neigh, (*(struct netlink_skb_parms*)&((in_skb)->cb)).portid,
         nlh->nlmsg_seq);

 neigh_release(neigh);

 return err;
}

void neigh_for_each(struct neigh_table *tbl, void (*cb)(struct neighbour *, void *), void *cookie)
{
 int chain;
 struct neigh_hash_table *nht;

 rcu_read_lock_bh();
 nht = ({ typeof(*(tbl->nht)) *________p1 = (typeof(*(tbl->nht)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_402(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tbl->nht)) == sizeof(char) || sizeof((tbl->nht)) == sizeof(short) || sizeof((tbl->nht)) == sizeof(int) || sizeof((tbl->nht)) == sizeof(long)) || sizeof((tbl->nht)) == sizeof(long long))) __compiletime_assert_402(); } while (0); (*(const volatile typeof( _Generic(((tbl->nht)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tbl->nht)))) *)&((tbl->nht))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(tbl->nht)) *)(________p1)); });

 _raw_read_lock(&tbl->lock);
 for (chain = 0; chain < (1 << nht->hash_shift); chain++) {
  struct neighbour *n;

  for (n = ({ typeof(*(nht->hash_buckets[chain])) *________p1 = (typeof(*(nht->hash_buckets[chain])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_403(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((nht->hash_buckets[chain])) == sizeof(char) || sizeof((nht->hash_buckets[chain])) == sizeof(short) || sizeof((nht->hash_buckets[chain])) == sizeof(int) || sizeof((nht->hash_buckets[chain])) == sizeof(long)) || sizeof((nht->hash_buckets[chain])) == sizeof(long long))) __compiletime_assert_403(); } while (0); (*(const volatile typeof( _Generic(((nht->hash_buckets[chain])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((nht->hash_buckets[chain])))) *)&((nht->hash_buckets[chain]))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(nht->hash_buckets[chain])) *)(________p1)); });
       n != ((void *)0);
       n = ({ typeof(*(n->next)) *________p1 = (typeof(*(n->next)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_404(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_404(); } while (0); (*(const volatile typeof( _Generic(((n->next)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((n->next)))) *)&((n->next))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(n->next)) *)(________p1)); }))
   cb(n, cookie);
 }
 _raw_read_unlock(&tbl->lock);
 rcu_read_unlock_bh();
}
extern typeof(neigh_for_each) neigh_for_each; extern const char __kstrtab_neigh_for_each[]; extern const char __kstrtabns_neigh_for_each[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_for_each" ":					\n" "	.asciz 	\"" "neigh_for_each" "\"					\n" "__kstrtabns_" "neigh_for_each" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_for_each405 = (void *)&neigh_for_each; asm("	.section \"___ksymtab" "" "+" "neigh_for_each" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_for_each" ":				\n" "	.long	" "neigh_for_each" "- .				\n" "	.long	__kstrtab_" "neigh_for_each" "- .			\n" "	.long	__kstrtabns_" "neigh_for_each" "- .			\n" "	.previous					\n");


void __neigh_for_each_release(struct neigh_table *tbl,
         int (*cb)(struct neighbour *))
{
 int chain;
 struct neigh_hash_table *nht;

 nht = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(tbl->nht)) *)((tbl->nht))); });

 for (chain = 0; chain < (1 << nht->hash_shift); chain++) {
  struct neighbour *n;
  struct neighbour **np;

  np = &nht->hash_buckets[chain];
  while ((n = ({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(*np)) *)((*np))); })) != ((void *)0)) {

   int release;

   _raw_write_lock(&n->lock);
   release = cb(n);
   if (release) {
    do { uintptr_t _r_a_p__v = (uintptr_t)(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(n->next)) *)((n->next))); })); ; if (__builtin_constant_p(({ do { } while (0 && (!((lockdep_is_held(&tbl->lock))))); ; ((typeof(*(n->next)) *)((n->next))); })) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { __attribute__((__noreturn__)) extern void __compiletime_assert_406(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*np)) == sizeof(char) || sizeof((*np)) == sizeof(short) || sizeof((*np)) == sizeof(int) || sizeof((*np)) == sizeof(long)) || sizeof((*np)) == sizeof(long long))) __compiletime_assert_406(); } while (0); do { *(volatile typeof((*np)) *)&((*np)) = ((typeof(*np))(_r_a_p__v)); } while (0); } while (0); else do { typeof(&*np) __p = (&*np); union { typeof( _Generic((*&*np), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*np))) __val; char __c[1]; } __u = { .__val = ( typeof( _Generic((*&*np), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&*np)))) ((typeof(*((typeof(*np))_r_a_p__v)) *)((typeof(*np))_r_a_p__v)) }; do { __attribute__((__noreturn__)) extern void __compiletime_assert_407(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*np) == sizeof(char) || sizeof(*&*np) == sizeof(short) || sizeof(*&*np) == sizeof(int) || sizeof(*&*np) == sizeof(long)))) __compiletime_assert_407(); } while (0); kasan_check_write(__p, sizeof(*&*np)); switch (sizeof(*&*np)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);


    neigh_mark_dead(n);
   } else
    np = &n->next;
   _raw_write_unlock(&n->lock);
   if (release)
    neigh_cleanup_and_release(n);
  }
 }
}
extern typeof(__neigh_for_each_release) __neigh_for_each_release; extern const char __kstrtab___neigh_for_each_release[]; extern const char __kstrtabns___neigh_for_each_release[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "__neigh_for_each_release" ":					\n" "	.asciz 	\"" "__neigh_for_each_release" "\"					\n" "__kstrtabns_" "__neigh_for_each_release" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable___neigh_for_each_release408 = (void *)&__neigh_for_each_release; asm("	.section \"___ksymtab" "" "+" "__neigh_for_each_release" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "__neigh_for_each_release" ":				\n" "	.long	" "__neigh_for_each_release" "- .				\n" "	.long	__kstrtab_" "__neigh_for_each_release" "- .			\n" "	.long	__kstrtabns_" "__neigh_for_each_release" "- .			\n" "	.previous					\n");

int neigh_xmit(int index, struct net_device *dev,
        const void *addr, struct sk_buff *skb)
{
 int err = -97;
 if (__builtin_expect(!!(index < NEIGH_NR_TABLES), 1)) {
  struct neigh_table *tbl;
  struct neighbour *neigh;

  tbl = neigh_tables[index];
  if (!tbl)
   goto out;
  rcu_read_lock_bh();
  if (index == NEIGH_ARP_TABLE) {
   u32 key = *((u32 *)addr);

   neigh = __ipv4_neigh_lookup_noref(dev, key);
  } else {
   neigh = __neigh_lookup_noref(tbl, addr, dev);
  }
  if (!neigh)
   neigh = __neigh_create(tbl, addr, dev, false);
  err = PTR_ERR(neigh);
  if (IS_ERR(neigh)) {
   rcu_read_unlock_bh();
   goto out_kfree_skb;
  }
  err = neigh->output(neigh, skb);
  rcu_read_unlock_bh();
 }
 else if (index == NEIGH_LINK_TABLE) {
  err = dev_hard_header(skb, dev, (__builtin_constant_p((__u16)(( __u16)(__be16)(skb->protocol))) ? ((__u16)( (((__u16)(( __u16)(__be16)(skb->protocol)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(skb->protocol)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(skb->protocol))),
          addr, ((void *)0), skb->len);
  if (err < 0)
   goto out_kfree_skb;
  err = dev_queue_xmit(skb);
 }
out:
 return err;
out_kfree_skb:
 kfree_skb(skb);
 goto out;
}
extern typeof(neigh_xmit) neigh_xmit; extern const char __kstrtab_neigh_xmit[]; extern const char __kstrtabns_neigh_xmit[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_xmit" ":					\n" "	.asciz 	\"" "neigh_xmit" "\"					\n" "__kstrtabns_" "neigh_xmit" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_xmit409 = (void *)&neigh_xmit; asm("	.section \"___ksymtab" "" "+" "neigh_xmit" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_xmit" ":				\n" "	.long	" "neigh_xmit" "- .				\n" "	.long	__kstrtab_" "neigh_xmit" "- .			\n" "	.long	__kstrtabns_" "neigh_xmit" "- .			\n" "	.previous					\n");



static struct neighbour *neigh_get_first(struct seq_file *seq)
{
 struct neigh_seq_state *state = seq->private;
 struct net *net = seq_file_net(seq);
 struct neigh_hash_table *nht = state->nht;
 struct neighbour *n = ((void *)0);
 int bucket;

 state->flags &= ~0x00000002;
 for (bucket = 0; bucket < (1 << nht->hash_shift); bucket++) {
  n = ({ typeof(*(nht->hash_buckets[bucket])) *________p1 = (typeof(*(nht->hash_buckets[bucket])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_410(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((nht->hash_buckets[bucket])) == sizeof(char) || sizeof((nht->hash_buckets[bucket])) == sizeof(short) || sizeof((nht->hash_buckets[bucket])) == sizeof(int) || sizeof((nht->hash_buckets[bucket])) == sizeof(long)) || sizeof((nht->hash_buckets[bucket])) == sizeof(long long))) __compiletime_assert_410(); } while (0); (*(const volatile typeof( _Generic(((nht->hash_buckets[bucket])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((nht->hash_buckets[bucket])))) *)&((nht->hash_buckets[bucket]))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(nht->hash_buckets[bucket])) *)(________p1)); });

  while (n) {
   if (!net_eq(dev_net(n->dev), net))
    goto next;
   if (state->neigh_sub_iter) {
    loff_t fakep = 0;
    void *v;

    v = state->neigh_sub_iter(state, n, &fakep);
    if (!v)
     goto next;
   }
   if (!(state->flags & 0x00000004))
    break;
   if (n->nud_state & ~0x40)
    break;
next:
   n = ({ typeof(*(n->next)) *________p1 = (typeof(*(n->next)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_411(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_411(); } while (0); (*(const volatile typeof( _Generic(((n->next)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((n->next)))) *)&((n->next))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(n->next)) *)(________p1)); });
  }

  if (n)
   break;
 }
 state->bucket = bucket;

 return n;
}

static struct neighbour *neigh_get_next(struct seq_file *seq,
     struct neighbour *n,
     loff_t *pos)
{
 struct neigh_seq_state *state = seq->private;
 struct net *net = seq_file_net(seq);
 struct neigh_hash_table *nht = state->nht;

 if (state->neigh_sub_iter) {
  void *v = state->neigh_sub_iter(state, n, pos);
  if (v)
   return n;
 }
 n = ({ typeof(*(n->next)) *________p1 = (typeof(*(n->next)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_412(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_412(); } while (0); (*(const volatile typeof( _Generic(((n->next)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((n->next)))) *)&((n->next))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(n->next)) *)(________p1)); });

 while (1) {
  while (n) {
   if (!net_eq(dev_net(n->dev), net))
    goto next;
   if (state->neigh_sub_iter) {
    void *v = state->neigh_sub_iter(state, n, pos);
    if (v)
     return n;
    goto next;
   }
   if (!(state->flags & 0x00000004))
    break;

   if (n->nud_state & ~0x40)
    break;
next:
   n = ({ typeof(*(n->next)) *________p1 = (typeof(*(n->next)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_413(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((n->next)) == sizeof(char) || sizeof((n->next)) == sizeof(short) || sizeof((n->next)) == sizeof(int) || sizeof((n->next)) == sizeof(long)) || sizeof((n->next)) == sizeof(long long))) __compiletime_assert_413(); } while (0); (*(const volatile typeof( _Generic(((n->next)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((n->next)))) *)&((n->next))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(n->next)) *)(________p1)); });
  }

  if (n)
   break;

  if (++state->bucket >= (1 << nht->hash_shift))
   break;

  n = ({ typeof(*(nht->hash_buckets[state->bucket])) *________p1 = (typeof(*(nht->hash_buckets[state->bucket])) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_414(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((nht->hash_buckets[state->bucket])) == sizeof(char) || sizeof((nht->hash_buckets[state->bucket])) == sizeof(short) || sizeof((nht->hash_buckets[state->bucket])) == sizeof(int) || sizeof((nht->hash_buckets[state->bucket])) == sizeof(long)) || sizeof((nht->hash_buckets[state->bucket])) == sizeof(long long))) __compiletime_assert_414(); } while (0); (*(const volatile typeof( _Generic(((nht->hash_buckets[state->bucket])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((nht->hash_buckets[state->bucket])))) *)&((nht->hash_buckets[state->bucket]))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(nht->hash_buckets[state->bucket])) *)(________p1)); });
 }

 if (n && pos)
  --(*pos);
 return n;
}

static struct neighbour *neigh_get_idx(struct seq_file *seq, loff_t *pos)
{
 struct neighbour *n = neigh_get_first(seq);

 if (n) {
  --(*pos);
  while (*pos) {
   n = neigh_get_next(seq, n, pos);
   if (!n)
    break;
  }
 }
 return *pos ? ((void *)0) : n;
}

static struct pneigh_entry *pneigh_get_first(struct seq_file *seq)
{
 struct neigh_seq_state *state = seq->private;
 struct net *net = seq_file_net(seq);
 struct neigh_table *tbl = state->tbl;
 struct pneigh_entry *pn = ((void *)0);
 int bucket;

 state->flags |= 0x00000002;
 for (bucket = 0; bucket <= 0xF; bucket++) {
  pn = tbl->phash_buckets[bucket];
  while (pn && !net_eq(pneigh_net(pn), net))
   pn = pn->next;
  if (pn)
   break;
 }
 state->bucket = bucket;

 return pn;
}

static struct pneigh_entry *pneigh_get_next(struct seq_file *seq,
         struct pneigh_entry *pn,
         loff_t *pos)
{
 struct neigh_seq_state *state = seq->private;
 struct net *net = seq_file_net(seq);
 struct neigh_table *tbl = state->tbl;

 do {
  pn = pn->next;
 } while (pn && !net_eq(pneigh_net(pn), net));

 while (!pn) {
  if (++state->bucket > 0xF)
   break;
  pn = tbl->phash_buckets[state->bucket];
  while (pn && !net_eq(pneigh_net(pn), net))
   pn = pn->next;
  if (pn)
   break;
 }

 if (pn && pos)
  --(*pos);

 return pn;
}

static struct pneigh_entry *pneigh_get_idx(struct seq_file *seq, loff_t *pos)
{
 struct pneigh_entry *pn = pneigh_get_first(seq);

 if (pn) {
  --(*pos);
  while (*pos) {
   pn = pneigh_get_next(seq, pn, pos);
   if (!pn)
    break;
  }
 }
 return *pos ? ((void *)0) : pn;
}

static void *neigh_get_idx_any(struct seq_file *seq, loff_t *pos)
{
 struct neigh_seq_state *state = seq->private;
 void *rc;
 loff_t idxpos = *pos;

 rc = neigh_get_idx(seq, &idxpos);
 if (!rc && !(state->flags & 0x00000001))
  rc = pneigh_get_idx(seq, &idxpos);

 return rc;
}

void *neigh_seq_start(struct seq_file *seq, loff_t *pos, struct neigh_table *tbl, unsigned int neigh_seq_flags)


{
 struct neigh_seq_state *state = seq->private;

 state->tbl = tbl;
 state->bucket = 0;
 state->flags = (neigh_seq_flags & ~0x00000002);

 rcu_read_lock_bh();
 state->nht = ({ typeof(*(tbl->nht)) *________p1 = (typeof(*(tbl->nht)) *)({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_415(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tbl->nht)) == sizeof(char) || sizeof((tbl->nht)) == sizeof(short) || sizeof((tbl->nht)) == sizeof(int) || sizeof((tbl->nht)) == sizeof(long)) || sizeof((tbl->nht)) == sizeof(long long))) __compiletime_assert_415(); } while (0); (*(const volatile typeof( _Generic(((tbl->nht)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tbl->nht)))) *)&((tbl->nht))); }); do { } while (0 && (!((0) || rcu_read_lock_bh_held()))); ; ((typeof(*(tbl->nht)) *)(________p1)); });
 _raw_read_lock(&tbl->lock);

 return *pos ? neigh_get_idx_any(seq, pos) : ((void *)1);
}
extern typeof(neigh_seq_start) neigh_seq_start; extern const char __kstrtab_neigh_seq_start[]; extern const char __kstrtabns_neigh_seq_start[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_seq_start" ":					\n" "	.asciz 	\"" "neigh_seq_start" "\"					\n" "__kstrtabns_" "neigh_seq_start" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_seq_start416 = (void *)&neigh_seq_start; asm("	.section \"___ksymtab" "" "+" "neigh_seq_start" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_seq_start" ":				\n" "	.long	" "neigh_seq_start" "- .				\n" "	.long	__kstrtab_" "neigh_seq_start" "- .			\n" "	.long	__kstrtabns_" "neigh_seq_start" "- .			\n" "	.previous					\n");

void *neigh_seq_next(struct seq_file *seq, void *v, loff_t *pos)
{
 struct neigh_seq_state *state;
 void *rc;

 if (v == ((void *)1)) {
  rc = neigh_get_first(seq);
  goto out;
 }

 state = seq->private;
 if (!(state->flags & 0x00000002)) {
  rc = neigh_get_next(seq, v, ((void *)0));
  if (rc)
   goto out;
  if (!(state->flags & 0x00000001))
   rc = pneigh_get_first(seq);
 } else {
  do { if (__builtin_expect(!!(state->flags & 0x00000001), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 3366; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
  rc = pneigh_get_next(seq, v, ((void *)0));
 }
out:
 ++(*pos);
 return rc;
}
extern typeof(neigh_seq_next) neigh_seq_next; extern const char __kstrtab_neigh_seq_next[]; extern const char __kstrtabns_neigh_seq_next[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_seq_next" ":					\n" "	.asciz 	\"" "neigh_seq_next" "\"					\n" "__kstrtabns_" "neigh_seq_next" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_seq_next417 = (void *)&neigh_seq_next; asm("	.section \"___ksymtab" "" "+" "neigh_seq_next" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_seq_next" ":				\n" "	.long	" "neigh_seq_next" "- .				\n" "	.long	__kstrtab_" "neigh_seq_next" "- .			\n" "	.long	__kstrtabns_" "neigh_seq_next" "- .			\n" "	.previous					\n");

void neigh_seq_stop(struct seq_file *seq, void *v)


{
 struct neigh_seq_state *state = seq->private;
 struct neigh_table *tbl = state->tbl;

 _raw_read_unlock(&tbl->lock);
 rcu_read_unlock_bh();
}
extern typeof(neigh_seq_stop) neigh_seq_stop; extern const char __kstrtab_neigh_seq_stop[]; extern const char __kstrtabns_neigh_seq_stop[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_seq_stop" ":					\n" "	.asciz 	\"" "neigh_seq_stop" "\"					\n" "__kstrtabns_" "neigh_seq_stop" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_seq_stop418 = (void *)&neigh_seq_stop; asm("	.section \"___ksymtab" "" "+" "neigh_seq_stop" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_seq_stop" ":				\n" "	.long	" "neigh_seq_stop" "- .				\n" "	.long	__kstrtab_" "neigh_seq_stop" "- .			\n" "	.long	__kstrtabns_" "neigh_seq_stop" "- .			\n" "	.previous					\n");



static void *neigh_stat_seq_start(struct seq_file *seq, loff_t *pos)
{
 struct neigh_table *tbl = PDE_DATA(file_inode(seq->file));
 int cpu;

 if (*pos == 0)
  return ((void *)1);

 for (cpu = *pos-1; cpu < nr_cpu_ids; ++cpu) {
  if (!cpu_possible(cpu))
   continue;
  *pos = cpu+1;
  return ({ do { const void *__vpp_verify = (typeof((tbl->stats) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((tbl->stats))) *)((tbl->stats))); (typeof((typeof(*((tbl->stats))) *)((tbl->stats)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); });
 }
 return ((void *)0);
}

static void *neigh_stat_seq_next(struct seq_file *seq, void *v, loff_t *pos)
{
 struct neigh_table *tbl = PDE_DATA(file_inode(seq->file));
 int cpu;

 for (cpu = *pos; cpu < nr_cpu_ids; ++cpu) {
  if (!cpu_possible(cpu))
   continue;
  *pos = cpu+1;
  return ({ do { const void *__vpp_verify = (typeof((tbl->stats) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((tbl->stats))) *)((tbl->stats))); (typeof((typeof(*((tbl->stats))) *)((tbl->stats)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); });
 }
 (*pos)++;
 return ((void *)0);
}

static void neigh_stat_seq_stop(struct seq_file *seq, void *v)
{

}

static int neigh_stat_seq_show(struct seq_file *seq, void *v)
{
 struct neigh_table *tbl = PDE_DATA(file_inode(seq->file));
 struct neigh_statistics *st = v;

 if (v == ((void *)1)) {
  seq_puts(seq, "entries  allocs   destroys hash_grows lookups  hits     res_failed rcv_probes_mcast rcv_probes_ucast periodic_gc_runs forced_gc_runs unresolved_discards table_fulls\n");
  return 0;
 }

 seq_printf(seq, "%08x %08lx %08lx %08lx   %08lx %08lx %08lx   "
   "%08lx         %08lx         %08lx         "
   "%08lx       %08lx            %08lx\n",
     atomic_read(&tbl->entries),

     st->allocs,
     st->destroys,
     st->hash_grows,

     st->lookups,
     st->hits,

     st->res_failed,

     st->rcv_probes_mcast,
     st->rcv_probes_ucast,

     st->periodic_gc_runs,
     st->forced_gc_runs,
     st->unres_discards,
     st->table_fulls
     );

 return 0;
}

static const struct seq_operations neigh_stat_seq_ops = {
 .start = neigh_stat_seq_start,
 .next = neigh_stat_seq_next,
 .stop = neigh_stat_seq_stop,
 .show = neigh_stat_seq_show,
};


static void __neigh_notify(struct neighbour *n, int type, int flags,
      u32 pid)
{
 struct net *net = dev_net(n->dev);
 struct sk_buff *skb;
 int err = -105;

 skb = nlmsg_new(neigh_nlmsg_size(), ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 if (skb == ((void *)0))
  goto errout;

 err = neigh_fill_info(skb, n, pid, 0, type, flags);
 if (err < 0) {

  ({ int __ret_warn_on = !!(err == -90); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 3484; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
  kfree_skb(skb);
  goto errout;
 }
 rtnl_notify(skb, net, 0, RTNLGRP_NEIGH, ((void *)0), ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
 return;
errout:
 if (err < 0)
  rtnl_set_sk_err(net, RTNLGRP_NEIGH, err);
}

void neigh_app_ns(struct neighbour *n)
{
 __neigh_notify(n, RTM_GETNEIGH, 0x01, 0);
}
extern typeof(neigh_app_ns) neigh_app_ns; extern const char __kstrtab_neigh_app_ns[]; extern const char __kstrtabns_neigh_app_ns[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_app_ns" ":					\n" "	.asciz 	\"" "neigh_app_ns" "\"					\n" "__kstrtabns_" "neigh_app_ns" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_app_ns419 = (void *)&neigh_app_ns; asm("	.section \"___ksymtab" "" "+" "neigh_app_ns" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_app_ns" ":				\n" "	.long	" "neigh_app_ns" "- .				\n" "	.long	__kstrtab_" "neigh_app_ns" "- .			\n" "	.long	__kstrtabns_" "neigh_app_ns" "- .			\n" "	.previous					\n");


static int unres_qlen_max = ((int)(~0U >> 1)) / ((1514) + ((((sizeof(struct sk_buff))) + ((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) + ((((sizeof(struct skb_shared_info))) + ((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)));

static int proc_unres_qlen(struct ctl_table *ctl, int write,
      void *buffer, size_t *lenp, loff_t *ppos)
{
 int size, ret;
 struct ctl_table tmp = *ctl;

 tmp.extra1 = ((void *)&sysctl_vals[0]);
 tmp.extra2 = &unres_qlen_max;
 tmp.data = &size;

 size = *(int *)ctl->data / ((1514) + ((((sizeof(struct sk_buff))) + ((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) + ((((sizeof(struct skb_shared_info))) + ((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)));
 ret = proc_dointvec_minmax(&tmp, write, buffer, lenp, ppos);

 if (write && !ret)
  *(int *)ctl->data = size * ((1514) + ((((sizeof(struct sk_buff))) + ((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct sk_buff))))(((1 << (6)))) - 1)) + ((((sizeof(struct skb_shared_info))) + ((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)) & ~((typeof((sizeof(struct skb_shared_info))))(((1 << (6)))) - 1)));
 return ret;
}

static struct neigh_parms *neigh_get_dev_parms_rcu(struct net_device *dev,
         int family)
{
 switch (family) {
 case 2:
  return __in_dev_arp_parms_get_rcu(dev);
 case 10:
  return __in6_dev_nd_parms_get_rcu(dev);
 }
 return ((void *)0);
}

static void neigh_copy_dflt_parms(struct net *net, struct neigh_parms *p,
      int index)
{
 struct net_device *dev;
 int family = neigh_parms_family(p);

 rcu_read_lock();
 for (({ ; }), dev = ({ void *__mptr = (void *)(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_420(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(net)->dev_base_head)->next) == sizeof(char) || sizeof((&(net)->dev_base_head)->next) == sizeof(short) || sizeof((&(net)->dev_base_head)->next) == sizeof(int) || sizeof((&(net)->dev_base_head)->next) == sizeof(long)) || sizeof((&(net)->dev_base_head)->next) == sizeof(long long))) __compiletime_assert_420(); } while (0); (*(const volatile typeof( _Generic(((&(net)->dev_base_head)->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(net)->dev_base_head)->next))) *)&((&(net)->dev_base_head)->next)); })); _Static_assert(__builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_420(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(net)->dev_base_head)->next) == sizeof(char) || sizeof((&(net)->dev_base_head)->next) == sizeof(short) || sizeof((&(net)->dev_base_head)->next) == sizeof(int) || sizeof((&(net)->dev_base_head)->next) == sizeof(long)) || sizeof((&(net)->dev_base_head)->next) == sizeof(long long))) __compiletime_assert_420(); } while (0); (*(const volatile typeof( _Generic(((&(net)->dev_base_head)->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(net)->dev_base_head)->next))) *)&((&(net)->dev_base_head)->next)); }))), typeof(((typeof(*dev) *)0)->dev_list)) || __builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_420(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&(net)->dev_base_head)->next) == sizeof(char) || sizeof((&(net)->dev_base_head)->next) == sizeof(short) || sizeof((&(net)->dev_base_head)->next) == sizeof(int) || sizeof((&(net)->dev_base_head)->next) == sizeof(long)) || sizeof((&(net)->dev_base_head)->next) == sizeof(long long))) __compiletime_assert_420(); } while (0); (*(const volatile typeof( _Generic(((&(net)->dev_base_head)->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&(net)->dev_base_head)->next))) *)&((&(net)->dev_base_head)->next)); }))), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*dev) *)(__mptr - __builtin_offsetof(typeof(*dev), dev_list))); }); &dev->dev_list != (&(net)->dev_base_head); dev = ({ void *__mptr = (void *)(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_421(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dev->dev_list.next) == sizeof(char) || sizeof(dev->dev_list.next) == sizeof(short) || sizeof(dev->dev_list.next) == sizeof(int) || sizeof(dev->dev_list.next) == sizeof(long)) || sizeof(dev->dev_list.next) == sizeof(long long))) __compiletime_assert_421(); } while (0); (*(const volatile typeof( _Generic((dev->dev_list.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dev->dev_list.next))) *)&(dev->dev_list.next)); })); _Static_assert(__builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_421(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dev->dev_list.next) == sizeof(char) || sizeof(dev->dev_list.next) == sizeof(short) || sizeof(dev->dev_list.next) == sizeof(int) || sizeof(dev->dev_list.next) == sizeof(long)) || sizeof(dev->dev_list.next) == sizeof(long long))) __compiletime_assert_421(); } while (0); (*(const volatile typeof( _Generic((dev->dev_list.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dev->dev_list.next))) *)&(dev->dev_list.next)); }))), typeof(((typeof(*dev) *)0)->dev_list)) || __builtin_types_compatible_p(typeof(*(({ do { __attribute__((__noreturn__)) extern void __compiletime_assert_421(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dev->dev_list.next) == sizeof(char) || sizeof(dev->dev_list.next) == sizeof(short) || sizeof(dev->dev_list.next) == sizeof(int) || sizeof(dev->dev_list.next) == sizeof(long)) || sizeof(dev->dev_list.next) == sizeof(long long))) __compiletime_assert_421(); } while (0); (*(const volatile typeof( _Generic((dev->dev_list.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dev->dev_list.next))) *)&(dev->dev_list.next)); }))), typeof(void)), "pointer type mismatch in container_of()"); ((typeof(*dev) *)(__mptr - __builtin_offsetof(typeof(*dev), dev_list))); })) {
  struct neigh_parms *dst_p =
    neigh_get_dev_parms_rcu(dev, family);

  if (dst_p && !arch_test_bit(index, dst_p->data_state))
   dst_p->data[index] = p->data[index];
 }
 rcu_read_unlock();
}

static void neigh_proc_update(struct ctl_table *ctl, int write)
{
 struct net_device *dev = ctl->extra1;
 struct neigh_parms *p = ctl->extra2;
 struct net *net = neigh_parms_net(p);
 int index = (int *) ctl->data - p->data;

 if (!write)
  return;

 set_bit(index, p->data_state);
 if (index == NEIGH_VAR_DELAY_PROBE_TIME)
  call_netevent_notifiers(NETEVENT_DELAY_PROBE_TIME_UPDATE, p);
 if (!dev)
  neigh_copy_dflt_parms(net, p, index);
}

static int neigh_proc_dointvec_zero_intmax(struct ctl_table *ctl, int write,
        void *buffer, size_t *lenp,
        loff_t *ppos)
{
 struct ctl_table tmp = *ctl;
 int ret;

 tmp.extra1 = ((void *)&sysctl_vals[0]);
 tmp.extra2 = ((void *)&sysctl_vals[2]);

 ret = proc_dointvec_minmax(&tmp, write, buffer, lenp, ppos);
 neigh_proc_update(ctl, write);
 return ret;
}

int neigh_proc_dointvec(struct ctl_table *ctl, int write, void *buffer,
   size_t *lenp, loff_t *ppos)
{
 int ret = proc_dointvec(ctl, write, buffer, lenp, ppos);

 neigh_proc_update(ctl, write);
 return ret;
}
extern typeof(neigh_proc_dointvec) neigh_proc_dointvec; extern const char __kstrtab_neigh_proc_dointvec[]; extern const char __kstrtabns_neigh_proc_dointvec[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_proc_dointvec" ":					\n" "	.asciz 	\"" "neigh_proc_dointvec" "\"					\n" "__kstrtabns_" "neigh_proc_dointvec" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_proc_dointvec422 = (void *)&neigh_proc_dointvec; asm("	.section \"___ksymtab" "" "+" "neigh_proc_dointvec" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_proc_dointvec" ":				\n" "	.long	" "neigh_proc_dointvec" "- .				\n" "	.long	__kstrtab_" "neigh_proc_dointvec" "- .			\n" "	.long	__kstrtabns_" "neigh_proc_dointvec" "- .			\n" "	.previous					\n");

int neigh_proc_dointvec_jiffies(struct ctl_table *ctl, int write, void *buffer,
    size_t *lenp, loff_t *ppos)
{
 int ret = proc_dointvec_jiffies(ctl, write, buffer, lenp, ppos);

 neigh_proc_update(ctl, write);
 return ret;
}
extern typeof(neigh_proc_dointvec_jiffies) neigh_proc_dointvec_jiffies; extern const char __kstrtab_neigh_proc_dointvec_jiffies[]; extern const char __kstrtabns_neigh_proc_dointvec_jiffies[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_proc_dointvec_jiffies" ":					\n" "	.asciz 	\"" "neigh_proc_dointvec_jiffies" "\"					\n" "__kstrtabns_" "neigh_proc_dointvec_jiffies" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_proc_dointvec_jiffies423 = (void *)&neigh_proc_dointvec_jiffies; asm("	.section \"___ksymtab" "" "+" "neigh_proc_dointvec_jiffies" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_proc_dointvec_jiffies" ":				\n" "	.long	" "neigh_proc_dointvec_jiffies" "- .				\n" "	.long	__kstrtab_" "neigh_proc_dointvec_jiffies" "- .			\n" "	.long	__kstrtabns_" "neigh_proc_dointvec_jiffies" "- .			\n" "	.previous					\n");

static int neigh_proc_dointvec_userhz_jiffies(struct ctl_table *ctl, int write,
           void *buffer, size_t *lenp,
           loff_t *ppos)
{
 int ret = proc_dointvec_userhz_jiffies(ctl, write, buffer, lenp, ppos);

 neigh_proc_update(ctl, write);
 return ret;
}

int neigh_proc_dointvec_ms_jiffies(struct ctl_table *ctl, int write,
       void *buffer, size_t *lenp, loff_t *ppos)
{
 int ret = proc_dointvec_ms_jiffies(ctl, write, buffer, lenp, ppos);

 neigh_proc_update(ctl, write);
 return ret;
}
extern typeof(neigh_proc_dointvec_ms_jiffies) neigh_proc_dointvec_ms_jiffies; extern const char __kstrtab_neigh_proc_dointvec_ms_jiffies[]; extern const char __kstrtabns_neigh_proc_dointvec_ms_jiffies[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_proc_dointvec_ms_jiffies" ":					\n" "	.asciz 	\"" "neigh_proc_dointvec_ms_jiffies" "\"					\n" "__kstrtabns_" "neigh_proc_dointvec_ms_jiffies" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_proc_dointvec_ms_jiffies424 = (void *)&neigh_proc_dointvec_ms_jiffies; asm("	.section \"___ksymtab" "" "+" "neigh_proc_dointvec_ms_jiffies" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_proc_dointvec_ms_jiffies" ":				\n" "	.long	" "neigh_proc_dointvec_ms_jiffies" "- .				\n" "	.long	__kstrtab_" "neigh_proc_dointvec_ms_jiffies" "- .			\n" "	.long	__kstrtabns_" "neigh_proc_dointvec_ms_jiffies" "- .			\n" "	.previous					\n");

static int neigh_proc_dointvec_unres_qlen(struct ctl_table *ctl, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos)
{
 int ret = proc_unres_qlen(ctl, write, buffer, lenp, ppos);

 neigh_proc_update(ctl, write);
 return ret;
}

static int neigh_proc_base_reachable_time(struct ctl_table *ctl, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos)
{
 struct neigh_parms *p = ctl->extra2;
 int ret;

 if (strcmp(ctl->procname, "base_reachable_time") == 0)
  ret = neigh_proc_dointvec_jiffies(ctl, write, buffer, lenp, ppos);
 else if (strcmp(ctl->procname, "base_reachable_time_ms") == 0)
  ret = neigh_proc_dointvec_ms_jiffies(ctl, write, buffer, lenp, ppos);
 else
  ret = -1;

 if (write && ret == 0) {




  p->reachable_time =
   neigh_rand_reach_time(((p)->data[NEIGH_VAR_BASE_REACHABLE_TIME]));
 }
 return ret;
}
# 3685 "net/core/neighbour.c"
static struct neigh_sysctl_table {
 struct ctl_table_header *sysctl_header;
 struct ctl_table neigh_vars[NEIGH_VAR_MAX + 1];
} neigh_sysctl_template __attribute__((__section__(".data..read_mostly"))) = {
 .neigh_vars = {
  [NEIGH_VAR_MCAST_PROBES] = { .procname = "mcast_solicit", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_MCAST_PROBES]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_zero_intmax, },
  [NEIGH_VAR_UCAST_PROBES] = { .procname = "ucast_solicit", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_UCAST_PROBES]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_zero_intmax, },
  [NEIGH_VAR_APP_PROBES] = { .procname = "app_solicit", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_APP_PROBES]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_zero_intmax, },
  [NEIGH_VAR_MCAST_REPROBES] = { .procname = "mcast_resolicit", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_MCAST_REPROBES]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_zero_intmax, },
  [NEIGH_VAR_RETRANS_TIME] = { .procname = "retrans_time", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_RETRANS_TIME]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_userhz_jiffies, },
  [NEIGH_VAR_BASE_REACHABLE_TIME] = { .procname = "base_reachable_time", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_BASE_REACHABLE_TIME]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_jiffies, },
  [NEIGH_VAR_DELAY_PROBE_TIME] = { .procname = "delay_first_probe_time", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_DELAY_PROBE_TIME]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_jiffies, },
  [NEIGH_VAR_GC_STALETIME] = { .procname = "gc_stale_time", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_GC_STALETIME]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_jiffies, },
  [NEIGH_VAR_QUEUE_LEN_BYTES] = { .procname = "unres_qlen_bytes", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_QUEUE_LEN_BYTES]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_zero_intmax, },
  [NEIGH_VAR_PROXY_QLEN] = { .procname = "proxy_qlen", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_PROXY_QLEN]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_zero_intmax, },
  [NEIGH_VAR_ANYCAST_DELAY] = { .procname = "anycast_delay", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_ANYCAST_DELAY]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_userhz_jiffies, },
  [NEIGH_VAR_PROXY_DELAY] = { .procname = "proxy_delay", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_PROXY_DELAY]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_userhz_jiffies, },
  [NEIGH_VAR_LOCKTIME] = { .procname = "locktime", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_LOCKTIME]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_userhz_jiffies, },
  [NEIGH_VAR_QUEUE_LEN] = { .procname = "unres_qlen", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_QUEUE_LEN_BYTES]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_unres_qlen, },
  [NEIGH_VAR_RETRANS_TIME_MS] = { .procname = "retrans_time_ms", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_RETRANS_TIME]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_ms_jiffies, },
  [NEIGH_VAR_BASE_REACHABLE_TIME_MS] = { .procname = "base_reachable_time_ms", .data = (&((struct neigh_parms *) 0)->data[NEIGH_VAR_BASE_REACHABLE_TIME]), .maxlen = sizeof(int), .mode = 0644, .proc_handler = neigh_proc_dointvec_ms_jiffies, },
  [NEIGH_VAR_GC_INTERVAL] = {
   .procname = "gc_interval",
   .maxlen = sizeof(int),
   .mode = 0644,
   .proc_handler = proc_dointvec_jiffies,
  },
  [NEIGH_VAR_GC_THRESH1] = {
   .procname = "gc_thresh1",
   .maxlen = sizeof(int),
   .mode = 0644,
   .extra1 = ((void *)&sysctl_vals[0]),
   .extra2 = ((void *)&sysctl_vals[2]),
   .proc_handler = proc_dointvec_minmax,
  },
  [NEIGH_VAR_GC_THRESH2] = {
   .procname = "gc_thresh2",
   .maxlen = sizeof(int),
   .mode = 0644,
   .extra1 = ((void *)&sysctl_vals[0]),
   .extra2 = ((void *)&sysctl_vals[2]),
   .proc_handler = proc_dointvec_minmax,
  },
  [NEIGH_VAR_GC_THRESH3] = {
   .procname = "gc_thresh3",
   .maxlen = sizeof(int),
   .mode = 0644,
   .extra1 = ((void *)&sysctl_vals[0]),
   .extra2 = ((void *)&sysctl_vals[2]),
   .proc_handler = proc_dointvec_minmax,
  },
  {},
 },
};

int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
     proc_handler *handler)
{
 int i;
 struct neigh_sysctl_table *t;
 const char *dev_name_source;
 char neigh_path[ sizeof("net//neigh/") + 16 + 16 ];
 char *p_name;

 t = kmemdup(&neigh_sysctl_template, sizeof(*t), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!t)
  goto err;

 for (i = 0; i < NEIGH_VAR_GC_INTERVAL; i++) {
  t->neigh_vars[i].data += (long) p;
  t->neigh_vars[i].extra1 = dev;
  t->neigh_vars[i].extra2 = p;
 }

 if (dev) {
  dev_name_source = dev->name;

  memset(&t->neigh_vars[NEIGH_VAR_GC_INTERVAL], 0,
         sizeof(t->neigh_vars[NEIGH_VAR_GC_INTERVAL]));
 } else {
  struct neigh_table *tbl = p->tbl;
  dev_name_source = "default";
  t->neigh_vars[NEIGH_VAR_GC_INTERVAL].data = &tbl->gc_interval;
  t->neigh_vars[NEIGH_VAR_GC_THRESH1].data = &tbl->gc_thresh1;
  t->neigh_vars[NEIGH_VAR_GC_THRESH2].data = &tbl->gc_thresh2;
  t->neigh_vars[NEIGH_VAR_GC_THRESH3].data = &tbl->gc_thresh3;
 }

 if (handler) {

  t->neigh_vars[NEIGH_VAR_RETRANS_TIME].proc_handler = handler;

  t->neigh_vars[NEIGH_VAR_BASE_REACHABLE_TIME].proc_handler = handler;

  t->neigh_vars[NEIGH_VAR_RETRANS_TIME_MS].proc_handler = handler;

  t->neigh_vars[NEIGH_VAR_BASE_REACHABLE_TIME_MS].proc_handler = handler;
 } else {







  t->neigh_vars[NEIGH_VAR_BASE_REACHABLE_TIME].proc_handler =
   neigh_proc_base_reachable_time;

  t->neigh_vars[NEIGH_VAR_BASE_REACHABLE_TIME_MS].proc_handler =
   neigh_proc_base_reachable_time;
 }


 if (neigh_parms_net(p)->user_ns != &init_user_ns)
  t->neigh_vars[0].procname = ((void *)0);

 switch (neigh_parms_family(p)) {
 case 2:
       p_name = "ipv4";
       break;
 case 10:
       p_name = "ipv6";
       break;
 default:
       do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"net/core/neighbour.c\"; .popsection; .long 14472b - 14470b; .short 3809; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
 }

 snprintf(neigh_path, sizeof(neigh_path), "net/%s/neigh/%s",
  p_name, dev_name_source);
 t->sysctl_header =
  register_net_sysctl(neigh_parms_net(p), neigh_path, t->neigh_vars);
 if (!t->sysctl_header)
  goto free;

 p->sysctl_table = t;
 return 0;

free:
 kfree(t);
err:
 return -105;
}
extern typeof(neigh_sysctl_register) neigh_sysctl_register; extern const char __kstrtab_neigh_sysctl_register[]; extern const char __kstrtabns_neigh_sysctl_register[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_sysctl_register" ":					\n" "	.asciz 	\"" "neigh_sysctl_register" "\"					\n" "__kstrtabns_" "neigh_sysctl_register" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_sysctl_register425 = (void *)&neigh_sysctl_register; asm("	.section \"___ksymtab" "" "+" "neigh_sysctl_register" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_sysctl_register" ":				\n" "	.long	" "neigh_sysctl_register" "- .				\n" "	.long	__kstrtab_" "neigh_sysctl_register" "- .			\n" "	.long	__kstrtabns_" "neigh_sysctl_register" "- .			\n" "	.previous					\n");

void neigh_sysctl_unregister(struct neigh_parms *p)
{
 if (p->sysctl_table) {
  struct neigh_sysctl_table *t = p->sysctl_table;
  p->sysctl_table = ((void *)0);
  unregister_net_sysctl_table(t->sysctl_header);
  kfree(t);
 }
}
extern typeof(neigh_sysctl_unregister) neigh_sysctl_unregister; extern const char __kstrtab_neigh_sysctl_unregister[]; extern const char __kstrtabns_neigh_sysctl_unregister[]; ; asm("	.section \"__ksymtab_strings\",\"aMS\",%progbits,1	\n" "__kstrtab_" "neigh_sysctl_unregister" ":					\n" "	.asciz 	\"" "neigh_sysctl_unregister" "\"					\n" "__kstrtabns_" "neigh_sysctl_unregister" ":					\n" "	.asciz 	\"" "" "\"					\n" "	.previous						\n"); static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_sysctl_unregister426 = (void *)&neigh_sysctl_unregister; asm("	.section \"___ksymtab" "" "+" "neigh_sysctl_unregister" "\", \"a\"	\n" "	.balign	4					\n" "__ksymtab_" "neigh_sysctl_unregister" ":				\n" "	.long	" "neigh_sysctl_unregister" "- .				\n" "	.long	__kstrtab_" "neigh_sysctl_unregister" "- .			\n" "	.long	__kstrtabns_" "neigh_sysctl_unregister" "- .			\n" "	.previous					\n");



static int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) neigh_init(void)
{
 rtnl_register(0, RTM_NEWNEIGH, neigh_add, ((void *)0), 0);
 rtnl_register(0, RTM_DELNEIGH, neigh_delete, ((void *)0), 0);
 rtnl_register(0, RTM_GETNEIGH, neigh_get, neigh_dump_info, 0);

 rtnl_register(0, RTM_GETNEIGHTBL, ((void *)0), neightbl_dump_info,
        0);
 rtnl_register(0, RTM_SETNEIGHTBL, neightbl_set, ((void *)0), 0);

 return 0;
}

static void * __attribute__((__section__(".discard.addressable"))) __attribute__((__used__)) __UNIQUE_ID___addressable_neigh_init428 = (void *)&neigh_init; asm(".section	\"" ".initcall4" ".init" "\", \"a\"		\n" "__initcall__kmod_neighbour__427_3855_neigh_init4" ":			\n" ".long	" "neigh_init" " - .	\n" ".previous					\n"); _Static_assert(__builtin_types_compatible_p(typeof(initcall_t), typeof(&neigh_init)), "__same_type(initcall_t, &neigh_init)");;
